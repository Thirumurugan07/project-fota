
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d2c  08008d2c  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008d2c  08008d2c  00009d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d34  08008d34  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d34  08008d34  00009d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008d3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000068  08008da4  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08008da4  0000a758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014620  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c8  00000000  00000000  0001e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00021b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee1  00000000  00000000  00022e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183a4  00000000  00000000  00023d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017930  00000000  00000000  0003c115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094740  00000000  00000000  00053a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8185  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005800  00000000  00000000  000e81c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ed9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008424 	.word	0x08008424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08008424 	.word	0x08008424

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <int_to_str>:
  * @brief  Convert an Integer to a string
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void int_to_str(uint8_t* p_str, uint32_t intNum) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, divider = 1000000000,pos = 0, status = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <int_to_str+0x94>)
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]

	for (i = 0;i < 10;i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e02e      	b.n	80005ee <int_to_str+0x7e>
		p_str[pos++] = (intNum/divider) + 48;
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	fbb2 f3f3 	udiv	r3, r2, r3
 8000598:	b2da      	uxtb	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1c59      	adds	r1, r3, #1
 800059e:	60f9      	str	r1, [r7, #12]
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	440b      	add	r3, r1
 80005a4:	3230      	adds	r2, #48	@ 0x30
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	701a      	strb	r2, [r3, #0]
		intNum %= divider;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80005b2:	6939      	ldr	r1, [r7, #16]
 80005b4:	fb01 f202 	mul.w	r2, r1, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
		divider /= 10;
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <int_to_str+0x98>)
 80005c0:	fba2 2303 	umull	r2, r3, r2, r3
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	613b      	str	r3, [r7, #16]
		if ((p_str[pos-1] == '0') || (status == 0)) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b30      	cmp	r3, #48	@ 0x30
 80005d4:	d002      	beq.n	80005dc <int_to_str+0x6c>
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <int_to_str+0x72>
			pos = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <int_to_str+0x78>
		}
		else {
			status++;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
	for (i = 0;i < 10;i++) {
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	d9cd      	bls.n	8000590 <int_to_str+0x20>
		}
	}
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	3b9aca00 	.word	0x3b9aca00
 8000608:	cccccccd 	.word	0xcccccccd

0800060c <str_to_int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */

uint32_t str_to_int(uint8_t *p_inputStr, uint32_t* p_intNum) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, res = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
	  uint32_t val = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]

	  if ((p_inputStr[0] == '0') && ((p_inputStr[1] == 'x') || (p_inputStr[1] == 'X')))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b30      	cmp	r3, #48	@ 0x30
 8000628:	f040 80d7 	bne.w	80007da <str_to_int+0x1ce>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b78      	cmp	r3, #120	@ 0x78
 8000634:	d005      	beq.n	8000642 <str_to_int+0x36>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b58      	cmp	r3, #88	@ 0x58
 800063e:	f040 80cc 	bne.w	80007da <str_to_int+0x1ce>
	  {
	    i = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000646:	e057      	b.n	80006f8 <str_to_int+0xec>
	    {
	      if (IS_VALID_HEX(p_inputStr[i]))
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b40      	cmp	r3, #64	@ 0x40
 8000652:	d905      	bls.n	8000660 <str_to_int+0x54>
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b46      	cmp	r3, #70	@ 0x46
 800065e:	d917      	bls.n	8000690 <str_to_int+0x84>
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b60      	cmp	r3, #96	@ 0x60
 800066a:	d905      	bls.n	8000678 <str_to_int+0x6c>
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b66      	cmp	r3, #102	@ 0x66
 8000676:	d90b      	bls.n	8000690 <str_to_int+0x84>
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b2f      	cmp	r3, #47	@ 0x2f
 8000682:	d936      	bls.n	80006f2 <str_to_int+0xe6>
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b39      	cmp	r3, #57	@ 0x39
 800068e:	d830      	bhi.n	80006f2 <str_to_int+0xe6>
	      {
	        val = (val << 4) + CONVERTHEX(p_inputStr[i]);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	440a      	add	r2, r1
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	2a2f      	cmp	r2, #47	@ 0x2f
 800069e:	d90b      	bls.n	80006b8 <str_to_int+0xac>
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	440a      	add	r2, r1
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	2a39      	cmp	r2, #57	@ 0x39
 80006aa:	d805      	bhi.n	80006b8 <str_to_int+0xac>
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	440a      	add	r2, r1
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	3a30      	subs	r2, #48	@ 0x30
 80006b6:	e016      	b.n	80006e6 <str_to_int+0xda>
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	440a      	add	r2, r1
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a40      	cmp	r2, #64	@ 0x40
 80006c2:	d90b      	bls.n	80006dc <str_to_int+0xd0>
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	440a      	add	r2, r1
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	2a46      	cmp	r2, #70	@ 0x46
 80006ce:	d805      	bhi.n	80006dc <str_to_int+0xd0>
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	440a      	add	r2, r1
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	3a37      	subs	r2, #55	@ 0x37
 80006da:	e004      	b.n	80006e6 <str_to_int+0xda>
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	440a      	add	r2, r1
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	3a57      	subs	r2, #87	@ 0x57
 80006e6:	4413      	add	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
	      {
	        /* Return 0, Invalid input */
	        res = 0;
	        break;
	      }
	      i++;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e002      	b.n	80006f8 <str_to_int+0xec>
	        res = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
	        break;
 80006f6:	e008      	b.n	800070a <str_to_int+0xfe>
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b0a      	cmp	r3, #10
 80006fc:	d805      	bhi.n	800070a <str_to_int+0xfe>
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d19e      	bne.n	8000648 <str_to_int+0x3c>
	    }

	    /* valid result */
	    if (p_inputStr[i] == '\0')
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d167      	bne.n	80007e6 <str_to_int+0x1da>
	    {
	      *p_intNum= val;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]
	      res = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
	    if (p_inputStr[i] == '\0')
 8000720:	e061      	b.n	80007e6 <str_to_int+0x1da>
	  }
	  else /* max 10-digit decimal input */
	  {
	    while ( ( i < 11 ) && ( res != 1 ) )
	    {
	      if (p_inputStr[i] == '\0')
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <str_to_int+0x12e>
	      {
	        *p_intNum = val;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	601a      	str	r2, [r3, #0]
	        /* return 1 */
	        res = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e04c      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'k') || (p_inputStr[i] == 'K')) && (i > 0))
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b6b      	cmp	r3, #107	@ 0x6b
 8000744:	d005      	beq.n	8000752 <str_to_int+0x146>
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000750:	d10b      	bne.n	800076a <str_to_int+0x15e>
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <str_to_int+0x15e>
	      {
	        val = val << 10;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	e034      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'm') || (p_inputStr[i] == 'M')) && (i > 0))
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b6d      	cmp	r3, #109	@ 0x6d
 8000774:	d005      	beq.n	8000782 <str_to_int+0x176>
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000780:	d10b      	bne.n	800079a <str_to_int+0x18e>
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d008      	beq.n	800079a <str_to_int+0x18e>
	      {
	        val = val << 20;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	051b      	lsls	r3, r3, #20
 800078c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	e01c      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (ISVALIDDEC(p_inputStr[i]))
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a4:	d913      	bls.n	80007ce <str_to_int+0x1c2>
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	@ 0x39
 80007b0:	d80d      	bhi.n	80007ce <str_to_int+0x1c2>
	      {
	        val = val * 10 + CONVERTDEC(p_inputStr[i]);
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	440b      	add	r3, r1
 80007c8:	3b30      	subs	r3, #48	@ 0x30
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e002      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else
	      {
	        /* return 0, Invalid input */
	        res = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
	        break;
 80007d2:	e008      	b.n	80007e6 <str_to_int+0x1da>
	      }
	      i++;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( res != 1 ) )
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b0a      	cmp	r3, #10
 80007de:	d802      	bhi.n	80007e6 <str_to_int+0x1da>
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d19d      	bne.n	8000722 <str_to_int+0x116>
	    }
	  }

	  return res;
 80007e6:	693b      	ldr	r3, [r7, #16]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <serial_put_string>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */

void serial_put_string(uint8_t* p_string) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	 uint16_t length = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	81fb      	strh	r3, [r7, #14]

	  while (p_string[length] != '\0')
 8000800:	e002      	b.n	8000808 <serial_put_string+0x14>
	  {
	    length++;
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	81fb      	strh	r3, [r7, #14]
	  while (p_string[length] != '\0')
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f6      	bne.n	8000802 <serial_put_string+0xe>
	  }
	  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000814:	89fa      	ldrh	r2, [r7, #14]
 8000816:	2364      	movs	r3, #100	@ 0x64
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <serial_put_string+0x34>)
 800081c:	f005 fd94 	bl	8006348 <HAL_UART_Transmit>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000128 	.word	0x20000128

0800082c <serial_put_byte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */

HAL_StatusTypeDef serial_put_byte(uint8_t param) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	/* May be timeouted... */
	  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <serial_put_byte+0x34>)
 8000838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000840:	d103      	bne.n	800084a <serial_put_byte+0x1e>
	  {
	    UartHandle.gState = HAL_UART_STATE_READY;
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <serial_put_byte+0x34>)
 8000844:	2220      	movs	r2, #32
 8000846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  }
	  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 800084a:	1df9      	adds	r1, r7, #7
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	2201      	movs	r2, #1
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <serial_put_byte+0x34>)
 8000852:	f005 fd79 	bl	8006348 <HAL_UART_Transmit>
 8000856:	4603      	mov	r3, r0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000128 	.word	0x20000128

08000864 <get_sector>:
#include "ymodem/flash_if.h"



uint32_t get_sector(uint32_t Address)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if (Address < 0x08004000) return FLASH_SECTOR_0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <get_sector+0x78>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d201      	bcs.n	8000878 <get_sector+0x14>
 8000874:	2300      	movs	r3, #0
 8000876:	e02a      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08008000) return FLASH_SECTOR_1;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <get_sector+0x7c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d201      	bcs.n	8000884 <get_sector+0x20>
 8000880:	2301      	movs	r3, #1
 8000882:	e024      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x0800C000) return FLASH_SECTOR_2;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <get_sector+0x80>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d201      	bcs.n	8000890 <get_sector+0x2c>
 800088c:	2302      	movs	r3, #2
 800088e:	e01e      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08010000) return FLASH_SECTOR_3;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <get_sector+0x84>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d801      	bhi.n	800089c <get_sector+0x38>
 8000898:	2303      	movs	r3, #3
 800089a:	e018      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08020000) return FLASH_SECTOR_4;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <get_sector+0x88>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d801      	bhi.n	80008a8 <get_sector+0x44>
 80008a4:	2304      	movs	r3, #4
 80008a6:	e012      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08040000) return FLASH_SECTOR_5;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <get_sector+0x8c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d801      	bhi.n	80008b4 <get_sector+0x50>
 80008b0:	2305      	movs	r3, #5
 80008b2:	e00c      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08060000) return FLASH_SECTOR_6;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <get_sector+0x90>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d801      	bhi.n	80008c0 <get_sector+0x5c>
 80008bc:	2306      	movs	r3, #6
 80008be:	e006      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08080000) return FLASH_SECTOR_7;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <get_sector+0x94>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d801      	bhi.n	80008cc <get_sector+0x68>
 80008c8:	2307      	movs	r3, #7
 80008ca:	e000      	b.n	80008ce <get_sector+0x6a>
  else return FLASH_SECTOR_7; // fallback
 80008cc:	2307      	movs	r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08004000 	.word	0x08004000
 80008e0:	08008000 	.word	0x08008000
 80008e4:	0800c000 	.word	0x0800c000
 80008e8:	0800ffff 	.word	0x0800ffff
 80008ec:	0801ffff 	.word	0x0801ffff
 80008f0:	0803ffff 	.word	0x0803ffff
 80008f4:	0805ffff 	.word	0x0805ffff
 80008f8:	0807ffff 	.word	0x0807ffff

080008fc <FLASH_IF_init>:
/**
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_IF_init(void) {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
/* Unlocking hte program memroy*/
	 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <FLASH_IF_init+0x14>)
 8000902:	2293      	movs	r2, #147	@ 0x93
 8000904:	60da      	str	r2, [r3, #12]
	                         FLASH_FLAG_PGSERR);


}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40023c00 	.word	0x40023c00

08000914 <FLASH_IF_erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */

uint32_t FLASH_IF_erase(uint32_t StartSector) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	@ 0x58
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef desc;
	uint32_t result = FLASHIF_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t sectorError;
	uint32_t userStartSector;

	  /* Unlock the Flash to enable the flash control register access *************/

	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000920:	f001 ff9a 	bl	8002858 <HAL_FLASH_Unlock>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <FLASH_IF_erase+0x20>
		serial_put_string((uint8_t*)"Erase failed at unlock itself 1");
 800092a:	481c      	ldr	r0, [pc, #112]	@ (800099c <FLASH_IF_erase+0x88>)
 800092c:	f7ff ff62 	bl	80007f4 <serial_put_string>
		result = FLASHIF_ERASEKO;
 8000930:	2301      	movs	r3, #1
 8000932:	657b      	str	r3, [r7, #84]	@ 0x54
	}
	FLASH_IF_init();
 8000934:	f7ff ffe2 	bl	80008fc <FLASH_IF_init>


	desc.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000938:	2300      	movs	r3, #0
 800093a:	643b      	str	r3, [r7, #64]	@ 0x40
	desc.Sector = get_sector(StartSector);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff91 	bl	8000864 <get_sector>
 8000942:	4603      	mov	r3, r0
 8000944:	64bb      	str	r3, [r7, #72]	@ 0x48
	desc.NbSectors = 3;
 8000946:	2303      	movs	r3, #3
 8000948:	64fb      	str	r3, [r7, #76]	@ 0x4c
	desc.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800094a:	2302      	movs	r3, #2
 800094c:	653b      	str	r3, [r7, #80]	@ 0x50

	if (StartSector < USER_FLASH_END_ADDRESS) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <FLASH_IF_erase+0x8c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d219      	bcs.n	800098a <FLASH_IF_erase+0x76>
		if (HAL_FLASHEx_Erase(&desc, &sectorError) != HAL_OK) {
 8000956:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800095a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f92b 	bl	8002bbc <HAL_FLASHEx_Erase>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d010      	beq.n	800098e <FLASH_IF_erase+0x7a>
			char msg[50];
			sprintf(msg, "Erase failed at sector: %lu\n", sectorError);
 800096c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <FLASH_IF_erase+0x90>)
 8000974:	4618      	mov	r0, r3
 8000976:	f006 fdf3 	bl	8007560 <siprintf>
			serial_put_string((uint8_t*)msg);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff38 	bl	80007f4 <serial_put_string>
			result = FLASHIF_ERASEKO;
 8000984:	2301      	movs	r3, #1
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
 8000988:	e001      	b.n	800098e <FLASH_IF_erase+0x7a>
		}


	}
	else result = FLASHIF_ERASEKO;
 800098a:	2301      	movs	r3, #1
 800098c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_FLASH_Lock();
 800098e:	f001 ff85 	bl	800289c <HAL_FLASH_Lock>
	return result;
 8000992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8000994:	4618      	mov	r0, r3
 8000996:	3758      	adds	r7, #88	@ 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800843c 	.word	0x0800843c
 80009a0:	0807ffff 	.word	0x0807ffff
 80009a4:	0800845c 	.word	0x0800845c

080009a8 <FLASH_IF_disable_all_protection>:


void FLASH_IF_disable_all_protection(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80009ae:	f001 ff53 	bl	8002858 <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80009b2:	f001 ff83 	bl	80028bc <HAL_FLASH_OB_Unlock>

    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASHEx_OBGetConfig(&OBInit);
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 f9db 	bl	8002d74 <HAL_FLASHEx_OBGetConfig>

    // Set RDP to Level 0 (no protection)
    OBInit.OptionType = OPTIONBYTE_RDP | OPTIONBYTE_WRP;
 80009be:	2303      	movs	r3, #3
 80009c0:	607b      	str	r3, [r7, #4]
    OBInit.RDPLevel = OB_RDP_LEVEL_0;
 80009c2:	23aa      	movs	r3, #170	@ 0xaa
 80009c4:	617b      	str	r3, [r7, #20]
    OBInit.WRPSector = 0xFFF; // All sectors
 80009c6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80009ca:	60fb      	str	r3, [r7, #12]
    OBInit.Banks = FLASH_BANK_1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
    OBInit.WRPState = OB_WRPSTATE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]

    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 f95e 	bl	8002c98 <HAL_FLASHEx_OBProgram>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <FLASH_IF_disable_all_protection+0x40>
        serial_put_string("Option byte programming failed!");
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <FLASH_IF_disable_all_protection+0x5c>)
 80009e4:	f7ff ff06 	bl	80007f4 <serial_put_string>
    }

    // Launch Option Bytes programming
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80009e8:	f001 ff94 	bl	8002914 <HAL_FLASH_OB_Launch>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <FLASH_IF_disable_all_protection+0x50>
    	serial_put_string((uint8_t*)"OB launch failed!");
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <FLASH_IF_disable_all_protection+0x60>)
 80009f4:	f7ff fefe 	bl	80007f4 <serial_put_string>
    }

    HAL_FLASH_OB_Lock();
 80009f8:	f001 ff7c 	bl	80028f4 <HAL_FLASH_OB_Lock>
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0800847c 	.word	0x0800847c
 8000a08:	0800849c 	.word	0x0800849c

08000a0c <FLASH_IF_write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */

uint32_t FLASH_IF_write(uint32_t destination, uint32_t* p_source, uint32_t length) {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	uint32_t status = FLASHIF_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8000a20:	f001 ff1a 	bl	8002858 <HAL_FLASH_Unlock>

	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	e026      	b.n	8000a78 <FLASH_IF_write+0x6c>
	        /* Word programming (32-bit) */
	        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(p_source + i)) == HAL_OK) {
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4413      	add	r3, r2
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	461c      	mov	r4, r3
 8000a38:	4615      	mov	r5, r2
 8000a3a:	4622      	mov	r2, r4
 8000a3c:	462b      	mov	r3, r5
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	2002      	movs	r0, #2
 8000a42:	f001 feb7 	bl	80027b4 <HAL_FLASH_Program>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10f      	bne.n	8000a6c <FLASH_IF_write+0x60>
	            /* Check the written value */
	            if (*(uint32_t*)destination != *(p_source + i)) {
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	440b      	add	r3, r1
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d002      	beq.n	8000a64 <FLASH_IF_write+0x58>
	                status = FLASHIF_WRITINGCTRL_ERROR;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
	                break;
 8000a62:	e011      	b.n	8000a88 <FLASH_IF_write+0x7c>
	            }
	            destination += 4; // Move to next word
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3304      	adds	r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e002      	b.n	8000a72 <FLASH_IF_write+0x66>
	        } else {
	            status = FLASHIF_WRITING_ERROR;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	617b      	str	r3, [r7, #20]
	            break;
 8000a70:	e00a      	b.n	8000a88 <FLASH_IF_write+0x7c>
	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	3301      	adds	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d203      	bcs.n	8000a88 <FLASH_IF_write+0x7c>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <FLASH_IF_write+0x8c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d9d0      	bls.n	8000a2a <FLASH_IF_write+0x1e>
	        }
	    }
	HAL_FLASH_Lock();
 8000a88:	f001 ff08 	bl	800289c <HAL_FLASH_Lock>

	return status;
 8000a8c:	697b      	ldr	r3, [r7, #20]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bdb0      	pop	{r4, r5, r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0807fffb 	.word	0x0807fffb

08000a9c <FLASH_IF_get_write_protection_status>:
  * @param  None
  * @retval If a sector in application area is write-protected returned value is a combination
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_IF_get_write_protection_status(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef config;
	uint32_t protected = FLASHIF_PROTECTION_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
	 /* Get the current configuration */
	HAL_FLASHEx_OBGetConfig(&config);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 f963 	bl	8002d74 <HAL_FLASHEx_OBGetConfig>

	 /* Get pages already write protected ****************************************/
	 /* Check if write protection is enabled for any sectors */
	if ((config.WRPState == OB_WRPSTATE_ENABLE) && (config.WRPSector & FLASH_SECTOR_TO_BE_PROTECTED)) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <FLASH_IF_get_write_protection_status+0x26>
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <FLASH_IF_get_write_protection_status+0x26>
		protected = FLASHIF_PROTECTION_WRPENABLED;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
	}
	return protected;
 8000ac2:	69fb      	ldr	r3, [r7, #28]

}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <FLASH_IF_write_protection_config>:
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */

uint32_t FLASH_IF_write_protection_config(uint32_t protectionState)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    FLASH_OBProgramInitTypeDef config;
    HAL_StatusTypeDef status;

    // Unlock the Flash to enable the flash control register access
    if (HAL_FLASH_Unlock() != HAL_OK) {
 8000ad4:	f001 fec0 	bl	8002858 <HAL_FLASH_Unlock>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <FLASH_IF_write_protection_config+0x1c>
        serial_put_string((uint8_t *)"Error: Failed to unlock Flash control register\r\n");
 8000ade:	4827      	ldr	r0, [pc, #156]	@ (8000b7c <FLASH_IF_write_protection_config+0xb0>)
 8000ae0:	f7ff fe88 	bl	80007f4 <serial_put_string>
        return FLASHIF_PROTECTION_ERROR;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e045      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    // Unlock the Option Bytes
    if (HAL_FLASH_OB_Unlock() != HAL_OK) {
 8000ae8:	f001 fee8 	bl	80028bc <HAL_FLASH_OB_Unlock>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <FLASH_IF_write_protection_config+0x34>
        serial_put_string((uint8_t *)"Error: Failed to unlock Option Bytes\r\n");
 8000af2:	4823      	ldr	r0, [pc, #140]	@ (8000b80 <FLASH_IF_write_protection_config+0xb4>)
 8000af4:	f7ff fe7e 	bl	80007f4 <serial_put_string>
        HAL_FLASH_Lock(); // Lock flash back before returning
 8000af8:	f001 fed0 	bl	800289c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000afc:	2304      	movs	r3, #4
 8000afe:	e039      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    // Prepare Option Bytes configuration
    config.OptionType = OPTIONBYTE_WRP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
    config.Banks = FLASH_BANK_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
    config.WRPSector = FLASH_SECTOR_TO_BE_PROTECTED;
 8000b08:	23e0      	movs	r3, #224	@ 0xe0
 8000b0a:	613b      	str	r3, [r7, #16]

    if (protectionState == FLASHIF_WRP_ENABLE) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <FLASH_IF_write_protection_config+0x4c>
        config.WRPState = OB_WRPSTATE_ENABLE;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e001      	b.n	8000b1c <FLASH_IF_write_protection_config+0x50>
    } else {
        config.WRPState = OB_WRPSTATE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
    }

    // Program the Option Bytes
    status = HAL_FLASHEx_OBProgram(&config);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 f8b9 	bl	8002c98 <HAL_FLASHEx_OBProgram>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d008      	beq.n	8000b46 <FLASH_IF_write_protection_config+0x7a>
        serial_put_string((uint8_t *)"Error: Failed to program Option Bytes\r\n");
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <FLASH_IF_write_protection_config+0xb8>)
 8000b36:	f7ff fe5d 	bl	80007f4 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b3a:	f001 fedb 	bl	80028f4 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b3e:	f001 fead 	bl	800289c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b42:	2304      	movs	r3, #4
 8000b44:	e016      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    // Launch Option Bytes loading (causes a system reset)
    status = HAL_FLASH_OB_Launch();
 8000b46:	f001 fee5 	bl	8002914 <HAL_FLASH_OB_Launch>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <FLASH_IF_write_protection_config+0x9e>
        serial_put_string((uint8_t *)"Error: Failed to launch Option Bytes reload\r\n");
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <FLASH_IF_write_protection_config+0xbc>)
 8000b5a:	f7ff fe4b 	bl	80007f4 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b5e:	f001 fec9 	bl	80028f4 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b62:	f001 fe9b 	bl	800289c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b66:	2304      	movs	r3, #4
 8000b68:	e004      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    HAL_FLASH_OB_Lock();
 8000b6a:	f001 fec3 	bl	80028f4 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000b6e:	f001 fe95 	bl	800289c <HAL_FLASH_Lock>

    return FLASHIF_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	080084b0 	.word	0x080084b0
 8000b80:	080084e4 	.word	0x080084e4
 8000b84:	0800850c 	.word	0x0800850c
 8000b88:	08008534 	.word	0x08008534

08000b8c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b94:	1d39      	adds	r1, r7, #4
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <__io_putchar+0x20>)
 8000b9e:	f005 fbd3 	bl	8006348 <HAL_UART_Transmit>

  return ch;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000128 	.word	0x20000128

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f001 fb67 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f86f 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 f99f 	bl	8000f00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc2:	f000 f973 	bl	8000eac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bc6:	f000 f8f5 	bl	8000db4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000bca:	f000 f921 	bl	8000e10 <MX_TIM2_Init>
  MX_CRC_Init();
 8000bce:	f000 f8dd 	bl	8000d8c <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000bd2:	f000 f8cf 	bl	8000d74 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bd6:	4828      	ldr	r0, [pc, #160]	@ (8000c78 <main+0xc8>)
 8000bd8:	f004 ff82 	bl	8005ae0 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	201c      	movs	r0, #28
 8000be2:	f001 fcc2 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be6:	201c      	movs	r0, #28
 8000be8:	f001 fcdb 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8000bec:	2201      	movs	r2, #1
 8000bee:	2120      	movs	r1, #32
 8000bf0:	4822      	ldr	r0, [pc, #136]	@ (8000c7c <main+0xcc>)
 8000bf2:	f002 fc25 	bl	8003440 <HAL_GPIO_WritePin>


   // optiga_main_logic();
    /* Check the GPIO for 3 seconds */
      GPIO_PinState OTA_Pin_state;
      uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000bf6:	f001 fbad 	bl	8002354 <HAL_GetTick>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8000c00:	60fb      	str	r3, [r7, #12]

      printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8000c02:	481f      	ldr	r0, [pc, #124]	@ (8000c80 <main+0xd0>)
 8000c04:	f006 fde4 	bl	80077d0 <puts>
      do
      {
        OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0c:	481d      	ldr	r0, [pc, #116]	@ (8000c84 <main+0xd4>)
 8000c0e:	f002 fbff 	bl	8003410 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	72fb      	strb	r3, [r7, #11]
        uint32_t current_tick = HAL_GetTick();
 8000c16:	f001 fb9d 	bl	8002354 <HAL_GetTick>
 8000c1a:	6078      	str	r0, [r7, #4]

        /* Check the button is pressed or not for 3seconds */
        if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8000c1c:	7afb      	ldrb	r3, [r7, #11]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d104      	bne.n	8000c2c <main+0x7c>
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d800      	bhi.n	8000c2c <main+0x7c>
      {
 8000c2a:	e7ed      	b.n	8000c08 <main+0x58>
        {
          /* Either timeout or Button is pressed */
          break;
        }
      }while( 1 );
      if( OTA_Pin_state == GPIO_PIN_RESET ) {
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <main+0x8c>
    	  /* Initialise Flash */
    	 	  FLASH_IF_init();
 8000c32:	f7ff fe63 	bl	80008fc <FLASH_IF_init>
    	 	  /* Display main menu */
    	 	  main_menu ();
 8000c36:	f000 fa97 	bl	8001168 <main_menu>
 8000c3a:	e01a      	b.n	8000c72 <main+0xc2>
      }
      else {
    	  /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    	 	  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <main+0xd8>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <main+0xdc>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c48:	d113      	bne.n	8000c72 <main+0xc2>
    	 	  {
    	 		  /* Jump to user application */
    	 		  jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <main+0xe0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a11      	ldr	r2, [pc, #68]	@ (8000c94 <main+0xe4>)
 8000c50:	6013      	str	r3, [r2, #0]
    	 		  jumpToApplication = (pFunction) jumpAddress;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <main+0xe4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <main+0xe8>)
 8000c5a:	601a      	str	r2, [r3, #0]
    	 		  /* Initialize user application's Stack Pointer */
    	 		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <main+0xd8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f383 8808 	msr	MSP, r3
}
 8000c68:	bf00      	nop
    	 		  jumpToApplication();
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <main+0xe8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	e7fd      	b.n	8000c72 <main+0xc2>
 8000c76:	bf00      	nop
 8000c78:	200000e0 	.word	0x200000e0
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	08008564 	.word	0x08008564
 8000c84:	40020800 	.word	0x40020800
 8000c88:	08020000 	.word	0x08020000
 8000c8c:	2ffe0000 	.word	0x2ffe0000
 8000c90:	08020004 	.word	0x08020004
 8000c94:	20000174 	.word	0x20000174
 8000c98:	20000170 	.word	0x20000170

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	@ 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 fd98 	bl	80077e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	4a28      	ldr	r2, [pc, #160]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd0:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <SystemClock_Config+0xd0>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b23      	ldr	r3, [pc, #140]	@ (8000d70 <SystemClock_Config+0xd4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ce8:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <SystemClock_Config+0xd4>)
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <SystemClock_Config+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2310      	movs	r3, #16
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d10:	2310      	movs	r3, #16
 8000d12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 f9f2 	bl	8005110 <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d32:	f000 f96c 	bl	800100e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2102      	movs	r1, #2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 fc54 	bl	8005600 <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d5e:	f000 f956 	bl	800100e <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	@ 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	201f      	movs	r0, #31
 8000d7e:	f001 fbf4 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d82:	201f      	movs	r0, #31
 8000d84:	f001 fc0d 	bl	80025a2 <HAL_NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_CRC_Init+0x20>)
 8000d92:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <MX_CRC_Init+0x24>)
 8000d94:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_CRC_Init+0x20>)
 8000d98:	f001 fc1d 	bl	80025d6 <HAL_CRC_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000da2:	f000 f934 	bl	800100e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000084 	.word	0x20000084
 8000db0:	40023000 	.word	0x40023000

08000db4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <MX_I2C1_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <MX_I2C1_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_I2C1_Init+0x50>)
 8000df2:	f002 fb63 	bl	80034bc <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f907 	bl	800100e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000008c 	.word	0x2000008c
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	00061a80 	.word	0x00061a80

08000e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e36:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e52:	2280      	movs	r2, #128	@ 0x80
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e56:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e58:	f004 fdf2 	bl	8005a40 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e62:	f000 f8d4 	bl	800100e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e74:	f004 ff86 	bl	8005d84 <HAL_TIM_ConfigClockSource>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e7e:	f000 f8c6 	bl	800100e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	@ (8000ea8 <MX_TIM2_Init+0x98>)
 8000e90:	f005 f988 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e9a:	f000 f8b8 	bl	800100e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000e0 	.word	0x200000e0

08000eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_USART2_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f005 f9e0 	bl	80062a8 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f88e 	bl	800100e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000128 	.word	0x20000128
 8000efc:	40004400 	.word	0x40004400

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a31      	ldr	r2, [pc, #196]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b28      	ldr	r3, [pc, #160]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_GPIO_Init+0xe4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8000f8c:	4816      	ldr	r0, [pc, #88]	@ (8000fe8 <MX_GPIO_Init+0xe8>)
 8000f8e:	f002 fa57 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <MX_GPIO_Init+0xec>)
 8000faa:	f002 f8ad 	bl	8003108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8000fae:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4808      	ldr	r0, [pc, #32]	@ (8000fe8 <MX_GPIO_Init+0xe8>)
 8000fc8:	f002 f89e 	bl	8003108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2028      	movs	r0, #40	@ 0x28
 8000fd2:	f001 faca 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd6:	2028      	movs	r0, #40	@ 0x28
 8000fd8:	f001 fae3 	bl	80025a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	@ 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020800 	.word	0x40020800

08000ff0 <HAL_TIM_PeriodElapsedCallback>:
{
    optiga_lib_status = return_status;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001000:	d101      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8001002:	f000 f9a1 	bl	8001348 <pal_os_event_timer_tick>
    }
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001012:	b672      	cpsid	i
}
 8001014:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <Error_Handler+0x8>
	...

0800101c <serial_download>:
/**
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void serial_download(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
	uint8_t number[11] = {0};
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	f8c3 2003 	str.w	r2, [r3, #3]
	uint32_t size = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
	COM_StatusTypeDef result = COM_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
	serial_put_string((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 800103a:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <serial_download+0xb4>)
 800103c:	f7ff fbda 	bl	80007f4 <serial_put_string>

	if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 8001040:	4824      	ldr	r0, [pc, #144]	@ (80010d4 <serial_download+0xb8>)
 8001042:	f7ff fc67 	bl	8000914 <FLASH_IF_erase>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <serial_download+0x36>
		serial_put_string((uint8_t*)"Error occured while erasing the flash");
 800104c:	4822      	ldr	r0, [pc, #136]	@ (80010d8 <serial_download+0xbc>)
 800104e:	f7ff fbd1 	bl	80007f4 <serial_put_string>
	}

	result = ymodem_receive(&size);
 8001052:	463b      	mov	r3, r7
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fda7 	bl	8001ba8 <ymodem_receive>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]

	if (result == COM_OK) {
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d119      	bne.n	8001098 <serial_download+0x7c>
			serial_put_string((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8001064:	481d      	ldr	r0, [pc, #116]	@ (80010dc <serial_download+0xc0>)
 8001066:	f7ff fbc5 	bl	80007f4 <serial_put_string>
			serial_put_string((uint8_t *)aFileName);
 800106a:	481d      	ldr	r0, [pc, #116]	@ (80010e0 <serial_download+0xc4>)
 800106c:	f7ff fbc2 	bl	80007f4 <serial_put_string>
		    int_to_str(number, size);
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa7a 	bl	8000570 <int_to_str>
		    serial_put_string((uint8_t *)"\n\r Size: ");
 800107c:	4819      	ldr	r0, [pc, #100]	@ (80010e4 <serial_download+0xc8>)
 800107e:	f7ff fbb9 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)number);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fbb5 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)" Bytes\r\n");
 800108a:	4817      	ldr	r0, [pc, #92]	@ (80010e8 <serial_download+0xcc>)
 800108c:	f7ff fbb2 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)"-------------------\n");
 8001090:	4816      	ldr	r0, [pc, #88]	@ (80010ec <serial_download+0xd0>)
 8001092:	f7ff fbaf 	bl	80007f4 <serial_put_string>
	}
	else
	  {
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
	  }
}
 8001096:	e017      	b.n	80010c8 <serial_download+0xac>
	else if (result == COM_ABORT) {
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d103      	bne.n	80010a6 <serial_download+0x8a>
		serial_put_string((uint8_t*)"\r\n\nAborted by er.\n\r");
 800109e:	4814      	ldr	r0, [pc, #80]	@ (80010f0 <serial_download+0xd4>)
 80010a0:	f7ff fba8 	bl	80007f4 <serial_put_string>
}
 80010a4:	e010      	b.n	80010c8 <serial_download+0xac>
	else if (result == COM_LIMIT) {
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d103      	bne.n	80010b4 <serial_download+0x98>
		serial_put_string((uint8_t*)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 80010ac:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <serial_download+0xd8>)
 80010ae:	f7ff fba1 	bl	80007f4 <serial_put_string>
}
 80010b2:	e009      	b.n	80010c8 <serial_download+0xac>
	else if (result == COM_DATA) {
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d103      	bne.n	80010c2 <serial_download+0xa6>
		serial_put_string((uint8_t *)"\n\n\rVerification failed!\n\r");
 80010ba:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <serial_download+0xdc>)
 80010bc:	f7ff fb9a 	bl	80007f4 <serial_put_string>
}
 80010c0:	e002      	b.n	80010c8 <serial_download+0xac>
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
 80010c2:	480e      	ldr	r0, [pc, #56]	@ (80010fc <serial_download+0xe0>)
 80010c4:	f7ff fb96 	bl	80007f4 <serial_put_string>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08008660 	.word	0x08008660
 80010d4:	08020000 	.word	0x08020000
 80010d8:	0800869c 	.word	0x0800869c
 80010dc:	080086c4 	.word	0x080086c4
 80010e0:	2000017c 	.word	0x2000017c
 80010e4:	08008718 	.word	0x08008718
 80010e8:	08008724 	.word	0x08008724
 80010ec:	08008730 	.word	0x08008730
 80010f0:	08008748 	.word	0x08008748
 80010f4:	0800875c 	.word	0x0800875c
 80010f8:	0800879c 	.word	0x0800879c
 80010fc:	080087b8 	.word	0x080087b8

08001100 <serial_upload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */

void serial_upload(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	 uint8_t status = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
	 serial_put_string((uint8_t *)"\n\n\rSelect Receive File\n\r");
 800110a:	4811      	ldr	r0, [pc, #68]	@ (8001150 <serial_upload+0x50>)
 800110c:	f7ff fb72 	bl	80007f4 <serial_put_string>
	 HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 8001110:	1df9      	adds	r1, r7, #7
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001116:	2201      	movs	r2, #1
 8001118:	480e      	ldr	r0, [pc, #56]	@ (8001154 <serial_upload+0x54>)
 800111a:	f005 f9a0 	bl	800645e <HAL_UART_Receive>
	 if ( status == CRC16)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b43      	cmp	r3, #67	@ 0x43
 8001122:	d111      	bne.n	8001148 <serial_upload+0x48>
	   {
	     /* Transmit the flash image through ymodem protocol */
	     status = ymodem_transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8001124:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001128:	490b      	ldr	r1, [pc, #44]	@ (8001158 <serial_upload+0x58>)
 800112a:	480c      	ldr	r0, [pc, #48]	@ (800115c <serial_upload+0x5c>)
 800112c:	f000 fee8 	bl	8001f00 <ymodem_transmit>
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]

	     if (status != 0)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <serial_upload+0x42>
	     {
	       serial_put_string((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 800113a:	4809      	ldr	r0, [pc, #36]	@ (8001160 <serial_upload+0x60>)
 800113c:	f7ff fb5a 	bl	80007f4 <serial_put_string>
	     else
	     {
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
	     }
	   }
}
 8001140:	e002      	b.n	8001148 <serial_upload+0x48>
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8001142:	4808      	ldr	r0, [pc, #32]	@ (8001164 <serial_upload+0x64>)
 8001144:	f7ff fb56 	bl	80007f4 <serial_put_string>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	080087d8 	.word	0x080087d8
 8001154:	20000128 	.word	0x20000128
 8001158:	080087f4 	.word	0x080087f4
 800115c:	08020000 	.word	0x08020000
 8001160:	0800880c 	.word	0x0800880c
 8001164:	08008838 	.word	0x08008838

08001168 <main_menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */

void main_menu(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	 uint8_t key = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	70fb      	strb	r3, [r7, #3]

	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8001172:	484b      	ldr	r0, [pc, #300]	@ (80012a0 <main_menu+0x138>)
 8001174:	f7ff fb3e 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 8001178:	484a      	ldr	r0, [pc, #296]	@ (80012a4 <main_menu+0x13c>)
 800117a:	f7ff fb3b 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n= Secure Booting and Firmware Update with hardware root of trust(1.1)=");
 800117e:	484a      	ldr	r0, [pc, #296]	@ (80012a8 <main_menu+0x140>)
 8001180:	f7ff fb38 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 8001184:	4847      	ldr	r0, [pc, #284]	@ (80012a4 <main_menu+0x13c>)
 8001186:	f7ff fb35 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                   By STM Application Team          =");
 800118a:	4848      	ldr	r0, [pc, #288]	@ (80012ac <main_menu+0x144>)
 800118c:	f7ff fb32 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8001190:	4843      	ldr	r0, [pc, #268]	@ (80012a0 <main_menu+0x138>)
 8001192:	f7ff fb2f 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n\r\n");
 8001196:	4846      	ldr	r0, [pc, #280]	@ (80012b0 <main_menu+0x148>)
 8001198:	f7ff fb2c 	bl	80007f4 <serial_put_string>
	  FLASH_IF_disable_all_protection();
 800119c:	f7ff fc04 	bl	80009a8 <FLASH_IF_disable_all_protection>

	  while (1)
	  {

		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 80011a0:	4844      	ldr	r0, [pc, #272]	@ (80012b4 <main_menu+0x14c>)
 80011a2:	f7ff fb27 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 80011a6:	4844      	ldr	r0, [pc, #272]	@ (80012b8 <main_menu+0x150>)
 80011a8:	f7ff fb24 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 80011ac:	4843      	ldr	r0, [pc, #268]	@ (80012bc <main_menu+0x154>)
 80011ae:	f7ff fb21 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 80011b2:	4843      	ldr	r0, [pc, #268]	@ (80012c0 <main_menu+0x158>)
 80011b4:	f7ff fb1e 	bl	80007f4 <serial_put_string>

		  flashProtection = FLASH_IF_get_write_protection_status();
 80011b8:	f7ff fc70 	bl	8000a9c <FLASH_IF_get_write_protection_status>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a41      	ldr	r2, [pc, #260]	@ (80012c4 <main_menu+0x15c>)
 80011c0:	6013      	str	r3, [r2, #0]

	    if(flashProtection == FLASHIF_PROTECTION_WRPENABLED)
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <main_menu+0x15c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d103      	bne.n	80011d2 <main_menu+0x6a>
	    {
	    	serial_put_string((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 80011ca:	483f      	ldr	r0, [pc, #252]	@ (80012c8 <main_menu+0x160>)
 80011cc:	f7ff fb12 	bl	80007f4 <serial_put_string>
 80011d0:	e002      	b.n	80011d8 <main_menu+0x70>
	    }
	    else
	    {
	    	serial_put_string((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 80011d2:	483e      	ldr	r0, [pc, #248]	@ (80012cc <main_menu+0x164>)
 80011d4:	f7ff fb0e 	bl	80007f4 <serial_put_string>
	    }
	    serial_put_string((uint8_t *)"==========================================================\r\n\n");
 80011d8:	483d      	ldr	r0, [pc, #244]	@ (80012d0 <main_menu+0x168>)
 80011da:	f7ff fb0b 	bl	80007f4 <serial_put_string>

	    /* Clean the input path */
	    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80011de:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <main_menu+0x16c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
	//    __HAL_UART_CLEAR_OREFLAG(&UartHandle);

	    /* Receive key */
	    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 80011e4:	1cf9      	adds	r1, r7, #3
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ea:	2201      	movs	r2, #1
 80011ec:	4839      	ldr	r0, [pc, #228]	@ (80012d4 <main_menu+0x16c>)
 80011ee:	f005 f936 	bl	800645e <HAL_UART_Receive>



	    switch (key)
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	3b31      	subs	r3, #49	@ 0x31
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d84d      	bhi.n	8001296 <main_menu+0x12e>
 80011fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <main_menu+0x98>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	08001211 	.word	0x08001211
 8001204:	08001217 	.word	0x08001217
 8001208:	0800121d 	.word	0x0800121d
 800120c:	0800124b 	.word	0x0800124b
	    {
	    case '1' :
	      /* Download user application in the Flash */
	      serial_download();
 8001210:	f7ff ff04 	bl	800101c <serial_download>
	      break;
 8001214:	e043      	b.n	800129e <main_menu+0x136>
	    case '2' :
	      /* Upload user application from the Flash */
	      serial_upload();
 8001216:	f7ff ff73 	bl	8001100 <serial_upload>
	      break;
 800121a:	e040      	b.n	800129e <main_menu+0x136>
	    case '3' :
	    	serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 800121c:	482e      	ldr	r0, [pc, #184]	@ (80012d8 <main_menu+0x170>)
 800121e:	f7ff fae9 	bl	80007f4 <serial_put_string>
	      /* execute the new program */
	      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <main_menu+0x174>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a2e      	ldr	r2, [pc, #184]	@ (80012e0 <main_menu+0x178>)
 8001228:	6013      	str	r3, [r2, #0]
	      /* Jump to user application */
	      jumpToApplication = (pFunction)jumpAddress;
 800122a:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <main_menu+0x178>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <main_menu+0x17c>)
 8001232:	601a      	str	r2, [r3, #0]
	      /* Initialize user application's Stack Pointer */
	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <main_menu+0x180>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f383 8808 	msr	MSP, r3
}
 8001240:	bf00      	nop
	      jumpToApplication();
 8001242:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <main_menu+0x17c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4798      	blx	r3
	      break;
 8001248:	e029      	b.n	800129e <main_menu+0x136>
	    case '4' :

	      if (flashProtection != FLASHIF_PROTECTION_NONE)
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <main_menu+0x15c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d010      	beq.n	8001274 <main_menu+0x10c>
	      {
	        /* Disable the write protection */
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fc3a 	bl	8000acc <FLASH_IF_write_protection_config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <main_menu+0x104>
	        {
	        	serial_put_string((uint8_t *)"Write Protection disabled...\r\n");
 800125e:	4823      	ldr	r0, [pc, #140]	@ (80012ec <main_menu+0x184>)
 8001260:	f7ff fac8 	bl	80007f4 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 8001264:	4822      	ldr	r0, [pc, #136]	@ (80012f0 <main_menu+0x188>)
 8001266:	f7ff fac5 	bl	80007f4 <serial_put_string>
	        else
	        {
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
	        }
	      }
	      break;
 800126a:	e018      	b.n	800129e <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 800126c:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <main_menu+0x18c>)
 800126e:	f7ff fac1 	bl	80007f4 <serial_put_string>
	      break;
 8001272:	e014      	b.n	800129e <main_menu+0x136>
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fc29 	bl	8000acc <FLASH_IF_write_protection_config>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d106      	bne.n	800128e <main_menu+0x126>
	        	serial_put_string((uint8_t *)"Write Protection enabled...\r\n");
 8001280:	481d      	ldr	r0, [pc, #116]	@ (80012f8 <main_menu+0x190>)
 8001282:	f7ff fab7 	bl	80007f4 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 8001286:	481a      	ldr	r0, [pc, #104]	@ (80012f0 <main_menu+0x188>)
 8001288:	f7ff fab4 	bl	80007f4 <serial_put_string>
	      break;
 800128c:	e007      	b.n	800129e <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
 800128e:	481b      	ldr	r0, [pc, #108]	@ (80012fc <main_menu+0x194>)
 8001290:	f7ff fab0 	bl	80007f4 <serial_put_string>
	      break;
 8001294:	e003      	b.n	800129e <main_menu+0x136>
		default:
			serial_put_string((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001296:	481a      	ldr	r0, [pc, #104]	@ (8001300 <main_menu+0x198>)
 8001298:	f7ff faac 	bl	80007f4 <serial_put_string>
		break;
 800129c:	bf00      	nop
		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 800129e:	e77f      	b.n	80011a0 <main_menu+0x38>
 80012a0:	08008858 	.word	0x08008858
 80012a4:	080088a4 	.word	0x080088a4
 80012a8:	080088f0 	.word	0x080088f0
 80012ac:	0800893c 	.word	0x0800893c
 80012b0:	08008988 	.word	0x08008988
 80012b4:	08008990 	.word	0x08008990
 80012b8:	080089d0 	.word	0x080089d0
 80012bc:	08008a10 	.word	0x08008a10
 80012c0:	08008a50 	.word	0x08008a50
 80012c4:	20000178 	.word	0x20000178
 80012c8:	08008a90 	.word	0x08008a90
 80012cc:	08008ad0 	.word	0x08008ad0
 80012d0:	08008b10 	.word	0x08008b10
 80012d4:	20000128 	.word	0x20000128
 80012d8:	08008b50 	.word	0x08008b50
 80012dc:	08020004 	.word	0x08020004
 80012e0:	20000174 	.word	0x20000174
 80012e4:	20000170 	.word	0x20000170
 80012e8:	08020000 	.word	0x08020000
 80012ec:	08008b74 	.word	0x08008b74
 80012f0:	08008b94 	.word	0x08008b94
 80012f4:	08008bb4 	.word	0x08008bb4
 80012f8:	08008be4 	.word	0x08008be4
 80012fc:	08008c04 	.word	0x08008c04
 8001300:	08008c30 	.word	0x08008c30

08001304 <pal_os_event_trigger_registered_callback>:
    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
}

void pal_os_event_trigger_registered_callback(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <pal_os_event_trigger_registered_callback+0x3c>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d011      	beq.n	8001336 <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <pal_os_event_trigger_registered_callback+0x3c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <pal_os_event_trigger_registered_callback+0x3c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <pal_os_event_trigger_registered_callback+0x3c>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <pal_os_event_trigger_registered_callback+0x3c>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <pal_os_event_trigger_registered_callback+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	4798      	blx	r3
    }
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001bc 	.word	0x200001bc
 8001344:	200001d8 	.word	0x200001d8

08001348 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <pal_os_event_timer_tick+0x24>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <pal_os_event_timer_tick+0x1e>
 8001354:	f000 fffe 	bl	8002354 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <pal_os_event_timer_tick+0x28>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d301      	bcc.n	8001366 <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 8001362:	f7ff ffcf 	bl	8001304 <pal_os_event_trigger_registered_callback>
    }
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001d8 	.word	0x200001d8
 8001370:	200001d4 	.word	0x200001d4

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	6453      	str	r3, [r2, #68]	@ 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_CRC_MspInit+0x3c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10d      	bne.n	80013f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_CRC_MspInit+0x40>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <HAL_CRC_MspInit+0x40>)
 80013e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <HAL_CRC_MspInit+0x40>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023000 	.word	0x40023000
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_I2C_MspInit+0x94>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d134      	bne.n	8001494 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <HAL_I2C_MspInit+0x98>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <HAL_I2C_MspInit+0x98>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_I2C_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001446:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001458:	2304      	movs	r3, #4
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4810      	ldr	r0, [pc, #64]	@ (80014a4 <HAL_I2C_MspInit+0x9c>)
 8001464:	f001 fe50 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_I2C_MspInit+0x98>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <HAL_I2C_MspInit+0x98>)
 8001472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_I2C_MspInit+0x98>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2020      	movs	r0, #32
 800148a:	f001 f86e 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800148e:	2020      	movs	r0, #32
 8001490:	f001 f887 	bl	80025a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	@ 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40005400 	.word	0x40005400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400

080014a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b8:	d115      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x48>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201c      	movs	r0, #28
 80014dc:	f001 f845 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e0:	201c      	movs	r0, #28
 80014e2:	f001 f85e 	bl	80025a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a1d      	ldr	r2, [pc, #116]	@ (8001588 <HAL_UART_MspInit+0x94>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d133      	bne.n	800157e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_UART_MspInit+0x98>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a1b      	ldr	r2, [pc, #108]	@ (800158c <HAL_UART_MspInit+0x98>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_UART_MspInit+0x98>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_UART_MspInit+0x98>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <HAL_UART_MspInit+0x98>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_UART_MspInit+0x98>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4809      	ldr	r0, [pc, #36]	@ (8001590 <HAL_UART_MspInit+0x9c>)
 800156a:	f001 fdcd 	bl	8003108 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2026      	movs	r0, #38	@ 0x26
 8001574:	f000 fff9 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001578:	2026      	movs	r0, #38	@ 0x26
 800157a:	f001 f812 	bl	80025a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40004400 	.word	0x40004400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 fe9f 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <TIM2_IRQHandler+0x10>)
 80015fa:	f004 fad3 	bl	8005ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000e0 	.word	0x200000e0

08001608 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <I2C1_EV_IRQHandler+0x10>)
 800160e:	f002 f8ae 	bl	800376e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000008c 	.word	0x2000008c

0800161c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <I2C1_ER_IRQHandler+0x10>)
 8001622:	f002 f9f7 	bl	8003a14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000008c 	.word	0x2000008c

08001630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <USART2_IRQHandler+0x10>)
 8001636:	f004 ffa9 	bl	800658c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000128 	.word	0x20000128

08001644 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001648:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800164c:	f001 ff12 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	e00a      	b.n	800167c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001666:	f3af 8000 	nop.w
 800166a:	4601      	mov	r1, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf0      	blt.n	8001666 <_read+0x12>
  }

  return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e009      	b.n	80016b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fa6f 	bl	8000b8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbf1      	blt.n	80016a0 <_write+0x12>
  }
  return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_close>:

int _close(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ee:	605a      	str	r2, [r3, #4]
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f006 f856 	bl	8007810 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20018000 	.word	0x20018000
 8001790:	00000400 	.word	0x00000400
 8001794:	200001dc 	.word	0x200001dc
 8001798:	20000758 	.word	0x20000758

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <receive_packet>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */

static HAL_StatusTypeDef receive_packet(uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
    uint16_t crc;
    uint32_t packetSize = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef status;
    uint8_t char1;

    *p_length = 0;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
    status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 80017d6:	f107 0117 	add.w	r1, r7, #23
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	485e      	ldr	r0, [pc, #376]	@ (8001958 <receive_packet+0x198>)
 80017e0:	f004 fe3d 	bl	800645e <HAL_UART_Receive>
 80017e4:	4603      	mov	r3, r0
 80017e6:	76fb      	strb	r3, [r7, #27]

    if (status != HAL_OK) {
 80017e8:	7efb      	ldrb	r3, [r7, #27]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <receive_packet+0x32>
        return status;
 80017ee:	7efb      	ldrb	r3, [r7, #27]
 80017f0:	e0ae      	b.n	8001950 <receive_packet+0x190>
    }

    switch(char1) {
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b61      	cmp	r3, #97	@ 0x61
 80017f6:	d057      	beq.n	80018a8 <receive_packet+0xe8>
 80017f8:	2b61      	cmp	r3, #97	@ 0x61
 80017fa:	dc57      	bgt.n	80018ac <receive_packet+0xec>
 80017fc:	2b18      	cmp	r3, #24
 80017fe:	dc37      	bgt.n	8001870 <receive_packet+0xb0>
 8001800:	2b00      	cmp	r3, #0
 8001802:	dd53      	ble.n	80018ac <receive_packet+0xec>
 8001804:	3b01      	subs	r3, #1
 8001806:	2b17      	cmp	r3, #23
 8001808:	d850      	bhi.n	80018ac <receive_packet+0xec>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <receive_packet+0x50>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	08001877 	.word	0x08001877
 8001814:	0800187d 	.word	0x0800187d
 8001818:	080018ad 	.word	0x080018ad
 800181c:	080018b1 	.word	0x080018b1
 8001820:	080018ad 	.word	0x080018ad
 8001824:	080018ad 	.word	0x080018ad
 8001828:	080018ad 	.word	0x080018ad
 800182c:	080018ad 	.word	0x080018ad
 8001830:	080018ad 	.word	0x080018ad
 8001834:	080018ad 	.word	0x080018ad
 8001838:	080018ad 	.word	0x080018ad
 800183c:	080018ad 	.word	0x080018ad
 8001840:	080018ad 	.word	0x080018ad
 8001844:	080018ad 	.word	0x080018ad
 8001848:	080018ad 	.word	0x080018ad
 800184c:	080018ad 	.word	0x080018ad
 8001850:	080018ad 	.word	0x080018ad
 8001854:	080018ad 	.word	0x080018ad
 8001858:	080018ad 	.word	0x080018ad
 800185c:	080018ad 	.word	0x080018ad
 8001860:	080018ad 	.word	0x080018ad
 8001864:	080018ad 	.word	0x080018ad
 8001868:	080018ad 	.word	0x080018ad
 800186c:	08001885 	.word	0x08001885
 8001870:	2b41      	cmp	r3, #65	@ 0x41
 8001872:	d019      	beq.n	80018a8 <receive_packet+0xe8>
 8001874:	e01a      	b.n	80018ac <receive_packet+0xec>
        case SOH:
            packetSize = PACKET_SIZE;
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	61fb      	str	r3, [r7, #28]
            break;
 800187a:	e01a      	b.n	80018b2 <receive_packet+0xf2>
        case STX:
            packetSize = PACKET_1K_SIZE;
 800187c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001880:	61fb      	str	r3, [r7, #28]
            break;
 8001882:	e016      	b.n	80018b2 <receive_packet+0xf2>
        case EOT:
        	break;

        case CA:
            if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) != HAL_OK) || (char1 != CA)) {
 8001884:	f107 0117 	add.w	r1, r7, #23
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	4832      	ldr	r0, [pc, #200]	@ (8001958 <receive_packet+0x198>)
 800188e:	f004 fde6 	bl	800645e <HAL_UART_Receive>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <receive_packet+0xde>
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b18      	cmp	r3, #24
 800189c:	d001      	beq.n	80018a2 <receive_packet+0xe2>
                return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e056      	b.n	8001950 <receive_packet+0x190>
            }
            packetSize = 2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
            break;
 80018a6:	e004      	b.n	80018b2 <receive_packet+0xf2>
        case ABORT1:
        case ABORT2:
            return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
 80018aa:	e051      	b.n	8001950 <receive_packet+0x190>
        default:
            return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e04f      	b.n	8001950 <receive_packet+0x190>
        	break;
 80018b0:	bf00      	nop
    }

    *p_data = char1;
 80018b2:	7dfa      	ldrb	r2, [r7, #23]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	701a      	strb	r2, [r3, #0]

    if (packetSize >= PACKET_SIZE) {
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80018bc:	d942      	bls.n	8001944 <receive_packet+0x184>
        status = HAL_UART_Receive(&UartHandle,
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1c99      	adds	r1, r3, #2
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4822      	ldr	r0, [pc, #136]	@ (8001958 <receive_packet+0x198>)
 80018ce:	f004 fdc6 	bl	800645e <HAL_UART_Receive>
 80018d2:	4603      	mov	r3, r0
 80018d4:	76fb      	strb	r3, [r7, #27]
                                &p_data[PACKET_NUMBER_INDEX],
                                (packetSize + PACKET_OVERHEAD_SIZE),
                                timeout);

        if (status != HAL_OK) {
 80018d6:	7efb      	ldrb	r3, [r7, #27]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <receive_packet+0x126>
            *p_length = 0;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
            return status;
 80018e2:	7efb      	ldrb	r3, [r7, #27]
 80018e4:	e034      	b.n	8001950 <receive_packet+0x190>
        }

        /* Validate packet sequence numbers */
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3302      	adds	r3, #2
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3303      	adds	r3, #3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d004      	beq.n	8001904 <receive_packet+0x144>
            *p_length = 0;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
            return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e025      	b.n	8001950 <receive_packet+0x190>
        }

        /* Check CRC */
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3304      	adds	r3, #4
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
               p_data[packetSize + PACKET_DATA_INDEX + 1];
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3305      	adds	r3, #5
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	440b      	add	r3, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b21b      	sxth	r3, r3
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 800191e:	4313      	orrs	r3, r2
 8001920:	b21b      	sxth	r3, r3
 8001922:	833b      	strh	r3, [r7, #24]

        if (calc_crc16(&p_data[PACKET_DATA_INDEX], packetSize) != crc )
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3304      	adds	r3, #4
 8001928:	69f9      	ldr	r1, [r7, #28]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f90a 	bl	8001b44 <calc_crc16>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	8b3b      	ldrh	r3, [r7, #24]
 8001936:	4293      	cmp	r3, r2
 8001938:	d006      	beq.n	8001948 <receive_packet+0x188>
                  {
                    packetSize = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
                    status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	76fb      	strb	r3, [r7, #27]
 8001942:	e001      	b.n	8001948 <receive_packet+0x188>
                  }
    }
    else packetSize = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]

    *p_length = packetSize;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3720      	adds	r7, #32
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000128 	.word	0x20000128

0800195c <prepare_initial_packet>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */

static void prepare_initial_packet(uint8_t* p_data, const uint8_t* p_file_name, uint32_t length) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
    uint32_t i = 0, j = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    uint8_t aString[10];  // camelCase for non-pointers

    /* First three bytes are constant */
    p_data[PACKET_START_INDEX] = SOH;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3302      	adds	r3, #2
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3303      	adds	r3, #3
 8001984:	22ff      	movs	r2, #255	@ 0xff
 8001986:	701a      	strb	r2, [r3, #0]

    /* Filename written */
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e00b      	b.n	80019a6 <prepare_initial_packet+0x4a>
        p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	441a      	add	r2, r3
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	3304      	adds	r3, #4
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	440b      	add	r3, r1
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	701a      	strb	r2, [r3, #0]
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <prepare_initial_packet+0x5c>
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b6:	d9ea      	bls.n	800198e <prepare_initial_packet+0x32>
    }
    p_data[i + PACKET_DATA_INDEX] = 0x00;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	3304      	adds	r3, #4
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

    /* File size written */
    int_to_str(aString, length);  // Assuming `int_to_str` is your function
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdd0 	bl	8000570 <int_to_str>
    i += 1 + PACKET_DATA_INDEX;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	3305      	adds	r3, #5
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (aString[j] != '\0') {
 80019d6:	e00c      	b.n	80019f2 <prepare_initial_packet+0x96>
        p_data[i++] = aString[j++];
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	623a      	str	r2, [r7, #32]
 80019de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e0:	1c51      	adds	r1, r2, #1
 80019e2:	6279      	str	r1, [r7, #36]	@ 0x24
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	440a      	add	r2, r1
 80019e8:	3328      	adds	r3, #40	@ 0x28
 80019ea:	443b      	add	r3, r7
 80019ec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80019f0:	7013      	strb	r3, [r2, #0]
    while (aString[j] != '\0') {
 80019f2:	f107 0214 	add.w	r2, r7, #20
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1eb      	bne.n	80019d8 <prepare_initial_packet+0x7c>
    }

    /* Padding with zeros */
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	e007      	b.n	8001a16 <prepare_initial_packet+0xba>
        p_data[j] = 0;
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	3301      	adds	r3, #1
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	2b83      	cmp	r3, #131	@ 0x83
 8001a1a:	d9f4      	bls.n	8001a06 <prepare_initial_packet+0xaa>
    }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <prepare_packet>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */

void prepare_packet(uint8_t* p_source, uint8_t* p_packet, uint8_t pktNr, uint32_t sizeBlk) {
 8001a26:	b480      	push	{r7}
 8001a28:	b089      	sub	sp, #36	@ 0x24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4613      	mov	r3, r2
 8001a34:	71fb      	strb	r3, [r7, #7]
    uint8_t* p_record;  // Pointer: p_ prefix + snake_case
    uint32_t i, size, packetSize;  // camelCase for non-pointers

    /* Determine packet size (1K or normal) */
    packetSize = (sizeBlk >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3c:	d302      	bcc.n	8001a44 <prepare_packet+0x1e>
 8001a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a42:	e000      	b.n	8001a46 <prepare_packet+0x20>
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	617b      	str	r3, [r7, #20]
    size = (sizeBlk < packetSize) ? sizeBlk : packetSize;
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf28      	it	cs
 8001a50:	4613      	movcs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    /* Set packet header */
    p_packet[PACKET_START_INDEX] = (packetSize == PACKET_1K_SIZE) ? STX : SOH;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d101      	bne.n	8001a60 <prepare_packet+0x3a>
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	e000      	b.n	8001a62 <prepare_packet+0x3c>
 8001a60:	2201      	movs	r2, #1
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	3301      	adds	r3, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_NUMBER_INDEX] = pktNr;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_CNUMBER_INDEX] = ~pktNr;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	3303      	adds	r3, #3
 8001a74:	79fa      	ldrb	r2, [r7, #7]
 8001a76:	43d2      	mvns	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]

    /* Copy data into packet */
    p_record = p_source;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	61fb      	str	r3, [r7, #28]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 8001a80:	2304      	movs	r3, #4
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	e00a      	b.n	8001a9c <prepare_packet+0x76>
        p_packet[i] = *p_record++;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	61fa      	str	r2, [r7, #28]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	440a      	add	r2, r1
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	7013      	strb	r3, [r2, #0]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3ef      	bcc.n	8001a86 <prepare_packet+0x60>
    }

    /* Pad remaining space with EOF (0x1A) */
    if (size <= packetSize) {
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d810      	bhi.n	8001ad0 <prepare_packet+0xaa>
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	e007      	b.n	8001ac6 <prepare_packet+0xa0>
            p_packet[i] = 0x1A;  // EOF marker
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	4413      	add	r3, r2
 8001abc:	221a      	movs	r2, #26
 8001abe:	701a      	strb	r2, [r3, #0]
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3f2      	bcc.n	8001ab6 <prepare_packet+0x90>
        }
    }
}
 8001ad0:	bf00      	nop
 8001ad2:	3724      	adds	r7, #36	@ 0x24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <update_crc16>:
  * @brief  Update CRC16 for input byte
  * @param  crc_in input value
  * @param  input byte
  * @retval None
  */
uint16_t update_crc16(uint16_t crcIn, uint8_t byte) {
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	80fb      	strh	r3, [r7, #6]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	717b      	strb	r3, [r7, #5]
    uint32_t crc = crcIn;
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	60fb      	str	r3, [r7, #12]
    uint32_t in = byte | 0x100;
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	60bb      	str	r3, [r7, #8]

    do {
        crc <<= 1;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
        in <<= 1;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
        if (in & 0x100)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <update_crc16+0x38>
            ++crc;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
        if (crc & 0x10000)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <update_crc16+0x4e>
            crc ^= 0x1021;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
    } while (!(in & 0x10000));
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0e1      	beq.n	8001af8 <update_crc16+0x1c>

    return crc & 0xFFFFu;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	b29b      	uxth	r3, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <calc_crc16>:
  * @brief  Cal CRC16 for YModem Packet
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t calc_crc16(const uint8_t* p_data, uint32_t size) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	uint32_t crc = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
	const uint8_t* p_data_end = p_data + size;
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]

	while (p_data < p_data_end)
 8001b5a:	e00a      	b.n	8001b72 <calc_crc16+0x2e>
		crc = update_crc16(crc, *p_data++);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff ffb7 	bl	8001adc <update_crc16>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	60fb      	str	r3, [r7, #12]
	while (p_data < p_data_end)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3f0      	bcc.n	8001b5c <calc_crc16+0x18>

	crc = update_crc16(crc, 0);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ffab 	bl	8001adc <update_crc16>
 8001b86:	4603      	mov	r3, r0
 8001b88:	60fb      	str	r3, [r7, #12]
	crc = update_crc16(crc, 0);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ffa3 	bl	8001adc <update_crc16>
 8001b96:	4603      	mov	r3, r0
 8001b98:	60fb      	str	r3, [r7, #12]

	return crc & 0xFFFFu;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	b29b      	uxth	r3, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <ymodem_receive>:
/**
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef ymodem_receive(uint32_t* p_size) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09a      	sub	sp, #104	@ 0x68
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	 	 	 HAL_FLASH_Unlock();
 8001bb0:	f000 fe52 	bl	8002858 <HAL_FLASH_Unlock>
			 HAL_FLASH_OB_Unlock();
 8001bb4:	f000 fe82 	bl	80028bc <HAL_FLASH_OB_Unlock>
			  FLASH_OBProgramInitTypeDef config;
			  HAL_FLASHEx_OBGetConfig(&config);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 f8d9 	bl	8002d74 <HAL_FLASHEx_OBGetConfig>
			 config.OptionType = OPTIONBYTE_WRP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
			 config.WRPState= OB_WRPSTATE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
			 config.RDPLevel = OB_RDP_LEVEL0;
 8001bca:	23aa      	movs	r3, #170	@ 0xaa
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
			  config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);
 8001bce:	23e0      	movs	r3, #224	@ 0xe0
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  if (HAL_FLASHEx_OBProgram(&config) == HAL_OK)
 8001bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 f85e 	bl	8002c98 <HAL_FLASHEx_OBProgram>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <ymodem_receive+0x3e>
			  {
			      HAL_FLASH_OB_Launch(); // This will cause a reset!
 8001be2:	f000 fe97 	bl	8002914 <HAL_FLASH_OB_Launch>
			  }

			  HAL_FLASH_OB_Lock();
 8001be6:	f000 fe85 	bl	80028f4 <HAL_FLASH_OB_Lock>
			  HAL_FLASH_Lock();
 8001bea:	f000 fe57 	bl	800289c <HAL_FLASH_Lock>

    uint32_t flashDestination, ramSource, fileSize;
    uint32_t i, packetLength, sessionDone = 0, fileDone, sessionBegin = 0, errors = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t* p_filePtr;
    uint8_t p_fileSize[FILE_SIZE_LENGTH], tmp, packetsReceived;
    COM_StatusTypeDef result = COM_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

    flashDestination = APPLICATION_ADDRESS;
 8001c00:	4bad      	ldr	r3, [pc, #692]	@ (8001eb8 <ymodem_receive+0x310>)
 8001c02:	667b      	str	r3, [r7, #100]	@ 0x64

    while ((sessionDone == 0) && (result == COM_OK)) {
 8001c04:	e125      	b.n	8001e52 <ymodem_receive+0x2aa>
        packetsReceived = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        fileDone = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	65bb      	str	r3, [r7, #88]	@ 0x58
        while ((fileDone == 0) && (result == COM_OK)) {
 8001c10:	e117      	b.n	8001e42 <ymodem_receive+0x29a>
            switch (receive_packet(aPacketData, &packetLength, DOWNLOAD_TIMEOUT)) {
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	48a7      	ldr	r0, [pc, #668]	@ (8001ebc <ymodem_receive+0x314>)
 8001c1e:	f7ff fdcf 	bl	80017c0 <receive_packet>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <ymodem_receive+0x88>
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	f000 80e9 	beq.w	8001e00 <ymodem_receive+0x258>
 8001c2e:	e0f1      	b.n	8001e14 <ymodem_receive+0x26c>
                case HAL_OK:
                    errors = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	653b      	str	r3, [r7, #80]	@ 0x50
                    switch (packetLength) {
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <ymodem_receive+0xa4>
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d10c      	bne.n	8001c58 <ymodem_receive+0xb0>
                        case 2:
                            serial_put_byte(ACK);
 8001c3e:	2006      	movs	r0, #6
 8001c40:	f7fe fdf4 	bl	800082c <serial_put_byte>
                            result = COM_ABORT;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                            break;
 8001c4a:	e0d8      	b.n	8001dfe <ymodem_receive+0x256>

                        case 0:
                            serial_put_byte(ACK);
 8001c4c:	2006      	movs	r0, #6
 8001c4e:	f7fe fded 	bl	800082c <serial_put_byte>
                            fileDone = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	65bb      	str	r3, [r7, #88]	@ 0x58
                            break;
 8001c56:	e0d2      	b.n	8001dfe <ymodem_receive+0x256>

                        default:
                            if (aPacketData[PACKET_NUMBER_INDEX] != (packetsReceived & 0xffU)) {
 8001c58:	4b98      	ldr	r3, [pc, #608]	@ (8001ebc <ymodem_receive+0x314>)
 8001c5a:	789b      	ldrb	r3, [r3, #2]
 8001c5c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d003      	beq.n	8001c6c <ymodem_receive+0xc4>
                                serial_put_byte(NAK);
 8001c64:	2015      	movs	r0, #21
 8001c66:	f7fe fde1 	bl	800082c <serial_put_byte>
                                	}
                                }
                                packetsReceived++;
                                sessionBegin = 1;
                            }
                            break;
 8001c6a:	e0c7      	b.n	8001dfc <ymodem_receive+0x254>
                                if (packetsReceived == 0) {
 8001c6c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d17c      	bne.n	8001d6e <ymodem_receive+0x1c6>
                                    if (aPacketData[PACKET_DATA_INDEX] != 0) {
 8001c74:	4b91      	ldr	r3, [pc, #580]	@ (8001ebc <ymodem_receive+0x314>)
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d070      	beq.n	8001d5e <ymodem_receive+0x1b6>
                                        p_filePtr = aPacketData + PACKET_DATA_INDEX;
 8001c7c:	4b90      	ldr	r3, [pc, #576]	@ (8001ec0 <ymodem_receive+0x318>)
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        i = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	663b      	str	r3, [r7, #96]	@ 0x60
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 8001c84:	e008      	b.n	8001c98 <ymodem_receive+0xf0>
                                            aFileName[i++] = *p_filePtr++;
 8001c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c88:	1c53      	adds	r3, r2, #1
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	6639      	str	r1, [r7, #96]	@ 0x60
 8001c92:	7811      	ldrb	r1, [r2, #0]
 8001c94:	4a8b      	ldr	r2, [pc, #556]	@ (8001ec4 <ymodem_receive+0x31c>)
 8001c96:	54d1      	strb	r1, [r2, r3]
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 8001c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <ymodem_receive+0xfe>
 8001ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ca2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ca4:	d9ef      	bls.n	8001c86 <ymodem_receive+0xde>
                                        aFileName[i++] = '\0';
 8001ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	663a      	str	r2, [r7, #96]	@ 0x60
 8001cac:	4a85      	ldr	r2, [pc, #532]	@ (8001ec4 <ymodem_receive+0x31c>)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	54d1      	strb	r1, [r2, r3]
                                        i = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	663b      	str	r3, [r7, #96]	@ 0x60
                                        p_filePtr++;
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cb8:	3301      	adds	r3, #1
 8001cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8001cbc:	e00a      	b.n	8001cd4 <ymodem_receive+0x12c>
                                            p_fileSize[i++] = *p_filePtr++;
 8001cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cc0:	1c53      	adds	r3, r2, #1
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	6639      	str	r1, [r7, #96]	@ 0x60
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	3368      	adds	r3, #104	@ 0x68
 8001cce:	443b      	add	r3, r7
 8001cd0:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d002      	beq.n	8001ce2 <ymodem_receive+0x13a>
 8001cdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d9ed      	bls.n	8001cbe <ymodem_receive+0x116>
                                        p_fileSize[i++] = '\0';
 8001ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	663a      	str	r2, [r7, #96]	@ 0x60
 8001ce8:	3368      	adds	r3, #104	@ 0x68
 8001cea:	443b      	add	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        str_to_int(p_fileSize, &fileSize);
 8001cf2:	f107 0220 	add.w	r2, r7, #32
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc85 	bl	800060c <str_to_int>
                                        if (fileSize > (USER_FLASH_SIZE + 1)) {
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	4a70      	ldr	r2, [pc, #448]	@ (8001ec8 <ymodem_receive+0x320>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d915      	bls.n	8001d36 <ymodem_receive+0x18e>
                                            tmp = CA;
 8001d0a:	2318      	movs	r3, #24
 8001d0c:	72fb      	strb	r3, [r7, #11]
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001d0e:	f107 010b 	add.w	r1, r7, #11
 8001d12:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d16:	2201      	movs	r2, #1
 8001d18:	486c      	ldr	r0, [pc, #432]	@ (8001ecc <ymodem_receive+0x324>)
 8001d1a:	f004 fb15 	bl	8006348 <HAL_UART_Transmit>
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001d1e:	f107 010b 	add.w	r1, r7, #11
 8001d22:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d26:	2201      	movs	r2, #1
 8001d28:	4868      	ldr	r0, [pc, #416]	@ (8001ecc <ymodem_receive+0x324>)
 8001d2a:	f004 fb0d 	bl	8006348 <HAL_UART_Transmit>
                                            result = COM_LIMIT;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                                            break;
 8001d34:	e063      	b.n	8001dfe <ymodem_receive+0x256>
                                        FLASH_IF_disable_all_protection();
 8001d36:	f7fe fe37 	bl	80009a8 <FLASH_IF_disable_all_protection>
                                        if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 8001d3a:	485f      	ldr	r0, [pc, #380]	@ (8001eb8 <ymodem_receive+0x310>)
 8001d3c:	f7fe fdea 	bl	8000914 <FLASH_IF_erase>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <ymodem_receive+0x1a2>
                                            return COM_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0d4      	b.n	8001ef4 <ymodem_receive+0x34c>
                                        *p_size = fileSize;
 8001d4a:	6a3a      	ldr	r2, [r7, #32]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	601a      	str	r2, [r3, #0]
                                        serial_put_byte(ACK);
 8001d50:	2006      	movs	r0, #6
 8001d52:	f7fe fd6b 	bl	800082c <serial_put_byte>
                                        serial_put_byte(CRC16);
 8001d56:	2043      	movs	r0, #67	@ 0x43
 8001d58:	f7fe fd68 	bl	800082c <serial_put_byte>
 8001d5c:	e047      	b.n	8001dee <ymodem_receive+0x246>
                                        serial_put_byte(ACK);
 8001d5e:	2006      	movs	r0, #6
 8001d60:	f7fe fd64 	bl	800082c <serial_put_byte>
                                        fileDone = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	65bb      	str	r3, [r7, #88]	@ 0x58
                                        sessionDone = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                        break;
 8001d6c:	e047      	b.n	8001dfe <ymodem_receive+0x256>
                                	ramSource = (uint32_t)&aPacketData[PACKET_DATA_INDEX];
 8001d6e:	4b54      	ldr	r3, [pc, #336]	@ (8001ec0 <ymodem_receive+0x318>)
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
                                	if (ramSource == 0 || ramSource < 0x20000000 || ramSource > 0x2004FFFF) {
 8001d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <ymodem_receive+0x1e0>
 8001d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d7e:	d303      	bcc.n	8001d88 <ymodem_receive+0x1e0>
 8001d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d82:	4a53      	ldr	r2, [pc, #332]	@ (8001ed0 <ymodem_receive+0x328>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d909      	bls.n	8001d9c <ymodem_receive+0x1f4>
                                	    serial_put_byte(CA);
 8001d88:	2018      	movs	r0, #24
 8001d8a:	f7fe fd4f 	bl	800082c <serial_put_byte>
                                	    serial_put_byte(CA);
 8001d8e:	2018      	movs	r0, #24
 8001d90:	f7fe fd4c 	bl	800082c <serial_put_byte>
                                	    result = FLASHIF_WRITING_ERROR;
 8001d94:	2303      	movs	r3, #3
 8001d96:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001d9a:	e028      	b.n	8001dee <ymodem_receive+0x246>
                                	    uint32_t stt = FLASH_IF_write(flashDestination, (uint32_t*)ramSource, packetLength / 4);
 8001d9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	461a      	mov	r2, r3
 8001da4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001da6:	f7fe fe31 	bl	8000a0c <FLASH_IF_write>
 8001daa:	6438      	str	r0, [r7, #64]	@ 0x40
                                	    if (stt == FLASHIF_WRITING_ERROR) {
 8001dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d109      	bne.n	8001dc6 <ymodem_receive+0x21e>
                                	        serial_put_byte(CA);
 8001db2:	2018      	movs	r0, #24
 8001db4:	f7fe fd3a 	bl	800082c <serial_put_byte>
                                	        serial_put_byte(CA);
 8001db8:	2018      	movs	r0, #24
 8001dba:	f7fe fd37 	bl	800082c <serial_put_byte>
                                	        result = FLASHIF_WRITING_ERROR;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001dc4:	e013      	b.n	8001dee <ymodem_receive+0x246>
                                	    else if (stt == FLASHIF_WRITINGCTRL_ERROR) {
 8001dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d109      	bne.n	8001de0 <ymodem_receive+0x238>
                                	        serial_put_byte(CA);
 8001dcc:	2018      	movs	r0, #24
 8001dce:	f7fe fd2d 	bl	800082c <serial_put_byte>
                                	        serial_put_byte(CA);
 8001dd2:	2018      	movs	r0, #24
 8001dd4:	f7fe fd2a 	bl	800082c <serial_put_byte>
                                	        result = FLASHIF_WRITINGCTRL_ERROR;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001dde:	e006      	b.n	8001dee <ymodem_receive+0x246>
                                	        flashDestination += packetLength;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001de4:	4413      	add	r3, r2
 8001de6:	667b      	str	r3, [r7, #100]	@ 0x64
                                	        serial_put_byte(ACK);
 8001de8:	2006      	movs	r0, #6
 8001dea:	f7fe fd1f 	bl	800082c <serial_put_byte>
                                packetsReceived++;
 8001dee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001df2:	3301      	adds	r3, #1
 8001df4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                                sessionBegin = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	657b      	str	r3, [r7, #84]	@ 0x54
                            break;
 8001dfc:	bf00      	nop
                    }
                    break;
 8001dfe:	e020      	b.n	8001e42 <ymodem_receive+0x29a>

                case HAL_BUSY:

                    serial_put_byte(CA);
 8001e00:	2018      	movs	r0, #24
 8001e02:	f7fe fd13 	bl	800082c <serial_put_byte>
                    serial_put_byte(CA);
 8001e06:	2018      	movs	r0, #24
 8001e08:	f7fe fd10 	bl	800082c <serial_put_byte>
                    result = COM_ABORT;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    break;
 8001e12:	e016      	b.n	8001e42 <ymodem_receive+0x29a>

                default:
                    if (sessionBegin) {
 8001e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <ymodem_receive+0x278>
                        errors++;
 8001e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                    if (errors > MAX_ERRORS) {
 8001e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d909      	bls.n	8001e3a <ymodem_receive+0x292>

                        serial_put_byte(CA);
 8001e26:	2018      	movs	r0, #24
 8001e28:	f7fe fd00 	bl	800082c <serial_put_byte>
                        serial_put_byte(CA);
 8001e2c:	2018      	movs	r0, #24
 8001e2e:	f7fe fcfd 	bl	800082c <serial_put_byte>
                        result = COM_ABORT;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    }
                    else {
                        serial_put_byte(CRC16);
                    }
                    break;
 8001e38:	e002      	b.n	8001e40 <ymodem_receive+0x298>
                        serial_put_byte(CRC16);
 8001e3a:	2043      	movs	r0, #67	@ 0x43
 8001e3c:	f7fe fcf6 	bl	800082c <serial_put_byte>
                    break;
 8001e40:	bf00      	nop
        while ((fileDone == 0) && (result == COM_OK)) {
 8001e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d104      	bne.n	8001e52 <ymodem_receive+0x2aa>
 8001e48:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f43f aee0 	beq.w	8001c12 <ymodem_receive+0x6a>
    while ((sessionDone == 0) && (result == COM_OK)) {
 8001e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d104      	bne.n	8001e62 <ymodem_receive+0x2ba>
 8001e58:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f43f aed2 	beq.w	8001c06 <ymodem_receive+0x5e>
            }
        }
    }

    /* Final status report */
    if (result == COM_OK) {
 8001e62:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10b      	bne.n	8001e82 <ymodem_receive+0x2da>
        serial_put_string((uint8_t*)"\r\nYMODEM Success: ");
 8001e6a:	481a      	ldr	r0, [pc, #104]	@ (8001ed4 <ymodem_receive+0x32c>)
 8001e6c:	f7fe fcc2 	bl	80007f4 <serial_put_string>
        serial_put_string(aFileName);
 8001e70:	4814      	ldr	r0, [pc, #80]	@ (8001ec4 <ymodem_receive+0x31c>)
 8001e72:	f7fe fcbf 	bl	80007f4 <serial_put_string>

        serial_put_string((uint8_t*)p_fileSize);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fcba 	bl	80007f4 <serial_put_string>
 8001e80:	e036      	b.n	8001ef0 <ymodem_receive+0x348>
    }
    else {
        serial_put_string((uint8_t*)"\r\nYMODEM Failed: ");
 8001e82:	4815      	ldr	r0, [pc, #84]	@ (8001ed8 <ymodem_receive+0x330>)
 8001e84:	f7fe fcb6 	bl	80007f4 <serial_put_string>
        switch(result) {
 8001e88:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d006      	beq.n	8001e9e <ymodem_receive+0x2f6>
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	dc29      	bgt.n	8001ee8 <ymodem_receive+0x340>
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d00a      	beq.n	8001eae <ymodem_receive+0x306>
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d004      	beq.n	8001ea6 <ymodem_receive+0x2fe>
 8001e9c:	e024      	b.n	8001ee8 <ymodem_receive+0x340>
            case COM_LIMIT:
                serial_put_string((uint8_t*)"File too large");
 8001e9e:	480f      	ldr	r0, [pc, #60]	@ (8001edc <ymodem_receive+0x334>)
 8001ea0:	f7fe fca8 	bl	80007f4 <serial_put_string>
                break;
 8001ea4:	e024      	b.n	8001ef0 <ymodem_receive+0x348>
            case COM_DATA:
                serial_put_string((uint8_t*)"Flash write error");
 8001ea6:	480e      	ldr	r0, [pc, #56]	@ (8001ee0 <ymodem_receive+0x338>)
 8001ea8:	f7fe fca4 	bl	80007f4 <serial_put_string>
                break;
 8001eac:	e020      	b.n	8001ef0 <ymodem_receive+0x348>

            case COM_ABORT:
                serial_put_string((uint8_t*)"Transfer aborted");
 8001eae:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <ymodem_receive+0x33c>)
 8001eb0:	f7fe fca0 	bl	80007f4 <serial_put_string>
                break;
 8001eb4:	e01c      	b.n	8001ef0 <ymodem_receive+0x348>
 8001eb6:	bf00      	nop
 8001eb8:	08020000 	.word	0x08020000
 8001ebc:	200001e0 	.word	0x200001e0
 8001ec0:	200001e4 	.word	0x200001e4
 8001ec4:	2000017c 	.word	0x2000017c
 8001ec8:	00060001 	.word	0x00060001
 8001ecc:	20000128 	.word	0x20000128
 8001ed0:	2004ffff 	.word	0x2004ffff
 8001ed4:	08008c70 	.word	0x08008c70
 8001ed8:	08008c84 	.word	0x08008c84
 8001edc:	08008c98 	.word	0x08008c98
 8001ee0:	08008ca8 	.word	0x08008ca8
 8001ee4:	08008cbc 	.word	0x08008cbc
            default:
                serial_put_string((uint8_t*)"Unknown error");\
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <ymodem_receive+0x354>)
 8001eea:	f7fe fc83 	bl	80007f4 <serial_put_string>
                break;
 8001eee:	bf00      	nop
        }
    }

    return result;
 8001ef0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3768      	adds	r7, #104	@ 0x68
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	08008cd0 	.word	0x08008cd0

08001f00 <ymodem_transmit>:
  * @param  p_buff: Address of the first byte
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef ymodem_transmit(uint8_t* p_buf, const uint8_t* p_file_name, uint32_t file_size) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	@ 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
    uint32_t errors = 0, ackRecpt = 0, size = 0, pktSize;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *p_buf_int;
    COM_StatusTypeDef result = COM_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t blkNumber = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	623b      	str	r3, [r7, #32]
#else
    uint8_t tempChkSum;
#endif

    /* Prepare first block - header */
    prepare_initial_packet(aPacketData, p_file_name, file_size);
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	4899      	ldr	r0, [pc, #612]	@ (800218c <ymodem_transmit+0x28c>)
 8001f28:	f7ff fd18 	bl	800195c <prepare_initial_packet>

    while ((!ackRecpt) && (result == COM_OK)) {
 8001f2c:	e054      	b.n	8001fd8 <ymodem_transmit+0xd8>
        /* Send Packet */
        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001f2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f32:	2283      	movs	r2, #131	@ 0x83
 8001f34:	4996      	ldr	r1, [pc, #600]	@ (8002190 <ymodem_transmit+0x290>)
 8001f36:	4897      	ldr	r0, [pc, #604]	@ (8002194 <ymodem_transmit+0x294>)
 8001f38:	f004 fa06 	bl	8006348 <HAL_UART_Transmit>

        /* Send CRC or Checksum */
#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001f3c:	2280      	movs	r2, #128	@ 0x80
 8001f3e:	4996      	ldr	r1, [pc, #600]	@ (8002198 <ymodem_transmit+0x298>)
 8001f40:	4896      	ldr	r0, [pc, #600]	@ (800219c <ymodem_transmit+0x29c>)
 8001f42:	f000 fb64 	bl	800260e <HAL_CRC_Calculate>
 8001f46:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fc6c 	bl	800082c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fc67 	bl	800082c <serial_put_byte>
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        /* Wait for response */
        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 8001f5e:	f107 0110 	add.w	r1, r7, #16
 8001f62:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f66:	2201      	movs	r2, #1
 8001f68:	488a      	ldr	r0, [pc, #552]	@ (8002194 <ymodem_transmit+0x294>)
 8001f6a:	f004 fa78 	bl	800645e <HAL_UART_Receive>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d128      	bne.n	8001fc6 <ymodem_transmit+0xc6>
            if (aRxCtrl[0] == ACK) {
 8001f74:	7c3b      	ldrb	r3, [r7, #16]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d10a      	bne.n	8001f90 <ymodem_transmit+0x90>
                ackRecpt = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	633b      	str	r3, [r7, #48]	@ 0x30
                HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT); // Wait for 'C'
 8001f7e:	f107 0110 	add.w	r1, r7, #16
 8001f82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f86:	2201      	movs	r2, #1
 8001f88:	4882      	ldr	r0, [pc, #520]	@ (8002194 <ymodem_transmit+0x294>)
 8001f8a:	f004 fa68 	bl	800645e <HAL_UART_Receive>
 8001f8e:	e01d      	b.n	8001fcc <ymodem_transmit+0xcc>
            }
            else if (aRxCtrl[0] == CA) {
 8001f90:	7c3b      	ldrb	r3, [r7, #16]
 8001f92:	2b18      	cmp	r3, #24
 8001f94:	d11a      	bne.n	8001fcc <ymodem_transmit+0xcc>
                if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 8001f96:	f107 0110 	add.w	r1, r7, #16
 8001f9a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	487c      	ldr	r0, [pc, #496]	@ (8002194 <ymodem_transmit+0x294>)
 8001fa2:	f004 fa5c 	bl	800645e <HAL_UART_Receive>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <ymodem_transmit+0xcc>
 8001fac:	7c3b      	ldrb	r3, [r7, #16]
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d10c      	bne.n	8001fcc <ymodem_transmit+0xcc>
                    HAL_Delay(2);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f000 f9da 	bl	800236c <HAL_Delay>
                    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001fb8:	4b76      	ldr	r3, [pc, #472]	@ (8002194 <ymodem_transmit+0x294>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
                    result = COM_ABORT;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001fc4:	e002      	b.n	8001fcc <ymodem_transmit+0xcc>
                }
            }
        }
        else {
            errors++;
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc8:	3301      	adds	r3, #1
 8001fca:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if (errors >= MAX_ERRORS) {
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d902      	bls.n	8001fd8 <ymodem_transmit+0xd8>
            result = COM_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((!ackRecpt) && (result == COM_OK)) {
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <ymodem_transmit+0xe6>
 8001fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0a3      	beq.n	8001f2e <ymodem_transmit+0x2e>
        }
    }

    p_buf_int = p_buf;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    size = file_size;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Send data packets */
    while ((size) && (result == COM_OK)) {
 8001fee:	e06e      	b.n	80020ce <ymodem_transmit+0x1ce>
        prepare_packet(p_buf_int, aPacketData, blkNumber, size);
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff6:	4965      	ldr	r1, [pc, #404]	@ (800218c <ymodem_transmit+0x28c>)
 8001ff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ffa:	f7ff fd14 	bl	8001a26 <prepare_packet>
        ackRecpt = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34

        while ((!ackRecpt) && (result == COM_OK)) {
 8002006:	e05b      	b.n	80020c0 <ymodem_transmit+0x1c0>
            /* Determine packet size */
            pktSize = (size >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800200e:	d302      	bcc.n	8002016 <ymodem_transmit+0x116>
 8002010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002014:	e000      	b.n	8002018 <ymodem_transmit+0x118>
 8002016:	2380      	movs	r3, #128	@ 0x80
 8002018:	617b      	str	r3, [r7, #20]

            /* Send packet */
            HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pktSize + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	b29b      	uxth	r3, r3
 800201e:	3303      	adds	r3, #3
 8002020:	b29a      	uxth	r2, r3
 8002022:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002026:	495a      	ldr	r1, [pc, #360]	@ (8002190 <ymodem_transmit+0x290>)
 8002028:	485a      	ldr	r0, [pc, #360]	@ (8002194 <ymodem_transmit+0x294>)
 800202a:	f004 f98d 	bl	8006348 <HAL_UART_Transmit>

            /* Send CRC/Checksum */
#ifdef CRC16_F
            tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pktSize);
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4959      	ldr	r1, [pc, #356]	@ (8002198 <ymodem_transmit+0x298>)
 8002032:	485a      	ldr	r0, [pc, #360]	@ (800219c <ymodem_transmit+0x29c>)
 8002034:	f000 faeb 	bl	800260e <HAL_CRC_Calculate>
 8002038:	61b8      	str	r0, [r7, #24]
            serial_put_byte(tempCrc >> 8);
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fbf3 	bl	800082c <serial_put_byte>
            serial_put_byte(tempCrc & 0xFF);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fbee 	bl	800082c <serial_put_byte>
            tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], pktSize);
            Serial_PutByte(tempChkSum);
#endif

            /* Wait for ACK */
            if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == ACK)) {
 8002050:	f107 0110 	add.w	r1, r7, #16
 8002054:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002058:	2201      	movs	r2, #1
 800205a:	484e      	ldr	r0, [pc, #312]	@ (8002194 <ymodem_transmit+0x294>)
 800205c:	f004 f9ff 	bl	800645e <HAL_UART_Receive>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d123      	bne.n	80020ae <ymodem_transmit+0x1ae>
 8002066:	7c3b      	ldrb	r3, [r7, #16]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d120      	bne.n	80020ae <ymodem_transmit+0x1ae>
                ackRecpt = 1;
 800206c:	2301      	movs	r3, #1
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
                if (size > pktSize) {
 8002070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	d913      	bls.n	80020a0 <ymodem_transmit+0x1a0>
                    p_buf_int += pktSize;
 8002078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	4413      	add	r3, r2
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size -= pktSize;
 8002080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if (blkNumber == (USER_FLASH_SIZE / PACKET_1K_SIZE)) {
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800208e:	d103      	bne.n	8002098 <ymodem_transmit+0x198>
                        result = COM_LIMIT;
 8002090:	2305      	movs	r3, #5
 8002092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if (size > pktSize) {
 8002096:	e00d      	b.n	80020b4 <ymodem_transmit+0x1b4>
                    } else {
                        blkNumber++;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	3301      	adds	r3, #1
 800209c:	623b      	str	r3, [r7, #32]
                if (size > pktSize) {
 800209e:	e009      	b.n	80020b4 <ymodem_transmit+0x1b4>
                    }
                }
                else {
                    p_buf_int += pktSize;
 80020a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4413      	add	r3, r2
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if (size > pktSize) {
 80020ac:	e002      	b.n	80020b4 <ymodem_transmit+0x1b4>
                }
            }
            else {
                errors++;
 80020ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b0:	3301      	adds	r3, #1
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 80020b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d902      	bls.n	80020c0 <ymodem_transmit+0x1c0>
                result = COM_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 80020c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <ymodem_transmit+0x1ce>
 80020c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d09c      	beq.n	8002008 <ymodem_transmit+0x108>
    while ((size) && (result == COM_OK)) {
 80020ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <ymodem_transmit+0x1dc>
 80020d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d089      	beq.n	8001ff0 <ymodem_transmit+0xf0>
            }
        }
    }

    /* Send EOT */
    if (result == COM_OK) {
 80020dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d143      	bne.n	800216c <ymodem_transmit+0x26c>
        ackRecpt = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	@ 0x34
        while ((!ackRecpt) && (result == COM_OK)) {
 80020ec:	e037      	b.n	800215e <ymodem_transmit+0x25e>
            serial_put_byte(EOT);
 80020ee:	2004      	movs	r0, #4
 80020f0:	f7fe fb9c 	bl	800082c <serial_put_byte>

            if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 80020f4:	f107 0110 	add.w	r1, r7, #16
 80020f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020fc:	2201      	movs	r2, #1
 80020fe:	4825      	ldr	r0, [pc, #148]	@ (8002194 <ymodem_transmit+0x294>)
 8002100:	f004 f9ad 	bl	800645e <HAL_UART_Receive>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d120      	bne.n	800214c <ymodem_transmit+0x24c>
                if (aRxCtrl[0] == ACK) {
 800210a:	7c3b      	ldrb	r3, [r7, #16]
 800210c:	2b06      	cmp	r3, #6
 800210e:	d102      	bne.n	8002116 <ymodem_transmit+0x216>
                    ackRecpt = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30
 8002114:	e01d      	b.n	8002152 <ymodem_transmit+0x252>
                }
                else if (aRxCtrl[0] == CA) {
 8002116:	7c3b      	ldrb	r3, [r7, #16]
 8002118:	2b18      	cmp	r3, #24
 800211a:	d11a      	bne.n	8002152 <ymodem_transmit+0x252>
                    if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 800211c:	f107 0110 	add.w	r1, r7, #16
 8002120:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002124:	2201      	movs	r2, #1
 8002126:	481b      	ldr	r0, [pc, #108]	@ (8002194 <ymodem_transmit+0x294>)
 8002128:	f004 f999 	bl	800645e <HAL_UART_Receive>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <ymodem_transmit+0x252>
 8002132:	7c3b      	ldrb	r3, [r7, #16]
 8002134:	2b18      	cmp	r3, #24
 8002136:	d10c      	bne.n	8002152 <ymodem_transmit+0x252>
                        HAL_Delay(2);
 8002138:	2002      	movs	r0, #2
 800213a:	f000 f917 	bl	800236c <HAL_Delay>
                        __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <ymodem_transmit+0x294>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
                        result = COM_ABORT;
 8002144:	2302      	movs	r3, #2
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800214a:	e002      	b.n	8002152 <ymodem_transmit+0x252>
                    }
                }
            }
            else {
                errors++;
 800214c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800214e:	3301      	adds	r3, #1
 8002150:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 8002152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002154:	2b04      	cmp	r3, #4
 8002156:	d902      	bls.n	800215e <ymodem_transmit+0x25e>
                result = COM_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <ymodem_transmit+0x26c>
 8002164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0c0      	beq.n	80020ee <ymodem_transmit+0x1ee>
            }
        }
    }

    /* Send empty packet to close session */
    if (result == COM_OK) {
 800216c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002170:	2b00      	cmp	r3, #0
 8002172:	d14e      	bne.n	8002212 <ymodem_transmit+0x312>
        aPacketData[PACKET_START_INDEX] = SOH;
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <ymodem_transmit+0x28c>)
 8002176:	2201      	movs	r2, #1
 8002178:	705a      	strb	r2, [r3, #1]
        aPacketData[PACKET_NUMBER_INDEX] = 0;
 800217a:	4b04      	ldr	r3, [pc, #16]	@ (800218c <ymodem_transmit+0x28c>)
 800217c:	2200      	movs	r2, #0
 800217e:	709a      	strb	r2, [r3, #2]
        aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8002180:	4b02      	ldr	r3, [pc, #8]	@ (800218c <ymodem_transmit+0x28c>)
 8002182:	22ff      	movs	r2, #255	@ 0xff
 8002184:	70da      	strb	r2, [r3, #3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 8002186:	2304      	movs	r3, #4
 8002188:	77fb      	strb	r3, [r7, #31]
 800218a:	e010      	b.n	80021ae <ymodem_transmit+0x2ae>
 800218c:	200001e0 	.word	0x200001e0
 8002190:	200001e1 	.word	0x200001e1
 8002194:	20000128 	.word	0x20000128
 8002198:	200001e4 	.word	0x200001e4
 800219c:	20000084 	.word	0x20000084
            aPacketData[i] = 0x00;
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <ymodem_transmit+0x320>)
 80021a4:	2100      	movs	r1, #0
 80021a6:	54d1      	strb	r1, [r2, r3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	3301      	adds	r3, #1
 80021ac:	77fb      	strb	r3, [r7, #31]
 80021ae:	7ffb      	ldrb	r3, [r7, #31]
 80021b0:	2b83      	cmp	r3, #131	@ 0x83
 80021b2:	d9f5      	bls.n	80021a0 <ymodem_transmit+0x2a0>
        }

        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80021b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021b8:	2283      	movs	r2, #131	@ 0x83
 80021ba:	491a      	ldr	r1, [pc, #104]	@ (8002224 <ymodem_transmit+0x324>)
 80021bc:	481a      	ldr	r0, [pc, #104]	@ (8002228 <ymodem_transmit+0x328>)
 80021be:	f004 f8c3 	bl	8006348 <HAL_UART_Transmit>

#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	4919      	ldr	r1, [pc, #100]	@ (800222c <ymodem_transmit+0x32c>)
 80021c6:	481a      	ldr	r0, [pc, #104]	@ (8002230 <ymodem_transmit+0x330>)
 80021c8:	f000 fa21 	bl	800260e <HAL_CRC_Calculate>
 80021cc:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fb29 	bl	800082c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fb24 	bl	800082c <serial_put_byte>
#else
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 80021e4:	f107 0110 	add.w	r1, r7, #16
 80021e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021ec:	2201      	movs	r2, #1
 80021ee:	480e      	ldr	r0, [pc, #56]	@ (8002228 <ymodem_transmit+0x328>)
 80021f0:	f004 f935 	bl	800645e <HAL_UART_Receive>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <ymodem_transmit+0x312>
            if (aRxCtrl[0] == CA) {
 80021fa:	7c3b      	ldrb	r3, [r7, #16]
 80021fc:	2b18      	cmp	r3, #24
 80021fe:	d108      	bne.n	8002212 <ymodem_transmit+0x312>
                HAL_Delay(2);
 8002200:	2002      	movs	r0, #2
 8002202:	f000 f8b3 	bl	800236c <HAL_Delay>
                __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <ymodem_transmit+0x328>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
                result = COM_ABORT;
 800220c:	2302      	movs	r3, #2
 800220e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return result;
 8002212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002216:	4618      	mov	r0, r3
 8002218:	3738      	adds	r7, #56	@ 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200001e0 	.word	0x200001e0
 8002224:	200001e1 	.word	0x200001e1
 8002228:	20000128 	.word	0x20000128
 800222c:	200001e4 	.word	0x200001e4
 8002230:	20000084 	.word	0x20000084

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800226c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002238:	f7ff fab0 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002254:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002262:	f005 fadb 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7fe fca3 	bl	8000bb0 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800226c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002278:	08008d3c 	.word	0x08008d3c
  ldr r2, =_sbss
 800227c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002280:	20000758 	.word	0x20000758

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <HAL_Init+0x40>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <HAL_Init+0x40>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_Init+0x40>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f94f 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff f85a 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f967 	bl	80025be <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002308:	f000 f92f 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	@ (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000000 	.word	0x20000000
 8002324:	20000008 	.word	0x20000008
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000008 	.word	0x20000008
 8002350:	200005e8 	.word	0x200005e8

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200005e8 	.word	0x200005e8

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000008 	.word	0x20000008

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	@ (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002534:	f7ff ff8e 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff29 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff3e 	bl	80023fc <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff8e 	bl	80024a8 <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5d 	bl	8002454 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff31 	bl	8002418 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e00e      	b.n	8002606 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	795b      	ldrb	r3, [r3, #5]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe fee3 	bl	80013c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2202      	movs	r2, #2
 8002622:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e00a      	b.n	8002650 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	441a      	add	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	d3f0      	bcc.n	800263a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002666:	693b      	ldr	r3, [r7, #16]
}
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002682:	f7ff fe67 	bl	8002354 <HAL_GetTick>
 8002686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d008      	beq.n	80026a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e052      	b.n	800274c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0216 	bic.w	r2, r2, #22
 80026b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <HAL_DMA_Abort+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0208 	bic.w	r2, r2, #8
 80026e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f6:	e013      	b.n	8002720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f8:	f7ff fe2c 	bl	8002354 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b05      	cmp	r3, #5
 8002704:	d90c      	bls.n	8002720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e015      	b.n	800274c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e4      	bne.n	80026f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	223f      	movs	r2, #63	@ 0x3f
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d004      	beq.n	8002772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00c      	b.n	800278c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2205      	movs	r2, #5
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027a6:	b2db      	uxtb	r3, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027c2:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <HAL_FLASH_Program+0x9c>)
 80027c4:	7e1b      	ldrb	r3, [r3, #24]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_FLASH_Program+0x1a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e03b      	b.n	8002846 <HAL_FLASH_Program+0x92>
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_FLASH_Program+0x9c>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027d8:	f000 f8b0 	bl	800293c <FLASH_WaitForLastOperation>
 80027dc:	4603      	mov	r3, r0
 80027de:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d12b      	bne.n	800283e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027ec:	783b      	ldrb	r3, [r7, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	68b8      	ldr	r0, [r7, #8]
 80027f2:	f000 f95b 	bl	8002aac <FLASH_Program_Byte>
 80027f6:	e016      	b.n	8002826 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d105      	bne.n	800280a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027fe:	883b      	ldrh	r3, [r7, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	68b8      	ldr	r0, [r7, #8]
 8002804:	f000 f92e 	bl	8002a64 <FLASH_Program_HalfWord>
 8002808:	e00d      	b.n	8002826 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d105      	bne.n	800281c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	68b8      	ldr	r0, [r7, #8]
 8002816:	f000 f903 	bl	8002a20 <FLASH_Program_Word>
 800281a:	e004      	b.n	8002826 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800281c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002820:	68b8      	ldr	r0, [r7, #8]
 8002822:	f000 f8cb 	bl	80029bc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002826:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800282a:	f000 f887 	bl	800293c <FLASH_WaitForLastOperation>
 800282e:	4603      	mov	r3, r0
 8002830:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002832:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <HAL_FLASH_Program+0xa0>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <HAL_FLASH_Program+0xa0>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800283e:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <HAL_FLASH_Program+0x9c>)
 8002840:	2200      	movs	r2, #0
 8002842:	761a      	strb	r2, [r3, #24]

  return status;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200005ec 	.word	0x200005ec
 8002854:	40023c00 	.word	0x40023c00

08002858 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_FLASH_Unlock+0x38>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	da0b      	bge.n	8002882 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_FLASH_Unlock+0x38>)
 800286c:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_FLASH_Unlock+0x3c>)
 800286e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <HAL_FLASH_Unlock+0x38>)
 8002872:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <HAL_FLASH_Unlock+0x40>)
 8002874:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_FLASH_Unlock+0x38>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	da01      	bge.n	8002882 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002882:	79fb      	ldrb	r3, [r7, #7]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40023c00 	.word	0x40023c00
 8002894:	45670123 	.word	0x45670123
 8002898:	cdef89ab 	.word	0xcdef89ab

0800289c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_FLASH_Lock+0x1c>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_FLASH_Lock+0x1c>)
 80028a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028aa:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80028cc:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80028ce:	4a07      	ldr	r2, [pc, #28]	@ (80028ec <HAL_FLASH_OB_Unlock+0x30>)
 80028d0:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80028d2:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80028d4:	4a06      	ldr	r2, [pc, #24]	@ (80028f0 <HAL_FLASH_OB_Unlock+0x34>)
 80028d6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40023c00 	.word	0x40023c00
 80028ec:	08192a3b 	.word	0x08192a3b
 80028f0:	4c5d6e7f 	.word	0x4c5d6e7f

080028f4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80028f8:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_FLASH_OB_Lock+0x1c>)
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4a04      	ldr	r2, [pc, #16]	@ (8002910 <HAL_FLASH_OB_Lock+0x1c>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8002918:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_FLASH_OB_Launch+0x24>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4a06      	ldr	r2, [pc, #24]	@ (8002938 <HAL_FLASH_OB_Launch+0x24>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8002928:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800292c:	f000 f806 	bl	800293c <FLASH_WaitForLastOperation>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c14 	.word	0x40023c14

0800293c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002948:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <FLASH_WaitForLastOperation+0x78>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800294e:	f7ff fd01 	bl	8002354 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002954:	e010      	b.n	8002978 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800295c:	d00c      	beq.n	8002978 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <FLASH_WaitForLastOperation+0x38>
 8002964:	f7ff fcf6 	bl	8002354 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d201      	bcs.n	8002978 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e019      	b.n	80029ac <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002978:	4b0f      	ldr	r3, [pc, #60]	@ (80029b8 <FLASH_WaitForLastOperation+0x7c>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e8      	bne.n	8002956 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002984:	4b0c      	ldr	r3, [pc, #48]	@ (80029b8 <FLASH_WaitForLastOperation+0x7c>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <FLASH_WaitForLastOperation+0x7c>)
 8002992:	2201      	movs	r2, #1
 8002994:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <FLASH_WaitForLastOperation+0x7c>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80029a2:	f000 f8a5 	bl	8002af0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0

}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200005ec 	.word	0x200005ec
 80029b8:	40023c00 	.word	0x40023c00

080029bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029c8:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <FLASH_Program_DoubleWord+0x60>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	4a13      	ldr	r2, [pc, #76]	@ (8002a1c <FLASH_Program_DoubleWord+0x60>)
 80029ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029d4:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <FLASH_Program_DoubleWord+0x60>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4a10      	ldr	r2, [pc, #64]	@ (8002a1c <FLASH_Program_DoubleWord+0x60>)
 80029da:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80029de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029e0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a1c <FLASH_Program_DoubleWord+0x60>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <FLASH_Program_DoubleWord+0x60>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80029f2:	f3bf 8f6f 	isb	sy
}
 80029f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80029f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	000a      	movs	r2, r1
 8002a06:	2300      	movs	r3, #0
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	3104      	adds	r1, #4
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <FLASH_Program_Word+0x40>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a60 <FLASH_Program_Word+0x40>)
 8002a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <FLASH_Program_Word+0x40>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <FLASH_Program_Word+0x40>)
 8002a3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a42:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <FLASH_Program_Word+0x40>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	4a06      	ldr	r2, [pc, #24]	@ (8002a60 <FLASH_Program_Word+0x40>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40023c00 	.word	0x40023c00

08002a64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <FLASH_Program_HalfWord+0x44>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa8 <FLASH_Program_HalfWord+0x44>)
 8002a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <FLASH_Program_HalfWord+0x44>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <FLASH_Program_HalfWord+0x44>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a88:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <FLASH_Program_HalfWord+0x44>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	4a06      	ldr	r2, [pc, #24]	@ (8002aa8 <FLASH_Program_HalfWord+0x44>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	801a      	strh	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00

08002aac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <FLASH_Program_Byte+0x40>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	4a0b      	ldr	r2, [pc, #44]	@ (8002aec <FLASH_Program_Byte+0x40>)
 8002abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <FLASH_Program_Byte+0x40>)
 8002ac6:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <FLASH_Program_Byte+0x40>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <FLASH_Program_Byte+0x40>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4a06      	ldr	r2, [pc, #24]	@ (8002aec <FLASH_Program_Byte+0x40>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	701a      	strb	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00

08002af0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002af4:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f043 0310 	orr.w	r3, r3, #16
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b0a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002b0c:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b0e:	2210      	movs	r2, #16
 8002b10:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002b12:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b1e:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	4a24      	ldr	r2, [pc, #144]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b28:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002b2a:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b4a:	2240      	movs	r2, #64	@ 0x40
 8002b4c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	4a15      	ldr	r2, [pc, #84]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b64:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002b78:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b8a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b98:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	4a05      	ldr	r2, [pc, #20]	@ (8002bb8 <FLASH_SetErrorCode+0xc8>)
 8002ba2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <FLASH_SetErrorCode+0xc4>)
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	60da      	str	r2, [r3, #12]
  }
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40023c00 	.word	0x40023c00
 8002bb8:	200005ec 	.word	0x200005ec

08002bbc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bca:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <HAL_FLASHEx_Erase+0xd4>)
 8002bcc:	7e1b      	ldrb	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_FLASHEx_Erase+0x1a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e058      	b.n	8002c88 <HAL_FLASHEx_Erase+0xcc>
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_FLASHEx_Erase+0xd4>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bdc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002be0:	f7ff feac 	bl	800293c <FLASH_WaitForLastOperation>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d148      	bne.n	8002c80 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bf4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d115      	bne.n	8002c2a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 f8d6 	bl	8002dbc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c10:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c14:	f7ff fe92 	bl	800293c <FLASH_WaitForLastOperation>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_FLASHEx_Erase+0xd8>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	@ (8002c94 <HAL_FLASHEx_Erase+0xd8>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6113      	str	r3, [r2, #16]
 8002c28:	e028      	b.n	8002c7c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	e01c      	b.n	8002c6c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	68b8      	ldr	r0, [r7, #8]
 8002c3c:	f000 f8e2 	bl	8002e04 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c44:	f7ff fe7a 	bl	800293c <FLASH_WaitForLastOperation>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002c4c:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <HAL_FLASHEx_Erase+0xd8>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	4a10      	ldr	r2, [pc, #64]	@ (8002c94 <HAL_FLASHEx_Erase+0xd8>)
 8002c52:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002c56:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	601a      	str	r2, [r3, #0]
          break;
 8002c64:	e00a      	b.n	8002c7c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3da      	bcc.n	8002c32 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002c7c:	f000 f9fe 	bl	800307c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c80:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <HAL_FLASHEx_Erase+0xd4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	761a      	strb	r2, [r3, #24]

  return status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200005ec 	.word	0x200005ec
 8002c94:	40023c00 	.word	0x40023c00

08002c98 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ca4:	4b32      	ldr	r3, [pc, #200]	@ (8002d70 <HAL_FLASHEx_OBProgram+0xd8>)
 8002ca6:	7e1b      	ldrb	r3, [r3, #24]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_FLASHEx_OBProgram+0x18>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e05b      	b.n	8002d68 <HAL_FLASHEx_OBProgram+0xd0>
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d70 <HAL_FLASHEx_OBProgram+0xd8>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f000 f8dd 	bl	8002e94 <FLASH_OB_EnableWRP>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e009      	b.n	8002cf4 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 f8f4 	bl	8002ed8 <FLASH_OB_DisableWRP>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f906 	bl	8002f18 <FLASH_OB_RDP_LevelConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e1b      	ldrb	r3, [r3, #24]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002d34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 f906 	bl	8002f4c <FLASH_OB_UserConfig>
 8002d40:	4603      	mov	r3, r0
 8002d42:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f926 	bl	8002fa8 <FLASH_OB_BOR_LevelConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d60:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <HAL_FLASHEx_OBProgram+0xd8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	761a      	strb	r2, [r3, #24]

  return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200005ec 	.word	0x200005ec

08002d74 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	220f      	movs	r2, #15
 8002d80:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002d82:	f000 f93f 	bl	8003004 <FLASH_OB_GetWRP>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002d8e:	f000 f945 	bl	800301c <FLASH_OB_GetRDP>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002d9a:	f000 f923 	bl	8002fe4 <FLASH_OB_GetUser>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002da6:	f000 f959 	bl	800305c <FLASH_OB_GetBOR>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	615a      	str	r2, [r3, #20]
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <FLASH_MassErase+0x44>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <FLASH_MassErase+0x44>)
 8002dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <FLASH_MassErase+0x44>)
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <FLASH_MassErase+0x44>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002de0:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <FLASH_MassErase+0x44>)
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	4313      	orrs	r3, r2
 8002dea:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <FLASH_MassErase+0x44>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df0:	6113      	str	r3, [r2, #16]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	e010      	b.n	8002e42 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d103      	bne.n	8002e2e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e009      	b.n	8002e42 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d103      	bne.n	8002e3c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e002      	b.n	8002e42 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002e3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e42:	4b13      	ldr	r3, [pc, #76]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	4a12      	ldr	r2, [pc, #72]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	490f      	ldr	r1, [pc, #60]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e60:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002e64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e72:	f043 0302 	orr.w	r3, r3, #2
 8002e76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	@ (8002e90 <FLASH_Erase_Sector+0x8c>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e82:	6113      	str	r3, [r2, #16]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40023c00 	.word	0x40023c00

08002e94 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ea2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ea6:	f7ff fd49 	bl	800293c <FLASH_WaitForLastOperation>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8002eb4:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <FLASH_OB_EnableWRP+0x40>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4904      	ldr	r1, [pc, #16]	@ (8002ed4 <FLASH_OB_EnableWRP+0x40>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023c16 	.word	0x40023c16

08002ed8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ee6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002eea:	f7ff fd27 	bl	800293c <FLASH_WaitForLastOperation>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <FLASH_OB_DisableWRP+0x3c>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	4904      	ldr	r1, [pc, #16]	@ (8002f14 <FLASH_OB_DisableWRP+0x3c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023c16 	.word	0x40023c16

08002f18 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f26:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f2a:	f7ff fd07 	bl	800293c <FLASH_WaitForLastOperation>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8002f38:	4a03      	ldr	r2, [pc, #12]	@ (8002f48 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023c15 	.word	0x40023c15

08002f4c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	460b      	mov	r3, r1
 8002f58:	71bb      	strb	r3, [r7, #6]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp;
  HAL_StatusTypeDef status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f62:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f66:	f7ff fce9 	bl	800293c <FLASH_WaitForLastOperation>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <FLASH_OB_UserConfig+0x4c>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <FLASH_OB_UserConfig+0x58>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	73bb      	strb	r3, [r7, #14]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8002f80:	79ba      	ldrb	r2, [r7, #6]
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	797b      	ldrb	r3, [r7, #5]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4905      	ldr	r1, [pc, #20]	@ (8002fa4 <FLASH_OB_UserConfig+0x58>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023c14 	.word	0x40023c14

08002fa8 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4a09      	ldr	r2, [pc, #36]	@ (8002fe0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002fba:	f023 030c 	bic.w	r3, r3, #12
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4905      	ldr	r1, [pc, #20]	@ (8002fe0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0

}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40023c14 	.word	0x40023c14

08002fe4 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <FLASH_OB_GetUser+0x1c>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f023 031f 	bic.w	r3, r3, #31
 8002ff2:	b2db      	uxtb	r3, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00

08003004 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8003008:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <FLASH_OB_GetWRP+0x14>)
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40023c16 	.word	0x40023c16

0800301c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8003022:	23aa      	movs	r3, #170	@ 0xaa
 8003024:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8003026:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <FLASH_OB_GetRDP+0x3c>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2bcc      	cmp	r3, #204	@ 0xcc
 800302e:	d102      	bne.n	8003036 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8003030:	23cc      	movs	r3, #204	@ 0xcc
 8003032:	71fb      	strb	r3, [r7, #7]
 8003034:	e009      	b.n	800304a <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <FLASH_OB_GetRDP+0x3c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2baa      	cmp	r3, #170	@ 0xaa
 800303e:	d102      	bne.n	8003046 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8003040:	23aa      	movs	r3, #170	@ 0xaa
 8003042:	71fb      	strb	r3, [r7, #7]
 8003044:	e001      	b.n	800304a <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8003046:	2355      	movs	r3, #85	@ 0x55
 8003048:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800304a:	79fb      	ldrb	r3, [r7, #7]
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40023c15 	.word	0x40023c15

0800305c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <FLASH_OB_GetBOR+0x1c>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	b2db      	uxtb	r3, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023c14 	.word	0x40023c14

0800307c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003080:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <FLASH_FlushCaches+0x88>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800308c:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <FLASH_FlushCaches+0x88>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1c      	ldr	r2, [pc, #112]	@ (8003104 <FLASH_FlushCaches+0x88>)
 8003092:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003096:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003098:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <FLASH_FlushCaches+0x88>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	@ (8003104 <FLASH_FlushCaches+0x88>)
 800309e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b17      	ldr	r3, [pc, #92]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a16      	ldr	r2, [pc, #88]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b0:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d017      	beq.n	80030f8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80030c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030d2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a07      	ldr	r2, [pc, #28]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030ea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <FLASH_FlushCaches+0x88>)
 80030f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030f6:	6013      	str	r3, [r2, #0]
  }
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	e159      	b.n	80033d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	429a      	cmp	r2, r3
 800313e:	f040 8148 	bne.w	80033d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d005      	beq.n	800315a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	2b02      	cmp	r3, #2
 8003158:	d130      	bne.n	80031bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d017      	beq.n	80031f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d123      	bne.n	800324c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	69b9      	ldr	r1, [r7, #24]
 8003248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a2 	beq.w	80033d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <HAL_GPIO_Init+0x2e8>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	4a56      	ldr	r2, [pc, #344]	@ (80033f0 <HAL_GPIO_Init+0x2e8>)
 8003298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800329c:	6453      	str	r3, [r2, #68]	@ 0x44
 800329e:	4b54      	ldr	r3, [pc, #336]	@ (80033f0 <HAL_GPIO_Init+0x2e8>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032aa:	4a52      	ldr	r2, [pc, #328]	@ (80033f4 <HAL_GPIO_Init+0x2ec>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a49      	ldr	r2, [pc, #292]	@ (80033f8 <HAL_GPIO_Init+0x2f0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d019      	beq.n	800330a <HAL_GPIO_Init+0x202>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a48      	ldr	r2, [pc, #288]	@ (80033fc <HAL_GPIO_Init+0x2f4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0x1fe>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a47      	ldr	r2, [pc, #284]	@ (8003400 <HAL_GPIO_Init+0x2f8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00d      	beq.n	8003302 <HAL_GPIO_Init+0x1fa>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a46      	ldr	r2, [pc, #280]	@ (8003404 <HAL_GPIO_Init+0x2fc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <HAL_GPIO_Init+0x1f6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a45      	ldr	r2, [pc, #276]	@ (8003408 <HAL_GPIO_Init+0x300>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_GPIO_Init+0x1f2>
 80032f6:	2304      	movs	r3, #4
 80032f8:	e008      	b.n	800330c <HAL_GPIO_Init+0x204>
 80032fa:	2307      	movs	r3, #7
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x204>
 80032fe:	2303      	movs	r3, #3
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x204>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x204>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x204>
 800330a:	2300      	movs	r3, #0
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800331c:	4935      	ldr	r1, [pc, #212]	@ (80033f4 <HAL_GPIO_Init+0x2ec>)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332a:	4b38      	ldr	r3, [pc, #224]	@ (800340c <HAL_GPIO_Init+0x304>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334e:	4a2f      	ldr	r2, [pc, #188]	@ (800340c <HAL_GPIO_Init+0x304>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003354:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <HAL_GPIO_Init+0x304>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003378:	4a24      	ldr	r2, [pc, #144]	@ (800340c <HAL_GPIO_Init+0x304>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337e:	4b23      	ldr	r3, [pc, #140]	@ (800340c <HAL_GPIO_Init+0x304>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a2:	4a1a      	ldr	r2, [pc, #104]	@ (800340c <HAL_GPIO_Init+0x304>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a8:	4b18      	ldr	r3, [pc, #96]	@ (800340c <HAL_GPIO_Init+0x304>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033cc:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <HAL_GPIO_Init+0x304>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	f67f aea2 	bls.w	8003124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021000 	.word	0x40021000
 800340c:	40013c00 	.word	0x40013c00

08003410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	e001      	b.n	8003432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800345c:	e003      	b.n	8003466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	041a      	lsls	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	619a      	str	r2, [r3, #24]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800347e:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348a:	4a05      	ldr	r2, [pc, #20]	@ (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f806 	bl	80034a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013c00 	.word	0x40013c00

080034a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e12b      	b.n	8003726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd ff90 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	@ 0x24
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800350e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800351e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003520:	f002 fa66 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8003524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a81      	ldr	r2, [pc, #516]	@ (8003730 <HAL_I2C_Init+0x274>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d807      	bhi.n	8003540 <HAL_I2C_Init+0x84>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a80      	ldr	r2, [pc, #512]	@ (8003734 <HAL_I2C_Init+0x278>)
 8003534:	4293      	cmp	r3, r2
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e006      	b.n	800354e <HAL_I2C_Init+0x92>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a7d      	ldr	r2, [pc, #500]	@ (8003738 <HAL_I2C_Init+0x27c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	bf94      	ite	ls
 8003548:	2301      	movls	r3, #1
 800354a:	2300      	movhi	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0e7      	b.n	8003726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a78      	ldr	r2, [pc, #480]	@ (800373c <HAL_I2C_Init+0x280>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0c9b      	lsrs	r3, r3, #18
 8003560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a6a      	ldr	r2, [pc, #424]	@ (8003730 <HAL_I2C_Init+0x274>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d802      	bhi.n	8003590 <HAL_I2C_Init+0xd4>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3301      	adds	r3, #1
 800358e:	e009      	b.n	80035a4 <HAL_I2C_Init+0xe8>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	4a69      	ldr	r2, [pc, #420]	@ (8003740 <HAL_I2C_Init+0x284>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	3301      	adds	r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	495c      	ldr	r1, [pc, #368]	@ (8003730 <HAL_I2C_Init+0x274>)
 80035c0:	428b      	cmp	r3, r1
 80035c2:	d819      	bhi.n	80035f8 <HAL_I2C_Init+0x13c>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e59      	subs	r1, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035d8:	400b      	ands	r3, r1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_I2C_Init+0x138>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1e59      	subs	r1, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f2:	e051      	b.n	8003698 <HAL_I2C_Init+0x1dc>
 80035f4:	2304      	movs	r3, #4
 80035f6:	e04f      	b.n	8003698 <HAL_I2C_Init+0x1dc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d111      	bne.n	8003624 <HAL_I2C_Init+0x168>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1e58      	subs	r0, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e012      	b.n	800364a <HAL_I2C_Init+0x18e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Init+0x196>
 800364e:	2301      	movs	r3, #1
 8003650:	e022      	b.n	8003698 <HAL_I2C_Init+0x1dc>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <HAL_I2C_Init+0x1bc>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1e58      	subs	r0, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	460b      	mov	r3, r1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	440b      	add	r3, r1
 8003668:	fbb0 f3f3 	udiv	r3, r0, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003676:	e00f      	b.n	8003698 <HAL_I2C_Init+0x1dc>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e58      	subs	r0, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	0099      	lsls	r1, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	fbb0 f3f3 	udiv	r3, r0, r3
 800368e:	3301      	adds	r3, #1
 8003690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6809      	ldr	r1, [r1, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6911      	ldr	r1, [r2, #16]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68d2      	ldr	r2, [r2, #12]
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	430b      	orrs	r3, r1
 80036da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	000186a0 	.word	0x000186a0
 8003734:	001e847f 	.word	0x001e847f
 8003738:	003d08ff 	.word	0x003d08ff
 800373c:	431bde83 	.word	0x431bde83
 8003740:	10624dd3 	.word	0x10624dd3

08003744 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b80      	cmp	r3, #128	@ 0x80
 8003758:	d103      	bne.n	8003762 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
  }
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800378e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003796:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b10      	cmp	r3, #16
 800379c:	d003      	beq.n	80037a6 <HAL_I2C_EV_IRQHandler+0x38>
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	f040 80b1 	bne.w	8003908 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_I2C_EV_IRQHandler+0x6e>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80037c6:	d003      	beq.n	80037d0 <HAL_I2C_EV_IRQHandler+0x62>
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80037ce:	d101      	bne.n	80037d4 <HAL_I2C_EV_IRQHandler+0x66>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_I2C_EV_IRQHandler+0x68>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	f000 8114 	beq.w	8003a04 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_I2C_EV_IRQHandler+0x90>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d006      	beq.n	80037fe <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f001 fc71 	bl	80050d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fd76 	bl	80042e8 <I2C_Master_SB>
 80037fc:	e083      	b.n	8003906 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_I2C_EV_IRQHandler+0xac>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fdee 	bl	80043f4 <I2C_Master_ADD10>
 8003818:	e075      	b.n	8003906 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_I2C_EV_IRQHandler+0xc8>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fe0a 	bl	8004448 <I2C_Master_ADDR>
 8003834:	e067      	b.n	8003906 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d036      	beq.n	80038ae <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384e:	f000 80db 	beq.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_I2C_EV_IRQHandler+0x10a>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_I2C_EV_IRQHandler+0x10a>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f9d6 	bl	8003c22 <I2C_MasterTransmit_TXE>
 8003876:	e046      	b.n	8003906 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80c2 	beq.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80bc 	beq.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	2b21      	cmp	r3, #33	@ 0x21
 8003894:	d103      	bne.n	800389e <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa5f 	bl	8003d5a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800389c:	e0b4      	b.n	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	f040 80b1 	bne.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 facd 	bl	8003e46 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ac:	e0ac      	b.n	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038bc:	f000 80a4 	beq.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <HAL_I2C_EV_IRQHandler+0x178>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_I2C_EV_IRQHandler+0x178>
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb49 	bl	8003f76 <I2C_MasterReceive_RXNE>
 80038e4:	e00f      	b.n	8003906 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 808b 	beq.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8085 	beq.w	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fc01 	bl	8004106 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003904:	e080      	b.n	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
 8003906:	e07f      	b.n	8003a08 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e007      	b.n	800392a <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d011      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800394e:	69b9      	ldr	r1, [r7, #24]
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 ffc8 	bl	80048e6 <I2C_Slave_ADDR>
 8003956:	e05a      	b.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x206>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f001 f803 	bl	8004978 <I2C_Slave_STOPF>
 8003972:	e04c      	b.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003974:	7bbb      	ldrb	r3, [r7, #14]
 8003976:	2b21      	cmp	r3, #33	@ 0x21
 8003978:	d002      	beq.n	8003980 <HAL_I2C_EV_IRQHandler+0x212>
 800397a:	7bbb      	ldrb	r3, [r7, #14]
 800397c:	2b29      	cmp	r3, #41	@ 0x29
 800397e:	d120      	bne.n	80039c2 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x238>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x238>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fee3 	bl	800476a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a4:	e032      	b.n	8003a0c <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02d      	beq.n	8003a0c <HAL_I2C_EV_IRQHandler+0x29e>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d028      	beq.n	8003a0c <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 ff12 	bl	80047e4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c0:	e024      	b.n	8003a0c <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <HAL_I2C_EV_IRQHandler+0x27a>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_I2C_EV_IRQHandler+0x27a>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 ff20 	bl	8004826 <I2C_SlaveReceive_RXNE>
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 ff50 	bl	80048a2 <I2C_SlaveReceive_BTF>
 8003a02:	e004      	b.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003a04:	bf00      	nop
 8003a06:	e002      	b.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a08:	bf00      	nop
 8003a0a:	e000      	b.n	8003a0e <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a0c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a36:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_I2C_ER_IRQHandler+0x4a>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_I2C_ER_IRQHandler+0x70>
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003a82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03e      	beq.n	8003b0c <HAL_I2C_ER_IRQHandler+0xf8>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d039      	beq.n	8003b0c <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003a98:	7efb      	ldrb	r3, [r7, #27]
 8003a9a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aaa:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ab2:	7ebb      	ldrb	r3, [r7, #26]
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d112      	bne.n	8003ade <HAL_I2C_ER_IRQHandler+0xca>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_I2C_ER_IRQHandler+0xca>
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b21      	cmp	r3, #33	@ 0x21
 8003ac2:	d008      	beq.n	8003ad6 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	2b29      	cmp	r3, #41	@ 0x29
 8003ac8:	d005      	beq.n	8003ad6 <HAL_I2C_ER_IRQHandler+0xc2>
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b28      	cmp	r3, #40	@ 0x28
 8003ace:	d106      	bne.n	8003ade <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b21      	cmp	r3, #33	@ 0x21
 8003ad4:	d103      	bne.n	8003ade <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 f87e 	bl	8004bd8 <I2C_Slave_AF>
 8003adc:	e016      	b.n	8003b0c <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003af0:	7efb      	ldrb	r3, [r7, #27]
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d002      	beq.n	8003afc <HAL_I2C_ER_IRQHandler+0xe8>
 8003af6:	7efb      	ldrb	r3, [r7, #27]
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	d107      	bne.n	8003b0c <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <HAL_I2C_ER_IRQHandler+0x11e>
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	f043 0308 	orr.w	r3, r3, #8
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003b30:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f001 f8bb 	bl	8004cc0 <I2C_ITError>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3728      	adds	r7, #40	@ 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	70fb      	strb	r3, [r7, #3]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c38:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d150      	bne.n	8003cea <I2C_MasterTransmit_TXE+0xc8>
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b21      	cmp	r3, #33	@ 0x21
 8003c4c:	d14d      	bne.n	8003cea <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d01d      	beq.n	8003c90 <I2C_MasterTransmit_TXE+0x6e>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	d01a      	beq.n	8003c90 <I2C_MasterTransmit_TXE+0x6e>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c60:	d016      	beq.n	8003c90 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c70:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2211      	movs	r2, #17
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff62 	bl	8003b52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c8e:	e060      	b.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c9e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cae:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d107      	bne.n	8003cda <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ff7d 	bl	8003bd2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cd8:	e03b      	b.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff35 	bl	8003b52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ce8:	e033      	b.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b21      	cmp	r3, #33	@ 0x21
 8003cee:	d005      	beq.n	8003cfc <I2C_MasterTransmit_TXE+0xda>
 8003cf0:	7bbb      	ldrb	r3, [r7, #14]
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d12d      	bne.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b22      	cmp	r3, #34	@ 0x22
 8003cfa:	d12a      	bne.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d16:	e01c      	b.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d103      	bne.n	8003d2c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f88e 	bl	8003e46 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d2a:	e012      	b.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d50:	e7ff      	b.n	8003d52 <I2C_MasterTransmit_TXE+0x130>
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b21      	cmp	r3, #33	@ 0x21
 8003d72:	d164      	bne.n	8003e3e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003da2:	e04c      	b.n	8003e3e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d01d      	beq.n	8003de6 <I2C_MasterTransmit_BTF+0x8c>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d01a      	beq.n	8003de6 <I2C_MasterTransmit_BTF+0x8c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003db6:	d016      	beq.n	8003de6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2211      	movs	r2, #17
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff feb7 	bl	8003b52 <HAL_I2C_MasterTxCpltCallback>
}
 8003de4:	e02b      	b.n	8003e3e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003df4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e04:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b40      	cmp	r3, #64	@ 0x40
 8003e1e:	d107      	bne.n	8003e30 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff fed2 	bl	8003bd2 <HAL_I2C_MemTxCpltCallback>
}
 8003e2e:	e006      	b.n	8003e3e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fe8a 	bl	8003b52 <HAL_I2C_MasterTxCpltCallback>
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11d      	bne.n	8003e9a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10b      	bne.n	8003e7e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003e7c:	e077      	b.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	121b      	asrs	r3, r3, #8
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e98:	e069      	b.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10b      	bne.n	8003eba <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003eb8:	e059      	b.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d152      	bne.n	8003f68 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b22      	cmp	r3, #34	@ 0x22
 8003ec6:	d10d      	bne.n	8003ee4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ee2:	e044      	b.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d015      	beq.n	8003f1a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b21      	cmp	r3, #33	@ 0x21
 8003ef2:	d112      	bne.n	8003f1a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f18:	e029      	b.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d124      	bne.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b21      	cmp	r3, #33	@ 0x21
 8003f28:	d121      	bne.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f38:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f48:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff fe36 	bl	8003bd2 <HAL_I2C_MemTxCpltCallback>
}
 8003f66:	e002      	b.n	8003f6e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fbeb 	bl	8003744 <I2C_Flush_DR>
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b22      	cmp	r3, #34	@ 0x22
 8003f88:	f040 80b9 	bne.w	80040fe <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d921      	bls.n	8003fe4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	f040 8096 	bne.w	80040fe <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003fe2:	e08c      	b.n	80040fe <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d07f      	beq.n	80040ec <I2C_MasterReceive_RXNE+0x176>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d002      	beq.n	8003ff8 <I2C_MasterReceive_RXNE+0x82>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d179      	bne.n	80040ec <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f001 f83b 	bl	8005074 <I2C_WaitOnSTOPRequestThroughIT>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d14c      	bne.n	800409e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004012:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004022:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	d10a      	bne.n	8004074 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fdba 	bl	8003be6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004072:	e044      	b.n	80040fe <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d002      	beq.n	8004088 <I2C_MasterReceive_RXNE+0x112>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b20      	cmp	r3, #32
 8004086:	d103      	bne.n	8004090 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
 800408e:	e002      	b.n	8004096 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2212      	movs	r2, #18
 8004094:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fd65 	bl	8003b66 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800409c:	e02f      	b.n	80040fe <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fd88 	bl	8003bfa <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040ea:	e008      	b.n	80040fe <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fa:	605a      	str	r2, [r3, #4]
}
 80040fc:	e7ff      	b.n	80040fe <I2C_MasterReceive_RXNE+0x188>
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b04      	cmp	r3, #4
 800411c:	d11b      	bne.n	8004156 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004154:	e0c4      	b.n	80042e0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b03      	cmp	r3, #3
 800415e:	d129      	bne.n	80041b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d00a      	beq.n	800418c <I2C_MasterReceive_BTF+0x86>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d007      	beq.n	800418c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041b2:	e095      	b.n	80042e0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d17d      	bne.n	80042ba <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d002      	beq.n	80041ca <I2C_MasterReceive_BTF+0xc4>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d108      	bne.n	80041dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e016      	b.n	800420a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d002      	beq.n	80041e8 <I2C_MasterReceive_BTF+0xe2>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d108      	bne.n	80041fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e007      	b.n	800420a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004264:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	d10a      	bne.n	8004290 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fcac 	bl	8003be6 <HAL_I2C_MemRxCpltCallback>
}
 800428e:	e027      	b.n	80042e0 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b08      	cmp	r3, #8
 800429c:	d002      	beq.n	80042a4 <I2C_MasterReceive_BTF+0x19e>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d103      	bne.n	80042ac <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80042aa:	e002      	b.n	80042b2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2212      	movs	r2, #18
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fc57 	bl	8003b66 <HAL_I2C_MasterRxCpltCallback>
}
 80042b8:	e012      	b.n	80042e0 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d117      	bne.n	800432c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004314:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004316:	e067      	b.n	80043e8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
}
 800432a:	e05d      	b.n	80043e8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004334:	d133      	bne.n	800439e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b21      	cmp	r3, #33	@ 0x21
 8004340:	d109      	bne.n	8004356 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004352:	611a      	str	r2, [r3, #16]
 8004354:	e008      	b.n	8004368 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <I2C_Master_SB+0x92>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d032      	beq.n	80043e8 <I2C_Master_SB+0x100>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02d      	beq.n	80043e8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439a:	605a      	str	r2, [r3, #4]
}
 800439c:	e024      	b.n	80043e8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10e      	bne.n	80043c4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	11db      	asrs	r3, r3, #7
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 0306 	and.w	r3, r3, #6
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f063 030f 	orn	r3, r3, #15
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
}
 80043c2:	e011      	b.n	80043e8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10d      	bne.n	80043e8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	11db      	asrs	r3, r3, #7
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0306 	and.w	r3, r3, #6
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f063 030e 	orn	r3, r3, #14
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	b2da      	uxtb	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <I2C_Master_ADD10+0x26>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <I2C_Master_ADD10+0x48>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800443a:	605a      	str	r2, [r3, #4]
  }
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b091      	sub	sp, #68	@ 0x44
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004456:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b22      	cmp	r3, #34	@ 0x22
 8004470:	f040 8169 	bne.w	8004746 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <I2C_Master_ADDR+0x54>
 800447c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004480:	2b40      	cmp	r3, #64	@ 0x40
 8004482:	d10b      	bne.n	800449c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004484:	2300      	movs	r3, #0
 8004486:	633b      	str	r3, [r7, #48]	@ 0x30
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	e160      	b.n	800475e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11d      	bne.n	80044e0 <I2C_Master_ADDR+0x98>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044ac:	d118      	bne.n	80044e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ae:	2300      	movs	r3, #0
 80044b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80044de:	e13e      	b.n	800475e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d113      	bne.n	8004512 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e115      	b.n	800473e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 808a 	bne.w	8004632 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004524:	d137      	bne.n	8004596 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004534:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004544:	d113      	bne.n	800456e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004554:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	e0e7      	b.n	800473e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e0d3      	b.n	800473e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004598:	2b08      	cmp	r3, #8
 800459a:	d02e      	beq.n	80045fa <I2C_Master_ADDR+0x1b2>
 800459c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d02b      	beq.n	80045fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a4:	2b12      	cmp	r3, #18
 80045a6:	d102      	bne.n	80045ae <I2C_Master_ADDR+0x166>
 80045a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d125      	bne.n	80045fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d00e      	beq.n	80045d2 <I2C_Master_ADDR+0x18a>
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d00b      	beq.n	80045d2 <I2C_Master_ADDR+0x18a>
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d008      	beq.n	80045d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e007      	b.n	80045e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	e0a1      	b.n	800473e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004608:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e085      	b.n	800473e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d14d      	bne.n	80046d8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	2b04      	cmp	r3, #4
 8004640:	d016      	beq.n	8004670 <I2C_Master_ADDR+0x228>
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	2b02      	cmp	r3, #2
 8004646:	d013      	beq.n	8004670 <I2C_Master_ADDR+0x228>
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	2b10      	cmp	r3, #16
 800464c:	d010      	beq.n	8004670 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e007      	b.n	8004680 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800467e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468e:	d117      	bne.n	80046c0 <I2C_Master_ADDR+0x278>
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004696:	d00b      	beq.n	80046b0 <I2C_Master_ADDR+0x268>
 8004698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469a:	2b01      	cmp	r3, #1
 800469c:	d008      	beq.n	80046b0 <I2C_Master_ADDR+0x268>
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d005      	beq.n	80046b0 <I2C_Master_ADDR+0x268>
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d002      	beq.n	80046b0 <I2C_Master_ADDR+0x268>
 80046aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d107      	bne.n	80046c0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	e032      	b.n	800473e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f6:	d117      	bne.n	8004728 <I2C_Master_ADDR+0x2e0>
 80046f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046fe:	d00b      	beq.n	8004718 <I2C_Master_ADDR+0x2d0>
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	2b01      	cmp	r3, #1
 8004704:	d008      	beq.n	8004718 <I2C_Master_ADDR+0x2d0>
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	2b08      	cmp	r3, #8
 800470a:	d005      	beq.n	8004718 <I2C_Master_ADDR+0x2d0>
 800470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470e:	2b10      	cmp	r3, #16
 8004710:	d002      	beq.n	8004718 <I2C_Master_ADDR+0x2d0>
 8004712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004714:	2b20      	cmp	r3, #32
 8004716:	d107      	bne.n	8004728 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004726:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004744:	e00b      	b.n	800475e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	e7ff      	b.n	800475e <I2C_Master_ADDR+0x316>
 800475e:	bf00      	nop
 8004760:	3744      	adds	r7, #68	@ 0x44
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02b      	beq.n	80047dc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d114      	bne.n	80047dc <I2C_SlaveTransmit_TXE+0x72>
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b29      	cmp	r3, #41	@ 0x29
 80047b6:	d111      	bne.n	80047dc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2221      	movs	r2, #33	@ 0x21
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2228      	movs	r2, #40	@ 0x28
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff f9cf 	bl	8003b7a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004834:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02c      	beq.n	800489a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d114      	bne.n	800489a <I2C_SlaveReceive_RXNE+0x74>
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b2a      	cmp	r3, #42	@ 0x2a
 8004874:	d111      	bne.n	800489a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004884:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2222      	movs	r2, #34	@ 0x22
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2228      	movs	r2, #40	@ 0x28
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff f97a 	bl	8003b8e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004900:	2b28      	cmp	r3, #40	@ 0x28
 8004902:	d125      	bne.n	8004950 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004912:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	81bb      	strh	r3, [r7, #12]
 8004932:	e002      	b.n	800493a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004942:	89ba      	ldrh	r2, [r7, #12]
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff f92a 	bl	8003ba2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800494e:	e00e      	b.n	800496e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004986:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004996:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004998:	2300      	movs	r3, #0
 800499a:	60bb      	str	r3, [r7, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	d172      	bne.n	8004abc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b22      	cmp	r3, #34	@ 0x22
 80049da:	d002      	beq.n	80049e2 <I2C_Slave_STOPF+0x6a>
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b2a      	cmp	r3, #42	@ 0x2a
 80049e0:	d135      	bne.n	8004a4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f043 0204 	orr.w	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fd febc 	bl	8002798 <HAL_DMA_GetState>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d049      	beq.n	8004aba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	4a69      	ldr	r2, [pc, #420]	@ (8004bd0 <I2C_Slave_STOPF+0x258>)
 8004a2c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fd fe8e 	bl	8002754 <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d03d      	beq.n	8004aba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a4c:	e035      	b.n	8004aba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f043 0204 	orr.w	r2, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fe86 	bl	8002798 <HAL_DMA_GetState>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d014      	beq.n	8004abc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	4a4e      	ldr	r2, [pc, #312]	@ (8004bd0 <I2C_Slave_STOPF+0x258>)
 8004a98:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd fe58 	bl	8002754 <HAL_DMA_Abort_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4798      	blx	r3
 8004ab8:	e000      	b.n	8004abc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d03e      	beq.n	8004b44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d112      	bne.n	8004afa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d112      	bne.n	8004b2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8b7 	bl	8004cc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b52:	e039      	b.n	8004bc8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b58:	d109      	bne.n	8004b6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2228      	movs	r2, #40	@ 0x28
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff f810 	bl	8003b8e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b28      	cmp	r3, #40	@ 0x28
 8004b78:	d111      	bne.n	8004b9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <I2C_Slave_STOPF+0x25c>)
 8004b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff f811 	bl	8003bbe <HAL_I2C_ListenCpltCallback>
}
 8004b9c:	e014      	b.n	8004bc8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	2b22      	cmp	r3, #34	@ 0x22
 8004ba4:	d002      	beq.n	8004bac <I2C_Slave_STOPF+0x234>
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b22      	cmp	r3, #34	@ 0x22
 8004baa:	d10d      	bne.n	8004bc8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fe ffe3 	bl	8003b8e <HAL_I2C_SlaveRxCpltCallback>
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	08004f25 	.word	0x08004f25
 8004bd4:	ffff0000 	.word	0xffff0000

08004bd8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d002      	beq.n	8004bfa <I2C_Slave_AF+0x22>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d129      	bne.n	8004c4e <I2C_Slave_AF+0x76>
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b28      	cmp	r3, #40	@ 0x28
 8004bfe:	d126      	bne.n	8004c4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a2e      	ldr	r2, [pc, #184]	@ (8004cbc <I2C_Slave_AF+0xe4>)
 8004c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fe ffb9 	bl	8003bbe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c4c:	e031      	b.n	8004cb2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b21      	cmp	r3, #33	@ 0x21
 8004c52:	d129      	bne.n	8004ca8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <I2C_Slave_AF+0xe4>)
 8004c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c98:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe fd52 	bl	8003744 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fe ff6a 	bl	8003b7a <HAL_I2C_SlaveTxCpltCallback>
}
 8004ca6:	e004      	b.n	8004cb2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	ffff0000 	.word	0xffff0000

08004cc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cd8:	7bbb      	ldrb	r3, [r7, #14]
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d002      	beq.n	8004ce4 <I2C_ITError+0x24>
 8004cde:	7bbb      	ldrb	r3, [r7, #14]
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d10a      	bne.n	8004cfa <I2C_ITError+0x3a>
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b22      	cmp	r3, #34	@ 0x22
 8004ce8:	d107      	bne.n	8004cfa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d00:	2b28      	cmp	r3, #40	@ 0x28
 8004d02:	d107      	bne.n	8004d14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2228      	movs	r2, #40	@ 0x28
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d12:	e015      	b.n	8004d40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d22:	d00a      	beq.n	8004d3a <I2C_ITError+0x7a>
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b60      	cmp	r3, #96	@ 0x60
 8004d28:	d007      	beq.n	8004d3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4e:	d162      	bne.n	8004e16 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d020      	beq.n	8004db0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d72:	4a6a      	ldr	r2, [pc, #424]	@ (8004f1c <I2C_ITError+0x25c>)
 8004d74:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd fcea 	bl	8002754 <HAL_DMA_Abort_IT>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8089 	beq.w	8004e9a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004daa:	4610      	mov	r0, r2
 8004dac:	4798      	blx	r3
 8004dae:	e074      	b.n	8004e9a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	4a59      	ldr	r2, [pc, #356]	@ (8004f1c <I2C_ITError+0x25c>)
 8004db6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd fcc9 	bl	8002754 <HAL_DMA_Abort_IT>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d068      	beq.n	8004e9a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd2:	2b40      	cmp	r3, #64	@ 0x40
 8004dd4:	d10b      	bne.n	8004dee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
 8004e14:	e041      	b.n	8004e9a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b60      	cmp	r3, #96	@ 0x60
 8004e20:	d125      	bne.n	8004e6e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	2b40      	cmp	r3, #64	@ 0x40
 8004e3c:	d10b      	bne.n	8004e56 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fe fed1 	bl	8003c0e <HAL_I2C_AbortCpltCallback>
 8004e6c:	e015      	b.n	8004e9a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b40      	cmp	r3, #64	@ 0x40
 8004e7a:	d10b      	bne.n	8004e94 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fe feb0 	bl	8003bfa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10e      	bne.n	8004ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ede:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d113      	bne.n	8004f14 <I2C_ITError+0x254>
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b28      	cmp	r3, #40	@ 0x28
 8004ef0:	d110      	bne.n	8004f14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <I2C_ITError+0x260>)
 8004ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fe fe55 	bl	8003bbe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	08004f25 	.word	0x08004f25
 8004f20:	ffff0000 	.word	0xffff0000

08004f24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800506c <I2C_DMAAbort+0x148>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	08db      	lsrs	r3, r3, #3
 8004f44:	4a4a      	ldr	r2, [pc, #296]	@ (8005070 <I2C_DMAAbort+0x14c>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	0a1a      	lsrs	r2, r3, #8
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f043 0220 	orr.w	r2, r3, #32
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004f6a:	e00a      	b.n	8004f82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d0ea      	beq.n	8004f58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	2200      	movs	r2, #0
 8004f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b60      	cmp	r3, #96	@ 0x60
 8004ff2:	d10e      	bne.n	8005012 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800500a:	6978      	ldr	r0, [r7, #20]
 800500c:	f7fe fdff 	bl	8003c0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005010:	e027      	b.n	8005062 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005018:	2b28      	cmp	r3, #40	@ 0x28
 800501a:	d117      	bne.n	800504c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800503a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2228      	movs	r2, #40	@ 0x28
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800504a:	e007      	b.n	800505c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800505c:	6978      	ldr	r0, [r7, #20]
 800505e:	f7fe fdcc 	bl	8003bfa <HAL_I2C_ErrorCallback>
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000000 	.word	0x20000000
 8005070:	14f8b589 	.word	0x14f8b589

08005074 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005080:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	4a13      	ldr	r2, [pc, #76]	@ (80050d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	0a1a      	lsrs	r2, r3, #8
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3b01      	subs	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d107      	bne.n	80050b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	f043 0220 	orr.w	r2, r3, #32
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e008      	b.n	80050c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c0:	d0e9      	beq.n	8005096 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000000 	.word	0x20000000
 80050d4:	14f8b589 	.word	0x14f8b589

080050d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80050e8:	d103      	bne.n	80050f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050f0:	e007      	b.n	8005102 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80050fa:	d102      	bne.n	8005102 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2208      	movs	r2, #8
 8005100:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e267      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d075      	beq.n	800521a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800512e:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d00c      	beq.n	8005154 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513a:	4b85      	ldr	r3, [pc, #532]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005142:	2b08      	cmp	r3, #8
 8005144:	d112      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b82      	ldr	r3, [pc, #520]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005152:	d10b      	bne.n	800516c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005154:	4b7e      	ldr	r3, [pc, #504]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05b      	beq.n	8005218 <HAL_RCC_OscConfig+0x108>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d157      	bne.n	8005218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e242      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005174:	d106      	bne.n	8005184 <HAL_RCC_OscConfig+0x74>
 8005176:	4b76      	ldr	r3, [pc, #472]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a75      	ldr	r2, [pc, #468]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0x98>
 800518e:	4b70      	ldr	r3, [pc, #448]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a6f      	ldr	r2, [pc, #444]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b6d      	ldr	r3, [pc, #436]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6c      	ldr	r2, [pc, #432]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xb0>
 80051a8:	4b69      	ldr	r3, [pc, #420]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a68      	ldr	r2, [pc, #416]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b66      	ldr	r3, [pc, #408]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a65      	ldr	r2, [pc, #404]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fd f8c4 	bl	8002354 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fd f8c0 	bl	8002354 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	@ 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e207      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xc0>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fd f8b0 	bl	8002354 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fd f8ac 	bl	8002354 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	@ 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e1f3      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	4b51      	ldr	r3, [pc, #324]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0xe8>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d063      	beq.n	80052ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005226:	4b4a      	ldr	r3, [pc, #296]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005232:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800523a:	2b08      	cmp	r3, #8
 800523c:	d11c      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523e:	4b44      	ldr	r3, [pc, #272]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d116      	bne.n	8005278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524a:	4b41      	ldr	r3, [pc, #260]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d001      	beq.n	8005262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e1c7      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005262:	4b3b      	ldr	r3, [pc, #236]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4937      	ldr	r1, [pc, #220]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005276:	e03a      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005280:	4b34      	ldr	r3, [pc, #208]	@ (8005354 <HAL_RCC_OscConfig+0x244>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fd f865 	bl	8002354 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528e:	f7fd f861 	bl	8002354 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1a8      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4925      	ldr	r1, [pc, #148]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	e015      	b.n	80052ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c2:	4b24      	ldr	r3, [pc, #144]	@ (8005354 <HAL_RCC_OscConfig+0x244>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fd f844 	bl	8002354 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d0:	f7fd f840 	bl	8002354 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e187      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d036      	beq.n	8005368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <HAL_RCC_OscConfig+0x248>)
 8005304:	2201      	movs	r2, #1
 8005306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fd f824 	bl	8002354 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005310:	f7fd f820 	bl	8002354 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e167      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_RCC_OscConfig+0x240>)
 8005324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x200>
 800532e:	e01b      	b.n	8005368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <HAL_RCC_OscConfig+0x248>)
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005336:	f7fd f80d 	bl	8002354 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800533c:	e00e      	b.n	800535c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533e:	f7fd f809 	bl	8002354 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d907      	bls.n	800535c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e150      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005350:	40023800 	.word	0x40023800
 8005354:	42470000 	.word	0x42470000
 8005358:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	4b88      	ldr	r3, [pc, #544]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ea      	bne.n	800533e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8097 	beq.w	80054a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537a:	4b81      	ldr	r3, [pc, #516]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	4b7d      	ldr	r3, [pc, #500]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	4a7c      	ldr	r2, [pc, #496]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005394:	6413      	str	r3, [r2, #64]	@ 0x40
 8005396:	4b7a      	ldr	r3, [pc, #488]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a6:	4b77      	ldr	r3, [pc, #476]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d118      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b2:	4b74      	ldr	r3, [pc, #464]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053be:	f7fc ffc9 	bl	8002354 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fc ffc5 	bl	8002354 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e10c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005584 <HAL_RCC_OscConfig+0x474>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d106      	bne.n	80053fa <HAL_RCC_OscConfig+0x2ea>
 80053ec:	4b64      	ldr	r3, [pc, #400]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	4a63      	ldr	r2, [pc, #396]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f8:	e01c      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0x30c>
 8005402:	4b5f      	ldr	r3, [pc, #380]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005406:	4a5e      	ldr	r2, [pc, #376]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005408:	f043 0304 	orr.w	r3, r3, #4
 800540c:	6713      	str	r3, [r2, #112]	@ 0x70
 800540e:	4b5c      	ldr	r3, [pc, #368]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005412:	4a5b      	ldr	r2, [pc, #364]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	@ 0x70
 800541a:	e00b      	b.n	8005434 <HAL_RCC_OscConfig+0x324>
 800541c:	4b58      	ldr	r3, [pc, #352]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005420:	4a57      	ldr	r2, [pc, #348]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005422:	f023 0301 	bic.w	r3, r3, #1
 8005426:	6713      	str	r3, [r2, #112]	@ 0x70
 8005428:	4b55      	ldr	r3, [pc, #340]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542c:	4a54      	ldr	r2, [pc, #336]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 0304 	bic.w	r3, r3, #4
 8005432:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fc ff8a 	bl	8002354 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fc ff86 	bl	8002354 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0cb      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545a:	4b49      	ldr	r3, [pc, #292]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0ee      	beq.n	8005444 <HAL_RCC_OscConfig+0x334>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005468:	f7fc ff74 	bl	8002354 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800546e:	e00a      	b.n	8005486 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005470:	f7fc ff70 	bl	8002354 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0b5      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1ee      	bne.n	8005470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005498:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	4a38      	ldr	r2, [pc, #224]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a1 	beq.w	80055f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ae:	4b34      	ldr	r3, [pc, #208]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d05c      	beq.n	8005574 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d141      	bne.n	8005546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b31      	ldr	r3, [pc, #196]	@ (8005588 <HAL_RCC_OscConfig+0x478>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc ff44 	bl	8002354 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fc ff40 	bl	8002354 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e087      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	3b01      	subs	r3, #1
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	491b      	ldr	r1, [pc, #108]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005514:	4313      	orrs	r3, r2
 8005516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005518:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <HAL_RCC_OscConfig+0x478>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fc ff19 	bl	8002354 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005526:	f7fc ff15 	bl	8002354 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e05c      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x416>
 8005544:	e054      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_RCC_OscConfig+0x478>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fc ff02 	bl	8002354 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fc fefe 	bl	8002354 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e045      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005566:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <HAL_RCC_OscConfig+0x470>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x444>
 8005572:	e03d      	b.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e038      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
 8005580:	40023800 	.word	0x40023800
 8005584:	40007000 	.word	0x40007000
 8005588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCC_OscConfig+0x4ec>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d028      	beq.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d121      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d11a      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055bc:	4013      	ands	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	3b01      	subs	r3, #1
 80055d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055d8:	429a      	cmp	r2, r3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800

08005600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0cc      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005614:	4b68      	ldr	r3, [pc, #416]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d90c      	bls.n	800563c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b65      	ldr	r3, [pc, #404]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b63      	ldr	r3, [pc, #396]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0b8      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b59      	ldr	r3, [pc, #356]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a58      	ldr	r2, [pc, #352]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800565e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566c:	4b53      	ldr	r3, [pc, #332]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a52      	ldr	r2, [pc, #328]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b50      	ldr	r3, [pc, #320]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	494d      	ldr	r1, [pc, #308]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d044      	beq.n	8005720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d119      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d003      	beq.n	80056be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	4b3f      	ldr	r3, [pc, #252]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e06f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ce:	4b3b      	ldr	r3, [pc, #236]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e067      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056de:	4b37      	ldr	r3, [pc, #220]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0203 	bic.w	r2, r3, #3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4934      	ldr	r1, [pc, #208]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f0:	f7fc fe30 	bl	8002354 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fc fe2c 	bl	8002354 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e04f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 020c 	and.w	r2, r3, #12
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	429a      	cmp	r2, r3
 800571e:	d1eb      	bne.n	80056f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005720:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d20c      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b22      	ldr	r3, [pc, #136]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b19      	ldr	r3, [pc, #100]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4916      	ldr	r1, [pc, #88]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490e      	ldr	r1, [pc, #56]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005786:	f000 f821 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490a      	ldr	r1, [pc, #40]	@ (80057c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fc fd90 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023c00 	.word	0x40023c00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	08008ce0 	.word	0x08008ce0
 80057c4:	20000000 	.word	0x20000000
 80057c8:	20000004 	.word	0x20000004

080057cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b094      	sub	sp, #80	@ 0x50
 80057d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057e4:	4b79      	ldr	r3, [pc, #484]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d00d      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x40>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	f200 80e1 	bhi.w	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x34>
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0x3a>
 80057fe:	e0db      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b73      	ldr	r3, [pc, #460]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005802:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005804:	e0db      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005806:	4b73      	ldr	r3, [pc, #460]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800580a:	e0d8      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800580c:	4b6f      	ldr	r3, [pc, #444]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005816:	4b6d      	ldr	r3, [pc, #436]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005822:	4b6a      	ldr	r3, [pc, #424]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	2200      	movs	r2, #0
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	633b      	str	r3, [r7, #48]	@ 0x30
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
 800583a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	0159      	lsls	r1, r3, #5
 800584c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005850:	0150      	lsls	r0, r2, #5
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4621      	mov	r1, r4
 8005858:	1a51      	subs	r1, r2, r1
 800585a:	6139      	str	r1, [r7, #16]
 800585c:	4629      	mov	r1, r5
 800585e:	eb63 0301 	sbc.w	r3, r3, r1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005870:	4659      	mov	r1, fp
 8005872:	018b      	lsls	r3, r1, #6
 8005874:	4651      	mov	r1, sl
 8005876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800587a:	4651      	mov	r1, sl
 800587c:	018a      	lsls	r2, r1, #6
 800587e:	4651      	mov	r1, sl
 8005880:	ebb2 0801 	subs.w	r8, r2, r1
 8005884:	4659      	mov	r1, fp
 8005886:	eb63 0901 	sbc.w	r9, r3, r1
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800589a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589e:	4690      	mov	r8, r2
 80058a0:	4699      	mov	r9, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	eb18 0303 	adds.w	r3, r8, r3
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	462b      	mov	r3, r5
 80058ac:	eb49 0303 	adc.w	r3, r9, r3
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058be:	4629      	mov	r1, r5
 80058c0:	024b      	lsls	r3, r1, #9
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058c8:	4621      	mov	r1, r4
 80058ca:	024a      	lsls	r2, r1, #9
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d2:	2200      	movs	r2, #0
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058dc:	f7fa fcd0 	bl	8000280 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	e058      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ea:	4b38      	ldr	r3, [pc, #224]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	2200      	movs	r2, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	4611      	mov	r1, r2
 80058f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058fa:	623b      	str	r3, [r7, #32]
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	f04f 0000 	mov.w	r0, #0
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	0159      	lsls	r1, r3, #5
 8005912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005916:	0150      	lsls	r0, r2, #5
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4641      	mov	r1, r8
 800591e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005922:	4649      	mov	r1, r9
 8005924:	eb63 0b01 	sbc.w	fp, r3, r1
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800593c:	ebb2 040a 	subs.w	r4, r2, sl
 8005940:	eb63 050b 	sbc.w	r5, r3, fp
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00eb      	lsls	r3, r5, #3
 800594e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	4643      	mov	r3, r8
 800595a:	18e3      	adds	r3, r4, r3
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	464b      	mov	r3, r9
 8005960:	eb45 0303 	adc.w	r3, r5, r3
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005972:	4629      	mov	r1, r5
 8005974:	028b      	lsls	r3, r1, #10
 8005976:	4621      	mov	r1, r4
 8005978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800597c:	4621      	mov	r1, r4
 800597e:	028a      	lsls	r2, r1, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005986:	2200      	movs	r2, #0
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005990:	f7fa fc76 	bl	8000280 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4613      	mov	r3, r2
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059b6:	e002      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3750      	adds	r7, #80	@ 0x50
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	007a1200 	.word	0x007a1200

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000000 	.word	0x20000000

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	08008cf0 	.word	0x08008cf0

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a1c:	f7ff ffdc 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	0b5b      	lsrs	r3, r3, #13
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4903      	ldr	r1, [pc, #12]	@ (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	08008cf0 	.word	0x08008cf0

08005a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e041      	b.n	8005ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb fd1e 	bl	80014a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f000 fa70 	bl	8005f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e044      	b.n	8005b82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1e      	ldr	r2, [pc, #120]	@ (8005b90 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d018      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x6c>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d013      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x6c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1a      	ldr	r2, [pc, #104]	@ (8005b94 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00e      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x6c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a19      	ldr	r2, [pc, #100]	@ (8005b98 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d009      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x6c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a17      	ldr	r2, [pc, #92]	@ (8005b9c <HAL_TIM_Base_Start_IT+0xbc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d004      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0x6c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a16      	ldr	r2, [pc, #88]	@ (8005ba0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d111      	bne.n	8005b70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b06      	cmp	r3, #6
 8005b5c:	d010      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	e007      	b.n	8005b80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40014000 	.word	0x40014000

08005ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0202 	mvn.w	r2, #2
 8005bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f999 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f98b 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f99c 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0204 	mvn.w	r2, #4
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f973 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f965 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f976 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01b      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0208 	mvn.w	r2, #8
 8005c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2204      	movs	r2, #4
 8005c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f94d 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e005      	b.n	8005c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f93f 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f950 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d020      	beq.n	8005cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0210 	mvn.w	r2, #16
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f927 	bl	8005f26 <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f919 	bl	8005f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f92a 	bl	8005f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0201 	mvn.w	r2, #1
 8005d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fb f970 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00c      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fab0 	bl	8006294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00c      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8fb 	bl	8005f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0220 	mvn.w	r2, #32
 8005d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa82 	bl	8006280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIM_ConfigClockSource+0x1c>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e0b4      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x186>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd8:	d03e      	beq.n	8005e58 <HAL_TIM_ConfigClockSource+0xd4>
 8005dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dde:	f200 8087 	bhi.w	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de6:	f000 8086 	beq.w	8005ef6 <HAL_TIM_ConfigClockSource+0x172>
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dee:	d87f      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b70      	cmp	r3, #112	@ 0x70
 8005df2:	d01a      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0xa6>
 8005df4:	2b70      	cmp	r3, #112	@ 0x70
 8005df6:	d87b      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df8:	2b60      	cmp	r3, #96	@ 0x60
 8005dfa:	d050      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x11a>
 8005dfc:	2b60      	cmp	r3, #96	@ 0x60
 8005dfe:	d877      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e00:	2b50      	cmp	r3, #80	@ 0x50
 8005e02:	d03c      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0xfa>
 8005e04:	2b50      	cmp	r3, #80	@ 0x50
 8005e06:	d873      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d058      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x13a>
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	d86f      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d064      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x15a>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d86b      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d060      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d867      	bhi.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d05c      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x15a>
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d05a      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x15a>
 8005e28:	e062      	b.n	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e3a:	f000 f993 	bl	8006164 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	609a      	str	r2, [r3, #8]
      break;
 8005e56:	e04f      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e68:	f000 f97c 	bl	8006164 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e7a:	609a      	str	r2, [r3, #8]
      break;
 8005e7c:	e03c      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f000 f8f0 	bl	8006070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2150      	movs	r1, #80	@ 0x50
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f949 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005e9c:	e02c      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f000 f90f 	bl	80060ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2160      	movs	r1, #96	@ 0x60
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f939 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005ebc:	e01c      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 f8d0 	bl	8006070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2140      	movs	r1, #64	@ 0x40
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f929 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005edc:	e00c      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f000 f920 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005eee:	e003      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e000      	b.n	8005ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a37      	ldr	r2, [pc, #220]	@ (8006054 <TIM_Base_SetConfig+0xf0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00f      	beq.n	8005f9c <TIM_Base_SetConfig+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d00b      	beq.n	8005f9c <TIM_Base_SetConfig+0x38>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a34      	ldr	r2, [pc, #208]	@ (8006058 <TIM_Base_SetConfig+0xf4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_Base_SetConfig+0x38>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a33      	ldr	r2, [pc, #204]	@ (800605c <TIM_Base_SetConfig+0xf8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0x38>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a32      	ldr	r2, [pc, #200]	@ (8006060 <TIM_Base_SetConfig+0xfc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d108      	bne.n	8005fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	@ (8006054 <TIM_Base_SetConfig+0xf0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d01b      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbc:	d017      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a25      	ldr	r2, [pc, #148]	@ (8006058 <TIM_Base_SetConfig+0xf4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a24      	ldr	r2, [pc, #144]	@ (800605c <TIM_Base_SetConfig+0xf8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00f      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	@ (8006060 <TIM_Base_SetConfig+0xfc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	@ (8006064 <TIM_Base_SetConfig+0x100>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a21      	ldr	r2, [pc, #132]	@ (8006068 <TIM_Base_SetConfig+0x104>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x8a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a20      	ldr	r2, [pc, #128]	@ (800606c <TIM_Base_SetConfig+0x108>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a0c      	ldr	r2, [pc, #48]	@ (8006054 <TIM_Base_SetConfig+0xf0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d103      	bne.n	800602e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800

08006070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800609a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 030a 	bic.w	r3, r3, #10
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b087      	sub	sp, #28
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f023 0210 	bic.w	r2, r3, #16
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	031b      	lsls	r3, r3, #12
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800610a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	f043 0307 	orr.w	r3, r3, #7
 8006150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800617e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	431a      	orrs	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4313      	orrs	r3, r2
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	609a      	str	r2, [r3, #8]
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e050      	b.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006208:	d013      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a18      	ldr	r2, [pc, #96]	@ (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a16      	ldr	r2, [pc, #88]	@ (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a15      	ldr	r2, [pc, #84]	@ (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a13      	ldr	r2, [pc, #76]	@ (800627c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10c      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000

08006280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e042      	b.n	8006340 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb f910 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	@ 0x24
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fe15 	bl	8006f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b20      	cmp	r3, #32
 8006366:	d175      	bne.n	8006454 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UART_Transmit+0x2c>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e06e      	b.n	8006456 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2221      	movs	r2, #33	@ 0x21
 8006382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006386:	f7fb ffe5 	bl	8002354 <HAL_GetTick>
 800638a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	88fa      	ldrh	r2, [r7, #6]
 8006390:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	88fa      	ldrh	r2, [r7, #6]
 8006396:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a0:	d108      	bne.n	80063b4 <HAL_UART_Transmit+0x6c>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d104      	bne.n	80063b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e003      	b.n	80063bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063bc:	e02e      	b.n	800641c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2200      	movs	r2, #0
 80063c6:	2180      	movs	r1, #128	@ 0x80
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fbb3 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e03a      	b.n	8006456 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3302      	adds	r3, #2
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e007      	b.n	800640e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	781a      	ldrb	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1cb      	bne.n	80063be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	2140      	movs	r1, #64	@ 0x40
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fb7f 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e006      	b.n	8006456 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3720      	adds	r7, #32
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b08a      	sub	sp, #40	@ 0x28
 8006462:	af02      	add	r7, sp, #8
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b20      	cmp	r3, #32
 800647c:	f040 8081 	bne.w	8006582 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UART_Receive+0x2e>
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e079      	b.n	8006584 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2222      	movs	r2, #34	@ 0x22
 800649a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064a4:	f7fb ff56 	bl	8002354 <HAL_GetTick>
 80064a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	88fa      	ldrh	r2, [r7, #6]
 80064ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d108      	bne.n	80064d2 <HAL_UART_Receive+0x74>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	e003      	b.n	80064da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80064da:	e047      	b.n	800656c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2200      	movs	r2, #0
 80064e4:	2120      	movs	r1, #32
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb24 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e042      	b.n	8006584 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10c      	bne.n	800651e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006510:	b29a      	uxth	r2, r3
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	3302      	adds	r3, #2
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	e01f      	b.n	800655e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006526:	d007      	beq.n	8006538 <HAL_UART_Receive+0xda>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <HAL_UART_Receive+0xe8>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d106      	bne.n	8006546 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e008      	b.n	8006558 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006552:	b2da      	uxtb	r2, r3
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1b2      	bne.n	80064dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b0ba      	sub	sp, #232	@ 0xe8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10f      	bne.n	80065f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_UART_IRQHandler+0x66>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fbd7 	bl	8006d9e <UART_Receive_IT>
      return;
 80065f0:	e273      	b.n	8006ada <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 80de 	beq.w	80067b8 <HAL_UART_IRQHandler+0x22c>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80d1 	beq.w	80067b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <HAL_UART_IRQHandler+0xae>
 8006622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f043 0201 	orr.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <HAL_UART_IRQHandler+0xd2>
 8006646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006656:	f043 0202 	orr.w	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <HAL_UART_IRQHandler+0xf6>
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667a:	f043 0204 	orr.w	r2, r3, #4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d011      	beq.n	80066b2 <HAL_UART_IRQHandler+0x126>
 800668e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d105      	bne.n	80066a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800669a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066aa:	f043 0208 	orr.w	r2, r3, #8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 820a 	beq.w	8006ad0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_UART_IRQHandler+0x14e>
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fb62 	bl	8006d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e4:	2b40      	cmp	r3, #64	@ 0x40
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d103      	bne.n	8006706 <HAL_UART_IRQHandler+0x17a>
 80066fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d04f      	beq.n	80067a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa6d 	bl	8006be6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d141      	bne.n	800679e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3314      	adds	r3, #20
 8006720:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3314      	adds	r3, #20
 8006742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006746:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800674a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800675e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1d9      	bne.n	800671a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d013      	beq.n	8006796 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006772:	4a8a      	ldr	r2, [pc, #552]	@ (800699c <HAL_UART_IRQHandler+0x410>)
 8006774:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	4618      	mov	r0, r3
 800677c:	f7fb ffea 	bl	8002754 <HAL_DMA_Abort_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	e00e      	b.n	80067b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9b6 	bl	8006b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	e00a      	b.n	80067b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9b2 	bl	8006b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e006      	b.n	80067b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9ae 	bl	8006b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80067b2:	e18d      	b.n	8006ad0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	bf00      	nop
    return;
 80067b6:	e18b      	b.n	8006ad0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067bc:	2b01      	cmp	r3, #1
 80067be:	f040 8167 	bne.w	8006a90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8160 	beq.w	8006a90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8159 	beq.w	8006a90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	f040 80ce 	bne.w	80069a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80a9 	beq.w	800696c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800681e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006822:	429a      	cmp	r2, r3
 8006824:	f080 80a2 	bcs.w	800696c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800682e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683a:	f000 8088 	beq.w	800694e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800685c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800686a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800686e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1d9      	bne.n	800683e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800689a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3314      	adds	r3, #20
 80068aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e1      	bne.n	800688a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3314      	adds	r3, #20
 80068cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e3      	bne.n	80068c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800691c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800691e:	f023 0310 	bic.w	r3, r3, #16
 8006922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	330c      	adds	r3, #12
 800692c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006930:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006932:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006936:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800693e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e3      	bne.n	800690c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006948:	4618      	mov	r0, r3
 800694a:	f7fb fe93 	bl	8002674 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800695c:	b29b      	uxth	r3, r3
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	b29b      	uxth	r3, r3
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f8d9 	bl	8006b1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800696a:	e0b3      	b.n	8006ad4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006970:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006974:	429a      	cmp	r2, r3
 8006976:	f040 80ad 	bne.w	8006ad4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006984:	f040 80a6 	bne.w	8006ad4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f8c1 	bl	8006b1c <HAL_UARTEx_RxEventCallback>
      return;
 800699a:	e09b      	b.n	8006ad4 <HAL_UART_IRQHandler+0x548>
 800699c:	08006cad 	.word	0x08006cad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 808e 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80069bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8089 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80069ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80069ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e3      	bne.n	80069c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3314      	adds	r3, #20
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3314      	adds	r3, #20
 8006a1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a22:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e3      	bne.n	80069fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0310 	bic.w	r3, r3, #16
 8006a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	330c      	adds	r3, #12
 8006a64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a68:	61fa      	str	r2, [r7, #28]
 8006a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	69b9      	ldr	r1, [r7, #24]
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	617b      	str	r3, [r7, #20]
   return(result);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e3      	bne.n	8006a44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f847 	bl	8006b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a8e:	e023      	b.n	8006ad8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x524>
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f910 	bl	8006cce <UART_Transmit_IT>
    return;
 8006aae:	e014      	b.n	8006ada <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00e      	beq.n	8006ada <HAL_UART_IRQHandler+0x54e>
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f950 	bl	8006d6e <UART_EndTransmit_IT>
    return;
 8006ace:	e004      	b.n	8006ada <HAL_UART_IRQHandler+0x54e>
    return;
 8006ad0:	bf00      	nop
 8006ad2:	e002      	b.n	8006ada <HAL_UART_IRQHandler+0x54e>
      return;
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <HAL_UART_IRQHandler+0x54e>
      return;
 8006ad8:	bf00      	nop
  }
}
 8006ada:	37e8      	adds	r7, #232	@ 0xe8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	e03b      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4c:	d037      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fb fc01 	bl	8002354 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e03a      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d023      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d020      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d01d      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d116      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b90:	2300      	movs	r3, #0
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f81d 	bl	8006be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2208      	movs	r2, #8
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e00f      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	bf0c      	ite	eq
 8006bce:	2301      	moveq	r3, #1
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d0b4      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b095      	sub	sp, #84	@ 0x54
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e5      	bne.n	8006c22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d119      	bne.n	8006c92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f023 0310 	bic.w	r3, r3, #16
 8006c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c7e:	61ba      	str	r2, [r7, #24]
 8006c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e5      	bne.n	8006c5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ca0:	bf00      	nop
 8006ca2:	3754      	adds	r7, #84	@ 0x54
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7ff ff21 	bl	8006b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b21      	cmp	r3, #33	@ 0x21
 8006ce0:	d13e      	bne.n	8006d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cea:	d114      	bne.n	8006d16 <UART_Transmit_IT+0x48>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d110      	bne.n	8006d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	621a      	str	r2, [r3, #32]
 8006d14:	e008      	b.n	8006d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	1c59      	adds	r1, r3, #1
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6211      	str	r1, [r2, #32]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4619      	mov	r1, r3
 8006d36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10f      	bne.n	8006d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fea6 	bl	8006ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b08c      	sub	sp, #48	@ 0x30
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b22      	cmp	r3, #34	@ 0x22
 8006db8:	f040 80aa 	bne.w	8006f10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc4:	d115      	bne.n	8006df2 <UART_Receive_IT+0x54>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d111      	bne.n	8006df2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	1c9a      	adds	r2, r3, #2
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8006df0:	e024      	b.n	8006e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e00:	d007      	beq.n	8006e12 <UART_Receive_IT+0x74>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <UART_Receive_IT+0x82>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e008      	b.n	8006e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d15d      	bne.n	8006f0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0220 	bic.w	r2, r2, #32
 8006e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d135      	bne.n	8006f02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ebc:	623a      	str	r2, [r7, #32]
 8006ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	6a3a      	ldr	r2, [r7, #32]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d10a      	bne.n	8006ef4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fe0e 	bl	8006b1c <HAL_UARTEx_RxEventCallback>
 8006f00:	e002      	b.n	8006f08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff fdf6 	bl	8006af4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e002      	b.n	8006f12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3730      	adds	r7, #48	@ 0x30
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f20:	b0c0      	sub	sp, #256	@ 0x100
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	68d9      	ldr	r1, [r3, #12]
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	ea40 0301 	orr.w	r3, r0, r1
 8006f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f74:	f021 010c 	bic.w	r1, r1, #12
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f82:	430b      	orrs	r3, r1
 8006f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f96:	6999      	ldr	r1, [r3, #24]
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	ea40 0301 	orr.w	r3, r0, r1
 8006fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b8f      	ldr	r3, [pc, #572]	@ (80071e8 <UART_SetConfig+0x2cc>)
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d005      	beq.n	8006fbc <UART_SetConfig+0xa0>
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80071ec <UART_SetConfig+0x2d0>)
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d104      	bne.n	8006fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fbc:	f7fe fd2c 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8006fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fc4:	e003      	b.n	8006fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fc6:	f7fe fd13 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8006fca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd8:	f040 810c 	bne.w	80071f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fee:	4622      	mov	r2, r4
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	1891      	adds	r1, r2, r2
 8006ff4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ff6:	415b      	adcs	r3, r3
 8006ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ffe:	4621      	mov	r1, r4
 8007000:	eb12 0801 	adds.w	r8, r2, r1
 8007004:	4629      	mov	r1, r5
 8007006:	eb43 0901 	adc.w	r9, r3, r1
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800701a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800701e:	4690      	mov	r8, r2
 8007020:	4699      	mov	r9, r3
 8007022:	4623      	mov	r3, r4
 8007024:	eb18 0303 	adds.w	r3, r8, r3
 8007028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800702c:	462b      	mov	r3, r5
 800702e:	eb49 0303 	adc.w	r3, r9, r3
 8007032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007042:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800704a:	460b      	mov	r3, r1
 800704c:	18db      	adds	r3, r3, r3
 800704e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007050:	4613      	mov	r3, r2
 8007052:	eb42 0303 	adc.w	r3, r2, r3
 8007056:	657b      	str	r3, [r7, #84]	@ 0x54
 8007058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800705c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007060:	f7f9 f90e 	bl	8000280 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4b61      	ldr	r3, [pc, #388]	@ (80071f0 <UART_SetConfig+0x2d4>)
 800706a:	fba3 2302 	umull	r2, r3, r3, r2
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	011c      	lsls	r4, r3, #4
 8007072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800707c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	1891      	adds	r1, r2, r2
 800708a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800708c:	415b      	adcs	r3, r3
 800708e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007094:	4641      	mov	r1, r8
 8007096:	eb12 0a01 	adds.w	sl, r2, r1
 800709a:	4649      	mov	r1, r9
 800709c:	eb43 0b01 	adc.w	fp, r3, r1
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070b4:	4692      	mov	sl, r2
 80070b6:	469b      	mov	fp, r3
 80070b8:	4643      	mov	r3, r8
 80070ba:	eb1a 0303 	adds.w	r3, sl, r3
 80070be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070c2:	464b      	mov	r3, r9
 80070c4:	eb4b 0303 	adc.w	r3, fp, r3
 80070c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070e0:	460b      	mov	r3, r1
 80070e2:	18db      	adds	r3, r3, r3
 80070e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070e6:	4613      	mov	r3, r2
 80070e8:	eb42 0303 	adc.w	r3, r2, r3
 80070ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070f6:	f7f9 f8c3 	bl	8000280 <__aeabi_uldivmod>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	4b3b      	ldr	r3, [pc, #236]	@ (80071f0 <UART_SetConfig+0x2d4>)
 8007102:	fba3 2301 	umull	r2, r3, r3, r1
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	2264      	movs	r2, #100	@ 0x64
 800710a:	fb02 f303 	mul.w	r3, r2, r3
 800710e:	1acb      	subs	r3, r1, r3
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007116:	4b36      	ldr	r3, [pc, #216]	@ (80071f0 <UART_SetConfig+0x2d4>)
 8007118:	fba3 2302 	umull	r2, r3, r3, r2
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007124:	441c      	add	r4, r3
 8007126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800712a:	2200      	movs	r2, #0
 800712c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007130:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007138:	4642      	mov	r2, r8
 800713a:	464b      	mov	r3, r9
 800713c:	1891      	adds	r1, r2, r2
 800713e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007140:	415b      	adcs	r3, r3
 8007142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007148:	4641      	mov	r1, r8
 800714a:	1851      	adds	r1, r2, r1
 800714c:	6339      	str	r1, [r7, #48]	@ 0x30
 800714e:	4649      	mov	r1, r9
 8007150:	414b      	adcs	r3, r1
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007160:	4659      	mov	r1, fp
 8007162:	00cb      	lsls	r3, r1, #3
 8007164:	4651      	mov	r1, sl
 8007166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800716a:	4651      	mov	r1, sl
 800716c:	00ca      	lsls	r2, r1, #3
 800716e:	4610      	mov	r0, r2
 8007170:	4619      	mov	r1, r3
 8007172:	4603      	mov	r3, r0
 8007174:	4642      	mov	r2, r8
 8007176:	189b      	adds	r3, r3, r2
 8007178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800717c:	464b      	mov	r3, r9
 800717e:	460a      	mov	r2, r1
 8007180:	eb42 0303 	adc.w	r3, r2, r3
 8007184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007194:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800719c:	460b      	mov	r3, r1
 800719e:	18db      	adds	r3, r3, r3
 80071a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071a2:	4613      	mov	r3, r2
 80071a4:	eb42 0303 	adc.w	r3, r2, r3
 80071a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071b2:	f7f9 f865 	bl	8000280 <__aeabi_uldivmod>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <UART_SetConfig+0x2d4>)
 80071bc:	fba3 1302 	umull	r1, r3, r3, r2
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	2164      	movs	r1, #100	@ 0x64
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	3332      	adds	r3, #50	@ 0x32
 80071ce:	4a08      	ldr	r2, [pc, #32]	@ (80071f0 <UART_SetConfig+0x2d4>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	f003 0207 	and.w	r2, r3, #7
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4422      	add	r2, r4
 80071e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071e4:	e106      	b.n	80073f4 <UART_SetConfig+0x4d8>
 80071e6:	bf00      	nop
 80071e8:	40011000 	.word	0x40011000
 80071ec:	40011400 	.word	0x40011400
 80071f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	1891      	adds	r1, r2, r2
 800720c:	6239      	str	r1, [r7, #32]
 800720e:	415b      	adcs	r3, r3
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
 8007212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007216:	4641      	mov	r1, r8
 8007218:	1854      	adds	r4, r2, r1
 800721a:	4649      	mov	r1, r9
 800721c:	eb43 0501 	adc.w	r5, r3, r1
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	00eb      	lsls	r3, r5, #3
 800722a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800722e:	00e2      	lsls	r2, r4, #3
 8007230:	4614      	mov	r4, r2
 8007232:	461d      	mov	r5, r3
 8007234:	4643      	mov	r3, r8
 8007236:	18e3      	adds	r3, r4, r3
 8007238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800723c:	464b      	mov	r3, r9
 800723e:	eb45 0303 	adc.w	r3, r5, r3
 8007242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007262:	4629      	mov	r1, r5
 8007264:	008b      	lsls	r3, r1, #2
 8007266:	4621      	mov	r1, r4
 8007268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800726c:	4621      	mov	r1, r4
 800726e:	008a      	lsls	r2, r1, #2
 8007270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007274:	f7f9 f804 	bl	8000280 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4b60      	ldr	r3, [pc, #384]	@ (8007400 <UART_SetConfig+0x4e4>)
 800727e:	fba3 2302 	umull	r2, r3, r3, r2
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	011c      	lsls	r4, r3, #4
 8007286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728a:	2200      	movs	r2, #0
 800728c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007290:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	1891      	adds	r1, r2, r2
 800729e:	61b9      	str	r1, [r7, #24]
 80072a0:	415b      	adcs	r3, r3
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a8:	4641      	mov	r1, r8
 80072aa:	1851      	adds	r1, r2, r1
 80072ac:	6139      	str	r1, [r7, #16]
 80072ae:	4649      	mov	r1, r9
 80072b0:	414b      	adcs	r3, r1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072c0:	4659      	mov	r1, fp
 80072c2:	00cb      	lsls	r3, r1, #3
 80072c4:	4651      	mov	r1, sl
 80072c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ca:	4651      	mov	r1, sl
 80072cc:	00ca      	lsls	r2, r1, #3
 80072ce:	4610      	mov	r0, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	4642      	mov	r2, r8
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072dc:	464b      	mov	r3, r9
 80072de:	460a      	mov	r2, r1
 80072e0:	eb42 0303 	adc.w	r3, r2, r3
 80072e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007300:	4649      	mov	r1, r9
 8007302:	008b      	lsls	r3, r1, #2
 8007304:	4641      	mov	r1, r8
 8007306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800730a:	4641      	mov	r1, r8
 800730c:	008a      	lsls	r2, r1, #2
 800730e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007312:	f7f8 ffb5 	bl	8000280 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4611      	mov	r1, r2
 800731c:	4b38      	ldr	r3, [pc, #224]	@ (8007400 <UART_SetConfig+0x4e4>)
 800731e:	fba3 2301 	umull	r2, r3, r3, r1
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2264      	movs	r2, #100	@ 0x64
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	1acb      	subs	r3, r1, r3
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	3332      	adds	r3, #50	@ 0x32
 8007330:	4a33      	ldr	r2, [pc, #204]	@ (8007400 <UART_SetConfig+0x4e4>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800733c:	441c      	add	r4, r3
 800733e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007342:	2200      	movs	r2, #0
 8007344:	673b      	str	r3, [r7, #112]	@ 0x70
 8007346:	677a      	str	r2, [r7, #116]	@ 0x74
 8007348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800734c:	4642      	mov	r2, r8
 800734e:	464b      	mov	r3, r9
 8007350:	1891      	adds	r1, r2, r2
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	415b      	adcs	r3, r3
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800735c:	4641      	mov	r1, r8
 800735e:	1851      	adds	r1, r2, r1
 8007360:	6039      	str	r1, [r7, #0]
 8007362:	4649      	mov	r1, r9
 8007364:	414b      	adcs	r3, r1
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007374:	4659      	mov	r1, fp
 8007376:	00cb      	lsls	r3, r1, #3
 8007378:	4651      	mov	r1, sl
 800737a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800737e:	4651      	mov	r1, sl
 8007380:	00ca      	lsls	r2, r1, #3
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	4603      	mov	r3, r0
 8007388:	4642      	mov	r2, r8
 800738a:	189b      	adds	r3, r3, r2
 800738c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800738e:	464b      	mov	r3, r9
 8007390:	460a      	mov	r2, r1
 8007392:	eb42 0303 	adc.w	r3, r2, r3
 8007396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 0300 	mov.w	r3, #0
 80073ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073b0:	4649      	mov	r1, r9
 80073b2:	008b      	lsls	r3, r1, #2
 80073b4:	4641      	mov	r1, r8
 80073b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ba:	4641      	mov	r1, r8
 80073bc:	008a      	lsls	r2, r1, #2
 80073be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073c2:	f7f8 ff5d 	bl	8000280 <__aeabi_uldivmod>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007400 <UART_SetConfig+0x4e4>)
 80073cc:	fba3 1302 	umull	r1, r3, r3, r2
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	2164      	movs	r1, #100	@ 0x64
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	3332      	adds	r3, #50	@ 0x32
 80073de:	4a08      	ldr	r2, [pc, #32]	@ (8007400 <UART_SetConfig+0x4e4>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	f003 020f 	and.w	r2, r3, #15
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4422      	add	r2, r4
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	bf00      	nop
 80073f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073fa:	46bd      	mov	sp, r7
 80073fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007400:	51eb851f 	.word	0x51eb851f

08007404 <sbrk_aligned>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4e0f      	ldr	r6, [pc, #60]	@ (8007444 <sbrk_aligned+0x40>)
 8007408:	460c      	mov	r4, r1
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	4605      	mov	r5, r0
 800740e:	b911      	cbnz	r1, 8007416 <sbrk_aligned+0x12>
 8007410:	f000 f9ee 	bl	80077f0 <_sbrk_r>
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 f9e9 	bl	80077f0 <_sbrk_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d103      	bne.n	800742a <sbrk_aligned+0x26>
 8007422:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007426:	4620      	mov	r0, r4
 8007428:	bd70      	pop	{r4, r5, r6, pc}
 800742a:	1cc4      	adds	r4, r0, #3
 800742c:	f024 0403 	bic.w	r4, r4, #3
 8007430:	42a0      	cmp	r0, r4
 8007432:	d0f8      	beq.n	8007426 <sbrk_aligned+0x22>
 8007434:	1a21      	subs	r1, r4, r0
 8007436:	4628      	mov	r0, r5
 8007438:	f000 f9da 	bl	80077f0 <_sbrk_r>
 800743c:	3001      	adds	r0, #1
 800743e:	d1f2      	bne.n	8007426 <sbrk_aligned+0x22>
 8007440:	e7ef      	b.n	8007422 <sbrk_aligned+0x1e>
 8007442:	bf00      	nop
 8007444:	2000060c 	.word	0x2000060c

08007448 <_malloc_r>:
 8007448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744c:	1ccd      	adds	r5, r1, #3
 800744e:	f025 0503 	bic.w	r5, r5, #3
 8007452:	3508      	adds	r5, #8
 8007454:	2d0c      	cmp	r5, #12
 8007456:	bf38      	it	cc
 8007458:	250c      	movcc	r5, #12
 800745a:	2d00      	cmp	r5, #0
 800745c:	4606      	mov	r6, r0
 800745e:	db01      	blt.n	8007464 <_malloc_r+0x1c>
 8007460:	42a9      	cmp	r1, r5
 8007462:	d904      	bls.n	800746e <_malloc_r+0x26>
 8007464:	230c      	movs	r3, #12
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	2000      	movs	r0, #0
 800746a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007544 <_malloc_r+0xfc>
 8007472:	f000 f869 	bl	8007548 <__malloc_lock>
 8007476:	f8d8 3000 	ldr.w	r3, [r8]
 800747a:	461c      	mov	r4, r3
 800747c:	bb44      	cbnz	r4, 80074d0 <_malloc_r+0x88>
 800747e:	4629      	mov	r1, r5
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ffbf 	bl	8007404 <sbrk_aligned>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	4604      	mov	r4, r0
 800748a:	d158      	bne.n	800753e <_malloc_r+0xf6>
 800748c:	f8d8 4000 	ldr.w	r4, [r8]
 8007490:	4627      	mov	r7, r4
 8007492:	2f00      	cmp	r7, #0
 8007494:	d143      	bne.n	800751e <_malloc_r+0xd6>
 8007496:	2c00      	cmp	r4, #0
 8007498:	d04b      	beq.n	8007532 <_malloc_r+0xea>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	4639      	mov	r1, r7
 800749e:	4630      	mov	r0, r6
 80074a0:	eb04 0903 	add.w	r9, r4, r3
 80074a4:	f000 f9a4 	bl	80077f0 <_sbrk_r>
 80074a8:	4581      	cmp	r9, r0
 80074aa:	d142      	bne.n	8007532 <_malloc_r+0xea>
 80074ac:	6821      	ldr	r1, [r4, #0]
 80074ae:	1a6d      	subs	r5, r5, r1
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ffa6 	bl	8007404 <sbrk_aligned>
 80074b8:	3001      	adds	r0, #1
 80074ba:	d03a      	beq.n	8007532 <_malloc_r+0xea>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	442b      	add	r3, r5
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	f8d8 3000 	ldr.w	r3, [r8]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	bb62      	cbnz	r2, 8007524 <_malloc_r+0xdc>
 80074ca:	f8c8 7000 	str.w	r7, [r8]
 80074ce:	e00f      	b.n	80074f0 <_malloc_r+0xa8>
 80074d0:	6822      	ldr	r2, [r4, #0]
 80074d2:	1b52      	subs	r2, r2, r5
 80074d4:	d420      	bmi.n	8007518 <_malloc_r+0xd0>
 80074d6:	2a0b      	cmp	r2, #11
 80074d8:	d917      	bls.n	800750a <_malloc_r+0xc2>
 80074da:	1961      	adds	r1, r4, r5
 80074dc:	42a3      	cmp	r3, r4
 80074de:	6025      	str	r5, [r4, #0]
 80074e0:	bf18      	it	ne
 80074e2:	6059      	strne	r1, [r3, #4]
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	bf08      	it	eq
 80074e8:	f8c8 1000 	streq.w	r1, [r8]
 80074ec:	5162      	str	r2, [r4, r5]
 80074ee:	604b      	str	r3, [r1, #4]
 80074f0:	4630      	mov	r0, r6
 80074f2:	f000 f82f 	bl	8007554 <__malloc_unlock>
 80074f6:	f104 000b 	add.w	r0, r4, #11
 80074fa:	1d23      	adds	r3, r4, #4
 80074fc:	f020 0007 	bic.w	r0, r0, #7
 8007500:	1ac2      	subs	r2, r0, r3
 8007502:	bf1c      	itt	ne
 8007504:	1a1b      	subne	r3, r3, r0
 8007506:	50a3      	strne	r3, [r4, r2]
 8007508:	e7af      	b.n	800746a <_malloc_r+0x22>
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	42a3      	cmp	r3, r4
 800750e:	bf0c      	ite	eq
 8007510:	f8c8 2000 	streq.w	r2, [r8]
 8007514:	605a      	strne	r2, [r3, #4]
 8007516:	e7eb      	b.n	80074f0 <_malloc_r+0xa8>
 8007518:	4623      	mov	r3, r4
 800751a:	6864      	ldr	r4, [r4, #4]
 800751c:	e7ae      	b.n	800747c <_malloc_r+0x34>
 800751e:	463c      	mov	r4, r7
 8007520:	687f      	ldr	r7, [r7, #4]
 8007522:	e7b6      	b.n	8007492 <_malloc_r+0x4a>
 8007524:	461a      	mov	r2, r3
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	42a3      	cmp	r3, r4
 800752a:	d1fb      	bne.n	8007524 <_malloc_r+0xdc>
 800752c:	2300      	movs	r3, #0
 800752e:	6053      	str	r3, [r2, #4]
 8007530:	e7de      	b.n	80074f0 <_malloc_r+0xa8>
 8007532:	230c      	movs	r3, #12
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f80c 	bl	8007554 <__malloc_unlock>
 800753c:	e794      	b.n	8007468 <_malloc_r+0x20>
 800753e:	6005      	str	r5, [r0, #0]
 8007540:	e7d6      	b.n	80074f0 <_malloc_r+0xa8>
 8007542:	bf00      	nop
 8007544:	20000610 	.word	0x20000610

08007548 <__malloc_lock>:
 8007548:	4801      	ldr	r0, [pc, #4]	@ (8007550 <__malloc_lock+0x8>)
 800754a:	f000 b98c 	b.w	8007866 <__retarget_lock_acquire_recursive>
 800754e:	bf00      	nop
 8007550:	20000750 	.word	0x20000750

08007554 <__malloc_unlock>:
 8007554:	4801      	ldr	r0, [pc, #4]	@ (800755c <__malloc_unlock+0x8>)
 8007556:	f000 b987 	b.w	8007868 <__retarget_lock_release_recursive>
 800755a:	bf00      	nop
 800755c:	20000750 	.word	0x20000750

08007560 <siprintf>:
 8007560:	b40e      	push	{r1, r2, r3}
 8007562:	b500      	push	{lr}
 8007564:	b09c      	sub	sp, #112	@ 0x70
 8007566:	ab1d      	add	r3, sp, #116	@ 0x74
 8007568:	9002      	str	r0, [sp, #8]
 800756a:	9006      	str	r0, [sp, #24]
 800756c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007570:	4809      	ldr	r0, [pc, #36]	@ (8007598 <siprintf+0x38>)
 8007572:	9107      	str	r1, [sp, #28]
 8007574:	9104      	str	r1, [sp, #16]
 8007576:	4909      	ldr	r1, [pc, #36]	@ (800759c <siprintf+0x3c>)
 8007578:	f853 2b04 	ldr.w	r2, [r3], #4
 800757c:	9105      	str	r1, [sp, #20]
 800757e:	6800      	ldr	r0, [r0, #0]
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	a902      	add	r1, sp, #8
 8007584:	f000 fa26 	bl	80079d4 <_svfiprintf_r>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	b01c      	add	sp, #112	@ 0x70
 8007590:	f85d eb04 	ldr.w	lr, [sp], #4
 8007594:	b003      	add	sp, #12
 8007596:	4770      	bx	lr
 8007598:	20000018 	.word	0x20000018
 800759c:	ffff0208 	.word	0xffff0208

080075a0 <std>:
 80075a0:	2300      	movs	r3, #0
 80075a2:	b510      	push	{r4, lr}
 80075a4:	4604      	mov	r4, r0
 80075a6:	e9c0 3300 	strd	r3, r3, [r0]
 80075aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ae:	6083      	str	r3, [r0, #8]
 80075b0:	8181      	strh	r1, [r0, #12]
 80075b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80075b4:	81c2      	strh	r2, [r0, #14]
 80075b6:	6183      	str	r3, [r0, #24]
 80075b8:	4619      	mov	r1, r3
 80075ba:	2208      	movs	r2, #8
 80075bc:	305c      	adds	r0, #92	@ 0x5c
 80075be:	f000 f90f 	bl	80077e0 <memset>
 80075c2:	4b0d      	ldr	r3, [pc, #52]	@ (80075f8 <std+0x58>)
 80075c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80075c6:	4b0d      	ldr	r3, [pc, #52]	@ (80075fc <std+0x5c>)
 80075c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007600 <std+0x60>)
 80075cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <std+0x64>)
 80075d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80075d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <std+0x68>)
 80075d4:	6224      	str	r4, [r4, #32]
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d006      	beq.n	80075e8 <std+0x48>
 80075da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075de:	4294      	cmp	r4, r2
 80075e0:	d002      	beq.n	80075e8 <std+0x48>
 80075e2:	33d0      	adds	r3, #208	@ 0xd0
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d105      	bne.n	80075f4 <std+0x54>
 80075e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f0:	f000 b938 	b.w	8007864 <__retarget_lock_init_recursive>
 80075f4:	bd10      	pop	{r4, pc}
 80075f6:	bf00      	nop
 80075f8:	08008041 	.word	0x08008041
 80075fc:	08008063 	.word	0x08008063
 8007600:	0800809b 	.word	0x0800809b
 8007604:	080080bf 	.word	0x080080bf
 8007608:	20000614 	.word	0x20000614

0800760c <stdio_exit_handler>:
 800760c:	4a02      	ldr	r2, [pc, #8]	@ (8007618 <stdio_exit_handler+0xc>)
 800760e:	4903      	ldr	r1, [pc, #12]	@ (800761c <stdio_exit_handler+0x10>)
 8007610:	4803      	ldr	r0, [pc, #12]	@ (8007620 <stdio_exit_handler+0x14>)
 8007612:	f000 b869 	b.w	80076e8 <_fwalk_sglue>
 8007616:	bf00      	nop
 8007618:	2000000c 	.word	0x2000000c
 800761c:	08007ff1 	.word	0x08007ff1
 8007620:	2000001c 	.word	0x2000001c

08007624 <cleanup_stdio>:
 8007624:	6841      	ldr	r1, [r0, #4]
 8007626:	4b0c      	ldr	r3, [pc, #48]	@ (8007658 <cleanup_stdio+0x34>)
 8007628:	4299      	cmp	r1, r3
 800762a:	b510      	push	{r4, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	d001      	beq.n	8007634 <cleanup_stdio+0x10>
 8007630:	f000 fcde 	bl	8007ff0 <_fflush_r>
 8007634:	68a1      	ldr	r1, [r4, #8]
 8007636:	4b09      	ldr	r3, [pc, #36]	@ (800765c <cleanup_stdio+0x38>)
 8007638:	4299      	cmp	r1, r3
 800763a:	d002      	beq.n	8007642 <cleanup_stdio+0x1e>
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fcd7 	bl	8007ff0 <_fflush_r>
 8007642:	68e1      	ldr	r1, [r4, #12]
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <cleanup_stdio+0x3c>)
 8007646:	4299      	cmp	r1, r3
 8007648:	d004      	beq.n	8007654 <cleanup_stdio+0x30>
 800764a:	4620      	mov	r0, r4
 800764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007650:	f000 bcce 	b.w	8007ff0 <_fflush_r>
 8007654:	bd10      	pop	{r4, pc}
 8007656:	bf00      	nop
 8007658:	20000614 	.word	0x20000614
 800765c:	2000067c 	.word	0x2000067c
 8007660:	200006e4 	.word	0x200006e4

08007664 <global_stdio_init.part.0>:
 8007664:	b510      	push	{r4, lr}
 8007666:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <global_stdio_init.part.0+0x30>)
 8007668:	4c0b      	ldr	r4, [pc, #44]	@ (8007698 <global_stdio_init.part.0+0x34>)
 800766a:	4a0c      	ldr	r2, [pc, #48]	@ (800769c <global_stdio_init.part.0+0x38>)
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	4620      	mov	r0, r4
 8007670:	2200      	movs	r2, #0
 8007672:	2104      	movs	r1, #4
 8007674:	f7ff ff94 	bl	80075a0 <std>
 8007678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800767c:	2201      	movs	r2, #1
 800767e:	2109      	movs	r1, #9
 8007680:	f7ff ff8e 	bl	80075a0 <std>
 8007684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007688:	2202      	movs	r2, #2
 800768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768e:	2112      	movs	r1, #18
 8007690:	f7ff bf86 	b.w	80075a0 <std>
 8007694:	2000074c 	.word	0x2000074c
 8007698:	20000614 	.word	0x20000614
 800769c:	0800760d 	.word	0x0800760d

080076a0 <__sfp_lock_acquire>:
 80076a0:	4801      	ldr	r0, [pc, #4]	@ (80076a8 <__sfp_lock_acquire+0x8>)
 80076a2:	f000 b8e0 	b.w	8007866 <__retarget_lock_acquire_recursive>
 80076a6:	bf00      	nop
 80076a8:	20000751 	.word	0x20000751

080076ac <__sfp_lock_release>:
 80076ac:	4801      	ldr	r0, [pc, #4]	@ (80076b4 <__sfp_lock_release+0x8>)
 80076ae:	f000 b8db 	b.w	8007868 <__retarget_lock_release_recursive>
 80076b2:	bf00      	nop
 80076b4:	20000751 	.word	0x20000751

080076b8 <__sinit>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	4604      	mov	r4, r0
 80076bc:	f7ff fff0 	bl	80076a0 <__sfp_lock_acquire>
 80076c0:	6a23      	ldr	r3, [r4, #32]
 80076c2:	b11b      	cbz	r3, 80076cc <__sinit+0x14>
 80076c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c8:	f7ff bff0 	b.w	80076ac <__sfp_lock_release>
 80076cc:	4b04      	ldr	r3, [pc, #16]	@ (80076e0 <__sinit+0x28>)
 80076ce:	6223      	str	r3, [r4, #32]
 80076d0:	4b04      	ldr	r3, [pc, #16]	@ (80076e4 <__sinit+0x2c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1f5      	bne.n	80076c4 <__sinit+0xc>
 80076d8:	f7ff ffc4 	bl	8007664 <global_stdio_init.part.0>
 80076dc:	e7f2      	b.n	80076c4 <__sinit+0xc>
 80076de:	bf00      	nop
 80076e0:	08007625 	.word	0x08007625
 80076e4:	2000074c 	.word	0x2000074c

080076e8 <_fwalk_sglue>:
 80076e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	4607      	mov	r7, r0
 80076ee:	4688      	mov	r8, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	2600      	movs	r6, #0
 80076f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076f8:	f1b9 0901 	subs.w	r9, r9, #1
 80076fc:	d505      	bpl.n	800770a <_fwalk_sglue+0x22>
 80076fe:	6824      	ldr	r4, [r4, #0]
 8007700:	2c00      	cmp	r4, #0
 8007702:	d1f7      	bne.n	80076f4 <_fwalk_sglue+0xc>
 8007704:	4630      	mov	r0, r6
 8007706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d907      	bls.n	8007720 <_fwalk_sglue+0x38>
 8007710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007714:	3301      	adds	r3, #1
 8007716:	d003      	beq.n	8007720 <_fwalk_sglue+0x38>
 8007718:	4629      	mov	r1, r5
 800771a:	4638      	mov	r0, r7
 800771c:	47c0      	blx	r8
 800771e:	4306      	orrs	r6, r0
 8007720:	3568      	adds	r5, #104	@ 0x68
 8007722:	e7e9      	b.n	80076f8 <_fwalk_sglue+0x10>

08007724 <_puts_r>:
 8007724:	6a03      	ldr	r3, [r0, #32]
 8007726:	b570      	push	{r4, r5, r6, lr}
 8007728:	6884      	ldr	r4, [r0, #8]
 800772a:	4605      	mov	r5, r0
 800772c:	460e      	mov	r6, r1
 800772e:	b90b      	cbnz	r3, 8007734 <_puts_r+0x10>
 8007730:	f7ff ffc2 	bl	80076b8 <__sinit>
 8007734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007736:	07db      	lsls	r3, r3, #31
 8007738:	d405      	bmi.n	8007746 <_puts_r+0x22>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	0598      	lsls	r0, r3, #22
 800773e:	d402      	bmi.n	8007746 <_puts_r+0x22>
 8007740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007742:	f000 f890 	bl	8007866 <__retarget_lock_acquire_recursive>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	0719      	lsls	r1, r3, #28
 800774a:	d502      	bpl.n	8007752 <_puts_r+0x2e>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d135      	bne.n	80077be <_puts_r+0x9a>
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 fd23 	bl	80081a0 <__swsetup_r>
 800775a:	b380      	cbz	r0, 80077be <_puts_r+0x9a>
 800775c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007762:	07da      	lsls	r2, r3, #31
 8007764:	d405      	bmi.n	8007772 <_puts_r+0x4e>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	059b      	lsls	r3, r3, #22
 800776a:	d402      	bmi.n	8007772 <_puts_r+0x4e>
 800776c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800776e:	f000 f87b 	bl	8007868 <__retarget_lock_release_recursive>
 8007772:	4628      	mov	r0, r5
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	2b00      	cmp	r3, #0
 8007778:	da04      	bge.n	8007784 <_puts_r+0x60>
 800777a:	69a2      	ldr	r2, [r4, #24]
 800777c:	429a      	cmp	r2, r3
 800777e:	dc17      	bgt.n	80077b0 <_puts_r+0x8c>
 8007780:	290a      	cmp	r1, #10
 8007782:	d015      	beq.n	80077b0 <_puts_r+0x8c>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	6022      	str	r2, [r4, #0]
 800778a:	7019      	strb	r1, [r3, #0]
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007792:	3b01      	subs	r3, #1
 8007794:	60a3      	str	r3, [r4, #8]
 8007796:	2900      	cmp	r1, #0
 8007798:	d1ed      	bne.n	8007776 <_puts_r+0x52>
 800779a:	2b00      	cmp	r3, #0
 800779c:	da11      	bge.n	80077c2 <_puts_r+0x9e>
 800779e:	4622      	mov	r2, r4
 80077a0:	210a      	movs	r1, #10
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 fcbd 	bl	8008122 <__swbuf_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d0d7      	beq.n	800775c <_puts_r+0x38>
 80077ac:	250a      	movs	r5, #10
 80077ae:	e7d7      	b.n	8007760 <_puts_r+0x3c>
 80077b0:	4622      	mov	r2, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 fcb5 	bl	8008122 <__swbuf_r>
 80077b8:	3001      	adds	r0, #1
 80077ba:	d1e7      	bne.n	800778c <_puts_r+0x68>
 80077bc:	e7ce      	b.n	800775c <_puts_r+0x38>
 80077be:	3e01      	subs	r6, #1
 80077c0:	e7e4      	b.n	800778c <_puts_r+0x68>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	6022      	str	r2, [r4, #0]
 80077c8:	220a      	movs	r2, #10
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e7ee      	b.n	80077ac <_puts_r+0x88>
	...

080077d0 <puts>:
 80077d0:	4b02      	ldr	r3, [pc, #8]	@ (80077dc <puts+0xc>)
 80077d2:	4601      	mov	r1, r0
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	f7ff bfa5 	b.w	8007724 <_puts_r>
 80077da:	bf00      	nop
 80077dc:	20000018 	.word	0x20000018

080077e0 <memset>:
 80077e0:	4402      	add	r2, r0
 80077e2:	4603      	mov	r3, r0
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d100      	bne.n	80077ea <memset+0xa>
 80077e8:	4770      	bx	lr
 80077ea:	f803 1b01 	strb.w	r1, [r3], #1
 80077ee:	e7f9      	b.n	80077e4 <memset+0x4>

080077f0 <_sbrk_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d06      	ldr	r5, [pc, #24]	@ (800780c <_sbrk_r+0x1c>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4604      	mov	r4, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	f7f9 ff98 	bl	8001730 <_sbrk>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_sbrk_r+0x1a>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_sbrk_r+0x1a>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000754 	.word	0x20000754

08007810 <__errno>:
 8007810:	4b01      	ldr	r3, [pc, #4]	@ (8007818 <__errno+0x8>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20000018 	.word	0x20000018

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4d0d      	ldr	r5, [pc, #52]	@ (8007854 <__libc_init_array+0x38>)
 8007820:	4c0d      	ldr	r4, [pc, #52]	@ (8007858 <__libc_init_array+0x3c>)
 8007822:	1b64      	subs	r4, r4, r5
 8007824:	10a4      	asrs	r4, r4, #2
 8007826:	2600      	movs	r6, #0
 8007828:	42a6      	cmp	r6, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	4d0b      	ldr	r5, [pc, #44]	@ (800785c <__libc_init_array+0x40>)
 800782e:	4c0c      	ldr	r4, [pc, #48]	@ (8007860 <__libc_init_array+0x44>)
 8007830:	f000 fdf8 	bl	8008424 <_init>
 8007834:	1b64      	subs	r4, r4, r5
 8007836:	10a4      	asrs	r4, r4, #2
 8007838:	2600      	movs	r6, #0
 800783a:	42a6      	cmp	r6, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	f855 3b04 	ldr.w	r3, [r5], #4
 8007844:	4798      	blx	r3
 8007846:	3601      	adds	r6, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	f855 3b04 	ldr.w	r3, [r5], #4
 800784e:	4798      	blx	r3
 8007850:	3601      	adds	r6, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	08008d34 	.word	0x08008d34
 8007858:	08008d34 	.word	0x08008d34
 800785c:	08008d34 	.word	0x08008d34
 8007860:	08008d38 	.word	0x08008d38

08007864 <__retarget_lock_init_recursive>:
 8007864:	4770      	bx	lr

08007866 <__retarget_lock_acquire_recursive>:
 8007866:	4770      	bx	lr

08007868 <__retarget_lock_release_recursive>:
 8007868:	4770      	bx	lr

0800786a <memcpy>:
 800786a:	440a      	add	r2, r1
 800786c:	4291      	cmp	r1, r2
 800786e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007872:	d100      	bne.n	8007876 <memcpy+0xc>
 8007874:	4770      	bx	lr
 8007876:	b510      	push	{r4, lr}
 8007878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800787c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007880:	4291      	cmp	r1, r2
 8007882:	d1f9      	bne.n	8007878 <memcpy+0xe>
 8007884:	bd10      	pop	{r4, pc}
	...

08007888 <_free_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4605      	mov	r5, r0
 800788c:	2900      	cmp	r1, #0
 800788e:	d041      	beq.n	8007914 <_free_r+0x8c>
 8007890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007894:	1f0c      	subs	r4, r1, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfb8      	it	lt
 800789a:	18e4      	addlt	r4, r4, r3
 800789c:	f7ff fe54 	bl	8007548 <__malloc_lock>
 80078a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007918 <_free_r+0x90>)
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	b933      	cbnz	r3, 80078b4 <_free_r+0x2c>
 80078a6:	6063      	str	r3, [r4, #4]
 80078a8:	6014      	str	r4, [r2, #0]
 80078aa:	4628      	mov	r0, r5
 80078ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b0:	f7ff be50 	b.w	8007554 <__malloc_unlock>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d908      	bls.n	80078ca <_free_r+0x42>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	1821      	adds	r1, r4, r0
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf01      	itttt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	1809      	addeq	r1, r1, r0
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	e7ed      	b.n	80078a6 <_free_r+0x1e>
 80078ca:	461a      	mov	r2, r3
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b10b      	cbz	r3, 80078d4 <_free_r+0x4c>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d9fa      	bls.n	80078ca <_free_r+0x42>
 80078d4:	6811      	ldr	r1, [r2, #0]
 80078d6:	1850      	adds	r0, r2, r1
 80078d8:	42a0      	cmp	r0, r4
 80078da:	d10b      	bne.n	80078f4 <_free_r+0x6c>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	4401      	add	r1, r0
 80078e0:	1850      	adds	r0, r2, r1
 80078e2:	4283      	cmp	r3, r0
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	d1e0      	bne.n	80078aa <_free_r+0x22>
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	6053      	str	r3, [r2, #4]
 80078ee:	4408      	add	r0, r1
 80078f0:	6010      	str	r0, [r2, #0]
 80078f2:	e7da      	b.n	80078aa <_free_r+0x22>
 80078f4:	d902      	bls.n	80078fc <_free_r+0x74>
 80078f6:	230c      	movs	r3, #12
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	e7d6      	b.n	80078aa <_free_r+0x22>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	1821      	adds	r1, r4, r0
 8007900:	428b      	cmp	r3, r1
 8007902:	bf04      	itt	eq
 8007904:	6819      	ldreq	r1, [r3, #0]
 8007906:	685b      	ldreq	r3, [r3, #4]
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	bf04      	itt	eq
 800790c:	1809      	addeq	r1, r1, r0
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	6054      	str	r4, [r2, #4]
 8007912:	e7ca      	b.n	80078aa <_free_r+0x22>
 8007914:	bd38      	pop	{r3, r4, r5, pc}
 8007916:	bf00      	nop
 8007918:	20000610 	.word	0x20000610

0800791c <__ssputs_r>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	688e      	ldr	r6, [r1, #8]
 8007922:	461f      	mov	r7, r3
 8007924:	42be      	cmp	r6, r7
 8007926:	680b      	ldr	r3, [r1, #0]
 8007928:	4682      	mov	sl, r0
 800792a:	460c      	mov	r4, r1
 800792c:	4690      	mov	r8, r2
 800792e:	d82d      	bhi.n	800798c <__ssputs_r+0x70>
 8007930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007938:	d026      	beq.n	8007988 <__ssputs_r+0x6c>
 800793a:	6965      	ldr	r5, [r4, #20]
 800793c:	6909      	ldr	r1, [r1, #16]
 800793e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007942:	eba3 0901 	sub.w	r9, r3, r1
 8007946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800794a:	1c7b      	adds	r3, r7, #1
 800794c:	444b      	add	r3, r9
 800794e:	106d      	asrs	r5, r5, #1
 8007950:	429d      	cmp	r5, r3
 8007952:	bf38      	it	cc
 8007954:	461d      	movcc	r5, r3
 8007956:	0553      	lsls	r3, r2, #21
 8007958:	d527      	bpl.n	80079aa <__ssputs_r+0x8e>
 800795a:	4629      	mov	r1, r5
 800795c:	f7ff fd74 	bl	8007448 <_malloc_r>
 8007960:	4606      	mov	r6, r0
 8007962:	b360      	cbz	r0, 80079be <__ssputs_r+0xa2>
 8007964:	6921      	ldr	r1, [r4, #16]
 8007966:	464a      	mov	r2, r9
 8007968:	f7ff ff7f 	bl	800786a <memcpy>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	6126      	str	r6, [r4, #16]
 800797a:	6165      	str	r5, [r4, #20]
 800797c:	444e      	add	r6, r9
 800797e:	eba5 0509 	sub.w	r5, r5, r9
 8007982:	6026      	str	r6, [r4, #0]
 8007984:	60a5      	str	r5, [r4, #8]
 8007986:	463e      	mov	r6, r7
 8007988:	42be      	cmp	r6, r7
 800798a:	d900      	bls.n	800798e <__ssputs_r+0x72>
 800798c:	463e      	mov	r6, r7
 800798e:	6820      	ldr	r0, [r4, #0]
 8007990:	4632      	mov	r2, r6
 8007992:	4641      	mov	r1, r8
 8007994:	f000 fcbc 	bl	8008310 <memmove>
 8007998:	68a3      	ldr	r3, [r4, #8]
 800799a:	1b9b      	subs	r3, r3, r6
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	4433      	add	r3, r6
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	2000      	movs	r0, #0
 80079a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079aa:	462a      	mov	r2, r5
 80079ac:	f000 fb8b 	bl	80080c6 <_realloc_r>
 80079b0:	4606      	mov	r6, r0
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d1e0      	bne.n	8007978 <__ssputs_r+0x5c>
 80079b6:	6921      	ldr	r1, [r4, #16]
 80079b8:	4650      	mov	r0, sl
 80079ba:	f7ff ff65 	bl	8007888 <_free_r>
 80079be:	230c      	movs	r3, #12
 80079c0:	f8ca 3000 	str.w	r3, [sl]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079d0:	e7e9      	b.n	80079a6 <__ssputs_r+0x8a>
	...

080079d4 <_svfiprintf_r>:
 80079d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d8:	4698      	mov	r8, r3
 80079da:	898b      	ldrh	r3, [r1, #12]
 80079dc:	061b      	lsls	r3, r3, #24
 80079de:	b09d      	sub	sp, #116	@ 0x74
 80079e0:	4607      	mov	r7, r0
 80079e2:	460d      	mov	r5, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	d510      	bpl.n	8007a0a <_svfiprintf_r+0x36>
 80079e8:	690b      	ldr	r3, [r1, #16]
 80079ea:	b973      	cbnz	r3, 8007a0a <_svfiprintf_r+0x36>
 80079ec:	2140      	movs	r1, #64	@ 0x40
 80079ee:	f7ff fd2b 	bl	8007448 <_malloc_r>
 80079f2:	6028      	str	r0, [r5, #0]
 80079f4:	6128      	str	r0, [r5, #16]
 80079f6:	b930      	cbnz	r0, 8007a06 <_svfiprintf_r+0x32>
 80079f8:	230c      	movs	r3, #12
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a00:	b01d      	add	sp, #116	@ 0x74
 8007a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a06:	2340      	movs	r3, #64	@ 0x40
 8007a08:	616b      	str	r3, [r5, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a0e:	2320      	movs	r3, #32
 8007a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a18:	2330      	movs	r3, #48	@ 0x30
 8007a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bb8 <_svfiprintf_r+0x1e4>
 8007a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a22:	f04f 0901 	mov.w	r9, #1
 8007a26:	4623      	mov	r3, r4
 8007a28:	469a      	mov	sl, r3
 8007a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a2e:	b10a      	cbz	r2, 8007a34 <_svfiprintf_r+0x60>
 8007a30:	2a25      	cmp	r2, #37	@ 0x25
 8007a32:	d1f9      	bne.n	8007a28 <_svfiprintf_r+0x54>
 8007a34:	ebba 0b04 	subs.w	fp, sl, r4
 8007a38:	d00b      	beq.n	8007a52 <_svfiprintf_r+0x7e>
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ff6b 	bl	800791c <__ssputs_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	f000 80a7 	beq.w	8007b9a <_svfiprintf_r+0x1c6>
 8007a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a4e:	445a      	add	r2, fp
 8007a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a52:	f89a 3000 	ldrb.w	r3, [sl]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 809f 	beq.w	8007b9a <_svfiprintf_r+0x1c6>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a66:	f10a 0a01 	add.w	sl, sl, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a74:	4654      	mov	r4, sl
 8007a76:	2205      	movs	r2, #5
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	484e      	ldr	r0, [pc, #312]	@ (8007bb8 <_svfiprintf_r+0x1e4>)
 8007a7e:	f7f8 fbaf 	bl	80001e0 <memchr>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	b9d8      	cbnz	r0, 8007abe <_svfiprintf_r+0xea>
 8007a86:	06d0      	lsls	r0, r2, #27
 8007a88:	bf44      	itt	mi
 8007a8a:	2320      	movmi	r3, #32
 8007a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a90:	0711      	lsls	r1, r2, #28
 8007a92:	bf44      	itt	mi
 8007a94:	232b      	movmi	r3, #43	@ 0x2b
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa0:	d015      	beq.n	8007ace <_svfiprintf_r+0xfa>
 8007aa2:	9a07      	ldr	r2, [sp, #28]
 8007aa4:	4654      	mov	r4, sl
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f04f 0c0a 	mov.w	ip, #10
 8007aac:	4621      	mov	r1, r4
 8007aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab2:	3b30      	subs	r3, #48	@ 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d94b      	bls.n	8007b50 <_svfiprintf_r+0x17c>
 8007ab8:	b1b0      	cbz	r0, 8007ae8 <_svfiprintf_r+0x114>
 8007aba:	9207      	str	r2, [sp, #28]
 8007abc:	e014      	b.n	8007ae8 <_svfiprintf_r+0x114>
 8007abe:	eba0 0308 	sub.w	r3, r0, r8
 8007ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	46a2      	mov	sl, r4
 8007acc:	e7d2      	b.n	8007a74 <_svfiprintf_r+0xa0>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	1d19      	adds	r1, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9103      	str	r1, [sp, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbb      	ittet	lt
 8007ada:	425b      	neglt	r3, r3
 8007adc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae0:	9307      	strge	r3, [sp, #28]
 8007ae2:	9307      	strlt	r3, [sp, #28]
 8007ae4:	bfb8      	it	lt
 8007ae6:	9204      	strlt	r2, [sp, #16]
 8007ae8:	7823      	ldrb	r3, [r4, #0]
 8007aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8007aec:	d10a      	bne.n	8007b04 <_svfiprintf_r+0x130>
 8007aee:	7863      	ldrb	r3, [r4, #1]
 8007af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007af2:	d132      	bne.n	8007b5a <_svfiprintf_r+0x186>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9203      	str	r2, [sp, #12]
 8007afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b00:	3402      	adds	r4, #2
 8007b02:	9305      	str	r3, [sp, #20]
 8007b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bc8 <_svfiprintf_r+0x1f4>
 8007b08:	7821      	ldrb	r1, [r4, #0]
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	f7f8 fb67 	bl	80001e0 <memchr>
 8007b12:	b138      	cbz	r0, 8007b24 <_svfiprintf_r+0x150>
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	eba0 000a 	sub.w	r0, r0, sl
 8007b1a:	2240      	movs	r2, #64	@ 0x40
 8007b1c:	4082      	lsls	r2, r0
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	3401      	adds	r4, #1
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b28:	4824      	ldr	r0, [pc, #144]	@ (8007bbc <_svfiprintf_r+0x1e8>)
 8007b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b2e:	2206      	movs	r2, #6
 8007b30:	f7f8 fb56 	bl	80001e0 <memchr>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d036      	beq.n	8007ba6 <_svfiprintf_r+0x1d2>
 8007b38:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <_svfiprintf_r+0x1ec>)
 8007b3a:	bb1b      	cbnz	r3, 8007b84 <_svfiprintf_r+0x1b0>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	3307      	adds	r3, #7
 8007b40:	f023 0307 	bic.w	r3, r3, #7
 8007b44:	3308      	adds	r3, #8
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4a:	4433      	add	r3, r6
 8007b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b4e:	e76a      	b.n	8007a26 <_svfiprintf_r+0x52>
 8007b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b54:	460c      	mov	r4, r1
 8007b56:	2001      	movs	r0, #1
 8007b58:	e7a8      	b.n	8007aac <_svfiprintf_r+0xd8>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	3401      	adds	r4, #1
 8007b5e:	9305      	str	r3, [sp, #20]
 8007b60:	4619      	mov	r1, r3
 8007b62:	f04f 0c0a 	mov.w	ip, #10
 8007b66:	4620      	mov	r0, r4
 8007b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b6c:	3a30      	subs	r2, #48	@ 0x30
 8007b6e:	2a09      	cmp	r2, #9
 8007b70:	d903      	bls.n	8007b7a <_svfiprintf_r+0x1a6>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0c6      	beq.n	8007b04 <_svfiprintf_r+0x130>
 8007b76:	9105      	str	r1, [sp, #20]
 8007b78:	e7c4      	b.n	8007b04 <_svfiprintf_r+0x130>
 8007b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b7e:	4604      	mov	r4, r0
 8007b80:	2301      	movs	r3, #1
 8007b82:	e7f0      	b.n	8007b66 <_svfiprintf_r+0x192>
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc4 <_svfiprintf_r+0x1f0>)
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f3af 8000 	nop.w
 8007b94:	1c42      	adds	r2, r0, #1
 8007b96:	4606      	mov	r6, r0
 8007b98:	d1d6      	bne.n	8007b48 <_svfiprintf_r+0x174>
 8007b9a:	89ab      	ldrh	r3, [r5, #12]
 8007b9c:	065b      	lsls	r3, r3, #25
 8007b9e:	f53f af2d 	bmi.w	80079fc <_svfiprintf_r+0x28>
 8007ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ba4:	e72c      	b.n	8007a00 <_svfiprintf_r+0x2c>
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <_svfiprintf_r+0x1f0>)
 8007bae:	a904      	add	r1, sp, #16
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f000 f879 	bl	8007ca8 <_printf_i>
 8007bb6:	e7ed      	b.n	8007b94 <_svfiprintf_r+0x1c0>
 8007bb8:	08008cf8 	.word	0x08008cf8
 8007bbc:	08008d02 	.word	0x08008d02
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	0800791d 	.word	0x0800791d
 8007bc8:	08008cfe 	.word	0x08008cfe

08007bcc <_printf_common>:
 8007bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	4698      	mov	r8, r3
 8007bd4:	688a      	ldr	r2, [r1, #8]
 8007bd6:	690b      	ldr	r3, [r1, #16]
 8007bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	bfb8      	it	lt
 8007be0:	4613      	movlt	r3, r2
 8007be2:	6033      	str	r3, [r6, #0]
 8007be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007be8:	4607      	mov	r7, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	b10a      	cbz	r2, 8007bf2 <_printf_common+0x26>
 8007bee:	3301      	adds	r3, #1
 8007bf0:	6033      	str	r3, [r6, #0]
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	0699      	lsls	r1, r3, #26
 8007bf6:	bf42      	ittt	mi
 8007bf8:	6833      	ldrmi	r3, [r6, #0]
 8007bfa:	3302      	addmi	r3, #2
 8007bfc:	6033      	strmi	r3, [r6, #0]
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	f015 0506 	ands.w	r5, r5, #6
 8007c04:	d106      	bne.n	8007c14 <_printf_common+0x48>
 8007c06:	f104 0a19 	add.w	sl, r4, #25
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	6832      	ldr	r2, [r6, #0]
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dc26      	bgt.n	8007c62 <_printf_common+0x96>
 8007c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	3b00      	subs	r3, #0
 8007c1c:	bf18      	it	ne
 8007c1e:	2301      	movne	r3, #1
 8007c20:	0692      	lsls	r2, r2, #26
 8007c22:	d42b      	bmi.n	8007c7c <_printf_common+0xb0>
 8007c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c28:	4641      	mov	r1, r8
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c8      	blx	r9
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d01e      	beq.n	8007c70 <_printf_common+0xa4>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	6922      	ldr	r2, [r4, #16]
 8007c36:	f003 0306 	and.w	r3, r3, #6
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	bf02      	ittt	eq
 8007c3e:	68e5      	ldreq	r5, [r4, #12]
 8007c40:	6833      	ldreq	r3, [r6, #0]
 8007c42:	1aed      	subeq	r5, r5, r3
 8007c44:	68a3      	ldr	r3, [r4, #8]
 8007c46:	bf0c      	ite	eq
 8007c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c4c:	2500      	movne	r5, #0
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bfc4      	itt	gt
 8007c52:	1a9b      	subgt	r3, r3, r2
 8007c54:	18ed      	addgt	r5, r5, r3
 8007c56:	2600      	movs	r6, #0
 8007c58:	341a      	adds	r4, #26
 8007c5a:	42b5      	cmp	r5, r6
 8007c5c:	d11a      	bne.n	8007c94 <_printf_common+0xc8>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e008      	b.n	8007c74 <_printf_common+0xa8>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4652      	mov	r2, sl
 8007c66:	4641      	mov	r1, r8
 8007c68:	4638      	mov	r0, r7
 8007c6a:	47c8      	blx	r9
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d103      	bne.n	8007c78 <_printf_common+0xac>
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c78:	3501      	adds	r5, #1
 8007c7a:	e7c6      	b.n	8007c0a <_printf_common+0x3e>
 8007c7c:	18e1      	adds	r1, r4, r3
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	2030      	movs	r0, #48	@ 0x30
 8007c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c86:	4422      	add	r2, r4
 8007c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c90:	3302      	adds	r3, #2
 8007c92:	e7c7      	b.n	8007c24 <_printf_common+0x58>
 8007c94:	2301      	movs	r3, #1
 8007c96:	4622      	mov	r2, r4
 8007c98:	4641      	mov	r1, r8
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	47c8      	blx	r9
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d0e6      	beq.n	8007c70 <_printf_common+0xa4>
 8007ca2:	3601      	adds	r6, #1
 8007ca4:	e7d9      	b.n	8007c5a <_printf_common+0x8e>
	...

08007ca8 <_printf_i>:
 8007ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	7e0f      	ldrb	r7, [r1, #24]
 8007cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cb0:	2f78      	cmp	r7, #120	@ 0x78
 8007cb2:	4691      	mov	r9, r2
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	469a      	mov	sl, r3
 8007cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cbe:	d807      	bhi.n	8007cd0 <_printf_i+0x28>
 8007cc0:	2f62      	cmp	r7, #98	@ 0x62
 8007cc2:	d80a      	bhi.n	8007cda <_printf_i+0x32>
 8007cc4:	2f00      	cmp	r7, #0
 8007cc6:	f000 80d2 	beq.w	8007e6e <_printf_i+0x1c6>
 8007cca:	2f58      	cmp	r7, #88	@ 0x58
 8007ccc:	f000 80b9 	beq.w	8007e42 <_printf_i+0x19a>
 8007cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cd8:	e03a      	b.n	8007d50 <_printf_i+0xa8>
 8007cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cde:	2b15      	cmp	r3, #21
 8007ce0:	d8f6      	bhi.n	8007cd0 <_printf_i+0x28>
 8007ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ce8 <_printf_i+0x40>)
 8007ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce8:	08007d41 	.word	0x08007d41
 8007cec:	08007d55 	.word	0x08007d55
 8007cf0:	08007cd1 	.word	0x08007cd1
 8007cf4:	08007cd1 	.word	0x08007cd1
 8007cf8:	08007cd1 	.word	0x08007cd1
 8007cfc:	08007cd1 	.word	0x08007cd1
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007cd1 	.word	0x08007cd1
 8007d08:	08007cd1 	.word	0x08007cd1
 8007d0c:	08007cd1 	.word	0x08007cd1
 8007d10:	08007cd1 	.word	0x08007cd1
 8007d14:	08007e55 	.word	0x08007e55
 8007d18:	08007d7f 	.word	0x08007d7f
 8007d1c:	08007e0f 	.word	0x08007e0f
 8007d20:	08007cd1 	.word	0x08007cd1
 8007d24:	08007cd1 	.word	0x08007cd1
 8007d28:	08007e77 	.word	0x08007e77
 8007d2c:	08007cd1 	.word	0x08007cd1
 8007d30:	08007d7f 	.word	0x08007d7f
 8007d34:	08007cd1 	.word	0x08007cd1
 8007d38:	08007cd1 	.word	0x08007cd1
 8007d3c:	08007e17 	.word	0x08007e17
 8007d40:	6833      	ldr	r3, [r6, #0]
 8007d42:	1d1a      	adds	r2, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6032      	str	r2, [r6, #0]
 8007d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d50:	2301      	movs	r3, #1
 8007d52:	e09d      	b.n	8007e90 <_printf_i+0x1e8>
 8007d54:	6833      	ldr	r3, [r6, #0]
 8007d56:	6820      	ldr	r0, [r4, #0]
 8007d58:	1d19      	adds	r1, r3, #4
 8007d5a:	6031      	str	r1, [r6, #0]
 8007d5c:	0606      	lsls	r6, r0, #24
 8007d5e:	d501      	bpl.n	8007d64 <_printf_i+0xbc>
 8007d60:	681d      	ldr	r5, [r3, #0]
 8007d62:	e003      	b.n	8007d6c <_printf_i+0xc4>
 8007d64:	0645      	lsls	r5, r0, #25
 8007d66:	d5fb      	bpl.n	8007d60 <_printf_i+0xb8>
 8007d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	da03      	bge.n	8007d78 <_printf_i+0xd0>
 8007d70:	232d      	movs	r3, #45	@ 0x2d
 8007d72:	426d      	negs	r5, r5
 8007d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d78:	4859      	ldr	r0, [pc, #356]	@ (8007ee0 <_printf_i+0x238>)
 8007d7a:	230a      	movs	r3, #10
 8007d7c:	e011      	b.n	8007da2 <_printf_i+0xfa>
 8007d7e:	6821      	ldr	r1, [r4, #0]
 8007d80:	6833      	ldr	r3, [r6, #0]
 8007d82:	0608      	lsls	r0, r1, #24
 8007d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d88:	d402      	bmi.n	8007d90 <_printf_i+0xe8>
 8007d8a:	0649      	lsls	r1, r1, #25
 8007d8c:	bf48      	it	mi
 8007d8e:	b2ad      	uxthmi	r5, r5
 8007d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d92:	4853      	ldr	r0, [pc, #332]	@ (8007ee0 <_printf_i+0x238>)
 8007d94:	6033      	str	r3, [r6, #0]
 8007d96:	bf14      	ite	ne
 8007d98:	230a      	movne	r3, #10
 8007d9a:	2308      	moveq	r3, #8
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007da2:	6866      	ldr	r6, [r4, #4]
 8007da4:	60a6      	str	r6, [r4, #8]
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	bfa2      	ittt	ge
 8007daa:	6821      	ldrge	r1, [r4, #0]
 8007dac:	f021 0104 	bicge.w	r1, r1, #4
 8007db0:	6021      	strge	r1, [r4, #0]
 8007db2:	b90d      	cbnz	r5, 8007db8 <_printf_i+0x110>
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	d04b      	beq.n	8007e50 <_printf_i+0x1a8>
 8007db8:	4616      	mov	r6, r2
 8007dba:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dbe:	fb03 5711 	mls	r7, r3, r1, r5
 8007dc2:	5dc7      	ldrb	r7, [r0, r7]
 8007dc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dc8:	462f      	mov	r7, r5
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	460d      	mov	r5, r1
 8007dce:	d9f4      	bls.n	8007dba <_printf_i+0x112>
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d10b      	bne.n	8007dec <_printf_i+0x144>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	07df      	lsls	r7, r3, #31
 8007dd8:	d508      	bpl.n	8007dec <_printf_i+0x144>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	6861      	ldr	r1, [r4, #4]
 8007dde:	4299      	cmp	r1, r3
 8007de0:	bfde      	ittt	le
 8007de2:	2330      	movle	r3, #48	@ 0x30
 8007de4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007de8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007dec:	1b92      	subs	r2, r2, r6
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	f8cd a000 	str.w	sl, [sp]
 8007df4:	464b      	mov	r3, r9
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7ff fee6 	bl	8007bcc <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14a      	bne.n	8007e9a <_printf_i+0x1f2>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e08:	b004      	add	sp, #16
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	f043 0320 	orr.w	r3, r3, #32
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	4833      	ldr	r0, [pc, #204]	@ (8007ee4 <_printf_i+0x23c>)
 8007e18:	2778      	movs	r7, #120	@ 0x78
 8007e1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	6831      	ldr	r1, [r6, #0]
 8007e22:	061f      	lsls	r7, r3, #24
 8007e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e28:	d402      	bmi.n	8007e30 <_printf_i+0x188>
 8007e2a:	065f      	lsls	r7, r3, #25
 8007e2c:	bf48      	it	mi
 8007e2e:	b2ad      	uxthmi	r5, r5
 8007e30:	6031      	str	r1, [r6, #0]
 8007e32:	07d9      	lsls	r1, r3, #31
 8007e34:	bf44      	itt	mi
 8007e36:	f043 0320 	orrmi.w	r3, r3, #32
 8007e3a:	6023      	strmi	r3, [r4, #0]
 8007e3c:	b11d      	cbz	r5, 8007e46 <_printf_i+0x19e>
 8007e3e:	2310      	movs	r3, #16
 8007e40:	e7ac      	b.n	8007d9c <_printf_i+0xf4>
 8007e42:	4827      	ldr	r0, [pc, #156]	@ (8007ee0 <_printf_i+0x238>)
 8007e44:	e7e9      	b.n	8007e1a <_printf_i+0x172>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f023 0320 	bic.w	r3, r3, #32
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	e7f6      	b.n	8007e3e <_printf_i+0x196>
 8007e50:	4616      	mov	r6, r2
 8007e52:	e7bd      	b.n	8007dd0 <_printf_i+0x128>
 8007e54:	6833      	ldr	r3, [r6, #0]
 8007e56:	6825      	ldr	r5, [r4, #0]
 8007e58:	6961      	ldr	r1, [r4, #20]
 8007e5a:	1d18      	adds	r0, r3, #4
 8007e5c:	6030      	str	r0, [r6, #0]
 8007e5e:	062e      	lsls	r6, r5, #24
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	d501      	bpl.n	8007e68 <_printf_i+0x1c0>
 8007e64:	6019      	str	r1, [r3, #0]
 8007e66:	e002      	b.n	8007e6e <_printf_i+0x1c6>
 8007e68:	0668      	lsls	r0, r5, #25
 8007e6a:	d5fb      	bpl.n	8007e64 <_printf_i+0x1bc>
 8007e6c:	8019      	strh	r1, [r3, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	4616      	mov	r6, r2
 8007e74:	e7bc      	b.n	8007df0 <_printf_i+0x148>
 8007e76:	6833      	ldr	r3, [r6, #0]
 8007e78:	1d1a      	adds	r2, r3, #4
 8007e7a:	6032      	str	r2, [r6, #0]
 8007e7c:	681e      	ldr	r6, [r3, #0]
 8007e7e:	6862      	ldr	r2, [r4, #4]
 8007e80:	2100      	movs	r1, #0
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7f8 f9ac 	bl	80001e0 <memchr>
 8007e88:	b108      	cbz	r0, 8007e8e <_printf_i+0x1e6>
 8007e8a:	1b80      	subs	r0, r0, r6
 8007e8c:	6060      	str	r0, [r4, #4]
 8007e8e:	6863      	ldr	r3, [r4, #4]
 8007e90:	6123      	str	r3, [r4, #16]
 8007e92:	2300      	movs	r3, #0
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e98:	e7aa      	b.n	8007df0 <_printf_i+0x148>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	47d0      	blx	sl
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d0ad      	beq.n	8007e04 <_printf_i+0x15c>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	079b      	lsls	r3, r3, #30
 8007eac:	d413      	bmi.n	8007ed6 <_printf_i+0x22e>
 8007eae:	68e0      	ldr	r0, [r4, #12]
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	4298      	cmp	r0, r3
 8007eb4:	bfb8      	it	lt
 8007eb6:	4618      	movlt	r0, r3
 8007eb8:	e7a6      	b.n	8007e08 <_printf_i+0x160>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	47d0      	blx	sl
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d09d      	beq.n	8007e04 <_printf_i+0x15c>
 8007ec8:	3501      	adds	r5, #1
 8007eca:	68e3      	ldr	r3, [r4, #12]
 8007ecc:	9903      	ldr	r1, [sp, #12]
 8007ece:	1a5b      	subs	r3, r3, r1
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	dcf2      	bgt.n	8007eba <_printf_i+0x212>
 8007ed4:	e7eb      	b.n	8007eae <_printf_i+0x206>
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	f104 0619 	add.w	r6, r4, #25
 8007edc:	e7f5      	b.n	8007eca <_printf_i+0x222>
 8007ede:	bf00      	nop
 8007ee0:	08008d09 	.word	0x08008d09
 8007ee4:	08008d1a 	.word	0x08008d1a

08007ee8 <__sflush_r>:
 8007ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	0716      	lsls	r6, r2, #28
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	d454      	bmi.n	8007fa2 <__sflush_r+0xba>
 8007ef8:	684b      	ldr	r3, [r1, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dc02      	bgt.n	8007f04 <__sflush_r+0x1c>
 8007efe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dd48      	ble.n	8007f96 <__sflush_r+0xae>
 8007f04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	d045      	beq.n	8007f96 <__sflush_r+0xae>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f10:	682f      	ldr	r7, [r5, #0]
 8007f12:	6a21      	ldr	r1, [r4, #32]
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	d030      	beq.n	8007f7a <__sflush_r+0x92>
 8007f18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	0759      	lsls	r1, r3, #29
 8007f1e:	d505      	bpl.n	8007f2c <__sflush_r+0x44>
 8007f20:	6863      	ldr	r3, [r4, #4]
 8007f22:	1ad2      	subs	r2, r2, r3
 8007f24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f26:	b10b      	cbz	r3, 8007f2c <__sflush_r+0x44>
 8007f28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f2a:	1ad2      	subs	r2, r2, r3
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f30:	6a21      	ldr	r1, [r4, #32]
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b0      	blx	r6
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	d106      	bne.n	8007f4a <__sflush_r+0x62>
 8007f3c:	6829      	ldr	r1, [r5, #0]
 8007f3e:	291d      	cmp	r1, #29
 8007f40:	d82b      	bhi.n	8007f9a <__sflush_r+0xb2>
 8007f42:	4a2a      	ldr	r2, [pc, #168]	@ (8007fec <__sflush_r+0x104>)
 8007f44:	410a      	asrs	r2, r1
 8007f46:	07d6      	lsls	r6, r2, #31
 8007f48:	d427      	bmi.n	8007f9a <__sflush_r+0xb2>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	6062      	str	r2, [r4, #4]
 8007f4e:	04d9      	lsls	r1, r3, #19
 8007f50:	6922      	ldr	r2, [r4, #16]
 8007f52:	6022      	str	r2, [r4, #0]
 8007f54:	d504      	bpl.n	8007f60 <__sflush_r+0x78>
 8007f56:	1c42      	adds	r2, r0, #1
 8007f58:	d101      	bne.n	8007f5e <__sflush_r+0x76>
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	b903      	cbnz	r3, 8007f60 <__sflush_r+0x78>
 8007f5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f62:	602f      	str	r7, [r5, #0]
 8007f64:	b1b9      	cbz	r1, 8007f96 <__sflush_r+0xae>
 8007f66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f6a:	4299      	cmp	r1, r3
 8007f6c:	d002      	beq.n	8007f74 <__sflush_r+0x8c>
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7ff fc8a 	bl	8007888 <_free_r>
 8007f74:	2300      	movs	r3, #0
 8007f76:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f78:	e00d      	b.n	8007f96 <__sflush_r+0xae>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b0      	blx	r6
 8007f80:	4602      	mov	r2, r0
 8007f82:	1c50      	adds	r0, r2, #1
 8007f84:	d1c9      	bne.n	8007f1a <__sflush_r+0x32>
 8007f86:	682b      	ldr	r3, [r5, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0c6      	beq.n	8007f1a <__sflush_r+0x32>
 8007f8c:	2b1d      	cmp	r3, #29
 8007f8e:	d001      	beq.n	8007f94 <__sflush_r+0xac>
 8007f90:	2b16      	cmp	r3, #22
 8007f92:	d11e      	bne.n	8007fd2 <__sflush_r+0xea>
 8007f94:	602f      	str	r7, [r5, #0]
 8007f96:	2000      	movs	r0, #0
 8007f98:	e022      	b.n	8007fe0 <__sflush_r+0xf8>
 8007f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	e01b      	b.n	8007fda <__sflush_r+0xf2>
 8007fa2:	690f      	ldr	r7, [r1, #16]
 8007fa4:	2f00      	cmp	r7, #0
 8007fa6:	d0f6      	beq.n	8007f96 <__sflush_r+0xae>
 8007fa8:	0793      	lsls	r3, r2, #30
 8007faa:	680e      	ldr	r6, [r1, #0]
 8007fac:	bf08      	it	eq
 8007fae:	694b      	ldreq	r3, [r1, #20]
 8007fb0:	600f      	str	r7, [r1, #0]
 8007fb2:	bf18      	it	ne
 8007fb4:	2300      	movne	r3, #0
 8007fb6:	eba6 0807 	sub.w	r8, r6, r7
 8007fba:	608b      	str	r3, [r1, #8]
 8007fbc:	f1b8 0f00 	cmp.w	r8, #0
 8007fc0:	dde9      	ble.n	8007f96 <__sflush_r+0xae>
 8007fc2:	6a21      	ldr	r1, [r4, #32]
 8007fc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fc6:	4643      	mov	r3, r8
 8007fc8:	463a      	mov	r2, r7
 8007fca:	4628      	mov	r0, r5
 8007fcc:	47b0      	blx	r6
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	dc08      	bgt.n	8007fe4 <__sflush_r+0xfc>
 8007fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe4:	4407      	add	r7, r0
 8007fe6:	eba8 0800 	sub.w	r8, r8, r0
 8007fea:	e7e7      	b.n	8007fbc <__sflush_r+0xd4>
 8007fec:	dfbffffe 	.word	0xdfbffffe

08007ff0 <_fflush_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	690b      	ldr	r3, [r1, #16]
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	b913      	cbnz	r3, 8008000 <_fflush_r+0x10>
 8007ffa:	2500      	movs	r5, #0
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	b118      	cbz	r0, 800800a <_fflush_r+0x1a>
 8008002:	6a03      	ldr	r3, [r0, #32]
 8008004:	b90b      	cbnz	r3, 800800a <_fflush_r+0x1a>
 8008006:	f7ff fb57 	bl	80076b8 <__sinit>
 800800a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f3      	beq.n	8007ffa <_fflush_r+0xa>
 8008012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008014:	07d0      	lsls	r0, r2, #31
 8008016:	d404      	bmi.n	8008022 <_fflush_r+0x32>
 8008018:	0599      	lsls	r1, r3, #22
 800801a:	d402      	bmi.n	8008022 <_fflush_r+0x32>
 800801c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800801e:	f7ff fc22 	bl	8007866 <__retarget_lock_acquire_recursive>
 8008022:	4628      	mov	r0, r5
 8008024:	4621      	mov	r1, r4
 8008026:	f7ff ff5f 	bl	8007ee8 <__sflush_r>
 800802a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800802c:	07da      	lsls	r2, r3, #31
 800802e:	4605      	mov	r5, r0
 8008030:	d4e4      	bmi.n	8007ffc <_fflush_r+0xc>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	059b      	lsls	r3, r3, #22
 8008036:	d4e1      	bmi.n	8007ffc <_fflush_r+0xc>
 8008038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800803a:	f7ff fc15 	bl	8007868 <__retarget_lock_release_recursive>
 800803e:	e7dd      	b.n	8007ffc <_fflush_r+0xc>

08008040 <__sread>:
 8008040:	b510      	push	{r4, lr}
 8008042:	460c      	mov	r4, r1
 8008044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008048:	f000 f9c0 	bl	80083cc <_read_r>
 800804c:	2800      	cmp	r0, #0
 800804e:	bfab      	itete	ge
 8008050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008052:	89a3      	ldrhlt	r3, [r4, #12]
 8008054:	181b      	addge	r3, r3, r0
 8008056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800805a:	bfac      	ite	ge
 800805c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800805e:	81a3      	strhlt	r3, [r4, #12]
 8008060:	bd10      	pop	{r4, pc}

08008062 <__swrite>:
 8008062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008066:	461f      	mov	r7, r3
 8008068:	898b      	ldrh	r3, [r1, #12]
 800806a:	05db      	lsls	r3, r3, #23
 800806c:	4605      	mov	r5, r0
 800806e:	460c      	mov	r4, r1
 8008070:	4616      	mov	r6, r2
 8008072:	d505      	bpl.n	8008080 <__swrite+0x1e>
 8008074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008078:	2302      	movs	r3, #2
 800807a:	2200      	movs	r2, #0
 800807c:	f000 f994 	bl	80083a8 <_lseek_r>
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	4628      	mov	r0, r5
 8008092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008096:	f000 b9ab 	b.w	80083f0 <_write_r>

0800809a <__sseek>:
 800809a:	b510      	push	{r4, lr}
 800809c:	460c      	mov	r4, r1
 800809e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a2:	f000 f981 	bl	80083a8 <_lseek_r>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	bf15      	itete	ne
 80080ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080b6:	81a3      	strheq	r3, [r4, #12]
 80080b8:	bf18      	it	ne
 80080ba:	81a3      	strhne	r3, [r4, #12]
 80080bc:	bd10      	pop	{r4, pc}

080080be <__sclose>:
 80080be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c2:	f000 b93f 	b.w	8008344 <_close_r>

080080c6 <_realloc_r>:
 80080c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ca:	4680      	mov	r8, r0
 80080cc:	4615      	mov	r5, r2
 80080ce:	460c      	mov	r4, r1
 80080d0:	b921      	cbnz	r1, 80080dc <_realloc_r+0x16>
 80080d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d6:	4611      	mov	r1, r2
 80080d8:	f7ff b9b6 	b.w	8007448 <_malloc_r>
 80080dc:	b92a      	cbnz	r2, 80080ea <_realloc_r+0x24>
 80080de:	f7ff fbd3 	bl	8007888 <_free_r>
 80080e2:	2400      	movs	r4, #0
 80080e4:	4620      	mov	r0, r4
 80080e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ea:	f000 f993 	bl	8008414 <_malloc_usable_size_r>
 80080ee:	4285      	cmp	r5, r0
 80080f0:	4606      	mov	r6, r0
 80080f2:	d802      	bhi.n	80080fa <_realloc_r+0x34>
 80080f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080f8:	d8f4      	bhi.n	80080e4 <_realloc_r+0x1e>
 80080fa:	4629      	mov	r1, r5
 80080fc:	4640      	mov	r0, r8
 80080fe:	f7ff f9a3 	bl	8007448 <_malloc_r>
 8008102:	4607      	mov	r7, r0
 8008104:	2800      	cmp	r0, #0
 8008106:	d0ec      	beq.n	80080e2 <_realloc_r+0x1c>
 8008108:	42b5      	cmp	r5, r6
 800810a:	462a      	mov	r2, r5
 800810c:	4621      	mov	r1, r4
 800810e:	bf28      	it	cs
 8008110:	4632      	movcs	r2, r6
 8008112:	f7ff fbaa 	bl	800786a <memcpy>
 8008116:	4621      	mov	r1, r4
 8008118:	4640      	mov	r0, r8
 800811a:	f7ff fbb5 	bl	8007888 <_free_r>
 800811e:	463c      	mov	r4, r7
 8008120:	e7e0      	b.n	80080e4 <_realloc_r+0x1e>

08008122 <__swbuf_r>:
 8008122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008124:	460e      	mov	r6, r1
 8008126:	4614      	mov	r4, r2
 8008128:	4605      	mov	r5, r0
 800812a:	b118      	cbz	r0, 8008134 <__swbuf_r+0x12>
 800812c:	6a03      	ldr	r3, [r0, #32]
 800812e:	b90b      	cbnz	r3, 8008134 <__swbuf_r+0x12>
 8008130:	f7ff fac2 	bl	80076b8 <__sinit>
 8008134:	69a3      	ldr	r3, [r4, #24]
 8008136:	60a3      	str	r3, [r4, #8]
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	071a      	lsls	r2, r3, #28
 800813c:	d501      	bpl.n	8008142 <__swbuf_r+0x20>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	b943      	cbnz	r3, 8008154 <__swbuf_r+0x32>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 f82b 	bl	80081a0 <__swsetup_r>
 800814a:	b118      	cbz	r0, 8008154 <__swbuf_r+0x32>
 800814c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008150:	4638      	mov	r0, r7
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	6922      	ldr	r2, [r4, #16]
 8008158:	1a98      	subs	r0, r3, r2
 800815a:	6963      	ldr	r3, [r4, #20]
 800815c:	b2f6      	uxtb	r6, r6
 800815e:	4283      	cmp	r3, r0
 8008160:	4637      	mov	r7, r6
 8008162:	dc05      	bgt.n	8008170 <__swbuf_r+0x4e>
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	f7ff ff42 	bl	8007ff0 <_fflush_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	d1ed      	bne.n	800814c <__swbuf_r+0x2a>
 8008170:	68a3      	ldr	r3, [r4, #8]
 8008172:	3b01      	subs	r3, #1
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	701e      	strb	r6, [r3, #0]
 800817e:	6962      	ldr	r2, [r4, #20]
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	429a      	cmp	r2, r3
 8008184:	d004      	beq.n	8008190 <__swbuf_r+0x6e>
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	07db      	lsls	r3, r3, #31
 800818a:	d5e1      	bpl.n	8008150 <__swbuf_r+0x2e>
 800818c:	2e0a      	cmp	r6, #10
 800818e:	d1df      	bne.n	8008150 <__swbuf_r+0x2e>
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f7ff ff2c 	bl	8007ff0 <_fflush_r>
 8008198:	2800      	cmp	r0, #0
 800819a:	d0d9      	beq.n	8008150 <__swbuf_r+0x2e>
 800819c:	e7d6      	b.n	800814c <__swbuf_r+0x2a>
	...

080081a0 <__swsetup_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4b29      	ldr	r3, [pc, #164]	@ (8008248 <__swsetup_r+0xa8>)
 80081a4:	4605      	mov	r5, r0
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	460c      	mov	r4, r1
 80081aa:	b118      	cbz	r0, 80081b4 <__swsetup_r+0x14>
 80081ac:	6a03      	ldr	r3, [r0, #32]
 80081ae:	b90b      	cbnz	r3, 80081b4 <__swsetup_r+0x14>
 80081b0:	f7ff fa82 	bl	80076b8 <__sinit>
 80081b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b8:	0719      	lsls	r1, r3, #28
 80081ba:	d422      	bmi.n	8008202 <__swsetup_r+0x62>
 80081bc:	06da      	lsls	r2, r3, #27
 80081be:	d407      	bmi.n	80081d0 <__swsetup_r+0x30>
 80081c0:	2209      	movs	r2, #9
 80081c2:	602a      	str	r2, [r5, #0]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081ce:	e033      	b.n	8008238 <__swsetup_r+0x98>
 80081d0:	0758      	lsls	r0, r3, #29
 80081d2:	d512      	bpl.n	80081fa <__swsetup_r+0x5a>
 80081d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081d6:	b141      	cbz	r1, 80081ea <__swsetup_r+0x4a>
 80081d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081dc:	4299      	cmp	r1, r3
 80081de:	d002      	beq.n	80081e6 <__swsetup_r+0x46>
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7ff fb51 	bl	8007888 <_free_r>
 80081e6:	2300      	movs	r3, #0
 80081e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	2300      	movs	r3, #0
 80081f4:	6063      	str	r3, [r4, #4]
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f043 0308 	orr.w	r3, r3, #8
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	b94b      	cbnz	r3, 800821a <__swsetup_r+0x7a>
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800820c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008210:	d003      	beq.n	800821a <__swsetup_r+0x7a>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	f000 f83f 	bl	8008298 <__smakebuf_r>
 800821a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821e:	f013 0201 	ands.w	r2, r3, #1
 8008222:	d00a      	beq.n	800823a <__swsetup_r+0x9a>
 8008224:	2200      	movs	r2, #0
 8008226:	60a2      	str	r2, [r4, #8]
 8008228:	6962      	ldr	r2, [r4, #20]
 800822a:	4252      	negs	r2, r2
 800822c:	61a2      	str	r2, [r4, #24]
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	b942      	cbnz	r2, 8008244 <__swsetup_r+0xa4>
 8008232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008236:	d1c5      	bne.n	80081c4 <__swsetup_r+0x24>
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	0799      	lsls	r1, r3, #30
 800823c:	bf58      	it	pl
 800823e:	6962      	ldrpl	r2, [r4, #20]
 8008240:	60a2      	str	r2, [r4, #8]
 8008242:	e7f4      	b.n	800822e <__swsetup_r+0x8e>
 8008244:	2000      	movs	r0, #0
 8008246:	e7f7      	b.n	8008238 <__swsetup_r+0x98>
 8008248:	20000018 	.word	0x20000018

0800824c <__swhatbuf_r>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	2900      	cmp	r1, #0
 8008256:	b096      	sub	sp, #88	@ 0x58
 8008258:	4615      	mov	r5, r2
 800825a:	461e      	mov	r6, r3
 800825c:	da0d      	bge.n	800827a <__swhatbuf_r+0x2e>
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008264:	f04f 0100 	mov.w	r1, #0
 8008268:	bf14      	ite	ne
 800826a:	2340      	movne	r3, #64	@ 0x40
 800826c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008270:	2000      	movs	r0, #0
 8008272:	6031      	str	r1, [r6, #0]
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	b016      	add	sp, #88	@ 0x58
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	466a      	mov	r2, sp
 800827c:	f000 f872 	bl	8008364 <_fstat_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	dbec      	blt.n	800825e <__swhatbuf_r+0x12>
 8008284:	9901      	ldr	r1, [sp, #4]
 8008286:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800828a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800828e:	4259      	negs	r1, r3
 8008290:	4159      	adcs	r1, r3
 8008292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008296:	e7eb      	b.n	8008270 <__swhatbuf_r+0x24>

08008298 <__smakebuf_r>:
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829c:	079d      	lsls	r5, r3, #30
 800829e:	4606      	mov	r6, r0
 80082a0:	460c      	mov	r4, r1
 80082a2:	d507      	bpl.n	80082b4 <__smakebuf_r+0x1c>
 80082a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	6123      	str	r3, [r4, #16]
 80082ac:	2301      	movs	r3, #1
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	b003      	add	sp, #12
 80082b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b4:	ab01      	add	r3, sp, #4
 80082b6:	466a      	mov	r2, sp
 80082b8:	f7ff ffc8 	bl	800824c <__swhatbuf_r>
 80082bc:	9f00      	ldr	r7, [sp, #0]
 80082be:	4605      	mov	r5, r0
 80082c0:	4639      	mov	r1, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff f8c0 	bl	8007448 <_malloc_r>
 80082c8:	b948      	cbnz	r0, 80082de <__smakebuf_r+0x46>
 80082ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ce:	059a      	lsls	r2, r3, #22
 80082d0:	d4ee      	bmi.n	80082b0 <__smakebuf_r+0x18>
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	e7e2      	b.n	80082a4 <__smakebuf_r+0xc>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	6020      	str	r0, [r4, #0]
 80082e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ee:	b15b      	cbz	r3, 8008308 <__smakebuf_r+0x70>
 80082f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f4:	4630      	mov	r0, r6
 80082f6:	f000 f847 	bl	8008388 <_isatty_r>
 80082fa:	b128      	cbz	r0, 8008308 <__smakebuf_r+0x70>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f023 0303 	bic.w	r3, r3, #3
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	431d      	orrs	r5, r3
 800830c:	81a5      	strh	r5, [r4, #12]
 800830e:	e7cf      	b.n	80082b0 <__smakebuf_r+0x18>

08008310 <memmove>:
 8008310:	4288      	cmp	r0, r1
 8008312:	b510      	push	{r4, lr}
 8008314:	eb01 0402 	add.w	r4, r1, r2
 8008318:	d902      	bls.n	8008320 <memmove+0x10>
 800831a:	4284      	cmp	r4, r0
 800831c:	4623      	mov	r3, r4
 800831e:	d807      	bhi.n	8008330 <memmove+0x20>
 8008320:	1e43      	subs	r3, r0, #1
 8008322:	42a1      	cmp	r1, r4
 8008324:	d008      	beq.n	8008338 <memmove+0x28>
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800832e:	e7f8      	b.n	8008322 <memmove+0x12>
 8008330:	4402      	add	r2, r0
 8008332:	4601      	mov	r1, r0
 8008334:	428a      	cmp	r2, r1
 8008336:	d100      	bne.n	800833a <memmove+0x2a>
 8008338:	bd10      	pop	{r4, pc}
 800833a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800833e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008342:	e7f7      	b.n	8008334 <memmove+0x24>

08008344 <_close_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	@ (8008360 <_close_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7f9 f9b9 	bl	80016c6 <_close>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_close_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_close_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000754 	.word	0x20000754

08008364 <_fstat_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d07      	ldr	r5, [pc, #28]	@ (8008384 <_fstat_r+0x20>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	f7f9 f9b4 	bl	80016de <_fstat>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d102      	bne.n	8008380 <_fstat_r+0x1c>
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	b103      	cbz	r3, 8008380 <_fstat_r+0x1c>
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	20000754 	.word	0x20000754

08008388 <_isatty_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_isatty_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7f9 f9b3 	bl	80016fe <_isatty>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_isatty_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_isatty_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20000754 	.word	0x20000754

080083a8 <_lseek_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d07      	ldr	r5, [pc, #28]	@ (80083c8 <_lseek_r+0x20>)
 80083ac:	4604      	mov	r4, r0
 80083ae:	4608      	mov	r0, r1
 80083b0:	4611      	mov	r1, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f7f9 f9ac 	bl	8001714 <_lseek>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d102      	bne.n	80083c6 <_lseek_r+0x1e>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	b103      	cbz	r3, 80083c6 <_lseek_r+0x1e>
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	20000754 	.word	0x20000754

080083cc <_read_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	4d07      	ldr	r5, [pc, #28]	@ (80083ec <_read_r+0x20>)
 80083d0:	4604      	mov	r4, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	4611      	mov	r1, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7f9 f93a 	bl	8001654 <_read>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_read_r+0x1e>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_read_r+0x1e>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20000754 	.word	0x20000754

080083f0 <_write_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_write_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f9 f945 	bl	800168e <_write>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_write_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_write_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20000754 	.word	0x20000754

08008414 <_malloc_usable_size_r>:
 8008414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008418:	1f18      	subs	r0, r3, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfbc      	itt	lt
 800841e:	580b      	ldrlt	r3, [r1, r0]
 8008420:	18c0      	addlt	r0, r0, r3
 8008422:	4770      	bx	lr

08008424 <_init>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr

08008430 <_fini>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr
