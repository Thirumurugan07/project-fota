
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f204  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800f3a4  0800f3a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7f0  0800f7f0  000115bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7f0  0800f7f0  000107f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7f8  0800f7f8  000115bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7f8  0800f7f8  000107f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7fc  0800f7fc  000107fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005bc  20000000  0800f800  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  200005bc  0800fdbc  000115bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f20  0800fdbc  00011f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000115bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f6a2  00000000  00000000  000115ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3f  00000000  00000000  00030c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  000356d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143b  00000000  00000000  00037120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a52f  00000000  00000000  0003855b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022eee  00000000  00000000  00052a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da22  00000000  00000000  00075978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011339a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000744c  00000000  00000000  001133e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011a82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005bc 	.word	0x200005bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f38c 	.word	0x0800f38c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c0 	.word	0x200005c0
 80001dc:	0800f38c 	.word	0x0800f38c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000578:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800057c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000584:	2b03      	cmp	r3, #3
 8000586:	d027      	beq.n	80005d8 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d818      	bhi.n	80005d6 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	22b1      	movs	r2, #177	@ 0xb1
 80005a8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2201      	movs	r2, #1
 80005b8:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f8f5 	bl	80007ac <ifx_i2c_init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d105      	bne.n	80005d8 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2203      	movs	r2, #3
 80005d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80005d4:	e000      	b.n	80005d8 <ifx_i2c_open+0x68>
                break;
 80005d6:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 80005d8:	89fb      	ldrh	r3, [r7, #14]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b088      	sub	sp, #32
 80005e6:	af02      	add	r7, sp, #8
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80005f2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80005f6:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d122      	bne.n	8000648 <ifx_i2c_transceive+0x66>
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000608:	2b03      	cmp	r3, #3
 800060a:	d01d      	beq.n	8000648 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6a3a      	ldr	r2, [r7, #32]
 8000618:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f001 fb00 	bl	8001c2c <ifx_i2c_prl_transceive>
 800062c:	4603      	mov	r3, r0
 800062e:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000630:	8afb      	ldrh	r3, [r7, #22]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d108      	bne.n	8000648 <ifx_i2c_transceive+0x66>
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2203      	movs	r2, #3
 8000644:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000648:	8afb      	ldrh	r3, [r7, #22]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800065c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000660:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000668:	2b03      	cmp	r3, #3
 800066a:	d02a      	beq.n	80006c2 <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 800066c:	2300      	movs	r3, #0
 800066e:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000676:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2201      	movs	r2, #1
 800067e:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000682:	4912      	ldr	r1, [pc, #72]	@ (80006cc <ifx_i2c_close+0x78>)
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fa8f 	bl	8001ba8 <ifx_i2c_prl_close>
 800068a:	4603      	mov	r3, r0
 800068c:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000694:	d115      	bne.n	80006c2 <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800069c:	4618      	mov	r0, r3
 800069e:	f005 ff00 	bl	80064a2 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fe9a 	bl	80063e2 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fe94 	bl	80063e2 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2204      	movs	r2, #4
 80006be:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 80006c2:	89fb      	ldrh	r3, [r7, #14]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08000739 	.word	0x08000739

080006d0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	461a      	mov	r2, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	817b      	strh	r3, [r7, #10]
 80006e0:	4613      	mov	r3, r2
 80006e2:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 80006fa:	8979      	ldrh	r1, [r7, #10]
 80006fc:	4610      	mov	r0, r2
 80006fe:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	897a      	ldrh	r2, [r7, #10]
 8000704:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2204      	movs	r2, #4
 800070c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000716:	2b01      	cmp	r3, #1
 8000718:	d107      	bne.n	800072a <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 800071a:	897b      	ldrh	r3, [r7, #10]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d106      	bne.n	800072e <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2202      	movs	r2, #2
 8000724:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000728:	e001      	b.n	800072e <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 800072a:	bf00      	nop
 800072c:	e000      	b.n	8000730 <ifx_i2c_tl_event_handler+0x60>
            break;
 800072e:	bf00      	nop
    }
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	460b      	mov	r3, r1
 8000746:	817b      	strh	r3, [r7, #10]
 8000748:	4613      	mov	r3, r2
 800074a:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2204      	movs	r2, #4
 8000750:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 800075a:	2b01      	cmp	r3, #1
 800075c:	d112      	bne.n	8000784 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000764:	4618      	mov	r0, r3
 8000766:	f005 fe9c 	bl	80064a2 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fe36 	bl	80063e2 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 800077c:	4618      	mov	r0, r3
 800077e:	f005 fe30 	bl	80063e2 <pal_gpio_set_low>
            break;
 8000782:	e000      	b.n	8000786 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000784:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 800079c:	8979      	ldrh	r1, [r7, #10]
 800079e:	4610      	mov	r0, r2
 80007a0:	4798      	blx	r3
    }
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 80007b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007b8:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d004      	beq.n	80007ce <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d156      	bne.n	800087c <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80007d4:	2bb3      	cmp	r3, #179	@ 0xb3
 80007d6:	d048      	beq.n	800086a <ifx_i2c_init+0xbe>
 80007d8:	2bb3      	cmp	r3, #179	@ 0xb3
 80007da:	dc4d      	bgt.n	8000878 <ifx_i2c_init+0xcc>
 80007dc:	2bb1      	cmp	r3, #177	@ 0xb1
 80007de:	d002      	beq.n	80007e6 <ifx_i2c_init+0x3a>
 80007e0:	2bb2      	cmp	r3, #178	@ 0xb2
 80007e2:	d021      	beq.n	8000828 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 80007e4:	e048      	b.n	8000878 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fdf3 	bl	80063e2 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fded 	bl	80063e2 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	22b2      	movs	r2, #178	@ 0xb2
 800080c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000816:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4923      	ldr	r1, [pc, #140]	@ (80008ac <ifx_i2c_init+0x100>)
 800081e:	f006 f819 	bl	8006854 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
                break;
 8000826:	e028      	b.n	800087a <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 800082e:	2b00      	cmp	r3, #0
 8000830:	d105      	bne.n	800083e <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fdc2 	bl	80063c2 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000844:	4618      	mov	r0, r3
 8000846:	f005 fdbc 	bl	80063c2 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	22b3      	movs	r2, #179	@ 0xb3
 800084e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000858:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4913      	ldr	r1, [pc, #76]	@ (80008ac <ifx_i2c_init+0x100>)
 8000860:	f005 fff8 	bl	8006854 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000864:	2300      	movs	r3, #0
 8000866:	81fb      	strh	r3, [r7, #14]
                break;
 8000868:	e007      	b.n	800087a <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800086a:	4911      	ldr	r1, [pc, #68]	@ (80008b0 <ifx_i2c_init+0x104>)
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 f953 	bl	8001b18 <ifx_i2c_prl_init>
 8000872:	4603      	mov	r3, r0
 8000874:	81fb      	strh	r3, [r7, #14]
                break;
 8000876:	e000      	b.n	800087a <ifx_i2c_init+0xce>
                break;
 8000878:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 800087a:	e009      	b.n	8000890 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000884:	490a      	ldr	r1, [pc, #40]	@ (80008b0 <ifx_i2c_init+0x104>)
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f001 f946 	bl	8001b18 <ifx_i2c_prl_init>
 800088c:	4603      	mov	r3, r0
 800088e:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000896:	89f9      	ldrh	r1, [r7, #14]
 8000898:	2300      	movs	r3, #0
 800089a:	2200      	movs	r2, #0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff17 	bl	80006d0 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 80008a2:	89fb      	ldrh	r3, [r7, #14]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	080007ad 	.word	0x080007ad
 80008b0:	080006d1 	.word	0x080006d1

080008b4 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 80008c6:	4919      	ldr	r1, [pc, #100]	@ (800092c <ifx_i2c_dl_init+0x78>)
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fc37 	bl	800113c <ifx_i2c_pl_init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 80008d4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80008d8:	e024      	b.n	8000924 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2203      	movs	r2, #3
 80008ee:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2203      	movs	r2, #3
 80008f6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	08000cd1 	.word	0x08000cd1

08000930 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <ifx_i2c_dl_send_frame+0x1c>
 8000946:	887b      	ldrh	r3, [r7, #2]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800094c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000950:	e01a      	b.n	8000988 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2202      	movs	r2, #2
 8000956:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	220a      	movs	r2, #10
 8000976:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 800097a:	8879      	ldrh	r1, [r7, #2]
 800097c:	2300      	movs	r3, #0
 800097e:	2200      	movs	r2, #0
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f88a 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
 8000986:	4603      	mov	r3, r0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d002      	beq.n	80009a8 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 80009a2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80009a6:	e019      	b.n	80009dc <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2203      	movs	r2, #3
 80009ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 80009c0:	f005 fffd 	bl	80069be <pal_os_timer_get_time_in_milliseconds>
 80009c4:	4602      	mov	r2, r0
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <ifx_i2c_dl_receive_frame+0x54>)
 80009d0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 fc2a 	bl	800122e <ifx_i2c_pl_receive_frame>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0002bf20 	.word	0x0002bf20

080009e8 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	80fb      	strh	r3, [r7, #6]
 80009f4:	4613      	mov	r3, r2
 80009f6:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 80009f8:	797b      	ldrb	r3, [r7, #5]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	4053      	eors	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000a0e:	89bb      	ldrh	r3, [r7, #12]
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	4053      	eors	r3, r2
 8000a18:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000a1a:	897b      	ldrh	r3, [r7, #10]
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000a20:	897b      	ldrh	r3, [r7, #10]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	893b      	ldrh	r3, [r7, #8]
 8000a28:	4053      	eors	r3, r2
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	4053      	eors	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	4053      	eors	r3, r2
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4053      	eors	r3, r2
 8000a48:	b29b      	uxth	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	81fb      	strh	r3, [r7, #14]
 8000a6a:	e00d      	b.n	8000a88 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	89bb      	ldrh	r3, [r7, #12]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffb5 	bl	80009e8 <ifx_i2c_dl_calc_crc_byte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000a82:	89fb      	ldrh	r3, [r7, #14]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	89fa      	ldrh	r2, [r7, #14]
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3ed      	bcc.n	8000a6c <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000a90:	89bb      	ldrh	r3, [r7, #12]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	460b      	mov	r3, r1
 8000aae:	707b      	strb	r3, [r7, #1]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000aba:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d107      	bne.n	8000ad2 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000ad8:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000ada:	787b      	ldrb	r3, [r7, #1]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d105      	bne.n	8000aec <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000aea:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d108      	bne.n	8000b04 <ifx_i2c_dl_send_frame_internal+0x6a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000af8:	2b09      	cmp	r3, #9
 8000afa:	d103      	bne.n	8000b04 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000b02:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8000b04:	8afb      	ldrh	r3, [r7, #22]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	015b      	lsls	r3, r3, #5
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d022      	beq.n	8000b6a <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8000b24:	783b      	ldrb	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <ifx_i2c_dl_send_frame_internal+0x9a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00a      	beq.n	8000b4a <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8000b68:	e006      	b.n	8000b78 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	3301      	adds	r3, #1
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	3303      	adds	r3, #3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	6938      	ldr	r0, [r7, #16]
 8000b9a:	f7ff ff5c 	bl	8000a56 <ifx_i2c_dl_calc_crc>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8000ba2:	89fb      	ldrh	r3, [r7, #14]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	3303      	adds	r3, #3
 8000bac:	4619      	mov	r1, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	461a      	mov	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	89fa      	ldrh	r2, [r7, #14]
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	3305      	adds	r3, #5
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	6939      	ldr	r1, [r7, #16]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 fb03 	bl	80011dc <ifx_i2c_pl_send_frame>
 8000bd6:	4603      	mov	r3, r0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2205      	movs	r2, #5
 8000c04:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff43 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
 8000c14:	4603      	mov	r3, r0
 8000c16:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8000c18:	89fb      	ldrh	r3, [r7, #14]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8000c30:	f005 fec5 	bl	80069be <pal_os_timer_get_time_in_milliseconds>
 8000c34:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d205      	bcs.n	8000c5a <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <ifx_i2c_dl_resend_frame+0xa8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d82c      	bhi.n	8000cbc <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d109      	bne.n	8000c80 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffb3 	bl	8000be0 <ifx_i2c_dl_resync>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	82fb      	strh	r3, [r7, #22]
 8000c7e:	e015      	b.n	8000cac <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2202      	movs	r2, #2
 8000c94:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef9 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8000cac:	8afb      	ldrh	r3, [r7, #22]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8000cba:	e003      	b.n	8000cc4 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0002bf1f 	.word	0x0002bf1f

08000cd0 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	460b      	mov	r3, r1
 8000cde:	817b      	strh	r3, [r7, #10]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8000d08:	897b      	ldrh	r3, [r7, #10]
 8000d0a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000d0e:	d108      	bne.n	8000d22 <ifx_i2c_pl_event_handler+0x52>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d003      	beq.n	8000d22 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	f200 81ed 	bhi.w	800110a <ifx_i2c_pl_event_handler+0x43a>
 8000d30:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <ifx_i2c_pl_event_handler+0x68>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d65 	.word	0x08000d65
 8000d3c:	08000d8b 	.word	0x08000d8b
 8000d40:	08000dcd 	.word	0x08000dcd
 8000d44:	0800101f 	.word	0x0800101f
 8000d48:	080010a1 	.word	0x080010a1
 8000d4c:	08001087 	.word	0x08001087
 8000d50:	0800110b 	.word	0x0800110b
 8000d54:	080010b9 	.word	0x080010b9
 8000d58:	0800100b 	.word	0x0800100b
 8000d5c:	08000e79 	.word	0x08000e79
 8000d60:	08000f49 	.word	0x08000f49
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <ifx_i2c_pl_event_handler+0x9e>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <ifx_i2c_pl_event_handler+0xa0>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000d7c:	7cfb      	ldrb	r3, [r7, #19]
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	2200      	movs	r2, #0
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	47a0      	blx	r4
            }
            break;
 8000d88:	e1cf      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8000d8a:	897b      	ldrh	r3, [r7, #10]
 8000d8c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000d90:	d104      	bne.n	8000d9c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2205      	movs	r2, #5
 8000d96:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000d9a:	e1c6      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000d9c:	f005 fe0f 	bl	80069be <pal_os_timer_get_time_in_milliseconds>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2203      	movs	r2, #3
 8000dac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 fa3c 	bl	800122e <ifx_i2c_pl_receive_frame>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8000dc4:	e1b1      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	773b      	strb	r3, [r7, #28]
            break;
 8000dca:	e1ae      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8000dcc:	897b      	ldrh	r3, [r7, #10]
 8000dce:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000dd2:	d104      	bne.n	8000dde <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ddc:	e1a5      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8000dde:	893b      	ldrh	r3, [r7, #8]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d804      	bhi.n	8000dee <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2206      	movs	r2, #6
 8000de8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000dec:	e19d      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8000df4:	7d7b      	ldrb	r3, [r7, #21]
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8000dfa:	7d7b      	ldrb	r3, [r7, #21]
 8000dfc:	115b      	asrs	r3, r3, #5
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8000e0e:	7d7b      	ldrb	r3, [r7, #21]
 8000e10:	109b      	asrs	r3, r3, #2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3302      	adds	r3, #2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8000e32:	893b      	ldrh	r3, [r7, #8]
 8000e34:	3b02      	subs	r3, #2
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	893b      	ldrh	r3, [r7, #8]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	440b      	add	r3, r1
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8000e52:	893b      	ldrh	r3, [r7, #8]
 8000e54:	3b02      	subs	r3, #2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fdfb 	bl	8000a56 <ifx_i2c_dl_calc_crc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8000e64:	7d3b      	ldrb	r3, [r7, #20]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <ifx_i2c_pl_event_handler+0x19e>
 8000e6a:	220b      	movs	r2, #11
 8000e6c:	e000      	b.n	8000e70 <ifx_i2c_pl_event_handler+0x1a0>
 8000e6e:	220a      	movs	r2, #10
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8000e76:	e158      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000e78:	8b3a      	ldrh	r2, [r7, #24]
 8000e7a:	8afb      	ldrh	r3, [r7, #22]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d10d      	bne.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
 8000e80:	8b7b      	ldrh	r3, [r7, #26]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00a      	beq.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000e86:	893a      	ldrh	r2, [r7, #8]
 8000e88:	8b7b      	ldrh	r3, [r7, #26]
 8000e8a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d105      	bne.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000e90:	7f7b      	ldrb	r3, [r7, #29]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d002      	beq.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
 8000e96:	7f7b      	ldrb	r3, [r7, #29]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d104      	bne.n	8000ea6 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ea4:	e141      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8000ea6:	7ffa      	ldrb	r2, [r7, #31]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d00c      	beq.n	8000ed2 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2209      	movs	r2, #9
 8000ebc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff fde5 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
                    break;
 8000ed0:	e12b      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000ed8:	7fba      	ldrb	r2, [r7, #30]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d004      	beq.n	8000ee8 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2209      	movs	r2, #9
 8000ee2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ee6:	e120      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8000ee8:	7f7b      	ldrb	r3, [r7, #29]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ef6:	e118      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000f14:	893a      	ldrh	r2, [r7, #8]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00d fcc0 	bl	800e89e <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	893a      	ldrh	r2, [r7, #8]
 8000f22:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2204      	movs	r2, #4
 8000f32:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fdaa 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8000f46:	e0f0      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7f7b      	ldrb	r3, [r7, #29]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d004      	beq.n	8000f6a <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2209      	movs	r2, #9
 8000f64:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f68:	e0df      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 8000f6a:	8b3a      	ldrh	r2, [r7, #24]
 8000f6c:	8afb      	ldrh	r3, [r7, #22]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d004      	beq.n	8000f7c <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2205      	movs	r2, #5
 8000f76:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f7a:	e0d6      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8000f7c:	893b      	ldrh	r3, [r7, #8]
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d802      	bhi.n	8000f88 <ifx_i2c_pl_event_handler+0x2b8>
 8000f82:	8b7b      	ldrh	r3, [r7, #26]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2209      	movs	r2, #9
 8000f8c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f90:	e0cb      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8000f92:	7f7b      	ldrb	r3, [r7, #29]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d110      	bne.n	8000fba <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 8000fb8:	e0b7      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d108      	bne.n	8000fd2 <ifx_i2c_pl_event_handler+0x302>
 8000fc0:	7f7b      	ldrb	r3, [r7, #29]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d005      	beq.n	8000fd2 <ifx_i2c_pl_event_handler+0x302>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000fcc:	7fba      	ldrb	r2, [r7, #30]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d004      	beq.n	8000fdc <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2209      	movs	r2, #9
 8000fd6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000fda:	e0a6      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8000fdc:	7f7b      	ldrb	r3, [r7, #29]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d104      	bne.n	8000fec <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000fea:	e09e      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	2102      	movs	r1, #2
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	47a0      	blx	r4
            }
            break;
 8001008:	e08f      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2203      	movs	r2, #3
 800100e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001012:	2300      	movs	r3, #0
 8001014:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f909 	bl	800122e <ifx_i2c_pl_receive_frame>
            }
            break;
 800101c:	e085      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001024:	d104      	bne.n	8001030 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2205      	movs	r2, #5
 800102a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800102e:	e07c      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001038:	2300      	movs	r3, #0
 800103a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00f      	beq.n	8001066 <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001052:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800105a:	3b05      	subs	r3, #5
 800105c:	b29b      	uxth	r3, r3
 800105e:	2104      	movs	r1, #4
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001064:	e061      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001072:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800107a:	3b05      	subs	r3, #5
 800107c:	b29b      	uxth	r3, r3
 800107e:	2106      	movs	r1, #6
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	47a0      	blx	r4
            break;
 8001084:	e051      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2202      	movs	r2, #2
 800108a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800108e:	2300      	movs	r3, #0
 8001090:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001092:	2300      	movs	r3, #0
 8001094:	2201      	movs	r2, #1
 8001096:	2100      	movs	r1, #0
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff fcfe 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800109e:	e044      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 80010a0:	2100      	movs	r1, #0
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff fdbe 	bl	8000c24 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d03a      	beq.n	8001128 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 80010b6:	e037      	b.n	8001128 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10c      	bne.n	80010ee <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	47a0      	blx	r4
 80010ec:	e00a      	b.n	8001104 <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fd76 	bl	8000be0 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2208      	movs	r2, #8
 80010f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 8001104:	2300      	movs	r3, #0
 8001106:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001108:	e00f      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001118:	2300      	movs	r3, #0
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	47a0      	blx	r4
                continue_state_machine = FALSE;
 8001122:	2300      	movs	r3, #0
 8001124:	773b      	strb	r3, [r7, #28]
                break;
 8001126:	e000      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            break;
 8001128:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 800112a:	7f3b      	ldrb	r3, [r7, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	f43f adeb 	beq.w	8000d08 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	@ 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}

0800113c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	22bb      	movs	r2, #187	@ 0xbb
 800115a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800116a:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001172:	4a19      	ldr	r2, [pc, #100]	@ (80011d8 <ifx_i2c_pl_init+0x9c>)
 8001174:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	22c8      	movs	r2, #200	@ 0xc8
 800117a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10b      	bne.n	80011a0 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800118e:	4618      	mov	r0, r3
 8001190:	f005 f97c 	bl	800648c <pal_i2c_init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800119a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800119e:	e016      	b.n	80011ce <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2299      	movs	r2, #153	@ 0x99
 80011ae:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2205      	movs	r2, #5
 80011b6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80011ba:	e003      	b.n	80011c4 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa84 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	080019bd 	.word	0x080019bd

080011dc <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d007      	beq.n	8001204 <ifx_i2c_pl_send_frame+0x28>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d002      	beq.n	8001204 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80011fe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001202:	e010      	b.n	8001226 <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	88fa      	ldrh	r2, [r7, #6]
 8001218:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800121c:	2100      	movs	r1, #0
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 fa58 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800123c:	2b01      	cmp	r3, #1
 800123e:	d007      	beq.n	8001250 <ifx_i2c_pl_receive_frame+0x22>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001246:	2b02      	cmp	r3, #2
 8001248:	d002      	beq.n	8001250 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800124a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800124e:	e008      	b.n	8001262 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fa3a 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
 8001276:	4613      	mov	r3, r2
 8001278:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	883a      	ldrh	r2, [r7, #0]
 800128e:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	22c8      	movs	r2, #200	@ 0xc8
 800129e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80012bc:	461a      	mov	r2, r3
 80012be:	f005 f8fb 	bl	80064b8 <pal_i2c_write>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	72fb      	strb	r3, [r7, #11]
 80012d8:	4613      	mov	r3, r2
 80012da:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	7afa      	ldrb	r2, [r7, #11]
 80012e0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80012ea:	3301      	adds	r3, #1
 80012ec:	893a      	ldrh	r2, [r7, #8]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d fad4 	bl	800e89e <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80012f6:	893b      	ldrh	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2202      	movs	r2, #2
 8001306:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	22c8      	movs	r2, #200	@ 0xc8
 800130e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800132c:	461a      	mov	r2, r3
 800132e:	f005 f8c3 	bl	80064b8 <pal_i2c_write>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001342:	2204      	movs	r2, #4
 8001344:	2182      	movs	r1, #130	@ 0x82
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff8f 	bl	800126a <ifx_i2c_pl_read_register>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f005 f916 	bl	80065b0 <pal_i2c_set_bitrate>
 8001384:	4603      	mov	r3, r0
 8001386:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d019      	beq.n	80013cc <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	b291      	uxth	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4908      	ldr	r1, [pc, #32]	@ (80013dc <ifx_i2c_pl_set_bit_rate+0x88>)
 80013ba:	f005 fa4b 	bl	8006854 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 80013be:	2301      	movs	r3, #1
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	e005      	b.n	80013d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 80013c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80013c8:	81fb      	strh	r3, [r7, #14]
 80013ca:	e001      	b.n	80013d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 80013d0:	89fb      	ldrh	r3, [r7, #14]

}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	080013e1 	.word	0x080013e1

080013e0 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	@ 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80013e8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80013ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	733b      	strb	r3, [r7, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001406:	b2db      	uxtb	r3, r3
 8001408:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800141e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001420:	d031      	beq.n	8001486 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001422:	2bbb      	cmp	r3, #187	@ 0xbb
 8001424:	f300 8145 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001428:	2baa      	cmp	r3, #170	@ 0xaa
 800142a:	f000 812d 	beq.w	8001688 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 800142e:	2baa      	cmp	r3, #170	@ 0xaa
 8001430:	f300 813f 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001434:	2b88      	cmp	r3, #136	@ 0x88
 8001436:	f000 8103 	beq.w	8001640 <ifx_i2c_pl_negotiation_event_handler+0x260>
 800143a:	2b88      	cmp	r3, #136	@ 0x88
 800143c:	f300 8139 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001440:	2b77      	cmp	r3, #119	@ 0x77
 8001442:	f000 80c6 	beq.w	80015d2 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001446:	2b77      	cmp	r3, #119	@ 0x77
 8001448:	f300 8133 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800144c:	2b66      	cmp	r3, #102	@ 0x66
 800144e:	f000 809d 	beq.w	800158c <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001452:	2b66      	cmp	r3, #102	@ 0x66
 8001454:	f300 812d 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001458:	2b55      	cmp	r3, #85	@ 0x55
 800145a:	f000 808d 	beq.w	8001578 <ifx_i2c_pl_negotiation_event_handler+0x198>
 800145e:	2b55      	cmp	r3, #85	@ 0x55
 8001460:	f300 8127 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001464:	2b44      	cmp	r3, #68	@ 0x44
 8001466:	d040      	beq.n	80014ea <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001468:	2b44      	cmp	r3, #68	@ 0x44
 800146a:	f300 8122 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800146e:	2b33      	cmp	r3, #51	@ 0x33
 8001470:	d031      	beq.n	80014d6 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001472:	2b33      	cmp	r3, #51	@ 0x33
 8001474:	f300 811d 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001478:	2b11      	cmp	r3, #17
 800147a:	f000 80cb 	beq.w	8001614 <ifx_i2c_pl_negotiation_event_handler+0x234>
 800147e:	2b22      	cmp	r3, #34	@ 0x22
 8001480:	f000 80d4 	beq.w	800162c <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001484:	e115      	b.n	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001486:	2164      	movs	r1, #100	@ 0x64
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff63 	bl	8001354 <ifx_i2c_pl_set_bit_rate>
 800148e:	4603      	mov	r3, r0
 8001490:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001494:	2b00      	cmp	r3, #0
 8001496:	d107      	bne.n	80014a8 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2233      	movs	r2, #51	@ 0x33
 800149c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80014a6:	e106      	b.n	80016b6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 80014a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014aa:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80014ae:	f040 8102 	bne.w	80016b6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	22aa      	movs	r2, #170	@ 0xaa
 80014b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80014c8:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4980      	ldr	r1, [pc, #512]	@ (80016d0 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 80014d0:	f005 f9c0 	bl	8006854 <pal_os_event_register_callback_oneshot>
            break;
 80014d4:	e0ef      	b.n	80016b6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2244      	movs	r2, #68	@ 0x44
 80014da:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80014de:	2204      	movs	r2, #4
 80014e0:	2184      	movs	r1, #132	@ 0x84
 80014e2:	69b8      	ldr	r0, [r7, #24]
 80014e4:	f7ff fec1 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 80014e8:	e0e8      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 800150c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001510:	d911      	bls.n	8001536 <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001512:	8abb      	ldrh	r3, [r7, #20]
 8001514:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001518:	d80d      	bhi.n	8001536 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 800151a:	2304      	movs	r3, #4
 800151c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2255      	movs	r2, #85	@ 0x55
 8001522:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	2202      	movs	r2, #2
 800152c:	2189      	movs	r1, #137	@ 0x89
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f7ff fecb 	bl	80012ca <ifx_i2c_pl_write_register>
 8001534:	e01f      	b.n	8001576 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 800153c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001540:	d811      	bhi.n	8001566 <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001542:	8abb      	ldrh	r3, [r7, #20]
 8001544:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001548:	d90d      	bls.n	8001566 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 800154a:	2303      	movs	r3, #3
 800154c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2255      	movs	r2, #85	@ 0x55
 8001552:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	2202      	movs	r2, #2
 800155c:	2189      	movs	r1, #137	@ 0x89
 800155e:	69b8      	ldr	r0, [r7, #24]
 8001560:	f7ff feb3 	bl	80012ca <ifx_i2c_pl_write_register>
 8001564:	e007      	b.n	8001576 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2266      	movs	r2, #102	@ 0x66
 800156a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001574:	e0a2      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001576:	e0a1      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2266      	movs	r2, #102	@ 0x66
 800157c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001580:	2204      	movs	r2, #4
 8001582:	2184      	movs	r1, #132	@ 0x84
 8001584:	69b8      	ldr	r0, [r7, #24]
 8001586:	f7ff fe70 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 800158a:	e097      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80015aa:	8aba      	ldrh	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d208      	bcs.n	80015c2 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	22aa      	movs	r2, #170	@ 0xaa
 80015bc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80015c0:	e003      	b.n	80015ca <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2277      	movs	r2, #119	@ 0x77
 80015c6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80015d0:	e074      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff feba 	bl	8001354 <ifx_i2c_pl_set_bit_rate>
 80015e0:	4603      	mov	r3, r0
 80015e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 80015e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2211      	movs	r2, #17
 80015ee:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80015f8:	e05f      	b.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 80015fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015fc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001600:	d15b      	bne.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	22aa      	movs	r2, #170	@ 0xaa
 8001606:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001612:	e052      	b.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2222      	movs	r2, #34	@ 0x22
 8001618:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2202      	movs	r2, #2
 8001622:	2181      	movs	r1, #129	@ 0x81
 8001624:	69b8      	ldr	r0, [r7, #24]
 8001626:	f7ff fe50 	bl	80012ca <ifx_i2c_pl_write_register>
            break;
 800162a:	e047      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2288      	movs	r2, #136	@ 0x88
 8001630:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001634:	2202      	movs	r2, #2
 8001636:	2181      	movs	r1, #129	@ 0x81
 8001638:	69b8      	ldr	r0, [r7, #24]
 800163a:	f7ff fe16 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 800163e:	e03d      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	22aa      	movs	r2, #170	@ 0xaa
 8001644:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001666:	8afa      	ldrh	r2, [r7, #22]
 8001668:	429a      	cmp	r2, r3
 800166a:	d805      	bhi.n	8001678 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	8afa      	ldrh	r2, [r7, #22]
 8001670:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001674:	2300      	movs	r3, #0
 8001676:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001686:	e019      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001688:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001696:	e003      	b.n	80016a0 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80016a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016a8:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	69b8      	ldr	r0, [r7, #24]
 80016ae:	47a0      	blx	r4
            break;
 80016b0:	e004      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 80016b2:	bf00      	nop
 80016b4:	e002      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 80016ba:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 80016bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f aea6 	bne.w	8001412 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	372c      	adds	r7, #44	@ 0x2c
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	080013e1 	.word	0x080013e1

080016d4 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80016f4:	8879      	ldrh	r1, [r7, #2]
 80016f6:	2300      	movs	r3, #0
 80016f8:	2200      	movs	r2, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80016fe:	e0f0      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001706:	3b01      	subs	r3, #1
 8001708:	2b04      	cmp	r3, #4
 800170a:	f200 80dc 	bhi.w	80018c6 <ifx_i2c_pl_frame_event_handler+0x1f2>
 800170e:	a201      	add	r2, pc, #4	@ (adr r2, 8001714 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001731 	.word	0x08001731
 8001718:	08001739 	.word	0x08001739
 800171c:	08001757 	.word	0x08001757
 8001720:	080018a5 	.word	0x080018a5
 8001724:	08001729 	.word	0x08001729
                ifx_i2c_pl_soft_reset(p_ctx);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f983 	bl	8001a34 <ifx_i2c_pl_soft_reset>
            break;
 800172e:	e0d8      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fe55 	bl	80013e0 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001736:	e0d4      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001746:	2b02      	cmp	r3, #2
 8001748:	d105      	bne.n	8001756 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800174a:	2204      	movs	r2, #4
 800174c:	2182      	movs	r1, #130	@ 0x82
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fd8b 	bl	800126a <ifx_i2c_pl_read_register>
                    break;
 8001754:	e0c5      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800175c:	2b02      	cmp	r3, #2
 800175e:	d159      	bne.n	8001814 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d052      	beq.n	8001814 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001786:	8a7b      	ldrh	r3, [r7, #18]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <ifx_i2c_pl_frame_event_handler+0xda>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001792:	8a7a      	ldrh	r2, [r7, #18]
 8001794:	429a      	cmp	r2, r3
 8001796:	d80a      	bhi.n	80017ae <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2204      	movs	r2, #4
 800179c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 80017a0:	8a7b      	ldrh	r3, [r7, #18]
 80017a2:	461a      	mov	r2, r3
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fd5f 	bl	800126a <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80017ac:	e079      	b.n	80018a2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 80017ae:	f005 f906 	bl	80069be <pal_os_timer_get_time_in_milliseconds>
 80017b2:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d205      	bcs.n	80017d8 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d209      	bcs.n	80017f8 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80017ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	493e      	ldr	r1, [pc, #248]	@ (80018ec <ifx_i2c_pl_frame_event_handler+0x218>)
 80017f2:	f005 f82f 	bl	8006854 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80017f6:	e054      	b.n	80018a2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001812:	e046      	b.n	80018a2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10e      	bne.n	800183c <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd48 	bl	80012ca <ifx_i2c_pl_write_register>
            break;
 800183a:	e052      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 800183c:	f005 f8bf 	bl	80069be <pal_os_timer_get_time_in_milliseconds>
 8001840:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	429a      	cmp	r2, r3
 8001858:	d205      	bcs.n	8001866 <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	429a      	cmp	r2, r3
 8001870:	d209      	bcs.n	8001886 <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001878:	f241 3388 	movw	r3, #5000	@ 0x1388
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	491b      	ldr	r1, [pc, #108]	@ (80018ec <ifx_i2c_pl_frame_event_handler+0x218>)
 8001880:	f004 ffe8 	bl	8006854 <pal_os_event_register_callback_oneshot>
            break;
 8001884:	e02d      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001894:	2300      	movs	r3, #0
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	47a0      	blx	r4
            break;
 80018a0:	e01f      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
 80018a2:	e01e      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80018be:	2100      	movs	r1, #0
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	47a0      	blx	r4
            break;
 80018c4:	e00d      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	47a0      	blx	r4
            break;
 80018e0:	bf00      	nop
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	0800133b 	.word	0x0800133b

080018f0 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10c      	bne.n	8001920 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001918:	461a      	mov	r2, r3
 800191a:	f004 fdcd 	bl	80064b8 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 800191e:	e010      	b.n	8001942 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001926:	2b02      	cmp	r3, #2
 8001928:	d10b      	bne.n	8001942 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 800193c:	461a      	mov	r2, r3
 800193e:	f004 fdf9 	bl	8006534 <pal_i2c_read>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800195c:	2b01      	cmp	r3, #1
 800195e:	d11f      	bne.n	80019a0 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001966:	2b01      	cmp	r3, #1
 8001968:	d110      	bne.n	800198c <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001984:	461a      	mov	r2, r3
 8001986:	f004 fdd5 	bl	8006534 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800198a:	e012      	b.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001992:	2b02      	cmp	r3, #2
 8001994:	d10d      	bne.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001996:	2100      	movs	r1, #0
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe9b 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
}
 800199e:	e008      	b.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d103      	bne.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 80019aa:	2100      	movs	r1, #0
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fe91 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60fb      	str	r3, [r7, #12]
    switch (event)
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01e      	beq.n	8001a10 <ifx_i2c_pl_pal_event_handler+0x54>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db25      	blt.n	8001a22 <ifx_i2c_pl_pal_event_handler+0x66>
 80019d6:	3b01      	subs	r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d822      	bhi.n	8001a22 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	b291      	uxth	r1, r2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	490b      	ldr	r1, [pc, #44]	@ (8001a2c <ifx_i2c_pl_pal_event_handler+0x70>)
 80019fe:	f004 ff29 	bl	8006854 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001a02:	e00f      	b.n	8001a24 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001a04:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fe63 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001a0e:	e009      	b.n	8001a24 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001a16:	2332      	movs	r3, #50	@ 0x32
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4905      	ldr	r1, [pc, #20]	@ (8001a30 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001a1c:	f004 ff1a 	bl	8006854 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001a20:	e000      	b.n	8001a24 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001a22:	bf00      	nop
    }
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	080018f1 	.word	0x080018f1
 8001a30:	0800194b 	.word	0x0800194b

08001a34 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001a46:	3b99      	subs	r3, #153	@ 0x99
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d85e      	bhi.n	8001b0a <ifx_i2c_pl_soft_reset+0xd6>
 8001a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <ifx_i2c_pl_soft_reset+0x20>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a81 	.word	0x08001a81
 8001a58:	08001b0b 	.word	0x08001b0b
 8001a5c:	08001b0b 	.word	0x08001b0b
 8001a60:	08001b0b 	.word	0x08001b0b
 8001a64:	08001b0b 	.word	0x08001b0b
 8001a68:	08001b0b 	.word	0x08001b0b
 8001a6c:	08001b0b 	.word	0x08001b0b
 8001a70:	08001b0b 	.word	0x08001b0b
 8001a74:	08001af9 	.word	0x08001af9
 8001a78:	08001a95 	.word	0x08001a95
 8001a7c:	08001add 	.word	0x08001add
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	22a2      	movs	r2, #162	@ 0xa2
 8001a84:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001a88:	2204      	movs	r2, #4
 8001a8a:	2182      	movs	r1, #130	@ 0x82
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fbec 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 8001a92:	e03b      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d10b      	bne.n	8001ac8 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	22a3      	movs	r2, #163	@ 0xa3
 8001ab4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2202      	movs	r2, #2
 8001abe:	2188      	movs	r1, #136	@ 0x88
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fc02 	bl	80012ca <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001ac6:	e021      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001ad0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fdfd 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001ada:	e017      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22a1      	movs	r2, #161	@ 0xa1
 8001ae0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001aea:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4908      	ldr	r1, [pc, #32]	@ (8001b14 <ifx_i2c_pl_soft_reset+0xe0>)
 8001af2:	f004 feaf 	bl	8006854 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001af6:	e009      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001b00:	2100      	movs	r1, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fde6 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001b08:	e000      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8001b0a:	bf00      	nop
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08001a35 	.word	0x08001a35

08001b18 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001b22:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001b26:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8001b30:	491c      	ldr	r1, [pc, #112]	@ (8001ba4 <ifx_i2c_prl_init+0x8c>)
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f001 faa0 	bl	8003078 <ifx_i2c_tl_init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d12b      	bne.n	8001b96 <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d104      	bne.n	8001b58 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001b56:	e003      	b.n	8001b60 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2211      	movs	r2, #17
 8001b84:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2211      	movs	r2, #17
 8001b8c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8001b90:	2300      	movs	r3, #0
 8001b92:	81fb      	strh	r3, [r7, #14]
 8001b94:	e000      	b.n	8001b98 <ifx_i2c_prl_init+0x80>
            break;
 8001b96:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8001b98:	89fb      	ldrh	r3, [r7, #14]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	08002721 	.word	0x08002721

08001ba8 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001bb2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001bb6:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d12e      	bne.n	8001c20 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001bce:	2b33      	cmp	r3, #51	@ 0x33
 8001bd0:	d109      	bne.n	8001be6 <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8001be0:	2300      	movs	r3, #0
 8001be2:	81fb      	strh	r3, [r7, #14]
            break;
 8001be4:	e01d      	b.n	8001c22 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d118      	bne.n	8001c22 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001bf6:	2b22      	cmp	r3, #34	@ 0x22
 8001bf8:	d113      	bne.n	8001c22 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001c10:	2301      	movs	r3, #1
 8001c12:	2100      	movs	r1, #0
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fd83 	bl	8002720 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	81fb      	strh	r3, [r7, #14]
            break;
 8001c1e:	e000      	b.n	8001c22 <ifx_i2c_prl_close+0x7a>
            break;
 8001c20:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8001c22:	89fb      	ldrh	r3, [r7, #14]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}

08001c2c <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001c3c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001c40:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05a      	beq.n	8001cfe <ifx_i2c_prl_transceive+0xd2>
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d057      	beq.n	8001cfe <ifx_i2c_prl_transceive+0xd2>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d152      	bne.n	8001cfe <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001c5e:	2b11      	cmp	r3, #17
 8001c60:	d10d      	bne.n	8001c7e <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d108      	bne.n	8001c7e <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8001c7c:	e003      	b.n	8001c86 <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d006      	beq.n	8001cb0 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001ca8:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d103      	bne.n	8001cb8 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cb6:	e003      	b.n	8001cc0 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	1d1a      	adds	r2, r3, #4
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a3a      	ldr	r2, [r7, #32]
 8001cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2211      	movs	r2, #17
 8001cea:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fd13 	bl	8002720 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 8001cfe:	8afb      	ldrh	r3, [r7, #22]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b09e      	sub	sp, #120	@ 0x78
 8001d0c:	af06      	add	r7, sp, #24
 8001d0e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001d10:	f240 1307 	movw	r3, #263	@ 0x107
 8001d14:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <ifx_i2c_prl_prf+0xa4>)
 8001d1a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001d1e:	461d      	mov	r5, r3
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f107 020a 	add.w	r2, r7, #10
 8001d34:	f107 010c 	add.w	r1, r7, #12
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fcc5 	bl	80066c8 <pal_os_datastore_read>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8001d44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001d4c:	f240 1307 	movw	r3, #263	@ 0x107
 8001d50:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8001d54:	e024      	b.n	8001da0 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001d56:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001d60:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001d64:	f107 010c 	add.w	r1, r7, #12
 8001d68:	2528      	movs	r5, #40	@ 0x28
 8001d6a:	9504      	str	r5, [sp, #16]
 8001d6c:	9203      	str	r2, [sp, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	9202      	str	r2, [sp, #8]
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2310      	movs	r3, #16
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f004 fab8 	bl	80062f2 <pal_crypt_tls_prf_sha256>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001d88:	f240 1307 	movw	r3, #263	@ 0x107
 8001d8c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00c fd3a 	bl	800e814 <memset>

    } while (FALSE);
    return (return_status);
 8001da0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3760      	adds	r7, #96	@ 0x60
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	0800f3a4 	.word	0x0800f3a4

08001db0 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	7a7a      	ldrb	r2, [r7, #9]
 8001dc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	33a1      	adds	r3, #161	@ 0xa1
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f8ec 	bl	8005fb0 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	33a6      	adds	r3, #166	@ 0xa6
 8001de8:	897a      	ldrh	r2, [r7, #10]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f8c8 	bl	8005f82 <optiga_common_set_uint16>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b08e      	sub	sp, #56	@ 0x38
 8001dfe:	af06      	add	r7, sp, #24
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001e0a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e0e:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8001e10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e14:	88f9      	ldrh	r1, [r7, #6]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff ffc9 	bl	8001db0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3378      	adds	r3, #120	@ 0x78
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f8be 	bl	8005fb0 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8001e3e:	88f9      	ldrh	r1, [r7, #6]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	9205      	str	r2, [sp, #20]
 8001e44:	2208      	movs	r2, #8
 8001e46:	9204      	str	r2, [sp, #16]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	9203      	str	r2, [sp, #12]
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2308      	movs	r3, #8
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f004 fa6d 	bl	800633e <pal_crypt_encrypt_aes128_ccm>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	83fb      	strh	r3, [r7, #30]
 8001e6e:	e000      	b.n	8001e72 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8001e70:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001e72:	8bfb      	ldrh	r3, [r7, #30]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	@ 0x38
 8001e80:	af06      	add	r7, sp, #24
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001e8c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e90:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8001e92:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e96:	88f9      	ldrh	r1, [r7, #6]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff ff88 	bl	8001db0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8001ea0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ea4:	3358      	adds	r3, #88	@ 0x58
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 f87a 	bl	8005fb0 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 8001ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ec6:	3358      	adds	r3, #88	@ 0x58
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ed2:	9205      	str	r2, [sp, #20]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	9204      	str	r2, [sp, #16]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	9203      	str	r2, [sp, #12]
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2308      	movs	r3, #8
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4603      	mov	r3, r0
 8001eea:	460a      	mov	r2, r1
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f004 fa46 	bl	8006380 <pal_crypt_decrypt_aes128_ccm>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001efa:	2300      	movs	r3, #0
 8001efc:	83fb      	strh	r3, [r7, #30]
 8001efe:	e000      	b.n	8001f02 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8001f00:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001f02:	8bfb      	ldrh	r3, [r7, #30]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8001f14:	2300      	movs	r3, #0
 8001f16:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d134      	bne.n	8001f94 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3354      	adds	r3, #84	@ 0x54
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 f8a9 	bl	80030d4 <ifx_i2c_tl_transceive>
 8001f82:	4603      	mov	r3, r0
 8001f84:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	e00d      	b.n	8001fb0 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8001fae:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b08a      	sub	sp, #40	@ 0x28
 8001fbe:	af04      	add	r7, sp, #16
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001fc4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001fc8:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 8001fd4:	2b55      	cmp	r3, #85	@ 0x55
 8001fd6:	f000 8178 	beq.w	80022ca <ifx_i2c_prl_do_handshake+0x310>
 8001fda:	2b55      	cmp	r3, #85	@ 0x55
 8001fdc:	f300 817f 	bgt.w	80022de <ifx_i2c_prl_do_handshake+0x324>
 8001fe0:	2b44      	cmp	r3, #68	@ 0x44
 8001fe2:	f000 8100 	beq.w	80021e6 <ifx_i2c_prl_do_handshake+0x22c>
 8001fe6:	2b44      	cmp	r3, #68	@ 0x44
 8001fe8:	f300 8179 	bgt.w	80022de <ifx_i2c_prl_do_handshake+0x324>
 8001fec:	2b33      	cmp	r3, #51	@ 0x33
 8001fee:	f000 8095 	beq.w	800211c <ifx_i2c_prl_do_handshake+0x162>
 8001ff2:	2b33      	cmp	r3, #51	@ 0x33
 8001ff4:	f300 8173 	bgt.w	80022de <ifx_i2c_prl_do_handshake+0x324>
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d002      	beq.n	8002002 <ifx_i2c_prl_do_handshake+0x48>
 8001ffc:	2b22      	cmp	r3, #34	@ 0x22
 8001ffe:	d034      	beq.n	800206a <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 8002000:	e16d      	b.n	80022de <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2226      	movs	r2, #38	@ 0x26
 8002026:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3354      	adds	r3, #84	@ 0x54
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	2202      	movs	r2, #2
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f001 f847 	bl	80030d4 <ifx_i2c_tl_transceive>
 8002046:	4603      	mov	r3, r0
 8002048:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800204a:	8afb      	ldrh	r3, [r7, #22]
 800204c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002050:	d106      	bne.n	8002060 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2255      	movs	r2, #85	@ 0x55
 8002056:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800205a:	2301      	movs	r3, #1
 800205c:	613b      	str	r3, [r7, #16]
                    break;
 800205e:	e13f      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2222      	movs	r2, #34	@ 0x22
 8002064:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002068:	e13a      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800206a:	2301      	movs	r3, #1
 800206c:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800208c:	2b01      	cmp	r3, #1
 800208e:	d109      	bne.n	80020a4 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002090:	f240 1307 	movw	r3, #263	@ 0x107
 8002094:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	22ff      	movs	r2, #255	@ 0xff
 800209a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
                    break;
 80020a2:	e11d      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80020aa:	2b26      	cmp	r3, #38	@ 0x26
 80020ac:	d108      	bne.n	80020c0 <ifx_i2c_prl_do_handshake+0x106>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d004      	beq.n	80020ca <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2255      	movs	r2, #85	@ 0x55
 80020c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80020c8:	e10a      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3322      	adds	r3, #34	@ 0x22
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 ff8f 	bl	8005ff2 <optiga_common_get_uint32>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3302      	adds	r3, #2
 80020ec:	2220      	movs	r2, #32
 80020ee:	4619      	mov	r1, r3
 80020f0:	f00c fbd5 	bl	800e89e <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fe07 	bl	8001d08 <ifx_i2c_prl_prf>
 80020fa:	4603      	mov	r3, r0
 80020fc:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80020fe:	8afb      	ldrh	r3, [r7, #22]
 8002100:	f240 1207 	movw	r2, #263	@ 0x107
 8002104:	4293      	cmp	r3, r2
 8002106:	d104      	bne.n	8002112 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2255      	movs	r2, #85	@ 0x55
 800210c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002110:	e0e6      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2233      	movs	r2, #51	@ 0x33
 8002116:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800211a:	e0e1      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2208      	movs	r2, #8
 8002120:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3380      	adds	r3, #128	@ 0x80
 8002132:	2220      	movs	r2, #32
 8002134:	4619      	mov	r1, r3
 8002136:	f00c fbb2 	bl	800e89e <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f003 ff32 	bl	8005fb0 <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	2224      	movs	r2, #36	@ 0x24
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fe49 	bl	8001dfa <ifx_i2c_prl_encrypt_msg>
 8002168:	4603      	mov	r3, r0
 800216a:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002172:	d106      	bne.n	8002182 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2255      	movs	r2, #85	@ 0x55
 8002178:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
                    break;
 8002180:	e0ae      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f003 ff08 	bl	8005fb0 <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2231      	movs	r2, #49	@ 0x31
 80021a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3354      	adds	r3, #84	@ 0x54
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4613      	mov	r3, r2
 80021bc:	2231      	movs	r2, #49	@ 0x31
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 ff88 	bl	80030d4 <ifx_i2c_tl_transceive>
 80021c4:	4603      	mov	r3, r0
 80021c6:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80021c8:	8afb      	ldrh	r3, [r7, #22]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2255      	movs	r2, #85	@ 0x55
 80021d2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	613b      	str	r3, [r7, #16]
                    break;
 80021da:	e081      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2244      	movs	r2, #68	@ 0x44
 80021e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80021e4:	e07c      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d104      	bne.n	80021f8 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80021f4:	2b31      	cmp	r3, #49	@ 0x31
 80021f6:	d006      	beq.n	8002206 <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2255      	movs	r2, #85	@ 0x55
 80021fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
                    break;
 8002204:	e06c      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fef1 	bl	8005ff2 <optiga_common_get_uint32>
 8002210:	4602      	mov	r2, r0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	1d59      	adds	r1, r3, #5
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002228:	9203      	str	r2, [sp, #12]
 800222a:	2224      	movs	r2, #36	@ 0x24
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	2210      	movs	r2, #16
 8002230:	9201      	str	r2, [sp, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	2224      	movs	r2, #36	@ 0x24
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fe1f 	bl	8001e7c <ifx_i2c_prl_decrypt_msg>
 800223e:	4603      	mov	r3, r0
 8002240:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002248:	d106      	bne.n	8002258 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2255      	movs	r2, #85	@ 0x55
 800224e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002252:	2301      	movs	r3, #1
 8002254:	613b      	str	r3, [r7, #16]
                    break;
 8002256:	e043      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f003 fea4 	bl	8005fb0 <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	33a8      	adds	r3, #168	@ 0xa8
 8002272:	2220      	movs	r2, #32
 8002274:	4619      	mov	r1, r3
 8002276:	f00c fabd 	bl	800e7f4 <memcmp>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002280:	f240 1307 	movw	r3, #263	@ 0x107
 8002284:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2255      	movs	r2, #85	@ 0x55
 800228a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800228e:	2301      	movs	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
                    break;
 8002292:	e025      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	2204      	movs	r2, #4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f00c faa7 	bl	800e7f4 <memcmp>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80022ac:	f240 1307 	movw	r3, #263	@ 0x107
 80022b0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2255      	movs	r2, #85	@ 0x55
 80022b6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	613b      	str	r3, [r7, #16]
                    break;
 80022be:	e00f      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80022c8:	e00a      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80022ca:	f240 1307 	movw	r3, #263	@ 0x107
 80022ce:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	22ff      	movs	r2, #255	@ 0xff
 80022d4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
            break;
 80022dc:	e000      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80022de:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f43f ae73 	beq.w	8001fce <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80022e8:	8afb      	ldrh	r3, [r7, #22]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b094      	sub	sp, #80	@ 0x50
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002302:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002306:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002310:	2b01      	cmp	r3, #1
 8002312:	d003      	beq.n	800231c <ifx_i2c_prl_do_manage_context+0x2a>
 8002314:	2b02      	cmp	r3, #2
 8002316:	f000 80eb 	beq.w	80024f0 <ifx_i2c_prl_do_manage_context+0x1fe>
 800231a:	e1df      	b.n	80026dc <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002322:	b25b      	sxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	da07      	bge.n	8002338 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002330:	2300      	movs	r3, #0
 8002332:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002336:	e1ed      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800233e:	2b22      	cmp	r3, #34	@ 0x22
 8002340:	d10c      	bne.n	800235c <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2260      	movs	r2, #96	@ 0x60
 8002346:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800235a:	e0a6      	b.n	80024aa <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002362:	2b11      	cmp	r3, #17
 8002364:	f040 8093 	bne.w	800248e <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800236e:	885b      	ldrh	r3, [r3, #2]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d033      	beq.n	80023dc <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2234      	movs	r2, #52	@ 0x34
 8002378:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002382:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002384:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3354      	adds	r3, #84	@ 0x54
 800238a:	461a      	mov	r2, r3
 800238c:	f004 f99c 	bl	80066c8 <pal_os_datastore_read>
 8002390:	4603      	mov	r3, r0
 8002392:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800239a:	2b01      	cmp	r3, #1
 800239c:	f000 81b7 	beq.w	800270e <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d130      	bne.n	8002418 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80023da:	e19b      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d112      	bne.n	800240c <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002404:	2300      	movs	r3, #0
 8002406:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 800240a:	e183      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2268      	movs	r2, #104	@ 0x68
 800241c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f003 fdbf 	bl	8005fb0 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2205      	movs	r2, #5
 8002436:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2205      	movs	r2, #5
 8002444:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d026      	beq.n	80024aa <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2234      	movs	r2, #52	@ 0x34
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00c f9d5 	bl	800e814 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	f107 0110 	add.w	r1, r7, #16
 8002476:	2234      	movs	r2, #52	@ 0x34
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f8a7 	bl	80065cc <pal_os_datastore_write>
 800247e:	4603      	mov	r3, r0
 8002480:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002484:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10e      	bne.n	80024aa <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 800248c:	e142      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	22ff      	movs	r2, #255	@ 0xff
 8002492:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2207      	movs	r2, #7
 800249a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80024a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 80024a8:	e134      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3354      	adds	r3, #84	@ 0x54
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4603      	mov	r3, r0
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fe05 	bl	80030d4 <ifx_i2c_tl_transceive>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80024d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 811c 	bne.w	8002712 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
        }
        break;
 80024ee:	e111      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002502:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002506:	2b6c      	cmp	r3, #108	@ 0x6c
 8002508:	d133      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002510:	2b11      	cmp	r3, #17
 8002512:	d12e      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d12b      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3308      	adds	r3, #8
 8002524:	2228      	movs	r2, #40	@ 0x28
 8002526:	4619      	mov	r1, r3
 8002528:	f00c f9b9 	bl	800e89e <memcpy>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002570:	e0ac      	b.n	80026cc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002572:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	f040 808b 	bne.w	8002692 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002582:	2b22      	cmp	r3, #34	@ 0x22
 8002584:	f040 8085 	bne.w	8002692 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 8081 	bne.w	8002692 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f103 0008 	add.w	r0, r3, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3358      	adds	r3, #88	@ 0x58
 80025a2:	2228      	movs	r2, #40	@ 0x28
 80025a4:	4619      	mov	r1, r3
 80025a6:	f00c f97a 	bl	800e89e <memcpy>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80025e4:	885b      	ldrh	r3, [r3, #2]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02e      	beq.n	8002648 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2234      	movs	r2, #52	@ 0x34
 80025ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80025f8:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80025fa:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002602:	461a      	mov	r2, r3
 8002604:	f003 ffe2 	bl	80065cc <pal_os_datastore_write>
 8002608:	4603      	mov	r3, r0
 800260a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 800260e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	@ 0xff
 800261a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2207      	movs	r2, #7
 8002622:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
                        break;
 8002646:	e065      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3358      	adds	r3, #88	@ 0x58
 800264c:	2228      	movs	r2, #40	@ 0x28
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00c f8df 	bl	800e814 <memset>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	649a      	str	r2, [r3, #72]	@ 0x48
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002690:	e01c      	b.n	80026cc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2234      	movs	r2, #52	@ 0x34
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00c f8bb 	bl	800e814 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026a4:	885b      	ldrh	r3, [r3, #2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026b0:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80026b2:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026b4:	2234      	movs	r2, #52	@ 0x34
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 ff88 	bl	80065cc <pal_os_datastore_write>
 80026bc:	4603      	mov	r3, r0
 80026be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 80026c2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80026c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 80026ca:	e023      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 80026da:	e01b      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	22ff      	movs	r2, #255	@ 0xff
 80026e0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2207      	movs	r2, #7
 80026e8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80026fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800270c:	e002      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002712:	bf00      	nop
    }
  return (return_status);
 8002714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002718:	4618      	mov	r0, r3
 800271a:	3748      	adds	r7, #72	@ 0x48
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b097      	sub	sp, #92	@ 0x5c
 8002724:	af04      	add	r7, sp, #16
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800273a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800273e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <ifx_i2c_prl_event_handler+0x36>
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002752:	2b00      	cmp	r3, #0
 8002754:	d029      	beq.n	80027aa <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	22ff      	movs	r2, #255	@ 0xff
 800275a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002764:	2b05      	cmp	r3, #5
 8002766:	d105      	bne.n	8002774 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f240 1207 	movw	r2, #263	@ 0x107
 800276e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002772:	e016      	b.n	80027a2 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <ifx_i2c_prl_event_handler+0x7a>
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002784:	d009      	beq.n	800279a <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800278c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002798:	e003      	b.n	80027a2 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	897a      	ldrh	r2, [r7, #10]
 800279e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2207      	movs	r2, #7
 80027a6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80027b0:	3b01      	subs	r3, #1
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	f200 8445 	bhi.w	8003042 <ifx_i2c_prl_event_handler+0x922>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <ifx_i2c_prl_event_handler+0xa0>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e1 	.word	0x080027e1
 80027c4:	0800284f 	.word	0x0800284f
 80027c8:	08002c61 	.word	0x08002c61
 80027cc:	0800298f 	.word	0x0800298f
 80027d0:	08002893 	.word	0x08002893
 80027d4:	08002ef9 	.word	0x08002ef9
 80027d8:	08003013 	.word	0x08003013
 80027dc:	080027fd 	.word	0x080027fd
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 80027ea:	2300      	movs	r3, #0
 80027ec:	2200      	movs	r2, #0
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	47a0      	blx	r4
                exit_machine = FALSE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80027f8:	f000 bc34 	b.w	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 80027fc:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fd74 	bl	80022f2 <ifx_i2c_prl_do_manage_context>
 800280a:	4603      	mov	r3, r0
 800280c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002810:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8424 	beq.w	8003062 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	22ff      	movs	r2, #255	@ 0xff
 800281e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2207      	movs	r2, #7
 8002826:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002838:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002844:	2301      	movs	r3, #1
 8002846:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 800284a:	f000 bc0a 	b.w	8003062 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002854:	b25b      	sxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	db09      	blt.n	800286e <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002860:	2b00      	cmp	r3, #0
 8002862:	d011      	beq.n	8002888 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2211      	movs	r2, #17
 800287a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002886:	e3ed      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2204      	movs	r2, #4
 800288c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002890:	e3e8      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3308      	adds	r3, #8
 8002896:	2228      	movs	r2, #40	@ 0x28
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f00b ffba 	bl	800e814 <memset>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	2234      	movs	r2, #52	@ 0x34
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f00b ff9d 	bl	800e814 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80028e0:	885b      	ldrh	r3, [r3, #2]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02e      	beq.n	8002944 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80028ec:	885b      	ldrh	r3, [r3, #2]
 80028ee:	f107 0110 	add.w	r1, r7, #16
 80028f2:	2234      	movs	r2, #52	@ 0x34
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fe69 	bl	80065cc <pal_os_datastore_write>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002900:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01d      	beq.n	8002944 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	22ff      	movs	r2, #255	@ 0xff
 800290c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2207      	movs	r2, #7
 8002914:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002926:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f240 1207 	movw	r2, #263	@ 0x107
 800293e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002942:	e38f      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fb37 	bl	8001fba <ifx_i2c_prl_do_handshake>
 800294c:	4603      	mov	r3, r0
 800294e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002956:	f240 1207 	movw	r2, #263	@ 0x107
 800295a:	4293      	cmp	r3, r2
 800295c:	d109      	bne.n	8002972 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002964:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2207      	movs	r2, #7
 800296c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002970:	e378      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002978:	2b01      	cmp	r3, #1
 800297a:	d104      	bne.n	8002986 <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2204      	movs	r2, #4
 8002980:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002984:	e36e      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 800298c:	e36a      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002994:	b25b      	sxtb	r3, r3
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	b25b      	sxtb	r3, r3
 800299c:	f043 0320 	orr.w	r3, r3, #32
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d006      	beq.n	80029c6 <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80029be:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d122      	bne.n	8002a0c <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ca:	3301      	adds	r3, #1
 80029cc:	f113 0f10 	cmn.w	r3, #16
 80029d0:	d914      	bls.n	80029fc <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2205      	movs	r2, #5
 80029e8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2211      	movs	r2, #17
 80029f6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 80029fa:	e333      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a06:	320d      	adds	r2, #13
 8002a08:	b292      	uxth	r2, r2
 8002a0a:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d007      	beq.n	8002a36 <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a2c:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	f040 80c2 	bne.w	8002bba <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f113 0f10 	cmn.w	r3, #16
 8002a40:	d914      	bls.n	8002a6c <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10f      	bne.n	8002a6c <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2205      	movs	r2, #5
 8002a58:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2211      	movs	r2, #17
 8002a66:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002a6a:	e2fb      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d13f      	bne.n	8002af6 <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7a:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002a92:	9203      	str	r2, [sp, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	9202      	str	r2, [sp, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff f9ea 	bl	8001e7c <ifx_i2c_prl_decrypt_msg>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002aae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ab2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002ab6:	d118      	bne.n	8002aea <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	22ff      	movs	r2, #255	@ 0xff
 8002abc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002ae8:	e2bc      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002af4:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2205      	movs	r2, #5
 8002b04:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f003 fa4b 	bl	8005fb0 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002b1e:	1d59      	adds	r1, r3, #5
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4603      	mov	r3, r0
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff f960 	bl	8001dfa <ifx_i2c_prl_encrypt_msg>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002b40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b44:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002b48:	d118      	bne.n	8002b7c <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	@ 0xff
 8002b4e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2207      	movs	r2, #7
 8002b56:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002b7a:	e273      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002b86:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8002b98:	4413      	add	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa91 	bl	80030d4 <ifx_i2c_tl_transceive>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002bb8:	e021      	b.n	8002bfe <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002bce:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002bd4:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002be2:	4413      	add	r3, r2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa6e 	bl	80030d4 <ifx_i2c_tl_transceive>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8002bfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c02:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002c06:	d11d      	bne.n	8002c44 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	22ff      	movs	r2, #255	@ 0xff
 8002c0c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2207      	movs	r2, #7
 8002c14:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002c3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8002c42:	e20f      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2203      	movs	r2, #3
 8002c54:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002c5e:	e201      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	3301      	adds	r3, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 f9c3 	bl	8005ff2 <optiga_common_get_uint32>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d118      	bne.n	8002caa <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2207      	movs	r2, #7
 8002c84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002ca8:	e1dc      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d040      	beq.n	8002d38 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b40      	cmp	r3, #64	@ 0x40
 8002cbc:	d003      	beq.n	8002cc6 <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002cc2:	2b44      	cmp	r3, #68	@ 0x44
 8002cc4:	d10c      	bne.n	8002ce0 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002cc6:	893b      	ldrh	r3, [r7, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d004      	beq.n	8002cd6 <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d004      	beq.n	8002ce0 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d109      	bne.n	8002cf4 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002cf2:	e018      	b.n	8002d26 <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10e      	bne.n	8002d1c <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002d04:	2b11      	cmp	r3, #17
 8002d06:	d109      	bne.n	8002d1c <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d1a:	e004      	b.n	8002d26 <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002d22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2206      	movs	r2, #6
 8002d2a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	22ff      	movs	r2, #255	@ 0xff
 8002d32:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8002d36:	e195      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d018      	beq.n	8002d78 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	@ 0xff
 8002d4a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2207      	movs	r2, #7
 8002d52:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002d76:	e175      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d006      	beq.n	8002d92 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	f040 8082 	bne.w	8002e96 <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	2b0d      	cmp	r3, #13
 8002d96:	d818      	bhi.n	8002dca <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	@ 0xff
 8002d9c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2207      	movs	r2, #7
 8002da4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002db6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002dc8:	e14c      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d805      	bhi.n	8002de4 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d818      	bhi.n	8002e16 <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	22ff      	movs	r2, #255	@ 0xff
 8002de8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2207      	movs	r2, #7
 8002df0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002e14:	e126      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	3a0d      	subs	r2, #13
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002e38:	8818      	ldrh	r0, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002e42:	3305      	adds	r3, #5
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002e4a:	9203      	str	r2, [sp, #12]
 8002e4c:	2224      	movs	r2, #36	@ 0x24
 8002e4e:	9202      	str	r2, [sp, #8]
 8002e50:	2210      	movs	r2, #16
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4623      	mov	r3, r4
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff f80e 	bl	8001e7c <ifx_i2c_prl_decrypt_msg>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002e66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e6a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002e6e:	d108      	bne.n	8002e82 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2206      	movs	r2, #6
 8002e74:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8002e80:	e0f0      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002e92:	bf00      	nop
            break;
 8002e94:	e0e6      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d81c      	bhi.n	8002ed6 <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	22ff      	movs	r2, #255	@ 0xff
 8002ea8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 8002ec0:	e0d0      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002ed4:	e0c6      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002ef6:	e0b5      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b44      	cmp	r3, #68	@ 0x44
 8002efe:	d166      	bne.n	8002fce <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d104      	bne.n	8002f10 <ifx_i2c_prl_event_handler+0x7f0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d918      	bls.n	8002f42 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	22ff      	movs	r2, #255	@ 0xff
 8002f14:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002f40:	e090      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d004      	beq.n	8002f56 <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d136      	bne.n	8002fc4 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d91c      	bls.n	8002fb2 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	22ff      	movs	r2, #255	@ 0xff
 8002f7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2207      	movs	r2, #7
 8002f84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8002fb0:	e058      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 8002fc2:	e04f      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2207      	movs	r2, #7
 8002fc8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002fcc:	e04a      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d117      	bne.n	8003008 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	22ff      	movs	r2, #255	@ 0xff
 8002fdc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ff6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2207      	movs	r2, #7
 800300c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003010:	e028      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003018:	2bff      	cmp	r3, #255	@ 0xff
 800301a:	d00d      	beq.n	8003038 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7fe ff75 	bl	8001f0c <ifx_i2c_prl_send_alert>
 8003022:	4603      	mov	r3, r0
 8003024:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	22ff      	movs	r2, #255	@ 0xff
 800302c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003036:	e015      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003040:	e010      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800304e:	2300      	movs	r3, #0
 8003050:	2200      	movs	r2, #0
 8003052:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	47a0      	blx	r4
                exit_machine = FALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003060:	e000      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003062:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003064:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003068:	2b01      	cmp	r3, #1
 800306a:	f43f ab9e 	beq.w	80027aa <ifx_i2c_prl_event_handler+0x8a>
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	374c      	adds	r7, #76	@ 0x4c
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800308a:	4911      	ldr	r1, [pc, #68]	@ (80030d0 <ifx_i2c_tl_init+0x58>)
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fc11 	bl	80008b4 <ifx_i2c_dl_init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003098:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800309c:	e014      	b.n	80030c8 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80030bc:	3b06      	subs	r3, #6
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	080033b9 	.word	0x080033b9

080030d4 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80030e4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80030e8:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d041      	beq.n	8003174 <ifx_i2c_tl_transceive+0xa0>
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03e      	beq.n	8003174 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d138      	bne.n	8003172 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003108:	f003 fc59 	bl	80069be <pal_os_timer_get_time_in_milliseconds>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003162:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f866 	bl	8003238 <ifx_i2c_tl_send_next_fragment>
 800316c:	4603      	mov	r3, r0
 800316e:	82fb      	strh	r3, [r7, #22]
 8003170:	e000      	b.n	8003174 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003172:	bf00      	nop
    } while (FALSE);
    return (status);
 8003174:	8afb      	ldrh	r3, [r7, #22]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800318c:	2b01      	cmp	r3, #1
 800318e:	d002      	beq.n	8003196 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003190:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003194:	e00f      	b.n	80031b6 <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f842 	bl	8003238 <ifx_i2c_tl_send_next_fragment>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80031cc:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <ifx_i2c_tl_calculate_pctr+0x38>
 80031e8:	897a      	ldrh	r2, [r7, #10]
 80031ea:	89bb      	ldrh	r3, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d802      	bhi.n	80031f6 <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e019      	b.n	800322a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <ifx_i2c_tl_calculate_pctr+0x50>
 8003200:	897a      	ldrh	r2, [r7, #10]
 8003202:	89bb      	ldrh	r3, [r7, #12]
 8003204:	429a      	cmp	r2, r3
 8003206:	d902      	bls.n	800320e <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e00d      	b.n	800322a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <ifx_i2c_tl_calculate_pctr+0x68>
 8003218:	897a      	ldrh	r2, [r7, #10]
 800321a:	89bb      	ldrh	r3, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d902      	bls.n	8003226 <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003220:	2302      	movs	r3, #2
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e001      	b.n	800322a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8003226:	2304      	movs	r3, #4
 8003228:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003246:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ffb8 	bl	80031be <ifx_i2c_tl_calculate_pctr>
 800324e:	4603      	mov	r3, r0
 8003250:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003260:	1ad2      	subs	r2, r2, r3
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	429a      	cmp	r2, r3
 8003266:	da07      	bge.n	8003278 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003278:	7b7b      	ldrb	r3, [r7, #13]
 800327a:	f043 0308 	orr.w	r3, r3, #8
 800327e:	b2da      	uxtb	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 800328c:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800329a:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800329c:	89fa      	ldrh	r2, [r7, #14]
 800329e:	4619      	mov	r1, r3
 80032a0:	f00b fafd 	bl	800e89e <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	4413      	add	r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fb36 	bl	8000930 <ifx_i2c_dl_send_frame>
 80032c4:	4603      	mov	r3, r0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2207      	movs	r2, #7
 80032de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fb1e 	bl	8000930 <ifx_i2c_dl_send_frame>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	460a      	mov	r2, r1
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	4613      	mov	r3, r2
 800330e:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003310:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003314:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	2b07      	cmp	r3, #7
 800331a:	d00b      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d002      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d110      	bne.n	8003356 <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003338:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800333c:	79ba      	ldrb	r2, [r7, #6]
 800333e:	429a      	cmp	r2, r3
 8003340:	d007      	beq.n	8003352 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800334c:	79ba      	ldrb	r2, [r7, #6]
 800334e:	429a      	cmp	r2, r3
 8003350:	d101      	bne.n	8003356 <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003352:	2300      	movs	r3, #0
 8003354:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003356:	89fb      	ldrh	r3, [r7, #14]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	0800f684 	.word	0x0800f684

08003368 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003374:	2300      	movs	r3, #0
 8003376:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f023 0307 	bic.w	r3, r3, #7
 800337e:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <presence_bit_check+0x42>
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800339e:	7b7b      	ldrb	r3, [r7, #13]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d002      	beq.n	80033aa <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 80033a4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80033a8:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 80033aa:	89fb      	ldrh	r3, [r7, #14]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	461a      	mov	r2, r3
 80033c4:	460b      	mov	r3, r1
 80033c6:	817b      	strh	r3, [r7, #10]
 80033c8:	4613      	mov	r3, r2
 80033ca:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80033ec:	897b      	ldrh	r3, [r7, #10]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2206      	movs	r2, #6
 80033fa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003404:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003408:	893b      	ldrh	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	4619      	mov	r1, r3
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ffa8 	bl	8003368 <presence_bit_check>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2206      	movs	r2, #6
 8003422:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800342c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800343e:	3b01      	subs	r3, #1
 8003440:	2b07      	cmp	r3, #7
 8003442:	f200 81d0 	bhi.w	80037e6 <ifx_i2c_dl_event_handler+0x42e>
 8003446:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <ifx_i2c_dl_event_handler+0x94>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	0800346d 	.word	0x0800346d
 8003450:	08003483 	.word	0x08003483
 8003454:	080037e7 	.word	0x080037e7
 8003458:	08003519 	.word	0x08003519
 800345c:	0800365f 	.word	0x0800365f
 8003460:	080037b5 	.word	0x080037b5
 8003464:	08003773 	.word	0x08003773
 8003468:	08003717 	.word	0x08003717
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 800346c:	2300      	movs	r3, #0
 800346e:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	2100      	movs	r1, #0
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	47a0      	blx	r4
            }
            break;
 8003480:	e1c3      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d040      	beq.n	800350e <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003498:	429a      	cmp	r2, r3
 800349a:	d215      	bcs.n	80034c8 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d104      	bne.n	80034ac <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2208      	movs	r2, #8
 80034a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80034aa:	e1ae      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2206      	movs	r2, #6
 80034b6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80034ba:	e1a6      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff feb9 	bl	8003238 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 80034c6:	e19f      	b.n	8003808 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2204      	movs	r2, #4
 80034cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 818a 	bne.w	8003808 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7fd fa4b 	bl	8000990 <ifx_i2c_dl_receive_frame>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2206      	movs	r2, #6
 8003504:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003508:	2300      	movs	r3, #0
 800350a:	757b      	strb	r3, [r7, #21]
            break;
 800350c:	e17c      	b.n	8003808 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2206      	movs	r2, #6
 8003512:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003516:	e178      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003518:	897b      	ldrh	r3, [r7, #10]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8098 	beq.w	8003654 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003524:	893b      	ldrh	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2206      	movs	r2, #6
 800352e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003532:	e16a      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800353a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800353e:	d114      	bne.n	800356a <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003540:	7dbb      	ldrb	r3, [r7, #22]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d005      	beq.n	8003552 <ifx_i2c_dl_event_handler+0x19a>
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7fd fa22 	bl	8000990 <ifx_i2c_dl_receive_frame>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2206      	movs	r2, #6
 8003556:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 800355a:	e156      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2204      	movs	r2, #4
 8003560:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	757b      	strb	r3, [r7, #21]
                        break;
 8003568:	e14f      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003570:	7dbb      	ldrb	r3, [r7, #22]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fec3 	bl	8003300 <ifx_i2c_tl_check_chaining_error>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2208      	movs	r2, #8
 8003584:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003588:	e13f      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 800358a:	7dbb      	ldrb	r3, [r7, #22]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2206      	movs	r2, #6
 80035a2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 80035a6:	e130      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 80035a8:	7dbb      	ldrb	r3, [r7, #22]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <ifx_i2c_dl_event_handler+0x1fc>
 80035ae:	7dbb      	ldrb	r3, [r7, #22]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d14a      	bne.n	800364a <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80035ba:	461a      	mov	r2, r3
 80035bc:	893b      	ldrh	r3, [r7, #8]
 80035be:	4413      	add	r3, r2
 80035c0:	3b01      	subs	r3, #1
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 80035c8:	8812      	ldrh	r2, [r2, #0]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	dd09      	ble.n	80035e2 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035d4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2206      	movs	r2, #6
 80035dc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80035e0:	e113      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80035f2:	1898      	adds	r0, r3, r2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	461a      	mov	r2, r3
 80035fe:	f00b f94e 	bl	800e89e <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003608:	893b      	ldrh	r3, [r7, #8]
 800360a:	4413      	add	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 800362c:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2100      	movs	r1, #0
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003648:	e0df      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2205      	movs	r2, #5
 800364e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003652:	e0da      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2206      	movs	r2, #6
 8003658:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800365c:	e0d5      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 800365e:	893a      	ldrh	r2, [r7, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003666:	3301      	adds	r3, #1
 8003668:	429a      	cmp	r2, r3
 800366a:	d004      	beq.n	8003676 <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2207      	movs	r2, #7
 8003670:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003674:	e0c9      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800367c:	461a      	mov	r2, r3
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	3b01      	subs	r3, #1
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	4293      	cmp	r3, r2
 800368e:	dd09      	ble.n	80036a4 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003696:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2204      	movs	r2, #4
 800369e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80036a2:	e0b2      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2206      	movs	r2, #6
 80036ae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80036b2:	e0aa      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80036c0:	1898      	adds	r0, r3, r2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	461a      	mov	r2, r3
 80036cc:	f00b f8e7 	bl	800e89e <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2204      	movs	r2, #4
 80036f8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7fd f947 	bl	8000990 <ifx_i2c_dl_receive_frame>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2206      	movs	r2, #6
 800370c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003710:	2300      	movs	r3, #0
 8003712:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003714:	e079      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d909      	bls.n	8003730 <ifx_i2c_dl_event_handler+0x378>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003722:	2b01      	cmp	r3, #1
 8003724:	d104      	bne.n	8003730 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2207      	movs	r2, #7
 800372a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800372e:	e06c      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	b2d1      	uxtb	r1, r2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fd16 	bl	800317e <ifx_i2c_tl_resend_packets>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2206      	movs	r2, #6
 800375c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003760:	e053      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	757b      	strb	r3, [r7, #21]
            break;
 8003766:	e050      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2206      	movs	r2, #6
 800376c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003770:	e04b      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	b2d1      	uxtb	r1, r2
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff fd9d 	bl	80032ce <ifx_i2c_tl_send_chaining_error>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2206      	movs	r2, #6
 800379e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 80037a2:	e032      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	757b      	strb	r3, [r7, #21]
            break;
 80037a8:	e02f      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2206      	movs	r2, #6
 80037ae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 80037b2:	e02a      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <ifx_i2c_dl_event_handler+0x410>
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80037dc:	2300      	movs	r3, #0
 80037de:	2200      	movs	r2, #0
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	47a0      	blx	r4
            }
            break;
 80037e4:	e011      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80037fe:	2300      	movs	r3, #0
 8003800:	2200      	movs	r2, #0
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	47a0      	blx	r4
            }
            break;
 8003806:	e000      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            break;
 8003808:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 800380a:	7d7b      	ldrb	r3, [r7, #21]
 800380c:	2b01      	cmp	r3, #1
 800380e:	f43f ade3 	beq.w	80033d8 <ifx_i2c_dl_event_handler+0x20>
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}

0800381c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003824:	1d39      	adds	r1, r7, #4
 8003826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800382a:	2201      	movs	r2, #1
 800382c:	4803      	ldr	r0, [pc, #12]	@ (800383c <__io_putchar+0x20>)
 800382e:	f009 fe15 	bl	800d45c <HAL_UART_Transmit>
    return ch;
 8003832:	687b      	ldr	r3, [r7, #4]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000067c 	.word	0x2000067c

08003840 <optiga_util_callback>:
//
//pFunction jumpToApplication;
//uint32_t jumpAddress;
// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 800384c:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <optiga_util_callback+0x20>)
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	8013      	strh	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	200006c4 	.word	0x200006c4

08003864 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d101      	bne.n	800387a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8003876:	f003 f83b 	bl	80068f0 <pal_os_event_timer_tick>
    }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <verify_firmware_signature>:


bool verify_firmware_signature(optiga_util_t *util)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	f5ad 5d51 	sub.w	sp, sp, #13376	@ 0x3440
 800388a:	b082      	sub	sp, #8
 800388c:	af04      	add	r7, sp, #16
 800388e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8003892:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8003896:	6018      	str	r0, [r3, #0]
    uint8_t calc_hash[32];
    uint8_t expected_hash[32];  // Optional expected hash stored in flash
    uint8_t firmware_signature[SIGNATURE_SIZE];

    // 1. Read firmware data from flash
    memcpy(firmware_data, (uint8_t *)BOOTLOADER_START_ADDR, HASH_CALC_LEN);
 8003898:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800389c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80038a0:	4aa5      	ldr	r2, [pc, #660]	@ (8003b38 <verify_firmware_signature+0x2b4>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	4611      	mov	r1, r2
 80038a6:	f243 23e4 	movw	r3, #13028	@ 0x32e4
 80038aa:	461a      	mov	r2, r3
 80038ac:	f00a fff7 	bl	800e89e <memcpy>

    // 2. Calculate SHA-256 hash of the firmware
    mbedtls_sha256_context ctx;
    mbedtls_sha256_init(&ctx);
 80038b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80038b4:	3b28      	subs	r3, #40	@ 0x28
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 f8a6 	bl	8006a08 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret(&ctx, 0);
 80038bc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80038c0:	3b28      	subs	r3, #40	@ 0x28
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f8bd 	bl	8006a44 <mbedtls_sha256_starts_ret>
    mbedtls_sha256_update_ret(&ctx, firmware_data, HASH_CALC_LEN);
 80038ca:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 80038ce:	3934      	subs	r1, #52	@ 0x34
 80038d0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80038d4:	3b28      	subs	r3, #40	@ 0x28
 80038d6:	f243 22e4 	movw	r2, #13028	@ 0x32e4
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fe66 	bl	80085ac <mbedtls_sha256_update_ret>
    mbedtls_sha256_finish_ret(&ctx, calc_hash);
 80038e0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80038e4:	3a14      	subs	r2, #20
 80038e6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80038ea:	3b28      	subs	r3, #40	@ 0x28
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 fed1 	bl	8008696 <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free(&ctx);
 80038f4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80038f8:	3b28      	subs	r3, #40	@ 0x28
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 f891 	bl	8006a22 <mbedtls_sha256_free>

    printf("\r\n🔹 Calculated SHA-256 Hash:\r\n");
 8003900:	488e      	ldr	r0, [pc, #568]	@ (8003b3c <verify_firmware_signature+0x2b8>)
 8003902:	f00a ff6f 	bl	800e7e4 <puts>
    for (int i = 0; i < sizeof(calc_hash); i++)
 8003906:	2300      	movs	r3, #0
 8003908:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 800390c:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e019      	b.n	8003948 <verify_firmware_signature+0xc4>
        printf("%02X", calc_hash[i]);
 8003914:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8003918:	f5a3 7245 	sub.w	r2, r3, #788	@ 0x314
 800391c:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003920:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4884      	ldr	r0, [pc, #528]	@ (8003b40 <verify_firmware_signature+0x2bc>)
 800392e:	f00a fef1 	bl	800e714 <iprintf>
    for (int i = 0; i < sizeof(calc_hash); i++)
 8003932:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003936:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003942:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 800394c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b1f      	cmp	r3, #31
 8003954:	d9de      	bls.n	8003914 <verify_firmware_signature+0x90>
    printf("\r\n");
 8003956:	487b      	ldr	r0, [pc, #492]	@ (8003b44 <verify_firmware_signature+0x2c0>)
 8003958:	f00a ff44 	bl	800e7e4 <puts>
//        printf("❌ Firmware hash mismatch! Aborting.\r\n");
//        return false;
//    }

    // 4. Read firmware signature from flash
    memcpy(firmware_signature, (uint8_t *)(BOOTLOADER_START_ADDR + SIGNATURE_OFFSET), SIGNATURE_SIZE);
 800395c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8003960:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8003964:	4a78      	ldr	r2, [pc, #480]	@ (8003b48 <verify_firmware_signature+0x2c4>)
 8003966:	4618      	mov	r0, r3
 8003968:	4611      	mov	r1, r2
 800396a:	2347      	movs	r3, #71	@ 0x47
 800396c:	461a      	mov	r2, r3
 800396e:	f00a ff96 	bl	800e89e <memcpy>

    printf("🔹 Firmware Signature (%d bytes):\r\n", SIGNATURE_SIZE);
 8003972:	2147      	movs	r1, #71	@ 0x47
 8003974:	4875      	ldr	r0, [pc, #468]	@ (8003b4c <verify_firmware_signature+0x2c8>)
 8003976:	f00a fecd 	bl	800e714 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 800397a:	2300      	movs	r3, #0
 800397c:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003980:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e019      	b.n	80039bc <verify_firmware_signature+0x138>
        printf("%02X", firmware_signature[i]);
 8003988:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800398c:	f5a3 725f 	sub.w	r2, r3, #892	@ 0x37c
 8003990:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003994:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	4867      	ldr	r0, [pc, #412]	@ (8003b40 <verify_firmware_signature+0x2bc>)
 80039a2:	f00a feb7 	bl	800e714 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 80039a6:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 80039aa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 80039b6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 80039c0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b46      	cmp	r3, #70	@ 0x46
 80039c8:	ddde      	ble.n	8003988 <verify_firmware_signature+0x104>
    printf("\r\n");
 80039ca:	485e      	ldr	r0, [pc, #376]	@ (8003b44 <verify_firmware_signature+0x2c0>)
 80039cc:	f00a ff0a 	bl	800e7e4 <puts>

    // 5. Read public key from OPTIGA OID (if not already provisioned, this will fail)
    uint8_t public_key[65];  // Standard uncompressed ECC public key (0x04 | X[32] | Y[32])
    uint16_t public_key_len = sizeof(public_key);
 80039d0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80039d4:	f2a3 432e 	subw	r3, r3, #1070	@ 0x42e
 80039d8:	2241      	movs	r2, #65	@ 0x41
 80039da:	801a      	strh	r2, [r3, #0]

    optiga_lib_status = optiga_util_read_data(util, SIGNATURE_OID, 0, public_key, &public_key_len);
 80039dc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80039e0:	3a2c      	subs	r2, #44	@ 0x2c
 80039e2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80039e6:	f2a3 4034 	subw	r0, r3, #1076	@ 0x434
 80039ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80039ee:	3b2e      	subs	r3, #46	@ 0x2e
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	2200      	movs	r2, #0
 80039f6:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f002 fbf6 	bl	80061ec <optiga_util_read_data>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b52      	ldr	r3, [pc, #328]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003a06:	801a      	strh	r2, [r3, #0]
    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8003a08:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <verify_firmware_signature+0x19c>
    {
        printf("❌ Failed to read public key from OID 0x%04X\r\n", SIGNATURE_OID);
 8003a12:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003a16:	484f      	ldr	r0, [pc, #316]	@ (8003b54 <verify_firmware_signature+0x2d0>)
 8003a18:	f00a fe7c 	bl	800e714 <iprintf>
        return false;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e084      	b.n	8003b2a <verify_firmware_signature+0x2a6>
    }

    printf("🔹 Public Key from OID 0x%04X:\r\n", SIGNATURE_OID);
 8003a20:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003a24:	484c      	ldr	r0, [pc, #304]	@ (8003b58 <verify_firmware_signature+0x2d4>)
 8003a26:	f00a fe75 	bl	800e714 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003a30:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e019      	b.n	8003a6c <verify_firmware_signature+0x1e8>
        printf("%02X", public_key[i]);
 8003a38:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8003a3c:	f2a3 422c 	subw	r2, r3, #1068	@ 0x42c
 8003a40:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a44:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	483b      	ldr	r0, [pc, #236]	@ (8003b40 <verify_firmware_signature+0x2bc>)
 8003a52:	f00a fe5f 	bl	800e714 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8003a56:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a5a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003a66:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8003a70:	f2a3 432e 	subw	r3, r3, #1070	@ 0x42e
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a7c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4293      	cmp	r3, r2
 8003a84:	dbd8      	blt.n	8003a38 <verify_firmware_signature+0x1b4>
    printf("\r\n");
 8003a86:	482f      	ldr	r0, [pc, #188]	@ (8003b44 <verify_firmware_signature+0x2c0>)
 8003a88:	f00a feac 	bl	800e7e4 <puts>

    // 6. Verify digital signature using OPTIGA crypt
    optiga_crypt_t *me_crypt = optiga_crypt_create(0, optiga_util_callback, NULL);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4933      	ldr	r1, [pc, #204]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003a90:	2000      	movs	r0, #0
 8003a92:	f002 f9f1 	bl	8005e78 <optiga_crypt_create>
 8003a96:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a9a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003a9e:	6018      	str	r0, [r3, #0]
    if (!me_crypt)
 8003aa0:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003aa4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <verify_firmware_signature+0x234>
    {
        printf("❌ Failed to create OPTIGA crypt instance!\r\n");
 8003aae:	482c      	ldr	r0, [pc, #176]	@ (8003b60 <verify_firmware_signature+0x2dc>)
 8003ab0:	f00a fe98 	bl	800e7e4 <puts>
        return false;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e038      	b.n	8003b2a <verify_firmware_signature+0x2a6>
    }

    optiga_lib_status = OPTIGA_LIB_BUSY;
 8003ab8:	4b25      	ldr	r3, [pc, #148]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	801a      	strh	r2, [r3, #0]
    optiga_crypt_ecdsa_verify(me_crypt,
 8003abe:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8003ac2:	3b3c      	subs	r3, #60	@ 0x3c
 8003ac4:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8003ac8:	3914      	subs	r1, #20
 8003aca:	f24e 02e8 	movw	r2, #57576	@ 0xe0e8
 8003ace:	9202      	str	r2, [sp, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	9201      	str	r2, [sp, #4]
 8003ad4:	2247      	movs	r2, #71	@ 0x47
 8003ad6:	9200      	str	r2, [sp, #0]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f507 5050 	add.w	r0, r7, #13312	@ 0x3400
 8003ade:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8003ae2:	6800      	ldr	r0, [r0, #0]
 8003ae4:	f002 fa2f 	bl	8005f46 <optiga_crypt_ecdsa_verify>
                               firmware_signature,
                               SIGNATURE_SIZE,
                               OPTIGA_CRYPT_OID_DATA,  // Using key stored inside OPTIGA
                               SIGNATURE_OID);

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003ae8:	e001      	b.n	8003aee <verify_firmware_signature+0x26a>
        pal_os_event_trigger_registered_callback();
 8003aea:	f002 fedf 	bl	80068ac <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003aee:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d0f8      	beq.n	8003aea <verify_firmware_signature+0x266>

    optiga_crypt_destroy(me_crypt);
 8003af8:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003afc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	f002 f9fd 	bl	8005f00 <optiga_crypt_destroy>

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8003b06:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <verify_firmware_signature+0x29e>
    {
        printf("❌ Signature verification FAILED! Status: 0x%04X\r\n", optiga_lib_status);
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	4812      	ldr	r0, [pc, #72]	@ (8003b64 <verify_firmware_signature+0x2e0>)
 8003b1a:	f00a fdfb 	bl	800e714 <iprintf>
        return false;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e003      	b.n	8003b2a <verify_firmware_signature+0x2a6>
    }

    printf("✅ Firmware signature verified successfully.\r\n");
 8003b22:	4811      	ldr	r0, [pc, #68]	@ (8003b68 <verify_firmware_signature+0x2e4>)
 8003b24:	f00a fe5e 	bl	800e7e4 <puts>
    return true;
 8003b28:	2301      	movs	r3, #1
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f507 5750 	add.w	r7, r7, #13312	@ 0x3400
 8003b30:	3738      	adds	r7, #56	@ 0x38
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	08020000 	.word	0x08020000
 8003b3c:	0800f3b8 	.word	0x0800f3b8
 8003b40:	0800f3dc 	.word	0x0800f3dc
 8003b44:	0800f3e4 	.word	0x0800f3e4
 8003b48:	080232e4 	.word	0x080232e4
 8003b4c:	0800f3e8 	.word	0x0800f3e8
 8003b50:	200006c4 	.word	0x200006c4
 8003b54:	0800f410 	.word	0x0800f410
 8003b58:	0800f440 	.word	0x0800f440
 8003b5c:	08003841 	.word	0x08003841
 8003b60:	0800f464 	.word	0x0800f464
 8003b64:	0800f494 	.word	0x0800f494
 8003b68:	0800f4c8 	.word	0x0800f4c8

08003b6c <verify_firmware_integrity>:
/* Replace verify_bootloader_hash() with combined hash+signature check */
bool verify_firmware_integrity(optiga_util_t *util)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
    return verify_firmware_signature(util);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fe85 	bl	8003884 <verify_firmware_signature>
 8003b7a:	4603      	mov	r3, r0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <optiga_main_logic>:
void optiga_main_logic(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 8003b8e:	f240 3302 	movw	r3, #770	@ 0x302
 8003b92:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003b94:	2200      	movs	r2, #0
 8003b96:	492b      	ldr	r1, [pc, #172]	@ (8003c44 <optiga_main_logic+0xc0>)
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f002 fa8b 	bl	80060b4 <optiga_util_create>
 8003b9e:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8003ba6:	4828      	ldr	r0, [pc, #160]	@ (8003c48 <optiga_main_logic+0xc4>)
 8003ba8:	f00a fe1c 	bl	800e7e4 <puts>
        return;
 8003bac:	e046      	b.n	8003c3c <optiga_main_logic+0xb8>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003bae:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <optiga_main_logic+0xc8>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f002 fabe 	bl	8006138 <optiga_util_open_application>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 8003bc6:	4822      	ldr	r0, [pc, #136]	@ (8003c50 <optiga_main_logic+0xcc>)
 8003bc8:	f00a fe0c 	bl	800e7e4 <puts>
            continue;
 8003bcc:	e028      	b.n	8003c20 <optiga_main_logic+0x9c>
        }
        HAL_Delay(100);
 8003bce:	2064      	movs	r0, #100	@ 0x64
 8003bd0:	f005 f968 	bl	8008ea4 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003bd4:	e001      	b.n	8003bda <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8003bd6:	f002 fe69 	bl	80068ac <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003bda:	4b1c      	ldr	r3, [pc, #112]	@ (8003c4c <optiga_main_logic+0xc8>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d0f8      	beq.n	8003bd6 <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 8003be4:	2064      	movs	r0, #100	@ 0x64
 8003be6:	f005 f95d 	bl	8008ea4 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 8003bea:	4b18      	ldr	r3, [pc, #96]	@ (8003c4c <optiga_main_logic+0xc8>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <optiga_main_logic+0x86>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8003bf4:	4817      	ldr	r0, [pc, #92]	@ (8003c54 <optiga_main_logic+0xd0>)
 8003bf6:	f00a fdf5 	bl	800e7e4 <puts>
            break;
 8003bfa:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    if (verify_firmware_integrity(me_util)) {
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ffb5 	bl	8003b6c <verify_firmware_integrity>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00f      	beq.n	8003c28 <optiga_main_logic+0xa4>
 8003c08:	e00b      	b.n	8003c22 <optiga_main_logic+0x9e>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8003c0a:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <optiga_main_logic+0xc8>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4619      	mov	r1, r3
 8003c12:	4811      	ldr	r0, [pc, #68]	@ (8003c58 <optiga_main_logic+0xd4>)
 8003c14:	f00a fd7e 	bl	800e714 <iprintf>
            HAL_Delay(2000);
 8003c18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003c1c:	f005 f942 	bl	8008ea4 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003c20:	e7c5      	b.n	8003bae <optiga_main_logic+0x2a>
            goto_application();
 8003c22:	f000 fa37 	bl	8004094 <goto_application>
 8003c26:	e009      	b.n	8003c3c <optiga_main_logic+0xb8>
        } else {
            while (1) {
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003c28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c2c:	480b      	ldr	r0, [pc, #44]	@ (8003c5c <optiga_main_logic+0xd8>)
 8003c2e:	f005 fcac 	bl	800958a <HAL_GPIO_TogglePin>
                HAL_Delay(500);
 8003c32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c36:	f005 f935 	bl	8008ea4 <HAL_Delay>
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003c3a:	e7f5      	b.n	8003c28 <optiga_main_logic+0xa4>
            }
        }
}
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	08003841 	.word	0x08003841
 8003c48:	0800f4f8 	.word	0x0800f4f8
 8003c4c:	200006c4 	.word	0x200006c4
 8003c50:	0800f520 	.word	0x0800f520
 8003c54:	0800f560 	.word	0x0800f560
 8003c58:	0800f58c 	.word	0x0800f58c
 8003c5c:	40020400 	.word	0x40020400

08003c60 <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8003c68:	4811      	ldr	r0, [pc, #68]	@ (8003cb0 <I2C_Scan+0x50>)
 8003c6a:	f00a fdbb 	bl	800e7e4 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e013      	b.n	8003c9c <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	b299      	uxth	r1, r3
 8003c7c:	230a      	movs	r3, #10
 8003c7e:	2201      	movs	r2, #1
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f006 f94b 	bl	8009f1c <HAL_I2C_IsDeviceReady>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4808      	ldr	r0, [pc, #32]	@ (8003cb4 <I2C_Scan+0x54>)
 8003c92:	f00a fd3f 	bl	800e714 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dae7      	bge.n	8003c74 <I2C_Scan+0x14>
        }
    }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	0800f5bc 	.word	0x0800f5bc
 8003cb4:	0800f5d0 	.word	0x0800f5d0

08003cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cbc:	f005 f880 	bl	8008dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cc0:	f000 f854 	bl	8003d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cc4:	f000 f96e 	bl	8003fa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cc8:	f000 f942 	bl	8003f50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003ccc:	f000 f8c6 	bl	8003e5c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003cd0:	f000 f8f2 	bl	8003eb8 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003cd4:	f000 f8b6 	bl	8003e44 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003cd8:	481b      	ldr	r0, [pc, #108]	@ (8003d48 <main+0x90>)
 8003cda:	f008 ff8b 	bl	800cbf4 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	201c      	movs	r0, #28
 8003ce4:	f005 f9dd 	bl	80090a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ce8:	201c      	movs	r0, #28
 8003cea:	f005 f9f6 	bl	80090da <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	4816      	ldr	r0, [pc, #88]	@ (8003d4c <main+0x94>)
 8003cf4:	f005 fc30 	bl	8009558 <HAL_GPIO_WritePin>

  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4814      	ldr	r0, [pc, #80]	@ (8003d50 <main+0x98>)
 8003d00:	f00a fd08 	bl	800e714 <iprintf>

      printf("Powering ON OPTIGA Trust M...\r\n");
 8003d04:	4813      	ldr	r0, [pc, #76]	@ (8003d54 <main+0x9c>)
 8003d06:	f00a fd6d 	bl	800e7e4 <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 8003d0a:	4813      	ldr	r0, [pc, #76]	@ (8003d58 <main+0xa0>)
 8003d0c:	f002 fb59 	bl	80063c2 <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 8003d10:	4812      	ldr	r0, [pc, #72]	@ (8003d5c <main+0xa4>)
 8003d12:	f00a fd67 	bl	800e7e4 <puts>
      pal_gpio_set_low(&optiga_reset_0);
 8003d16:	4812      	ldr	r0, [pc, #72]	@ (8003d60 <main+0xa8>)
 8003d18:	f002 fb63 	bl	80063e2 <pal_gpio_set_low>
      HAL_Delay(10);
 8003d1c:	200a      	movs	r0, #10
 8003d1e:	f005 f8c1 	bl	8008ea4 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 8003d22:	480f      	ldr	r0, [pc, #60]	@ (8003d60 <main+0xa8>)
 8003d24:	f002 fb4d 	bl	80063c2 <pal_gpio_set_high>
      HAL_Delay(10);
 8003d28:	200a      	movs	r0, #10
 8003d2a:	f005 f8bb 	bl	8008ea4 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 8003d2e:	480d      	ldr	r0, [pc, #52]	@ (8003d64 <main+0xac>)
 8003d30:	f7ff ff96 	bl	8003c60 <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 8003d34:	480c      	ldr	r0, [pc, #48]	@ (8003d68 <main+0xb0>)
 8003d36:	f00a fd55 	bl	800e7e4 <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 8003d3a:	2064      	movs	r0, #100	@ 0x64
 8003d3c:	f005 f8b2 	bl	8008ea4 <HAL_Delay>

      optiga_main_logic();
 8003d40:	f7ff ff20 	bl	8003b84 <optiga_main_logic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <main+0x8c>
 8003d48:	20000634 	.word	0x20000634
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	0800f5ec 	.word	0x0800f5ec
 8003d54:	0800f60c 	.word	0x0800f60c
 8003d58:	200004fc 	.word	0x200004fc
 8003d5c:	0800f62c 	.word	0x0800f62c
 8003d60:	20000504 	.word	0x20000504
 8003d64:	200005e0 	.word	0x200005e0
 8003d68:	0800f644 	.word	0x0800f644

08003d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b094      	sub	sp, #80	@ 0x50
 8003d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d72:	f107 0320 	add.w	r3, r7, #32
 8003d76:	2230      	movs	r2, #48	@ 0x30
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f00a fd4a 	bl	800e814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	4b29      	ldr	r3, [pc, #164]	@ (8003e3c <SystemClock_Config+0xd0>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	4a28      	ldr	r2, [pc, #160]	@ (8003e3c <SystemClock_Config+0xd0>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da0:	4b26      	ldr	r3, [pc, #152]	@ (8003e3c <SystemClock_Config+0xd0>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dac:	2300      	movs	r3, #0
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	4b23      	ldr	r3, [pc, #140]	@ (8003e40 <SystemClock_Config+0xd4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003db8:	4a21      	ldr	r2, [pc, #132]	@ (8003e40 <SystemClock_Config+0xd4>)
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <SystemClock_Config+0xd4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003de0:	2310      	movs	r3, #16
 8003de2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003de4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003de8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003dea:	2304      	movs	r3, #4
 8003dec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003dee:	2307      	movs	r3, #7
 8003df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003df2:	f107 0320 	add.w	r3, r7, #32
 8003df6:	4618      	mov	r0, r3
 8003df8:	f008 fa14 	bl	800c224 <HAL_RCC_OscConfig>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003e02:	f000 f96d 	bl	80040e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e06:	230f      	movs	r3, #15
 8003e08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f008 fc76 	bl	800c714 <HAL_RCC_ClockConfig>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003e2e:	f000 f957 	bl	80040e0 <Error_Handler>
  }
}
 8003e32:	bf00      	nop
 8003e34:	3750      	adds	r7, #80	@ 0x50
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000

08003e44 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	201f      	movs	r0, #31
 8003e4e:	f005 f928 	bl	80090a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e52:	201f      	movs	r0, #31
 8003e54:	f005 f941 	bl	80090da <HAL_NVIC_EnableIRQ>
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e60:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e62:	4a13      	ldr	r2, [pc, #76]	@ (8003eb0 <MX_I2C1_Init+0x54>)
 8003e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003e66:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e68:	4a12      	ldr	r2, [pc, #72]	@ (8003eb4 <MX_I2C1_Init+0x58>)
 8003e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e78:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e86:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e98:	4804      	ldr	r0, [pc, #16]	@ (8003eac <MX_I2C1_Init+0x50>)
 8003e9a:	f005 fbb5 	bl	8009608 <HAL_I2C_Init>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ea4:	f000 f91c 	bl	80040e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200005e0 	.word	0x200005e0
 8003eb0:	40005400 	.word	0x40005400
 8003eb4:	00061a80 	.word	0x00061a80

08003eb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ecc:	463b      	mov	r3, r7
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003ed6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003eda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003ede:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee4:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8003eea:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003eec:	2209      	movs	r2, #9
 8003eee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003efc:	4813      	ldr	r0, [pc, #76]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003efe:	f008 fe29 	bl	800cb54 <HAL_TIM_Base_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f08:	f000 f8ea 	bl	80040e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	4619      	mov	r1, r3
 8003f18:	480c      	ldr	r0, [pc, #48]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003f1a:	f008 ffbd 	bl	800ce98 <HAL_TIM_ConfigClockSource>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003f24:	f000 f8dc 	bl	80040e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f30:	463b      	mov	r3, r7
 8003f32:	4619      	mov	r1, r3
 8003f34:	4805      	ldr	r0, [pc, #20]	@ (8003f4c <MX_TIM2_Init+0x94>)
 8003f36:	f009 f9bf 	bl	800d2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003f40:	f000 f8ce 	bl	80040e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000634 	.word	0x20000634

08003f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f56:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <MX_USART2_UART_Init+0x50>)
 8003f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f74:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f76:	220c      	movs	r2, #12
 8003f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f86:	4805      	ldr	r0, [pc, #20]	@ (8003f9c <MX_USART2_UART_Init+0x4c>)
 8003f88:	f009 fa18 	bl	800d3bc <HAL_UART_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f92:	f000 f8a5 	bl	80040e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000067c 	.word	0x2000067c
 8003fa0:	40004400 	.word	0x40004400

08003fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	@ 0x28
 8003fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003faa:	f107 0314 	add.w	r3, r7, #20
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	4b32      	ldr	r3, [pc, #200]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	4a31      	ldr	r2, [pc, #196]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fca:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b2b      	ldr	r3, [pc, #172]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	4a2a      	ldr	r2, [pc, #168]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe6:	4b28      	ldr	r3, [pc, #160]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4a23      	ldr	r2, [pc, #140]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6313      	str	r3, [r2, #48]	@ 0x30
 8004002:	4b21      	ldr	r3, [pc, #132]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	6313      	str	r3, [r2, #48]	@ 0x30
 800401e:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <MX_GPIO_Init+0xe4>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800402a:	2200      	movs	r2, #0
 800402c:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004030:	4816      	ldr	r0, [pc, #88]	@ (800408c <MX_GPIO_Init+0xe8>)
 8004032:	f005 fa91 	bl	8009558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800403a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800403c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	4619      	mov	r1, r3
 800404c:	4810      	ldr	r0, [pc, #64]	@ (8004090 <MX_GPIO_Init+0xec>)
 800404e:	f005 f8ff 	bl	8009250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8004052:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004058:	2301      	movs	r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4619      	mov	r1, r3
 800406a:	4808      	ldr	r0, [pc, #32]	@ (800408c <MX_GPIO_Init+0xe8>)
 800406c:	f005 f8f0 	bl	8009250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004070:	2200      	movs	r2, #0
 8004072:	2100      	movs	r1, #0
 8004074:	2028      	movs	r0, #40	@ 0x28
 8004076:	f005 f814 	bl	80090a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800407a:	2028      	movs	r0, #40	@ 0x28
 800407c:	f005 f82d 	bl	80090da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004080:	bf00      	nop
 8004082:	3728      	adds	r7, #40	@ 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	40020000 	.word	0x40020000
 8004090:	40020800 	.word	0x40020800

08004094 <goto_application>:

/* USER CODE BEGIN 4 */


static void goto_application(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
    printf("Jumping to application...\r\n");
 800409a:	480c      	ldr	r0, [pc, #48]	@ (80040cc <goto_application+0x38>)
 800409c:	f00a fba2 	bl	800e7e4 <puts>

    // Check if the value at the application's start is a valid stack pointer (RAM range)
    jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <goto_application+0x3c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0b      	ldr	r2, [pc, #44]	@ (80040d4 <goto_application+0x40>)
 80040a6:	6013      	str	r3, [r2, #0]
   	      /* Jump to user application */
   	      jumpToApplication = (pFunction)jumpAddress;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <goto_application+0x40>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <goto_application+0x44>)
 80040b0:	601a      	str	r2, [r3, #0]
   	      /* Initialize user application's Stack Pointer */
   	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <goto_application+0x48>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f383 8808 	msr	MSP, r3
}
 80040be:	bf00      	nop
   	      jumpToApplication();
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <goto_application+0x44>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4798      	blx	r3

    while (1); // should never be hit if jump is successful
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <goto_application+0x32>
 80040ca:	bf00      	nop
 80040cc:	0800f668 	.word	0x0800f668
 80040d0:	08020004 	.word	0x08020004
 80040d4:	200005dc 	.word	0x200005dc
 80040d8:	200005d8 	.word	0x200005d8
 80040dc:	08020000 	.word	0x08020000

080040e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040e4:	b672      	cpsid	i
}
 80040e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <Error_Handler+0x8>

080040ec <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
 80040f8:	4613      	mov	r3, r2
 80040fa:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 80040fc:	78bb      	ldrb	r3, [r7, #2]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d00e      	beq.n	8004120 <optiga_cmd_set_shielded_connection_option+0x34>
 8004102:	2b02      	cmp	r3, #2
 8004104:	dc10      	bgt.n	8004128 <optiga_cmd_set_shielded_connection_option+0x3c>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <optiga_cmd_set_shielded_connection_option+0x24>
 800410a:	2b01      	cmp	r3, #1
 800410c:	d004      	beq.n	8004118 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 800410e:	e00b      	b.n	8004128 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	769a      	strb	r2, [r3, #26]
        break;
 8004116:	e008      	b.n	800412a <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	76da      	strb	r2, [r3, #27]
        break;
 800411e:	e004      	b.n	800412a <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	771a      	strb	r2, [r3, #28]
        break;
 8004126:	e000      	b.n	800412a <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8004128:	bf00      	nop
    }
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
 8004142:	460b      	mov	r3, r1
 8004144:	71bb      	strb	r3, [r7, #6]
 8004146:	4613      	mov	r3, r2
 8004148:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	79fa      	ldrb	r2, [r7, #7]
 800414e:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	79ba      	ldrb	r2, [r7, #6]
 8004156:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004158:	88bb      	ldrh	r3, [r7, #4]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	b29a      	uxth	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	3302      	adds	r3, #2
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	3303      	adds	r3, #3
 800416a:	88ba      	ldrh	r2, [r7, #4]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60ba      	str	r2, [r7, #8]
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	4603      	mov	r3, r0
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	460b      	mov	r3, r1
 800418c:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	82fa      	strh	r2, [r7, #22]
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4413      	add	r3, r2
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80041a4:	89bb      	ldrh	r3, [r7, #12]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	8afb      	ldrh	r3, [r7, #22]
 80041ac:	1c59      	adds	r1, r3, #1
 80041ae:	82f9      	strh	r1, [r7, #22]
 80041b0:	4619      	mov	r1, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	440b      	add	r3, r1
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 80041ba:	8afb      	ldrh	r3, [r7, #22]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	82fa      	strh	r2, [r7, #22]
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4413      	add	r3, r2
 80041c6:	89ba      	ldrh	r2, [r7, #12]
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8afa      	ldrh	r2, [r7, #22]
 80041d0:	801a      	strh	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 80041e6:	2100      	movs	r1, #0
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 ff6f 	bl	80050cc <optiga_cmd_execute_handler>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	461a      	mov	r2, r3
 8004202:	460b      	mov	r3, r1
 8004204:	72fb      	strb	r3, [r7, #11]
 8004206:	4613      	mov	r3, r2
 8004208:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	7aba      	ldrb	r2, [r7, #10]
 8004214:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	7e3a      	ldrb	r2, [r7, #24]
 800421a:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	7afa      	ldrb	r2, [r7, #11]
 800422c:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8c3a      	ldrh	r2, [r7, #32]
 8004232:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8004234:	2100      	movs	r1, #0
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 ff48 	bl	80050cc <optiga_cmd_execute_handler>
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3308      	adds	r3, #8
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fece 	bl	8005ff2 <optiga_common_get_uint32>
 8004256:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 800425e:	d201      	bcs.n	8004264 <optiga_cmd_session_available+0x20>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <optiga_cmd_session_available+0x22>
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8a9b      	ldrh	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11d      	bne.n	80042c4 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e017      	b.n	80042be <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	4413      	add	r3, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b10      	cmp	r3, #16
 8004298:	d00e      	beq.n	80042b8 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	b21a      	sxth	r2, r3
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <optiga_cmd_session_assign+0x60>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	b21b      	sxth	r3, r3
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4413      	add	r3, r2
 80042b0:	2210      	movs	r2, #16
 80042b2:	701a      	strb	r2, [r3, #0]
                break;
 80042b4:	bf00      	nop
            }
        }
    }
}
 80042b6:	e005      	b.n	80042c4 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	3301      	adds	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d9e4      	bls.n	800428e <optiga_cmd_session_assign+0x1e>
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	ffffe100 	.word	0xffffe100

080042d4 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8a9b      	ldrh	r3, [r3, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8a9b      	ldrh	r3, [r3, #20]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 80042fe:	7afb      	ldrb	r3, [r7, #11]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
    }
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
 8004320:	4613      	mov	r3, r2
 8004322:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e027      	b.n	8004382 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d002      	beq.n	800433e <optiga_cmd_queue_get_count_of+0x2a>
 8004338:	2b09      	cmp	r3, #9
 800433a:	d00c      	beq.n	8004356 <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 800433c:	e017      	b.n	800436e <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	737b      	strb	r3, [r7, #13]
            break;
 8004354:	e00b      	b.n	800436e <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	737b      	strb	r3, [r7, #13]
            break;
 800436c:	bf00      	nop
        }
        if (state_to_check == slot_value)
 800436e:	78ba      	ldrb	r2, [r7, #2]
 8004370:	7b7b      	ldrb	r3, [r7, #13]
 8004372:	429a      	cmp	r2, r3
 8004374:	d102      	bne.n	800437c <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	3301      	adds	r3, #1
 800437a:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	3301      	adds	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b05      	cmp	r3, #5
 8004386:	d9d4      	bls.n	8004332 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8004388:	7bbb      	ldrb	r3, [r7, #14]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e01f      	b.n	80043e6 <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10f      	bne.n	80043e0 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
           break;
 80043de:	e006      	b.n	80043ee <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	3301      	adds	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d9dc      	bls.n	80043a6 <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7f9b      	ldrb	r3, [r3, #30]
 800440a:	4619      	mov	r1, r3
 800440c:	460b      	mov	r3, r1
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7f9b      	ldrb	r3, [r3, #30]
 8004426:	4619      	mov	r1, r3
 8004428:	460b      	mov	r3, r1
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	440b      	add	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	779a      	strb	r2, [r3, #30]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004458:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 800445a:	23ff      	movs	r3, #255	@ 0xff
 800445c:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800446c:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800446e:	2202      	movs	r2, #2
 8004470:	2109      	movs	r1, #9
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f7ff ff4e 	bl	8004314 <optiga_cmd_queue_get_count_of>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800447e:	2208      	movs	r2, #8
 8004480:	2109      	movs	r1, #9
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff ff46 	bl	8004314 <optiga_cmd_queue_get_count_of>
 8004488:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00f      	beq.n	80044ae <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800448e:	2204      	movs	r2, #4
 8004490:	2109      	movs	r1, #9
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7ff ff3e 	bl	8004314 <optiga_cmd_queue_get_count_of>
 8004498:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800449a:	2b01      	cmp	r3, #1
 800449c:	d10f      	bne.n	80044be <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 800449e:	2223      	movs	r2, #35	@ 0x23
 80044a0:	2108      	movs	r1, #8
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ff36 	bl	8004314 <optiga_cmd_queue_get_count_of>
 80044a8:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80044ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	496d      	ldr	r1, [pc, #436]	@ (800466c <optiga_cmd_queue_scheduler+0x220>)
 80044b6:	6938      	ldr	r0, [r7, #16]
 80044b8:	f002 f9cc 	bl	8006854 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 80044bc:	e0d2      	b.n	8004664 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 80044be:	6938      	ldr	r0, [r7, #16]
 80044c0:	f002 f9a2 	bl	8006808 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 80044c4:	7e7b      	ldrb	r3, [r7, #25]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	76fb      	strb	r3, [r7, #27]
 80044da:	e05b      	b.n	8004594 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 80044dc:	7efa      	ldrb	r2, [r7, #27]
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4413      	add	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 80044f0:	2208      	movs	r2, #8
 80044f2:	2109      	movs	r1, #9
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f7ff ff0d 	bl	8004314 <optiga_cmd_queue_get_count_of>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d10d      	bne.n	800451c <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	7a5b      	ldrb	r3, [r3, #9]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d142      	bne.n	800458e <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800450c:	2b23      	cmp	r3, #35	@ 0x23
 800450e:	d13e      	bne.n	800458e <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8004516:	7efb      	ldrb	r3, [r7, #27]
 8004518:	76bb      	strb	r3, [r7, #26]
 800451a:	e038      	b.n	800458e <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	7a5b      	ldrb	r3, [r3, #9]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d134      	bne.n	800458e <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800452e:	429a      	cmp	r2, r3
 8004530:	d201      	bcs.n	8004536 <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	429a      	cmp	r2, r3
 800453e:	d326      	bcc.n	800458e <optiga_cmd_queue_scheduler+0x142>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800454a:	429a      	cmp	r2, r3
 800454c:	d31f      	bcc.n	800458e <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004552:	2b22      	cmp	r3, #34	@ 0x22
 8004554:	d105      	bne.n	8004562 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f7ff fe74 	bl	8004244 <optiga_cmd_session_available>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d010      	beq.n	8004584 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004566:	2b22      	cmp	r3, #34	@ 0x22
 8004568:	d104      	bne.n	8004574 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	8a9b      	ldrh	r3, [r3, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d107      	bne.n	8004584 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004578:	2b21      	cmp	r3, #33	@ 0x21
 800457a:	d003      	beq.n	8004584 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004580:	2b23      	cmp	r3, #35	@ 0x23
 8004582:	d104      	bne.n	800458e <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 800458a:	7efb      	ldrb	r3, [r7, #27]
 800458c:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800458e:	7efb      	ldrb	r3, [r7, #27]
 8004590:	3301      	adds	r3, #1
 8004592:	76fb      	strb	r3, [r7, #27]
 8004594:	7efb      	ldrb	r3, [r7, #27]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d9a0      	bls.n	80044dc <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 800459a:	7ebb      	ldrb	r3, [r7, #26]
 800459c:	2bff      	cmp	r3, #255	@ 0xff
 800459e:	d102      	bne.n	80045a6 <optiga_cmd_queue_scheduler+0x15a>
 80045a0:	7e7b      	ldrb	r3, [r7, #25]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d08e      	beq.n	80044c4 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 80045a6:	7ebb      	ldrb	r3, [r7, #26]
 80045a8:	2bff      	cmp	r3, #255	@ 0xff
 80045aa:	d054      	beq.n	8004656 <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 80045ac:	7eba      	ldrb	r2, [r7, #26]
 80045ae:	4613      	mov	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80045c0:	7eba      	ldrb	r2, [r7, #26]
 80045c2:	6979      	ldr	r1, [r7, #20]
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b22      	cmp	r3, #34	@ 0x22
 80045d6:	d111      	bne.n	80045fc <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10c      	bne.n	80045fc <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 80045e2:	7eba      	ldrb	r2, [r7, #26]
 80045e4:	6979      	ldr	r1, [r7, #20]
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fe3a 	bl	8004270 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 80045fc:	7eba      	ldrb	r2, [r7, #26]
 80045fe:	6979      	ldr	r1, [r7, #20]
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004616:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8004618:	7eba      	ldrb	r2, [r7, #26]
 800461a:	6979      	ldr	r1, [r7, #20]
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2332      	movs	r3, #50	@ 0x32
 800462e:	4910      	ldr	r1, [pc, #64]	@ (8004670 <optiga_cmd_queue_scheduler+0x224>)
 8004630:	6938      	ldr	r0, [r7, #16]
 8004632:	f002 f90f 	bl	8006854 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8004636:	7eba      	ldrb	r2, [r7, #26]
 8004638:	6979      	ldr	r1, [r7, #20]
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004648:	2204      	movs	r2, #4
 800464a:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8004654:	e006      	b.n	8004664 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8004656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4903      	ldr	r1, [pc, #12]	@ (800466c <optiga_cmd_queue_scheduler+0x220>)
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f002 f8f8 	bl	8006854 <pal_os_event_register_callback_oneshot>
}
 8004664:	bf00      	nop
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	0800444d 	.word	0x0800444d
 8004670:	080041df 	.word	0x080041df

08004674 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004674:	b5b0      	push	{r4, r5, r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	7f9b      	ldrb	r3, [r3, #30]
 8004688:	4619      	mov	r1, r3
 800468a:	460b      	mov	r3, r1
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	440b      	add	r3, r1
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b23      	cmp	r3, #35	@ 0x23
 800469c:	d111      	bne.n	80046c2 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7f9b      	ldrb	r3, [r3, #30]
 80046a6:	4619      	mov	r1, r3
 80046a8:	460b      	mov	r3, r1
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	440b      	add	r3, r1
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80046b6:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80046b8:	2b23      	cmp	r3, #35	@ 0x23
 80046ba:	d112      	bne.n	80046e2 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	2b23      	cmp	r3, #35	@ 0x23
 80046c0:	d00f      	beq.n	80046e2 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681c      	ldr	r4, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7f9b      	ldrb	r3, [r3, #30]
 80046ca:	461d      	mov	r5, r3
 80046cc:	f002 f97e 	bl	80069cc <pal_os_timer_get_time_in_microseconds>
 80046d0:	4602      	mov	r2, r0
 80046d2:	462b      	mov	r3, r5
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	442b      	add	r3, r5
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4423      	add	r3, r4
 80046dc:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80046e0:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7f9b      	ldrb	r3, [r3, #30]
 80046ea:	4619      	mov	r1, r3
 80046ec:	460b      	mov	r3, r1
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	440b      	add	r3, r1
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7f9b      	ldrb	r3, [r3, #30]
 8004706:	4619      	mov	r1, r3
 8004708:	460b      	mov	r3, r1
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	440b      	add	r3, r1
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b23      	cmp	r3, #35	@ 0x23
 800471a:	d111      	bne.n	8004740 <optiga_cmd_queue_update_slot+0xcc>
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	2b23      	cmp	r3, #35	@ 0x23
 8004720:	d10e      	bne.n	8004740 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7f9b      	ldrb	r3, [r3, #30]
 800472a:	4619      	mov	r1, r3
 800472c:	460b      	mov	r3, r1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	440b      	add	r3, r1
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800473a:	2208      	movs	r2, #8
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e00d      	b.n	800475c <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7f9b      	ldrb	r3, [r3, #30]
 8004748:	4619      	mov	r1, r3
 800474a:	460b      	mov	r3, r1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	440b      	add	r3, r1
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004758:	2202      	movs	r2, #2
 800475a:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7f9b      	ldrb	r3, [r3, #30]
 8004764:	4619      	mov	r1, r3
 8004766:	460b      	mov	r3, r1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	440b      	add	r3, r1
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	701a      	strb	r2, [r3, #0]
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bdb0      	pop	{r4, r5, r7, pc}

08004780 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7f9b      	ldrb	r3, [r3, #30]
 8004790:	4619      	mov	r1, r3
 8004792:	460b      	mov	r3, r1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047a4:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7f9b      	ldrb	r3, [r3, #30]
 80047ae:	4619      	mov	r1, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	440b      	add	r3, r1
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7f9b      	ldrb	r3, [r3, #30]
 80047ca:	4619      	mov	r1, r3
 80047cc:	460b      	mov	r3, r1
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	440b      	add	r3, r1
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7f9b      	ldrb	r3, [r3, #30]
 80047e6:	4619      	mov	r1, r3
 80047e8:	460b      	mov	r3, r1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	440b      	add	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	4903      	ldr	r1, [pc, #12]	@ (8004818 <optiga_cmd_queue_reset_slot+0x98>)
 800480a:	f001 ffe5 	bl	80067d8 <pal_os_event_start>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	0800444d 	.word	0x0800444d

0800481c <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7f9b      	ldrb	r3, [r3, #30]
 800482c:	4619      	mov	r1, r3
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7f9b      	ldrb	r3, [r3, #30]
 8004848:	4619      	mov	r1, r3
 800484a:	460b      	mov	r3, r1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004870:	2122      	movs	r1, #34	@ 0x22
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fefe 	bl	8004674 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fd22 	bl	80042d4 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fee2 	bl	8004674 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ff5c 	bl	8004780 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80048da:	f240 2302 	movw	r3, #514	@ 0x202
 80048de:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d011      	beq.n	800490c <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 80048e8:	2308      	movs	r3, #8
 80048ea:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 80048f8:	f107 020c 	add.w	r2, r7, #12
 80048fc:	4619      	mov	r1, r3
 80048fe:	f001 fee3 	bl	80066c8 <pal_os_datastore_read>
 8004902:	4603      	mov	r3, r0
 8004904:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11a      	bne.n	8004942 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fb6c 	bl	8005ff2 <optiga_common_get_uint32>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fb62 	bl	8005ff2 <optiga_common_get_uint32>
 800492e:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8004934:	f240 2302 	movw	r3, #514	@ 0x202
 8004938:	81fb      	strh	r3, [r7, #14]
            break;
 800493a:	e003      	b.n	8004944 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 800493c:	2300      	movs	r3, #0
 800493e:	81fb      	strh	r3, [r7, #14]
 8004940:	e000      	b.n	8004944 <optiga_cmd_restore_context+0x72>
                break;
 8004942:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8004944:	89fb      	ldrh	r3, [r7, #14]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	7e5b      	ldrb	r3, [r3, #25]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d029      	beq.n	80049b6 <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004966:	2b22      	cmp	r3, #34	@ 0x22
 8004968:	d125      	bne.n	80049b6 <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004972:	2208      	movs	r2, #8
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f002 f810 	bl	800699c <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004980:	2b33      	cmp	r3, #51	@ 0x33
 8004982:	d118      	bne.n	80049b6 <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004988:	2b00      	cmp	r3, #0
 800498a:	d014      	beq.n	80049b6 <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004998:	2208      	movs	r2, #8
 800499a:	4619      	mov	r1, r3
 800499c:	f001 fe16 	bl	80065cc <pal_os_datastore_write>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8c1b      	ldrh	r3, [r3, #32]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2204      	movs	r2, #4
 80049b4:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	7ddb      	ldrb	r3, [r3, #23]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d05f      	beq.n	8004a98 <optiga_cmd_execute_comms_open+0xd8>
 80049d8:	2b02      	cmp	r3, #2
 80049da:	dc6d      	bgt.n	8004ab8 <optiga_cmd_execute_comms_open+0xf8>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <optiga_cmd_execute_comms_open+0x26>
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d01b      	beq.n	8004a1c <optiga_cmd_execute_comms_open+0x5c>
 80049e4:	e068      	b.n	8004ab8 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80049e6:	2121      	movs	r1, #33	@ 0x21
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff56 	bl	800489a <optiga_cmd_request_lock>
 80049ee:	4603      	mov	r3, r0
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8c1b      	ldrh	r3, [r3, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	759a      	strb	r2, [r3, #22]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f240 2202 	movw	r2, #514	@ 0x202
 8004a0a:	841a      	strh	r2, [r3, #32]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
                    break;
 8004a12:	e05c      	b.n	8004ace <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	75da      	strb	r2, [r3, #23]
                break;
 8004a1a:	e058      	b.n	8004ace <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	7e92      	ldrb	r2, [r2, #26]
 8004a26:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	7ed2      	ldrb	r2, [r2, #27]
 8004a32:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	7f12      	ldrb	r2, [r2, #28]
 8004a3e:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004a4e:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 f85c 	bl	8005b16 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 f865 	bl	8005b34 <optiga_comms_open>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8c1b      	ldrh	r3, [r3, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	759a      	strb	r2, [r3, #22]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f240 2202 	movw	r2, #514	@ 0x202
 8004a86:	841a      	strh	r2, [r3, #32]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
                    break;
 8004a8e:	e01e      	b.n	8004ace <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	75da      	strb	r2, [r3, #23]
                break;
 8004a96:	e01a      	b.n	8004ace <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004aa0:	2332      	movs	r3, #50	@ 0x32
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4910      	ldr	r1, [pc, #64]	@ (8004ae8 <optiga_cmd_execute_comms_open+0x128>)
 8004aa6:	f001 fed5 	bl	8006854 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2209      	movs	r2, #9
 8004ab4:	75da      	strb	r2, [r3, #23]
                break;
 8004ab6:	e00a      	b.n	8004ace <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2204      	movs	r2, #4
 8004abc:	759a      	strb	r2, [r3, #22]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f240 2202 	movw	r2, #514	@ 0x202
 8004ac4:	841a      	strh	r2, [r3, #32]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
            break;
 8004acc:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <optiga_cmd_execute_comms_open+0x120>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7d9b      	ldrb	r3, [r3, #22]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f43f af75 	beq.w	80049ca <optiga_cmd_execute_comms_open+0xa>
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	080041df 	.word	0x080041df

08004aec <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	7ddb      	ldrb	r3, [r3, #23]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d002      	beq.n	8004b0a <optiga_cmd_execute_comms_close+0x1e>
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d068      	beq.n	8004bda <optiga_cmd_execute_comms_close+0xee>
 8004b08:	e07a      	b.n	8004c00 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	7f1b      	ldrb	r3, [r3, #28]
 8004b0e:	2b22      	cmp	r3, #34	@ 0x22
 8004b10:	d002      	beq.n	8004b18 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	7e92      	ldrb	r2, [r2, #26]
 8004b22:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	7ed2      	ldrb	r2, [r2, #27]
 8004b2e:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	7f12      	ldrb	r2, [r2, #28]
 8004b46:	751a      	strb	r2, [r3, #20]
 8004b48:	e004      	b.n	8004b54 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2233      	movs	r2, #51	@ 0x33
 8004b52:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2204      	movs	r2, #4
 8004b62:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004b72:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ffca 	bl	8005b16 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 f851 	bl	8005c30 <optiga_comms_close>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8c1b      	ldrh	r3, [r3, #32]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	759a      	strb	r2, [r3, #22]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f240 2202 	movw	r2, #514	@ 0x202
 8004baa:	841a      	strh	r2, [r3, #32]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
                    break;
 8004bb2:	e031      	b.n	8004c18 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7f1b      	ldrb	r3, [r3, #28]
 8004bb8:	2b22      	cmp	r3, #34	@ 0x22
 8004bba:	d106      	bne.n	8004bca <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004bc8:	e026      	b.n	8004c18 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fe75 	bl	80048ba <optiga_cmd_release_lock>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	841a      	strh	r2, [r3, #32]
                break;
 8004bd8:	e01e      	b.n	8004c18 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68d2      	ldr	r2, [r2, #12]
 8004be2:	2100      	movs	r1, #0
 8004be4:	4610      	mov	r0, r2
 8004be6:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	7f1b      	ldrb	r3, [r3, #28]
 8004bec:	2b22      	cmp	r3, #34	@ 0x22
 8004bee:	d112      	bne.n	8004c16 <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fe62 	bl	80048ba <optiga_cmd_release_lock>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004bfe:	e00a      	b.n	8004c16 <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2204      	movs	r2, #4
 8004c04:	759a      	strb	r2, [r3, #22]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f240 2202 	movw	r2, #514	@ 0x202
 8004c0c:	841a      	strh	r2, [r3, #32]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
            break;
 8004c14:	e000      	b.n	8004c18 <optiga_cmd_execute_comms_close+0x12c>
                break;
 8004c16:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <optiga_cmd_execute_comms_close+0x13e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7d9b      	ldrb	r3, [r3, #22]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f43f af66 	beq.w	8004af6 <optiga_cmd_execute_comms_close+0xa>
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7ddb      	ldrb	r3, [r3, #23]
 8004c48:	3b05      	subs	r3, #5
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	f200 80d6 	bhi.w	8004dfc <optiga_cmd_execute_prepare_command+0x1c8>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <optiga_cmd_execute_prepare_command+0x24>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c6d 	.word	0x08004c6d
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004cc1 	.word	0x08004cc1
 8004c64:	08004cd5 	.word	0x08004cd5
 8004c68:	08004d11 	.word	0x08004d11
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7ddb      	ldrb	r3, [r3, #23]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d107      	bne.n	8004c8a <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fdf4 	bl	8004868 <optiga_cmd_request_session>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	841a      	strh	r2, [r3, #32]
 8004c88:	e007      	b.n	8004c9a <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004c8a:	2121      	movs	r1, #33	@ 0x21
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fe04 	bl	800489a <optiga_cmd_request_lock>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	8c1b      	ldrh	r3, [r3, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	759a      	strb	r2, [r3, #22]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f240 2202 	movw	r2, #514	@ 0x202
 8004cae:	841a      	strh	r2, [r3, #32]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
                    break;
 8004cb6:	e0ac      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2209      	movs	r2, #9
 8004cbc:	75da      	strb	r2, [r3, #23]
                break;
 8004cbe:	e0a8      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fdab 	bl	800481c <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
                break;
 8004cd2:	e09e      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8004cd4:	2123      	movs	r1, #35	@ 0x23
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fddf 	bl	800489a <optiga_cmd_request_lock>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8c1b      	ldrh	r3, [r3, #32]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	759a      	strb	r2, [r3, #22]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f240 2202 	movw	r2, #514	@ 0x202
 8004cf8:	841a      	strh	r2, [r3, #32]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
                    break;
 8004d00:	e087      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2209      	movs	r2, #9
 8004d06:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
                break;
 8004d0e:	e080      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8c1b      	ldrh	r3, [r3, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
                    break;
 8004d38:	e06b      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f240 6222 	movw	r2, #1570	@ 0x622
 8004d42:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	7e92      	ldrb	r2, [r2, #26]
 8004d4e:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	7ed2      	ldrb	r2, [r2, #27]
 8004d5a:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7e9a      	ldrb	r2, [r3, #26]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 feca 	bl	8005b16 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004d94:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004da2:	3306      	adds	r3, #6
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4623      	mov	r3, r4
 8004da8:	f000 fefc 	bl	8005ba4 <optiga_comms_transceive>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8c1b      	ldrh	r3, [r3, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	759a      	strb	r2, [r3, #22]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f240 2202 	movw	r2, #514	@ 0x202
 8004dc8:	841a      	strh	r2, [r3, #32]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
                    break;
 8004dd0:	e01f      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	220a      	movs	r2, #10
 8004ddc:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7f5b      	ldrb	r3, [r3, #29]
 8004de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	775a      	strb	r2, [r3, #29]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	7f5b      	ldrb	r3, [r3, #29]
 8004df0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	775a      	strb	r2, [r3, #29]
                break;
 8004dfa:	e00a      	b.n	8004e12 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	759a      	strb	r2, [r3, #22]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f240 2202 	movw	r2, #514	@ 0x202
 8004e08:	841a      	strh	r2, [r3, #32]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
            break;
 8004e10:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <optiga_cmd_execute_prepare_command+0x1f0>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7d9b      	ldrb	r3, [r3, #22]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	f43f af10 	beq.w	8004c44 <optiga_cmd_execute_prepare_command+0x10>
}
 8004e24:	bf00      	nop
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd90      	pop	{r4, r7, pc}

08004e2c <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fa69 	bl	8005314 <optiga_cmd_get_error_code_handler>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8c1b      	ldrh	r3, [r3, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <optiga_cmd_execute_get_device_error+0x30>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8c1b      	ldrh	r3, [r3, #32]
 8004e56:	b21b      	sxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da0a      	bge.n	8004e72 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e64:	d10c      	bne.n	8004e80 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7f5b      	ldrb	r3, [r3, #29]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d106      	bne.n	8004e80 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2204      	movs	r2, #4
 8004e76:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
            break;
 8004e7e:	bf00      	nop
        }
    } while (FALSE);
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7f5b      	ldrb	r3, [r3, #29]
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	da0b      	bge.n	8004ec0 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8c1b      	ldrh	r3, [r3, #32]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d14e      	bne.n	8004f5c <optiga_cmd_execute_process_optiga_response+0xd4>
 8004ebe:	e006      	b.n	8004ece <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
            break;
 8004ecc:	e06f      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2bf1      	cmp	r3, #241	@ 0xf1
 8004ed6:	d113      	bne.n	8004f00 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004ee0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4934      	ldr	r1, [pc, #208]	@ (8004fb8 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004ee8:	f001 fcb4 	bl	8006854 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2203      	movs	r2, #3
 8004efc:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8004efe:	e056      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7e1b      	ldrb	r3, [r3, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10e      	bne.n	8004f26 <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7ddb      	ldrb	r3, [r3, #23]
 8004f0c:	2b0e      	cmp	r3, #14
 8004f0e:	d006      	beq.n	8004f1e <optiga_cmd_execute_process_optiga_response+0x96>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	7ddb      	ldrb	r3, [r3, #23]
 8004f14:	2b0d      	cmp	r3, #13
 8004f16:	d002      	beq.n	8004f1e <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
                    break;
 8004f24:	e043      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4920      	ldr	r1, [pc, #128]	@ (8004fb8 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004f36:	f001 fc8d 	bl	8006854 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7e9b      	ldrb	r3, [r3, #26]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2209      	movs	r2, #9
 8004f58:	75da      	strb	r2, [r3, #23]
}
 8004f5a:	e028      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8c1b      	ldrh	r3, [r3, #32]
 8004f60:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8004f64:	d106      	bne.n	8004f74 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	220c      	movs	r2, #12
 8004f6a:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
                break;
 8004f72:	e01c      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7ddb      	ldrb	r3, [r3, #23]
 8004f78:	2b0d      	cmp	r3, #13
 8004f7a:	d103      	bne.n	8004f84 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
}
 8004f82:	e014      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	220b      	movs	r2, #11
 8004f88:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7f5b      	ldrb	r3, [r3, #29]
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	775a      	strb	r2, [r3, #29]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	7f5b      	ldrb	r3, [r3, #29]
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
}
 8004fac:	e7ff      	b.n	8004fae <optiga_cmd_execute_process_optiga_response+0x126>
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	080041df 	.word	0x080041df

08004fbc <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7ddb      	ldrb	r3, [r3, #23]
 8004fca:	3b0a      	subs	r3, #10
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d84d      	bhi.n	800506c <optiga_cmd_execute_process_response+0xb0>
 8004fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd8 <optiga_cmd_execute_process_response+0x1c>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004fed 	.word	0x08004fed
 8004fdc:	08004ff7 	.word	0x08004ff7
 8004fe0:	08005041 	.word	0x08005041
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005055 	.word	0x08005055
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ff4a 	bl	8004e88 <optiga_cmd_execute_process_optiga_response>
                break;
 8004ff4:	e045      	b.n	8005082 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff17 	bl	8004e2c <optiga_cmd_execute_get_device_error>
                break;
 8004ffe:	e040      	b.n	8005082 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fc3e 	bl	8004882 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8c1b      	ldrh	r3, [r3, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	220c      	movs	r2, #12
 8005012:	75da      	strb	r2, [r3, #23]
 8005014:	e010      	b.n	8005038 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	220b      	movs	r2, #11
 800501a:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7f5b      	ldrb	r3, [r3, #29]
 8005020:	f023 0303 	bic.w	r3, r3, #3
 8005024:	b2da      	uxtb	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	775a      	strb	r2, [r3, #29]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7f5b      	ldrb	r3, [r3, #29]
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
                break;
 800503e:	e020      	b.n	8005082 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fc3a 	bl	80048ba <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	220e      	movs	r2, #14
 800504a:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
                break;
 8005052:	e016      	b.n	8005082 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	68d0      	ldr	r0, [r2, #12]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	8c12      	ldrh	r2, [r2, #32]
 8005060:	4611      	mov	r1, r2
 8005062:	4798      	blx	r3
                *exit_loop = TRUE;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
                break;
 800506a:	e00a      	b.n	8005082 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2204      	movs	r2, #4
 8005070:	759a      	strb	r2, [r3, #22]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f240 2202 	movw	r2, #514	@ 0x202
 8005078:	841a      	strh	r2, [r3, #32]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
            break;
 8005080:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <optiga_cmd_execute_process_response+0xd6>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	7d9b      	ldrb	r3, [r3, #22]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d099      	beq.n	8004fc6 <optiga_cmd_execute_process_response+0xa>
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop

0800509c <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fc07 	bl	80048ba <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68d0      	ldr	r0, [r2, #12]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	8c12      	ldrh	r2, [r2, #32]
 80050b8:	4611      	mov	r1, r2
 80050ba:	4798      	blx	r3
        *exit_loop = TRUE;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff fc31 	bl	800494e <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2204      	movs	r2, #4
 80050f0:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	7d9b      	ldrb	r3, [r3, #22]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d830      	bhi.n	8005162 <optiga_cmd_execute_handler+0x96>
 8005100:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <optiga_cmd_execute_handler+0x3c>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800511d 	.word	0x0800511d
 800510c:	0800512b 	.word	0x0800512b
 8005110:	08005139 	.word	0x08005139
 8005114:	08005147 	.word	0x08005147
 8005118:	08005155 	.word	0x08005155
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 800511c:	f107 030b 	add.w	r3, r7, #11
 8005120:	4619      	mov	r1, r3
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff fc4c 	bl	80049c0 <optiga_cmd_execute_comms_open>
                break;
 8005128:	e01c      	b.n	8005164 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 800512a:	f107 030b 	add.w	r3, r7, #11
 800512e:	4619      	mov	r1, r3
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff fcdb 	bl	8004aec <optiga_cmd_execute_comms_close>
                break;
 8005136:	e015      	b.n	8005164 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8005138:	f107 030b 	add.w	r3, r7, #11
 800513c:	4619      	mov	r1, r3
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff fd78 	bl	8004c34 <optiga_cmd_execute_prepare_command>
                break;
 8005144:	e00e      	b.n	8005164 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8005146:	f107 030b 	add.w	r3, r7, #11
 800514a:	4619      	mov	r1, r3
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7ff ff35 	bl	8004fbc <optiga_cmd_execute_process_response>
                break;
 8005152:	e007      	b.n	8005164 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8005154:	f107 030b 	add.w	r3, r7, #11
 8005158:	4619      	mov	r1, r3
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff ff9e 	bl	800509c <optiga_cmd_execute_error_handler>
                break;
 8005160:	e000      	b.n	8005164 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 8005162:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8005164:	7afb      	ldrb	r3, [r7, #11]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0c6      	beq.n	80050f8 <optiga_cmd_execute_handler+0x2c>
}
 800516a:	bf00      	nop
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8005186:	f001 fbd3 	bl	8006930 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d15b      	bne.n	8005248 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	4a33      	ldr	r2, [pc, #204]	@ (8005260 <optiga_cmd_create+0xec>)
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	2200      	movs	r2, #0
 800519a:	2109      	movs	r1, #9
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff f8b9 	bl	8004314 <optiga_cmd_queue_get_count_of>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d051      	beq.n	800524c <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 80051a8:	2128      	movs	r1, #40	@ 0x28
 80051aa:	2001      	movs	r0, #1
 80051ac:	f001 fbce 	bl	800694c <pal_os_calloc>
 80051b0:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d04b      	beq.n	8005250 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	4a26      	ldr	r2, [pc, #152]	@ (8005260 <optiga_cmd_create+0xec>)
 80051c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	4a24      	ldr	r2, [pc, #144]	@ (8005264 <optiga_cmd_create+0xf0>)
 80051d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	7b1b      	ldrb	r3, [r3, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d129      	bne.n	800523a <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681c      	ldr	r4, [r3, #0]
 80051ee:	4611      	mov	r1, r2
 80051f0:	481d      	ldr	r0, [pc, #116]	@ (8005268 <optiga_cmd_create+0xf4>)
 80051f2:	f001 fb17 	bl	8006824 <pal_os_event_create>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681c      	ldr	r4, [r3, #0]
 8005200:	6979      	ldr	r1, [r7, #20]
 8005202:	481a      	ldr	r0, [pc, #104]	@ (800526c <optiga_cmd_create+0xf8>)
 8005204:	f000 fc4a 	bl	8005a9c <optiga_comms_create>
 8005208:	4603      	mov	r3, r0
 800520a:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f001 fba6 	bl	8006968 <pal_os_free>
                me = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
                break;
 8005220:	e017      	b.n	8005252 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005238:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	331e      	adds	r3, #30
 800523e:	4619      	mov	r1, r3
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f7ff f8a8 	bl	8004396 <optiga_cmd_queue_assign_slot>
 8005246:	e004      	b.n	8005252 <optiga_cmd_create+0xde>
            break;
 8005248:	bf00      	nop
 800524a:	e002      	b.n	8005252 <optiga_cmd_create+0xde>
            break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <optiga_cmd_create+0xde>
            break;
 8005250:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8005252:	f001 fb74 	bl	800693e <pal_os_lock_exit_critical_section>
    return (me);
 8005256:	697b      	ldr	r3, [r7, #20]
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	200004cc 	.word	0x200004cc
 8005264:	200004d0 	.word	0x200004d0
 8005268:	0800444d 	.word	0x0800444d
 800526c:	080050cd 	.word	0x080050cd

08005270 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005278:	f240 2302 	movw	r3, #514	@ 0x202
 800527c:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 800527e:	f001 fb57 	bl	8006930 <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d03c      	beq.n	8005302 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fafa 	bl	8004882 <optiga_cmd_release_session>
 800528e:	4603      	mov	r3, r0
 8005290:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff f8b1 	bl	80043fa <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 8005298:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <optiga_cmd_destroy+0xa0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	2109      	movs	r1, #9
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff f837 	bl	8004314 <optiga_cmd_queue_get_count_of>
 80052a6:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d125      	bne.n	80052f8 <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d120      	bne.n	80052f8 <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 faa2 	bl	8006808 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fc03 	bl	8005ae8 <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 fb12 	bl	800691c <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 fb35 	bl	8006968 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 80052fe:	2300      	movs	r3, #0
 8005300:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 8005302:	f001 fb1c 	bl	800693e <pal_os_lock_exit_critical_section>

    return (return_status);
 8005306:	89fb      	ldrh	r3, [r7, #14]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	200004cc 	.word	0x200004cc

08005314 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8005314:	b590      	push	{r4, r7, lr}
 8005316:	b087      	sub	sp, #28
 8005318:	af02      	add	r7, sp, #8
 800531a:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 800531c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005320:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005322:	2309      	movs	r3, #9
 8005324:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	7f5b      	ldrb	r3, [r3, #29]
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	2b03      	cmp	r3, #3
 8005336:	f000 8099 	beq.w	800546c <optiga_cmd_get_error_code_handler+0x158>
 800533a:	2b03      	cmp	r3, #3
 800533c:	f300 80b6 	bgt.w	80054ac <optiga_cmd_get_error_code_handler+0x198>
 8005340:	2b01      	cmp	r3, #1
 8005342:	d002      	beq.n	800534a <optiga_cmd_get_error_code_handler+0x36>
 8005344:	2b02      	cmp	r3, #2
 8005346:	d052      	beq.n	80053ee <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 8005348:	e0b0      	b.n	80054ac <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f103 020d 	add.w	r2, r3, #13
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fe11 	bl	8005f82 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005360:	89bb      	ldrh	r3, [r7, #12]
 8005362:	3302      	adds	r3, #2
 8005364:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f103 020d 	add.w	r2, r3, #13
 800536e:	89bb      	ldrh	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fe04 	bl	8005f82 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800537a:	89bb      	ldrh	r3, [r7, #12]
 800537c:	3302      	adds	r3, #2
 800537e:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f103 020d 	add.w	r2, r3, #13
 8005388:	89bb      	ldrh	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fdf7 	bl	8005f82 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005394:	89bb      	ldrh	r3, [r7, #12]
 8005396:	3302      	adds	r3, #2
 8005398:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800539a:	89bb      	ldrh	r3, [r7, #12]
 800539c:	3b09      	subs	r3, #9
 800539e:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80053a6:	3305      	adds	r3, #5
 80053a8:	2100      	movs	r1, #0
 80053aa:	2001      	movs	r0, #1
 80053ac:	f7fe fec3 	bl	8004136 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	89ba      	ldrh	r2, [r7, #12]
 80053b6:	3a05      	subs	r2, #5
 80053b8:	b292      	uxth	r2, r2
 80053ba:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7f5b      	ldrb	r3, [r3, #29]
 80053c0:	f023 0303 	bic.w	r3, r3, #3
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	775a      	strb	r2, [r3, #29]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7f5b      	ldrb	r3, [r3, #29]
 80053ce:	f043 0302 	orr.w	r3, r3, #2
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80053e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4935      	ldr	r1, [pc, #212]	@ (80054bc <optiga_cmd_get_error_code_handler+0x1a8>)
 80053e8:	f001 fa34 	bl	8006854 <pal_os_event_register_callback_oneshot>
        break;
 80053ec:	e061      	b.n	80054b2 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f240 6222 	movw	r2, #1570	@ 0x622
 80053f6:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	7e92      	ldrb	r2, [r2, #26]
 8005402:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	7ed2      	ldrb	r2, [r2, #27]
 800540e:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fb7d 	bl	8005b16 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	3306      	adds	r3, #6
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	4623      	mov	r3, r4
 8005438:	f000 fbb4 	bl	8005ba4 <optiga_comms_transceive>
 800543c:	4603      	mov	r3, r0
 800543e:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 8005446:	f240 2302 	movw	r3, #514	@ 0x202
 800544a:	81fb      	strh	r3, [r7, #14]
                break;
 800544c:	e031      	b.n	80054b2 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	7f5b      	ldrb	r3, [r3, #29]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	b2da      	uxtb	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	775a      	strb	r2, [r3, #29]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	7f5b      	ldrb	r3, [r3, #29]
 8005460:	f043 0303 	orr.w	r3, r3, #3
 8005464:	b2da      	uxtb	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	775a      	strb	r2, [r3, #29]
        break;
 800546a:	e022      	b.n	80054b2 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	7c9b      	ldrb	r3, [r3, #18]
 8005472:	2bff      	cmp	r3, #255	@ 0xff
 8005474:	d01c      	beq.n	80054b0 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	7d9b      	ldrb	r3, [r3, #22]
 800547c:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 800547e:	89fb      	ldrh	r3, [r7, #14]
 8005480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005488:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2203      	movs	r2, #3
 800548e:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	220a      	movs	r2, #10
 8005494:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 800549e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4905      	ldr	r1, [pc, #20]	@ (80054bc <optiga_cmd_get_error_code_handler+0x1a8>)
 80054a6:	f001 f9d5 	bl	8006854 <pal_os_event_register_callback_oneshot>
        break;
 80054aa:	e002      	b.n	80054b2 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 80054b0:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 80054b2:	89fb      	ldrh	r3, [r7, #14]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}
 80054bc:	080041df 	.word	0x080041df

080054c0 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80054c8:	f240 2302 	movw	r3, #514	@ 0x202
 80054cc:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7d9b      	ldrb	r3, [r3, #22]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d002      	beq.n	80054dc <optiga_cmd_open_application_handler+0x1c>
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d075      	beq.n	80055c6 <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 80054da:	e08e      	b.n	80055fa <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 80054dc:	2314      	movs	r3, #20
 80054de:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7e5b      	ldrb	r3, [r3, #25]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <optiga_cmd_open_application_handler+0x2c>
 80054e8:	2200      	movs	r2, #0
 80054ea:	e000      	b.n	80054ee <optiga_cmd_open_application_handler+0x2e>
 80054ec:	2208      	movs	r2, #8
 80054ee:	89bb      	ldrh	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80054f4:	89bb      	ldrh	r3, [r7, #12]
 80054f6:	f240 6215 	movw	r2, #1557	@ 0x615
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d903      	bls.n	8005506 <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80054fe:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005502:	81fb      	strh	r3, [r7, #14]
                break;
 8005504:	e079      	b.n	80055fa <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7e5b      	ldrb	r3, [r3, #25]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff f9df 	bl	80048d2 <optiga_cmd_restore_context>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d16e      	bne.n	80055f8 <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <optiga_cmd_open_application_handler+0x6a>
 8005526:	2210      	movs	r2, #16
 8005528:	e000      	b.n	800552c <optiga_cmd_open_application_handler+0x6c>
 800552a:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005532:	3305      	adds	r3, #5
 8005534:	20f0      	movs	r0, #240	@ 0xf0
 8005536:	f7fe fdfe 	bl	8004136 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330d      	adds	r3, #13
 8005540:	3309      	adds	r3, #9
 8005542:	2210      	movs	r2, #16
 8005544:	492f      	ldr	r1, [pc, #188]	@ (8005604 <optiga_cmd_open_application_handler+0x144>)
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fa19 	bl	800697e <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	7e5b      	ldrb	r3, [r3, #25]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005564:	2208      	movs	r2, #8
 8005566:	4619      	mov	r1, r3
 8005568:	f001 fa09 	bl	800697e <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <optiga_cmd_open_application_handler+0xb8>
 8005574:	2214      	movs	r2, #20
 8005576:	e000      	b.n	800557a <optiga_cmd_open_application_handler+0xba>
 8005578:	221c      	movs	r2, #28
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005588:	2208      	movs	r2, #8
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f001 fa05 	bl	800699c <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005596:	2b00      	cmp	r3, #0
 8005598:	d012      	beq.n	80055c0 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80055a6:	2208      	movs	r2, #8
 80055a8:	4619      	mov	r1, r3
 80055aa:	f001 f80f 	bl	80065cc <pal_os_datastore_write>
 80055ae:	4603      	mov	r3, r0
 80055b0:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 80055b8:	f240 2302 	movw	r3, #514	@ 0x202
 80055bc:	81fb      	strh	r3, [r7, #14]
                    break;
 80055be:	e01c      	b.n	80055fa <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 80055c0:	2300      	movs	r3, #0
 80055c2:	81fb      	strh	r3, [r7, #14]
        break;
 80055c4:	e019      	b.n	80055fa <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	7c9b      	ldrb	r3, [r3, #18]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	7f5b      	ldrb	r3, [r3, #29]
 80055d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	775a      	strb	r2, [r3, #29]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7f5a      	ldrb	r2, [r3, #29]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	775a      	strb	r2, [r3, #29]
                break;
 80055e6:	e008      	b.n	80055fa <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2233      	movs	r2, #51	@ 0x33
 80055f0:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 80055f2:	2300      	movs	r3, #0
 80055f4:	81fb      	strh	r3, [r7, #14]
        break;
 80055f6:	e000      	b.n	80055fa <optiga_cmd_open_application_handler+0x13a>
                    break;
 80055f8:	bf00      	nop
    }

    return (return_status);
 80055fa:	89fb      	ldrh	r3, [r7, #14]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	0800f694 	.word	0x0800f694

08005608 <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af04      	add	r7, sp, #16
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	460b      	mov	r3, r1
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005616:	7af9      	ldrb	r1, [r7, #11]
 8005618:	23f0      	movs	r3, #240	@ 0xf0
 800561a:	9302      	str	r3, [sp, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	4a04      	ldr	r2, [pc, #16]	@ (8005638 <optiga_cmd_open_application+0x30>)
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7fe fde4 	bl	80041f6 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	080054c1 	.word	0x080054c1

0800563c <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800564a:	f240 2302 	movw	r3, #514	@ 0x202
 800564e:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005650:	2309      	movs	r3, #9
 8005652:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 8005654:	2381      	movs	r3, #129	@ 0x81
 8005656:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7d9b      	ldrb	r3, [r3, #22]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d002      	beq.n	8005666 <optiga_cmd_get_data_object_handler+0x2a>
 8005660:	2b03      	cmp	r3, #3
 8005662:	d06e      	beq.n	8005742 <optiga_cmd_get_data_object_handler+0x106>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005664:	e0ec      	b.n	8005840 <optiga_cmd_get_data_object_handler+0x204>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8005666:	230a      	movs	r3, #10
 8005668:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800566a:	8a3b      	ldrh	r3, [r7, #16]
 800566c:	f240 6215 	movw	r2, #1557	@ 0x615
 8005670:	4293      	cmp	r3, r2
 8005672:	d907      	bls.n	8005684 <optiga_cmd_get_data_object_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005674:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005678:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	801a      	strh	r2, [r3, #0]
                break;
 8005682:	e0dd      	b.n	8005840 <optiga_cmd_get_data_object_handler+0x204>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	8bbb      	ldrh	r3, [r7, #28]
 800568a:	3308      	adds	r3, #8
 800568c:	4413      	add	r3, r2
 800568e:	1d5a      	adds	r2, r3, #5
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	891b      	ldrh	r3, [r3, #8]
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f000 fc73 	bl	8005f82 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800569c:	8bbb      	ldrh	r3, [r7, #28]
 800569e:	3302      	adds	r3, #2
 80056a0:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	899b      	ldrh	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	89db      	ldrh	r3, [r3, #14]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f240 6211 	movw	r2, #1553	@ 0x611
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bfa8      	it	ge
 80056b6:	4613      	movge	r3, r2
 80056b8:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	7c9b      	ldrb	r3, [r3, #18]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11f      	bne.n	8005702 <optiga_cmd_get_data_object_handler+0xc6>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	8bbb      	ldrh	r3, [r7, #28]
 80056c8:	3308      	adds	r3, #8
 80056ca:	4413      	add	r3, r2
 80056cc:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	895a      	ldrh	r2, [r3, #10]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056d6:	4413      	add	r3, r2
 80056d8:	b29b      	uxth	r3, r3
 80056da:	4619      	mov	r1, r3
 80056dc:	f000 fc51 	bl	8005f82 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80056e0:	8bbb      	ldrh	r3, [r7, #28]
 80056e2:	3302      	adds	r3, #2
 80056e4:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	8bbb      	ldrh	r3, [r7, #28]
 80056ec:	3308      	adds	r3, #8
 80056ee:	4413      	add	r3, r2
 80056f0:	3305      	adds	r3, #5
 80056f2:	89fa      	ldrh	r2, [r7, #14]
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fc43 	bl	8005f82 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80056fc:	8bbb      	ldrh	r3, [r7, #28]
 80056fe:	3302      	adds	r3, #2
 8005700:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	891b      	ldrh	r3, [r3, #8]
 8005706:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 800570a:	4293      	cmp	r3, r2
 800570c:	d101      	bne.n	8005712 <optiga_cmd_get_data_object_handler+0xd6>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 800570e:	2301      	movs	r3, #1
 8005710:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7e59      	ldrb	r1, [r3, #25]
 8005716:	8bbb      	ldrh	r3, [r7, #28]
 8005718:	3b09      	subs	r3, #9
 800571a:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 8005722:	3305      	adds	r3, #5
 8005724:	7ef8      	ldrb	r0, [r7, #27]
 8005726:	f7fe fd06 	bl	8004136 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	8bba      	ldrh	r2, [r7, #28]
 8005730:	3a05      	subs	r2, #5
 8005732:	b292      	uxth	r2, r2
 8005734:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	89fa      	ldrh	r2, [r7, #14]
 800573a:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 800573c:	2300      	movs	r3, #0
 800573e:	83fb      	strh	r3, [r7, #30]
        break;
 8005740:	e07e      	b.n	8005840 <optiga_cmd_get_data_object_handler+0x204>
            me->chaining_ongoing = FALSE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	7c9b      	ldrb	r3, [r3, #18]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d025      	beq.n	800579e <optiga_cmd_get_data_object_handler+0x162>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	89db      	ldrh	r3, [r3, #14]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <optiga_cmd_get_data_object_handler+0x13c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7f5b      	ldrb	r3, [r3, #29]
 800575e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005762:	b2da      	uxtb	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	775a      	strb	r2, [r3, #29]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7f5b      	ldrb	r3, [r3, #29]
 800576c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005770:	b2da      	uxtb	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	775a      	strb	r2, [r3, #29]
 8005776:	e00e      	b.n	8005796 <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7f5b      	ldrb	r3, [r3, #29]
 800577c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005780:	b2da      	uxtb	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	775a      	strb	r2, [r3, #29]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	7f5a      	ldrb	r2, [r3, #29]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 8005796:	f240 2302 	movw	r3, #514	@ 0x202
 800579a:	83fb      	strh	r3, [r7, #30]
        break;
 800579c:	e04f      	b.n	800583e <optiga_cmd_get_data_object_handler+0x202>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8c1b      	ldrh	r3, [r3, #32]
 80057a2:	f248 0208 	movw	r2, #32776	@ 0x8008
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d107      	bne.n	80057ba <optiga_cmd_get_data_object_handler+0x17e>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	89d2      	ldrh	r2, [r2, #14]
 80057b2:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 80057b4:	2300      	movs	r3, #0
 80057b6:	83fb      	strh	r3, [r7, #30]
        break;
 80057b8:	e041      	b.n	800583e <optiga_cmd_get_data_object_handler+0x202>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	88db      	ldrh	r3, [r3, #6]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	899b      	ldrh	r3, [r3, #12]
 80057c8:	8a7a      	ldrh	r2, [r7, #18]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d907      	bls.n	80057de <optiga_cmd_get_data_object_handler+0x1a2>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80057ce:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80057d2:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2200      	movs	r2, #0
 80057da:	801a      	strh	r2, [r3, #0]
                    break;
 80057dc:	e030      	b.n	8005840 <optiga_cmd_get_data_object_handler+0x204>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	89d2      	ldrh	r2, [r2, #14]
 80057e6:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 80057ee:	3309      	adds	r3, #9
 80057f0:	8a7a      	ldrh	r2, [r7, #18]
 80057f2:	4619      	mov	r1, r3
 80057f4:	f001 f8c3 	bl	800697e <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	89da      	ldrh	r2, [r3, #14]
 80057fc:	8a7b      	ldrh	r3, [r7, #18]
 80057fe:	4413      	add	r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	8a1b      	ldrh	r3, [r3, #16]
 800580a:	8a7a      	ldrh	r2, [r7, #18]
 800580c:	429a      	cmp	r2, r3
 800580e:	d305      	bcc.n	800581c <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	89da      	ldrh	r2, [r3, #14]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d10b      	bne.n	8005834 <optiga_cmd_get_data_object_handler+0x1f8>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	89d2      	ldrh	r2, [r2, #14]
 8005824:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2200      	movs	r2, #0
 800582a:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	821a      	strh	r2, [r3, #16]
 8005832:	e002      	b.n	800583a <optiga_cmd_get_data_object_handler+0x1fe>
                    me->chaining_ongoing = TRUE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	761a      	strb	r2, [r3, #24]
                return_status = OPTIGA_LIB_SUCCESS;
 800583a:	2300      	movs	r3, #0
 800583c:	83fb      	strh	r3, [r7, #30]
        break;
 800583e:	bf00      	nop
    }

    return (return_status);
 8005840:	8bfb      	ldrh	r3, [r7, #30]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af04      	add	r7, sp, #16
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	460b      	mov	r3, r1
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800585a:	7af9      	ldrb	r1, [r7, #11]
 800585c:	2381      	movs	r3, #129	@ 0x81
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	2306      	movs	r3, #6
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2302      	movs	r3, #2
 800586a:	4a04      	ldr	r2, [pc, #16]	@ (800587c <optiga_cmd_get_data_object+0x30>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7fe fcc2 	bl	80041f6 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	0800563d 	.word	0x0800563d

08005880 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800588e:	2309      	movs	r3, #9
 8005890:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005892:	f240 2302 	movw	r3, #514	@ 0x202
 8005896:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	7d9b      	ldrb	r3, [r3, #22]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d003      	beq.n	80058a8 <optiga_cmd_verify_sign_handler+0x28>
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	f000 80c7 	beq.w	8005a34 <optiga_cmd_verify_sign_handler+0x1b4>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 80058a6:	e0d9      	b.n	8005a5c <optiga_cmd_verify_sign_handler+0x1dc>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	7c1b      	ldrb	r3, [r3, #16]
 80058ac:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	899b      	ldrh	r3, [r3, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <optiga_cmd_verify_sign_handler+0x4a>
                                     p_optiga_verify_sign->public_key->length));
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80058c4:	3309      	adds	r3, #9
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	e000      	b.n	80058cc <optiga_cmd_verify_sign_handler+0x4c>
 80058ca:	2305      	movs	r3, #5
 80058cc:	4413      	add	r3, r2
 80058ce:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80058d0:	330a      	adds	r3, #10
 80058d2:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	f240 6215 	movw	r2, #1557	@ 0x615
 80058da:	4293      	cmp	r3, r2
 80058dc:	d903      	bls.n	80058e6 <optiga_cmd_verify_sign_handler+0x66>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80058de:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80058e2:	82fb      	strh	r3, [r7, #22]
                break;
 80058e4:	e0ba      	b.n	8005a5c <optiga_cmd_verify_sign_handler+0x1dc>
                                          p_optiga_verify_sign->digest_length,
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80058ea:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	2001      	movs	r0, #1
 80058fa:	f7fe fc3f 	bl	800417c <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330d      	adds	r3, #13
 8005904:	89ba      	ldrh	r2, [r7, #12]
 8005906:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005910:	461a      	mov	r2, r3
 8005912:	f001 f834 	bl	800697e <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	7c1b      	ldrb	r3, [r3, #16]
 800591a:	461a      	mov	r2, r3
 800591c:	89bb      	ldrh	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	b29b      	uxth	r3, r3
 8005922:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8005930:	f107 030c 	add.w	r3, r7, #12
 8005934:	2002      	movs	r0, #2
 8005936:	f7fe fc21 	bl	800417c <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330d      	adds	r3, #13
 8005940:	89ba      	ldrh	r2, [r7, #12]
 8005942:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800594c:	461a      	mov	r2, r3
 800594e:	f001 f816 	bl	800697e <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	899a      	ldrh	r2, [r3, #12]
 8005956:	89bb      	ldrh	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	b29b      	uxth	r3, r3
 800595c:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	7c5b      	ldrb	r3, [r3, #17]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d119      	bne.n	800599a <optiga_cmd_verify_sign_handler+0x11a>
                                              me->p_optiga->optiga_comms_buffer,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 800596e:	f107 030c 	add.w	r3, r7, #12
 8005972:	2102      	movs	r1, #2
 8005974:	2004      	movs	r0, #4
 8005976:	f7fe fc01 	bl	800417c <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330d      	adds	r3, #13
 8005980:	89ba      	ldrh	r2, [r7, #12]
 8005982:	441a      	add	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	89db      	ldrh	r3, [r3, #14]
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f000 faf9 	bl	8005f82 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005990:	89bb      	ldrh	r3, [r7, #12]
 8005992:	3302      	adds	r3, #2
 8005994:	b29b      	uxth	r3, r3
 8005996:	81bb      	strh	r3, [r7, #12]
 8005998:	e037      	b.n	8005a0a <optiga_cmd_verify_sign_handler+0x18a>
                                              me->p_optiga->optiga_comms_buffer,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 80059a2:	f107 030c 	add.w	r3, r7, #12
 80059a6:	2101      	movs	r1, #1
 80059a8:	2005      	movs	r0, #5
 80059aa:	f7fe fbe7 	bl	800417c <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f103 010d 	add.w	r1, r3, #13
 80059ba:	89bb      	ldrh	r3, [r7, #12]
 80059bc:	1c58      	adds	r0, r3, #1
 80059be:	b280      	uxth	r0, r0
 80059c0:	81b8      	strh	r0, [r7, #12]
 80059c2:	440b      	add	r3, r1
 80059c4:	7992      	ldrb	r2, [r2, #6]
 80059c6:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80059cc:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80059d6:	f107 030c 	add.w	r3, r7, #12
 80059da:	2006      	movs	r0, #6
 80059dc:	f7fe fbce 	bl	800417c <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330d      	adds	r3, #13
 80059e6:	89ba      	ldrh	r2, [r7, #12]
 80059e8:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 ffc1 	bl	800697e <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	889a      	ldrh	r2, [r3, #4]
 8005a02:	89bb      	ldrh	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7e59      	ldrb	r1, [r3, #25]
 8005a0e:	89bb      	ldrh	r3, [r7, #12]
 8005a10:	3b09      	subs	r3, #9
 8005a12:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005a1a:	3305      	adds	r3, #5
 8005a1c:	20b2      	movs	r0, #178	@ 0xb2
 8005a1e:	f7fe fb8a 	bl	8004136 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005a22:	89ba      	ldrh	r2, [r7, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3a05      	subs	r2, #5
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	82fb      	strh	r3, [r7, #22]
        break;
 8005a32:	e013      	b.n	8005a5c <optiga_cmd_verify_sign_handler+0x1dc>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	7c9b      	ldrb	r3, [r3, #18]
 8005a3a:	2bff      	cmp	r3, #255	@ 0xff
 8005a3c:	d10b      	bne.n	8005a56 <optiga_cmd_verify_sign_handler+0x1d6>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	7f5b      	ldrb	r3, [r3, #29]
 8005a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	775a      	strb	r2, [r3, #29]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	7f5a      	ldrb	r2, [r3, #29]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	775a      	strb	r2, [r3, #29]
                break;
 8005a54:	e002      	b.n	8005a5c <optiga_cmd_verify_sign_handler+0x1dc>
            return_status = OPTIGA_LIB_SUCCESS;
 8005a56:	2300      	movs	r3, #0
 8005a58:	82fb      	strh	r3, [r7, #22]
        break;
 8005a5a:	bf00      	nop
    }

    return (return_status);
 8005a5c:	8afb      	ldrh	r3, [r7, #22]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af04      	add	r7, sp, #16
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	460b      	mov	r3, r1
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005a76:	7af9      	ldrb	r1, [r7, #11]
 8005a78:	23b2      	movs	r3, #178	@ 0xb2
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	2306      	movs	r3, #6
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	2302      	movs	r3, #2
 8005a86:	4a04      	ldr	r2, [pc, #16]	@ (8005a98 <optiga_cmd_verify_sign+0x30>)
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7fe fbb4 	bl	80041f6 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	08005881 	.word	0x08005881

08005a9c <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 8005aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae4 <optiga_comms_create+0x48>)
 8005aac:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	7c1b      	ldrb	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d110      	bne.n	8005ad8 <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8005ab6:	f000 fc0c 	bl	80062d2 <pal_init>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
                break;
 8005ac4:	e008      	b.n	8005ad8 <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200004d4 	.word	0x200004d4

08005ae8 <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7c1b      	ldrb	r3, [r3, #16]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d10a      	bne.n	8005b0e <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 8005b0a:	f000 fbea 	bl	80062e2 <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	609a      	str	r2, [r3, #8]
    return (0);
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005b3c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005b40:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8a6 	bl	8005c94 <check_optiga_comms_state>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d122      	bne.n	8005b94 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4a10      	ldr	r2, [pc, #64]	@ (8005ba0 <optiga_comms_open+0x6c>)
 8005b5e:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	7d12      	ldrb	r2, [r2, #20]
 8005b6a:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fa fcf6 	bl	8000570 <ifx_i2c_open>
 8005b84:	4603      	mov	r3, r0
 8005b86:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005b94:	89fb      	ldrh	r3, [r7, #14]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005cc9 	.word	0x08005cc9

08005ba4 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005bb4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005bb8:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f86a 	bl	8005c94 <check_optiga_comms_state>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d12c      	bne.n	8005c20 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	@ (8005c2c <optiga_comms_transceive+0x88>)
 8005bd6:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	7c92      	ldrb	r2, [r2, #18]
 8005be2:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	7cd2      	ldrb	r2, [r2, #19]
 8005bee:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	7d12      	ldrb	r2, [r2, #20]
 8005bfa:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6858      	ldr	r0, [r3, #4]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	f7fa fce9 	bl	80005e2 <ifx_i2c_transceive>
 8005c10:	4603      	mov	r3, r0
 8005c12:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c14:	8afb      	ldrh	r3, [r7, #22]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c20:	8afb      	ldrh	r3, [r7, #22]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08005cc9 	.word	0x08005cc9

08005c30 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c38:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c3c:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f828 	bl	8005c94 <check_optiga_comms_state>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11c      	bne.n	8005c84 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a0d      	ldr	r2, [pc, #52]	@ (8005c90 <optiga_comms_close+0x60>)
 8005c5a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	7d12      	ldrb	r2, [r2, #20]
 8005c66:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fa fcf0 	bl	8000654 <ifx_i2c_close>
 8005c74:	4603      	mov	r3, r0
 8005c76:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c78:	89fb      	ldrh	r3, [r7, #14]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c84:	89fb      	ldrh	r3, [r7, #14]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	08005cc9 	.word	0x08005cc9

08005c94 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c9c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005ca0:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <check_optiga_comms_state+0x26>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	7c5b      	ldrb	r3, [r3, #17]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d004      	beq.n	8005cba <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005cba:	89fb      	ldrh	r3, [r7, #14]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	887a      	ldrh	r2, [r7, #2]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	745a      	strb	r2, [r3, #17]
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    me->handler(me->caller_context, event);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d14:	8879      	ldrh	r1, [r7, #2]
 8005d16:	4610      	mov	r0, r2
 8005d18:	4798      	blx	r3
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <optiga_crypt_reset_protection_level+0x18>
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8005d30:	2200      	movs	r2, #0
 8005d32:	2101      	movs	r1, #1
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f880 	bl	8005e3a <optiga_crypt_set_comms_params>
    }
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	460b      	mov	r3, r1
 8005d50:	72fb      	strb	r3, [r7, #11]
 8005d52:	4613      	mov	r3, r2
 8005d54:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8005d56:	f240 4302 	movw	r3, #1026	@ 0x402
 8005d5a:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00c      	beq.n	8005d7c <optiga_crypt_verify+0x3a>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <optiga_crypt_verify+0x3a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <optiga_crypt_verify+0x3a>
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005d7c:	f240 4303 	movw	r3, #1027	@ 0x403
 8005d80:	82fb      	strh	r3, [r7, #22]
            break;
 8005d82:	e052      	b.n	8005e2a <optiga_crypt_verify+0xe8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d103      	bne.n	8005d96 <optiga_crypt_verify+0x54>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005d8e:	f240 4305 	movw	r3, #1029	@ 0x405
 8005d92:	82fb      	strh	r3, [r7, #22]
            break;
 8005d94:	e049      	b.n	8005e2a <optiga_crypt_verify+0xe8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2234      	movs	r2, #52	@ 0x34
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fdf7 	bl	800699c <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005db8:	2200      	movs	r2, #0
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f7fe f996 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f7fe f98d 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	7aba      	ldrb	r2, [r7, #10]
 8005ddc:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	6a3a      	ldr	r2, [r7, #32]
 8005de2:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005de8:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005df0:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8005df2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <optiga_crypt_verify+0xc2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	81da      	strh	r2, [r3, #14]
 8005e02:	e002      	b.n	8005e0a <optiga_crypt_verify+0xc8>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e08:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0e:	7af9      	ldrb	r1, [r7, #11]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fe28 	bl	8005a68 <optiga_cmd_verify_sign>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005e1c:	8afb      	ldrh	r3, [r7, #22]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <optiga_crypt_verify+0xe8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff ff79 	bl	8005d22 <optiga_crypt_reset_protection_level>

    return (return_value);
 8005e30:	8afb      	ldrh	r3, [r7, #22]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <optiga_crypt_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
 8005e46:	4613      	mov	r3, r2
 8005e48:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d002      	beq.n	8005e56 <optiga_crypt_set_comms_params+0x1c>
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d005      	beq.n	8005e60 <optiga_crypt_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005e54:	e009      	b.n	8005e6a <optiga_crypt_set_comms_params+0x30>
            me->protection_level = value;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	78ba      	ldrb	r2, [r7, #2]
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            break;
 8005e5e:	e004      	b.n	8005e6a <optiga_crypt_set_comms_params+0x30>
            me->protocol_version = value;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	78ba      	ldrb	r2, [r7, #2]
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
            break;
 8005e68:	bf00      	nop
        }
    }
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02c      	beq.n	8005eea <optiga_crypt_create+0x72>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8005e90:	2144      	movs	r1, #68	@ 0x44
 8005e92:	2001      	movs	r0, #1
 8005e94:	f000 fd5a 	bl	800694c <pal_os_calloc>
 8005e98:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d026      	beq.n	8005eee <optiga_crypt_create+0x76>
        {
            break;
        }

        me->handler = handler;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
        me->caller_context = caller_context;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	490c      	ldr	r1, [pc, #48]	@ (8005efc <optiga_crypt_create+0x84>)
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff f952 	bl	8005174 <optiga_cmd_create>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <optiga_crypt_create+0x78>
        {
            pal_os_free(me);
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	f000 fd42 	bl	8006968 <pal_os_free>
            me = NULL;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e002      	b.n	8005ef0 <optiga_crypt_create+0x78>
            break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <optiga_crypt_create+0x78>
            break;
 8005eee:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8005ef0:	697b      	ldr	r3, [r7, #20]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	08005cf5 	.word	0x08005cf5

08005f00 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005f0e:	f240 4303 	movw	r3, #1027	@ 0x403
 8005f12:	81fb      	strh	r3, [r7, #14]
            break;
 8005f14:	e012      	b.n	8005f3c <optiga_crypt_destroy+0x3c>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d103      	bne.n	8005f28 <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005f20:	f240 4305 	movw	r3, #1029	@ 0x405
 8005f24:	81fb      	strh	r3, [r7, #14]
            break;
 8005f26:	e009      	b.n	8005f3c <optiga_crypt_destroy+0x3c>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff f99f 	bl	8005270 <optiga_cmd_destroy>
 8005f32:	4603      	mov	r3, r0
 8005f34:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fd16 	bl	8006968 <pal_os_free>

    } while (FALSE);
    return (return_value);
 8005f3c:	89fb      	ldrh	r3, [r7, #14]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b08a      	sub	sp, #40	@ 0x28
 8005f4a:	af06      	add	r7, sp, #24
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
 8005f56:	79fa      	ldrb	r2, [r7, #7]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	7f3b      	ldrb	r3, [r7, #28]
 8005f62:	9302      	str	r3, [sp, #8]
 8005f64:	8b3b      	ldrh	r3, [r7, #24]
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	2111      	movs	r1, #17
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff fee5 	bl	8005d42 <optiga_crypt_verify>
 8005f78:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005f8e:	887b      	ldrh	r3, [r7, #2]
 8005f90:	0a1b      	lsrs	r3, r3, #8
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	0e1b      	lsrs	r3, r3, #24
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	0c1a      	lsrs	r2, r3, #16
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	0a1a      	lsrs	r2, r3, #8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3303      	adds	r3, #3
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	061a      	lsls	r2, r3, #24
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3301      	adds	r3, #1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3302      	adds	r3, #2
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006010:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	3103      	adds	r1, #3
 8006016:	7809      	ldrb	r1, [r1, #0]
 8006018:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6992      	ldr	r2, [r2, #24]
 800604a:	8879      	ldrh	r1, [r7, #2]
 800604c:	4610      	mov	r0, r2
 800604e:	4798      	blx	r3
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8006066:	2200      	movs	r2, #0
 8006068:	2101      	movs	r1, #1
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f804 	bl	8006078 <optiga_util_set_comms_params>
    }
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
 8006084:	4613      	mov	r3, r2
 8006086:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d002      	beq.n	8006094 <optiga_util_set_comms_params+0x1c>
 800608e:	2b02      	cmp	r3, #2
 8006090:	d005      	beq.n	800609e <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8006092:	e009      	b.n	80060a8 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	78ba      	ldrb	r2, [r7, #2]
 8006098:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 800609c:	e004      	b.n	80060a8 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	78ba      	ldrb	r2, [r7, #2]
 80060a2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 80060a6:	bf00      	nop
        }
    }
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d02b      	beq.n	8006124 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80060cc:	2124      	movs	r1, #36	@ 0x24
 80060ce:	2001      	movs	r0, #1
 80060d0:	f000 fc3c 	bl	800694c <pal_os_calloc>
 80060d4:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d025      	beq.n	8006128 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	490c      	ldr	r1, [pc, #48]	@ (8006134 <optiga_util_create+0x80>)
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff f835 	bl	8005174 <optiga_cmd_create>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d108      	bne.n	800612a <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8006118:	6978      	ldr	r0, [r7, #20]
 800611a:	f000 fc25 	bl	8006968 <pal_os_free>
            me = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	e002      	b.n	800612a <optiga_util_create+0x76>
            break;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <optiga_util_create+0x76>
            break;
 8006128:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 800612a:	697b      	ldr	r3, [r7, #20]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	0800602d 	.word	0x0800602d

08006138 <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8006144:	f240 3302 	movw	r3, #770	@ 0x302
 8006148:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <optiga_util_open_application+0x20>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8006158:	f240 3303 	movw	r3, #771	@ 0x303
 800615c:	81fb      	strh	r3, [r7, #14]
            break;
 800615e:	e03d      	b.n	80061dc <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8c1b      	ldrh	r3, [r3, #32]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d103      	bne.n	8006170 <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8006168:	f240 3305 	movw	r3, #773	@ 0x305
 800616c:	81fb      	strh	r3, [r7, #14]
            break;
 800616e:	e035      	b.n	80061dc <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6958      	ldr	r0, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006180:	2200      	movs	r2, #0
 8006182:	4619      	mov	r1, r3
 8006184:	f7fd ffb2 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6958      	ldr	r0, [r3, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006192:	2201      	movs	r2, #1
 8006194:	4619      	mov	r1, r3
 8006196:	f7fd ffa9 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d107      	bne.n	80061b0 <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	2202      	movs	r2, #2
 80061a6:	2133      	movs	r1, #51	@ 0x33
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fd ff9f 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
 80061ae:	e006      	b.n	80061be <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	2202      	movs	r2, #2
 80061b6:	2111      	movs	r1, #17
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fd ff97 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	78f9      	ldrb	r1, [r7, #3]
 80061c4:	2200      	movs	r2, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fa1e 	bl	8005608 <optiga_cmd_open_application>
 80061cc:	4603      	mov	r3, r0
 80061ce:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 80061d0:	89fb      	ldrh	r3, [r7, #14]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ff3b 	bl	8006058 <optiga_util_reset_protection_level>

    return (return_value);
 80061e2:	89fb      	ldrh	r3, [r7, #14]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	460b      	mov	r3, r1
 80061f8:	817b      	strh	r3, [r7, #10]
 80061fa:	4613      	mov	r3, r2
 80061fc:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 80061fe:	f240 3302 	movw	r3, #770	@ 0x302
 8006202:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <optiga_util_read_data+0x32>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <optiga_util_read_data+0x32>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800621e:	f240 3303 	movw	r3, #771	@ 0x303
 8006222:	82fb      	strh	r3, [r7, #22]
            break;
 8006224:	e04d      	b.n	80062c2 <optiga_util_read_data+0xd6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8c1b      	ldrh	r3, [r3, #32]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d103      	bne.n	8006236 <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800622e:	f240 3305 	movw	r3, #773	@ 0x305
 8006232:	82fb      	strh	r3, [r7, #22]
            break;
 8006234:	e045      	b.n	80062c2 <optiga_util_read_data+0xd6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2214      	movs	r2, #20
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fba8 	bl	800699c <pal_os_memset>

        p_params->oid = optiga_oid;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	897a      	ldrh	r2, [r7, #10]
 8006250:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	893a      	ldrh	r2, [r7, #8]
 8006256:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2200      	movs	r2, #0
 800625c:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2200      	movs	r2, #0
 8006276:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2200      	movs	r2, #0
 800627c:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6958      	ldr	r0, [r3, #20]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006288:	2200      	movs	r2, #0
 800628a:	4619      	mov	r1, r3
 800628c:	f7fd ff2e 	bl	80040ec <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6958      	ldr	r0, [r3, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800629a:	2201      	movs	r2, #1
 800629c:	4619      	mov	r1, r3
 800629e:	f7fd ff25 	bl	80040ec <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6958      	ldr	r0, [r3, #20]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	7c9b      	ldrb	r3, [r3, #18]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4619      	mov	r1, r3
 80062ae:	f7ff facd 	bl	800584c <optiga_cmd_get_data_object>
 80062b2:	4603      	mov	r3, r0
 80062b4:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 80062b6:	8afb      	ldrh	r3, [r7, #22]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <optiga_util_read_data+0xd6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7ff fec8 	bl	8006058 <optiga_util_reset_protection_level>

    return (return_value);
 80062c8:	8afb      	ldrh	r3, [r7, #22]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 80062d2:	b480      	push	{r7}
 80062d4:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <pal_deinit>:


pal_status_t pal_deinit(void)
{
 80062e2:	b480      	push	{r7}
 80062e4:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	461a      	mov	r2, r3
 80062fe:	460b      	mov	r3, r1
 8006300:	817b      	strh	r3, [r7, #10]
 8006302:	4613      	mov	r3, r2
 8006304:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	2b00      	cmp	r3, #0
 800630a:	d012      	beq.n	8006332 <pal_crypt_tls_prf_sha256+0x40>
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00f      	beq.n	8006332 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	82fb      	strh	r3, [r7, #22]
 8006316:	e007      	b.n	8006328 <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8006318:	8afb      	ldrh	r3, [r7, #22]
 800631a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800631c:	4413      	add	r3, r2
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8006322:	8afb      	ldrh	r3, [r7, #22]
 8006324:	3301      	adds	r3, #1
 8006326:	82fb      	strh	r3, [r7, #22]
 8006328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	8afa      	ldrh	r2, [r7, #22]
 800632e:	429a      	cmp	r2, r3
 8006330:	d3f2      	bcc.n	8006318 <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 800634e:	2300      	movs	r3, #0
 8006350:	82fb      	strh	r3, [r7, #22]
 8006352:	e00a      	b.n	800636a <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 8006354:	8afb      	ldrh	r3, [r7, #22]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	441a      	add	r2, r3
 800635a:	8afb      	ldrh	r3, [r7, #22]
 800635c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800635e:	440b      	add	r3, r1
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8006364:	8afb      	ldrh	r3, [r7, #22]
 8006366:	3301      	adds	r3, #1
 8006368:	82fb      	strh	r3, [r7, #22]
 800636a:	8afa      	ldrh	r2, [r7, #22]
 800636c:	8c3b      	ldrh	r3, [r7, #32]
 800636e:	429a      	cmp	r2, r3
 8006370:	d3f0      	bcc.n	8006354 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8006390:	2300      	movs	r3, #0
 8006392:	82fb      	strh	r3, [r7, #22]
 8006394:	e00a      	b.n	80063ac <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 8006396:	8afb      	ldrh	r3, [r7, #22]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	441a      	add	r2, r3
 800639c:	8afb      	ldrh	r3, [r7, #22]
 800639e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80063a0:	440b      	add	r3, r1
 80063a2:	7812      	ldrb	r2, [r2, #0]
 80063a4:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80063a6:	8afb      	ldrh	r3, [r7, #22]
 80063a8:	3301      	adds	r3, #1
 80063aa:	82fb      	strh	r3, [r7, #22]
 80063ac:	8afa      	ldrh	r2, [r7, #22]
 80063ae:	8c3b      	ldrh	r3, [r7, #32]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d3f0      	bcc.n	8006396 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063d2:	2201      	movs	r2, #1
 80063d4:	4619      	mov	r1, r3
 80063d6:	f003 f8bf 	bl	8009558 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063f2:	2200      	movs	r2, #0
 80063f4:	4619      	mov	r1, r3
 80063f6:	f003 f8af 	bl	8009558 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 800640c:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <pal_i2c_acquire+0x2c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8006414:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <pal_i2c_acquire+0x2c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <pal_i2c_acquire+0x2c>)
 800641c:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 8006422:	2301      	movs	r3, #1
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000d54 	.word	0x20000d54

08006434 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 800643c:	4b04      	ldr	r3, [pc, #16]	@ (8006450 <pal_i2c_release+0x1c>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000d54 	.word	0x20000d54

08006454 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ffd8 	bl	8006434 <pal_i2c_release>
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	bd90      	pop	{r4, r7, pc}

0800648c <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff9a 	bl	8006404 <pal_i2c_acquire>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d120      	bne.n	8006518 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 80064d6:	4a16      	ldr	r2, [pc, #88]	@ (8006530 <pal_i2c_write+0x78>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	b299      	uxth	r1, r3
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064ee:	9200      	str	r2, [sp, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	f003 f9e3 	bl	80098bc <HAL_I2C_Master_Transmit>
 80064f6:	4603      	mov	r3, r0
 80064f8:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 80064fa:	7d7b      	ldrb	r3, [r7, #21]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006500:	2100      	movs	r1, #0
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ffa6 	bl	8006454 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006508:	2300      	movs	r3, #0
 800650a:	82fb      	strh	r3, [r7, #22]
 800650c:	e00a      	b.n	8006524 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 800650e:	2101      	movs	r1, #1
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ff9f 	bl	8006454 <invoke_upper_layer_callback>
 8006516:	e005      	b.n	8006524 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006518:	2302      	movs	r3, #2
 800651a:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 800651c:	2102      	movs	r1, #2
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff ff98 	bl	8006454 <invoke_upper_layer_callback>
    }

    return status;
 8006524:	8afb      	ldrh	r3, [r7, #22]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000d58 	.word	0x20000d58

08006534 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006542:	2301      	movs	r3, #1
 8006544:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff ff5c 	bl	8006404 <pal_i2c_acquire>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d120      	bne.n	8006594 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006552:	4a16      	ldr	r2, [pc, #88]	@ (80065ac <pal_i2c_read+0x78>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	b299      	uxth	r1, r3
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800656a:	9200      	str	r2, [sp, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	f003 faa3 	bl	8009ab8 <HAL_I2C_Master_Receive>
 8006572:	4603      	mov	r3, r0
 8006574:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006576:	7d7b      	ldrb	r3, [r7, #21]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d106      	bne.n	800658a <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff ff68 	bl	8006454 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006584:	2300      	movs	r3, #0
 8006586:	82fb      	strh	r3, [r7, #22]
 8006588:	e00a      	b.n	80065a0 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 800658a:	2101      	movs	r1, #1
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff ff61 	bl	8006454 <invoke_upper_layer_callback>
 8006592:	e005      	b.n	80065a0 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006594:	2302      	movs	r3, #2
 8006596:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006598:	2102      	movs	r1, #2
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff ff5a 	bl	8006454 <invoke_upper_layer_callback>
    }

    return status;
 80065a0:	8afb      	ldrh	r3, [r7, #22]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000d58 	.word	0x20000d58

080065b0 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	6039      	str	r1, [r7, #0]
 80065d6:	80fb      	strh	r3, [r7, #6]
 80065d8:	4613      	mov	r3, r2
 80065da:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80065dc:	2301      	movs	r3, #1
 80065de:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b33      	cmp	r3, #51	@ 0x33
 80065e8:	d043      	beq.n	8006672 <pal_os_datastore_write+0xa6>
 80065ea:	2b33      	cmp	r3, #51	@ 0x33
 80065ec:	dc5e      	bgt.n	80066ac <pal_os_datastore_write+0xe0>
 80065ee:	2b11      	cmp	r3, #17
 80065f0:	d002      	beq.n	80065f8 <pal_os_datastore_write+0x2c>
 80065f2:	2b22      	cmp	r3, #34	@ 0x22
 80065f4:	d020      	beq.n	8006638 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 80065f6:	e059      	b.n	80066ac <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80065f8:	88bb      	ldrh	r3, [r7, #4]
 80065fa:	2b40      	cmp	r3, #64	@ 0x40
 80065fc:	d858      	bhi.n	80066b0 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 80065fe:	88bb      	ldrh	r3, [r7, #4]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	b299      	uxth	r1, r3
 8006604:	7b7b      	ldrb	r3, [r7, #13]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	737a      	strb	r2, [r7, #13]
 800660a:	461a      	mov	r2, r3
 800660c:	b2c9      	uxtb	r1, r1
 800660e:	4b2b      	ldr	r3, [pc, #172]	@ (80066bc <pal_os_datastore_write+0xf0>)
 8006610:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8006612:	7b7b      	ldrb	r3, [r7, #13]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	737a      	strb	r2, [r7, #13]
 8006618:	461a      	mov	r2, r3
 800661a:	88bb      	ldrh	r3, [r7, #4]
 800661c:	b2d9      	uxtb	r1, r3
 800661e:	4b27      	ldr	r3, [pc, #156]	@ (80066bc <pal_os_datastore_write+0xf0>)
 8006620:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8006622:	7b7b      	ldrb	r3, [r7, #13]
 8006624:	4a25      	ldr	r2, [pc, #148]	@ (80066bc <pal_os_datastore_write+0xf0>)
 8006626:	4413      	add	r3, r2
 8006628:	88ba      	ldrh	r2, [r7, #4]
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f008 f936 	bl	800e89e <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8006632:	2300      	movs	r3, #0
 8006634:	81fb      	strh	r3, [r7, #14]
            break;
 8006636:	e03b      	b.n	80066b0 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8006638:	88bb      	ldrh	r3, [r7, #4]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	b299      	uxth	r1, r3
 800663e:	7b7b      	ldrb	r3, [r7, #13]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	737a      	strb	r2, [r7, #13]
 8006644:	461a      	mov	r2, r3
 8006646:	b2c9      	uxtb	r1, r1
 8006648:	4b1d      	ldr	r3, [pc, #116]	@ (80066c0 <pal_os_datastore_write+0xf4>)
 800664a:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 800664c:	7b7b      	ldrb	r3, [r7, #13]
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	737a      	strb	r2, [r7, #13]
 8006652:	461a      	mov	r2, r3
 8006654:	88bb      	ldrh	r3, [r7, #4]
 8006656:	b2d9      	uxtb	r1, r3
 8006658:	4b19      	ldr	r3, [pc, #100]	@ (80066c0 <pal_os_datastore_write+0xf4>)
 800665a:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 800665c:	7b7b      	ldrb	r3, [r7, #13]
 800665e:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <pal_os_datastore_write+0xf4>)
 8006660:	4413      	add	r3, r2
 8006662:	88ba      	ldrh	r2, [r7, #4]
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f008 f919 	bl	800e89e <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 800666c:	2300      	movs	r3, #0
 800666e:	81fb      	strh	r3, [r7, #14]
            break;
 8006670:	e01f      	b.n	80066b2 <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8006672:	88bb      	ldrh	r3, [r7, #4]
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	b299      	uxth	r1, r3
 8006678:	7b7b      	ldrb	r3, [r7, #13]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	737a      	strb	r2, [r7, #13]
 800667e:	461a      	mov	r2, r3
 8006680:	b2c9      	uxtb	r1, r1
 8006682:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <pal_os_datastore_write+0xf8>)
 8006684:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8006686:	7b7b      	ldrb	r3, [r7, #13]
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	737a      	strb	r2, [r7, #13]
 800668c:	461a      	mov	r2, r3
 800668e:	88bb      	ldrh	r3, [r7, #4]
 8006690:	b2d9      	uxtb	r1, r3
 8006692:	4b0c      	ldr	r3, [pc, #48]	@ (80066c4 <pal_os_datastore_write+0xf8>)
 8006694:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8006696:	7b7b      	ldrb	r3, [r7, #13]
 8006698:	4a0a      	ldr	r2, [pc, #40]	@ (80066c4 <pal_os_datastore_write+0xf8>)
 800669a:	4413      	add	r3, r2
 800669c:	88ba      	ldrh	r2, [r7, #4]
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f008 f8fc 	bl	800e89e <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80066a6:	2300      	movs	r3, #0
 80066a8:	81fb      	strh	r3, [r7, #14]
            break;
 80066aa:	e002      	b.n	80066b2 <pal_os_datastore_write+0xe6>
            break;
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <pal_os_datastore_write+0xe6>
            break;
 80066b0:	bf00      	nop
        }
    }
    return return_status;
 80066b2:	89fb      	ldrh	r3, [r7, #14]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	2000050c 	.word	0x2000050c
 80066c0:	20000d5c 	.word	0x20000d5c
 80066c4:	20000da0 	.word	0x20000da0

080066c8 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 80066de:	89fb      	ldrh	r3, [r7, #14]
 80066e0:	2b33      	cmp	r3, #51	@ 0x33
 80066e2:	d049      	beq.n	8006778 <pal_os_datastore_read+0xb0>
 80066e4:	2b33      	cmp	r3, #51	@ 0x33
 80066e6:	dc67      	bgt.n	80067b8 <pal_os_datastore_read+0xf0>
 80066e8:	2b11      	cmp	r3, #17
 80066ea:	d002      	beq.n	80066f2 <pal_os_datastore_read+0x2a>
 80066ec:	2b22      	cmp	r3, #34	@ 0x22
 80066ee:	d023      	beq.n	8006738 <pal_os_datastore_read+0x70>
 80066f0:	e062      	b.n	80067b8 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 80066f2:	7d7b      	ldrb	r3, [r7, #21]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	757a      	strb	r2, [r7, #21]
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b34      	ldr	r3, [pc, #208]	@ (80067cc <pal_os_datastore_read+0x104>)
 80066fc:	5c9b      	ldrb	r3, [r3, r2]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8006702:	7d7b      	ldrb	r3, [r7, #21]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	757a      	strb	r2, [r7, #21]
 8006708:	461a      	mov	r2, r3
 800670a:	4b30      	ldr	r3, [pc, #192]	@ (80067cc <pal_os_datastore_read+0x104>)
 800670c:	5c9b      	ldrb	r3, [r3, r2]
 800670e:	461a      	mov	r2, r3
 8006710:	8a7b      	ldrh	r3, [r7, #18]
 8006712:	4313      	orrs	r3, r2
 8006714:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006716:	8a7b      	ldrh	r3, [r7, #18]
 8006718:	2b40      	cmp	r3, #64	@ 0x40
 800671a:	d851      	bhi.n	80067c0 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 800671c:	7d7b      	ldrb	r3, [r7, #21]
 800671e:	4a2b      	ldr	r2, [pc, #172]	@ (80067cc <pal_os_datastore_read+0x104>)
 8006720:	4413      	add	r3, r2
 8006722:	8a7a      	ldrh	r2, [r7, #18]
 8006724:	4619      	mov	r1, r3
 8006726:	68b8      	ldr	r0, [r7, #8]
 8006728:	f008 f8b9 	bl	800e89e <memcpy>
                *p_buffer_length = data_length;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8a7a      	ldrh	r2, [r7, #18]
 8006730:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8006732:	2300      	movs	r3, #0
 8006734:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8006736:	e043      	b.n	80067c0 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8006738:	7d7b      	ldrb	r3, [r7, #21]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	757a      	strb	r2, [r7, #21]
 800673e:	461a      	mov	r2, r3
 8006740:	4b23      	ldr	r3, [pc, #140]	@ (80067d0 <pal_os_datastore_read+0x108>)
 8006742:	5c9b      	ldrb	r3, [r3, r2]
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006748:	7d7b      	ldrb	r3, [r7, #21]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	757a      	strb	r2, [r7, #21]
 800674e:	461a      	mov	r2, r3
 8006750:	4b1f      	ldr	r3, [pc, #124]	@ (80067d0 <pal_os_datastore_read+0x108>)
 8006752:	5c9b      	ldrb	r3, [r3, r2]
 8006754:	461a      	mov	r2, r3
 8006756:	8a7b      	ldrh	r3, [r7, #18]
 8006758:	4313      	orrs	r3, r2
 800675a:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 800675c:	7d7b      	ldrb	r3, [r7, #21]
 800675e:	4a1c      	ldr	r2, [pc, #112]	@ (80067d0 <pal_os_datastore_read+0x108>)
 8006760:	4413      	add	r3, r2
 8006762:	8a7a      	ldrh	r2, [r7, #18]
 8006764:	4619      	mov	r1, r3
 8006766:	68b8      	ldr	r0, [r7, #8]
 8006768:	f008 f899 	bl	800e89e <memcpy>
            *p_buffer_length = data_length;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8a7a      	ldrh	r2, [r7, #18]
 8006770:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006772:	2300      	movs	r3, #0
 8006774:	82fb      	strh	r3, [r7, #22]
            break;
 8006776:	e024      	b.n	80067c2 <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8006778:	7d7b      	ldrb	r3, [r7, #21]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	757a      	strb	r2, [r7, #21]
 800677e:	461a      	mov	r2, r3
 8006780:	4b14      	ldr	r3, [pc, #80]	@ (80067d4 <pal_os_datastore_read+0x10c>)
 8006782:	5c9b      	ldrb	r3, [r3, r2]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8006788:	7d7b      	ldrb	r3, [r7, #21]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	757a      	strb	r2, [r7, #21]
 800678e:	461a      	mov	r2, r3
 8006790:	4b10      	ldr	r3, [pc, #64]	@ (80067d4 <pal_os_datastore_read+0x10c>)
 8006792:	5c9b      	ldrb	r3, [r3, r2]
 8006794:	461a      	mov	r2, r3
 8006796:	8a7b      	ldrh	r3, [r7, #18]
 8006798:	4313      	orrs	r3, r2
 800679a:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 800679c:	7d7b      	ldrb	r3, [r7, #21]
 800679e:	4a0d      	ldr	r2, [pc, #52]	@ (80067d4 <pal_os_datastore_read+0x10c>)
 80067a0:	4413      	add	r3, r2
 80067a2:	8a7a      	ldrh	r2, [r7, #18]
 80067a4:	4619      	mov	r1, r3
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	f008 f879 	bl	800e89e <memcpy>
            *p_buffer_length = data_length;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8a7a      	ldrh	r2, [r7, #18]
 80067b0:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80067b2:	2300      	movs	r3, #0
 80067b4:	82fb      	strh	r3, [r7, #22]
            break;
 80067b6:	e004      	b.n	80067c2 <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	801a      	strh	r2, [r3, #0]
            break;
 80067be:	e000      	b.n	80067c2 <pal_os_datastore_read+0xfa>
            break;
 80067c0:	bf00      	nop
        }
    }

    return return_status;
 80067c2:	8afb      	ldrh	r3, [r7, #22]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	2000050c 	.word	0x2000050c
 80067d0:	20000d5c 	.word	0x20000d5c
 80067d4:	20000da0 	.word	0x20000da0

080067d8 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	7a1b      	ldrb	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 80067f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f82a 	bl	8006854 <pal_os_event_register_callback_oneshot>
    }
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	721a      	strb	r2, [r3, #8]
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <pal_os_event_create+0x20>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4804      	ldr	r0, [pc, #16]	@ (8006850 <pal_os_event_create+0x2c>)
 8006840:	f7ff ffca 	bl	80067d8 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006844:	4b02      	ldr	r3, [pc, #8]	@ (8006850 <pal_os_event_create+0x2c>)
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000dac 	.word	0x20000dac

08006854 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	4a0d      	ldr	r2, [pc, #52]	@ (800689c <pal_os_event_register_callback_oneshot+0x48>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 800687a:	f002 fb07 	bl	8008e8c <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	4a06      	ldr	r2, [pc, #24]	@ (80068a0 <pal_os_event_register_callback_oneshot+0x4c>)
 8006886:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <pal_os_event_register_callback_oneshot+0x50>)
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 800688e:	4806      	ldr	r0, [pc, #24]	@ (80068a8 <pal_os_event_register_callback_oneshot+0x54>)
 8006890:	f006 f9b0 	bl	800cbf4 <HAL_TIM_Base_Start_IT>
}
 8006894:	bf00      	nop
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	20000dc4 	.word	0x20000dc4
 80068a4:	20000dc8 	.word	0x20000dc8
 80068a8:	20000634 	.word	0x20000634

080068ac <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 80068b2:	4b0d      	ldr	r3, [pc, #52]	@ (80068e8 <pal_os_event_trigger_registered_callback+0x3c>)
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d011      	beq.n	80068de <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 80068ba:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <pal_os_event_trigger_registered_callback+0x3c>)
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 80068c0:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <pal_os_event_trigger_registered_callback+0x3c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 80068c6:	4b08      	ldr	r3, [pc, #32]	@ (80068e8 <pal_os_event_trigger_registered_callback+0x3c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <pal_os_event_trigger_registered_callback+0x3c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <pal_os_event_trigger_registered_callback+0x40>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6838      	ldr	r0, [r7, #0]
 80068dc:	4798      	blx	r3
    }
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000dac 	.word	0x20000dac
 80068ec:	20000dc8 	.word	0x20000dc8

080068f0 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 80068f4:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <pal_os_event_timer_tick+0x24>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <pal_os_event_timer_tick+0x1e>
 80068fc:	f002 fac6 	bl	8008e8c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <pal_os_event_timer_tick+0x28>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d301      	bcc.n	800690e <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 800690a:	f7ff ffcf 	bl	80068ac <pal_os_event_trigger_registered_callback>
    }
}
 800690e:	bf00      	nop
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000dc8 	.word	0x20000dc8
 8006918:	20000dc4 	.word	0x20000dc4

0800691c <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 800693e:	b480      	push	{r7}
 8006940:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 8006942:	bf00      	nop
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f007 fd47 	bl	800e3ec <calloc>
 800695e:	4603      	mov	r3, r0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <pal_os_free>:

void pal_os_free(void * block)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
    free(block);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f007 fd57 	bl	800e424 <free>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f007 ff85 	bl	800e89e <memcpy>
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4619      	mov	r1, r3
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f007 ff2f 	bl	800e814 <memset>
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 80069c2:	f002 fa63 	bl	8008e8c <HAL_GetTick>
 80069c6:	4603      	mov	r3, r0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	bd80      	pop	{r7, pc}

080069cc <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 80069d0:	f002 fa5c 	bl	8008e8c <HAL_GetTick>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069da:	fb02 f303 	mul.w	r3, r2, r3
}
 80069de:	4618      	mov	r0, r3
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 80069ee:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <mbedtls_platform_zeroize+0x20>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	2100      	movs	r1, #0
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000550 	.word	0x20000550

08006a08 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006a10:	226c      	movs	r2, #108	@ 0x6c
 8006a12:	2100      	movs	r1, #0
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f007 fefd 	bl	800e814 <memset>
}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8006a30:	216c      	movs	r1, #108	@ 0x6c
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff ffd6 	bl	80069e4 <mbedtls_platform_zeroize>
 8006a38:	e000      	b.n	8006a3c <mbedtls_sha256_free+0x1a>
        return;
 8006a3a:	bf00      	nop
}
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d118      	bne.n	8006a92 <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad8 <mbedtls_sha256_starts_ret+0x94>)
 8006a64:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a1c      	ldr	r2, [pc, #112]	@ (8006adc <mbedtls_sha256_starts_ret+0x98>)
 8006a6a:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae0 <mbedtls_sha256_starts_ret+0x9c>)
 8006a70:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <mbedtls_sha256_starts_ret+0xa0>)
 8006a76:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <mbedtls_sha256_starts_ret+0xa4>)
 8006a7c:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a1a      	ldr	r2, [pc, #104]	@ (8006aec <mbedtls_sha256_starts_ret+0xa8>)
 8006a82:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1a      	ldr	r2, [pc, #104]	@ (8006af0 <mbedtls_sha256_starts_ret+0xac>)
 8006a88:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a19      	ldr	r2, [pc, #100]	@ (8006af4 <mbedtls_sha256_starts_ret+0xb0>)
 8006a8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a90:	e017      	b.n	8006ac2 <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <mbedtls_sha256_starts_ret+0xb4>)
 8006a96:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <mbedtls_sha256_starts_ret+0xb8>)
 8006a9c:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a17      	ldr	r2, [pc, #92]	@ (8006b00 <mbedtls_sha256_starts_ret+0xbc>)
 8006aa2:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	@ (8006b04 <mbedtls_sha256_starts_ret+0xc0>)
 8006aa8:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a16      	ldr	r2, [pc, #88]	@ (8006b08 <mbedtls_sha256_starts_ret+0xc4>)
 8006aae:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a16      	ldr	r2, [pc, #88]	@ (8006b0c <mbedtls_sha256_starts_ret+0xc8>)
 8006ab4:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a15      	ldr	r2, [pc, #84]	@ (8006b10 <mbedtls_sha256_starts_ret+0xcc>)
 8006aba:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a15      	ldr	r2, [pc, #84]	@ (8006b14 <mbedtls_sha256_starts_ret+0xd0>)
 8006ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	6a09e667 	.word	0x6a09e667
 8006adc:	bb67ae85 	.word	0xbb67ae85
 8006ae0:	3c6ef372 	.word	0x3c6ef372
 8006ae4:	a54ff53a 	.word	0xa54ff53a
 8006ae8:	510e527f 	.word	0x510e527f
 8006aec:	9b05688c 	.word	0x9b05688c
 8006af0:	1f83d9ab 	.word	0x1f83d9ab
 8006af4:	5be0cd19 	.word	0x5be0cd19
 8006af8:	c1059ed8 	.word	0xc1059ed8
 8006afc:	367cd507 	.word	0x367cd507
 8006b00:	3070dd17 	.word	0x3070dd17
 8006b04:	f70e5939 	.word	0xf70e5939
 8006b08:	ffc00b31 	.word	0xffc00b31
 8006b0c:	68581511 	.word	0x68581511
 8006b10:	64f98fa7 	.word	0x64f98fa7
 8006b14:	befa4fa4 	.word	0xbefa4fa4

08006b18 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8006b18:	b490      	push	{r4, r7}
 8006b1a:	b0ce      	sub	sp, #312	@ 0x138
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b22:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006b26:	6018      	str	r0, [r3, #0]
 8006b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b2c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006b30:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8006b32:	2300      	movs	r3, #0
 8006b34:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b38:	e016      	b.n	8006b68 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8006b3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b3e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006b48:	3202      	adds	r2, #2
 8006b4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b56:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8006b5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b62:	3301      	adds	r3, #1
 8006b64:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	d9e4      	bls.n	8006b3a <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8006b70:	2300      	movs	r3, #0
 8006b72:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b76:	e03e      	b.n	8006bf6 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8006b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006b82:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	4413      	add	r3, r2
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	061a      	lsls	r2, r3, #24
 8006b8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	3301      	adds	r3, #1
 8006b96:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006b9a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006b9e:	6809      	ldr	r1, [r1, #0]
 8006ba0:	440b      	add	r3, r1
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	3302      	adds	r3, #2
 8006bb0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006bb4:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006bb8:	6809      	ldr	r1, [r1, #0]
 8006bba:	440b      	add	r3, r1
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	3203      	adds	r2, #3
 8006bca:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006bce:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006bd2:	6809      	ldr	r1, [r1, #0]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	7812      	ldrb	r2, [r2, #0]
 8006bd8:	ea43 0102 	orr.w	r1, r3, r2
 8006bdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006be0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006be4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8006bec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d9bc      	bls.n	8006b78 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006c04:	f000 bcba 	b.w	800757c <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8006c08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c10:	69da      	ldr	r2, [r3, #28]
 8006c12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006c20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006c2e:	4059      	eors	r1, r3
 8006c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006c3e:	404b      	eors	r3, r1
 8006c40:	441a      	add	r2, r3
 8006c42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c4a:	6999      	ldr	r1, [r3, #24]
 8006c4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c54:	6918      	ldr	r0, [r3, #16]
 8006c56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c5e:	695c      	ldr	r4, [r3, #20]
 8006c60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	4063      	eors	r3, r4
 8006c6c:	4003      	ands	r3, r0
 8006c6e:	404b      	eors	r3, r1
 8006c70:	441a      	add	r2, r3
 8006c72:	49e0      	ldr	r1, [pc, #896]	@ (8006ff4 <mbedtls_internal_sha256_process+0x4dc>)
 8006c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c7c:	441a      	add	r2, r3
 8006c7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006c86:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8006c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006ca2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ca6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006cb0:	405a      	eors	r2, r3
 8006cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006cc0:	405a      	eors	r2, r3
 8006cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cca:	6819      	ldr	r1, [r3, #0]
 8006ccc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4019      	ands	r1, r3
 8006cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ce0:	6898      	ldr	r0, [r3, #8]
 8006ce2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cea:	681c      	ldr	r4, [r3, #0]
 8006cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4323      	orrs	r3, r4
 8006cf8:	4003      	ands	r3, r0
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006d10:	441a      	add	r2, r3
 8006d12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d24:	441a      	add	r2, r3
 8006d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d2e:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8006d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006d56:	4059      	eors	r1, r3
 8006d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006d66:	404b      	eors	r3, r1
 8006d68:	441a      	add	r2, r3
 8006d6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d72:	6959      	ldr	r1, [r3, #20]
 8006d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d7c:	68d8      	ldr	r0, [r3, #12]
 8006d7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d86:	691c      	ldr	r4, [r3, #16]
 8006d88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4063      	eors	r3, r4
 8006d94:	4003      	ands	r3, r0
 8006d96:	404b      	eors	r3, r1
 8006d98:	441a      	add	r2, r3
 8006d9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006d9e:	3301      	adds	r3, #1
 8006da0:	4994      	ldr	r1, [pc, #592]	@ (8006ff4 <mbedtls_internal_sha256_process+0x4dc>)
 8006da2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006da6:	441a      	add	r2, r3
 8006da8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006db2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006db6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006dc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006dce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006ddc:	405a      	eors	r2, r3
 8006dde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006de2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006dec:	405a      	eors	r2, r3
 8006dee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006df2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006df6:	69d9      	ldr	r1, [r3, #28]
 8006df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4019      	ands	r1, r3
 8006e04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e0c:	6858      	ldr	r0, [r3, #4]
 8006e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e16:	69dc      	ldr	r4, [r3, #28]
 8006e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4323      	orrs	r3, r4
 8006e24:	4003      	ands	r3, r0
 8006e26:	430b      	orrs	r3, r1
 8006e28:	4413      	add	r3, r2
 8006e2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006e2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e3c:	441a      	add	r2, r3
 8006e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e46:	609a      	str	r2, [r3, #8]
 8006e48:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e50:	441a      	add	r2, r3
 8006e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e5a:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8006e5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006e74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006e82:	4059      	eors	r1, r3
 8006e84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006e92:	404b      	eors	r3, r1
 8006e94:	441a      	add	r2, r3
 8006e96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e9e:	6919      	ldr	r1, [r3, #16]
 8006ea0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ea4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ea8:	6898      	ldr	r0, [r3, #8]
 8006eaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eb2:	68dc      	ldr	r4, [r3, #12]
 8006eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	4063      	eors	r3, r4
 8006ec0:	4003      	ands	r3, r0
 8006ec2:	404b      	eors	r3, r1
 8006ec4:	441a      	add	r2, r3
 8006ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006eca:	3302      	adds	r3, #2
 8006ecc:	4949      	ldr	r1, [pc, #292]	@ (8006ff4 <mbedtls_internal_sha256_process+0x4dc>)
 8006ece:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ed2:	441a      	add	r2, r3
 8006ed4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ed8:	1c99      	adds	r1, r3, #2
 8006eda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ede:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006eec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ef0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006efe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006f08:	405a      	eors	r2, r3
 8006f0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006f18:	405a      	eors	r2, r3
 8006f1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f22:	6999      	ldr	r1, [r3, #24]
 8006f24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	4019      	ands	r1, r3
 8006f30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f42:	699c      	ldr	r4, [r3, #24]
 8006f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	4323      	orrs	r3, r4
 8006f50:	4003      	ands	r3, r0
 8006f52:	430b      	orrs	r3, r1
 8006f54:	4413      	add	r3, r2
 8006f56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f68:	441a      	add	r2, r3
 8006f6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f7c:	441a      	add	r2, r3
 8006f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f86:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8006f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006fa0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006fae:	4059      	eors	r1, r3
 8006fb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006fbe:	404b      	eors	r3, r1
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fca:	68d9      	ldr	r1, [r3, #12]
 8006fcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fd4:	6858      	ldr	r0, [r3, #4]
 8006fd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fde:	689c      	ldr	r4, [r3, #8]
 8006fe0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fe4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	4063      	eors	r3, r4
 8006fec:	4003      	ands	r3, r0
 8006fee:	404b      	eors	r3, r1
 8006ff0:	441a      	add	r2, r3
 8006ff2:	e001      	b.n	8006ff8 <mbedtls_internal_sha256_process+0x4e0>
 8006ff4:	0800f6a4 	.word	0x0800f6a4
 8006ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ffc:	3303      	adds	r3, #3
 8006ffe:	49e0      	ldr	r1, [pc, #896]	@ (8007380 <mbedtls_internal_sha256_process+0x868>)
 8007000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007004:	441a      	add	r2, r3
 8007006:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800700a:	1cd9      	adds	r1, r3, #3
 800700c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007018:	4413      	add	r3, r2
 800701a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800701e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800702c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007030:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	ea4f 3373 	mov.w	r3, r3, ror #13
 800703a:	405a      	eors	r2, r3
 800703c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007040:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800704a:	405a      	eors	r2, r3
 800704c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007050:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800705a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	4019      	ands	r1, r3
 8007062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800706a:	69d8      	ldr	r0, [r3, #28]
 800706c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007070:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007074:	695c      	ldr	r4, [r3, #20]
 8007076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800707a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	4323      	orrs	r3, r4
 8007082:	4003      	ands	r3, r0
 8007084:	430b      	orrs	r3, r1
 8007086:	4413      	add	r3, r2
 8007088:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800708c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007090:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800709a:	441a      	add	r2, r3
 800709c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070ae:	441a      	add	r2, r3
 80070b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070b8:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80070ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80070d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80070e0:	4059      	eors	r1, r3
 80070e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	ea4f 6373 	mov.w	r3, r3, ror #25
 80070f0:	404b      	eors	r3, r1
 80070f2:	441a      	add	r2, r3
 80070f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070fc:	6899      	ldr	r1, [r3, #8]
 80070fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800710c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007110:	685c      	ldr	r4, [r3, #4]
 8007112:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007116:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4063      	eors	r3, r4
 800711e:	4003      	ands	r3, r0
 8007120:	404b      	eors	r3, r1
 8007122:	441a      	add	r2, r3
 8007124:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007128:	3304      	adds	r3, #4
 800712a:	4995      	ldr	r1, [pc, #596]	@ (8007380 <mbedtls_internal_sha256_process+0x868>)
 800712c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007130:	441a      	add	r2, r3
 8007132:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007136:	1d19      	adds	r1, r3, #4
 8007138:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800713c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007144:	4413      	add	r3, r2
 8007146:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800714a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800714e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007158:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800715c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007166:	405a      	eors	r2, r3
 8007168:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800716c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007176:	405a      	eors	r2, r3
 8007178:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800717c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007180:	6919      	ldr	r1, [r3, #16]
 8007182:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007186:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	4019      	ands	r1, r3
 800718e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007192:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007196:	6998      	ldr	r0, [r3, #24]
 8007198:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800719c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071a0:	691c      	ldr	r4, [r3, #16]
 80071a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	4323      	orrs	r3, r4
 80071ae:	4003      	ands	r3, r0
 80071b0:	430b      	orrs	r3, r1
 80071b2:	4413      	add	r3, r2
 80071b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80071b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80071c6:	441a      	add	r2, r3
 80071c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071d0:	61da      	str	r2, [r3, #28]
 80071d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80071d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071da:	441a      	add	r2, r3
 80071dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071e4:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80071e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80071fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007202:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800720c:	4059      	eors	r1, r3
 800720e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007212:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	ea4f 6373 	mov.w	r3, r3, ror #25
 800721c:	404b      	eors	r3, r1
 800721e:	441a      	add	r2, r3
 8007220:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007224:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007228:	6859      	ldr	r1, [r3, #4]
 800722a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800722e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007232:	69d8      	ldr	r0, [r3, #28]
 8007234:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007238:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800723c:	681c      	ldr	r4, [r3, #0]
 800723e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007242:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4063      	eors	r3, r4
 800724a:	4003      	ands	r3, r0
 800724c:	404b      	eors	r3, r1
 800724e:	441a      	add	r2, r3
 8007250:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007254:	3305      	adds	r3, #5
 8007256:	494a      	ldr	r1, [pc, #296]	@ (8007380 <mbedtls_internal_sha256_process+0x868>)
 8007258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800725c:	441a      	add	r2, r3
 800725e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007262:	1d59      	adds	r1, r3, #5
 8007264:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007268:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800726c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007270:	4413      	add	r3, r2
 8007272:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007276:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800727a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007284:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007288:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007292:	405a      	eors	r2, r3
 8007294:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007298:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80072a2:	405a      	eors	r2, r3
 80072a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072ac:	68d9      	ldr	r1, [r3, #12]
 80072ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4019      	ands	r1, r3
 80072ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072c2:	6958      	ldr	r0, [r3, #20]
 80072c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072cc:	68dc      	ldr	r4, [r3, #12]
 80072ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	4323      	orrs	r3, r4
 80072da:	4003      	ands	r3, r0
 80072dc:	430b      	orrs	r3, r1
 80072de:	4413      	add	r3, r2
 80072e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80072e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072f2:	441a      	add	r2, r3
 80072f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072fc:	619a      	str	r2, [r3, #24]
 80072fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007306:	441a      	add	r2, r3
 8007308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800730c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007310:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8007312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007316:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007320:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800732a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800732e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007338:	4059      	eors	r1, r3
 800733a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800733e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007348:	404b      	eors	r3, r1
 800734a:	441a      	add	r2, r3
 800734c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800735a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800735e:	6998      	ldr	r0, [r3, #24]
 8007360:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007364:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007368:	69dc      	ldr	r4, [r3, #28]
 800736a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800736e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4063      	eors	r3, r4
 8007376:	4003      	ands	r3, r0
 8007378:	404b      	eors	r3, r1
 800737a:	441a      	add	r2, r3
 800737c:	e002      	b.n	8007384 <mbedtls_internal_sha256_process+0x86c>
 800737e:	bf00      	nop
 8007380:	0800f6a4 	.word	0x0800f6a4
 8007384:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007388:	3306      	adds	r3, #6
 800738a:	4981      	ldr	r1, [pc, #516]	@ (8007590 <mbedtls_internal_sha256_process+0xa78>)
 800738c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007390:	441a      	add	r2, r3
 8007392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007396:	1d99      	adds	r1, r3, #6
 8007398:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800739c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80073a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073a4:	4413      	add	r3, r2
 80073a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80073aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80073b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80073c6:	405a      	eors	r2, r3
 80073c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80073d6:	405a      	eors	r2, r3
 80073d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073e0:	6899      	ldr	r1, [r3, #8]
 80073e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4019      	ands	r1, r3
 80073ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073f6:	6918      	ldr	r0, [r3, #16]
 80073f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007400:	689c      	ldr	r4, [r3, #8]
 8007402:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007406:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4323      	orrs	r3, r4
 800740e:	4003      	ands	r3, r0
 8007410:	430b      	orrs	r3, r1
 8007412:	4413      	add	r3, r2
 8007414:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007418:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800741c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007420:	695a      	ldr	r2, [r3, #20]
 8007422:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007426:	441a      	add	r2, r3
 8007428:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800742c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007430:	615a      	str	r2, [r3, #20]
 8007432:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800743a:	441a      	add	r2, r3
 800743c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007444:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8007446:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800744a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007454:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800745e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007462:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800746c:	4059      	eors	r1, r3
 800746e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007472:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	ea4f 6373 	mov.w	r3, r3, ror #25
 800747c:	404b      	eors	r3, r1
 800747e:	441a      	add	r2, r3
 8007480:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007484:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007488:	69d9      	ldr	r1, [r3, #28]
 800748a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800748e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007492:	6958      	ldr	r0, [r3, #20]
 8007494:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007498:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800749c:	699c      	ldr	r4, [r3, #24]
 800749e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	4063      	eors	r3, r4
 80074aa:	4003      	ands	r3, r0
 80074ac:	404b      	eors	r3, r1
 80074ae:	441a      	add	r2, r3
 80074b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074b4:	3307      	adds	r3, #7
 80074b6:	4936      	ldr	r1, [pc, #216]	@ (8007590 <mbedtls_internal_sha256_process+0xa78>)
 80074b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074bc:	441a      	add	r2, r3
 80074be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074c2:	1dd9      	adds	r1, r3, #7
 80074c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80074cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074d0:	4413      	add	r3, r2
 80074d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80074d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80074e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80074f2:	405a      	eors	r2, r3
 80074f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007502:	405a      	eors	r2, r3
 8007504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800750c:	6859      	ldr	r1, [r3, #4]
 800750e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007512:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	4019      	ands	r1, r3
 800751a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800751e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007522:	68d8      	ldr	r0, [r3, #12]
 8007524:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007528:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800752c:	685c      	ldr	r4, [r3, #4]
 800752e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	4323      	orrs	r3, r4
 800753a:	4003      	ands	r3, r0
 800753c:	430b      	orrs	r3, r1
 800753e:	4413      	add	r3, r2
 8007540:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007544:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007548:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007552:	441a      	add	r2, r3
 8007554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007558:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800755c:	611a      	str	r2, [r3, #16]
 800755e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007562:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007566:	441a      	add	r2, r3
 8007568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800756c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007570:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 8007572:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007576:	3308      	adds	r3, #8
 8007578:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800757c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007580:	2b0f      	cmp	r3, #15
 8007582:	f67f ab41 	bls.w	8006c08 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8007586:	2310      	movs	r3, #16
 8007588:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800758c:	f000 bfd5 	b.w	800853a <mbedtls_internal_sha256_process+0x1a22>
 8007590:	0800f6a4 	.word	0x0800f6a4
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8007594:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007598:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80075ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80075ba:	4059      	eors	r1, r3
 80075bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80075ca:	404b      	eors	r3, r1
 80075cc:	441a      	add	r2, r3
 80075ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075d6:	6999      	ldr	r1, [r3, #24]
 80075d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075e0:	6918      	ldr	r0, [r3, #16]
 80075e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075ea:	695c      	ldr	r4, [r3, #20]
 80075ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	4063      	eors	r3, r4
 80075f8:	4003      	ands	r3, r0
 80075fa:	404b      	eors	r3, r1
 80075fc:	441a      	add	r2, r3
 80075fe:	49ec      	ldr	r1, [pc, #944]	@ (80079b0 <mbedtls_internal_sha256_process+0xe98>)
 8007600:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007608:	441a      	add	r2, r3
 800760a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800760e:	1e99      	subs	r1, r3, #2
 8007610:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007614:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800761c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007620:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007624:	1e98      	subs	r0, r3, #2
 8007626:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800762a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800762e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007632:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007636:	4059      	eors	r1, r3
 8007638:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800763c:	1e98      	subs	r0, r3, #2
 800763e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007642:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007646:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800764a:	0a9b      	lsrs	r3, r3, #10
 800764c:	4059      	eors	r1, r3
 800764e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007652:	1fd8      	subs	r0, r3, #7
 8007654:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007658:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800765c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007660:	4419      	add	r1, r3
 8007662:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007666:	f1a3 000f 	sub.w	r0, r3, #15
 800766a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800766e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007672:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007676:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800767a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800767e:	f1a3 040f 	sub.w	r4, r3, #15
 8007682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007686:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800768a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800768e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007692:	4058      	eors	r0, r3
 8007694:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007698:	f1a3 040f 	sub.w	r4, r3, #15
 800769c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80076a8:	08db      	lsrs	r3, r3, #3
 80076aa:	4043      	eors	r3, r0
 80076ac:	4419      	add	r1, r3
 80076ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076b2:	f1a3 0010 	sub.w	r0, r3, #16
 80076b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80076c2:	18c8      	adds	r0, r1, r3
 80076c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076cc:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80076d0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 80076d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076dc:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80076e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076e4:	4413      	add	r3, r2
 80076e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80076ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80076f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007706:	405a      	eors	r2, r3
 8007708:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800770c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007716:	405a      	eors	r2, r3
 8007718:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800771c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007726:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	4019      	ands	r1, r3
 800772e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007732:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007736:	6898      	ldr	r0, [r3, #8]
 8007738:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800773c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007740:	681c      	ldr	r4, [r3, #0]
 8007742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007746:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	4323      	orrs	r3, r4
 800774e:	4003      	ands	r3, r0
 8007750:	430b      	orrs	r3, r1
 8007752:	4413      	add	r3, r2
 8007754:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007758:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800775c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007766:	441a      	add	r2, r3
 8007768:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800776c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007776:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800777a:	441a      	add	r2, r3
 800777c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007780:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007784:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8007786:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800778a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800779e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80077ac:	4059      	eors	r1, r3
 80077ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80077bc:	404b      	eors	r3, r1
 80077be:	441a      	add	r2, r3
 80077c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077c8:	6959      	ldr	r1, [r3, #20]
 80077ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077d2:	68d8      	ldr	r0, [r3, #12]
 80077d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077dc:	691c      	ldr	r4, [r3, #16]
 80077de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	4063      	eors	r3, r4
 80077ea:	4003      	ands	r3, r0
 80077ec:	404b      	eors	r3, r1
 80077ee:	441a      	add	r2, r3
 80077f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077f4:	3301      	adds	r3, #1
 80077f6:	496e      	ldr	r1, [pc, #440]	@ (80079b0 <mbedtls_internal_sha256_process+0xe98>)
 80077f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077fc:	441a      	add	r2, r3
 80077fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007802:	1e59      	subs	r1, r3, #1
 8007804:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007808:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800780c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007810:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007814:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007818:	1e58      	subs	r0, r3, #1
 800781a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800781e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007822:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007826:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800782a:	4059      	eors	r1, r3
 800782c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007830:	1e58      	subs	r0, r3, #1
 8007832:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007836:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800783a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800783e:	0a9b      	lsrs	r3, r3, #10
 8007840:	4059      	eors	r1, r3
 8007842:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007846:	1f98      	subs	r0, r3, #6
 8007848:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800784c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007850:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007854:	4419      	add	r1, r3
 8007856:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800785a:	f1a3 000e 	sub.w	r0, r3, #14
 800785e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007862:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007866:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800786a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800786e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007872:	f1a3 040e 	sub.w	r4, r3, #14
 8007876:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800787a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800787e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007882:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007886:	4058      	eors	r0, r3
 8007888:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800788c:	f1a3 040e 	sub.w	r4, r3, #14
 8007890:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007894:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007898:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800789c:	08db      	lsrs	r3, r3, #3
 800789e:	4043      	eors	r3, r0
 80078a0:	18c8      	adds	r0, r1, r3
 80078a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078a6:	f1a3 010f 	sub.w	r1, r3, #15
 80078aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80078b2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80078b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078ba:	3301      	adds	r3, #1
 80078bc:	4408      	add	r0, r1
 80078be:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80078c2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80078c6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80078ca:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80078ce:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80078d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80078d6:	4413      	add	r3, r2
 80078d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80078dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80078ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	ea4f 3373 	mov.w	r3, r3, ror #13
 80078f8:	405a      	eors	r2, r3
 80078fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007908:	405a      	eors	r2, r3
 800790a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800790e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007912:	69d9      	ldr	r1, [r3, #28]
 8007914:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007918:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4019      	ands	r1, r3
 8007920:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007928:	6858      	ldr	r0, [r3, #4]
 800792a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800792e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007932:	69dc      	ldr	r4, [r3, #28]
 8007934:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007938:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4323      	orrs	r3, r4
 8007940:	4003      	ands	r3, r0
 8007942:	430b      	orrs	r3, r1
 8007944:	4413      	add	r3, r2
 8007946:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800794a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800794e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007958:	441a      	add	r2, r3
 800795a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800795e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007962:	609a      	str	r2, [r3, #8]
 8007964:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007968:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800796c:	441a      	add	r2, r3
 800796e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007972:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007976:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8007978:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800797c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007986:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800799e:	4059      	eors	r1, r3
 80079a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	ea4f 6373 	mov.w	r3, r3, ror #25
 80079ae:	e001      	b.n	80079b4 <mbedtls_internal_sha256_process+0xe9c>
 80079b0:	0800f6a4 	.word	0x0800f6a4
 80079b4:	404b      	eors	r3, r1
 80079b6:	441a      	add	r2, r3
 80079b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079c0:	6919      	ldr	r1, [r3, #16]
 80079c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079ca:	6898      	ldr	r0, [r3, #8]
 80079cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079d4:	68dc      	ldr	r4, [r3, #12]
 80079d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	4063      	eors	r3, r4
 80079e2:	4003      	ands	r3, r0
 80079e4:	404b      	eors	r3, r1
 80079e6:	441a      	add	r2, r3
 80079e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80079ec:	3302      	adds	r3, #2
 80079ee:	49ec      	ldr	r1, [pc, #944]	@ (8007da0 <mbedtls_internal_sha256_process+0x1288>)
 80079f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80079f4:	441a      	add	r2, r3
 80079f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80079fe:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a06:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007a0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a12:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007a16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a1a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007a1e:	4059      	eors	r1, r3
 8007a20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a28:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007a2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a30:	0a9b      	lsrs	r3, r3, #10
 8007a32:	4059      	eors	r1, r3
 8007a34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a38:	1f58      	subs	r0, r3, #5
 8007a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a46:	4419      	add	r1, r3
 8007a48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a4c:	f1a3 000d 	sub.w	r0, r3, #13
 8007a50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a5c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a64:	f1a3 040d 	sub.w	r4, r3, #13
 8007a68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a74:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007a78:	4058      	eors	r0, r3
 8007a7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a7e:	f1a3 040d 	sub.w	r4, r3, #13
 8007a82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a8e:	08db      	lsrs	r3, r3, #3
 8007a90:	4043      	eors	r3, r0
 8007a92:	18c8      	adds	r0, r1, r3
 8007a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a98:	f1a3 010e 	sub.w	r1, r3, #14
 8007a9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aa0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007aa4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007aa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007aac:	3302      	adds	r3, #2
 8007aae:	4408      	add	r0, r1
 8007ab0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007ab4:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ab8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007abc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007ac0:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007adc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ae0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007aea:	405a      	eors	r2, r3
 8007aec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007af0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007afa:	405a      	eors	r2, r3
 8007afc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b04:	6999      	ldr	r1, [r3, #24]
 8007b06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	4019      	ands	r1, r3
 8007b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b24:	699c      	ldr	r4, [r3, #24]
 8007b26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	4323      	orrs	r3, r4
 8007b32:	4003      	ands	r3, r0
 8007b34:	430b      	orrs	r3, r1
 8007b36:	4413      	add	r3, r2
 8007b38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007b3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b4a:	441a      	add	r2, r3
 8007b4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b54:	605a      	str	r2, [r3, #4]
 8007b56:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b5e:	441a      	add	r2, r3
 8007b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b68:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8007b6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b72:	691a      	ldr	r2, [r3, #16]
 8007b74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007b82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007b90:	4059      	eors	r1, r3
 8007b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007ba0:	404b      	eors	r3, r1
 8007ba2:	441a      	add	r2, r3
 8007ba4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ba8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bac:	68d9      	ldr	r1, [r3, #12]
 8007bae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bb6:	6858      	ldr	r0, [r3, #4]
 8007bb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bc0:	689c      	ldr	r4, [r3, #8]
 8007bc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	4063      	eors	r3, r4
 8007bce:	4003      	ands	r3, r0
 8007bd0:	404b      	eors	r3, r1
 8007bd2:	441a      	add	r2, r3
 8007bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bd8:	3303      	adds	r3, #3
 8007bda:	4971      	ldr	r1, [pc, #452]	@ (8007da0 <mbedtls_internal_sha256_process+0x1288>)
 8007bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007be0:	441a      	add	r2, r3
 8007be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007be6:	1c59      	adds	r1, r3, #1
 8007be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bf4:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bfc:	1c58      	adds	r0, r3, #1
 8007bfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c0a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007c0e:	4059      	eors	r1, r3
 8007c10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c14:	1c58      	adds	r0, r3, #1
 8007c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c22:	0a9b      	lsrs	r3, r3, #10
 8007c24:	4059      	eors	r1, r3
 8007c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c2a:	1f18      	subs	r0, r3, #4
 8007c2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c38:	4419      	add	r1, r3
 8007c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c3e:	f1a3 000c 	sub.w	r0, r3, #12
 8007c42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c4e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c56:	f1a3 040c 	sub.w	r4, r3, #12
 8007c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c66:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007c6a:	4058      	eors	r0, r3
 8007c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c70:	f1a3 040c 	sub.w	r4, r3, #12
 8007c74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c80:	08db      	lsrs	r3, r3, #3
 8007c82:	4043      	eors	r3, r0
 8007c84:	18c8      	adds	r0, r1, r3
 8007c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c8a:	f1a3 010d 	sub.w	r1, r3, #13
 8007c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c96:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c9e:	3303      	adds	r3, #3
 8007ca0:	4408      	add	r0, r1
 8007ca2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007ca6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007caa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007cae:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007cb2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007cc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007cdc:	405a      	eors	r2, r3
 8007cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ce2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007cec:	405a      	eors	r2, r3
 8007cee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cf2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cf6:	6959      	ldr	r1, [r3, #20]
 8007cf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	4019      	ands	r1, r3
 8007d04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d0c:	69d8      	ldr	r0, [r3, #28]
 8007d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d16:	695c      	ldr	r4, [r3, #20]
 8007d18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	4323      	orrs	r3, r4
 8007d24:	4003      	ands	r3, r0
 8007d26:	430b      	orrs	r3, r1
 8007d28:	4413      	add	r3, r2
 8007d2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007d2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d3c:	441a      	add	r2, r3
 8007d3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d50:	441a      	add	r2, r3
 8007d52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d5a:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8007d5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007d82:	4059      	eors	r1, r3
 8007d84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007d92:	404b      	eors	r3, r1
 8007d94:	441a      	add	r2, r3
 8007d96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d9e:	e001      	b.n	8007da4 <mbedtls_internal_sha256_process+0x128c>
 8007da0:	0800f6a4 	.word	0x0800f6a4
 8007da4:	6899      	ldr	r1, [r3, #8]
 8007da6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007daa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007db4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007db8:	685c      	ldr	r4, [r3, #4]
 8007dba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4063      	eors	r3, r4
 8007dc6:	4003      	ands	r3, r0
 8007dc8:	404b      	eors	r3, r1
 8007dca:	441a      	add	r2, r3
 8007dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	49ec      	ldr	r1, [pc, #944]	@ (8008184 <mbedtls_internal_sha256_process+0x166c>)
 8007dd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007dd8:	441a      	add	r2, r3
 8007dda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dde:	1c99      	adds	r1, r3, #2
 8007de0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dec:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007df0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007df4:	1c98      	adds	r0, r3, #2
 8007df6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dfe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e02:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007e06:	4059      	eors	r1, r3
 8007e08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e0c:	1c98      	adds	r0, r3, #2
 8007e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e1a:	0a9b      	lsrs	r3, r3, #10
 8007e1c:	4059      	eors	r1, r3
 8007e1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e22:	1ed8      	subs	r0, r3, #3
 8007e24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e30:	4419      	add	r1, r3
 8007e32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e36:	f1a3 000b 	sub.w	r0, r3, #11
 8007e3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e46:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007e4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e4e:	f1a3 040b 	sub.w	r4, r3, #11
 8007e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e5a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e5e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007e62:	4058      	eors	r0, r3
 8007e64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e68:	f1a3 040b 	sub.w	r4, r3, #11
 8007e6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e78:	08db      	lsrs	r3, r3, #3
 8007e7a:	4043      	eors	r3, r0
 8007e7c:	18c8      	adds	r0, r1, r3
 8007e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e82:	f1a3 010c 	sub.w	r1, r3, #12
 8007e86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e8e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e96:	3304      	adds	r3, #4
 8007e98:	4408      	add	r0, r1
 8007e9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007e9e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ea2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007ea6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007eaa:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007eae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007eb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ebc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007ec6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007ed4:	405a      	eors	r2, r3
 8007ed6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007ee4:	405a      	eors	r2, r3
 8007ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eee:	6919      	ldr	r1, [r3, #16]
 8007ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ef4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	4019      	ands	r1, r3
 8007efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f04:	6998      	ldr	r0, [r3, #24]
 8007f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f0e:	691c      	ldr	r4, [r3, #16]
 8007f10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	4323      	orrs	r3, r4
 8007f1c:	4003      	ands	r3, r0
 8007f1e:	430b      	orrs	r3, r1
 8007f20:	4413      	add	r3, r2
 8007f22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007f26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f34:	441a      	add	r2, r3
 8007f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f3e:	61da      	str	r2, [r3, #28]
 8007f40:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f48:	441a      	add	r2, r3
 8007f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f52:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8007f54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007f6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007f7a:	4059      	eors	r1, r3
 8007f7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007f8a:	404b      	eors	r3, r1
 8007f8c:	441a      	add	r2, r3
 8007f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f96:	6859      	ldr	r1, [r3, #4]
 8007f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fa0:	69d8      	ldr	r0, [r3, #28]
 8007fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007faa:	681c      	ldr	r4, [r3, #0]
 8007fac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	4063      	eors	r3, r4
 8007fb8:	4003      	ands	r3, r0
 8007fba:	404b      	eors	r3, r1
 8007fbc:	441a      	add	r2, r3
 8007fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fc2:	3305      	adds	r3, #5
 8007fc4:	496f      	ldr	r1, [pc, #444]	@ (8008184 <mbedtls_internal_sha256_process+0x166c>)
 8007fc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fca:	441a      	add	r2, r3
 8007fcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fd0:	1cd9      	adds	r1, r3, #3
 8007fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fde:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007fe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fe6:	1cd8      	adds	r0, r3, #3
 8007fe8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ff0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007ff4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007ff8:	4059      	eors	r1, r3
 8007ffa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ffe:	1cd8      	adds	r0, r3, #3
 8008000:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008004:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008008:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800800c:	0a9b      	lsrs	r3, r3, #10
 800800e:	4059      	eors	r1, r3
 8008010:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008014:	1e98      	subs	r0, r3, #2
 8008016:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800801a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800801e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008022:	4419      	add	r1, r3
 8008024:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008028:	f1a3 000a 	sub.w	r0, r3, #10
 800802c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008030:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008034:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008038:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800803c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008040:	f1a3 040a 	sub.w	r4, r3, #10
 8008044:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008048:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800804c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008050:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008054:	4058      	eors	r0, r3
 8008056:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800805a:	f1a3 040a 	sub.w	r4, r3, #10
 800805e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008066:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800806a:	08db      	lsrs	r3, r3, #3
 800806c:	4043      	eors	r3, r0
 800806e:	18c8      	adds	r0, r1, r3
 8008070:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008074:	f1a3 010b 	sub.w	r1, r3, #11
 8008078:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800807c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008080:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008088:	3305      	adds	r3, #5
 800808a:	4408      	add	r0, r1
 800808c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008090:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008094:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008098:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800809c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80080a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080a4:	4413      	add	r3, r2
 80080a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80080aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80080b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80080c6:	405a      	eors	r2, r3
 80080c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80080d6:	405a      	eors	r2, r3
 80080d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080e0:	68d9      	ldr	r1, [r3, #12]
 80080e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	4019      	ands	r1, r3
 80080ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080f6:	6958      	ldr	r0, [r3, #20]
 80080f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008100:	68dc      	ldr	r4, [r3, #12]
 8008102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008106:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	4323      	orrs	r3, r4
 800810e:	4003      	ands	r3, r0
 8008110:	430b      	orrs	r3, r1
 8008112:	4413      	add	r3, r2
 8008114:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008118:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800811c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008126:	441a      	add	r2, r3
 8008128:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800812c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008130:	619a      	str	r2, [r3, #24]
 8008132:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008136:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800813a:	441a      	add	r2, r3
 800813c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008144:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8008146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800814a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008154:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800815e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800816c:	4059      	eors	r1, r3
 800816e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008172:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	ea4f 6373 	mov.w	r3, r3, ror #25
 800817c:	404b      	eors	r3, r1
 800817e:	441a      	add	r2, r3
 8008180:	e002      	b.n	8008188 <mbedtls_internal_sha256_process+0x1670>
 8008182:	bf00      	nop
 8008184:	0800f6a4 	.word	0x0800f6a4
 8008188:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800818c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008196:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800819a:	6998      	ldr	r0, [r3, #24]
 800819c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081a4:	69dc      	ldr	r4, [r3, #28]
 80081a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4063      	eors	r3, r4
 80081b2:	4003      	ands	r3, r0
 80081b4:	404b      	eors	r3, r1
 80081b6:	441a      	add	r2, r3
 80081b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081bc:	3306      	adds	r3, #6
 80081be:	49e3      	ldr	r1, [pc, #908]	@ (800854c <mbedtls_internal_sha256_process+0x1a34>)
 80081c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081c4:	441a      	add	r2, r3
 80081c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081ca:	1d19      	adds	r1, r3, #4
 80081cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081d8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80081dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081e0:	1d18      	adds	r0, r3, #4
 80081e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081ee:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80081f2:	4059      	eors	r1, r3
 80081f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081f8:	1d18      	adds	r0, r3, #4
 80081fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008202:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008206:	0a9b      	lsrs	r3, r3, #10
 8008208:	4059      	eors	r1, r3
 800820a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800820e:	1e58      	subs	r0, r3, #1
 8008210:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008218:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800821c:	4419      	add	r1, r3
 800821e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008222:	f1a3 0009 	sub.w	r0, r3, #9
 8008226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800822a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800822e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008232:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008236:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800823a:	f1a3 0409 	sub.w	r4, r3, #9
 800823e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008242:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008246:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800824a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800824e:	4058      	eors	r0, r3
 8008250:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008254:	f1a3 0409 	sub.w	r4, r3, #9
 8008258:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800825c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008260:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008264:	08db      	lsrs	r3, r3, #3
 8008266:	4043      	eors	r3, r0
 8008268:	18c8      	adds	r0, r1, r3
 800826a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800826e:	f1a3 010a 	sub.w	r1, r3, #10
 8008272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008276:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800827a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800827e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008282:	3306      	adds	r3, #6
 8008284:	4408      	add	r0, r1
 8008286:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800828a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800828e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008292:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008296:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800829a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800829e:	4413      	add	r3, r2
 80082a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80082a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80082b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80082c0:	405a      	eors	r2, r3
 80082c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80082d0:	405a      	eors	r2, r3
 80082d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082da:	6899      	ldr	r1, [r3, #8]
 80082dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	4019      	ands	r1, r3
 80082e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082f0:	6918      	ldr	r0, [r3, #16]
 80082f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082fa:	689c      	ldr	r4, [r3, #8]
 80082fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	4323      	orrs	r3, r4
 8008308:	4003      	ands	r3, r0
 800830a:	430b      	orrs	r3, r1
 800830c:	4413      	add	r3, r2
 800830e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008316:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800831a:	695a      	ldr	r2, [r3, #20]
 800831c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008320:	441a      	add	r2, r3
 8008322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008326:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800832a:	615a      	str	r2, [r3, #20]
 800832c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008330:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008334:	441a      	add	r2, r3
 8008336:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800833a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800833e:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8008340:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800834e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008358:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800835c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008366:	4059      	eors	r1, r3
 8008368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800836c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008376:	404b      	eors	r3, r1
 8008378:	441a      	add	r2, r3
 800837a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800837e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008382:	69d9      	ldr	r1, [r3, #28]
 8008384:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008388:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800838c:	6958      	ldr	r0, [r3, #20]
 800838e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008392:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008396:	699c      	ldr	r4, [r3, #24]
 8008398:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800839c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	4063      	eors	r3, r4
 80083a4:	4003      	ands	r3, r0
 80083a6:	404b      	eors	r3, r1
 80083a8:	441a      	add	r2, r3
 80083aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083ae:	3307      	adds	r3, #7
 80083b0:	4966      	ldr	r1, [pc, #408]	@ (800854c <mbedtls_internal_sha256_process+0x1a34>)
 80083b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80083b6:	441a      	add	r2, r3
 80083b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083bc:	1d59      	adds	r1, r3, #5
 80083be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083ca:	ea4f 4173 	mov.w	r1, r3, ror #17
 80083ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083d2:	1d58      	adds	r0, r3, #5
 80083d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083e0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80083e4:	4059      	eors	r1, r3
 80083e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083ea:	1d58      	adds	r0, r3, #5
 80083ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083f8:	0a9b      	lsrs	r3, r3, #10
 80083fa:	4059      	eors	r1, r3
 80083fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008400:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008404:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800840c:	4419      	add	r1, r3
 800840e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008412:	f1a3 0008 	sub.w	r0, r3, #8
 8008416:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800841a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800841e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008422:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008426:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800842a:	f1a3 0408 	sub.w	r4, r3, #8
 800842e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008432:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008436:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800843a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800843e:	4058      	eors	r0, r3
 8008440:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008444:	f1a3 0408 	sub.w	r4, r3, #8
 8008448:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800844c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008450:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008454:	08db      	lsrs	r3, r3, #3
 8008456:	4043      	eors	r3, r0
 8008458:	18c8      	adds	r0, r1, r3
 800845a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800845e:	f1a3 0109 	sub.w	r1, r3, #9
 8008462:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008466:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800846a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800846e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008472:	3307      	adds	r3, #7
 8008474:	4408      	add	r0, r1
 8008476:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800847a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800847e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008482:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008486:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800848a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800848e:	4413      	add	r3, r2
 8008490:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008494:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008498:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80084a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	ea4f 3373 	mov.w	r3, r3, ror #13
 80084b0:	405a      	eors	r2, r3
 80084b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80084c0:	405a      	eors	r2, r3
 80084c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ca:	6859      	ldr	r1, [r3, #4]
 80084cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4019      	ands	r1, r3
 80084d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084e0:	68d8      	ldr	r0, [r3, #12]
 80084e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ea:	685c      	ldr	r4, [r3, #4]
 80084ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	4323      	orrs	r3, r4
 80084f8:	4003      	ands	r3, r0
 80084fa:	430b      	orrs	r3, r1
 80084fc:	4413      	add	r3, r2
 80084fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008502:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008506:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008510:	441a      	add	r2, r3
 8008512:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800851a:	611a      	str	r2, [r3, #16]
 800851c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008520:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008524:	441a      	add	r2, r3
 8008526:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800852a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800852e:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8008530:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008534:	3308      	adds	r3, #8
 8008536:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800853a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800853e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008540:	f67f a828 	bls.w	8007594 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8008544:	2300      	movs	r3, #0
 8008546:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800854a:	e023      	b.n	8008594 <mbedtls_internal_sha256_process+0x1a7c>
 800854c:	0800f6a4 	.word	0x0800f6a4
        ctx->state[i] += A[i];
 8008550:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008554:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800855e:	3202      	adds	r2, #2
 8008560:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008564:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008568:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800856c:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008574:	18d1      	adds	r1, r2, r3
 8008576:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800857a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8008584:	3202      	adds	r2, #2
 8008586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 800858a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800858e:	3301      	adds	r3, #1
 8008590:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008594:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008598:	2b07      	cmp	r3, #7
 800859a:	d9d9      	bls.n	8008550 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc90      	pop	{r4, r7}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 80085be:	2300      	movs	r3, #0
 80085c0:	e065      	b.n	800868e <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085ca:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80085d2:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	441a      	add	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d904      	bls.n	80085fc <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d034      	beq.n	800866c <mbedtls_sha256_update_ret+0xc0>
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	429a      	cmp	r2, r3
 8008608:	d330      	bcc.n	800866c <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	4618      	mov	r0, r3
 800861a:	f006 f940 	bl	800e89e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3328      	adds	r3, #40	@ 0x28
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7fe fa77 	bl	8006b18 <mbedtls_internal_sha256_process>
 800862a:	6178      	str	r0, [r7, #20]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	e02b      	b.n	800868e <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	4413      	add	r3, r2
 800863c:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	607b      	str	r3, [r7, #4]
        left = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 800864a:	e00f      	b.n	800866c <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7fe fa62 	bl	8006b18 <mbedtls_internal_sha256_process>
 8008654:	6178      	str	r0, [r7, #20]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	e016      	b.n	800868e <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	3340      	adds	r3, #64	@ 0x40
 8008664:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3b40      	subs	r3, #64	@ 0x40
 800866a:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008670:	d8ec      	bhi.n	800864c <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f006 f909 	bl	800e89e <memcpy>

    return( 0 );
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3720      	adds	r7, #32
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086a8:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	617a      	str	r2, [r7, #20]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	4413      	add	r3, r2
 80086b4:	2280      	movs	r2, #128	@ 0x80
 80086b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b38      	cmp	r3, #56	@ 0x38
 80086be:	d80c      	bhi.n	80086da <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	18d0      	adds	r0, r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80086d0:	461a      	mov	r2, r3
 80086d2:	2100      	movs	r1, #0
 80086d4:	f006 f89e 	bl	800e814 <memset>
 80086d8:	e01e      	b.n	8008718 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	18d0      	adds	r0, r2, r3
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80086ea:	461a      	mov	r2, r3
 80086ec:	2100      	movs	r1, #0
 80086ee:	f006 f891 	bl	800e814 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3328      	adds	r3, #40	@ 0x28
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7fe fa0d 	bl	8006b18 <mbedtls_internal_sha256_process>
 80086fe:	6138      	str	r0, [r7, #16]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	e128      	b.n	800895c <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3328      	adds	r3, #40	@ 0x28
 800870e:	2238      	movs	r2, #56	@ 0x38
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f006 f87e 	bl	800e814 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	0e1b      	lsrs	r3, r3, #24
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	b2da      	uxtb	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	b2da      	uxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	b2da      	uxtb	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	0e1b      	lsrs	r3, r3, #24
 8008762:	b2da      	uxtb	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	b2da      	uxtb	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	0a1b      	lsrs	r3, r3, #8
 800877a:	b2da      	uxtb	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	b2da      	uxtb	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3328      	adds	r3, #40	@ 0x28
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fe f9c0 	bl	8006b18 <mbedtls_internal_sha256_process>
 8008798:	6138      	str	r0, [r7, #16]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	e0db      	b.n	800895c <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	0e1b      	lsrs	r3, r3, #24
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	0c1a      	lsrs	r2, r3, #16
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	3301      	adds	r3, #1
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	0a1a      	lsrs	r2, r3, #8
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	3302      	adds	r3, #2
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	3303      	adds	r3, #3
 80087d4:	b2d2      	uxtb	r2, r2
 80087d6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	0e1a      	lsrs	r2, r3, #24
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	3304      	adds	r3, #4
 80087e2:	b2d2      	uxtb	r2, r2
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	0c1a      	lsrs	r2, r3, #16
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	3305      	adds	r3, #5
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	0a1a      	lsrs	r2, r3, #8
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	3306      	adds	r3, #6
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	3307      	adds	r3, #7
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	0e1a      	lsrs	r2, r3, #24
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	b2d2      	uxtb	r2, r2
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	0c1a      	lsrs	r2, r3, #16
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	3309      	adds	r3, #9
 8008826:	b2d2      	uxtb	r2, r2
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	0a1a      	lsrs	r2, r3, #8
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	330a      	adds	r3, #10
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	330b      	adds	r3, #11
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	0e1a      	lsrs	r2, r3, #24
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	330c      	adds	r3, #12
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	0c1a      	lsrs	r2, r3, #16
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	330d      	adds	r3, #13
 800885c:	b2d2      	uxtb	r2, r2
 800885e:	701a      	strb	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	0a1a      	lsrs	r2, r3, #8
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	330e      	adds	r3, #14
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695a      	ldr	r2, [r3, #20]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	330f      	adds	r3, #15
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	0e1a      	lsrs	r2, r3, #24
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	3310      	adds	r3, #16
 8008884:	b2d2      	uxtb	r2, r2
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	0c1a      	lsrs	r2, r3, #16
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	3311      	adds	r3, #17
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	0a1a      	lsrs	r2, r3, #8
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	3312      	adds	r3, #18
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	3313      	adds	r3, #19
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	0e1a      	lsrs	r2, r3, #24
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	0c1a      	lsrs	r2, r3, #16
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	3315      	adds	r3, #21
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	0a1a      	lsrs	r2, r3, #8
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	3316      	adds	r3, #22
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69da      	ldr	r2, [r3, #28]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	3317      	adds	r3, #23
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	0e1a      	lsrs	r2, r3, #24
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	3318      	adds	r3, #24
 80088f0:	b2d2      	uxtb	r2, r2
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	0c1a      	lsrs	r2, r3, #16
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3319      	adds	r3, #25
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	0a1a      	lsrs	r2, r3, #8
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	331a      	adds	r3, #26
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1a      	ldr	r2, [r3, #32]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	331b      	adds	r3, #27
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008920:	2b00      	cmp	r3, #0
 8008922:	d11a      	bne.n	800895a <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008928:	0e1a      	lsrs	r2, r3, #24
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	331c      	adds	r3, #28
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008936:	0c1a      	lsrs	r2, r3, #16
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	331d      	adds	r3, #29
 800893c:	b2d2      	uxtb	r2, r2
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008944:	0a1a      	lsrs	r2, r3, #8
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	331e      	adds	r3, #30
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	331f      	adds	r3, #31
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800896a:	2300      	movs	r3, #0
 800896c:	607b      	str	r3, [r7, #4]
 800896e:	4b10      	ldr	r3, [pc, #64]	@ (80089b0 <HAL_MspInit+0x4c>)
 8008970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008972:	4a0f      	ldr	r2, [pc, #60]	@ (80089b0 <HAL_MspInit+0x4c>)
 8008974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008978:	6453      	str	r3, [r2, #68]	@ 0x44
 800897a:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <HAL_MspInit+0x4c>)
 800897c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800897e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008986:	2300      	movs	r3, #0
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <HAL_MspInit+0x4c>)
 800898c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898e:	4a08      	ldr	r2, [pc, #32]	@ (80089b0 <HAL_MspInit+0x4c>)
 8008990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008994:	6413      	str	r3, [r2, #64]	@ 0x40
 8008996:	4b06      	ldr	r3, [pc, #24]	@ (80089b0 <HAL_MspInit+0x4c>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40023800 	.word	0x40023800

080089b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	@ 0x28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	609a      	str	r2, [r3, #8]
 80089c8:	60da      	str	r2, [r3, #12]
 80089ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <HAL_I2C_MspInit+0x94>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d134      	bne.n	8008a40 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089d6:	2300      	movs	r3, #0
 80089d8:	613b      	str	r3, [r7, #16]
 80089da:	4b1c      	ldr	r3, [pc, #112]	@ (8008a4c <HAL_I2C_MspInit+0x98>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089de:	4a1b      	ldr	r2, [pc, #108]	@ (8008a4c <HAL_I2C_MspInit+0x98>)
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80089e6:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <HAL_I2C_MspInit+0x98>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80089f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80089f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089f8:	2312      	movs	r3, #18
 80089fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a00:	2303      	movs	r3, #3
 8008a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a04:	2304      	movs	r3, #4
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4810      	ldr	r0, [pc, #64]	@ (8008a50 <HAL_I2C_MspInit+0x9c>)
 8008a10:	f000 fc1e 	bl	8009250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a14:	2300      	movs	r3, #0
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	4b0c      	ldr	r3, [pc, #48]	@ (8008a4c <HAL_I2C_MspInit+0x98>)
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8008a4c <HAL_I2C_MspInit+0x98>)
 8008a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a24:	4b09      	ldr	r3, [pc, #36]	@ (8008a4c <HAL_I2C_MspInit+0x98>)
 8008a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	2020      	movs	r0, #32
 8008a36:	f000 fb34 	bl	80090a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008a3a:	2020      	movs	r0, #32
 8008a3c:	f000 fb4d 	bl	80090da <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008a40:	bf00      	nop
 8008a42:	3728      	adds	r7, #40	@ 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40005400 	.word	0x40005400
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020400 	.word	0x40020400

08008a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a64:	d115      	bne.n	8008a92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a9c <HAL_TIM_Base_MspInit+0x48>)
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8008a9c <HAL_TIM_Base_MspInit+0x48>)
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a76:	4b09      	ldr	r3, [pc, #36]	@ (8008a9c <HAL_TIM_Base_MspInit+0x48>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	201c      	movs	r0, #28
 8008a88:	f000 fb0b 	bl	80090a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008a8c:	201c      	movs	r0, #28
 8008a8e:	f000 fb24 	bl	80090da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40023800 	.word	0x40023800

08008aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	@ 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aa8:	f107 0314 	add.w	r3, r7, #20
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
 8008ab4:	60da      	str	r2, [r3, #12]
 8008ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b34 <HAL_UART_MspInit+0x94>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d133      	bne.n	8008b2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8008b38 <HAL_UART_MspInit+0x98>)
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	4a1b      	ldr	r2, [pc, #108]	@ (8008b38 <HAL_UART_MspInit+0x98>)
 8008acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ad2:	4b19      	ldr	r3, [pc, #100]	@ (8008b38 <HAL_UART_MspInit+0x98>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <HAL_UART_MspInit+0x98>)
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae6:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <HAL_UART_MspInit+0x98>)
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8008aee:	4b12      	ldr	r3, [pc, #72]	@ (8008b38 <HAL_UART_MspInit+0x98>)
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008afa:	230c      	movs	r3, #12
 8008afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008afe:	2302      	movs	r3, #2
 8008b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b06:	2300      	movs	r3, #0
 8008b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b0a:	2307      	movs	r3, #7
 8008b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	4619      	mov	r1, r3
 8008b14:	4809      	ldr	r0, [pc, #36]	@ (8008b3c <HAL_UART_MspInit+0x9c>)
 8008b16:	f000 fb9b 	bl	8009250 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	2026      	movs	r0, #38	@ 0x26
 8008b20:	f000 fabf 	bl	80090a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008b24:	2026      	movs	r0, #38	@ 0x26
 8008b26:	f000 fad8 	bl	80090da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8008b2a:	bf00      	nop
 8008b2c:	3728      	adds	r7, #40	@ 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40004400 	.word	0x40004400
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	40020000 	.word	0x40020000

08008b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <NMI_Handler+0x4>

08008b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b4c:	bf00      	nop
 8008b4e:	e7fd      	b.n	8008b4c <HardFault_Handler+0x4>

08008b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <MemManage_Handler+0x4>

08008b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <BusFault_Handler+0x4>

08008b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <UsageFault_Handler+0x4>

08008b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b6c:	bf00      	nop
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b76:	b480      	push	{r7}
 8008b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b7a:	bf00      	nop
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b88:	bf00      	nop
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b96:	f000 f965 	bl	8008e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b9a:	bf00      	nop
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008ba4:	4802      	ldr	r0, [pc, #8]	@ (8008bb0 <TIM2_IRQHandler+0x10>)
 8008ba6:	f004 f887 	bl	800ccb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000634 	.word	0x20000634

08008bb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008bb8:	4802      	ldr	r0, [pc, #8]	@ (8008bc4 <I2C1_EV_IRQHandler+0x10>)
 8008bba:	f001 fadd 	bl	800a178 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008bbe:	bf00      	nop
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	200005e0 	.word	0x200005e0

08008bc8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008bcc:	4802      	ldr	r0, [pc, #8]	@ (8008bd8 <I2C1_ER_IRQHandler+0x10>)
 8008bce:	f001 fc26 	bl	800a41e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008bd2:	bf00      	nop
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	200005e0 	.word	0x200005e0

08008bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008be0:	4802      	ldr	r0, [pc, #8]	@ (8008bec <USART2_IRQHandler+0x10>)
 8008be2:	f004 fcc7 	bl	800d574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	2000067c 	.word	0x2000067c

08008bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008bf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008bf8:	f000 fce2 	bl	80095c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008bfc:	bf00      	nop
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e00a      	b.n	8008c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c12:	f3af 8000 	nop.w
 8008c16:	4601      	mov	r1, r0
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	60ba      	str	r2, [r7, #8]
 8008c1e:	b2ca      	uxtb	r2, r1
 8008c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	3301      	adds	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	dbf0      	blt.n	8008c12 <_read+0x12>
  }

  return len;
 8008c30:	687b      	ldr	r3, [r7, #4]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	e009      	b.n	8008c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	60ba      	str	r2, [r7, #8]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fa fde1 	bl	800381c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	dbf1      	blt.n	8008c4c <_write+0x12>
  }
  return len;
 8008c68:	687b      	ldr	r3, [r7, #4]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_close>:

int _close(int file)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <_isatty>:

int _isatty(int file)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008cb2:	2301      	movs	r3, #1
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
	...

08008cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ce4:	4a14      	ldr	r2, [pc, #80]	@ (8008d38 <_sbrk+0x5c>)
 8008ce6:	4b15      	ldr	r3, [pc, #84]	@ (8008d3c <_sbrk+0x60>)
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cf0:	4b13      	ldr	r3, [pc, #76]	@ (8008d40 <_sbrk+0x64>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	@ (8008d40 <_sbrk+0x64>)
 8008cfa:	4a12      	ldr	r2, [pc, #72]	@ (8008d44 <_sbrk+0x68>)
 8008cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cfe:	4b10      	ldr	r3, [pc, #64]	@ (8008d40 <_sbrk+0x64>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d207      	bcs.n	8008d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d0c:	f005 fd9a 	bl	800e844 <__errno>
 8008d10:	4603      	mov	r3, r0
 8008d12:	220c      	movs	r2, #12
 8008d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d1a:	e009      	b.n	8008d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d1c:	4b08      	ldr	r3, [pc, #32]	@ (8008d40 <_sbrk+0x64>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d22:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <_sbrk+0x64>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4413      	add	r3, r2
 8008d2a:	4a05      	ldr	r2, [pc, #20]	@ (8008d40 <_sbrk+0x64>)
 8008d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20018000 	.word	0x20018000
 8008d3c:	00000400 	.word	0x00000400
 8008d40:	20000dcc 	.word	0x20000dcc
 8008d44:	20000f20 	.word	0x20000f20

08008d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d4c:	4b06      	ldr	r3, [pc, #24]	@ (8008d68 <SystemInit+0x20>)
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d52:	4a05      	ldr	r2, [pc, #20]	@ (8008d68 <SystemInit+0x20>)
 8008d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d5c:	bf00      	nop
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	e000ed00 	.word	0xe000ed00

08008d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008d70:	f7ff ffea 	bl	8008d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008d74:	480c      	ldr	r0, [pc, #48]	@ (8008da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d76:	490d      	ldr	r1, [pc, #52]	@ (8008dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d78:	4a0d      	ldr	r2, [pc, #52]	@ (8008db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d7c:	e002      	b.n	8008d84 <LoopCopyDataInit>

08008d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d82:	3304      	adds	r3, #4

08008d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d88:	d3f9      	bcc.n	8008d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8008db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d90:	e001      	b.n	8008d96 <LoopFillZerobss>

08008d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d94:	3204      	adds	r2, #4

08008d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d98:	d3fb      	bcc.n	8008d92 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8008d9a:	f005 fd59 	bl	800e850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d9e:	f7fa ff8b 	bl	8003cb8 <main>
  bx  lr    
 8008da2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008da4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008dac:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8008db0:	0800f800 	.word	0x0800f800
  ldr r2, =_sbss
 8008db4:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 8008db8:	20000f20 	.word	0x20000f20

08008dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008dbc:	e7fe      	b.n	8008dbc <ADC_IRQHandler>
	...

08008dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e00 <HAL_Init+0x40>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8008e00 <HAL_Init+0x40>)
 8008dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <HAL_Init+0x40>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8008e00 <HAL_Init+0x40>)
 8008dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ddc:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <HAL_Init+0x40>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a07      	ldr	r2, [pc, #28]	@ (8008e00 <HAL_Init+0x40>)
 8008de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008de8:	2003      	movs	r0, #3
 8008dea:	f000 f94f 	bl	800908c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008dee:	2000      	movs	r0, #0
 8008df0:	f000 f808 	bl	8008e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008df4:	f7ff fdb6 	bl	8008964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40023c00 	.word	0x40023c00

08008e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e0c:	4b12      	ldr	r3, [pc, #72]	@ (8008e58 <HAL_InitTick+0x54>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	4b12      	ldr	r3, [pc, #72]	@ (8008e5c <HAL_InitTick+0x58>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	4619      	mov	r1, r3
 8008e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f967 	bl	80090f6 <HAL_SYSTICK_Config>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e00e      	b.n	8008e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b0f      	cmp	r3, #15
 8008e36:	d80a      	bhi.n	8008e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e38:	2200      	movs	r2, #0
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e40:	f000 f92f 	bl	80090a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e44:	4a06      	ldr	r2, [pc, #24]	@ (8008e60 <HAL_InitTick+0x5c>)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e000      	b.n	8008e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20000554 	.word	0x20000554
 8008e5c:	2000055c 	.word	0x2000055c
 8008e60:	20000558 	.word	0x20000558

08008e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e68:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <HAL_IncTick+0x20>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <HAL_IncTick+0x24>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4413      	add	r3, r2
 8008e74:	4a04      	ldr	r2, [pc, #16]	@ (8008e88 <HAL_IncTick+0x24>)
 8008e76:	6013      	str	r3, [r2, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	2000055c 	.word	0x2000055c
 8008e88:	20000dd0 	.word	0x20000dd0

08008e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8008e90:	4b03      	ldr	r3, [pc, #12]	@ (8008ea0 <HAL_GetTick+0x14>)
 8008e92:	681b      	ldr	r3, [r3, #0]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20000dd0 	.word	0x20000dd0

08008ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008eac:	f7ff ffee 	bl	8008e8c <HAL_GetTick>
 8008eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ebc:	d005      	beq.n	8008eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <HAL_Delay+0x44>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008eca:	bf00      	nop
 8008ecc:	f7ff ffde 	bl	8008e8c <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d8f7      	bhi.n	8008ecc <HAL_Delay+0x28>
  {
  }
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	2000055c 	.word	0x2000055c

08008eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008efc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f30 <__NVIC_SetPriorityGrouping+0x44>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f1e:	4a04      	ldr	r2, [pc, #16]	@ (8008f30 <__NVIC_SetPriorityGrouping+0x44>)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	60d3      	str	r3, [r2, #12]
}
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	e000ed00 	.word	0xe000ed00

08008f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f38:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <__NVIC_GetPriorityGrouping+0x18>)
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	0a1b      	lsrs	r3, r3, #8
 8008f3e:	f003 0307 	and.w	r3, r3, #7
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	e000ed00 	.word	0xe000ed00

08008f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	db0b      	blt.n	8008f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	f003 021f 	and.w	r2, r3, #31
 8008f68:	4907      	ldr	r1, [pc, #28]	@ (8008f88 <__NVIC_EnableIRQ+0x38>)
 8008f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	2001      	movs	r0, #1
 8008f72:	fa00 f202 	lsl.w	r2, r0, r2
 8008f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	e000e100 	.word	0xe000e100

08008f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	db0a      	blt.n	8008fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	490c      	ldr	r1, [pc, #48]	@ (8008fd8 <__NVIC_SetPriority+0x4c>)
 8008fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008faa:	0112      	lsls	r2, r2, #4
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	440b      	add	r3, r1
 8008fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fb4:	e00a      	b.n	8008fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4908      	ldr	r1, [pc, #32]	@ (8008fdc <__NVIC_SetPriority+0x50>)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	f003 030f 	and.w	r3, r3, #15
 8008fc2:	3b04      	subs	r3, #4
 8008fc4:	0112      	lsls	r2, r2, #4
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	440b      	add	r3, r1
 8008fca:	761a      	strb	r2, [r3, #24]
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	e000e100 	.word	0xe000e100
 8008fdc:	e000ed00 	.word	0xe000ed00

08008fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b089      	sub	sp, #36	@ 0x24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f1c3 0307 	rsb	r3, r3, #7
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	bf28      	it	cs
 8008ffe:	2304      	movcs	r3, #4
 8009000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	3304      	adds	r3, #4
 8009006:	2b06      	cmp	r3, #6
 8009008:	d902      	bls.n	8009010 <NVIC_EncodePriority+0x30>
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	3b03      	subs	r3, #3
 800900e:	e000      	b.n	8009012 <NVIC_EncodePriority+0x32>
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	fa02 f303 	lsl.w	r3, r2, r3
 800901e:	43da      	mvns	r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	401a      	ands	r2, r3
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009028:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	fa01 f303 	lsl.w	r3, r1, r3
 8009032:	43d9      	mvns	r1, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009038:	4313      	orrs	r3, r2
         );
}
 800903a:	4618      	mov	r0, r3
 800903c:	3724      	adds	r7, #36	@ 0x24
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3b01      	subs	r3, #1
 8009054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009058:	d301      	bcc.n	800905e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800905a:	2301      	movs	r3, #1
 800905c:	e00f      	b.n	800907e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800905e:	4a0a      	ldr	r2, [pc, #40]	@ (8009088 <SysTick_Config+0x40>)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3b01      	subs	r3, #1
 8009064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009066:	210f      	movs	r1, #15
 8009068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800906c:	f7ff ff8e 	bl	8008f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009070:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <SysTick_Config+0x40>)
 8009072:	2200      	movs	r2, #0
 8009074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009076:	4b04      	ldr	r3, [pc, #16]	@ (8009088 <SysTick_Config+0x40>)
 8009078:	2207      	movs	r2, #7
 800907a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	e000e010 	.word	0xe000e010

0800908c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ff29 	bl	8008eec <__NVIC_SetPriorityGrouping>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	4603      	mov	r3, r0
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090b4:	f7ff ff3e 	bl	8008f34 <__NVIC_GetPriorityGrouping>
 80090b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	68b9      	ldr	r1, [r7, #8]
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f7ff ff8e 	bl	8008fe0 <NVIC_EncodePriority>
 80090c4:	4602      	mov	r2, r0
 80090c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff ff5d 	bl	8008f8c <__NVIC_SetPriority>
}
 80090d2:	bf00      	nop
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	4603      	mov	r3, r0
 80090e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff ff31 	bl	8008f50 <__NVIC_EnableIRQ>
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff ffa2 	bl	8009048 <SysTick_Config>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800911a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800911c:	f7ff feb6 	bl	8008e8c <HAL_GetTick>
 8009120:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d008      	beq.n	8009140 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2280      	movs	r2, #128	@ 0x80
 8009132:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e052      	b.n	80091e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 0216 	bic.w	r2, r2, #22
 800914e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695a      	ldr	r2, [r3, #20]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800915e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	d103      	bne.n	8009170 <HAL_DMA_Abort+0x62>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916c:	2b00      	cmp	r3, #0
 800916e:	d007      	beq.n	8009180 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0208 	bic.w	r2, r2, #8
 800917e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0201 	bic.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009190:	e013      	b.n	80091ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009192:	f7ff fe7b 	bl	8008e8c <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	2b05      	cmp	r3, #5
 800919e:	d90c      	bls.n	80091ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2220      	movs	r2, #32
 80091a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2203      	movs	r2, #3
 80091aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e015      	b.n	80091e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e4      	bne.n	8009192 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091cc:	223f      	movs	r2, #63	@ 0x3f
 80091ce:	409a      	lsls	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d004      	beq.n	800920c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2280      	movs	r2, #128	@ 0x80
 8009206:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e00c      	b.n	8009226 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2205      	movs	r2, #5
 8009210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0201 	bic.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009240:	b2db      	uxtb	r3, r3
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009250:	b480      	push	{r7}
 8009252:	b089      	sub	sp, #36	@ 0x24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800925a:	2300      	movs	r3, #0
 800925c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800925e:	2300      	movs	r3, #0
 8009260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009262:	2300      	movs	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009266:	2300      	movs	r3, #0
 8009268:	61fb      	str	r3, [r7, #28]
 800926a:	e159      	b.n	8009520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800926c:	2201      	movs	r2, #1
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	fa02 f303 	lsl.w	r3, r2, r3
 8009274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4013      	ands	r3, r2
 800927e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	429a      	cmp	r2, r3
 8009286:	f040 8148 	bne.w	800951a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b01      	cmp	r3, #1
 8009294:	d005      	beq.n	80092a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d130      	bne.n	8009304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	2203      	movs	r2, #3
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	43db      	mvns	r3, r3
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	4013      	ands	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092d8:	2201      	movs	r2, #1
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	4013      	ands	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	091b      	lsrs	r3, r3, #4
 80092ee:	f003 0201 	and.w	r2, r3, #1
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	2b03      	cmp	r3, #3
 800930e:	d017      	beq.n	8009340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	2203      	movs	r2, #3
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	43db      	mvns	r3, r3
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	4013      	ands	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	4313      	orrs	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	2b02      	cmp	r3, #2
 800934a:	d123      	bne.n	8009394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	08da      	lsrs	r2, r3, #3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3208      	adds	r2, #8
 8009354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	220f      	movs	r2, #15
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	43db      	mvns	r3, r3
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	4013      	ands	r3, r2
 800936e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	691a      	ldr	r2, [r3, #16]
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	4313      	orrs	r3, r2
 8009384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	08da      	lsrs	r2, r3, #3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3208      	adds	r2, #8
 800938e:	69b9      	ldr	r1, [r7, #24]
 8009390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	2203      	movs	r2, #3
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	43db      	mvns	r3, r3
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	4013      	ands	r3, r2
 80093aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f003 0203 	and.w	r2, r3, #3
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	fa02 f303 	lsl.w	r3, r2, r3
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	4313      	orrs	r3, r2
 80093c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80a2 	beq.w	800951a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	4b57      	ldr	r3, [pc, #348]	@ (8009538 <HAL_GPIO_Init+0x2e8>)
 80093dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093de:	4a56      	ldr	r2, [pc, #344]	@ (8009538 <HAL_GPIO_Init+0x2e8>)
 80093e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80093e6:	4b54      	ldr	r3, [pc, #336]	@ (8009538 <HAL_GPIO_Init+0x2e8>)
 80093e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093f2:	4a52      	ldr	r2, [pc, #328]	@ (800953c <HAL_GPIO_Init+0x2ec>)
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	089b      	lsrs	r3, r3, #2
 80093f8:	3302      	adds	r3, #2
 80093fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	220f      	movs	r2, #15
 800940a:	fa02 f303 	lsl.w	r3, r2, r3
 800940e:	43db      	mvns	r3, r3
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	4013      	ands	r3, r2
 8009414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a49      	ldr	r2, [pc, #292]	@ (8009540 <HAL_GPIO_Init+0x2f0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d019      	beq.n	8009452 <HAL_GPIO_Init+0x202>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a48      	ldr	r2, [pc, #288]	@ (8009544 <HAL_GPIO_Init+0x2f4>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d013      	beq.n	800944e <HAL_GPIO_Init+0x1fe>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a47      	ldr	r2, [pc, #284]	@ (8009548 <HAL_GPIO_Init+0x2f8>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d00d      	beq.n	800944a <HAL_GPIO_Init+0x1fa>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a46      	ldr	r2, [pc, #280]	@ (800954c <HAL_GPIO_Init+0x2fc>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d007      	beq.n	8009446 <HAL_GPIO_Init+0x1f6>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a45      	ldr	r2, [pc, #276]	@ (8009550 <HAL_GPIO_Init+0x300>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d101      	bne.n	8009442 <HAL_GPIO_Init+0x1f2>
 800943e:	2304      	movs	r3, #4
 8009440:	e008      	b.n	8009454 <HAL_GPIO_Init+0x204>
 8009442:	2307      	movs	r3, #7
 8009444:	e006      	b.n	8009454 <HAL_GPIO_Init+0x204>
 8009446:	2303      	movs	r3, #3
 8009448:	e004      	b.n	8009454 <HAL_GPIO_Init+0x204>
 800944a:	2302      	movs	r3, #2
 800944c:	e002      	b.n	8009454 <HAL_GPIO_Init+0x204>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <HAL_GPIO_Init+0x204>
 8009452:	2300      	movs	r3, #0
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	f002 0203 	and.w	r2, r2, #3
 800945a:	0092      	lsls	r2, r2, #2
 800945c:	4093      	lsls	r3, r2
 800945e:	69ba      	ldr	r2, [r7, #24]
 8009460:	4313      	orrs	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009464:	4935      	ldr	r1, [pc, #212]	@ (800953c <HAL_GPIO_Init+0x2ec>)
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	089b      	lsrs	r3, r3, #2
 800946a:	3302      	adds	r3, #2
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009472:	4b38      	ldr	r3, [pc, #224]	@ (8009554 <HAL_GPIO_Init+0x304>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	43db      	mvns	r3, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	4013      	ands	r3, r2
 8009480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009496:	4a2f      	ldr	r2, [pc, #188]	@ (8009554 <HAL_GPIO_Init+0x304>)
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800949c:	4b2d      	ldr	r3, [pc, #180]	@ (8009554 <HAL_GPIO_Init+0x304>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	43db      	mvns	r3, r3
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	4013      	ands	r3, r2
 80094aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094c0:	4a24      	ldr	r2, [pc, #144]	@ (8009554 <HAL_GPIO_Init+0x304>)
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80094c6:	4b23      	ldr	r3, [pc, #140]	@ (8009554 <HAL_GPIO_Init+0x304>)
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	43db      	mvns	r3, r3
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	4013      	ands	r3, r2
 80094d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80094ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009554 <HAL_GPIO_Init+0x304>)
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094f0:	4b18      	ldr	r3, [pc, #96]	@ (8009554 <HAL_GPIO_Init+0x304>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	43db      	mvns	r3, r3
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	4013      	ands	r3, r2
 80094fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	4313      	orrs	r3, r2
 8009512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009514:	4a0f      	ldr	r2, [pc, #60]	@ (8009554 <HAL_GPIO_Init+0x304>)
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	3301      	adds	r3, #1
 800951e:	61fb      	str	r3, [r7, #28]
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	2b0f      	cmp	r3, #15
 8009524:	f67f aea2 	bls.w	800926c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	3724      	adds	r7, #36	@ 0x24
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40023800 	.word	0x40023800
 800953c:	40013800 	.word	0x40013800
 8009540:	40020000 	.word	0x40020000
 8009544:	40020400 	.word	0x40020400
 8009548:	40020800 	.word	0x40020800
 800954c:	40020c00 	.word	0x40020c00
 8009550:	40021000 	.word	0x40021000
 8009554:	40013c00 	.word	0x40013c00

08009558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	807b      	strh	r3, [r7, #2]
 8009564:	4613      	mov	r3, r2
 8009566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009568:	787b      	ldrb	r3, [r7, #1]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800956e:	887a      	ldrh	r2, [r7, #2]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009574:	e003      	b.n	800957e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009576:	887b      	ldrh	r3, [r7, #2]
 8009578:	041a      	lsls	r2, r3, #16
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	619a      	str	r2, [r3, #24]
}
 800957e:	bf00      	nop
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800958a:	b480      	push	{r7}
 800958c:	b085      	sub	sp, #20
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800959c:	887a      	ldrh	r2, [r7, #2]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4013      	ands	r3, r2
 80095a2:	041a      	lsls	r2, r3, #16
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	43d9      	mvns	r1, r3
 80095a8:	887b      	ldrh	r3, [r7, #2]
 80095aa:	400b      	ands	r3, r1
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	619a      	str	r2, [r3, #24]
}
 80095b2:	bf00      	nop
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80095ca:	4b08      	ldr	r3, [pc, #32]	@ (80095ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095cc:	695a      	ldr	r2, [r3, #20]
 80095ce:	88fb      	ldrh	r3, [r7, #6]
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d006      	beq.n	80095e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095d6:	4a05      	ldr	r2, [pc, #20]	@ (80095ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f806 	bl	80095f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	40013c00 	.word	0x40013c00

080095f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e12b      	b.n	8009872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7ff f9c0 	bl	80089b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2224      	movs	r2, #36	@ 0x24
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0201 	bic.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800965a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800966a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800966c:	f003 fa4a 	bl	800cb04 <HAL_RCC_GetPCLK1Freq>
 8009670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	4a81      	ldr	r2, [pc, #516]	@ (800987c <HAL_I2C_Init+0x274>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d807      	bhi.n	800968c <HAL_I2C_Init+0x84>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4a80      	ldr	r2, [pc, #512]	@ (8009880 <HAL_I2C_Init+0x278>)
 8009680:	4293      	cmp	r3, r2
 8009682:	bf94      	ite	ls
 8009684:	2301      	movls	r3, #1
 8009686:	2300      	movhi	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	e006      	b.n	800969a <HAL_I2C_Init+0x92>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a7d      	ldr	r2, [pc, #500]	@ (8009884 <HAL_I2C_Init+0x27c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	bf94      	ite	ls
 8009694:	2301      	movls	r3, #1
 8009696:	2300      	movhi	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e0e7      	b.n	8009872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4a78      	ldr	r2, [pc, #480]	@ (8009888 <HAL_I2C_Init+0x280>)
 80096a6:	fba2 2303 	umull	r2, r3, r2, r3
 80096aa:	0c9b      	lsrs	r3, r3, #18
 80096ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	430a      	orrs	r2, r1
 80096c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	4a6a      	ldr	r2, [pc, #424]	@ (800987c <HAL_I2C_Init+0x274>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d802      	bhi.n	80096dc <HAL_I2C_Init+0xd4>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	3301      	adds	r3, #1
 80096da:	e009      	b.n	80096f0 <HAL_I2C_Init+0xe8>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80096e2:	fb02 f303 	mul.w	r3, r2, r3
 80096e6:	4a69      	ldr	r2, [pc, #420]	@ (800988c <HAL_I2C_Init+0x284>)
 80096e8:	fba2 2303 	umull	r2, r3, r2, r3
 80096ec:	099b      	lsrs	r3, r3, #6
 80096ee:	3301      	adds	r3, #1
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	430b      	orrs	r3, r1
 80096f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009702:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	495c      	ldr	r1, [pc, #368]	@ (800987c <HAL_I2C_Init+0x274>)
 800970c:	428b      	cmp	r3, r1
 800970e:	d819      	bhi.n	8009744 <HAL_I2C_Init+0x13c>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	1e59      	subs	r1, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	fbb1 f3f3 	udiv	r3, r1, r3
 800971e:	1c59      	adds	r1, r3, #1
 8009720:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009724:	400b      	ands	r3, r1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <HAL_I2C_Init+0x138>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1e59      	subs	r1, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	fbb1 f3f3 	udiv	r3, r1, r3
 8009738:	3301      	adds	r3, #1
 800973a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800973e:	e051      	b.n	80097e4 <HAL_I2C_Init+0x1dc>
 8009740:	2304      	movs	r3, #4
 8009742:	e04f      	b.n	80097e4 <HAL_I2C_Init+0x1dc>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d111      	bne.n	8009770 <HAL_I2C_Init+0x168>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	1e58      	subs	r0, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6859      	ldr	r1, [r3, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	440b      	add	r3, r1
 800975a:	fbb0 f3f3 	udiv	r3, r0, r3
 800975e:	3301      	adds	r3, #1
 8009760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009764:	2b00      	cmp	r3, #0
 8009766:	bf0c      	ite	eq
 8009768:	2301      	moveq	r3, #1
 800976a:	2300      	movne	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	e012      	b.n	8009796 <HAL_I2C_Init+0x18e>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	1e58      	subs	r0, r3, #1
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6859      	ldr	r1, [r3, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	0099      	lsls	r1, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	fbb0 f3f3 	udiv	r3, r0, r3
 8009786:	3301      	adds	r3, #1
 8009788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800978c:	2b00      	cmp	r3, #0
 800978e:	bf0c      	ite	eq
 8009790:	2301      	moveq	r3, #1
 8009792:	2300      	movne	r3, #0
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_I2C_Init+0x196>
 800979a:	2301      	movs	r3, #1
 800979c:	e022      	b.n	80097e4 <HAL_I2C_Init+0x1dc>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10e      	bne.n	80097c4 <HAL_I2C_Init+0x1bc>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1e58      	subs	r0, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6859      	ldr	r1, [r3, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	440b      	add	r3, r1
 80097b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80097b8:	3301      	adds	r3, #1
 80097ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097c2:	e00f      	b.n	80097e4 <HAL_I2C_Init+0x1dc>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	1e58      	subs	r0, r3, #1
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6859      	ldr	r1, [r3, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	0099      	lsls	r1, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80097da:	3301      	adds	r3, #1
 80097dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	6809      	ldr	r1, [r1, #0]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69da      	ldr	r2, [r3, #28]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009812:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	6911      	ldr	r1, [r2, #16]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	68d2      	ldr	r2, [r2, #12]
 800981e:	4311      	orrs	r1, r2
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6812      	ldr	r2, [r2, #0]
 8009824:	430b      	orrs	r3, r1
 8009826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695a      	ldr	r2, [r3, #20]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0201 	orr.w	r2, r2, #1
 8009852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	000186a0 	.word	0x000186a0
 8009880:	001e847f 	.word	0x001e847f
 8009884:	003d08ff 	.word	0x003d08ff
 8009888:	431bde83 	.word	0x431bde83
 800988c:	10624dd3 	.word	0x10624dd3

08009890 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a2:	2b80      	cmp	r3, #128	@ 0x80
 80098a4:	d103      	bne.n	80098ae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2200      	movs	r2, #0
 80098ac:	611a      	str	r2, [r3, #16]
  }
}
 80098ae:	bf00      	nop
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
	...

080098bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	607a      	str	r2, [r7, #4]
 80098c6:	461a      	mov	r2, r3
 80098c8:	460b      	mov	r3, r1
 80098ca:	817b      	strh	r3, [r7, #10]
 80098cc:	4613      	mov	r3, r2
 80098ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098d0:	f7ff fadc 	bl	8008e8c <HAL_GetTick>
 80098d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b20      	cmp	r3, #32
 80098e0:	f040 80e0 	bne.w	8009aa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2319      	movs	r3, #25
 80098ea:	2201      	movs	r2, #1
 80098ec:	4970      	ldr	r1, [pc, #448]	@ (8009ab0 <HAL_I2C_Master_Transmit+0x1f4>)
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f002 fa14 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80098fa:	2302      	movs	r3, #2
 80098fc:	e0d3      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_I2C_Master_Transmit+0x50>
 8009908:	2302      	movs	r3, #2
 800990a:	e0cc      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x1ea>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b01      	cmp	r3, #1
 8009920:	d007      	beq.n	8009932 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 0201 	orr.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2221      	movs	r2, #33	@ 0x21
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2210      	movs	r2, #16
 800994e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	893a      	ldrh	r2, [r7, #8]
 8009962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009968:	b29a      	uxth	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4a50      	ldr	r2, [pc, #320]	@ (8009ab4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009972:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009974:	8979      	ldrh	r1, [r7, #10]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f001 ffd6 	bl	800b92c <I2C_MasterRequestWrite>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e08d      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80099a0:	e066      	b.n	8009a70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	6a39      	ldr	r1, [r7, #32]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f002 fad2 	bl	800bf50 <I2C_WaitOnTXEFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d107      	bne.n	80099ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e06b      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d11b      	bne.n	8009a44 <HAL_I2C_Master_Transmit+0x188>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d017      	beq.n	8009a44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	6a39      	ldr	r1, [r7, #32]
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f002 fac9 	bl	800bfe0 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00d      	beq.n	8009a70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d107      	bne.n	8009a6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e01a      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d194      	bne.n	80099a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e000      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009aa4:	2302      	movs	r3, #2
  }
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	00100002 	.word	0x00100002
 8009ab4:	ffff0000 	.word	0xffff0000

08009ab8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08c      	sub	sp, #48	@ 0x30
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	607a      	str	r2, [r7, #4]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	817b      	strh	r3, [r7, #10]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009acc:	f7ff f9de 	bl	8008e8c <HAL_GetTick>
 8009ad0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	f040 8217 	bne.w	8009f0e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	2319      	movs	r3, #25
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	497c      	ldr	r1, [pc, #496]	@ (8009cdc <HAL_I2C_Master_Receive+0x224>)
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f002 f916 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009af6:	2302      	movs	r3, #2
 8009af8:	e20a      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <HAL_I2C_Master_Receive+0x50>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e203      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d007      	beq.n	8009b2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2222      	movs	r2, #34	@ 0x22
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2210      	movs	r2, #16
 8009b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	893a      	ldrh	r2, [r7, #8]
 8009b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4a5c      	ldr	r2, [pc, #368]	@ (8009ce0 <HAL_I2C_Master_Receive+0x228>)
 8009b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009b70:	8979      	ldrh	r1, [r7, #10]
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f001 ff5a 	bl	800ba30 <I2C_MasterRequestRead>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e1c4      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d113      	bne.n	8009bb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	623b      	str	r3, [r7, #32]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	623b      	str	r3, [r7, #32]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	623b      	str	r3, [r7, #32]
 8009ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	e198      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d11b      	bne.n	8009bf6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	61fb      	str	r3, [r7, #28]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	e178      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d11b      	bne.n	8009c36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	e158      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	617b      	str	r3, [r7, #20]
 8009c5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009c5c:	e144      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	f200 80f1 	bhi.w	8009e4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d123      	bne.n	8009cb8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f002 fa2d 	bl	800c0d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e145      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691a      	ldr	r2, [r3, #16]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009cb6:	e117      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d14e      	bne.n	8009d5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4906      	ldr	r1, [pc, #24]	@ (8009ce4 <HAL_I2C_Master_Receive+0x22c>)
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f002 f826 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d008      	beq.n	8009ce8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e11a      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
 8009cda:	bf00      	nop
 8009cdc:	00100002 	.word	0x00100002
 8009ce0:	ffff0000 	.word	0xffff0000
 8009ce4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d5c:	e0c4      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	2200      	movs	r2, #0
 8009d66:	496c      	ldr	r1, [pc, #432]	@ (8009f18 <HAL_I2C_Master_Receive+0x460>)
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f001 ffd7 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e0cb      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691a      	ldr	r2, [r3, #16]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009da4:	3b01      	subs	r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	3b01      	subs	r3, #1
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4955      	ldr	r1, [pc, #340]	@ (8009f18 <HAL_I2C_Master_Receive+0x460>)
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f001 ffa9 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e09d      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691a      	ldr	r2, [r3, #16]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dee:	b2d2      	uxtb	r2, r2
 8009df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e00:	3b01      	subs	r3, #1
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	691a      	ldr	r2, [r3, #16]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e32:	3b01      	subs	r3, #1
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	3b01      	subs	r3, #1
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e48:	e04e      	b.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f002 f940 	bl	800c0d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e058      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	691a      	ldr	r2, [r3, #16]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e68:	b2d2      	uxtb	r2, r2
 8009e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d124      	bne.n	8009ee8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d107      	bne.n	8009eb6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009eb4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691a      	ldr	r2, [r3, #16]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec0:	b2d2      	uxtb	r2, r2
 8009ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f aeb6 	bne.w	8009c5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e000      	b.n	8009f10 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009f0e:	2302      	movs	r3, #2
  }
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3728      	adds	r7, #40	@ 0x28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	00010004 	.word	0x00010004

08009f1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	@ 0x28
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	607a      	str	r2, [r7, #4]
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009f2c:	f7fe ffae 	bl	8008e8c <HAL_GetTick>
 8009f30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	f040 8111 	bne.w	800a166 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	2319      	movs	r3, #25
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	4988      	ldr	r1, [pc, #544]	@ (800a170 <HAL_I2C_IsDeviceReady+0x254>)
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f001 fee4 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e104      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d101      	bne.n	8009f6c <HAL_I2C_IsDeviceReady+0x50>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e0fd      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d007      	beq.n	8009f92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f042 0201 	orr.w	r2, r2, #1
 8009f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2224      	movs	r2, #36	@ 0x24
 8009fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4a70      	ldr	r2, [pc, #448]	@ (800a174 <HAL_I2C_IsDeviceReady+0x258>)
 8009fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fc4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f001 fea2 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fec:	d103      	bne.n	8009ff6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ff4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	e0b6      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ffa:	897b      	ldrh	r3, [r7, #10]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a008:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a00a:	f7fe ff3f 	bl	8008e8c <HAL_GetTick>
 800a00e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	bf0c      	ite	eq
 800a01e:	2301      	moveq	r3, #1
 800a020:	2300      	movne	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a034:	bf0c      	ite	eq
 800a036:	2301      	moveq	r3, #1
 800a038:	2300      	movne	r3, #0
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a03e:	e025      	b.n	800a08c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a040:	f7fe ff24 	bl	8008e8c <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d302      	bcc.n	800a056 <HAL_I2C_IsDeviceReady+0x13a>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d103      	bne.n	800a05e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	22a0      	movs	r2, #160	@ 0xa0
 800a05a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b02      	cmp	r3, #2
 800a06a:	bf0c      	ite	eq
 800a06c:	2301      	moveq	r3, #1
 800a06e:	2300      	movne	r3, #0
 800a070:	b2db      	uxtb	r3, r3
 800a072:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a07e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a082:	bf0c      	ite	eq
 800a084:	2301      	moveq	r3, #1
 800a086:	2300      	movne	r3, #0
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2ba0      	cmp	r3, #160	@ 0xa0
 800a096:	d005      	beq.n	800a0a4 <HAL_I2C_IsDeviceReady+0x188>
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <HAL_I2C_IsDeviceReady+0x188>
 800a09e:	7dbb      	ldrb	r3, [r7, #22]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d0cd      	beq.n	800a040 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d129      	bne.n	800a10e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	613b      	str	r3, [r7, #16]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	613b      	str	r3, [r7, #16]
 800a0de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	2319      	movs	r3, #25
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4921      	ldr	r1, [pc, #132]	@ (800a170 <HAL_I2C_IsDeviceReady+0x254>)
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f001 fe16 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e036      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	e02c      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a11c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a126:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	2319      	movs	r3, #25
 800a12e:	2201      	movs	r2, #1
 800a130:	490f      	ldr	r1, [pc, #60]	@ (800a170 <HAL_I2C_IsDeviceReady+0x254>)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f001 fdf2 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e012      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	3301      	adds	r3, #1
 800a146:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	f4ff af32 	bcc.w	8009fb6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2220      	movs	r2, #32
 800a156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a166:	2302      	movs	r3, #2
  }
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3720      	adds	r7, #32
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	00100002 	.word	0x00100002
 800a174:	ffff0000 	.word	0xffff0000

0800a178 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a180:	2300      	movs	r3, #0
 800a182:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a190:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a198:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	2b10      	cmp	r3, #16
 800a1a6:	d003      	beq.n	800a1b0 <HAL_I2C_EV_IRQHandler+0x38>
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
 800a1aa:	2b40      	cmp	r3, #64	@ 0x40
 800a1ac:	f040 80b1 	bne.w	800a312 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10d      	bne.n	800a1e6 <HAL_I2C_EV_IRQHandler+0x6e>
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a1d0:	d003      	beq.n	800a1da <HAL_I2C_EV_IRQHandler+0x62>
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a1d8:	d101      	bne.n	800a1de <HAL_I2C_EV_IRQHandler+0x66>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <HAL_I2C_EV_IRQHandler+0x68>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	f000 8114 	beq.w	800a40e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <HAL_I2C_EV_IRQHandler+0x90>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d006      	beq.n	800a208 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f001 fff6 	bl	800c1ec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fd76 	bl	800acf2 <I2C_Master_SB>
 800a206:	e083      	b.n	800a310 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d008      	beq.n	800a224 <HAL_I2C_EV_IRQHandler+0xac>
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fdee 	bl	800adfe <I2C_Master_ADD10>
 800a222:	e075      	b.n	800a310 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d008      	beq.n	800a240 <HAL_I2C_EV_IRQHandler+0xc8>
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fe0a 	bl	800ae52 <I2C_Master_ADDR>
 800a23e:	e067      	b.n	800a310 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d036      	beq.n	800a2b8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a258:	f000 80db 	beq.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00d      	beq.n	800a282 <HAL_I2C_EV_IRQHandler+0x10a>
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <HAL_I2C_EV_IRQHandler+0x10a>
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f003 0304 	and.w	r3, r3, #4
 800a276:	2b00      	cmp	r3, #0
 800a278:	d103      	bne.n	800a282 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9d6 	bl	800a62c <I2C_MasterTransmit_TXE>
 800a280:	e046      	b.n	800a310 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 80c2 	beq.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80bc 	beq.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	2b21      	cmp	r3, #33	@ 0x21
 800a29e:	d103      	bne.n	800a2a8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fa5f 	bl	800a764 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2a6:	e0b4      	b.n	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	2b40      	cmp	r3, #64	@ 0x40
 800a2ac:	f040 80b1 	bne.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 facd 	bl	800a850 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2b6:	e0ac      	b.n	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2c6:	f000 80a4 	beq.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00d      	beq.n	800a2f0 <HAL_I2C_EV_IRQHandler+0x178>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d008      	beq.n	800a2f0 <HAL_I2C_EV_IRQHandler+0x178>
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d103      	bne.n	800a2f0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fb49 	bl	800a980 <I2C_MasterReceive_RXNE>
 800a2ee:	e00f      	b.n	800a310 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 808b 	beq.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 8085 	beq.w	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fc01 	bl	800ab10 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a30e:	e080      	b.n	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
 800a310:	e07f      	b.n	800a412 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d004      	beq.n	800a324 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	e007      	b.n	800a334 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d011      	beq.n	800a362 <HAL_I2C_EV_IRQHandler+0x1ea>
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00c      	beq.n	800a362 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a358:	69b9      	ldr	r1, [r7, #24]
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 ffc8 	bl	800b2f0 <I2C_Slave_ADDR>
 800a360:	e05a      	b.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	f003 0310 	and.w	r3, r3, #16
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d008      	beq.n	800a37e <HAL_I2C_EV_IRQHandler+0x206>
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f001 f802 	bl	800b380 <I2C_Slave_STOPF>
 800a37c:	e04c      	b.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	2b21      	cmp	r3, #33	@ 0x21
 800a382:	d002      	beq.n	800a38a <HAL_I2C_EV_IRQHandler+0x212>
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	2b29      	cmp	r3, #41	@ 0x29
 800a388:	d120      	bne.n	800a3cc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00d      	beq.n	800a3b0 <HAL_I2C_EV_IRQHandler+0x238>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d008      	beq.n	800a3b0 <HAL_I2C_EV_IRQHandler+0x238>
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d103      	bne.n	800a3b0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fee3 	bl	800b174 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3ae:	e032      	b.n	800a416 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d02d      	beq.n	800a416 <HAL_I2C_EV_IRQHandler+0x29e>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d028      	beq.n	800a416 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 ff12 	bl	800b1ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3ca:	e024      	b.n	800a416 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00d      	beq.n	800a3f2 <HAL_I2C_EV_IRQHandler+0x27a>
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d008      	beq.n	800a3f2 <HAL_I2C_EV_IRQHandler+0x27a>
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	f003 0304 	and.w	r3, r3, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d103      	bne.n	800a3f2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 ff20 	bl	800b230 <I2C_SlaveReceive_RXNE>
 800a3f0:	e012      	b.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00d      	beq.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 ff50 	bl	800b2ac <I2C_SlaveReceive_BTF>
 800a40c:	e004      	b.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a40e:	bf00      	nop
 800a410:	e002      	b.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a412:	bf00      	nop
 800a414:	e000      	b.n	800a418 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a416:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a418:	3720      	adds	r7, #32
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b08a      	sub	sp, #40	@ 0x28
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a436:	2300      	movs	r3, #0
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a440:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00d      	beq.n	800a468 <HAL_I2C_ER_IRQHandler+0x4a>
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a452:	2b00      	cmp	r3, #0
 800a454:	d008      	beq.n	800a468 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	f043 0301 	orr.w	r3, r3, #1
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a466:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <HAL_I2C_ER_IRQHandler+0x70>
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d008      	beq.n	800a48e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47e:	f043 0302 	orr.w	r3, r3, #2
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800a48c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a494:	2b00      	cmp	r3, #0
 800a496:	d03e      	beq.n	800a516 <HAL_I2C_ER_IRQHandler+0xf8>
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d039      	beq.n	800a516 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800a4a2:	7efb      	ldrb	r3, [r7, #27]
 800a4a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a4bc:	7ebb      	ldrb	r3, [r7, #26]
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	d112      	bne.n	800a4e8 <HAL_I2C_ER_IRQHandler+0xca>
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10f      	bne.n	800a4e8 <HAL_I2C_ER_IRQHandler+0xca>
 800a4c8:	7cfb      	ldrb	r3, [r7, #19]
 800a4ca:	2b21      	cmp	r3, #33	@ 0x21
 800a4cc:	d008      	beq.n	800a4e0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a4ce:	7cfb      	ldrb	r3, [r7, #19]
 800a4d0:	2b29      	cmp	r3, #41	@ 0x29
 800a4d2:	d005      	beq.n	800a4e0 <HAL_I2C_ER_IRQHandler+0xc2>
 800a4d4:	7cfb      	ldrb	r3, [r7, #19]
 800a4d6:	2b28      	cmp	r3, #40	@ 0x28
 800a4d8:	d106      	bne.n	800a4e8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b21      	cmp	r3, #33	@ 0x21
 800a4de:	d103      	bne.n	800a4e8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 f87d 	bl	800b5e0 <I2C_Slave_AF>
 800a4e6:	e016      	b.n	800a516 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a4f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	f043 0304 	orr.w	r3, r3, #4
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a4fa:	7efb      	ldrb	r3, [r7, #27]
 800a4fc:	2b10      	cmp	r3, #16
 800a4fe:	d002      	beq.n	800a506 <HAL_I2C_ER_IRQHandler+0xe8>
 800a500:	7efb      	ldrb	r3, [r7, #27]
 800a502:	2b40      	cmp	r3, #64	@ 0x40
 800a504:	d107      	bne.n	800a516 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a514:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00d      	beq.n	800a53c <HAL_I2C_ER_IRQHandler+0x11e>
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a526:	2b00      	cmp	r3, #0
 800a528:	d008      	beq.n	800a53c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	f043 0308 	orr.w	r3, r3, #8
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800a53a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	431a      	orrs	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 f8ba 	bl	800b6c8 <I2C_ITError>
  }
}
 800a554:	bf00      	nop
 800a556:	3728      	adds	r7, #40	@ 0x28
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	70fb      	strb	r3, [r7, #3]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a63a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a642:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a648:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d150      	bne.n	800a6f4 <I2C_MasterTransmit_TXE+0xc8>
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	2b21      	cmp	r3, #33	@ 0x21
 800a656:	d14d      	bne.n	800a6f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b08      	cmp	r3, #8
 800a65c:	d01d      	beq.n	800a69a <I2C_MasterTransmit_TXE+0x6e>
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b20      	cmp	r3, #32
 800a662:	d01a      	beq.n	800a69a <I2C_MasterTransmit_TXE+0x6e>
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a66a:	d016      	beq.n	800a69a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a67a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2211      	movs	r2, #17
 800a680:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff ff62 	bl	800a55c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a698:	e060      	b.n	800a75c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a6a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b40      	cmp	r3, #64	@ 0x40
 800a6d2:	d107      	bne.n	800a6e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff ff7d 	bl	800a5dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6e2:	e03b      	b.n	800a75c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff ff35 	bl	800a55c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6f2:	e033      	b.n	800a75c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	2b21      	cmp	r3, #33	@ 0x21
 800a6f8:	d005      	beq.n	800a706 <I2C_MasterTransmit_TXE+0xda>
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	2b40      	cmp	r3, #64	@ 0x40
 800a6fe:	d12d      	bne.n	800a75c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b22      	cmp	r3, #34	@ 0x22
 800a704:	d12a      	bne.n	800a75c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d108      	bne.n	800a722 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a71e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a720:	e01c      	b.n	800a75c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b40      	cmp	r3, #64	@ 0x40
 800a72c:	d103      	bne.n	800a736 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f88e 	bl	800a850 <I2C_MemoryTransmit_TXE_BTF>
}
 800a734:	e012      	b.n	800a75c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a750:	b29b      	uxth	r3, r3
 800a752:	3b01      	subs	r3, #1
 800a754:	b29a      	uxth	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a75a:	e7ff      	b.n	800a75c <I2C_MasterTransmit_TXE+0x130>
 800a75c:	bf00      	nop
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a770:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b21      	cmp	r3, #33	@ 0x21
 800a77c:	d164      	bne.n	800a848 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a782:	b29b      	uxth	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	d012      	beq.n	800a7ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78c:	781a      	ldrb	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a7ac:	e04c      	b.n	800a848 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d01d      	beq.n	800a7f0 <I2C_MasterTransmit_BTF+0x8c>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	d01a      	beq.n	800a7f0 <I2C_MasterTransmit_BTF+0x8c>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a7c0:	d016      	beq.n	800a7f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2211      	movs	r2, #17
 800a7d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff feb7 	bl	800a55c <HAL_I2C_MasterTxCpltCallback>
}
 800a7ee:	e02b      	b.n	800a848 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a80e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b40      	cmp	r3, #64	@ 0x40
 800a828:	d107      	bne.n	800a83a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fed2 	bl	800a5dc <HAL_I2C_MemTxCpltCallback>
}
 800a838:	e006      	b.n	800a848 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fe8a 	bl	800a55c <HAL_I2C_MasterTxCpltCallback>
}
 800a848:	bf00      	nop
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a85e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11d      	bne.n	800a8a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d10b      	bne.n	800a888 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a874:	b2da      	uxtb	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a880:	1c9a      	adds	r2, r3, #2
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a886:	e077      	b.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	121b      	asrs	r3, r3, #8
 800a890:	b2da      	uxtb	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a8a2:	e069      	b.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d10b      	bne.n	800a8c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a8c2:	e059      	b.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d152      	bne.n	800a972 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	2b22      	cmp	r3, #34	@ 0x22
 800a8d0:	d10d      	bne.n	800a8ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a8ec:	e044      	b.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d015      	beq.n	800a924 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	2b21      	cmp	r3, #33	@ 0x21
 800a8fc:	d112      	bne.n	800a924 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a902:	781a      	ldrb	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a922:	e029      	b.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d124      	bne.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
 800a930:	2b21      	cmp	r3, #33	@ 0x21
 800a932:	d121      	bne.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a942:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a952:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2220      	movs	r2, #32
 800a95e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fe36 	bl	800a5dc <HAL_I2C_MemTxCpltCallback>
}
 800a970:	e002      	b.n	800a978 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7fe ff8c 	bl	8009890 <I2C_Flush_DR>
}
 800a978:	bf00      	nop
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b22      	cmp	r3, #34	@ 0x22
 800a992:	f040 80b9 	bne.w	800ab08 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d921      	bls.n	800a9ee <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	691a      	ldr	r2, [r3, #16]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b4:	b2d2      	uxtb	r2, r2
 800a9b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	f040 8096 	bne.w	800ab08 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9ea:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a9ec:	e08c      	b.n	800ab08 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d07f      	beq.n	800aaf6 <I2C_MasterReceive_RXNE+0x176>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d002      	beq.n	800aa02 <I2C_MasterReceive_RXNE+0x82>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d179      	bne.n	800aaf6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f001 fb34 	bl	800c070 <I2C_WaitOnSTOPRequestThroughIT>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d14c      	bne.n	800aaa8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	691a      	ldr	r2, [r3, #16]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa38:	b2d2      	uxtb	r2, r2
 800aa3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2220      	movs	r2, #32
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b40      	cmp	r3, #64	@ 0x40
 800aa66:	d10a      	bne.n	800aa7e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff fdba 	bl	800a5f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aa7c:	e044      	b.n	800ab08 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b08      	cmp	r3, #8
 800aa8a:	d002      	beq.n	800aa92 <I2C_MasterReceive_RXNE+0x112>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b20      	cmp	r3, #32
 800aa90:	d103      	bne.n	800aa9a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa98:	e002      	b.n	800aaa0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2212      	movs	r2, #18
 800aa9e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff fd65 	bl	800a570 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aaa6:	e02f      	b.n	800ab08 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aab6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaca:	1c5a      	adds	r2, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3b01      	subs	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7ff fd88 	bl	800a604 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aaf4:	e008      	b.n	800ab08 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab04:	605a      	str	r2, [r3, #4]
}
 800ab06:	e7ff      	b.n	800ab08 <I2C_MasterReceive_RXNE+0x188>
 800ab08:	bf00      	nop
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d11b      	bne.n	800ab60 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab36:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691a      	ldr	r2, [r3, #16]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab42:	b2d2      	uxtb	r2, r2
 800ab44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800ab5e:	e0c4      	b.n	800acea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d129      	bne.n	800abbe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab78:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d00a      	beq.n	800ab96 <I2C_MasterReceive_BTF+0x86>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d007      	beq.n	800ab96 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab94:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	691a      	ldr	r2, [r3, #16]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba0:	b2d2      	uxtb	r2, r2
 800aba2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	3b01      	subs	r3, #1
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800abbc:	e095      	b.n	800acea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d17d      	bne.n	800acc4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d002      	beq.n	800abd4 <I2C_MasterReceive_BTF+0xc4>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b10      	cmp	r3, #16
 800abd2:	d108      	bne.n	800abe6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	e016      	b.n	800ac14 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d002      	beq.n	800abf2 <I2C_MasterReceive_BTF+0xe2>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d108      	bne.n	800ac04 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	e007      	b.n	800ac14 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac12:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691a      	ldr	r2, [r3, #16]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1e:	b2d2      	uxtb	r2, r2
 800ac20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac26:	1c5a      	adds	r2, r3, #1
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	691a      	ldr	r2, [r3, #16]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ac6e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2220      	movs	r2, #32
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b40      	cmp	r3, #64	@ 0x40
 800ac82:	d10a      	bne.n	800ac9a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff fcac 	bl	800a5f0 <HAL_I2C_MemRxCpltCallback>
}
 800ac98:	e027      	b.n	800acea <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d002      	beq.n	800acae <I2C_MasterReceive_BTF+0x19e>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d103      	bne.n	800acb6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	631a      	str	r2, [r3, #48]	@ 0x30
 800acb4:	e002      	b.n	800acbc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2212      	movs	r2, #18
 800acba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff fc57 	bl	800a570 <HAL_I2C_MasterRxCpltCallback>
}
 800acc2:	e012      	b.n	800acea <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	691a      	ldr	r2, [r3, #16]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acce:	b2d2      	uxtb	r2, r2
 800acd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	3b01      	subs	r3, #1
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b40      	cmp	r3, #64	@ 0x40
 800ad04:	d117      	bne.n	800ad36 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d109      	bne.n	800ad22 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	461a      	mov	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad1e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ad20:	e067      	b.n	800adf2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f043 0301 	orr.w	r3, r3, #1
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	611a      	str	r2, [r3, #16]
}
 800ad34:	e05d      	b.n	800adf2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad3e:	d133      	bne.n	800ada8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b21      	cmp	r3, #33	@ 0x21
 800ad4a:	d109      	bne.n	800ad60 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad5c:	611a      	str	r2, [r3, #16]
 800ad5e:	e008      	b.n	800ad72 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	f043 0301 	orr.w	r3, r3, #1
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <I2C_Master_SB+0x92>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d108      	bne.n	800ad96 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d032      	beq.n	800adf2 <I2C_Master_SB+0x100>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d02d      	beq.n	800adf2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ada4:	605a      	str	r2, [r3, #4]
}
 800ada6:	e024      	b.n	800adf2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10e      	bne.n	800adce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	11db      	asrs	r3, r3, #7
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0306 	and.w	r3, r3, #6
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f063 030f 	orn	r3, r3, #15
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	611a      	str	r2, [r3, #16]
}
 800adcc:	e011      	b.n	800adf2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add2:	2b01      	cmp	r3, #1
 800add4:	d10d      	bne.n	800adf2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adda:	b29b      	uxth	r3, r3
 800addc:	11db      	asrs	r3, r3, #7
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	f003 0306 	and.w	r3, r3, #6
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	f063 030e 	orn	r3, r3, #14
 800adea:	b2da      	uxtb	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	611a      	str	r2, [r3, #16]
}
 800adf2:	bf00      	nop
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr

0800adfe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <I2C_Master_ADD10+0x26>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d108      	bne.n	800ae36 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00c      	beq.n	800ae46 <I2C_Master_ADD10+0x48>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae44:	605a      	str	r2, [r3, #4]
  }
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b091      	sub	sp, #68	@ 0x44
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae68:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae6e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b22      	cmp	r3, #34	@ 0x22
 800ae7a:	f040 8169 	bne.w	800b150 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10f      	bne.n	800aea6 <I2C_Master_ADDR+0x54>
 800ae86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae8a:	2b40      	cmp	r3, #64	@ 0x40
 800ae8c:	d10b      	bne.n	800aea6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae8e:	2300      	movs	r3, #0
 800ae90:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	633b      	str	r3, [r7, #48]	@ 0x30
 800aea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea4:	e160      	b.n	800b168 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d11d      	bne.n	800aeea <I2C_Master_ADDR+0x98>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800aeb6:	d118      	bne.n	800aeea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aedc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	651a      	str	r2, [r3, #80]	@ 0x50
 800aee8:	e13e      	b.n	800b168 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d113      	bne.n	800af1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aef4:	2300      	movs	r3, #0
 800aef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e115      	b.n	800b148 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b01      	cmp	r3, #1
 800af24:	f040 808a 	bne.w	800b03c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af2e:	d137      	bne.n	800afa0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af4e:	d113      	bne.n	800af78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af60:	2300      	movs	r3, #0
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	627b      	str	r3, [r7, #36]	@ 0x24
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	e0e7      	b.n	800b148 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af78:	2300      	movs	r3, #0
 800af7a:	623b      	str	r3, [r7, #32]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	623b      	str	r3, [r7, #32]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	623b      	str	r3, [r7, #32]
 800af8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e0d3      	b.n	800b148 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	2b08      	cmp	r3, #8
 800afa4:	d02e      	beq.n	800b004 <I2C_Master_ADDR+0x1b2>
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	2b20      	cmp	r3, #32
 800afaa:	d02b      	beq.n	800b004 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800afac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afae:	2b12      	cmp	r3, #18
 800afb0:	d102      	bne.n	800afb8 <I2C_Master_ADDR+0x166>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d125      	bne.n	800b004 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	2b04      	cmp	r3, #4
 800afbc:	d00e      	beq.n	800afdc <I2C_Master_ADDR+0x18a>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d00b      	beq.n	800afdc <I2C_Master_ADDR+0x18a>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	2b10      	cmp	r3, #16
 800afc8:	d008      	beq.n	800afdc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e007      	b.n	800afec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800afea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afec:	2300      	movs	r3, #0
 800afee:	61fb      	str	r3, [r7, #28]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	e0a1      	b.n	800b148 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b012:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	61bb      	str	r3, [r7, #24]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	61bb      	str	r3, [r7, #24]
 800b028:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e085      	b.n	800b148 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b040:	b29b      	uxth	r3, r3
 800b042:	2b02      	cmp	r3, #2
 800b044:	d14d      	bne.n	800b0e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d016      	beq.n	800b07a <I2C_Master_ADDR+0x228>
 800b04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d013      	beq.n	800b07a <I2C_Master_ADDR+0x228>
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	2b10      	cmp	r3, #16
 800b056:	d010      	beq.n	800b07a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b066:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b076:	601a      	str	r2, [r3, #0]
 800b078:	e007      	b.n	800b08a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b088:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b098:	d117      	bne.n	800b0ca <I2C_Master_ADDR+0x278>
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b0a0:	d00b      	beq.n	800b0ba <I2C_Master_ADDR+0x268>
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d008      	beq.n	800b0ba <I2C_Master_ADDR+0x268>
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d005      	beq.n	800b0ba <I2C_Master_ADDR+0x268>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d002      	beq.n	800b0ba <I2C_Master_ADDR+0x268>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b6:	2b20      	cmp	r3, #32
 800b0b8:	d107      	bne.n	800b0ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	617b      	str	r3, [r7, #20]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	e032      	b.n	800b148 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b0f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b100:	d117      	bne.n	800b132 <I2C_Master_ADDR+0x2e0>
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b108:	d00b      	beq.n	800b122 <I2C_Master_ADDR+0x2d0>
 800b10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d008      	beq.n	800b122 <I2C_Master_ADDR+0x2d0>
 800b110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b112:	2b08      	cmp	r3, #8
 800b114:	d005      	beq.n	800b122 <I2C_Master_ADDR+0x2d0>
 800b116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b118:	2b10      	cmp	r3, #16
 800b11a:	d002      	beq.n	800b122 <I2C_Master_ADDR+0x2d0>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d107      	bne.n	800b132 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b130:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b132:	2300      	movs	r3, #0
 800b134:	613b      	str	r3, [r7, #16]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	613b      	str	r3, [r7, #16]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	613b      	str	r3, [r7, #16]
 800b146:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b14e:	e00b      	b.n	800b168 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b150:	2300      	movs	r3, #0
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	699b      	ldr	r3, [r3, #24]
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	68fb      	ldr	r3, [r7, #12]
}
 800b166:	e7ff      	b.n	800b168 <I2C_Master_ADDR+0x316>
 800b168:	bf00      	nop
 800b16a:	3744      	adds	r7, #68	@ 0x44
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b182:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b188:	b29b      	uxth	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d02b      	beq.n	800b1e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d114      	bne.n	800b1e6 <I2C_SlaveTransmit_TXE+0x72>
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	2b29      	cmp	r3, #41	@ 0x29
 800b1c0:	d111      	bne.n	800b1e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2221      	movs	r2, #33	@ 0x21
 800b1d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2228      	movs	r2, #40	@ 0x28
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff f9cf 	bl	800a584 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b1e6:	bf00      	nop
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b083      	sub	sp, #12
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d011      	beq.n	800b224 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	3b01      	subs	r3, #1
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b23e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b244:	b29b      	uxth	r3, r3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d02c      	beq.n	800b2a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	691a      	ldr	r2, [r3, #16]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b254:	b2d2      	uxtb	r2, r2
 800b256:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b266:	b29b      	uxth	r3, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b274:	b29b      	uxth	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d114      	bne.n	800b2a4 <I2C_SlaveReceive_RXNE+0x74>
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27e:	d111      	bne.n	800b2a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b28e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2222      	movs	r2, #34	@ 0x22
 800b294:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2228      	movs	r2, #40	@ 0x28
 800b29a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff f97a 	bl	800a598 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d012      	beq.n	800b2e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	691a      	ldr	r2, [r3, #16]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b304:	b2db      	uxtb	r3, r3
 800b306:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b30a:	2b28      	cmp	r3, #40	@ 0x28
 800b30c:	d125      	bne.n	800b35a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685a      	ldr	r2, [r3, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b31c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	d101      	bne.n	800b32c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b328:	2301      	movs	r3, #1
 800b32a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b332:	2b00      	cmp	r3, #0
 800b334:	d103      	bne.n	800b33e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	81bb      	strh	r3, [r7, #12]
 800b33c:	e002      	b.n	800b344 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b34c:	89ba      	ldrh	r2, [r7, #12]
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff f92a 	bl	800a5ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b358:	e00e      	b.n	800b378 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b35a:	2300      	movs	r3, #0
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	695b      	ldr	r3, [r3, #20]
 800b364:	60bb      	str	r3, [r7, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	60bb      	str	r3, [r7, #8]
 800b36e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b378:	bf00      	nop
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b38e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b39e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60bb      	str	r3, [r7, #8]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	60bb      	str	r3, [r7, #8]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0201 	orr.w	r2, r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3dc:	d172      	bne.n	800b4c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
 800b3e0:	2b22      	cmp	r3, #34	@ 0x22
 800b3e2:	d002      	beq.n	800b3ea <I2C_Slave_STOPF+0x6a>
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3e8:	d135      	bne.n	800b456 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b406:	f043 0204 	orr.w	r2, r3, #4
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b41c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b422:	4618      	mov	r0, r3
 800b424:	f7fd ff05 	bl	8009232 <HAL_DMA_GetState>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d049      	beq.n	800b4c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b432:	4a69      	ldr	r2, [pc, #420]	@ (800b5d8 <I2C_Slave_STOPF+0x258>)
 800b434:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fd fed7 	bl	80091ee <HAL_DMA_Abort_IT>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d03d      	beq.n	800b4c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b450:	4610      	mov	r0, r2
 800b452:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b454:	e035      	b.n	800b4c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b468:	b29b      	uxth	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d005      	beq.n	800b47a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	f043 0204 	orr.w	r2, r3, #4
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b488:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fd fecf 	bl	8009232 <HAL_DMA_GetState>
 800b494:	4603      	mov	r3, r0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d014      	beq.n	800b4c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49e:	4a4e      	ldr	r2, [pc, #312]	@ (800b5d8 <I2C_Slave_STOPF+0x258>)
 800b4a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fd fea1 	bl	80091ee <HAL_DMA_Abort_IT>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d008      	beq.n	800b4c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b4bc:	4610      	mov	r0, r2
 800b4be:	4798      	blx	r3
 800b4c0:	e000      	b.n	800b4c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d03e      	beq.n	800b54c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d112      	bne.n	800b502 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b50c:	2b40      	cmp	r3, #64	@ 0x40
 800b50e:	d112      	bne.n	800b536 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b51a:	b2d2      	uxtb	r2, r2
 800b51c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b544:	f043 0204 	orr.w	r2, r3, #4
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f8b7 	bl	800b6c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b55a:	e039      	b.n	800b5d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b560:	d109      	bne.n	800b576 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2228      	movs	r2, #40	@ 0x28
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7ff f811 	bl	800a598 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b28      	cmp	r3, #40	@ 0x28
 800b580:	d111      	bne.n	800b5a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a15      	ldr	r2, [pc, #84]	@ (800b5dc <I2C_Slave_STOPF+0x25c>)
 800b586:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2220      	movs	r2, #32
 800b592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff f812 	bl	800a5c8 <HAL_I2C_ListenCpltCallback>
}
 800b5a4:	e014      	b.n	800b5d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5aa:	2b22      	cmp	r3, #34	@ 0x22
 800b5ac:	d002      	beq.n	800b5b4 <I2C_Slave_STOPF+0x234>
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	2b22      	cmp	r3, #34	@ 0x22
 800b5b2:	d10d      	bne.n	800b5d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7fe ffe4 	bl	800a598 <HAL_I2C_SlaveRxCpltCallback>
}
 800b5d0:	bf00      	nop
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	0800bbcd 	.word	0x0800bbcd
 800b5dc:	ffff0000 	.word	0xffff0000

0800b5e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d002      	beq.n	800b602 <I2C_Slave_AF+0x22>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	d129      	bne.n	800b656 <I2C_Slave_AF+0x76>
 800b602:	7bfb      	ldrb	r3, [r7, #15]
 800b604:	2b28      	cmp	r3, #40	@ 0x28
 800b606:	d126      	bne.n	800b656 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4a2e      	ldr	r2, [pc, #184]	@ (800b6c4 <I2C_Slave_AF+0xe4>)
 800b60c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b61c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b626:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b636:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2220      	movs	r2, #32
 800b642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fe ffba 	bl	800a5c8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b654:	e031      	b.n	800b6ba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	2b21      	cmp	r3, #33	@ 0x21
 800b65a:	d129      	bne.n	800b6b0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a19      	ldr	r2, [pc, #100]	@ (800b6c4 <I2C_Slave_AF+0xe4>)
 800b660:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2221      	movs	r2, #33	@ 0x21
 800b666:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b686:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b690:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6a0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7fe f8f4 	bl	8009890 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fe ff6b 	bl	800a584 <HAL_I2C_SlaveTxCpltCallback>
}
 800b6ae:	e004      	b.n	800b6ba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b6b8:	615a      	str	r2, [r3, #20]
}
 800b6ba:	bf00      	nop
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	ffff0000 	.word	0xffff0000

0800b6c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	2b10      	cmp	r3, #16
 800b6e4:	d002      	beq.n	800b6ec <I2C_ITError+0x24>
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ea:	d10a      	bne.n	800b702 <I2C_ITError+0x3a>
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	2b22      	cmp	r3, #34	@ 0x22
 800b6f0:	d107      	bne.n	800b702 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b700:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b708:	2b28      	cmp	r3, #40	@ 0x28
 800b70a:	d107      	bne.n	800b71c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2228      	movs	r2, #40	@ 0x28
 800b716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b71a:	e015      	b.n	800b748 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b72a:	d00a      	beq.n	800b742 <I2C_ITError+0x7a>
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	2b60      	cmp	r3, #96	@ 0x60
 800b730:	d007      	beq.n	800b742 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b756:	d162      	bne.n	800b81e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b766:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b76c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b01      	cmp	r3, #1
 800b774:	d020      	beq.n	800b7b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b77a:	4a6a      	ldr	r2, [pc, #424]	@ (800b924 <I2C_ITError+0x25c>)
 800b77c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b782:	4618      	mov	r0, r3
 800b784:	f7fd fd33 	bl	80091ee <HAL_DMA_Abort_IT>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 8089 	beq.w	800b8a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0201 	bic.w	r2, r2, #1
 800b79e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	4798      	blx	r3
 800b7b6:	e074      	b.n	800b8a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7bc:	4a59      	ldr	r2, [pc, #356]	@ (800b924 <I2C_ITError+0x25c>)
 800b7be:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fd fd12 	bl	80091ee <HAL_DMA_Abort_IT>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d068      	beq.n	800b8a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7da:	2b40      	cmp	r3, #64	@ 0x40
 800b7dc:	d10b      	bne.n	800b7f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f022 0201 	bic.w	r2, r2, #1
 800b804:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2220      	movs	r2, #32
 800b80a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b818:	4610      	mov	r0, r2
 800b81a:	4798      	blx	r3
 800b81c:	e041      	b.n	800b8a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b60      	cmp	r3, #96	@ 0x60
 800b828:	d125      	bne.n	800b876 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2220      	movs	r2, #32
 800b82e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b842:	2b40      	cmp	r3, #64	@ 0x40
 800b844:	d10b      	bne.n	800b85e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b850:	b2d2      	uxtb	r2, r2
 800b852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0201 	bic.w	r2, r2, #1
 800b86c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7fe fed2 	bl	800a618 <HAL_I2C_AbortCpltCallback>
 800b874:	e015      	b.n	800b8a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b880:	2b40      	cmp	r3, #64	@ 0x40
 800b882:	d10b      	bne.n	800b89c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	691a      	ldr	r2, [r3, #16]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b896:	1c5a      	adds	r2, r3, #1
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7fe feb1 	bl	800a604 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10e      	bne.n	800b8d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d109      	bne.n	800b8d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d104      	bne.n	800b8d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b8de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b04      	cmp	r3, #4
 800b8f2:	d113      	bne.n	800b91c <I2C_ITError+0x254>
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
 800b8f6:	2b28      	cmp	r3, #40	@ 0x28
 800b8f8:	d110      	bne.n	800b91c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a0a      	ldr	r2, [pc, #40]	@ (800b928 <I2C_ITError+0x260>)
 800b8fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7fe fe56 	bl	800a5c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b91c:	bf00      	nop
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	0800bbcd 	.word	0x0800bbcd
 800b928:	ffff0000 	.word	0xffff0000

0800b92c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af02      	add	r7, sp, #8
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	607a      	str	r2, [r7, #4]
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	460b      	mov	r3, r1
 800b93a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b08      	cmp	r3, #8
 800b946:	d006      	beq.n	800b956 <I2C_MasterRequestWrite+0x2a>
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d003      	beq.n	800b956 <I2C_MasterRequestWrite+0x2a>
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b954:	d108      	bne.n	800b968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	e00b      	b.n	800b980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b96c:	2b12      	cmp	r3, #18
 800b96e:	d107      	bne.n	800b980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b97e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 f9c5 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00d      	beq.n	800b9b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9a6:	d103      	bne.n	800b9b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e035      	b.n	800ba20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9bc:	d108      	bne.n	800b9d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b9be:	897b      	ldrh	r3, [r7, #10]
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b9cc:	611a      	str	r2, [r3, #16]
 800b9ce:	e01b      	b.n	800ba08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b9d0:	897b      	ldrh	r3, [r7, #10]
 800b9d2:	11db      	asrs	r3, r3, #7
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	f003 0306 	and.w	r3, r3, #6
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	f063 030f 	orn	r3, r3, #15
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	490e      	ldr	r1, [pc, #56]	@ (800ba28 <I2C_MasterRequestWrite+0xfc>)
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fa0e 	bl	800be10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e010      	b.n	800ba20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b9fe:	897b      	ldrh	r3, [r7, #10]
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4907      	ldr	r1, [pc, #28]	@ (800ba2c <I2C_MasterRequestWrite+0x100>)
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 f9fe 	bl	800be10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e000      	b.n	800ba20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	00010008 	.word	0x00010008
 800ba2c:	00010002 	.word	0x00010002

0800ba30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af02      	add	r7, sp, #8
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	607a      	str	r2, [r7, #4]
 800ba3a:	603b      	str	r3, [r7, #0]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d006      	beq.n	800ba6a <I2C_MasterRequestRead+0x3a>
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d003      	beq.n	800ba6a <I2C_MasterRequestRead+0x3a>
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ba68:	d108      	bne.n	800ba7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	e00b      	b.n	800ba94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba80:	2b11      	cmp	r3, #17
 800ba82:	d107      	bne.n	800ba94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f93b 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00d      	beq.n	800bac8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baba:	d103      	bne.n	800bac4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e079      	b.n	800bbbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bad0:	d108      	bne.n	800bae4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bad2:	897b      	ldrh	r3, [r7, #10]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f043 0301 	orr.w	r3, r3, #1
 800bada:	b2da      	uxtb	r2, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	611a      	str	r2, [r3, #16]
 800bae2:	e05f      	b.n	800bba4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bae4:	897b      	ldrh	r3, [r7, #10]
 800bae6:	11db      	asrs	r3, r3, #7
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f003 0306 	and.w	r3, r3, #6
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f063 030f 	orn	r3, r3, #15
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4930      	ldr	r1, [pc, #192]	@ (800bbc4 <I2C_MasterRequestRead+0x194>)
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 f984 	bl	800be10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e054      	b.n	800bbbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bb12:	897b      	ldrh	r3, [r7, #10]
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	4929      	ldr	r1, [pc, #164]	@ (800bbc8 <I2C_MasterRequestRead+0x198>)
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 f974 	bl	800be10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e044      	b.n	800bbbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb32:	2300      	movs	r3, #0
 800bb34:	613b      	str	r3, [r7, #16]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	613b      	str	r3, [r7, #16]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	613b      	str	r3, [r7, #16]
 800bb46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f8d9 	bl	800bd1c <I2C_WaitOnFlagUntilTimeout>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00d      	beq.n	800bb8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb7e:	d103      	bne.n	800bb88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e017      	b.n	800bbbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bb8c:	897b      	ldrh	r3, [r7, #10]
 800bb8e:	11db      	asrs	r3, r3, #7
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	f003 0306 	and.w	r3, r3, #6
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	f063 030e 	orn	r3, r3, #14
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	4907      	ldr	r1, [pc, #28]	@ (800bbc8 <I2C_MasterRequestRead+0x198>)
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 f930 	bl	800be10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	00010008 	.word	0x00010008
 800bbc8:	00010002 	.word	0x00010002

0800bbcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbe4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bbe6:	4b4b      	ldr	r3, [pc, #300]	@ (800bd14 <I2C_DMAAbort+0x148>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	08db      	lsrs	r3, r3, #3
 800bbec:	4a4a      	ldr	r2, [pc, #296]	@ (800bd18 <I2C_DMAAbort+0x14c>)
 800bbee:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf2:	0a1a      	lsrs	r2, r3, #8
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	4413      	add	r3, r2
 800bbfa:	00da      	lsls	r2, r3, #3
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc0a:	f043 0220 	orr.w	r2, r3, #32
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800bc12:	e00a      	b.n	800bc2a <I2C_DMAAbort+0x5e>
    }
    count--;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc28:	d0ea      	beq.n	800bc00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc36:	2200      	movs	r2, #0
 800bc38:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc46:	2200      	movs	r2, #0
 800bc48:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f022 0201 	bic.w	r2, r2, #1
 800bc8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b60      	cmp	r3, #96	@ 0x60
 800bc9a:	d10e      	bne.n	800bcba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2220      	movs	r2, #32
 800bca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bcb2:	6978      	ldr	r0, [r7, #20]
 800bcb4:	f7fe fcb0 	bl	800a618 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bcb8:	e027      	b.n	800bd0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bcba:	7cfb      	ldrb	r3, [r7, #19]
 800bcbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bcc0:	2b28      	cmp	r3, #40	@ 0x28
 800bcc2:	d117      	bne.n	800bcf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f042 0201 	orr.w	r2, r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bce2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2200      	movs	r2, #0
 800bce8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2228      	movs	r2, #40	@ 0x28
 800bcee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bcf2:	e007      	b.n	800bd04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800bd04:	6978      	ldr	r0, [r7, #20]
 800bd06:	f7fe fc7d 	bl	800a604 <HAL_I2C_ErrorCallback>
}
 800bd0a:	bf00      	nop
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20000554 	.word	0x20000554
 800bd18:	14f8b589 	.word	0x14f8b589

0800bd1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd2c:	e048      	b.n	800bdc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd34:	d044      	beq.n	800bdc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd36:	f7fd f8a9 	bl	8008e8c <HAL_GetTick>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d302      	bcc.n	800bd4c <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d139      	bne.n	800bdc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	0c1b      	lsrs	r3, r3, #16
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d10d      	bne.n	800bd72 <I2C_WaitOnFlagUntilTimeout+0x56>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	695b      	ldr	r3, [r3, #20]
 800bd5c:	43da      	mvns	r2, r3
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4013      	ands	r3, r2
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	bf0c      	ite	eq
 800bd68:	2301      	moveq	r3, #1
 800bd6a:	2300      	movne	r3, #0
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	461a      	mov	r2, r3
 800bd70:	e00c      	b.n	800bd8c <I2C_WaitOnFlagUntilTimeout+0x70>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	43da      	mvns	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	bf0c      	ite	eq
 800bd84:	2301      	moveq	r3, #1
 800bd86:	2300      	movne	r3, #0
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d116      	bne.n	800bdc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdac:	f043 0220 	orr.w	r2, r3, #32
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e023      	b.n	800be08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	0c1b      	lsrs	r3, r3, #16
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d10d      	bne.n	800bde6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	43da      	mvns	r2, r3
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	bf0c      	ite	eq
 800bddc:	2301      	moveq	r3, #1
 800bdde:	2300      	movne	r3, #0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	461a      	mov	r2, r3
 800bde4:	e00c      	b.n	800be00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	43da      	mvns	r2, r3
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	bf0c      	ite	eq
 800bdf8:	2301      	moveq	r3, #1
 800bdfa:	2300      	movne	r3, #0
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	429a      	cmp	r2, r3
 800be04:	d093      	beq.n	800bd2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be1e:	e071      	b.n	800bf04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be2e:	d123      	bne.n	800be78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800be48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2220      	movs	r2, #32
 800be54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be64:	f043 0204 	orr.w	r2, r3, #4
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e067      	b.n	800bf48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be7e:	d041      	beq.n	800bf04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be80:	f7fd f804 	bl	8008e8c <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d302      	bcc.n	800be96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d136      	bne.n	800bf04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	0c1b      	lsrs	r3, r3, #16
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d10c      	bne.n	800beba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	43da      	mvns	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	4013      	ands	r3, r2
 800beac:	b29b      	uxth	r3, r3
 800beae:	2b00      	cmp	r3, #0
 800beb0:	bf14      	ite	ne
 800beb2:	2301      	movne	r3, #1
 800beb4:	2300      	moveq	r3, #0
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	e00b      	b.n	800bed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	43da      	mvns	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	4013      	ands	r3, r2
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	bf14      	ite	ne
 800becc:	2301      	movne	r3, #1
 800bece:	2300      	moveq	r3, #0
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d016      	beq.n	800bf04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2220      	movs	r2, #32
 800bee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef0:	f043 0220 	orr.w	r2, r3, #32
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e021      	b.n	800bf48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	0c1b      	lsrs	r3, r3, #16
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d10c      	bne.n	800bf28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	43da      	mvns	r2, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	4013      	ands	r3, r2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	bf14      	ite	ne
 800bf20:	2301      	movne	r3, #1
 800bf22:	2300      	moveq	r3, #0
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	e00b      	b.n	800bf40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	43da      	mvns	r2, r3
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	4013      	ands	r3, r2
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	bf14      	ite	ne
 800bf3a:	2301      	movne	r3, #1
 800bf3c:	2300      	moveq	r3, #0
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f47f af6d 	bne.w	800be20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf5c:	e034      	b.n	800bfc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f000 f915 	bl	800c18e <I2C_IsAcknowledgeFailed>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e034      	b.n	800bfd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf74:	d028      	beq.n	800bfc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf76:	f7fc ff89 	bl	8008e8c <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d302      	bcc.n	800bf8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d11d      	bne.n	800bfc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf96:	2b80      	cmp	r3, #128	@ 0x80
 800bf98:	d016      	beq.n	800bfc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb4:	f043 0220 	orr.w	r2, r3, #32
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e007      	b.n	800bfd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfd2:	2b80      	cmp	r3, #128	@ 0x80
 800bfd4:	d1c3      	bne.n	800bf5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bfec:	e034      	b.n	800c058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f000 f8cd 	bl	800c18e <I2C_IsAcknowledgeFailed>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e034      	b.n	800c068 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c004:	d028      	beq.n	800c058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c006:	f7fc ff41 	bl	8008e8c <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	429a      	cmp	r2, r3
 800c014:	d302      	bcc.n	800c01c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d11d      	bne.n	800c058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	f003 0304 	and.w	r3, r3, #4
 800c026:	2b04      	cmp	r3, #4
 800c028:	d016      	beq.n	800c058 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2220      	movs	r2, #32
 800c034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c044:	f043 0220 	orr.w	r2, r3, #32
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e007      	b.n	800c068 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	f003 0304 	and.w	r3, r3, #4
 800c062:	2b04      	cmp	r3, #4
 800c064:	d1c3      	bne.n	800bfee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c078:	2300      	movs	r3, #0
 800c07a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c07c:	4b13      	ldr	r3, [pc, #76]	@ (800c0cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	08db      	lsrs	r3, r3, #3
 800c082:	4a13      	ldr	r2, [pc, #76]	@ (800c0d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c084:	fba2 2303 	umull	r2, r3, r2, r3
 800c088:	0a1a      	lsrs	r2, r3, #8
 800c08a:	4613      	mov	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4413      	add	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	3b01      	subs	r3, #1
 800c096:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d107      	bne.n	800c0ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a2:	f043 0220 	orr.w	r2, r3, #32
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e008      	b.n	800c0c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0bc:	d0e9      	beq.n	800c092 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	20000554 	.word	0x20000554
 800c0d0:	14f8b589 	.word	0x14f8b589

0800c0d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0e0:	e049      	b.n	800c176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	695b      	ldr	r3, [r3, #20]
 800c0e8:	f003 0310 	and.w	r3, r3, #16
 800c0ec:	2b10      	cmp	r3, #16
 800c0ee:	d119      	bne.n	800c124 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f06f 0210 	mvn.w	r2, #16
 800c0f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e030      	b.n	800c186 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c124:	f7fc feb2 	bl	8008e8c <HAL_GetTick>
 800c128:	4602      	mov	r2, r0
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	429a      	cmp	r2, r3
 800c132:	d302      	bcc.n	800c13a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d11d      	bne.n	800c176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	695b      	ldr	r3, [r3, #20]
 800c140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c144:	2b40      	cmp	r3, #64	@ 0x40
 800c146:	d016      	beq.n	800c176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2220      	movs	r2, #32
 800c152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c162:	f043 0220 	orr.w	r2, r3, #32
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e007      	b.n	800c186 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c180:	2b40      	cmp	r3, #64	@ 0x40
 800c182:	d1ae      	bne.n	800c0e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1a4:	d11b      	bne.n	800c1de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ca:	f043 0204 	orr.w	r2, r3, #4
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c1fc:	d103      	bne.n	800c206 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c204:	e007      	b.n	800c216 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c20a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c20e:	d102      	bne.n	800c216 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2208      	movs	r2, #8
 800c214:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
	...

0800c224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e267      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d075      	beq.n	800c32e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c242:	4b88      	ldr	r3, [pc, #544]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f003 030c 	and.w	r3, r3, #12
 800c24a:	2b04      	cmp	r3, #4
 800c24c:	d00c      	beq.n	800c268 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c24e:	4b85      	ldr	r3, [pc, #532]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c256:	2b08      	cmp	r3, #8
 800c258:	d112      	bne.n	800c280 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c25a:	4b82      	ldr	r3, [pc, #520]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c266:	d10b      	bne.n	800c280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c268:	4b7e      	ldr	r3, [pc, #504]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d05b      	beq.n	800c32c <HAL_RCC_OscConfig+0x108>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d157      	bne.n	800c32c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e242      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c288:	d106      	bne.n	800c298 <HAL_RCC_OscConfig+0x74>
 800c28a:	4b76      	ldr	r3, [pc, #472]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a75      	ldr	r2, [pc, #468]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	e01d      	b.n	800c2d4 <HAL_RCC_OscConfig+0xb0>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c2a0:	d10c      	bne.n	800c2bc <HAL_RCC_OscConfig+0x98>
 800c2a2:	4b70      	ldr	r3, [pc, #448]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a6f      	ldr	r2, [pc, #444]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c2ac:	6013      	str	r3, [r2, #0]
 800c2ae:	4b6d      	ldr	r3, [pc, #436]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a6c      	ldr	r2, [pc, #432]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	e00b      	b.n	800c2d4 <HAL_RCC_OscConfig+0xb0>
 800c2bc:	4b69      	ldr	r3, [pc, #420]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a68      	ldr	r2, [pc, #416]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2c6:	6013      	str	r3, [r2, #0]
 800c2c8:	4b66      	ldr	r3, [pc, #408]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a65      	ldr	r2, [pc, #404]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c2d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d013      	beq.n	800c304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2dc:	f7fc fdd6 	bl	8008e8c <HAL_GetTick>
 800c2e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2e2:	e008      	b.n	800c2f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2e4:	f7fc fdd2 	bl	8008e8c <HAL_GetTick>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	2b64      	cmp	r3, #100	@ 0x64
 800c2f0:	d901      	bls.n	800c2f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	e207      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2f6:	4b5b      	ldr	r3, [pc, #364]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0f0      	beq.n	800c2e4 <HAL_RCC_OscConfig+0xc0>
 800c302:	e014      	b.n	800c32e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c304:	f7fc fdc2 	bl	8008e8c <HAL_GetTick>
 800c308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c30a:	e008      	b.n	800c31e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c30c:	f7fc fdbe 	bl	8008e8c <HAL_GetTick>
 800c310:	4602      	mov	r2, r0
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	2b64      	cmp	r3, #100	@ 0x64
 800c318:	d901      	bls.n	800c31e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	e1f3      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c31e:	4b51      	ldr	r3, [pc, #324]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1f0      	bne.n	800c30c <HAL_RCC_OscConfig+0xe8>
 800c32a:	e000      	b.n	800c32e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c32c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0302 	and.w	r3, r3, #2
 800c336:	2b00      	cmp	r3, #0
 800c338:	d063      	beq.n	800c402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c33a:	4b4a      	ldr	r3, [pc, #296]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f003 030c 	and.w	r3, r3, #12
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c346:	4b47      	ldr	r3, [pc, #284]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c34e:	2b08      	cmp	r3, #8
 800c350:	d11c      	bne.n	800c38c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c352:	4b44      	ldr	r3, [pc, #272]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d116      	bne.n	800c38c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c35e:	4b41      	ldr	r3, [pc, #260]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <HAL_RCC_OscConfig+0x152>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d001      	beq.n	800c376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e1c7      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c376:	4b3b      	ldr	r3, [pc, #236]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	4937      	ldr	r1, [pc, #220]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c386:	4313      	orrs	r3, r2
 800c388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c38a:	e03a      	b.n	800c402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d020      	beq.n	800c3d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c394:	4b34      	ldr	r3, [pc, #208]	@ (800c468 <HAL_RCC_OscConfig+0x244>)
 800c396:	2201      	movs	r2, #1
 800c398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c39a:	f7fc fd77 	bl	8008e8c <HAL_GetTick>
 800c39e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3a0:	e008      	b.n	800c3b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3a2:	f7fc fd73 	bl	8008e8c <HAL_GetTick>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	1ad3      	subs	r3, r2, r3
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d901      	bls.n	800c3b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e1a8      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3b4:	4b2b      	ldr	r3, [pc, #172]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0302 	and.w	r3, r3, #2
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d0f0      	beq.n	800c3a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3c0:	4b28      	ldr	r3, [pc, #160]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	4925      	ldr	r1, [pc, #148]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	600b      	str	r3, [r1, #0]
 800c3d4:	e015      	b.n	800c402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3d6:	4b24      	ldr	r3, [pc, #144]	@ (800c468 <HAL_RCC_OscConfig+0x244>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3dc:	f7fc fd56 	bl	8008e8c <HAL_GetTick>
 800c3e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3e2:	e008      	b.n	800c3f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3e4:	f7fc fd52 	bl	8008e8c <HAL_GetTick>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d901      	bls.n	800c3f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	e187      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1f0      	bne.n	800c3e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0308 	and.w	r3, r3, #8
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d036      	beq.n	800c47c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d016      	beq.n	800c444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c416:	4b15      	ldr	r3, [pc, #84]	@ (800c46c <HAL_RCC_OscConfig+0x248>)
 800c418:	2201      	movs	r2, #1
 800c41a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c41c:	f7fc fd36 	bl	8008e8c <HAL_GetTick>
 800c420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c422:	e008      	b.n	800c436 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c424:	f7fc fd32 	bl	8008e8c <HAL_GetTick>
 800c428:	4602      	mov	r2, r0
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d901      	bls.n	800c436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e167      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c436:	4b0b      	ldr	r3, [pc, #44]	@ (800c464 <HAL_RCC_OscConfig+0x240>)
 800c438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0f0      	beq.n	800c424 <HAL_RCC_OscConfig+0x200>
 800c442:	e01b      	b.n	800c47c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c444:	4b09      	ldr	r3, [pc, #36]	@ (800c46c <HAL_RCC_OscConfig+0x248>)
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c44a:	f7fc fd1f 	bl	8008e8c <HAL_GetTick>
 800c44e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c450:	e00e      	b.n	800c470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c452:	f7fc fd1b 	bl	8008e8c <HAL_GetTick>
 800c456:	4602      	mov	r2, r0
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d907      	bls.n	800c470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e150      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
 800c464:	40023800 	.word	0x40023800
 800c468:	42470000 	.word	0x42470000
 800c46c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c470:	4b88      	ldr	r3, [pc, #544]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1ea      	bne.n	800c452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0304 	and.w	r3, r3, #4
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 8097 	beq.w	800c5b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c48e:	4b81      	ldr	r3, [pc, #516]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10f      	bne.n	800c4ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c49a:	2300      	movs	r3, #0
 800c49c:	60bb      	str	r3, [r7, #8]
 800c49e:	4b7d      	ldr	r3, [pc, #500]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4a2:	4a7c      	ldr	r2, [pc, #496]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c4a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4a8:	6413      	str	r3, [r2, #64]	@ 0x40
 800c4aa:	4b7a      	ldr	r3, [pc, #488]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4b2:	60bb      	str	r3, [r7, #8]
 800c4b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4ba:	4b77      	ldr	r3, [pc, #476]	@ (800c698 <HAL_RCC_OscConfig+0x474>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d118      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c4c6:	4b74      	ldr	r3, [pc, #464]	@ (800c698 <HAL_RCC_OscConfig+0x474>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a73      	ldr	r2, [pc, #460]	@ (800c698 <HAL_RCC_OscConfig+0x474>)
 800c4cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4d2:	f7fc fcdb 	bl	8008e8c <HAL_GetTick>
 800c4d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4d8:	e008      	b.n	800c4ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4da:	f7fc fcd7 	bl	8008e8c <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d901      	bls.n	800c4ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e10c      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4ec:	4b6a      	ldr	r3, [pc, #424]	@ (800c698 <HAL_RCC_OscConfig+0x474>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d0f0      	beq.n	800c4da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d106      	bne.n	800c50e <HAL_RCC_OscConfig+0x2ea>
 800c500:	4b64      	ldr	r3, [pc, #400]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c504:	4a63      	ldr	r2, [pc, #396]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c506:	f043 0301 	orr.w	r3, r3, #1
 800c50a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c50c:	e01c      	b.n	800c548 <HAL_RCC_OscConfig+0x324>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	2b05      	cmp	r3, #5
 800c514:	d10c      	bne.n	800c530 <HAL_RCC_OscConfig+0x30c>
 800c516:	4b5f      	ldr	r3, [pc, #380]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c51a:	4a5e      	ldr	r2, [pc, #376]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c51c:	f043 0304 	orr.w	r3, r3, #4
 800c520:	6713      	str	r3, [r2, #112]	@ 0x70
 800c522:	4b5c      	ldr	r3, [pc, #368]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c526:	4a5b      	ldr	r2, [pc, #364]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c528:	f043 0301 	orr.w	r3, r3, #1
 800c52c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c52e:	e00b      	b.n	800c548 <HAL_RCC_OscConfig+0x324>
 800c530:	4b58      	ldr	r3, [pc, #352]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c534:	4a57      	ldr	r2, [pc, #348]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c536:	f023 0301 	bic.w	r3, r3, #1
 800c53a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c53c:	4b55      	ldr	r3, [pc, #340]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c540:	4a54      	ldr	r2, [pc, #336]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c542:	f023 0304 	bic.w	r3, r3, #4
 800c546:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d015      	beq.n	800c57c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c550:	f7fc fc9c 	bl	8008e8c <HAL_GetTick>
 800c554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c556:	e00a      	b.n	800c56e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c558:	f7fc fc98 	bl	8008e8c <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c566:	4293      	cmp	r3, r2
 800c568:	d901      	bls.n	800c56e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e0cb      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c56e:	4b49      	ldr	r3, [pc, #292]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c572:	f003 0302 	and.w	r3, r3, #2
 800c576:	2b00      	cmp	r3, #0
 800c578:	d0ee      	beq.n	800c558 <HAL_RCC_OscConfig+0x334>
 800c57a:	e014      	b.n	800c5a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c57c:	f7fc fc86 	bl	8008e8c <HAL_GetTick>
 800c580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c582:	e00a      	b.n	800c59a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c584:	f7fc fc82 	bl	8008e8c <HAL_GetTick>
 800c588:	4602      	mov	r2, r0
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c592:	4293      	cmp	r3, r2
 800c594:	d901      	bls.n	800c59a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e0b5      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c59a:	4b3e      	ldr	r3, [pc, #248]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c59e:	f003 0302 	and.w	r3, r3, #2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1ee      	bne.n	800c584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d105      	bne.n	800c5b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5ac:	4b39      	ldr	r3, [pc, #228]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b0:	4a38      	ldr	r2, [pc, #224]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c5b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 80a1 	beq.w	800c704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c5c2:	4b34      	ldr	r3, [pc, #208]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f003 030c 	and.w	r3, r3, #12
 800c5ca:	2b08      	cmp	r3, #8
 800c5cc:	d05c      	beq.n	800c688 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d141      	bne.n	800c65a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5d6:	4b31      	ldr	r3, [pc, #196]	@ (800c69c <HAL_RCC_OscConfig+0x478>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5dc:	f7fc fc56 	bl	8008e8c <HAL_GetTick>
 800c5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5e2:	e008      	b.n	800c5f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5e4:	f7fc fc52 	bl	8008e8c <HAL_GetTick>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d901      	bls.n	800c5f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	e087      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5f6:	4b27      	ldr	r3, [pc, #156]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1f0      	bne.n	800c5e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	69da      	ldr	r2, [r3, #28]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	431a      	orrs	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c610:	019b      	lsls	r3, r3, #6
 800c612:	431a      	orrs	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c618:	085b      	lsrs	r3, r3, #1
 800c61a:	3b01      	subs	r3, #1
 800c61c:	041b      	lsls	r3, r3, #16
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c624:	061b      	lsls	r3, r3, #24
 800c626:	491b      	ldr	r1, [pc, #108]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c628:	4313      	orrs	r3, r2
 800c62a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c62c:	4b1b      	ldr	r3, [pc, #108]	@ (800c69c <HAL_RCC_OscConfig+0x478>)
 800c62e:	2201      	movs	r2, #1
 800c630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c632:	f7fc fc2b 	bl	8008e8c <HAL_GetTick>
 800c636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c638:	e008      	b.n	800c64c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c63a:	f7fc fc27 	bl	8008e8c <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	2b02      	cmp	r3, #2
 800c646:	d901      	bls.n	800c64c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c648:	2303      	movs	r3, #3
 800c64a:	e05c      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c64c:	4b11      	ldr	r3, [pc, #68]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d0f0      	beq.n	800c63a <HAL_RCC_OscConfig+0x416>
 800c658:	e054      	b.n	800c704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c65a:	4b10      	ldr	r3, [pc, #64]	@ (800c69c <HAL_RCC_OscConfig+0x478>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c660:	f7fc fc14 	bl	8008e8c <HAL_GetTick>
 800c664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c668:	f7fc fc10 	bl	8008e8c <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e045      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c67a:	4b06      	ldr	r3, [pc, #24]	@ (800c694 <HAL_RCC_OscConfig+0x470>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1f0      	bne.n	800c668 <HAL_RCC_OscConfig+0x444>
 800c686:	e03d      	b.n	800c704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	699b      	ldr	r3, [r3, #24]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d107      	bne.n	800c6a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e038      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
 800c694:	40023800 	.word	0x40023800
 800c698:	40007000 	.word	0x40007000
 800c69c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c6a0:	4b1b      	ldr	r3, [pc, #108]	@ (800c710 <HAL_RCC_OscConfig+0x4ec>)
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d028      	beq.n	800c700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d121      	bne.n	800c700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d11a      	bne.n	800c700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c6d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d111      	bne.n	800c700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6e6:	085b      	lsrs	r3, r3, #1
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d107      	bne.n	800c700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d001      	beq.n	800c704 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	e000      	b.n	800c706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	40023800 	.word	0x40023800

0800c714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e0cc      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c728:	4b68      	ldr	r3, [pc, #416]	@ (800c8cc <HAL_RCC_ClockConfig+0x1b8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 0307 	and.w	r3, r3, #7
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d90c      	bls.n	800c750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c736:	4b65      	ldr	r3, [pc, #404]	@ (800c8cc <HAL_RCC_ClockConfig+0x1b8>)
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	b2d2      	uxtb	r2, r2
 800c73c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c73e:	4b63      	ldr	r3, [pc, #396]	@ (800c8cc <HAL_RCC_ClockConfig+0x1b8>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 0307 	and.w	r3, r3, #7
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d001      	beq.n	800c750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c74c:	2301      	movs	r3, #1
 800c74e:	e0b8      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 0302 	and.w	r3, r3, #2
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d020      	beq.n	800c79e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 0304 	and.w	r3, r3, #4
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c768:	4b59      	ldr	r3, [pc, #356]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	4a58      	ldr	r2, [pc, #352]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c76e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0308 	and.w	r3, r3, #8
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c780:	4b53      	ldr	r3, [pc, #332]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	4a52      	ldr	r2, [pc, #328]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c78a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c78c:	4b50      	ldr	r3, [pc, #320]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	494d      	ldr	r1, [pc, #308]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c79a:	4313      	orrs	r3, r2
 800c79c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d044      	beq.n	800c834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d107      	bne.n	800c7c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7b2:	4b47      	ldr	r3, [pc, #284]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d119      	bne.n	800c7f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e07f      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d003      	beq.n	800c7d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d107      	bne.n	800c7e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7d2:	4b3f      	ldr	r3, [pc, #252]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d109      	bne.n	800c7f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e06f      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7e2:	4b3b      	ldr	r3, [pc, #236]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 0302 	and.w	r3, r3, #2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d101      	bne.n	800c7f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e067      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c7f2:	4b37      	ldr	r3, [pc, #220]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f023 0203 	bic.w	r2, r3, #3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	4934      	ldr	r1, [pc, #208]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c800:	4313      	orrs	r3, r2
 800c802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c804:	f7fc fb42 	bl	8008e8c <HAL_GetTick>
 800c808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c80a:	e00a      	b.n	800c822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c80c:	f7fc fb3e 	bl	8008e8c <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d901      	bls.n	800c822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c81e:	2303      	movs	r3, #3
 800c820:	e04f      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c822:	4b2b      	ldr	r3, [pc, #172]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f003 020c 	and.w	r2, r3, #12
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	429a      	cmp	r2, r3
 800c832:	d1eb      	bne.n	800c80c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c834:	4b25      	ldr	r3, [pc, #148]	@ (800c8cc <HAL_RCC_ClockConfig+0x1b8>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0307 	and.w	r3, r3, #7
 800c83c:	683a      	ldr	r2, [r7, #0]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d20c      	bcs.n	800c85c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c842:	4b22      	ldr	r3, [pc, #136]	@ (800c8cc <HAL_RCC_ClockConfig+0x1b8>)
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	b2d2      	uxtb	r2, r2
 800c848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c84a:	4b20      	ldr	r3, [pc, #128]	@ (800c8cc <HAL_RCC_ClockConfig+0x1b8>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d001      	beq.n	800c85c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	e032      	b.n	800c8c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f003 0304 	and.w	r3, r3, #4
 800c864:	2b00      	cmp	r3, #0
 800c866:	d008      	beq.n	800c87a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c868:	4b19      	ldr	r3, [pc, #100]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	4916      	ldr	r1, [pc, #88]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c876:	4313      	orrs	r3, r2
 800c878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0308 	and.w	r3, r3, #8
 800c882:	2b00      	cmp	r3, #0
 800c884:	d009      	beq.n	800c89a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c886:	4b12      	ldr	r3, [pc, #72]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	490e      	ldr	r1, [pc, #56]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c896:	4313      	orrs	r3, r2
 800c898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c89a:	f000 f821 	bl	800c8e0 <HAL_RCC_GetSysClockFreq>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d0 <HAL_RCC_ClockConfig+0x1bc>)
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	091b      	lsrs	r3, r3, #4
 800c8a6:	f003 030f 	and.w	r3, r3, #15
 800c8aa:	490a      	ldr	r1, [pc, #40]	@ (800c8d4 <HAL_RCC_ClockConfig+0x1c0>)
 800c8ac:	5ccb      	ldrb	r3, [r1, r3]
 800c8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b2:	4a09      	ldr	r2, [pc, #36]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1c4>)
 800c8b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c8b6:	4b09      	ldr	r3, [pc, #36]	@ (800c8dc <HAL_RCC_ClockConfig+0x1c8>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fc faa2 	bl	8008e04 <HAL_InitTick>

  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	40023c00 	.word	0x40023c00
 800c8d0:	40023800 	.word	0x40023800
 800c8d4:	0800f7a4 	.word	0x0800f7a4
 800c8d8:	20000554 	.word	0x20000554
 800c8dc:	20000558 	.word	0x20000558

0800c8e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8e4:	b094      	sub	sp, #80	@ 0x50
 800c8e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c8f8:	4b79      	ldr	r3, [pc, #484]	@ (800cae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f003 030c 	and.w	r3, r3, #12
 800c900:	2b08      	cmp	r3, #8
 800c902:	d00d      	beq.n	800c920 <HAL_RCC_GetSysClockFreq+0x40>
 800c904:	2b08      	cmp	r3, #8
 800c906:	f200 80e1 	bhi.w	800cacc <HAL_RCC_GetSysClockFreq+0x1ec>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <HAL_RCC_GetSysClockFreq+0x34>
 800c90e:	2b04      	cmp	r3, #4
 800c910:	d003      	beq.n	800c91a <HAL_RCC_GetSysClockFreq+0x3a>
 800c912:	e0db      	b.n	800cacc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c914:	4b73      	ldr	r3, [pc, #460]	@ (800cae4 <HAL_RCC_GetSysClockFreq+0x204>)
 800c916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c918:	e0db      	b.n	800cad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c91a:	4b73      	ldr	r3, [pc, #460]	@ (800cae8 <HAL_RCC_GetSysClockFreq+0x208>)
 800c91c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c91e:	e0d8      	b.n	800cad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c920:	4b6f      	ldr	r3, [pc, #444]	@ (800cae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c928:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c92a:	4b6d      	ldr	r3, [pc, #436]	@ (800cae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c932:	2b00      	cmp	r3, #0
 800c934:	d063      	beq.n	800c9fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c936:	4b6a      	ldr	r3, [pc, #424]	@ (800cae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	099b      	lsrs	r3, r3, #6
 800c93c:	2200      	movs	r2, #0
 800c93e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c940:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c948:	633b      	str	r3, [r7, #48]	@ 0x30
 800c94a:	2300      	movs	r3, #0
 800c94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c94e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c952:	4622      	mov	r2, r4
 800c954:	462b      	mov	r3, r5
 800c956:	f04f 0000 	mov.w	r0, #0
 800c95a:	f04f 0100 	mov.w	r1, #0
 800c95e:	0159      	lsls	r1, r3, #5
 800c960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c964:	0150      	lsls	r0, r2, #5
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	4621      	mov	r1, r4
 800c96c:	1a51      	subs	r1, r2, r1
 800c96e:	6139      	str	r1, [r7, #16]
 800c970:	4629      	mov	r1, r5
 800c972:	eb63 0301 	sbc.w	r3, r3, r1
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	f04f 0200 	mov.w	r2, #0
 800c97c:	f04f 0300 	mov.w	r3, #0
 800c980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c984:	4659      	mov	r1, fp
 800c986:	018b      	lsls	r3, r1, #6
 800c988:	4651      	mov	r1, sl
 800c98a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c98e:	4651      	mov	r1, sl
 800c990:	018a      	lsls	r2, r1, #6
 800c992:	4651      	mov	r1, sl
 800c994:	ebb2 0801 	subs.w	r8, r2, r1
 800c998:	4659      	mov	r1, fp
 800c99a:	eb63 0901 	sbc.w	r9, r3, r1
 800c99e:	f04f 0200 	mov.w	r2, #0
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9b2:	4690      	mov	r8, r2
 800c9b4:	4699      	mov	r9, r3
 800c9b6:	4623      	mov	r3, r4
 800c9b8:	eb18 0303 	adds.w	r3, r8, r3
 800c9bc:	60bb      	str	r3, [r7, #8]
 800c9be:	462b      	mov	r3, r5
 800c9c0:	eb49 0303 	adc.w	r3, r9, r3
 800c9c4:	60fb      	str	r3, [r7, #12]
 800c9c6:	f04f 0200 	mov.w	r2, #0
 800c9ca:	f04f 0300 	mov.w	r3, #0
 800c9ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	024b      	lsls	r3, r1, #9
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c9dc:	4621      	mov	r1, r4
 800c9de:	024a      	lsls	r2, r1, #9
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c9ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c9f0:	f7f3 fc46 	bl	8000280 <__aeabi_uldivmod>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9fc:	e058      	b.n	800cab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9fe:	4b38      	ldr	r3, [pc, #224]	@ (800cae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	099b      	lsrs	r3, r3, #6
 800ca04:	2200      	movs	r2, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	4611      	mov	r1, r2
 800ca0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ca0e:	623b      	str	r3, [r7, #32]
 800ca10:	2300      	movs	r3, #0
 800ca12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ca18:	4642      	mov	r2, r8
 800ca1a:	464b      	mov	r3, r9
 800ca1c:	f04f 0000 	mov.w	r0, #0
 800ca20:	f04f 0100 	mov.w	r1, #0
 800ca24:	0159      	lsls	r1, r3, #5
 800ca26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca2a:	0150      	lsls	r0, r2, #5
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4641      	mov	r1, r8
 800ca32:	ebb2 0a01 	subs.w	sl, r2, r1
 800ca36:	4649      	mov	r1, r9
 800ca38:	eb63 0b01 	sbc.w	fp, r3, r1
 800ca3c:	f04f 0200 	mov.w	r2, #0
 800ca40:	f04f 0300 	mov.w	r3, #0
 800ca44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ca48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ca4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ca50:	ebb2 040a 	subs.w	r4, r2, sl
 800ca54:	eb63 050b 	sbc.w	r5, r3, fp
 800ca58:	f04f 0200 	mov.w	r2, #0
 800ca5c:	f04f 0300 	mov.w	r3, #0
 800ca60:	00eb      	lsls	r3, r5, #3
 800ca62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca66:	00e2      	lsls	r2, r4, #3
 800ca68:	4614      	mov	r4, r2
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	4643      	mov	r3, r8
 800ca6e:	18e3      	adds	r3, r4, r3
 800ca70:	603b      	str	r3, [r7, #0]
 800ca72:	464b      	mov	r3, r9
 800ca74:	eb45 0303 	adc.w	r3, r5, r3
 800ca78:	607b      	str	r3, [r7, #4]
 800ca7a:	f04f 0200 	mov.w	r2, #0
 800ca7e:	f04f 0300 	mov.w	r3, #0
 800ca82:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ca86:	4629      	mov	r1, r5
 800ca88:	028b      	lsls	r3, r1, #10
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ca90:	4621      	mov	r1, r4
 800ca92:	028a      	lsls	r2, r1, #10
 800ca94:	4610      	mov	r0, r2
 800ca96:	4619      	mov	r1, r3
 800ca98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	61bb      	str	r3, [r7, #24]
 800ca9e:	61fa      	str	r2, [r7, #28]
 800caa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800caa4:	f7f3 fbec 	bl	8000280 <__aeabi_uldivmod>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	4613      	mov	r3, r2
 800caae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800cab0:	4b0b      	ldr	r3, [pc, #44]	@ (800cae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	3301      	adds	r3, #1
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800cac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800caca:	e002      	b.n	800cad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cacc:	4b05      	ldr	r3, [pc, #20]	@ (800cae4 <HAL_RCC_GetSysClockFreq+0x204>)
 800cace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3750      	adds	r7, #80	@ 0x50
 800cad8:	46bd      	mov	sp, r7
 800cada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cade:	bf00      	nop
 800cae0:	40023800 	.word	0x40023800
 800cae4:	00f42400 	.word	0x00f42400
 800cae8:	007a1200 	.word	0x007a1200

0800caec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800caec:	b480      	push	{r7}
 800caee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800caf0:	4b03      	ldr	r3, [pc, #12]	@ (800cb00 <HAL_RCC_GetHCLKFreq+0x14>)
 800caf2:	681b      	ldr	r3, [r3, #0]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	20000554 	.word	0x20000554

0800cb04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cb08:	f7ff fff0 	bl	800caec <HAL_RCC_GetHCLKFreq>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	4b05      	ldr	r3, [pc, #20]	@ (800cb24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	0a9b      	lsrs	r3, r3, #10
 800cb14:	f003 0307 	and.w	r3, r3, #7
 800cb18:	4903      	ldr	r1, [pc, #12]	@ (800cb28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb1a:	5ccb      	ldrb	r3, [r1, r3]
 800cb1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	40023800 	.word	0x40023800
 800cb28:	0800f7b4 	.word	0x0800f7b4

0800cb2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cb30:	f7ff ffdc 	bl	800caec <HAL_RCC_GetHCLKFreq>
 800cb34:	4602      	mov	r2, r0
 800cb36:	4b05      	ldr	r3, [pc, #20]	@ (800cb4c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	0b5b      	lsrs	r3, r3, #13
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	4903      	ldr	r1, [pc, #12]	@ (800cb50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb42:	5ccb      	ldrb	r3, [r1, r3]
 800cb44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	40023800 	.word	0x40023800
 800cb50:	0800f7b4 	.word	0x0800f7b4

0800cb54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e041      	b.n	800cbea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7fb ff6a 	bl	8008a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3304      	adds	r3, #4
 800cb90:	4619      	mov	r1, r3
 800cb92:	4610      	mov	r0, r2
 800cb94:	f000 fa70 	bl	800d078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d001      	beq.n	800cc0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e044      	b.n	800cc96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2202      	movs	r2, #2
 800cc10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68da      	ldr	r2, [r3, #12]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f042 0201 	orr.w	r2, r2, #1
 800cc22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a1e      	ldr	r2, [pc, #120]	@ (800cca4 <HAL_TIM_Base_Start_IT+0xb0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d018      	beq.n	800cc60 <HAL_TIM_Base_Start_IT+0x6c>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc36:	d013      	beq.n	800cc60 <HAL_TIM_Base_Start_IT+0x6c>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a1a      	ldr	r2, [pc, #104]	@ (800cca8 <HAL_TIM_Base_Start_IT+0xb4>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d00e      	beq.n	800cc60 <HAL_TIM_Base_Start_IT+0x6c>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a19      	ldr	r2, [pc, #100]	@ (800ccac <HAL_TIM_Base_Start_IT+0xb8>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d009      	beq.n	800cc60 <HAL_TIM_Base_Start_IT+0x6c>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a17      	ldr	r2, [pc, #92]	@ (800ccb0 <HAL_TIM_Base_Start_IT+0xbc>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d004      	beq.n	800cc60 <HAL_TIM_Base_Start_IT+0x6c>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a16      	ldr	r2, [pc, #88]	@ (800ccb4 <HAL_TIM_Base_Start_IT+0xc0>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d111      	bne.n	800cc84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b06      	cmp	r3, #6
 800cc70:	d010      	beq.n	800cc94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f042 0201 	orr.w	r2, r2, #1
 800cc80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc82:	e007      	b.n	800cc94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0201 	orr.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40000400 	.word	0x40000400
 800ccac:	40000800 	.word	0x40000800
 800ccb0:	40000c00 	.word	0x40000c00
 800ccb4:	40014000 	.word	0x40014000

0800ccb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d020      	beq.n	800cd1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01b      	beq.n	800cd1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f06f 0202 	mvn.w	r2, #2
 800ccec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	f003 0303 	and.w	r3, r3, #3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f999 	bl	800d03a <HAL_TIM_IC_CaptureCallback>
 800cd08:	e005      	b.n	800cd16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f98b 	bl	800d026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f99c 	bl	800d04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f003 0304 	and.w	r3, r3, #4
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d020      	beq.n	800cd68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f003 0304 	and.w	r3, r3, #4
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d01b      	beq.n	800cd68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f06f 0204 	mvn.w	r2, #4
 800cd38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d003      	beq.n	800cd56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f973 	bl	800d03a <HAL_TIM_IC_CaptureCallback>
 800cd54:	e005      	b.n	800cd62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f965 	bl	800d026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f976 	bl	800d04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f003 0308 	and.w	r3, r3, #8
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d020      	beq.n	800cdb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f003 0308 	and.w	r3, r3, #8
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01b      	beq.n	800cdb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f06f 0208 	mvn.w	r2, #8
 800cd84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2204      	movs	r2, #4
 800cd8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f94d 	bl	800d03a <HAL_TIM_IC_CaptureCallback>
 800cda0:	e005      	b.n	800cdae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f93f 	bl	800d026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f950 	bl	800d04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	f003 0310 	and.w	r3, r3, #16
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d020      	beq.n	800ce00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f003 0310 	and.w	r3, r3, #16
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d01b      	beq.n	800ce00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f06f 0210 	mvn.w	r2, #16
 800cdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2208      	movs	r2, #8
 800cdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f927 	bl	800d03a <HAL_TIM_IC_CaptureCallback>
 800cdec:	e005      	b.n	800cdfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f919 	bl	800d026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 f92a 	bl	800d04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00c      	beq.n	800ce24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d007      	beq.n	800ce24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f06f 0201 	mvn.w	r2, #1
 800ce1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7f6 fd20 	bl	8003864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00c      	beq.n	800ce48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d007      	beq.n	800ce48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ce40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fab0 	bl	800d3a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00c      	beq.n	800ce6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ce64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 f8fb 	bl	800d062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f003 0320 	and.w	r3, r3, #32
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00c      	beq.n	800ce90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d007      	beq.n	800ce90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f06f 0220 	mvn.w	r2, #32
 800ce88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fa82 	bl	800d394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d101      	bne.n	800ceb4 <HAL_TIM_ConfigClockSource+0x1c>
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	e0b4      	b.n	800d01e <HAL_TIM_ConfigClockSource+0x186>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2202      	movs	r2, #2
 800cec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ced2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ceda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ceec:	d03e      	beq.n	800cf6c <HAL_TIM_ConfigClockSource+0xd4>
 800ceee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cef2:	f200 8087 	bhi.w	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cefa:	f000 8086 	beq.w	800d00a <HAL_TIM_ConfigClockSource+0x172>
 800cefe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf02:	d87f      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf04:	2b70      	cmp	r3, #112	@ 0x70
 800cf06:	d01a      	beq.n	800cf3e <HAL_TIM_ConfigClockSource+0xa6>
 800cf08:	2b70      	cmp	r3, #112	@ 0x70
 800cf0a:	d87b      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf0c:	2b60      	cmp	r3, #96	@ 0x60
 800cf0e:	d050      	beq.n	800cfb2 <HAL_TIM_ConfigClockSource+0x11a>
 800cf10:	2b60      	cmp	r3, #96	@ 0x60
 800cf12:	d877      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf14:	2b50      	cmp	r3, #80	@ 0x50
 800cf16:	d03c      	beq.n	800cf92 <HAL_TIM_ConfigClockSource+0xfa>
 800cf18:	2b50      	cmp	r3, #80	@ 0x50
 800cf1a:	d873      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf1c:	2b40      	cmp	r3, #64	@ 0x40
 800cf1e:	d058      	beq.n	800cfd2 <HAL_TIM_ConfigClockSource+0x13a>
 800cf20:	2b40      	cmp	r3, #64	@ 0x40
 800cf22:	d86f      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf24:	2b30      	cmp	r3, #48	@ 0x30
 800cf26:	d064      	beq.n	800cff2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf28:	2b30      	cmp	r3, #48	@ 0x30
 800cf2a:	d86b      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d060      	beq.n	800cff2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf30:	2b20      	cmp	r3, #32
 800cf32:	d867      	bhi.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d05c      	beq.n	800cff2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf38:	2b10      	cmp	r3, #16
 800cf3a:	d05a      	beq.n	800cff2 <HAL_TIM_ConfigClockSource+0x15a>
 800cf3c:	e062      	b.n	800d004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf4e:	f000 f993 	bl	800d278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cf60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	609a      	str	r2, [r3, #8]
      break;
 800cf6a:	e04f      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf7c:	f000 f97c 	bl	800d278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	689a      	ldr	r2, [r3, #8]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cf8e:	609a      	str	r2, [r3, #8]
      break;
 800cf90:	e03c      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f000 f8f0 	bl	800d184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2150      	movs	r1, #80	@ 0x50
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 f949 	bl	800d242 <TIM_ITRx_SetConfig>
      break;
 800cfb0:	e02c      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f000 f90f 	bl	800d1e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2160      	movs	r1, #96	@ 0x60
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 f939 	bl	800d242 <TIM_ITRx_SetConfig>
      break;
 800cfd0:	e01c      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f000 f8d0 	bl	800d184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2140      	movs	r1, #64	@ 0x40
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 f929 	bl	800d242 <TIM_ITRx_SetConfig>
      break;
 800cff0:	e00c      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4619      	mov	r1, r3
 800cffc:	4610      	mov	r0, r2
 800cffe:	f000 f920 	bl	800d242 <TIM_ITRx_SetConfig>
      break;
 800d002:	e003      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	73fb      	strb	r3, [r7, #15]
      break;
 800d008:	e000      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d00a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d06a:	bf00      	nop
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
	...

0800d078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a37      	ldr	r2, [pc, #220]	@ (800d168 <TIM_Base_SetConfig+0xf0>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d00f      	beq.n	800d0b0 <TIM_Base_SetConfig+0x38>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d096:	d00b      	beq.n	800d0b0 <TIM_Base_SetConfig+0x38>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a34      	ldr	r2, [pc, #208]	@ (800d16c <TIM_Base_SetConfig+0xf4>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d007      	beq.n	800d0b0 <TIM_Base_SetConfig+0x38>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a33      	ldr	r2, [pc, #204]	@ (800d170 <TIM_Base_SetConfig+0xf8>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d003      	beq.n	800d0b0 <TIM_Base_SetConfig+0x38>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a32      	ldr	r2, [pc, #200]	@ (800d174 <TIM_Base_SetConfig+0xfc>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d108      	bne.n	800d0c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a28      	ldr	r2, [pc, #160]	@ (800d168 <TIM_Base_SetConfig+0xf0>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d01b      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0d0:	d017      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a25      	ldr	r2, [pc, #148]	@ (800d16c <TIM_Base_SetConfig+0xf4>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d013      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a24      	ldr	r2, [pc, #144]	@ (800d170 <TIM_Base_SetConfig+0xf8>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00f      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a23      	ldr	r2, [pc, #140]	@ (800d174 <TIM_Base_SetConfig+0xfc>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d00b      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a22      	ldr	r2, [pc, #136]	@ (800d178 <TIM_Base_SetConfig+0x100>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d007      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a21      	ldr	r2, [pc, #132]	@ (800d17c <TIM_Base_SetConfig+0x104>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d003      	beq.n	800d102 <TIM_Base_SetConfig+0x8a>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a20      	ldr	r2, [pc, #128]	@ (800d180 <TIM_Base_SetConfig+0x108>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d108      	bne.n	800d114 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	4313      	orrs	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	695b      	ldr	r3, [r3, #20]
 800d11e:	4313      	orrs	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	689a      	ldr	r2, [r3, #8]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a0c      	ldr	r2, [pc, #48]	@ (800d168 <TIM_Base_SetConfig+0xf0>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d103      	bne.n	800d142 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	691a      	ldr	r2, [r3, #16]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f043 0204 	orr.w	r2, r3, #4
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2201      	movs	r2, #1
 800d152:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	601a      	str	r2, [r3, #0]
}
 800d15a:	bf00      	nop
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	40010000 	.word	0x40010000
 800d16c:	40000400 	.word	0x40000400
 800d170:	40000800 	.word	0x40000800
 800d174:	40000c00 	.word	0x40000c00
 800d178:	40014000 	.word	0x40014000
 800d17c:	40014400 	.word	0x40014400
 800d180:	40014800 	.word	0x40014800

0800d184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d184:	b480      	push	{r7}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6a1b      	ldr	r3, [r3, #32]
 800d194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	f023 0201 	bic.w	r2, r3, #1
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d1ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	011b      	lsls	r3, r3, #4
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f023 030a 	bic.w	r3, r3, #10
 800d1c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	621a      	str	r2, [r3, #32]
}
 800d1d6:	bf00      	nop
 800d1d8:	371c      	adds	r7, #28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b087      	sub	sp, #28
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
 800d1f8:	f023 0210 	bic.w	r2, r3, #16
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d20c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	031b      	lsls	r3, r3, #12
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	4313      	orrs	r3, r2
 800d216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d21e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	011b      	lsls	r3, r3, #4
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	4313      	orrs	r3, r2
 800d228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	621a      	str	r2, [r3, #32]
}
 800d236:	bf00      	nop
 800d238:	371c      	adds	r7, #28
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d242:	b480      	push	{r7}
 800d244:	b085      	sub	sp, #20
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	4313      	orrs	r3, r2
 800d260:	f043 0307 	orr.w	r3, r3, #7
 800d264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	609a      	str	r2, [r3, #8]
}
 800d26c:	bf00      	nop
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d278:	b480      	push	{r7}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	021a      	lsls	r2, r3, #8
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	431a      	orrs	r2, r3
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	697a      	ldr	r2, [r7, #20]
 800d2aa:	609a      	str	r2, [r3, #8]
}
 800d2ac:	bf00      	nop
 800d2ae:	371c      	adds	r7, #28
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d101      	bne.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	e050      	b.n	800d372 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2202      	movs	r2, #2
 800d2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a1c      	ldr	r2, [pc, #112]	@ (800d380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d018      	beq.n	800d346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d31c:	d013      	beq.n	800d346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a18      	ldr	r2, [pc, #96]	@ (800d384 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d00e      	beq.n	800d346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a16      	ldr	r2, [pc, #88]	@ (800d388 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d009      	beq.n	800d346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a15      	ldr	r2, [pc, #84]	@ (800d38c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d004      	beq.n	800d346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a13      	ldr	r2, [pc, #76]	@ (800d390 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d10c      	bne.n	800d360 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d34c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	4313      	orrs	r3, r2
 800d356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	40010000 	.word	0x40010000
 800d384:	40000400 	.word	0x40000400
 800d388:	40000800 	.word	0x40000800
 800d38c:	40000c00 	.word	0x40000c00
 800d390:	40014000 	.word	0x40014000

0800d394 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e042      	b.n	800d454 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d106      	bne.n	800d3e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7fb fb5c 	bl	8008aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2224      	movs	r2, #36	@ 0x24
 800d3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d3fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fd7f 	bl	800df04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	691a      	ldr	r2, [r3, #16]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	695a      	ldr	r2, [r3, #20]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68da      	ldr	r2, [r3, #12]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2220      	movs	r2, #32
 800d440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2220      	movs	r2, #32
 800d448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08a      	sub	sp, #40	@ 0x28
 800d460:	af02      	add	r7, sp, #8
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	4613      	mov	r3, r2
 800d46a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d46c:	2300      	movs	r3, #0
 800d46e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d476:	b2db      	uxtb	r3, r3
 800d478:	2b20      	cmp	r3, #32
 800d47a:	d175      	bne.n	800d568 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d002      	beq.n	800d488 <HAL_UART_Transmit+0x2c>
 800d482:	88fb      	ldrh	r3, [r7, #6]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	e06e      	b.n	800d56a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2221      	movs	r2, #33	@ 0x21
 800d496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d49a:	f7fb fcf7 	bl	8008e8c <HAL_GetTick>
 800d49e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	88fa      	ldrh	r2, [r7, #6]
 800d4a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	88fa      	ldrh	r2, [r7, #6]
 800d4aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4b4:	d108      	bne.n	800d4c8 <HAL_UART_Transmit+0x6c>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d104      	bne.n	800d4c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	61bb      	str	r3, [r7, #24]
 800d4c6:	e003      	b.n	800d4d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d4d0:	e02e      	b.n	800d530 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2180      	movs	r1, #128	@ 0x80
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f000 fb1d 	bl	800db1c <UART_WaitOnFlagUntilTimeout>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d005      	beq.n	800d4f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2220      	movs	r2, #32
 800d4ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	e03a      	b.n	800d56a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10b      	bne.n	800d512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	3302      	adds	r3, #2
 800d50e:	61bb      	str	r3, [r7, #24]
 800d510:	e007      	b.n	800d522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	781a      	ldrb	r2, [r3, #0]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	3301      	adds	r3, #1
 800d520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d526:	b29b      	uxth	r3, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d534:	b29b      	uxth	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1cb      	bne.n	800d4d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2200      	movs	r2, #0
 800d542:	2140      	movs	r1, #64	@ 0x40
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f000 fae9 	bl	800db1c <UART_WaitOnFlagUntilTimeout>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d005      	beq.n	800d55c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2220      	movs	r2, #32
 800d554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	e006      	b.n	800d56a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2220      	movs	r2, #32
 800d560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	e000      	b.n	800d56a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d568:	2302      	movs	r3, #2
  }
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3720      	adds	r7, #32
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b0ba      	sub	sp, #232	@ 0xe8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5aa:	f003 030f 	and.w	r3, r3, #15
 800d5ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d5b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10f      	bne.n	800d5da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5be:	f003 0320 	and.w	r3, r3, #32
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d009      	beq.n	800d5da <HAL_UART_IRQHandler+0x66>
 800d5c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5ca:	f003 0320 	and.w	r3, r3, #32
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d003      	beq.n	800d5da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 fbd7 	bl	800dd86 <UART_Receive_IT>
      return;
 800d5d8:	e273      	b.n	800dac2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d5da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f000 80de 	beq.w	800d7a0 <HAL_UART_IRQHandler+0x22c>
 800d5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d106      	bne.n	800d5fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80d1 	beq.w	800d7a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d602:	f003 0301 	and.w	r3, r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00b      	beq.n	800d622 <HAL_UART_IRQHandler+0xae>
 800d60a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d612:	2b00      	cmp	r3, #0
 800d614:	d005      	beq.n	800d622 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d61a:	f043 0201 	orr.w	r2, r3, #1
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <HAL_UART_IRQHandler+0xd2>
 800d62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d005      	beq.n	800d646 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d63e:	f043 0202 	orr.w	r2, r3, #2
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d64a:	f003 0302 	and.w	r3, r3, #2
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00b      	beq.n	800d66a <HAL_UART_IRQHandler+0xf6>
 800d652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d005      	beq.n	800d66a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d662:	f043 0204 	orr.w	r2, r3, #4
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d66e:	f003 0308 	and.w	r3, r3, #8
 800d672:	2b00      	cmp	r3, #0
 800d674:	d011      	beq.n	800d69a <HAL_UART_IRQHandler+0x126>
 800d676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d67a:	f003 0320 	and.w	r3, r3, #32
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d105      	bne.n	800d68e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d005      	beq.n	800d69a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d692:	f043 0208 	orr.w	r2, r3, #8
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 820a 	beq.w	800dab8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6a8:	f003 0320 	and.w	r3, r3, #32
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d008      	beq.n	800d6c2 <HAL_UART_IRQHandler+0x14e>
 800d6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fb62 	bl	800dd86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6cc:	2b40      	cmp	r3, #64	@ 0x40
 800d6ce:	bf0c      	ite	eq
 800d6d0:	2301      	moveq	r3, #1
 800d6d2:	2300      	movne	r3, #0
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6de:	f003 0308 	and.w	r3, r3, #8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d103      	bne.n	800d6ee <HAL_UART_IRQHandler+0x17a>
 800d6e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d04f      	beq.n	800d78e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fa6d 	bl	800dbce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6fe:	2b40      	cmp	r3, #64	@ 0x40
 800d700:	d141      	bne.n	800d786 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3314      	adds	r3, #20
 800d708:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d710:	e853 3f00 	ldrex	r3, [r3]
 800d714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d71c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3314      	adds	r3, #20
 800d72a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d72e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d732:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d73a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d73e:	e841 2300 	strex	r3, r2, [r1]
 800d742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1d9      	bne.n	800d702 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d752:	2b00      	cmp	r3, #0
 800d754:	d013      	beq.n	800d77e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d75a:	4a8a      	ldr	r2, [pc, #552]	@ (800d984 <HAL_UART_IRQHandler+0x410>)
 800d75c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d762:	4618      	mov	r0, r3
 800d764:	f7fb fd43 	bl	80091ee <HAL_DMA_Abort_IT>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d016      	beq.n	800d79c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d778:	4610      	mov	r0, r2
 800d77a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d77c:	e00e      	b.n	800d79c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f9b6 	bl	800daf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d784:	e00a      	b.n	800d79c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f9b2 	bl	800daf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d78c:	e006      	b.n	800d79c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f9ae 	bl	800daf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d79a:	e18d      	b.n	800dab8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d79c:	bf00      	nop
    return;
 800d79e:	e18b      	b.n	800dab8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	f040 8167 	bne.w	800da78 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7ae:	f003 0310 	and.w	r3, r3, #16
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 8160 	beq.w	800da78 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800d7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7bc:	f003 0310 	and.w	r3, r3, #16
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 8159 	beq.w	800da78 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	60bb      	str	r3, [r7, #8]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60bb      	str	r3, [r7, #8]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	60bb      	str	r3, [r7, #8]
 800d7da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e6:	2b40      	cmp	r3, #64	@ 0x40
 800d7e8:	f040 80ce 	bne.w	800d988 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d7f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 80a9 	beq.w	800d954 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d80a:	429a      	cmp	r2, r3
 800d80c:	f080 80a2 	bcs.w	800d954 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d816:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81c:	69db      	ldr	r3, [r3, #28]
 800d81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d822:	f000 8088 	beq.w	800d936 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	330c      	adds	r3, #12
 800d82c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d834:	e853 3f00 	ldrex	r3, [r3]
 800d838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d83c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	330c      	adds	r3, #12
 800d84e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d85e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d862:	e841 2300 	strex	r3, r2, [r1]
 800d866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d86a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d9      	bne.n	800d826 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3314      	adds	r3, #20
 800d878:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d884:	f023 0301 	bic.w	r3, r3, #1
 800d888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3314      	adds	r3, #20
 800d892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d896:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d89a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d89e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d8a2:	e841 2300 	strex	r3, r2, [r1]
 800d8a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d8a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e1      	bne.n	800d872 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3314      	adds	r3, #20
 800d8b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8b8:	e853 3f00 	ldrex	r3, [r3]
 800d8bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d8be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	3314      	adds	r3, #20
 800d8ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d8d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d8d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d8d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d8da:	e841 2300 	strex	r3, r2, [r1]
 800d8de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d8e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d1e3      	bne.n	800d8ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2220      	movs	r2, #32
 800d8ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	330c      	adds	r3, #12
 800d8fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8fe:	e853 3f00 	ldrex	r3, [r3]
 800d902:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d906:	f023 0310 	bic.w	r3, r3, #16
 800d90a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	330c      	adds	r3, #12
 800d914:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d918:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d91a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d91e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d920:	e841 2300 	strex	r3, r2, [r1]
 800d924:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e3      	bne.n	800d8f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d930:	4618      	mov	r0, r3
 800d932:	f7fb fbec 	bl	800910e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2202      	movs	r2, #2
 800d93a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d944:	b29b      	uxth	r3, r3
 800d946:	1ad3      	subs	r3, r2, r3
 800d948:	b29b      	uxth	r3, r3
 800d94a:	4619      	mov	r1, r3
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f8d9 	bl	800db04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d952:	e0b3      	b.n	800dabc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d95c:	429a      	cmp	r2, r3
 800d95e:	f040 80ad 	bne.w	800dabc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d966:	69db      	ldr	r3, [r3, #28]
 800d968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d96c:	f040 80a6 	bne.w	800dabc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2202      	movs	r2, #2
 800d974:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 f8c1 	bl	800db04 <HAL_UARTEx_RxEventCallback>
      return;
 800d982:	e09b      	b.n	800dabc <HAL_UART_IRQHandler+0x548>
 800d984:	0800dc95 	.word	0x0800dc95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d990:	b29b      	uxth	r3, r3
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	f000 808e 	beq.w	800dac0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d9a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 8089 	beq.w	800dac0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	330c      	adds	r3, #12
 800d9b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b8:	e853 3f00 	ldrex	r3, [r3]
 800d9bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	330c      	adds	r3, #12
 800d9ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d9d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800d9d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9da:	e841 2300 	strex	r3, r2, [r1]
 800d9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e3      	bne.n	800d9ae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3314      	adds	r3, #20
 800d9ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f0:	e853 3f00 	ldrex	r3, [r3]
 800d9f4:	623b      	str	r3, [r7, #32]
   return(result);
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	f023 0301 	bic.w	r3, r3, #1
 800d9fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	3314      	adds	r3, #20
 800da06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800da0a:	633a      	str	r2, [r7, #48]	@ 0x30
 800da0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da12:	e841 2300 	strex	r3, r2, [r1]
 800da16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d1e3      	bne.n	800d9e6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2220      	movs	r2, #32
 800da22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	330c      	adds	r3, #12
 800da32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	e853 3f00 	ldrex	r3, [r3]
 800da3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	f023 0310 	bic.w	r3, r3, #16
 800da42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	330c      	adds	r3, #12
 800da4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800da50:	61fa      	str	r2, [r7, #28]
 800da52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da54:	69b9      	ldr	r1, [r7, #24]
 800da56:	69fa      	ldr	r2, [r7, #28]
 800da58:	e841 2300 	strex	r3, r2, [r1]
 800da5c:	617b      	str	r3, [r7, #20]
   return(result);
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1e3      	bne.n	800da2c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2202      	movs	r2, #2
 800da68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da6e:	4619      	mov	r1, r3
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f847 	bl	800db04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da76:	e023      	b.n	800dac0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800da78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da80:	2b00      	cmp	r3, #0
 800da82:	d009      	beq.n	800da98 <HAL_UART_IRQHandler+0x524>
 800da84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d003      	beq.n	800da98 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f910 	bl	800dcb6 <UART_Transmit_IT>
    return;
 800da96:	e014      	b.n	800dac2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800da98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00e      	beq.n	800dac2 <HAL_UART_IRQHandler+0x54e>
 800daa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daac:	2b00      	cmp	r3, #0
 800daae:	d008      	beq.n	800dac2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f950 	bl	800dd56 <UART_EndTransmit_IT>
    return;
 800dab6:	e004      	b.n	800dac2 <HAL_UART_IRQHandler+0x54e>
    return;
 800dab8:	bf00      	nop
 800daba:	e002      	b.n	800dac2 <HAL_UART_IRQHandler+0x54e>
      return;
 800dabc:	bf00      	nop
 800dabe:	e000      	b.n	800dac2 <HAL_UART_IRQHandler+0x54e>
      return;
 800dac0:	bf00      	nop
  }
}
 800dac2:	37e8      	adds	r7, #232	@ 0xe8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	603b      	str	r3, [r7, #0]
 800db28:	4613      	mov	r3, r2
 800db2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db2c:	e03b      	b.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db34:	d037      	beq.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db36:	f7fb f9a9 	bl	8008e8c <HAL_GetTick>
 800db3a:	4602      	mov	r2, r0
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	6a3a      	ldr	r2, [r7, #32]
 800db42:	429a      	cmp	r2, r3
 800db44:	d302      	bcc.n	800db4c <UART_WaitOnFlagUntilTimeout+0x30>
 800db46:	6a3b      	ldr	r3, [r7, #32]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db4c:	2303      	movs	r3, #3
 800db4e:	e03a      	b.n	800dbc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f003 0304 	and.w	r3, r3, #4
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d023      	beq.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b80      	cmp	r3, #128	@ 0x80
 800db62:	d020      	beq.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2b40      	cmp	r3, #64	@ 0x40
 800db68:	d01d      	beq.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 0308 	and.w	r3, r3, #8
 800db74:	2b08      	cmp	r3, #8
 800db76:	d116      	bne.n	800dba6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800db78:	2300      	movs	r3, #0
 800db7a:	617b      	str	r3, [r7, #20]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	617b      	str	r3, [r7, #20]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	617b      	str	r3, [r7, #20]
 800db8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 f81d 	bl	800dbce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2208      	movs	r2, #8
 800db98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e00f      	b.n	800dbc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	4013      	ands	r3, r2
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	bf0c      	ite	eq
 800dbb6:	2301      	moveq	r3, #1
 800dbb8:	2300      	movne	r3, #0
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d0b4      	beq.n	800db2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b095      	sub	sp, #84	@ 0x54
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	330c      	adds	r3, #12
 800dbdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe0:	e853 3f00 	ldrex	r3, [r3]
 800dbe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	330c      	adds	r3, #12
 800dbf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbf6:	643a      	str	r2, [r7, #64]	@ 0x40
 800dbf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbfe:	e841 2300 	strex	r3, r2, [r1]
 800dc02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1e5      	bne.n	800dbd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	3314      	adds	r3, #20
 800dc10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	6a3b      	ldr	r3, [r7, #32]
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	f023 0301 	bic.w	r3, r3, #1
 800dc20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	3314      	adds	r3, #20
 800dc28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc32:	e841 2300 	strex	r3, r2, [r1]
 800dc36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1e5      	bne.n	800dc0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d119      	bne.n	800dc7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	330c      	adds	r3, #12
 800dc4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	e853 3f00 	ldrex	r3, [r3]
 800dc54:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	f023 0310 	bic.w	r3, r3, #16
 800dc5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	330c      	adds	r3, #12
 800dc64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc66:	61ba      	str	r2, [r7, #24]
 800dc68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6a:	6979      	ldr	r1, [r7, #20]
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	e841 2300 	strex	r3, r2, [r1]
 800dc72:	613b      	str	r3, [r7, #16]
   return(result);
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1e5      	bne.n	800dc46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dc88:	bf00      	nop
 800dc8a:	3754      	adds	r7, #84	@ 0x54
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7ff ff21 	bl	800daf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcae:	bf00      	nop
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b085      	sub	sp, #20
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b21      	cmp	r3, #33	@ 0x21
 800dcc8:	d13e      	bne.n	800dd48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcd2:	d114      	bne.n	800dcfe <UART_Transmit_IT+0x48>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	691b      	ldr	r3, [r3, #16]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d110      	bne.n	800dcfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a1b      	ldr	r3, [r3, #32]
 800dce0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	881b      	ldrh	r3, [r3, #0]
 800dce6:	461a      	mov	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dcf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a1b      	ldr	r3, [r3, #32]
 800dcf6:	1c9a      	adds	r2, r3, #2
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	621a      	str	r2, [r3, #32]
 800dcfc:	e008      	b.n	800dd10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	1c59      	adds	r1, r3, #1
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	6211      	str	r1, [r2, #32]
 800dd08:	781a      	ldrb	r2, [r3, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	3b01      	subs	r3, #1
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10f      	bne.n	800dd44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	68da      	ldr	r2, [r3, #12]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dd44:	2300      	movs	r3, #0
 800dd46:	e000      	b.n	800dd4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dd48:	2302      	movs	r3, #2
  }
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b082      	sub	sp, #8
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	68da      	ldr	r2, [r3, #12]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff fea6 	bl	800dac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b08c      	sub	sp, #48	@ 0x30
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800dd92:	2300      	movs	r3, #0
 800dd94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	2b22      	cmp	r3, #34	@ 0x22
 800dda0:	f040 80aa 	bne.w	800def8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddac:	d115      	bne.n	800ddda <UART_Receive_IT+0x54>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d111      	bne.n	800ddda <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd2:	1c9a      	adds	r2, r3, #2
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	629a      	str	r2, [r3, #40]	@ 0x28
 800ddd8:	e024      	b.n	800de24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dde8:	d007      	beq.n	800ddfa <UART_Receive_IT+0x74>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10a      	bne.n	800de08 <UART_Receive_IT+0x82>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	b2da      	uxtb	r2, r3
 800de02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	e008      	b.n	800de1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de14:	b2da      	uxtb	r2, r3
 800de16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de1e:	1c5a      	adds	r2, r3, #1
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de28:	b29b      	uxth	r3, r3
 800de2a:	3b01      	subs	r3, #1
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	4619      	mov	r1, r3
 800de32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800de34:	2b00      	cmp	r3, #0
 800de36:	d15d      	bne.n	800def4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68da      	ldr	r2, [r3, #12]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f022 0220 	bic.w	r2, r2, #32
 800de46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	68da      	ldr	r2, [r3, #12]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800de56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	695a      	ldr	r2, [r3, #20]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f022 0201 	bic.w	r2, r2, #1
 800de66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2220      	movs	r2, #32
 800de6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d135      	bne.n	800deea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	330c      	adds	r3, #12
 800de8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	613b      	str	r3, [r7, #16]
   return(result);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	f023 0310 	bic.w	r3, r3, #16
 800de9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	330c      	adds	r3, #12
 800dea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dea4:	623a      	str	r2, [r7, #32]
 800dea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea8:	69f9      	ldr	r1, [r7, #28]
 800deaa:	6a3a      	ldr	r2, [r7, #32]
 800deac:	e841 2300 	strex	r3, r2, [r1]
 800deb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1e5      	bne.n	800de84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 0310 	and.w	r3, r3, #16
 800dec2:	2b10      	cmp	r3, #16
 800dec4:	d10a      	bne.n	800dedc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dec6:	2300      	movs	r3, #0
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	60fb      	str	r3, [r7, #12]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	60fb      	str	r3, [r7, #12]
 800deda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff fe0e 	bl	800db04 <HAL_UARTEx_RxEventCallback>
 800dee8:	e002      	b.n	800def0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7ff fdf6 	bl	800dadc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	e002      	b.n	800defa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	e000      	b.n	800defa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800def8:	2302      	movs	r3, #2
  }
}
 800defa:	4618      	mov	r0, r3
 800defc:	3730      	adds	r7, #48	@ 0x30
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
	...

0800df04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df08:	b0c0      	sub	sp, #256	@ 0x100
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800df1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df20:	68d9      	ldr	r1, [r3, #12]
 800df22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	ea40 0301 	orr.w	r3, r0, r1
 800df2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800df2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df32:	689a      	ldr	r2, [r3, #8]
 800df34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df38:	691b      	ldr	r3, [r3, #16]
 800df3a:	431a      	orrs	r2, r3
 800df3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	431a      	orrs	r2, r3
 800df44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df48:	69db      	ldr	r3, [r3, #28]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800df50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800df5c:	f021 010c 	bic.w	r1, r1, #12
 800df60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800df6a:	430b      	orrs	r3, r1
 800df6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800df6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800df7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df7e:	6999      	ldr	r1, [r3, #24]
 800df80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	ea40 0301 	orr.w	r3, r0, r1
 800df8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	4b8f      	ldr	r3, [pc, #572]	@ (800e1d0 <UART_SetConfig+0x2cc>)
 800df94:	429a      	cmp	r2, r3
 800df96:	d005      	beq.n	800dfa4 <UART_SetConfig+0xa0>
 800df98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b8d      	ldr	r3, [pc, #564]	@ (800e1d4 <UART_SetConfig+0x2d0>)
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d104      	bne.n	800dfae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dfa4:	f7fe fdc2 	bl	800cb2c <HAL_RCC_GetPCLK2Freq>
 800dfa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800dfac:	e003      	b.n	800dfb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dfae:	f7fe fda9 	bl	800cb04 <HAL_RCC_GetPCLK1Freq>
 800dfb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfba:	69db      	ldr	r3, [r3, #28]
 800dfbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dfc0:	f040 810c 	bne.w	800e1dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dfc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dfce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800dfd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800dfd6:	4622      	mov	r2, r4
 800dfd8:	462b      	mov	r3, r5
 800dfda:	1891      	adds	r1, r2, r2
 800dfdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800dfde:	415b      	adcs	r3, r3
 800dfe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	eb12 0801 	adds.w	r8, r2, r1
 800dfec:	4629      	mov	r1, r5
 800dfee:	eb43 0901 	adc.w	r9, r3, r1
 800dff2:	f04f 0200 	mov.w	r2, #0
 800dff6:	f04f 0300 	mov.w	r3, #0
 800dffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e006:	4690      	mov	r8, r2
 800e008:	4699      	mov	r9, r3
 800e00a:	4623      	mov	r3, r4
 800e00c:	eb18 0303 	adds.w	r3, r8, r3
 800e010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e014:	462b      	mov	r3, r5
 800e016:	eb49 0303 	adc.w	r3, r9, r3
 800e01a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e02a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e02e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e032:	460b      	mov	r3, r1
 800e034:	18db      	adds	r3, r3, r3
 800e036:	653b      	str	r3, [r7, #80]	@ 0x50
 800e038:	4613      	mov	r3, r2
 800e03a:	eb42 0303 	adc.w	r3, r2, r3
 800e03e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e048:	f7f2 f91a 	bl	8000280 <__aeabi_uldivmod>
 800e04c:	4602      	mov	r2, r0
 800e04e:	460b      	mov	r3, r1
 800e050:	4b61      	ldr	r3, [pc, #388]	@ (800e1d8 <UART_SetConfig+0x2d4>)
 800e052:	fba3 2302 	umull	r2, r3, r3, r2
 800e056:	095b      	lsrs	r3, r3, #5
 800e058:	011c      	lsls	r4, r3, #4
 800e05a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e05e:	2200      	movs	r2, #0
 800e060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e064:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e06c:	4642      	mov	r2, r8
 800e06e:	464b      	mov	r3, r9
 800e070:	1891      	adds	r1, r2, r2
 800e072:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e074:	415b      	adcs	r3, r3
 800e076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e07c:	4641      	mov	r1, r8
 800e07e:	eb12 0a01 	adds.w	sl, r2, r1
 800e082:	4649      	mov	r1, r9
 800e084:	eb43 0b01 	adc.w	fp, r3, r1
 800e088:	f04f 0200 	mov.w	r2, #0
 800e08c:	f04f 0300 	mov.w	r3, #0
 800e090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e09c:	4692      	mov	sl, r2
 800e09e:	469b      	mov	fp, r3
 800e0a0:	4643      	mov	r3, r8
 800e0a2:	eb1a 0303 	adds.w	r3, sl, r3
 800e0a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e0aa:	464b      	mov	r3, r9
 800e0ac:	eb4b 0303 	adc.w	r3, fp, r3
 800e0b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e0b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e0c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	18db      	adds	r3, r3, r3
 800e0cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	eb42 0303 	adc.w	r3, r2, r3
 800e0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e0da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e0de:	f7f2 f8cf 	bl	8000280 <__aeabi_uldivmod>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e1d8 <UART_SetConfig+0x2d4>)
 800e0ea:	fba3 2301 	umull	r2, r3, r3, r1
 800e0ee:	095b      	lsrs	r3, r3, #5
 800e0f0:	2264      	movs	r2, #100	@ 0x64
 800e0f2:	fb02 f303 	mul.w	r3, r2, r3
 800e0f6:	1acb      	subs	r3, r1, r3
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e0fe:	4b36      	ldr	r3, [pc, #216]	@ (800e1d8 <UART_SetConfig+0x2d4>)
 800e100:	fba3 2302 	umull	r2, r3, r3, r2
 800e104:	095b      	lsrs	r3, r3, #5
 800e106:	005b      	lsls	r3, r3, #1
 800e108:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e10c:	441c      	add	r4, r3
 800e10e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e112:	2200      	movs	r2, #0
 800e114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e118:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e11c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e120:	4642      	mov	r2, r8
 800e122:	464b      	mov	r3, r9
 800e124:	1891      	adds	r1, r2, r2
 800e126:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e128:	415b      	adcs	r3, r3
 800e12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e12c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e130:	4641      	mov	r1, r8
 800e132:	1851      	adds	r1, r2, r1
 800e134:	6339      	str	r1, [r7, #48]	@ 0x30
 800e136:	4649      	mov	r1, r9
 800e138:	414b      	adcs	r3, r1
 800e13a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e13c:	f04f 0200 	mov.w	r2, #0
 800e140:	f04f 0300 	mov.w	r3, #0
 800e144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e148:	4659      	mov	r1, fp
 800e14a:	00cb      	lsls	r3, r1, #3
 800e14c:	4651      	mov	r1, sl
 800e14e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e152:	4651      	mov	r1, sl
 800e154:	00ca      	lsls	r2, r1, #3
 800e156:	4610      	mov	r0, r2
 800e158:	4619      	mov	r1, r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	4642      	mov	r2, r8
 800e15e:	189b      	adds	r3, r3, r2
 800e160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e164:	464b      	mov	r3, r9
 800e166:	460a      	mov	r2, r1
 800e168:	eb42 0303 	adc.w	r3, r2, r3
 800e16c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e17c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e184:	460b      	mov	r3, r1
 800e186:	18db      	adds	r3, r3, r3
 800e188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e18a:	4613      	mov	r3, r2
 800e18c:	eb42 0303 	adc.w	r3, r2, r3
 800e190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e19a:	f7f2 f871 	bl	8000280 <__aeabi_uldivmod>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d8 <UART_SetConfig+0x2d4>)
 800e1a4:	fba3 1302 	umull	r1, r3, r3, r2
 800e1a8:	095b      	lsrs	r3, r3, #5
 800e1aa:	2164      	movs	r1, #100	@ 0x64
 800e1ac:	fb01 f303 	mul.w	r3, r1, r3
 800e1b0:	1ad3      	subs	r3, r2, r3
 800e1b2:	00db      	lsls	r3, r3, #3
 800e1b4:	3332      	adds	r3, #50	@ 0x32
 800e1b6:	4a08      	ldr	r2, [pc, #32]	@ (800e1d8 <UART_SetConfig+0x2d4>)
 800e1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1bc:	095b      	lsrs	r3, r3, #5
 800e1be:	f003 0207 	and.w	r2, r3, #7
 800e1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4422      	add	r2, r4
 800e1ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e1cc:	e106      	b.n	800e3dc <UART_SetConfig+0x4d8>
 800e1ce:	bf00      	nop
 800e1d0:	40011000 	.word	0x40011000
 800e1d4:	40011400 	.word	0x40011400
 800e1d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e1dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e1ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e1ee:	4642      	mov	r2, r8
 800e1f0:	464b      	mov	r3, r9
 800e1f2:	1891      	adds	r1, r2, r2
 800e1f4:	6239      	str	r1, [r7, #32]
 800e1f6:	415b      	adcs	r3, r3
 800e1f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1fe:	4641      	mov	r1, r8
 800e200:	1854      	adds	r4, r2, r1
 800e202:	4649      	mov	r1, r9
 800e204:	eb43 0501 	adc.w	r5, r3, r1
 800e208:	f04f 0200 	mov.w	r2, #0
 800e20c:	f04f 0300 	mov.w	r3, #0
 800e210:	00eb      	lsls	r3, r5, #3
 800e212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e216:	00e2      	lsls	r2, r4, #3
 800e218:	4614      	mov	r4, r2
 800e21a:	461d      	mov	r5, r3
 800e21c:	4643      	mov	r3, r8
 800e21e:	18e3      	adds	r3, r4, r3
 800e220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e224:	464b      	mov	r3, r9
 800e226:	eb45 0303 	adc.w	r3, r5, r3
 800e22a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e23a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e23e:	f04f 0200 	mov.w	r2, #0
 800e242:	f04f 0300 	mov.w	r3, #0
 800e246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e24a:	4629      	mov	r1, r5
 800e24c:	008b      	lsls	r3, r1, #2
 800e24e:	4621      	mov	r1, r4
 800e250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e254:	4621      	mov	r1, r4
 800e256:	008a      	lsls	r2, r1, #2
 800e258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e25c:	f7f2 f810 	bl	8000280 <__aeabi_uldivmod>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4b60      	ldr	r3, [pc, #384]	@ (800e3e8 <UART_SetConfig+0x4e4>)
 800e266:	fba3 2302 	umull	r2, r3, r3, r2
 800e26a:	095b      	lsrs	r3, r3, #5
 800e26c:	011c      	lsls	r4, r3, #4
 800e26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e272:	2200      	movs	r2, #0
 800e274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e278:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e27c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e280:	4642      	mov	r2, r8
 800e282:	464b      	mov	r3, r9
 800e284:	1891      	adds	r1, r2, r2
 800e286:	61b9      	str	r1, [r7, #24]
 800e288:	415b      	adcs	r3, r3
 800e28a:	61fb      	str	r3, [r7, #28]
 800e28c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e290:	4641      	mov	r1, r8
 800e292:	1851      	adds	r1, r2, r1
 800e294:	6139      	str	r1, [r7, #16]
 800e296:	4649      	mov	r1, r9
 800e298:	414b      	adcs	r3, r1
 800e29a:	617b      	str	r3, [r7, #20]
 800e29c:	f04f 0200 	mov.w	r2, #0
 800e2a0:	f04f 0300 	mov.w	r3, #0
 800e2a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e2a8:	4659      	mov	r1, fp
 800e2aa:	00cb      	lsls	r3, r1, #3
 800e2ac:	4651      	mov	r1, sl
 800e2ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e2b2:	4651      	mov	r1, sl
 800e2b4:	00ca      	lsls	r2, r1, #3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	4642      	mov	r2, r8
 800e2be:	189b      	adds	r3, r3, r2
 800e2c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e2c4:	464b      	mov	r3, r9
 800e2c6:	460a      	mov	r2, r1
 800e2c8:	eb42 0303 	adc.w	r3, r2, r3
 800e2cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e2da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e2dc:	f04f 0200 	mov.w	r2, #0
 800e2e0:	f04f 0300 	mov.w	r3, #0
 800e2e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e2e8:	4649      	mov	r1, r9
 800e2ea:	008b      	lsls	r3, r1, #2
 800e2ec:	4641      	mov	r1, r8
 800e2ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e2f2:	4641      	mov	r1, r8
 800e2f4:	008a      	lsls	r2, r1, #2
 800e2f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e2fa:	f7f1 ffc1 	bl	8000280 <__aeabi_uldivmod>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4611      	mov	r1, r2
 800e304:	4b38      	ldr	r3, [pc, #224]	@ (800e3e8 <UART_SetConfig+0x4e4>)
 800e306:	fba3 2301 	umull	r2, r3, r3, r1
 800e30a:	095b      	lsrs	r3, r3, #5
 800e30c:	2264      	movs	r2, #100	@ 0x64
 800e30e:	fb02 f303 	mul.w	r3, r2, r3
 800e312:	1acb      	subs	r3, r1, r3
 800e314:	011b      	lsls	r3, r3, #4
 800e316:	3332      	adds	r3, #50	@ 0x32
 800e318:	4a33      	ldr	r2, [pc, #204]	@ (800e3e8 <UART_SetConfig+0x4e4>)
 800e31a:	fba2 2303 	umull	r2, r3, r2, r3
 800e31e:	095b      	lsrs	r3, r3, #5
 800e320:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e324:	441c      	add	r4, r3
 800e326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e32a:	2200      	movs	r2, #0
 800e32c:	673b      	str	r3, [r7, #112]	@ 0x70
 800e32e:	677a      	str	r2, [r7, #116]	@ 0x74
 800e330:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e334:	4642      	mov	r2, r8
 800e336:	464b      	mov	r3, r9
 800e338:	1891      	adds	r1, r2, r2
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	415b      	adcs	r3, r3
 800e33e:	60fb      	str	r3, [r7, #12]
 800e340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e344:	4641      	mov	r1, r8
 800e346:	1851      	adds	r1, r2, r1
 800e348:	6039      	str	r1, [r7, #0]
 800e34a:	4649      	mov	r1, r9
 800e34c:	414b      	adcs	r3, r1
 800e34e:	607b      	str	r3, [r7, #4]
 800e350:	f04f 0200 	mov.w	r2, #0
 800e354:	f04f 0300 	mov.w	r3, #0
 800e358:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e35c:	4659      	mov	r1, fp
 800e35e:	00cb      	lsls	r3, r1, #3
 800e360:	4651      	mov	r1, sl
 800e362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e366:	4651      	mov	r1, sl
 800e368:	00ca      	lsls	r2, r1, #3
 800e36a:	4610      	mov	r0, r2
 800e36c:	4619      	mov	r1, r3
 800e36e:	4603      	mov	r3, r0
 800e370:	4642      	mov	r2, r8
 800e372:	189b      	adds	r3, r3, r2
 800e374:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e376:	464b      	mov	r3, r9
 800e378:	460a      	mov	r2, r1
 800e37a:	eb42 0303 	adc.w	r3, r2, r3
 800e37e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	663b      	str	r3, [r7, #96]	@ 0x60
 800e38a:	667a      	str	r2, [r7, #100]	@ 0x64
 800e38c:	f04f 0200 	mov.w	r2, #0
 800e390:	f04f 0300 	mov.w	r3, #0
 800e394:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e398:	4649      	mov	r1, r9
 800e39a:	008b      	lsls	r3, r1, #2
 800e39c:	4641      	mov	r1, r8
 800e39e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e3a2:	4641      	mov	r1, r8
 800e3a4:	008a      	lsls	r2, r1, #2
 800e3a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e3aa:	f7f1 ff69 	bl	8000280 <__aeabi_uldivmod>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e3e8 <UART_SetConfig+0x4e4>)
 800e3b4:	fba3 1302 	umull	r1, r3, r3, r2
 800e3b8:	095b      	lsrs	r3, r3, #5
 800e3ba:	2164      	movs	r1, #100	@ 0x64
 800e3bc:	fb01 f303 	mul.w	r3, r1, r3
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	3332      	adds	r3, #50	@ 0x32
 800e3c6:	4a08      	ldr	r2, [pc, #32]	@ (800e3e8 <UART_SetConfig+0x4e4>)
 800e3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3cc:	095b      	lsrs	r3, r3, #5
 800e3ce:	f003 020f 	and.w	r2, r3, #15
 800e3d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4422      	add	r2, r4
 800e3da:	609a      	str	r2, [r3, #8]
}
 800e3dc:	bf00      	nop
 800e3de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3e8:	51eb851f 	.word	0x51eb851f

0800e3ec <calloc>:
 800e3ec:	4b02      	ldr	r3, [pc, #8]	@ (800e3f8 <calloc+0xc>)
 800e3ee:	460a      	mov	r2, r1
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	6818      	ldr	r0, [r3, #0]
 800e3f4:	f000 b802 	b.w	800e3fc <_calloc_r>
 800e3f8:	2000056c 	.word	0x2000056c

0800e3fc <_calloc_r>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	fba1 5402 	umull	r5, r4, r1, r2
 800e402:	b93c      	cbnz	r4, 800e414 <_calloc_r+0x18>
 800e404:	4629      	mov	r1, r5
 800e406:	f000 f837 	bl	800e478 <_malloc_r>
 800e40a:	4606      	mov	r6, r0
 800e40c:	b928      	cbnz	r0, 800e41a <_calloc_r+0x1e>
 800e40e:	2600      	movs	r6, #0
 800e410:	4630      	mov	r0, r6
 800e412:	bd70      	pop	{r4, r5, r6, pc}
 800e414:	220c      	movs	r2, #12
 800e416:	6002      	str	r2, [r0, #0]
 800e418:	e7f9      	b.n	800e40e <_calloc_r+0x12>
 800e41a:	462a      	mov	r2, r5
 800e41c:	4621      	mov	r1, r4
 800e41e:	f000 f9f9 	bl	800e814 <memset>
 800e422:	e7f5      	b.n	800e410 <_calloc_r+0x14>

0800e424 <free>:
 800e424:	4b02      	ldr	r3, [pc, #8]	@ (800e430 <free+0xc>)
 800e426:	4601      	mov	r1, r0
 800e428:	6818      	ldr	r0, [r3, #0]
 800e42a:	f000 ba47 	b.w	800e8bc <_free_r>
 800e42e:	bf00      	nop
 800e430:	2000056c 	.word	0x2000056c

0800e434 <sbrk_aligned>:
 800e434:	b570      	push	{r4, r5, r6, lr}
 800e436:	4e0f      	ldr	r6, [pc, #60]	@ (800e474 <sbrk_aligned+0x40>)
 800e438:	460c      	mov	r4, r1
 800e43a:	6831      	ldr	r1, [r6, #0]
 800e43c:	4605      	mov	r5, r0
 800e43e:	b911      	cbnz	r1, 800e446 <sbrk_aligned+0x12>
 800e440:	f000 f9f0 	bl	800e824 <_sbrk_r>
 800e444:	6030      	str	r0, [r6, #0]
 800e446:	4621      	mov	r1, r4
 800e448:	4628      	mov	r0, r5
 800e44a:	f000 f9eb 	bl	800e824 <_sbrk_r>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	d103      	bne.n	800e45a <sbrk_aligned+0x26>
 800e452:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e456:	4620      	mov	r0, r4
 800e458:	bd70      	pop	{r4, r5, r6, pc}
 800e45a:	1cc4      	adds	r4, r0, #3
 800e45c:	f024 0403 	bic.w	r4, r4, #3
 800e460:	42a0      	cmp	r0, r4
 800e462:	d0f8      	beq.n	800e456 <sbrk_aligned+0x22>
 800e464:	1a21      	subs	r1, r4, r0
 800e466:	4628      	mov	r0, r5
 800e468:	f000 f9dc 	bl	800e824 <_sbrk_r>
 800e46c:	3001      	adds	r0, #1
 800e46e:	d1f2      	bne.n	800e456 <sbrk_aligned+0x22>
 800e470:	e7ef      	b.n	800e452 <sbrk_aligned+0x1e>
 800e472:	bf00      	nop
 800e474:	20000dd4 	.word	0x20000dd4

0800e478 <_malloc_r>:
 800e478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e47c:	1ccd      	adds	r5, r1, #3
 800e47e:	f025 0503 	bic.w	r5, r5, #3
 800e482:	3508      	adds	r5, #8
 800e484:	2d0c      	cmp	r5, #12
 800e486:	bf38      	it	cc
 800e488:	250c      	movcc	r5, #12
 800e48a:	2d00      	cmp	r5, #0
 800e48c:	4606      	mov	r6, r0
 800e48e:	db01      	blt.n	800e494 <_malloc_r+0x1c>
 800e490:	42a9      	cmp	r1, r5
 800e492:	d904      	bls.n	800e49e <_malloc_r+0x26>
 800e494:	230c      	movs	r3, #12
 800e496:	6033      	str	r3, [r6, #0]
 800e498:	2000      	movs	r0, #0
 800e49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e49e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e574 <_malloc_r+0xfc>
 800e4a2:	f000 f869 	bl	800e578 <__malloc_lock>
 800e4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4aa:	461c      	mov	r4, r3
 800e4ac:	bb44      	cbnz	r4, 800e500 <_malloc_r+0x88>
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7ff ffbf 	bl	800e434 <sbrk_aligned>
 800e4b6:	1c43      	adds	r3, r0, #1
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	d158      	bne.n	800e56e <_malloc_r+0xf6>
 800e4bc:	f8d8 4000 	ldr.w	r4, [r8]
 800e4c0:	4627      	mov	r7, r4
 800e4c2:	2f00      	cmp	r7, #0
 800e4c4:	d143      	bne.n	800e54e <_malloc_r+0xd6>
 800e4c6:	2c00      	cmp	r4, #0
 800e4c8:	d04b      	beq.n	800e562 <_malloc_r+0xea>
 800e4ca:	6823      	ldr	r3, [r4, #0]
 800e4cc:	4639      	mov	r1, r7
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	eb04 0903 	add.w	r9, r4, r3
 800e4d4:	f000 f9a6 	bl	800e824 <_sbrk_r>
 800e4d8:	4581      	cmp	r9, r0
 800e4da:	d142      	bne.n	800e562 <_malloc_r+0xea>
 800e4dc:	6821      	ldr	r1, [r4, #0]
 800e4de:	1a6d      	subs	r5, r5, r1
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f7ff ffa6 	bl	800e434 <sbrk_aligned>
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d03a      	beq.n	800e562 <_malloc_r+0xea>
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	442b      	add	r3, r5
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e4f6:	685a      	ldr	r2, [r3, #4]
 800e4f8:	bb62      	cbnz	r2, 800e554 <_malloc_r+0xdc>
 800e4fa:	f8c8 7000 	str.w	r7, [r8]
 800e4fe:	e00f      	b.n	800e520 <_malloc_r+0xa8>
 800e500:	6822      	ldr	r2, [r4, #0]
 800e502:	1b52      	subs	r2, r2, r5
 800e504:	d420      	bmi.n	800e548 <_malloc_r+0xd0>
 800e506:	2a0b      	cmp	r2, #11
 800e508:	d917      	bls.n	800e53a <_malloc_r+0xc2>
 800e50a:	1961      	adds	r1, r4, r5
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	6025      	str	r5, [r4, #0]
 800e510:	bf18      	it	ne
 800e512:	6059      	strne	r1, [r3, #4]
 800e514:	6863      	ldr	r3, [r4, #4]
 800e516:	bf08      	it	eq
 800e518:	f8c8 1000 	streq.w	r1, [r8]
 800e51c:	5162      	str	r2, [r4, r5]
 800e51e:	604b      	str	r3, [r1, #4]
 800e520:	4630      	mov	r0, r6
 800e522:	f000 f82f 	bl	800e584 <__malloc_unlock>
 800e526:	f104 000b 	add.w	r0, r4, #11
 800e52a:	1d23      	adds	r3, r4, #4
 800e52c:	f020 0007 	bic.w	r0, r0, #7
 800e530:	1ac2      	subs	r2, r0, r3
 800e532:	bf1c      	itt	ne
 800e534:	1a1b      	subne	r3, r3, r0
 800e536:	50a3      	strne	r3, [r4, r2]
 800e538:	e7af      	b.n	800e49a <_malloc_r+0x22>
 800e53a:	6862      	ldr	r2, [r4, #4]
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	bf0c      	ite	eq
 800e540:	f8c8 2000 	streq.w	r2, [r8]
 800e544:	605a      	strne	r2, [r3, #4]
 800e546:	e7eb      	b.n	800e520 <_malloc_r+0xa8>
 800e548:	4623      	mov	r3, r4
 800e54a:	6864      	ldr	r4, [r4, #4]
 800e54c:	e7ae      	b.n	800e4ac <_malloc_r+0x34>
 800e54e:	463c      	mov	r4, r7
 800e550:	687f      	ldr	r7, [r7, #4]
 800e552:	e7b6      	b.n	800e4c2 <_malloc_r+0x4a>
 800e554:	461a      	mov	r2, r3
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	42a3      	cmp	r3, r4
 800e55a:	d1fb      	bne.n	800e554 <_malloc_r+0xdc>
 800e55c:	2300      	movs	r3, #0
 800e55e:	6053      	str	r3, [r2, #4]
 800e560:	e7de      	b.n	800e520 <_malloc_r+0xa8>
 800e562:	230c      	movs	r3, #12
 800e564:	6033      	str	r3, [r6, #0]
 800e566:	4630      	mov	r0, r6
 800e568:	f000 f80c 	bl	800e584 <__malloc_unlock>
 800e56c:	e794      	b.n	800e498 <_malloc_r+0x20>
 800e56e:	6005      	str	r5, [r0, #0]
 800e570:	e7d6      	b.n	800e520 <_malloc_r+0xa8>
 800e572:	bf00      	nop
 800e574:	20000dd8 	.word	0x20000dd8

0800e578 <__malloc_lock>:
 800e578:	4801      	ldr	r0, [pc, #4]	@ (800e580 <__malloc_lock+0x8>)
 800e57a:	f000 b98e 	b.w	800e89a <__retarget_lock_acquire_recursive>
 800e57e:	bf00      	nop
 800e580:	20000f18 	.word	0x20000f18

0800e584 <__malloc_unlock>:
 800e584:	4801      	ldr	r0, [pc, #4]	@ (800e58c <__malloc_unlock+0x8>)
 800e586:	f000 b989 	b.w	800e89c <__retarget_lock_release_recursive>
 800e58a:	bf00      	nop
 800e58c:	20000f18 	.word	0x20000f18

0800e590 <std>:
 800e590:	2300      	movs	r3, #0
 800e592:	b510      	push	{r4, lr}
 800e594:	4604      	mov	r4, r0
 800e596:	e9c0 3300 	strd	r3, r3, [r0]
 800e59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e59e:	6083      	str	r3, [r0, #8]
 800e5a0:	8181      	strh	r1, [r0, #12]
 800e5a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e5a4:	81c2      	strh	r2, [r0, #14]
 800e5a6:	6183      	str	r3, [r0, #24]
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	2208      	movs	r2, #8
 800e5ac:	305c      	adds	r0, #92	@ 0x5c
 800e5ae:	f000 f931 	bl	800e814 <memset>
 800e5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e5e8 <std+0x58>)
 800e5b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e5ec <std+0x5c>)
 800e5b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f0 <std+0x60>)
 800e5bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e5be:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f4 <std+0x64>)
 800e5c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f8 <std+0x68>)
 800e5c4:	6224      	str	r4, [r4, #32]
 800e5c6:	429c      	cmp	r4, r3
 800e5c8:	d006      	beq.n	800e5d8 <std+0x48>
 800e5ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e5ce:	4294      	cmp	r4, r2
 800e5d0:	d002      	beq.n	800e5d8 <std+0x48>
 800e5d2:	33d0      	adds	r3, #208	@ 0xd0
 800e5d4:	429c      	cmp	r4, r3
 800e5d6:	d105      	bne.n	800e5e4 <std+0x54>
 800e5d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5e0:	f000 b95a 	b.w	800e898 <__retarget_lock_init_recursive>
 800e5e4:	bd10      	pop	{r4, pc}
 800e5e6:	bf00      	nop
 800e5e8:	0800f049 	.word	0x0800f049
 800e5ec:	0800f06b 	.word	0x0800f06b
 800e5f0:	0800f0a3 	.word	0x0800f0a3
 800e5f4:	0800f0c7 	.word	0x0800f0c7
 800e5f8:	20000ddc 	.word	0x20000ddc

0800e5fc <stdio_exit_handler>:
 800e5fc:	4a02      	ldr	r2, [pc, #8]	@ (800e608 <stdio_exit_handler+0xc>)
 800e5fe:	4903      	ldr	r1, [pc, #12]	@ (800e60c <stdio_exit_handler+0x10>)
 800e600:	4803      	ldr	r0, [pc, #12]	@ (800e610 <stdio_exit_handler+0x14>)
 800e602:	f000 b869 	b.w	800e6d8 <_fwalk_sglue>
 800e606:	bf00      	nop
 800e608:	20000560 	.word	0x20000560
 800e60c:	0800eff9 	.word	0x0800eff9
 800e610:	20000570 	.word	0x20000570

0800e614 <cleanup_stdio>:
 800e614:	6841      	ldr	r1, [r0, #4]
 800e616:	4b0c      	ldr	r3, [pc, #48]	@ (800e648 <cleanup_stdio+0x34>)
 800e618:	4299      	cmp	r1, r3
 800e61a:	b510      	push	{r4, lr}
 800e61c:	4604      	mov	r4, r0
 800e61e:	d001      	beq.n	800e624 <cleanup_stdio+0x10>
 800e620:	f000 fcea 	bl	800eff8 <_fflush_r>
 800e624:	68a1      	ldr	r1, [r4, #8]
 800e626:	4b09      	ldr	r3, [pc, #36]	@ (800e64c <cleanup_stdio+0x38>)
 800e628:	4299      	cmp	r1, r3
 800e62a:	d002      	beq.n	800e632 <cleanup_stdio+0x1e>
 800e62c:	4620      	mov	r0, r4
 800e62e:	f000 fce3 	bl	800eff8 <_fflush_r>
 800e632:	68e1      	ldr	r1, [r4, #12]
 800e634:	4b06      	ldr	r3, [pc, #24]	@ (800e650 <cleanup_stdio+0x3c>)
 800e636:	4299      	cmp	r1, r3
 800e638:	d004      	beq.n	800e644 <cleanup_stdio+0x30>
 800e63a:	4620      	mov	r0, r4
 800e63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e640:	f000 bcda 	b.w	800eff8 <_fflush_r>
 800e644:	bd10      	pop	{r4, pc}
 800e646:	bf00      	nop
 800e648:	20000ddc 	.word	0x20000ddc
 800e64c:	20000e44 	.word	0x20000e44
 800e650:	20000eac 	.word	0x20000eac

0800e654 <global_stdio_init.part.0>:
 800e654:	b510      	push	{r4, lr}
 800e656:	4b0b      	ldr	r3, [pc, #44]	@ (800e684 <global_stdio_init.part.0+0x30>)
 800e658:	4c0b      	ldr	r4, [pc, #44]	@ (800e688 <global_stdio_init.part.0+0x34>)
 800e65a:	4a0c      	ldr	r2, [pc, #48]	@ (800e68c <global_stdio_init.part.0+0x38>)
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	4620      	mov	r0, r4
 800e660:	2200      	movs	r2, #0
 800e662:	2104      	movs	r1, #4
 800e664:	f7ff ff94 	bl	800e590 <std>
 800e668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e66c:	2201      	movs	r2, #1
 800e66e:	2109      	movs	r1, #9
 800e670:	f7ff ff8e 	bl	800e590 <std>
 800e674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e678:	2202      	movs	r2, #2
 800e67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e67e:	2112      	movs	r1, #18
 800e680:	f7ff bf86 	b.w	800e590 <std>
 800e684:	20000f14 	.word	0x20000f14
 800e688:	20000ddc 	.word	0x20000ddc
 800e68c:	0800e5fd 	.word	0x0800e5fd

0800e690 <__sfp_lock_acquire>:
 800e690:	4801      	ldr	r0, [pc, #4]	@ (800e698 <__sfp_lock_acquire+0x8>)
 800e692:	f000 b902 	b.w	800e89a <__retarget_lock_acquire_recursive>
 800e696:	bf00      	nop
 800e698:	20000f19 	.word	0x20000f19

0800e69c <__sfp_lock_release>:
 800e69c:	4801      	ldr	r0, [pc, #4]	@ (800e6a4 <__sfp_lock_release+0x8>)
 800e69e:	f000 b8fd 	b.w	800e89c <__retarget_lock_release_recursive>
 800e6a2:	bf00      	nop
 800e6a4:	20000f19 	.word	0x20000f19

0800e6a8 <__sinit>:
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	f7ff fff0 	bl	800e690 <__sfp_lock_acquire>
 800e6b0:	6a23      	ldr	r3, [r4, #32]
 800e6b2:	b11b      	cbz	r3, 800e6bc <__sinit+0x14>
 800e6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b8:	f7ff bff0 	b.w	800e69c <__sfp_lock_release>
 800e6bc:	4b04      	ldr	r3, [pc, #16]	@ (800e6d0 <__sinit+0x28>)
 800e6be:	6223      	str	r3, [r4, #32]
 800e6c0:	4b04      	ldr	r3, [pc, #16]	@ (800e6d4 <__sinit+0x2c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1f5      	bne.n	800e6b4 <__sinit+0xc>
 800e6c8:	f7ff ffc4 	bl	800e654 <global_stdio_init.part.0>
 800e6cc:	e7f2      	b.n	800e6b4 <__sinit+0xc>
 800e6ce:	bf00      	nop
 800e6d0:	0800e615 	.word	0x0800e615
 800e6d4:	20000f14 	.word	0x20000f14

0800e6d8 <_fwalk_sglue>:
 800e6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4607      	mov	r7, r0
 800e6de:	4688      	mov	r8, r1
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	2600      	movs	r6, #0
 800e6e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6e8:	f1b9 0901 	subs.w	r9, r9, #1
 800e6ec:	d505      	bpl.n	800e6fa <_fwalk_sglue+0x22>
 800e6ee:	6824      	ldr	r4, [r4, #0]
 800e6f0:	2c00      	cmp	r4, #0
 800e6f2:	d1f7      	bne.n	800e6e4 <_fwalk_sglue+0xc>
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fa:	89ab      	ldrh	r3, [r5, #12]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d907      	bls.n	800e710 <_fwalk_sglue+0x38>
 800e700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e704:	3301      	adds	r3, #1
 800e706:	d003      	beq.n	800e710 <_fwalk_sglue+0x38>
 800e708:	4629      	mov	r1, r5
 800e70a:	4638      	mov	r0, r7
 800e70c:	47c0      	blx	r8
 800e70e:	4306      	orrs	r6, r0
 800e710:	3568      	adds	r5, #104	@ 0x68
 800e712:	e7e9      	b.n	800e6e8 <_fwalk_sglue+0x10>

0800e714 <iprintf>:
 800e714:	b40f      	push	{r0, r1, r2, r3}
 800e716:	b507      	push	{r0, r1, r2, lr}
 800e718:	4906      	ldr	r1, [pc, #24]	@ (800e734 <iprintf+0x20>)
 800e71a:	ab04      	add	r3, sp, #16
 800e71c:	6808      	ldr	r0, [r1, #0]
 800e71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e722:	6881      	ldr	r1, [r0, #8]
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	f000 f93d 	bl	800e9a4 <_vfiprintf_r>
 800e72a:	b003      	add	sp, #12
 800e72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e730:	b004      	add	sp, #16
 800e732:	4770      	bx	lr
 800e734:	2000056c 	.word	0x2000056c

0800e738 <_puts_r>:
 800e738:	6a03      	ldr	r3, [r0, #32]
 800e73a:	b570      	push	{r4, r5, r6, lr}
 800e73c:	6884      	ldr	r4, [r0, #8]
 800e73e:	4605      	mov	r5, r0
 800e740:	460e      	mov	r6, r1
 800e742:	b90b      	cbnz	r3, 800e748 <_puts_r+0x10>
 800e744:	f7ff ffb0 	bl	800e6a8 <__sinit>
 800e748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e74a:	07db      	lsls	r3, r3, #31
 800e74c:	d405      	bmi.n	800e75a <_puts_r+0x22>
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	0598      	lsls	r0, r3, #22
 800e752:	d402      	bmi.n	800e75a <_puts_r+0x22>
 800e754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e756:	f000 f8a0 	bl	800e89a <__retarget_lock_acquire_recursive>
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	0719      	lsls	r1, r3, #28
 800e75e:	d502      	bpl.n	800e766 <_puts_r+0x2e>
 800e760:	6923      	ldr	r3, [r4, #16]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d135      	bne.n	800e7d2 <_puts_r+0x9a>
 800e766:	4621      	mov	r1, r4
 800e768:	4628      	mov	r0, r5
 800e76a:	f000 fcef 	bl	800f14c <__swsetup_r>
 800e76e:	b380      	cbz	r0, 800e7d2 <_puts_r+0x9a>
 800e770:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e776:	07da      	lsls	r2, r3, #31
 800e778:	d405      	bmi.n	800e786 <_puts_r+0x4e>
 800e77a:	89a3      	ldrh	r3, [r4, #12]
 800e77c:	059b      	lsls	r3, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_puts_r+0x4e>
 800e780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e782:	f000 f88b 	bl	800e89c <__retarget_lock_release_recursive>
 800e786:	4628      	mov	r0, r5
 800e788:	bd70      	pop	{r4, r5, r6, pc}
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	da04      	bge.n	800e798 <_puts_r+0x60>
 800e78e:	69a2      	ldr	r2, [r4, #24]
 800e790:	429a      	cmp	r2, r3
 800e792:	dc17      	bgt.n	800e7c4 <_puts_r+0x8c>
 800e794:	290a      	cmp	r1, #10
 800e796:	d015      	beq.n	800e7c4 <_puts_r+0x8c>
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	6022      	str	r2, [r4, #0]
 800e79e:	7019      	strb	r1, [r3, #0]
 800e7a0:	68a3      	ldr	r3, [r4, #8]
 800e7a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	60a3      	str	r3, [r4, #8]
 800e7aa:	2900      	cmp	r1, #0
 800e7ac:	d1ed      	bne.n	800e78a <_puts_r+0x52>
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	da11      	bge.n	800e7d6 <_puts_r+0x9e>
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	210a      	movs	r1, #10
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f000 fc89 	bl	800f0ce <__swbuf_r>
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d0d7      	beq.n	800e770 <_puts_r+0x38>
 800e7c0:	250a      	movs	r5, #10
 800e7c2:	e7d7      	b.n	800e774 <_puts_r+0x3c>
 800e7c4:	4622      	mov	r2, r4
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	f000 fc81 	bl	800f0ce <__swbuf_r>
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d1e7      	bne.n	800e7a0 <_puts_r+0x68>
 800e7d0:	e7ce      	b.n	800e770 <_puts_r+0x38>
 800e7d2:	3e01      	subs	r6, #1
 800e7d4:	e7e4      	b.n	800e7a0 <_puts_r+0x68>
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	6022      	str	r2, [r4, #0]
 800e7dc:	220a      	movs	r2, #10
 800e7de:	701a      	strb	r2, [r3, #0]
 800e7e0:	e7ee      	b.n	800e7c0 <_puts_r+0x88>
	...

0800e7e4 <puts>:
 800e7e4:	4b02      	ldr	r3, [pc, #8]	@ (800e7f0 <puts+0xc>)
 800e7e6:	4601      	mov	r1, r0
 800e7e8:	6818      	ldr	r0, [r3, #0]
 800e7ea:	f7ff bfa5 	b.w	800e738 <_puts_r>
 800e7ee:	bf00      	nop
 800e7f0:	2000056c 	.word	0x2000056c

0800e7f4 <memcmp>:
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	3901      	subs	r1, #1
 800e7f8:	4402      	add	r2, r0
 800e7fa:	4290      	cmp	r0, r2
 800e7fc:	d101      	bne.n	800e802 <memcmp+0xe>
 800e7fe:	2000      	movs	r0, #0
 800e800:	e005      	b.n	800e80e <memcmp+0x1a>
 800e802:	7803      	ldrb	r3, [r0, #0]
 800e804:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e808:	42a3      	cmp	r3, r4
 800e80a:	d001      	beq.n	800e810 <memcmp+0x1c>
 800e80c:	1b18      	subs	r0, r3, r4
 800e80e:	bd10      	pop	{r4, pc}
 800e810:	3001      	adds	r0, #1
 800e812:	e7f2      	b.n	800e7fa <memcmp+0x6>

0800e814 <memset>:
 800e814:	4402      	add	r2, r0
 800e816:	4603      	mov	r3, r0
 800e818:	4293      	cmp	r3, r2
 800e81a:	d100      	bne.n	800e81e <memset+0xa>
 800e81c:	4770      	bx	lr
 800e81e:	f803 1b01 	strb.w	r1, [r3], #1
 800e822:	e7f9      	b.n	800e818 <memset+0x4>

0800e824 <_sbrk_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4d06      	ldr	r5, [pc, #24]	@ (800e840 <_sbrk_r+0x1c>)
 800e828:	2300      	movs	r3, #0
 800e82a:	4604      	mov	r4, r0
 800e82c:	4608      	mov	r0, r1
 800e82e:	602b      	str	r3, [r5, #0]
 800e830:	f7fa fa54 	bl	8008cdc <_sbrk>
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	d102      	bne.n	800e83e <_sbrk_r+0x1a>
 800e838:	682b      	ldr	r3, [r5, #0]
 800e83a:	b103      	cbz	r3, 800e83e <_sbrk_r+0x1a>
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	20000f1c 	.word	0x20000f1c

0800e844 <__errno>:
 800e844:	4b01      	ldr	r3, [pc, #4]	@ (800e84c <__errno+0x8>)
 800e846:	6818      	ldr	r0, [r3, #0]
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	2000056c 	.word	0x2000056c

0800e850 <__libc_init_array>:
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	4d0d      	ldr	r5, [pc, #52]	@ (800e888 <__libc_init_array+0x38>)
 800e854:	4c0d      	ldr	r4, [pc, #52]	@ (800e88c <__libc_init_array+0x3c>)
 800e856:	1b64      	subs	r4, r4, r5
 800e858:	10a4      	asrs	r4, r4, #2
 800e85a:	2600      	movs	r6, #0
 800e85c:	42a6      	cmp	r6, r4
 800e85e:	d109      	bne.n	800e874 <__libc_init_array+0x24>
 800e860:	4d0b      	ldr	r5, [pc, #44]	@ (800e890 <__libc_init_array+0x40>)
 800e862:	4c0c      	ldr	r4, [pc, #48]	@ (800e894 <__libc_init_array+0x44>)
 800e864:	f000 fd92 	bl	800f38c <_init>
 800e868:	1b64      	subs	r4, r4, r5
 800e86a:	10a4      	asrs	r4, r4, #2
 800e86c:	2600      	movs	r6, #0
 800e86e:	42a6      	cmp	r6, r4
 800e870:	d105      	bne.n	800e87e <__libc_init_array+0x2e>
 800e872:	bd70      	pop	{r4, r5, r6, pc}
 800e874:	f855 3b04 	ldr.w	r3, [r5], #4
 800e878:	4798      	blx	r3
 800e87a:	3601      	adds	r6, #1
 800e87c:	e7ee      	b.n	800e85c <__libc_init_array+0xc>
 800e87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e882:	4798      	blx	r3
 800e884:	3601      	adds	r6, #1
 800e886:	e7f2      	b.n	800e86e <__libc_init_array+0x1e>
 800e888:	0800f7f8 	.word	0x0800f7f8
 800e88c:	0800f7f8 	.word	0x0800f7f8
 800e890:	0800f7f8 	.word	0x0800f7f8
 800e894:	0800f7fc 	.word	0x0800f7fc

0800e898 <__retarget_lock_init_recursive>:
 800e898:	4770      	bx	lr

0800e89a <__retarget_lock_acquire_recursive>:
 800e89a:	4770      	bx	lr

0800e89c <__retarget_lock_release_recursive>:
 800e89c:	4770      	bx	lr

0800e89e <memcpy>:
 800e89e:	440a      	add	r2, r1
 800e8a0:	4291      	cmp	r1, r2
 800e8a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e8a6:	d100      	bne.n	800e8aa <memcpy+0xc>
 800e8a8:	4770      	bx	lr
 800e8aa:	b510      	push	{r4, lr}
 800e8ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8b4:	4291      	cmp	r1, r2
 800e8b6:	d1f9      	bne.n	800e8ac <memcpy+0xe>
 800e8b8:	bd10      	pop	{r4, pc}
	...

0800e8bc <_free_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4605      	mov	r5, r0
 800e8c0:	2900      	cmp	r1, #0
 800e8c2:	d041      	beq.n	800e948 <_free_r+0x8c>
 800e8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c8:	1f0c      	subs	r4, r1, #4
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	bfb8      	it	lt
 800e8ce:	18e4      	addlt	r4, r4, r3
 800e8d0:	f7ff fe52 	bl	800e578 <__malloc_lock>
 800e8d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e94c <_free_r+0x90>)
 800e8d6:	6813      	ldr	r3, [r2, #0]
 800e8d8:	b933      	cbnz	r3, 800e8e8 <_free_r+0x2c>
 800e8da:	6063      	str	r3, [r4, #4]
 800e8dc:	6014      	str	r4, [r2, #0]
 800e8de:	4628      	mov	r0, r5
 800e8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8e4:	f7ff be4e 	b.w	800e584 <__malloc_unlock>
 800e8e8:	42a3      	cmp	r3, r4
 800e8ea:	d908      	bls.n	800e8fe <_free_r+0x42>
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	1821      	adds	r1, r4, r0
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	bf01      	itttt	eq
 800e8f4:	6819      	ldreq	r1, [r3, #0]
 800e8f6:	685b      	ldreq	r3, [r3, #4]
 800e8f8:	1809      	addeq	r1, r1, r0
 800e8fa:	6021      	streq	r1, [r4, #0]
 800e8fc:	e7ed      	b.n	800e8da <_free_r+0x1e>
 800e8fe:	461a      	mov	r2, r3
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	b10b      	cbz	r3, 800e908 <_free_r+0x4c>
 800e904:	42a3      	cmp	r3, r4
 800e906:	d9fa      	bls.n	800e8fe <_free_r+0x42>
 800e908:	6811      	ldr	r1, [r2, #0]
 800e90a:	1850      	adds	r0, r2, r1
 800e90c:	42a0      	cmp	r0, r4
 800e90e:	d10b      	bne.n	800e928 <_free_r+0x6c>
 800e910:	6820      	ldr	r0, [r4, #0]
 800e912:	4401      	add	r1, r0
 800e914:	1850      	adds	r0, r2, r1
 800e916:	4283      	cmp	r3, r0
 800e918:	6011      	str	r1, [r2, #0]
 800e91a:	d1e0      	bne.n	800e8de <_free_r+0x22>
 800e91c:	6818      	ldr	r0, [r3, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	6053      	str	r3, [r2, #4]
 800e922:	4408      	add	r0, r1
 800e924:	6010      	str	r0, [r2, #0]
 800e926:	e7da      	b.n	800e8de <_free_r+0x22>
 800e928:	d902      	bls.n	800e930 <_free_r+0x74>
 800e92a:	230c      	movs	r3, #12
 800e92c:	602b      	str	r3, [r5, #0]
 800e92e:	e7d6      	b.n	800e8de <_free_r+0x22>
 800e930:	6820      	ldr	r0, [r4, #0]
 800e932:	1821      	adds	r1, r4, r0
 800e934:	428b      	cmp	r3, r1
 800e936:	bf04      	itt	eq
 800e938:	6819      	ldreq	r1, [r3, #0]
 800e93a:	685b      	ldreq	r3, [r3, #4]
 800e93c:	6063      	str	r3, [r4, #4]
 800e93e:	bf04      	itt	eq
 800e940:	1809      	addeq	r1, r1, r0
 800e942:	6021      	streq	r1, [r4, #0]
 800e944:	6054      	str	r4, [r2, #4]
 800e946:	e7ca      	b.n	800e8de <_free_r+0x22>
 800e948:	bd38      	pop	{r3, r4, r5, pc}
 800e94a:	bf00      	nop
 800e94c:	20000dd8 	.word	0x20000dd8

0800e950 <__sfputc_r>:
 800e950:	6893      	ldr	r3, [r2, #8]
 800e952:	3b01      	subs	r3, #1
 800e954:	2b00      	cmp	r3, #0
 800e956:	b410      	push	{r4}
 800e958:	6093      	str	r3, [r2, #8]
 800e95a:	da08      	bge.n	800e96e <__sfputc_r+0x1e>
 800e95c:	6994      	ldr	r4, [r2, #24]
 800e95e:	42a3      	cmp	r3, r4
 800e960:	db01      	blt.n	800e966 <__sfputc_r+0x16>
 800e962:	290a      	cmp	r1, #10
 800e964:	d103      	bne.n	800e96e <__sfputc_r+0x1e>
 800e966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e96a:	f000 bbb0 	b.w	800f0ce <__swbuf_r>
 800e96e:	6813      	ldr	r3, [r2, #0]
 800e970:	1c58      	adds	r0, r3, #1
 800e972:	6010      	str	r0, [r2, #0]
 800e974:	7019      	strb	r1, [r3, #0]
 800e976:	4608      	mov	r0, r1
 800e978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <__sfputs_r>:
 800e97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	4614      	mov	r4, r2
 800e986:	18d5      	adds	r5, r2, r3
 800e988:	42ac      	cmp	r4, r5
 800e98a:	d101      	bne.n	800e990 <__sfputs_r+0x12>
 800e98c:	2000      	movs	r0, #0
 800e98e:	e007      	b.n	800e9a0 <__sfputs_r+0x22>
 800e990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e994:	463a      	mov	r2, r7
 800e996:	4630      	mov	r0, r6
 800e998:	f7ff ffda 	bl	800e950 <__sfputc_r>
 800e99c:	1c43      	adds	r3, r0, #1
 800e99e:	d1f3      	bne.n	800e988 <__sfputs_r+0xa>
 800e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9a4 <_vfiprintf_r>:
 800e9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a8:	460d      	mov	r5, r1
 800e9aa:	b09d      	sub	sp, #116	@ 0x74
 800e9ac:	4614      	mov	r4, r2
 800e9ae:	4698      	mov	r8, r3
 800e9b0:	4606      	mov	r6, r0
 800e9b2:	b118      	cbz	r0, 800e9bc <_vfiprintf_r+0x18>
 800e9b4:	6a03      	ldr	r3, [r0, #32]
 800e9b6:	b90b      	cbnz	r3, 800e9bc <_vfiprintf_r+0x18>
 800e9b8:	f7ff fe76 	bl	800e6a8 <__sinit>
 800e9bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9be:	07d9      	lsls	r1, r3, #31
 800e9c0:	d405      	bmi.n	800e9ce <_vfiprintf_r+0x2a>
 800e9c2:	89ab      	ldrh	r3, [r5, #12]
 800e9c4:	059a      	lsls	r2, r3, #22
 800e9c6:	d402      	bmi.n	800e9ce <_vfiprintf_r+0x2a>
 800e9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9ca:	f7ff ff66 	bl	800e89a <__retarget_lock_acquire_recursive>
 800e9ce:	89ab      	ldrh	r3, [r5, #12]
 800e9d0:	071b      	lsls	r3, r3, #28
 800e9d2:	d501      	bpl.n	800e9d8 <_vfiprintf_r+0x34>
 800e9d4:	692b      	ldr	r3, [r5, #16]
 800e9d6:	b99b      	cbnz	r3, 800ea00 <_vfiprintf_r+0x5c>
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f000 fbb6 	bl	800f14c <__swsetup_r>
 800e9e0:	b170      	cbz	r0, 800ea00 <_vfiprintf_r+0x5c>
 800e9e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9e4:	07dc      	lsls	r4, r3, #31
 800e9e6:	d504      	bpl.n	800e9f2 <_vfiprintf_r+0x4e>
 800e9e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9ec:	b01d      	add	sp, #116	@ 0x74
 800e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f2:	89ab      	ldrh	r3, [r5, #12]
 800e9f4:	0598      	lsls	r0, r3, #22
 800e9f6:	d4f7      	bmi.n	800e9e8 <_vfiprintf_r+0x44>
 800e9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9fa:	f7ff ff4f 	bl	800e89c <__retarget_lock_release_recursive>
 800e9fe:	e7f3      	b.n	800e9e8 <_vfiprintf_r+0x44>
 800ea00:	2300      	movs	r3, #0
 800ea02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea04:	2320      	movs	r3, #32
 800ea06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea0e:	2330      	movs	r3, #48	@ 0x30
 800ea10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebc0 <_vfiprintf_r+0x21c>
 800ea14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea18:	f04f 0901 	mov.w	r9, #1
 800ea1c:	4623      	mov	r3, r4
 800ea1e:	469a      	mov	sl, r3
 800ea20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea24:	b10a      	cbz	r2, 800ea2a <_vfiprintf_r+0x86>
 800ea26:	2a25      	cmp	r2, #37	@ 0x25
 800ea28:	d1f9      	bne.n	800ea1e <_vfiprintf_r+0x7a>
 800ea2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea2e:	d00b      	beq.n	800ea48 <_vfiprintf_r+0xa4>
 800ea30:	465b      	mov	r3, fp
 800ea32:	4622      	mov	r2, r4
 800ea34:	4629      	mov	r1, r5
 800ea36:	4630      	mov	r0, r6
 800ea38:	f7ff ffa1 	bl	800e97e <__sfputs_r>
 800ea3c:	3001      	adds	r0, #1
 800ea3e:	f000 80a7 	beq.w	800eb90 <_vfiprintf_r+0x1ec>
 800ea42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea44:	445a      	add	r2, fp
 800ea46:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea48:	f89a 3000 	ldrb.w	r3, [sl]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 809f 	beq.w	800eb90 <_vfiprintf_r+0x1ec>
 800ea52:	2300      	movs	r3, #0
 800ea54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea5c:	f10a 0a01 	add.w	sl, sl, #1
 800ea60:	9304      	str	r3, [sp, #16]
 800ea62:	9307      	str	r3, [sp, #28]
 800ea64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea68:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea6a:	4654      	mov	r4, sl
 800ea6c:	2205      	movs	r2, #5
 800ea6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea72:	4853      	ldr	r0, [pc, #332]	@ (800ebc0 <_vfiprintf_r+0x21c>)
 800ea74:	f7f1 fbb4 	bl	80001e0 <memchr>
 800ea78:	9a04      	ldr	r2, [sp, #16]
 800ea7a:	b9d8      	cbnz	r0, 800eab4 <_vfiprintf_r+0x110>
 800ea7c:	06d1      	lsls	r1, r2, #27
 800ea7e:	bf44      	itt	mi
 800ea80:	2320      	movmi	r3, #32
 800ea82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea86:	0713      	lsls	r3, r2, #28
 800ea88:	bf44      	itt	mi
 800ea8a:	232b      	movmi	r3, #43	@ 0x2b
 800ea8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea90:	f89a 3000 	ldrb.w	r3, [sl]
 800ea94:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea96:	d015      	beq.n	800eac4 <_vfiprintf_r+0x120>
 800ea98:	9a07      	ldr	r2, [sp, #28]
 800ea9a:	4654      	mov	r4, sl
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f04f 0c0a 	mov.w	ip, #10
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaa8:	3b30      	subs	r3, #48	@ 0x30
 800eaaa:	2b09      	cmp	r3, #9
 800eaac:	d94b      	bls.n	800eb46 <_vfiprintf_r+0x1a2>
 800eaae:	b1b0      	cbz	r0, 800eade <_vfiprintf_r+0x13a>
 800eab0:	9207      	str	r2, [sp, #28]
 800eab2:	e014      	b.n	800eade <_vfiprintf_r+0x13a>
 800eab4:	eba0 0308 	sub.w	r3, r0, r8
 800eab8:	fa09 f303 	lsl.w	r3, r9, r3
 800eabc:	4313      	orrs	r3, r2
 800eabe:	9304      	str	r3, [sp, #16]
 800eac0:	46a2      	mov	sl, r4
 800eac2:	e7d2      	b.n	800ea6a <_vfiprintf_r+0xc6>
 800eac4:	9b03      	ldr	r3, [sp, #12]
 800eac6:	1d19      	adds	r1, r3, #4
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	9103      	str	r1, [sp, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	bfbb      	ittet	lt
 800ead0:	425b      	neglt	r3, r3
 800ead2:	f042 0202 	orrlt.w	r2, r2, #2
 800ead6:	9307      	strge	r3, [sp, #28]
 800ead8:	9307      	strlt	r3, [sp, #28]
 800eada:	bfb8      	it	lt
 800eadc:	9204      	strlt	r2, [sp, #16]
 800eade:	7823      	ldrb	r3, [r4, #0]
 800eae0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eae2:	d10a      	bne.n	800eafa <_vfiprintf_r+0x156>
 800eae4:	7863      	ldrb	r3, [r4, #1]
 800eae6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eae8:	d132      	bne.n	800eb50 <_vfiprintf_r+0x1ac>
 800eaea:	9b03      	ldr	r3, [sp, #12]
 800eaec:	1d1a      	adds	r2, r3, #4
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	9203      	str	r2, [sp, #12]
 800eaf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eaf6:	3402      	adds	r4, #2
 800eaf8:	9305      	str	r3, [sp, #20]
 800eafa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebd0 <_vfiprintf_r+0x22c>
 800eafe:	7821      	ldrb	r1, [r4, #0]
 800eb00:	2203      	movs	r2, #3
 800eb02:	4650      	mov	r0, sl
 800eb04:	f7f1 fb6c 	bl	80001e0 <memchr>
 800eb08:	b138      	cbz	r0, 800eb1a <_vfiprintf_r+0x176>
 800eb0a:	9b04      	ldr	r3, [sp, #16]
 800eb0c:	eba0 000a 	sub.w	r0, r0, sl
 800eb10:	2240      	movs	r2, #64	@ 0x40
 800eb12:	4082      	lsls	r2, r0
 800eb14:	4313      	orrs	r3, r2
 800eb16:	3401      	adds	r4, #1
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb1e:	4829      	ldr	r0, [pc, #164]	@ (800ebc4 <_vfiprintf_r+0x220>)
 800eb20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb24:	2206      	movs	r2, #6
 800eb26:	f7f1 fb5b 	bl	80001e0 <memchr>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d03f      	beq.n	800ebae <_vfiprintf_r+0x20a>
 800eb2e:	4b26      	ldr	r3, [pc, #152]	@ (800ebc8 <_vfiprintf_r+0x224>)
 800eb30:	bb1b      	cbnz	r3, 800eb7a <_vfiprintf_r+0x1d6>
 800eb32:	9b03      	ldr	r3, [sp, #12]
 800eb34:	3307      	adds	r3, #7
 800eb36:	f023 0307 	bic.w	r3, r3, #7
 800eb3a:	3308      	adds	r3, #8
 800eb3c:	9303      	str	r3, [sp, #12]
 800eb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb40:	443b      	add	r3, r7
 800eb42:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb44:	e76a      	b.n	800ea1c <_vfiprintf_r+0x78>
 800eb46:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb4a:	460c      	mov	r4, r1
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	e7a8      	b.n	800eaa2 <_vfiprintf_r+0xfe>
 800eb50:	2300      	movs	r3, #0
 800eb52:	3401      	adds	r4, #1
 800eb54:	9305      	str	r3, [sp, #20]
 800eb56:	4619      	mov	r1, r3
 800eb58:	f04f 0c0a 	mov.w	ip, #10
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb62:	3a30      	subs	r2, #48	@ 0x30
 800eb64:	2a09      	cmp	r2, #9
 800eb66:	d903      	bls.n	800eb70 <_vfiprintf_r+0x1cc>
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d0c6      	beq.n	800eafa <_vfiprintf_r+0x156>
 800eb6c:	9105      	str	r1, [sp, #20]
 800eb6e:	e7c4      	b.n	800eafa <_vfiprintf_r+0x156>
 800eb70:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb74:	4604      	mov	r4, r0
 800eb76:	2301      	movs	r3, #1
 800eb78:	e7f0      	b.n	800eb5c <_vfiprintf_r+0x1b8>
 800eb7a:	ab03      	add	r3, sp, #12
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	462a      	mov	r2, r5
 800eb80:	4b12      	ldr	r3, [pc, #72]	@ (800ebcc <_vfiprintf_r+0x228>)
 800eb82:	a904      	add	r1, sp, #16
 800eb84:	4630      	mov	r0, r6
 800eb86:	f3af 8000 	nop.w
 800eb8a:	4607      	mov	r7, r0
 800eb8c:	1c78      	adds	r0, r7, #1
 800eb8e:	d1d6      	bne.n	800eb3e <_vfiprintf_r+0x19a>
 800eb90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb92:	07d9      	lsls	r1, r3, #31
 800eb94:	d405      	bmi.n	800eba2 <_vfiprintf_r+0x1fe>
 800eb96:	89ab      	ldrh	r3, [r5, #12]
 800eb98:	059a      	lsls	r2, r3, #22
 800eb9a:	d402      	bmi.n	800eba2 <_vfiprintf_r+0x1fe>
 800eb9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb9e:	f7ff fe7d 	bl	800e89c <__retarget_lock_release_recursive>
 800eba2:	89ab      	ldrh	r3, [r5, #12]
 800eba4:	065b      	lsls	r3, r3, #25
 800eba6:	f53f af1f 	bmi.w	800e9e8 <_vfiprintf_r+0x44>
 800ebaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebac:	e71e      	b.n	800e9ec <_vfiprintf_r+0x48>
 800ebae:	ab03      	add	r3, sp, #12
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	462a      	mov	r2, r5
 800ebb4:	4b05      	ldr	r3, [pc, #20]	@ (800ebcc <_vfiprintf_r+0x228>)
 800ebb6:	a904      	add	r1, sp, #16
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f000 f879 	bl	800ecb0 <_printf_i>
 800ebbe:	e7e4      	b.n	800eb8a <_vfiprintf_r+0x1e6>
 800ebc0:	0800f7bc 	.word	0x0800f7bc
 800ebc4:	0800f7c6 	.word	0x0800f7c6
 800ebc8:	00000000 	.word	0x00000000
 800ebcc:	0800e97f 	.word	0x0800e97f
 800ebd0:	0800f7c2 	.word	0x0800f7c2

0800ebd4 <_printf_common>:
 800ebd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	4616      	mov	r6, r2
 800ebda:	4698      	mov	r8, r3
 800ebdc:	688a      	ldr	r2, [r1, #8]
 800ebde:	690b      	ldr	r3, [r1, #16]
 800ebe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	bfb8      	it	lt
 800ebe8:	4613      	movlt	r3, r2
 800ebea:	6033      	str	r3, [r6, #0]
 800ebec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ebf0:	4607      	mov	r7, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	b10a      	cbz	r2, 800ebfa <_printf_common+0x26>
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	6033      	str	r3, [r6, #0]
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	0699      	lsls	r1, r3, #26
 800ebfe:	bf42      	ittt	mi
 800ec00:	6833      	ldrmi	r3, [r6, #0]
 800ec02:	3302      	addmi	r3, #2
 800ec04:	6033      	strmi	r3, [r6, #0]
 800ec06:	6825      	ldr	r5, [r4, #0]
 800ec08:	f015 0506 	ands.w	r5, r5, #6
 800ec0c:	d106      	bne.n	800ec1c <_printf_common+0x48>
 800ec0e:	f104 0a19 	add.w	sl, r4, #25
 800ec12:	68e3      	ldr	r3, [r4, #12]
 800ec14:	6832      	ldr	r2, [r6, #0]
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	42ab      	cmp	r3, r5
 800ec1a:	dc26      	bgt.n	800ec6a <_printf_common+0x96>
 800ec1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec20:	6822      	ldr	r2, [r4, #0]
 800ec22:	3b00      	subs	r3, #0
 800ec24:	bf18      	it	ne
 800ec26:	2301      	movne	r3, #1
 800ec28:	0692      	lsls	r2, r2, #26
 800ec2a:	d42b      	bmi.n	800ec84 <_printf_common+0xb0>
 800ec2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec30:	4641      	mov	r1, r8
 800ec32:	4638      	mov	r0, r7
 800ec34:	47c8      	blx	r9
 800ec36:	3001      	adds	r0, #1
 800ec38:	d01e      	beq.n	800ec78 <_printf_common+0xa4>
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	6922      	ldr	r2, [r4, #16]
 800ec3e:	f003 0306 	and.w	r3, r3, #6
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	bf02      	ittt	eq
 800ec46:	68e5      	ldreq	r5, [r4, #12]
 800ec48:	6833      	ldreq	r3, [r6, #0]
 800ec4a:	1aed      	subeq	r5, r5, r3
 800ec4c:	68a3      	ldr	r3, [r4, #8]
 800ec4e:	bf0c      	ite	eq
 800ec50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec54:	2500      	movne	r5, #0
 800ec56:	4293      	cmp	r3, r2
 800ec58:	bfc4      	itt	gt
 800ec5a:	1a9b      	subgt	r3, r3, r2
 800ec5c:	18ed      	addgt	r5, r5, r3
 800ec5e:	2600      	movs	r6, #0
 800ec60:	341a      	adds	r4, #26
 800ec62:	42b5      	cmp	r5, r6
 800ec64:	d11a      	bne.n	800ec9c <_printf_common+0xc8>
 800ec66:	2000      	movs	r0, #0
 800ec68:	e008      	b.n	800ec7c <_printf_common+0xa8>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	4652      	mov	r2, sl
 800ec6e:	4641      	mov	r1, r8
 800ec70:	4638      	mov	r0, r7
 800ec72:	47c8      	blx	r9
 800ec74:	3001      	adds	r0, #1
 800ec76:	d103      	bne.n	800ec80 <_printf_common+0xac>
 800ec78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec80:	3501      	adds	r5, #1
 800ec82:	e7c6      	b.n	800ec12 <_printf_common+0x3e>
 800ec84:	18e1      	adds	r1, r4, r3
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	2030      	movs	r0, #48	@ 0x30
 800ec8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec8e:	4422      	add	r2, r4
 800ec90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec98:	3302      	adds	r3, #2
 800ec9a:	e7c7      	b.n	800ec2c <_printf_common+0x58>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4622      	mov	r2, r4
 800eca0:	4641      	mov	r1, r8
 800eca2:	4638      	mov	r0, r7
 800eca4:	47c8      	blx	r9
 800eca6:	3001      	adds	r0, #1
 800eca8:	d0e6      	beq.n	800ec78 <_printf_common+0xa4>
 800ecaa:	3601      	adds	r6, #1
 800ecac:	e7d9      	b.n	800ec62 <_printf_common+0x8e>
	...

0800ecb0 <_printf_i>:
 800ecb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb4:	7e0f      	ldrb	r7, [r1, #24]
 800ecb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ecb8:	2f78      	cmp	r7, #120	@ 0x78
 800ecba:	4691      	mov	r9, r2
 800ecbc:	4680      	mov	r8, r0
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	469a      	mov	sl, r3
 800ecc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ecc6:	d807      	bhi.n	800ecd8 <_printf_i+0x28>
 800ecc8:	2f62      	cmp	r7, #98	@ 0x62
 800ecca:	d80a      	bhi.n	800ece2 <_printf_i+0x32>
 800eccc:	2f00      	cmp	r7, #0
 800ecce:	f000 80d2 	beq.w	800ee76 <_printf_i+0x1c6>
 800ecd2:	2f58      	cmp	r7, #88	@ 0x58
 800ecd4:	f000 80b9 	beq.w	800ee4a <_printf_i+0x19a>
 800ecd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ece0:	e03a      	b.n	800ed58 <_printf_i+0xa8>
 800ece2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ece6:	2b15      	cmp	r3, #21
 800ece8:	d8f6      	bhi.n	800ecd8 <_printf_i+0x28>
 800ecea:	a101      	add	r1, pc, #4	@ (adr r1, 800ecf0 <_printf_i+0x40>)
 800ecec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecf0:	0800ed49 	.word	0x0800ed49
 800ecf4:	0800ed5d 	.word	0x0800ed5d
 800ecf8:	0800ecd9 	.word	0x0800ecd9
 800ecfc:	0800ecd9 	.word	0x0800ecd9
 800ed00:	0800ecd9 	.word	0x0800ecd9
 800ed04:	0800ecd9 	.word	0x0800ecd9
 800ed08:	0800ed5d 	.word	0x0800ed5d
 800ed0c:	0800ecd9 	.word	0x0800ecd9
 800ed10:	0800ecd9 	.word	0x0800ecd9
 800ed14:	0800ecd9 	.word	0x0800ecd9
 800ed18:	0800ecd9 	.word	0x0800ecd9
 800ed1c:	0800ee5d 	.word	0x0800ee5d
 800ed20:	0800ed87 	.word	0x0800ed87
 800ed24:	0800ee17 	.word	0x0800ee17
 800ed28:	0800ecd9 	.word	0x0800ecd9
 800ed2c:	0800ecd9 	.word	0x0800ecd9
 800ed30:	0800ee7f 	.word	0x0800ee7f
 800ed34:	0800ecd9 	.word	0x0800ecd9
 800ed38:	0800ed87 	.word	0x0800ed87
 800ed3c:	0800ecd9 	.word	0x0800ecd9
 800ed40:	0800ecd9 	.word	0x0800ecd9
 800ed44:	0800ee1f 	.word	0x0800ee1f
 800ed48:	6833      	ldr	r3, [r6, #0]
 800ed4a:	1d1a      	adds	r2, r3, #4
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	6032      	str	r2, [r6, #0]
 800ed50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e09d      	b.n	800ee98 <_printf_i+0x1e8>
 800ed5c:	6833      	ldr	r3, [r6, #0]
 800ed5e:	6820      	ldr	r0, [r4, #0]
 800ed60:	1d19      	adds	r1, r3, #4
 800ed62:	6031      	str	r1, [r6, #0]
 800ed64:	0606      	lsls	r6, r0, #24
 800ed66:	d501      	bpl.n	800ed6c <_printf_i+0xbc>
 800ed68:	681d      	ldr	r5, [r3, #0]
 800ed6a:	e003      	b.n	800ed74 <_printf_i+0xc4>
 800ed6c:	0645      	lsls	r5, r0, #25
 800ed6e:	d5fb      	bpl.n	800ed68 <_printf_i+0xb8>
 800ed70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed74:	2d00      	cmp	r5, #0
 800ed76:	da03      	bge.n	800ed80 <_printf_i+0xd0>
 800ed78:	232d      	movs	r3, #45	@ 0x2d
 800ed7a:	426d      	negs	r5, r5
 800ed7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed80:	4859      	ldr	r0, [pc, #356]	@ (800eee8 <_printf_i+0x238>)
 800ed82:	230a      	movs	r3, #10
 800ed84:	e011      	b.n	800edaa <_printf_i+0xfa>
 800ed86:	6821      	ldr	r1, [r4, #0]
 800ed88:	6833      	ldr	r3, [r6, #0]
 800ed8a:	0608      	lsls	r0, r1, #24
 800ed8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed90:	d402      	bmi.n	800ed98 <_printf_i+0xe8>
 800ed92:	0649      	lsls	r1, r1, #25
 800ed94:	bf48      	it	mi
 800ed96:	b2ad      	uxthmi	r5, r5
 800ed98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed9a:	4853      	ldr	r0, [pc, #332]	@ (800eee8 <_printf_i+0x238>)
 800ed9c:	6033      	str	r3, [r6, #0]
 800ed9e:	bf14      	ite	ne
 800eda0:	230a      	movne	r3, #10
 800eda2:	2308      	moveq	r3, #8
 800eda4:	2100      	movs	r1, #0
 800eda6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800edaa:	6866      	ldr	r6, [r4, #4]
 800edac:	60a6      	str	r6, [r4, #8]
 800edae:	2e00      	cmp	r6, #0
 800edb0:	bfa2      	ittt	ge
 800edb2:	6821      	ldrge	r1, [r4, #0]
 800edb4:	f021 0104 	bicge.w	r1, r1, #4
 800edb8:	6021      	strge	r1, [r4, #0]
 800edba:	b90d      	cbnz	r5, 800edc0 <_printf_i+0x110>
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	d04b      	beq.n	800ee58 <_printf_i+0x1a8>
 800edc0:	4616      	mov	r6, r2
 800edc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800edc6:	fb03 5711 	mls	r7, r3, r1, r5
 800edca:	5dc7      	ldrb	r7, [r0, r7]
 800edcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edd0:	462f      	mov	r7, r5
 800edd2:	42bb      	cmp	r3, r7
 800edd4:	460d      	mov	r5, r1
 800edd6:	d9f4      	bls.n	800edc2 <_printf_i+0x112>
 800edd8:	2b08      	cmp	r3, #8
 800edda:	d10b      	bne.n	800edf4 <_printf_i+0x144>
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	07df      	lsls	r7, r3, #31
 800ede0:	d508      	bpl.n	800edf4 <_printf_i+0x144>
 800ede2:	6923      	ldr	r3, [r4, #16]
 800ede4:	6861      	ldr	r1, [r4, #4]
 800ede6:	4299      	cmp	r1, r3
 800ede8:	bfde      	ittt	le
 800edea:	2330      	movle	r3, #48	@ 0x30
 800edec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edf0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800edf4:	1b92      	subs	r2, r2, r6
 800edf6:	6122      	str	r2, [r4, #16]
 800edf8:	f8cd a000 	str.w	sl, [sp]
 800edfc:	464b      	mov	r3, r9
 800edfe:	aa03      	add	r2, sp, #12
 800ee00:	4621      	mov	r1, r4
 800ee02:	4640      	mov	r0, r8
 800ee04:	f7ff fee6 	bl	800ebd4 <_printf_common>
 800ee08:	3001      	adds	r0, #1
 800ee0a:	d14a      	bne.n	800eea2 <_printf_i+0x1f2>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee10:	b004      	add	sp, #16
 800ee12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee16:	6823      	ldr	r3, [r4, #0]
 800ee18:	f043 0320 	orr.w	r3, r3, #32
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	4833      	ldr	r0, [pc, #204]	@ (800eeec <_printf_i+0x23c>)
 800ee20:	2778      	movs	r7, #120	@ 0x78
 800ee22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee26:	6823      	ldr	r3, [r4, #0]
 800ee28:	6831      	ldr	r1, [r6, #0]
 800ee2a:	061f      	lsls	r7, r3, #24
 800ee2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee30:	d402      	bmi.n	800ee38 <_printf_i+0x188>
 800ee32:	065f      	lsls	r7, r3, #25
 800ee34:	bf48      	it	mi
 800ee36:	b2ad      	uxthmi	r5, r5
 800ee38:	6031      	str	r1, [r6, #0]
 800ee3a:	07d9      	lsls	r1, r3, #31
 800ee3c:	bf44      	itt	mi
 800ee3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ee42:	6023      	strmi	r3, [r4, #0]
 800ee44:	b11d      	cbz	r5, 800ee4e <_printf_i+0x19e>
 800ee46:	2310      	movs	r3, #16
 800ee48:	e7ac      	b.n	800eda4 <_printf_i+0xf4>
 800ee4a:	4827      	ldr	r0, [pc, #156]	@ (800eee8 <_printf_i+0x238>)
 800ee4c:	e7e9      	b.n	800ee22 <_printf_i+0x172>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	f023 0320 	bic.w	r3, r3, #32
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	e7f6      	b.n	800ee46 <_printf_i+0x196>
 800ee58:	4616      	mov	r6, r2
 800ee5a:	e7bd      	b.n	800edd8 <_printf_i+0x128>
 800ee5c:	6833      	ldr	r3, [r6, #0]
 800ee5e:	6825      	ldr	r5, [r4, #0]
 800ee60:	6961      	ldr	r1, [r4, #20]
 800ee62:	1d18      	adds	r0, r3, #4
 800ee64:	6030      	str	r0, [r6, #0]
 800ee66:	062e      	lsls	r6, r5, #24
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	d501      	bpl.n	800ee70 <_printf_i+0x1c0>
 800ee6c:	6019      	str	r1, [r3, #0]
 800ee6e:	e002      	b.n	800ee76 <_printf_i+0x1c6>
 800ee70:	0668      	lsls	r0, r5, #25
 800ee72:	d5fb      	bpl.n	800ee6c <_printf_i+0x1bc>
 800ee74:	8019      	strh	r1, [r3, #0]
 800ee76:	2300      	movs	r3, #0
 800ee78:	6123      	str	r3, [r4, #16]
 800ee7a:	4616      	mov	r6, r2
 800ee7c:	e7bc      	b.n	800edf8 <_printf_i+0x148>
 800ee7e:	6833      	ldr	r3, [r6, #0]
 800ee80:	1d1a      	adds	r2, r3, #4
 800ee82:	6032      	str	r2, [r6, #0]
 800ee84:	681e      	ldr	r6, [r3, #0]
 800ee86:	6862      	ldr	r2, [r4, #4]
 800ee88:	2100      	movs	r1, #0
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7f1 f9a8 	bl	80001e0 <memchr>
 800ee90:	b108      	cbz	r0, 800ee96 <_printf_i+0x1e6>
 800ee92:	1b80      	subs	r0, r0, r6
 800ee94:	6060      	str	r0, [r4, #4]
 800ee96:	6863      	ldr	r3, [r4, #4]
 800ee98:	6123      	str	r3, [r4, #16]
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eea0:	e7aa      	b.n	800edf8 <_printf_i+0x148>
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	4632      	mov	r2, r6
 800eea6:	4649      	mov	r1, r9
 800eea8:	4640      	mov	r0, r8
 800eeaa:	47d0      	blx	sl
 800eeac:	3001      	adds	r0, #1
 800eeae:	d0ad      	beq.n	800ee0c <_printf_i+0x15c>
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	079b      	lsls	r3, r3, #30
 800eeb4:	d413      	bmi.n	800eede <_printf_i+0x22e>
 800eeb6:	68e0      	ldr	r0, [r4, #12]
 800eeb8:	9b03      	ldr	r3, [sp, #12]
 800eeba:	4298      	cmp	r0, r3
 800eebc:	bfb8      	it	lt
 800eebe:	4618      	movlt	r0, r3
 800eec0:	e7a6      	b.n	800ee10 <_printf_i+0x160>
 800eec2:	2301      	movs	r3, #1
 800eec4:	4632      	mov	r2, r6
 800eec6:	4649      	mov	r1, r9
 800eec8:	4640      	mov	r0, r8
 800eeca:	47d0      	blx	sl
 800eecc:	3001      	adds	r0, #1
 800eece:	d09d      	beq.n	800ee0c <_printf_i+0x15c>
 800eed0:	3501      	adds	r5, #1
 800eed2:	68e3      	ldr	r3, [r4, #12]
 800eed4:	9903      	ldr	r1, [sp, #12]
 800eed6:	1a5b      	subs	r3, r3, r1
 800eed8:	42ab      	cmp	r3, r5
 800eeda:	dcf2      	bgt.n	800eec2 <_printf_i+0x212>
 800eedc:	e7eb      	b.n	800eeb6 <_printf_i+0x206>
 800eede:	2500      	movs	r5, #0
 800eee0:	f104 0619 	add.w	r6, r4, #25
 800eee4:	e7f5      	b.n	800eed2 <_printf_i+0x222>
 800eee6:	bf00      	nop
 800eee8:	0800f7cd 	.word	0x0800f7cd
 800eeec:	0800f7de 	.word	0x0800f7de

0800eef0 <__sflush_r>:
 800eef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef8:	0716      	lsls	r6, r2, #28
 800eefa:	4605      	mov	r5, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	d454      	bmi.n	800efaa <__sflush_r+0xba>
 800ef00:	684b      	ldr	r3, [r1, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dc02      	bgt.n	800ef0c <__sflush_r+0x1c>
 800ef06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	dd48      	ble.n	800ef9e <__sflush_r+0xae>
 800ef0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef0e:	2e00      	cmp	r6, #0
 800ef10:	d045      	beq.n	800ef9e <__sflush_r+0xae>
 800ef12:	2300      	movs	r3, #0
 800ef14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef18:	682f      	ldr	r7, [r5, #0]
 800ef1a:	6a21      	ldr	r1, [r4, #32]
 800ef1c:	602b      	str	r3, [r5, #0]
 800ef1e:	d030      	beq.n	800ef82 <__sflush_r+0x92>
 800ef20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	0759      	lsls	r1, r3, #29
 800ef26:	d505      	bpl.n	800ef34 <__sflush_r+0x44>
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef2e:	b10b      	cbz	r3, 800ef34 <__sflush_r+0x44>
 800ef30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef32:	1ad2      	subs	r2, r2, r3
 800ef34:	2300      	movs	r3, #0
 800ef36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef38:	6a21      	ldr	r1, [r4, #32]
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	47b0      	blx	r6
 800ef3e:	1c43      	adds	r3, r0, #1
 800ef40:	89a3      	ldrh	r3, [r4, #12]
 800ef42:	d106      	bne.n	800ef52 <__sflush_r+0x62>
 800ef44:	6829      	ldr	r1, [r5, #0]
 800ef46:	291d      	cmp	r1, #29
 800ef48:	d82b      	bhi.n	800efa2 <__sflush_r+0xb2>
 800ef4a:	4a2a      	ldr	r2, [pc, #168]	@ (800eff4 <__sflush_r+0x104>)
 800ef4c:	410a      	asrs	r2, r1
 800ef4e:	07d6      	lsls	r6, r2, #31
 800ef50:	d427      	bmi.n	800efa2 <__sflush_r+0xb2>
 800ef52:	2200      	movs	r2, #0
 800ef54:	6062      	str	r2, [r4, #4]
 800ef56:	04d9      	lsls	r1, r3, #19
 800ef58:	6922      	ldr	r2, [r4, #16]
 800ef5a:	6022      	str	r2, [r4, #0]
 800ef5c:	d504      	bpl.n	800ef68 <__sflush_r+0x78>
 800ef5e:	1c42      	adds	r2, r0, #1
 800ef60:	d101      	bne.n	800ef66 <__sflush_r+0x76>
 800ef62:	682b      	ldr	r3, [r5, #0]
 800ef64:	b903      	cbnz	r3, 800ef68 <__sflush_r+0x78>
 800ef66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef6a:	602f      	str	r7, [r5, #0]
 800ef6c:	b1b9      	cbz	r1, 800ef9e <__sflush_r+0xae>
 800ef6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef72:	4299      	cmp	r1, r3
 800ef74:	d002      	beq.n	800ef7c <__sflush_r+0x8c>
 800ef76:	4628      	mov	r0, r5
 800ef78:	f7ff fca0 	bl	800e8bc <_free_r>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef80:	e00d      	b.n	800ef9e <__sflush_r+0xae>
 800ef82:	2301      	movs	r3, #1
 800ef84:	4628      	mov	r0, r5
 800ef86:	47b0      	blx	r6
 800ef88:	4602      	mov	r2, r0
 800ef8a:	1c50      	adds	r0, r2, #1
 800ef8c:	d1c9      	bne.n	800ef22 <__sflush_r+0x32>
 800ef8e:	682b      	ldr	r3, [r5, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d0c6      	beq.n	800ef22 <__sflush_r+0x32>
 800ef94:	2b1d      	cmp	r3, #29
 800ef96:	d001      	beq.n	800ef9c <__sflush_r+0xac>
 800ef98:	2b16      	cmp	r3, #22
 800ef9a:	d11e      	bne.n	800efda <__sflush_r+0xea>
 800ef9c:	602f      	str	r7, [r5, #0]
 800ef9e:	2000      	movs	r0, #0
 800efa0:	e022      	b.n	800efe8 <__sflush_r+0xf8>
 800efa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efa6:	b21b      	sxth	r3, r3
 800efa8:	e01b      	b.n	800efe2 <__sflush_r+0xf2>
 800efaa:	690f      	ldr	r7, [r1, #16]
 800efac:	2f00      	cmp	r7, #0
 800efae:	d0f6      	beq.n	800ef9e <__sflush_r+0xae>
 800efb0:	0793      	lsls	r3, r2, #30
 800efb2:	680e      	ldr	r6, [r1, #0]
 800efb4:	bf08      	it	eq
 800efb6:	694b      	ldreq	r3, [r1, #20]
 800efb8:	600f      	str	r7, [r1, #0]
 800efba:	bf18      	it	ne
 800efbc:	2300      	movne	r3, #0
 800efbe:	eba6 0807 	sub.w	r8, r6, r7
 800efc2:	608b      	str	r3, [r1, #8]
 800efc4:	f1b8 0f00 	cmp.w	r8, #0
 800efc8:	dde9      	ble.n	800ef9e <__sflush_r+0xae>
 800efca:	6a21      	ldr	r1, [r4, #32]
 800efcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efce:	4643      	mov	r3, r8
 800efd0:	463a      	mov	r2, r7
 800efd2:	4628      	mov	r0, r5
 800efd4:	47b0      	blx	r6
 800efd6:	2800      	cmp	r0, #0
 800efd8:	dc08      	bgt.n	800efec <__sflush_r+0xfc>
 800efda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efe2:	81a3      	strh	r3, [r4, #12]
 800efe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	4407      	add	r7, r0
 800efee:	eba8 0800 	sub.w	r8, r8, r0
 800eff2:	e7e7      	b.n	800efc4 <__sflush_r+0xd4>
 800eff4:	dfbffffe 	.word	0xdfbffffe

0800eff8 <_fflush_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	690b      	ldr	r3, [r1, #16]
 800effc:	4605      	mov	r5, r0
 800effe:	460c      	mov	r4, r1
 800f000:	b913      	cbnz	r3, 800f008 <_fflush_r+0x10>
 800f002:	2500      	movs	r5, #0
 800f004:	4628      	mov	r0, r5
 800f006:	bd38      	pop	{r3, r4, r5, pc}
 800f008:	b118      	cbz	r0, 800f012 <_fflush_r+0x1a>
 800f00a:	6a03      	ldr	r3, [r0, #32]
 800f00c:	b90b      	cbnz	r3, 800f012 <_fflush_r+0x1a>
 800f00e:	f7ff fb4b 	bl	800e6a8 <__sinit>
 800f012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0f3      	beq.n	800f002 <_fflush_r+0xa>
 800f01a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f01c:	07d0      	lsls	r0, r2, #31
 800f01e:	d404      	bmi.n	800f02a <_fflush_r+0x32>
 800f020:	0599      	lsls	r1, r3, #22
 800f022:	d402      	bmi.n	800f02a <_fflush_r+0x32>
 800f024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f026:	f7ff fc38 	bl	800e89a <__retarget_lock_acquire_recursive>
 800f02a:	4628      	mov	r0, r5
 800f02c:	4621      	mov	r1, r4
 800f02e:	f7ff ff5f 	bl	800eef0 <__sflush_r>
 800f032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f034:	07da      	lsls	r2, r3, #31
 800f036:	4605      	mov	r5, r0
 800f038:	d4e4      	bmi.n	800f004 <_fflush_r+0xc>
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	059b      	lsls	r3, r3, #22
 800f03e:	d4e1      	bmi.n	800f004 <_fflush_r+0xc>
 800f040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f042:	f7ff fc2b 	bl	800e89c <__retarget_lock_release_recursive>
 800f046:	e7dd      	b.n	800f004 <_fflush_r+0xc>

0800f048 <__sread>:
 800f048:	b510      	push	{r4, lr}
 800f04a:	460c      	mov	r4, r1
 800f04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f050:	f000 f978 	bl	800f344 <_read_r>
 800f054:	2800      	cmp	r0, #0
 800f056:	bfab      	itete	ge
 800f058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f05a:	89a3      	ldrhlt	r3, [r4, #12]
 800f05c:	181b      	addge	r3, r3, r0
 800f05e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f062:	bfac      	ite	ge
 800f064:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f066:	81a3      	strhlt	r3, [r4, #12]
 800f068:	bd10      	pop	{r4, pc}

0800f06a <__swrite>:
 800f06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f06e:	461f      	mov	r7, r3
 800f070:	898b      	ldrh	r3, [r1, #12]
 800f072:	05db      	lsls	r3, r3, #23
 800f074:	4605      	mov	r5, r0
 800f076:	460c      	mov	r4, r1
 800f078:	4616      	mov	r6, r2
 800f07a:	d505      	bpl.n	800f088 <__swrite+0x1e>
 800f07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f080:	2302      	movs	r3, #2
 800f082:	2200      	movs	r2, #0
 800f084:	f000 f94c 	bl	800f320 <_lseek_r>
 800f088:	89a3      	ldrh	r3, [r4, #12]
 800f08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f08e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f092:	81a3      	strh	r3, [r4, #12]
 800f094:	4632      	mov	r2, r6
 800f096:	463b      	mov	r3, r7
 800f098:	4628      	mov	r0, r5
 800f09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f09e:	f000 b963 	b.w	800f368 <_write_r>

0800f0a2 <__sseek>:
 800f0a2:	b510      	push	{r4, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0aa:	f000 f939 	bl	800f320 <_lseek_r>
 800f0ae:	1c43      	adds	r3, r0, #1
 800f0b0:	89a3      	ldrh	r3, [r4, #12]
 800f0b2:	bf15      	itete	ne
 800f0b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f0b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f0ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f0be:	81a3      	strheq	r3, [r4, #12]
 800f0c0:	bf18      	it	ne
 800f0c2:	81a3      	strhne	r3, [r4, #12]
 800f0c4:	bd10      	pop	{r4, pc}

0800f0c6 <__sclose>:
 800f0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ca:	f000 b8f7 	b.w	800f2bc <_close_r>

0800f0ce <__swbuf_r>:
 800f0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0d0:	460e      	mov	r6, r1
 800f0d2:	4614      	mov	r4, r2
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	b118      	cbz	r0, 800f0e0 <__swbuf_r+0x12>
 800f0d8:	6a03      	ldr	r3, [r0, #32]
 800f0da:	b90b      	cbnz	r3, 800f0e0 <__swbuf_r+0x12>
 800f0dc:	f7ff fae4 	bl	800e6a8 <__sinit>
 800f0e0:	69a3      	ldr	r3, [r4, #24]
 800f0e2:	60a3      	str	r3, [r4, #8]
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	071a      	lsls	r2, r3, #28
 800f0e8:	d501      	bpl.n	800f0ee <__swbuf_r+0x20>
 800f0ea:	6923      	ldr	r3, [r4, #16]
 800f0ec:	b943      	cbnz	r3, 800f100 <__swbuf_r+0x32>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f000 f82b 	bl	800f14c <__swsetup_r>
 800f0f6:	b118      	cbz	r0, 800f100 <__swbuf_r+0x32>
 800f0f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	6922      	ldr	r2, [r4, #16]
 800f104:	1a98      	subs	r0, r3, r2
 800f106:	6963      	ldr	r3, [r4, #20]
 800f108:	b2f6      	uxtb	r6, r6
 800f10a:	4283      	cmp	r3, r0
 800f10c:	4637      	mov	r7, r6
 800f10e:	dc05      	bgt.n	800f11c <__swbuf_r+0x4e>
 800f110:	4621      	mov	r1, r4
 800f112:	4628      	mov	r0, r5
 800f114:	f7ff ff70 	bl	800eff8 <_fflush_r>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d1ed      	bne.n	800f0f8 <__swbuf_r+0x2a>
 800f11c:	68a3      	ldr	r3, [r4, #8]
 800f11e:	3b01      	subs	r3, #1
 800f120:	60a3      	str	r3, [r4, #8]
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	1c5a      	adds	r2, r3, #1
 800f126:	6022      	str	r2, [r4, #0]
 800f128:	701e      	strb	r6, [r3, #0]
 800f12a:	6962      	ldr	r2, [r4, #20]
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	429a      	cmp	r2, r3
 800f130:	d004      	beq.n	800f13c <__swbuf_r+0x6e>
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	07db      	lsls	r3, r3, #31
 800f136:	d5e1      	bpl.n	800f0fc <__swbuf_r+0x2e>
 800f138:	2e0a      	cmp	r6, #10
 800f13a:	d1df      	bne.n	800f0fc <__swbuf_r+0x2e>
 800f13c:	4621      	mov	r1, r4
 800f13e:	4628      	mov	r0, r5
 800f140:	f7ff ff5a 	bl	800eff8 <_fflush_r>
 800f144:	2800      	cmp	r0, #0
 800f146:	d0d9      	beq.n	800f0fc <__swbuf_r+0x2e>
 800f148:	e7d6      	b.n	800f0f8 <__swbuf_r+0x2a>
	...

0800f14c <__swsetup_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4b29      	ldr	r3, [pc, #164]	@ (800f1f4 <__swsetup_r+0xa8>)
 800f150:	4605      	mov	r5, r0
 800f152:	6818      	ldr	r0, [r3, #0]
 800f154:	460c      	mov	r4, r1
 800f156:	b118      	cbz	r0, 800f160 <__swsetup_r+0x14>
 800f158:	6a03      	ldr	r3, [r0, #32]
 800f15a:	b90b      	cbnz	r3, 800f160 <__swsetup_r+0x14>
 800f15c:	f7ff faa4 	bl	800e6a8 <__sinit>
 800f160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f164:	0719      	lsls	r1, r3, #28
 800f166:	d422      	bmi.n	800f1ae <__swsetup_r+0x62>
 800f168:	06da      	lsls	r2, r3, #27
 800f16a:	d407      	bmi.n	800f17c <__swsetup_r+0x30>
 800f16c:	2209      	movs	r2, #9
 800f16e:	602a      	str	r2, [r5, #0]
 800f170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f174:	81a3      	strh	r3, [r4, #12]
 800f176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f17a:	e033      	b.n	800f1e4 <__swsetup_r+0x98>
 800f17c:	0758      	lsls	r0, r3, #29
 800f17e:	d512      	bpl.n	800f1a6 <__swsetup_r+0x5a>
 800f180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f182:	b141      	cbz	r1, 800f196 <__swsetup_r+0x4a>
 800f184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f188:	4299      	cmp	r1, r3
 800f18a:	d002      	beq.n	800f192 <__swsetup_r+0x46>
 800f18c:	4628      	mov	r0, r5
 800f18e:	f7ff fb95 	bl	800e8bc <_free_r>
 800f192:	2300      	movs	r3, #0
 800f194:	6363      	str	r3, [r4, #52]	@ 0x34
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f19c:	81a3      	strh	r3, [r4, #12]
 800f19e:	2300      	movs	r3, #0
 800f1a0:	6063      	str	r3, [r4, #4]
 800f1a2:	6923      	ldr	r3, [r4, #16]
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	89a3      	ldrh	r3, [r4, #12]
 800f1a8:	f043 0308 	orr.w	r3, r3, #8
 800f1ac:	81a3      	strh	r3, [r4, #12]
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	b94b      	cbnz	r3, 800f1c6 <__swsetup_r+0x7a>
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1bc:	d003      	beq.n	800f1c6 <__swsetup_r+0x7a>
 800f1be:	4621      	mov	r1, r4
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f000 f83f 	bl	800f244 <__smakebuf_r>
 800f1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1ca:	f013 0201 	ands.w	r2, r3, #1
 800f1ce:	d00a      	beq.n	800f1e6 <__swsetup_r+0x9a>
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	60a2      	str	r2, [r4, #8]
 800f1d4:	6962      	ldr	r2, [r4, #20]
 800f1d6:	4252      	negs	r2, r2
 800f1d8:	61a2      	str	r2, [r4, #24]
 800f1da:	6922      	ldr	r2, [r4, #16]
 800f1dc:	b942      	cbnz	r2, 800f1f0 <__swsetup_r+0xa4>
 800f1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1e2:	d1c5      	bne.n	800f170 <__swsetup_r+0x24>
 800f1e4:	bd38      	pop	{r3, r4, r5, pc}
 800f1e6:	0799      	lsls	r1, r3, #30
 800f1e8:	bf58      	it	pl
 800f1ea:	6962      	ldrpl	r2, [r4, #20]
 800f1ec:	60a2      	str	r2, [r4, #8]
 800f1ee:	e7f4      	b.n	800f1da <__swsetup_r+0x8e>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	e7f7      	b.n	800f1e4 <__swsetup_r+0x98>
 800f1f4:	2000056c 	.word	0x2000056c

0800f1f8 <__swhatbuf_r>:
 800f1f8:	b570      	push	{r4, r5, r6, lr}
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f200:	2900      	cmp	r1, #0
 800f202:	b096      	sub	sp, #88	@ 0x58
 800f204:	4615      	mov	r5, r2
 800f206:	461e      	mov	r6, r3
 800f208:	da0d      	bge.n	800f226 <__swhatbuf_r+0x2e>
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f210:	f04f 0100 	mov.w	r1, #0
 800f214:	bf14      	ite	ne
 800f216:	2340      	movne	r3, #64	@ 0x40
 800f218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f21c:	2000      	movs	r0, #0
 800f21e:	6031      	str	r1, [r6, #0]
 800f220:	602b      	str	r3, [r5, #0]
 800f222:	b016      	add	sp, #88	@ 0x58
 800f224:	bd70      	pop	{r4, r5, r6, pc}
 800f226:	466a      	mov	r2, sp
 800f228:	f000 f858 	bl	800f2dc <_fstat_r>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	dbec      	blt.n	800f20a <__swhatbuf_r+0x12>
 800f230:	9901      	ldr	r1, [sp, #4]
 800f232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f23a:	4259      	negs	r1, r3
 800f23c:	4159      	adcs	r1, r3
 800f23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f242:	e7eb      	b.n	800f21c <__swhatbuf_r+0x24>

0800f244 <__smakebuf_r>:
 800f244:	898b      	ldrh	r3, [r1, #12]
 800f246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f248:	079d      	lsls	r5, r3, #30
 800f24a:	4606      	mov	r6, r0
 800f24c:	460c      	mov	r4, r1
 800f24e:	d507      	bpl.n	800f260 <__smakebuf_r+0x1c>
 800f250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	2301      	movs	r3, #1
 800f25a:	6163      	str	r3, [r4, #20]
 800f25c:	b003      	add	sp, #12
 800f25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f260:	ab01      	add	r3, sp, #4
 800f262:	466a      	mov	r2, sp
 800f264:	f7ff ffc8 	bl	800f1f8 <__swhatbuf_r>
 800f268:	9f00      	ldr	r7, [sp, #0]
 800f26a:	4605      	mov	r5, r0
 800f26c:	4639      	mov	r1, r7
 800f26e:	4630      	mov	r0, r6
 800f270:	f7ff f902 	bl	800e478 <_malloc_r>
 800f274:	b948      	cbnz	r0, 800f28a <__smakebuf_r+0x46>
 800f276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f27a:	059a      	lsls	r2, r3, #22
 800f27c:	d4ee      	bmi.n	800f25c <__smakebuf_r+0x18>
 800f27e:	f023 0303 	bic.w	r3, r3, #3
 800f282:	f043 0302 	orr.w	r3, r3, #2
 800f286:	81a3      	strh	r3, [r4, #12]
 800f288:	e7e2      	b.n	800f250 <__smakebuf_r+0xc>
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	6020      	str	r0, [r4, #0]
 800f28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	9b01      	ldr	r3, [sp, #4]
 800f296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f29a:	b15b      	cbz	r3, 800f2b4 <__smakebuf_r+0x70>
 800f29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f000 f82d 	bl	800f300 <_isatty_r>
 800f2a6:	b128      	cbz	r0, 800f2b4 <__smakebuf_r+0x70>
 800f2a8:	89a3      	ldrh	r3, [r4, #12]
 800f2aa:	f023 0303 	bic.w	r3, r3, #3
 800f2ae:	f043 0301 	orr.w	r3, r3, #1
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	431d      	orrs	r5, r3
 800f2b8:	81a5      	strh	r5, [r4, #12]
 800f2ba:	e7cf      	b.n	800f25c <__smakebuf_r+0x18>

0800f2bc <_close_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d06      	ldr	r5, [pc, #24]	@ (800f2d8 <_close_r+0x1c>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	602b      	str	r3, [r5, #0]
 800f2c8:	f7f9 fcd3 	bl	8008c72 <_close>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d102      	bne.n	800f2d6 <_close_r+0x1a>
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	b103      	cbz	r3, 800f2d6 <_close_r+0x1a>
 800f2d4:	6023      	str	r3, [r4, #0]
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	20000f1c 	.word	0x20000f1c

0800f2dc <_fstat_r>:
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	4d07      	ldr	r5, [pc, #28]	@ (800f2fc <_fstat_r+0x20>)
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	4608      	mov	r0, r1
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	602b      	str	r3, [r5, #0]
 800f2ea:	f7f9 fcce 	bl	8008c8a <_fstat>
 800f2ee:	1c43      	adds	r3, r0, #1
 800f2f0:	d102      	bne.n	800f2f8 <_fstat_r+0x1c>
 800f2f2:	682b      	ldr	r3, [r5, #0]
 800f2f4:	b103      	cbz	r3, 800f2f8 <_fstat_r+0x1c>
 800f2f6:	6023      	str	r3, [r4, #0]
 800f2f8:	bd38      	pop	{r3, r4, r5, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20000f1c 	.word	0x20000f1c

0800f300 <_isatty_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d06      	ldr	r5, [pc, #24]	@ (800f31c <_isatty_r+0x1c>)
 800f304:	2300      	movs	r3, #0
 800f306:	4604      	mov	r4, r0
 800f308:	4608      	mov	r0, r1
 800f30a:	602b      	str	r3, [r5, #0]
 800f30c:	f7f9 fccd 	bl	8008caa <_isatty>
 800f310:	1c43      	adds	r3, r0, #1
 800f312:	d102      	bne.n	800f31a <_isatty_r+0x1a>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	b103      	cbz	r3, 800f31a <_isatty_r+0x1a>
 800f318:	6023      	str	r3, [r4, #0]
 800f31a:	bd38      	pop	{r3, r4, r5, pc}
 800f31c:	20000f1c 	.word	0x20000f1c

0800f320 <_lseek_r>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	4d07      	ldr	r5, [pc, #28]	@ (800f340 <_lseek_r+0x20>)
 800f324:	4604      	mov	r4, r0
 800f326:	4608      	mov	r0, r1
 800f328:	4611      	mov	r1, r2
 800f32a:	2200      	movs	r2, #0
 800f32c:	602a      	str	r2, [r5, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	f7f9 fcc6 	bl	8008cc0 <_lseek>
 800f334:	1c43      	adds	r3, r0, #1
 800f336:	d102      	bne.n	800f33e <_lseek_r+0x1e>
 800f338:	682b      	ldr	r3, [r5, #0]
 800f33a:	b103      	cbz	r3, 800f33e <_lseek_r+0x1e>
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	bd38      	pop	{r3, r4, r5, pc}
 800f340:	20000f1c 	.word	0x20000f1c

0800f344 <_read_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4d07      	ldr	r5, [pc, #28]	@ (800f364 <_read_r+0x20>)
 800f348:	4604      	mov	r4, r0
 800f34a:	4608      	mov	r0, r1
 800f34c:	4611      	mov	r1, r2
 800f34e:	2200      	movs	r2, #0
 800f350:	602a      	str	r2, [r5, #0]
 800f352:	461a      	mov	r2, r3
 800f354:	f7f9 fc54 	bl	8008c00 <_read>
 800f358:	1c43      	adds	r3, r0, #1
 800f35a:	d102      	bne.n	800f362 <_read_r+0x1e>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	b103      	cbz	r3, 800f362 <_read_r+0x1e>
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	20000f1c 	.word	0x20000f1c

0800f368 <_write_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	4d07      	ldr	r5, [pc, #28]	@ (800f388 <_write_r+0x20>)
 800f36c:	4604      	mov	r4, r0
 800f36e:	4608      	mov	r0, r1
 800f370:	4611      	mov	r1, r2
 800f372:	2200      	movs	r2, #0
 800f374:	602a      	str	r2, [r5, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	f7f9 fc5f 	bl	8008c3a <_write>
 800f37c:	1c43      	adds	r3, r0, #1
 800f37e:	d102      	bne.n	800f386 <_write_r+0x1e>
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	b103      	cbz	r3, 800f386 <_write_r+0x1e>
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	bd38      	pop	{r3, r4, r5, pc}
 800f388:	20000f1c 	.word	0x20000f1c

0800f38c <_init>:
 800f38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38e:	bf00      	nop
 800f390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f392:	bc08      	pop	{r3}
 800f394:	469e      	mov	lr, r3
 800f396:	4770      	bx	lr

0800f398 <_fini>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	bf00      	nop
 800f39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39e:	bc08      	pop	{r3}
 800f3a0:	469e      	mov	lr, r3
 800f3a2:	4770      	bx	lr
