
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800cd2c  0800cd2c  0000dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfcc  0800cfcc  0000e5b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfcc  0800cfcc  0000dfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfd4  0800cfd4  0000e5b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfd4  0800cfd4  0000dfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cfd8  0800cfd8  0000dfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005b8  20000000  0800cfdc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200005b8  0800d594  0000e5b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f18  0800d594  0000ef18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e5b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c17f  00000000  00000000  0000e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004690  00000000  00000000  0002a767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001281  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c07  00000000  00000000  00031899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d73  00000000  00000000  0004b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b8c2  00000000  00000000  0006c213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae4  00000000  00000000  00107b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010e5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005b8 	.word	0x200005b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd14 	.word	0x0800cd14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005bc 	.word	0x200005bc
 80001dc:	0800cd14 	.word	0x0800cd14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <optiga_util_callback>:
/**
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static volatile optiga_lib_status_t optiga_lib_status;
// lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void *context, optiga_lib_status_t return_status) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <optiga_util_callback+0x20>)
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	8013      	strh	r3, [r2, #0]
    if (NULL != context) {
        // callback to upper layer here
    }
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200005d4 	.word	0x200005d4

08000594 <example_optiga_util_read_data>:
    if (length % 16 != 0) printf("\n");
}


void example_optiga_util_read_data(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 800059a:	af02      	add	r7, sp, #8
    optiga_util_t *me = NULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    optiga_lib_status_t return_status;
    uint16_t optiga_oid = 0xE0E8;  // Same OID used for trust anchor
 80005a2:	f24e 03e8 	movw	r3, #57576	@ 0xe0e8
 80005a6:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
    uint16_t offset = 0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8a7 3404 	strh.w	r3, [r7, #1028]	@ 0x404
    uint16_t bytes_to_read = 1024;
 80005b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b4:	f8a7 3400 	strh.w	r3, [r7, #1024]	@ 0x400
    uint8_t read_data_buffer[1024];

    printf("Creating OPTIGA Util instance...\r\n");
 80005b8:	4841      	ldr	r0, [pc, #260]	@ (80006c0 <example_optiga_util_read_data+0x12c>)
 80005ba:	f00b fdd7 	bl	800c16c <puts>
    me = optiga_util_create(0, optiga_util_callback, NULL);
 80005be:	2200      	movs	r2, #0
 80005c0:	4940      	ldr	r1, [pc, #256]	@ (80006c4 <example_optiga_util_read_data+0x130>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f005 f9f2 	bl	80059ac <optiga_util_create>
 80005c8:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
    if (me == NULL)
 80005cc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <example_optiga_util_read_data+0x48>
    {
        printf("Failed to create OPTIGA Util instance.\r\n");
 80005d4:	483c      	ldr	r0, [pc, #240]	@ (80006c8 <example_optiga_util_read_data+0x134>)
 80005d6:	f00b fdc9 	bl	800c16c <puts>
 80005da:	e06d      	b.n	80006b8 <example_optiga_util_read_data+0x124>
        return;
    }

    // Use unprotected communication (same as write)
    OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 80005e4:	f005 f9c3 	bl	800596e <optiga_util_set_comms_params>

    // Read data
    optiga_lib_status = OPTIGA_LIB_BUSY;
 80005e8:	4b38      	ldr	r3, [pc, #224]	@ (80006cc <example_optiga_util_read_data+0x138>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	801a      	strh	r2, [r3, #0]
    printf("Reading data from OID 0x%04X...\r\n", optiga_oid);
 80005ee:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 80005f2:	4619      	mov	r1, r3
 80005f4:	4836      	ldr	r0, [pc, #216]	@ (80006d0 <example_optiga_util_read_data+0x13c>)
 80005f6:	f00b fd51 	bl	800c09c <iprintf>
    return_status = optiga_util_read_data(
 80005fa:	4638      	mov	r0, r7
 80005fc:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	@ 0x404
 8000600:	f8b7 1406 	ldrh.w	r1, [r7, #1030]	@ 0x406
 8000604:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	4603      	mov	r3, r0
 800060c:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 8000610:	f005 fa8a 	bl	8005b28 <optiga_util_read_data>
 8000614:	4603      	mov	r3, r0
 8000616:	f8a7 3402 	strh.w	r3, [r7, #1026]	@ 0x402
        offset,
        read_data_buffer,
        &bytes_to_read
    );

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 800061a:	e001      	b.n	8000620 <example_optiga_util_read_data+0x8c>
    {
        pal_os_event_trigger_registered_callback();
 800061c:	f005 fde4 	bl	80061e8 <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <example_optiga_util_read_data+0x138>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	2b01      	cmp	r3, #1
 8000628:	d0f8      	beq.n	800061c <example_optiga_util_read_data+0x88>
    }

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <example_optiga_util_read_data+0x138>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	b29b      	uxth	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d007      	beq.n	8000644 <example_optiga_util_read_data+0xb0>
    {
        printf("Data read failed: 0x%04X\r\n", optiga_lib_status);
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <example_optiga_util_read_data+0x138>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	4825      	ldr	r0, [pc, #148]	@ (80006d4 <example_optiga_util_read_data+0x140>)
 800063e:	f00b fd2d 	bl	800c09c <iprintf>
 8000642:	e031      	b.n	80006a8 <example_optiga_util_read_data+0x114>
    }
    else
    {
        printf("Data read successful. Bytes read: %d\r\n", bytes_to_read);
 8000644:	f8b7 3400 	ldrh.w	r3, [r7, #1024]	@ 0x400
 8000648:	4619      	mov	r1, r3
 800064a:	4823      	ldr	r0, [pc, #140]	@ (80006d8 <example_optiga_util_read_data+0x144>)
 800064c:	f00b fd26 	bl	800c09c <iprintf>
        printf("Data (hex):\r\n");
 8000650:	4822      	ldr	r0, [pc, #136]	@ (80006dc <example_optiga_util_read_data+0x148>)
 8000652:	f00b fd8b 	bl	800c16c <puts>
        for (int i = 0; i < bytes_to_read; ++i)
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800065c:	e01a      	b.n	8000694 <example_optiga_util_read_data+0x100>
        {
            printf("%02X ", read_data_buffer[i]);
 800065e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000662:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8000666:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	481b      	ldr	r0, [pc, #108]	@ (80006e0 <example_optiga_util_read_data+0x14c>)
 8000672:	f00b fd13 	bl	800c09c <iprintf>
            if ((i + 1) % 16 == 0)
 8000676:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800067a:	3301      	adds	r3, #1
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <example_optiga_util_read_data+0xf6>
                printf("\r\n");
 8000684:	4817      	ldr	r0, [pc, #92]	@ (80006e4 <example_optiga_util_read_data+0x150>)
 8000686:	f00b fd71 	bl	800c16c <puts>
        for (int i = 0; i < bytes_to_read; ++i)
 800068a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800068e:	3301      	adds	r3, #1
 8000690:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000694:	f8b7 3400 	ldrh.w	r3, [r7, #1024]	@ 0x400
 8000698:	461a      	mov	r2, r3
 800069a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800069e:	4293      	cmp	r3, r2
 80006a0:	dbdd      	blt.n	800065e <example_optiga_util_read_data+0xca>
        }
        printf("\r\n");
 80006a2:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <example_optiga_util_read_data+0x150>)
 80006a4:	f00b fd62 	bl	800c16c <puts>
    }

    // Clean up
    if (me)
 80006a8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <example_optiga_util_read_data+0x124>
    {
        optiga_util_destroy(me);
 80006b0:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 80006b4:	f005 f9bc 	bl	8005a30 <optiga_util_destroy>
    }
}
 80006b8:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	0800cd34 	.word	0x0800cd34
 80006c4:	08000571 	.word	0x08000571
 80006c8:	0800cd58 	.word	0x0800cd58
 80006cc:	200005d4 	.word	0x200005d4
 80006d0:	0800cd80 	.word	0x0800cd80
 80006d4:	0800cda4 	.word	0x0800cda4
 80006d8:	0800cdc0 	.word	0x0800cdc0
 80006dc:	0800cde8 	.word	0x0800cde8
 80006e0:	0800cd2c 	.word	0x0800cd2c
 80006e4:	0800cdf8 	.word	0x0800cdf8

080006e8 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80006f0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80006f4:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d027      	beq.n	8000750 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000718:	2b02      	cmp	r3, #2
 800071a:	d818      	bhi.n	800074e <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	22b1      	movs	r2, #177	@ 0xb1
 8000720:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2201      	movs	r2, #1
 8000728:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f8f5 	bl	8000924 <ifx_i2c_init>
 800073a:	4603      	mov	r3, r0
 800073c:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d105      	bne.n	8000750 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2203      	movs	r2, #3
 8000748:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 800074c:	e000      	b.n	8000750 <ifx_i2c_open+0x68>
                break;
 800074e:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000750:	89fb      	ldrh	r3, [r7, #14]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b088      	sub	sp, #32
 800075e:	af02      	add	r7, sp, #8
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4613      	mov	r3, r2
 8000768:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800076a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800076e:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000776:	2b02      	cmp	r3, #2
 8000778:	d122      	bne.n	80007c0 <ifx_i2c_transceive+0x66>
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000780:	2b03      	cmp	r3, #3
 8000782:	d01d      	beq.n	80007c0 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6a3a      	ldr	r2, [r7, #32]
 8000790:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000794:	88fa      	ldrh	r2, [r7, #6]
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f001 fb00 	bl	8001da4 <ifx_i2c_prl_transceive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 80007a8:	8afb      	ldrh	r3, [r7, #22]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d108      	bne.n	80007c0 <ifx_i2c_transceive+0x66>
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2203      	movs	r2, #3
 80007bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 80007c0:	8afb      	ldrh	r3, [r7, #22]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80007d4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007d8:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d02a      	beq.n	800083a <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 80007e4:	2300      	movs	r3, #0
 80007e6:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80007ee:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 80007fa:	4912      	ldr	r1, [pc, #72]	@ (8000844 <ifx_i2c_close+0x78>)
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f001 fa8f 	bl	8001d20 <ifx_i2c_prl_close>
 8000802:	4603      	mov	r3, r0
 8000804:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800080c:	d115      	bne.n	800083a <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fae2 	bl	8005dde <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000820:	4618      	mov	r0, r3
 8000822:	f005 fa7c 	bl	8005d1e <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 800082c:	4618      	mov	r0, r3
 800082e:	f005 fa76 	bl	8005d1e <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2204      	movs	r2, #4
 8000836:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 800083a:	89fb      	ldrh	r3, [r7, #14]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	080008b1 	.word	0x080008b1

08000848 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	461a      	mov	r2, r3
 8000854:	460b      	mov	r3, r1
 8000856:	817b      	strh	r3, [r7, #10]
 8000858:	4613      	mov	r3, r2
 800085a:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000862:	2b00      	cmp	r3, #0
 8000864:	d008      	beq.n	8000878 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000872:	8979      	ldrh	r1, [r7, #10]
 8000874:	4610      	mov	r0, r2
 8000876:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	897a      	ldrh	r2, [r7, #10]
 800087c:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2204      	movs	r2, #4
 8000884:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 800088e:	2b01      	cmp	r3, #1
 8000890:	d107      	bne.n	80008a2 <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000892:	897b      	ldrh	r3, [r7, #10]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d106      	bne.n	80008a6 <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2202      	movs	r2, #2
 800089c:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 80008a0:	e001      	b.n	80008a6 <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 80008a2:	bf00      	nop
 80008a4:	e000      	b.n	80008a8 <ifx_i2c_tl_event_handler+0x60>
            break;
 80008a6:	bf00      	nop
    }
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	461a      	mov	r2, r3
 80008bc:	460b      	mov	r3, r1
 80008be:	817b      	strh	r3, [r7, #10]
 80008c0:	4613      	mov	r3, r2
 80008c2:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2204      	movs	r2, #4
 80008c8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d112      	bne.n	80008fc <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fa7e 	bl	8005dde <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80008e8:	4618      	mov	r0, r3
 80008ea:	f005 fa18 	bl	8005d1e <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80008f4:	4618      	mov	r0, r3
 80008f6:	f005 fa12 	bl	8005d1e <pal_gpio_set_low>
            break;
 80008fa:	e000      	b.n	80008fe <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 80008fc:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000904:	2b00      	cmp	r3, #0
 8000906:	d008      	beq.n	800091a <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000914:	8979      	ldrh	r1, [r7, #10]
 8000916:	4610      	mov	r0, r2
 8000918:	4798      	blx	r3
    }
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 800092c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000930:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000938:	2b02      	cmp	r3, #2
 800093a:	d004      	beq.n	8000946 <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000942:	2b00      	cmp	r3, #0
 8000944:	d156      	bne.n	80009f4 <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800094c:	2bb3      	cmp	r3, #179	@ 0xb3
 800094e:	d048      	beq.n	80009e2 <ifx_i2c_init+0xbe>
 8000950:	2bb3      	cmp	r3, #179	@ 0xb3
 8000952:	dc4d      	bgt.n	80009f0 <ifx_i2c_init+0xcc>
 8000954:	2bb1      	cmp	r3, #177	@ 0xb1
 8000956:	d002      	beq.n	800095e <ifx_i2c_init+0x3a>
 8000958:	2bb2      	cmp	r3, #178	@ 0xb2
 800095a:	d021      	beq.n	80009a0 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 800095c:	e048      	b.n	80009f0 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000964:	2b00      	cmp	r3, #0
 8000966:	d105      	bne.n	8000974 <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800096e:	4618      	mov	r0, r3
 8000970:	f005 f9d5 	bl	8005d1e <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 800097a:	4618      	mov	r0, r3
 800097c:	f005 f9cf 	bl	8005d1e <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	22b2      	movs	r2, #178	@ 0xb2
 8000984:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 800098e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4923      	ldr	r1, [pc, #140]	@ (8000a24 <ifx_i2c_init+0x100>)
 8000996:	f005 fbfb 	bl	8006190 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 800099a:	2300      	movs	r3, #0
 800099c:	81fb      	strh	r3, [r7, #14]
                break;
 800099e:	e028      	b.n	80009f2 <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d105      	bne.n	80009b6 <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80009b0:	4618      	mov	r0, r3
 80009b2:	f005 f9a4 	bl	8005cfe <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 f99e 	bl	8005cfe <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	22b3      	movs	r2, #179	@ 0xb3
 80009c6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80009d0:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4913      	ldr	r1, [pc, #76]	@ (8000a24 <ifx_i2c_init+0x100>)
 80009d8:	f005 fbda 	bl	8006190 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 80009dc:	2300      	movs	r3, #0
 80009de:	81fb      	strh	r3, [r7, #14]
                break;
 80009e0:	e007      	b.n	80009f2 <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 80009e2:	4911      	ldr	r1, [pc, #68]	@ (8000a28 <ifx_i2c_init+0x104>)
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f001 f953 	bl	8001c90 <ifx_i2c_prl_init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	81fb      	strh	r3, [r7, #14]
                break;
 80009ee:	e000      	b.n	80009f2 <ifx_i2c_init+0xce>
                break;
 80009f0:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 80009f2:	e009      	b.n	8000a08 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 80009fc:	490a      	ldr	r1, [pc, #40]	@ (8000a28 <ifx_i2c_init+0x104>)
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f001 f946 	bl	8001c90 <ifx_i2c_prl_init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d005      	beq.n	8000a1a <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000a0e:	89f9      	ldrh	r1, [r7, #14]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff17 	bl	8000848 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08000925 	.word	0x08000925
 8000a28:	08000849 	.word	0x08000849

08000a2c <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000a3e:	4919      	ldr	r1, [pc, #100]	@ (8000aa4 <ifx_i2c_dl_init+0x78>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 fc37 	bl	80012b4 <ifx_i2c_pl_init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000a4c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a50:	e024      	b.n	8000a9c <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2203      	movs	r2, #3
 8000a66:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08000e49 	.word	0x08000e49

08000aa8 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d102      	bne.n	8000ac4 <ifx_i2c_dl_send_frame+0x1c>
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000ac4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000ac8:	e01a      	b.n	8000b00 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2202      	movs	r2, #2
 8000ace:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	887a      	ldrh	r2, [r7, #2]
 8000ae6:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	220a      	movs	r2, #10
 8000aee:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000af2:	8879      	ldrh	r1, [r7, #2]
 8000af4:	2300      	movs	r3, #0
 8000af6:	2200      	movs	r2, #0
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f88a 	bl	8000c12 <ifx_i2c_dl_send_frame_internal>
 8000afe:	4603      	mov	r3, r0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d002      	beq.n	8000b20 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000b1a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000b1e:	e019      	b.n	8000b54 <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2203      	movs	r2, #3
 8000b24:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000b38:	f005 fbdf 	bl	80062fa <pal_os_timer_get_time_in_milliseconds>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <ifx_i2c_dl_receive_frame+0x54>)
 8000b48:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 fc2a 	bl	80013a6 <ifx_i2c_pl_receive_frame>
 8000b52:	4603      	mov	r3, r0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	0002bf20 	.word	0x0002bf20

08000b60 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	80fb      	strh	r3, [r7, #6]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8000b70:	797b      	ldrb	r3, [r7, #5]
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	4053      	eors	r3, r2
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	4053      	eors	r3, r2
 8000b90:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000b92:	897b      	ldrh	r3, [r7, #10]
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000b98:	897b      	ldrh	r3, [r7, #10]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	893b      	ldrh	r3, [r7, #8]
 8000ba0:	4053      	eors	r3, r2
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	89bb      	ldrh	r3, [r7, #12]
 8000baa:	4053      	eors	r3, r2
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	893b      	ldrh	r3, [r7, #8]
 8000bb4:	4053      	eors	r3, r2
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4053      	eors	r3, r2
 8000bc0:	b29b      	uxth	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	e00d      	b.n	8000c00 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000be4:	89fb      	ldrh	r3, [r7, #14]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	89bb      	ldrh	r3, [r7, #12]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ffb5 	bl	8000b60 <ifx_i2c_dl_calc_crc_byte>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	81fb      	strh	r3, [r7, #14]
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3ed      	bcc.n	8000be4 <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000c08:	89bb      	ldrh	r3, [r7, #12]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4603      	mov	r3, r0
 8000c22:	807b      	strh	r3, [r7, #2]
 8000c24:	460b      	mov	r3, r1
 8000c26:	707b      	strb	r3, [r7, #1]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000c32:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d107      	bne.n	8000c4a <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000c40:	3301      	adds	r3, #1
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000c50:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000c52:	787b      	ldrb	r3, [r7, #1]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d105      	bne.n	8000c64 <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000c62:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000c64:	787b      	ldrb	r3, [r7, #1]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d108      	bne.n	8000c7c <ifx_i2c_dl_send_frame_internal+0x6a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d103      	bne.n	8000c7c <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000c7a:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8000c7c:	8afb      	ldrh	r3, [r7, #22]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	015b      	lsls	r3, r3, #5
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d022      	beq.n	8000ce2 <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8000c9c:	783b      	ldrb	r3, [r7, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <ifx_i2c_dl_send_frame_internal+0x9a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00a      	beq.n	8000cc2 <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8000ce0:	e006      	b.n	8000cf0 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	3302      	adds	r3, #2
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	3303      	adds	r3, #3
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4619      	mov	r1, r3
 8000d10:	6938      	ldr	r0, [r7, #16]
 8000d12:	f7ff ff5c 	bl	8000bce <ifx_i2c_dl_calc_crc>
 8000d16:	4603      	mov	r3, r0
 8000d18:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	3303      	adds	r3, #3
 8000d24:	4619      	mov	r1, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	440b      	add	r3, r1
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	3304      	adds	r3, #4
 8000d32:	461a      	mov	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4413      	add	r3, r2
 8000d38:	89fa      	ldrh	r2, [r7, #14]
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	3305      	adds	r3, #5
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	6939      	ldr	r1, [r7, #16]
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 fb03 	bl	8001354 <ifx_i2c_pl_send_frame>
 8000d4e:	4603      	mov	r3, r0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2203      	movs	r2, #3
 8000d64:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2205      	movs	r2, #5
 8000d7c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8000d80:	2300      	movs	r3, #0
 8000d82:	2202      	movs	r2, #2
 8000d84:	2100      	movs	r1, #0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff43 	bl	8000c12 <ifx_i2c_dl_send_frame_internal>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8000d90:	89fb      	ldrh	r3, [r7, #14]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8000da8:	f005 faa7 	bl	80062fa <pal_os_timer_get_time_in_milliseconds>
 8000dac:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d205      	bcs.n	8000dd2 <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <ifx_i2c_dl_resend_frame+0xa8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d82c      	bhi.n	8000e34 <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d109      	bne.n	8000df8 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ffb3 	bl	8000d58 <ifx_i2c_dl_resync>
 8000df2:	4603      	mov	r3, r0
 8000df4:	82fb      	strh	r3, [r7, #22]
 8000df6:	e015      	b.n	8000e24 <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fef9 	bl	8000c12 <ifx_i2c_dl_send_frame_internal>
 8000e20:	4603      	mov	r3, r0
 8000e22:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8000e24:	8afb      	ldrh	r3, [r7, #22]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d008      	beq.n	8000e3c <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2206      	movs	r2, #6
 8000e2e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8000e32:	e003      	b.n	8000e3c <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2208      	movs	r2, #8
 8000e38:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0002bf1f 	.word	0x0002bf1f

08000e48 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	817b      	strh	r3, [r7, #10]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8000e80:	897b      	ldrh	r3, [r7, #10]
 8000e82:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000e86:	d108      	bne.n	8000e9a <ifx_i2c_pl_event_handler+0x52>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d003      	beq.n	8000e9a <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2208      	movs	r2, #8
 8000e96:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	f200 81ed 	bhi.w	8001282 <ifx_i2c_pl_event_handler+0x43a>
 8000ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <ifx_i2c_pl_event_handler+0x68>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000edd 	.word	0x08000edd
 8000eb4:	08000f03 	.word	0x08000f03
 8000eb8:	08000f45 	.word	0x08000f45
 8000ebc:	08001197 	.word	0x08001197
 8000ec0:	08001219 	.word	0x08001219
 8000ec4:	080011ff 	.word	0x080011ff
 8000ec8:	08001283 	.word	0x08001283
 8000ecc:	08001231 	.word	0x08001231
 8000ed0:	08001183 	.word	0x08001183
 8000ed4:	08000ff1 	.word	0x08000ff1
 8000ed8:	080010c1 	.word	0x080010c1
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8000edc:	897b      	ldrh	r3, [r7, #10]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <ifx_i2c_pl_event_handler+0x9e>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <ifx_i2c_pl_event_handler+0xa0>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000ef4:	7cfb      	ldrb	r3, [r7, #19]
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	2300      	movs	r3, #0
 8000efa:	2200      	movs	r2, #0
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	47a0      	blx	r4
            }
            break;
 8000f00:	e1cf      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8000f02:	897b      	ldrh	r3, [r7, #10]
 8000f04:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000f08:	d104      	bne.n	8000f14 <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f12:	e1c6      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000f14:	f005 f9f1 	bl	80062fa <pal_os_timer_get_time_in_milliseconds>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2203      	movs	r2, #3
 8000f24:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f000 fa3c 	bl	80013a6 <ifx_i2c_pl_receive_frame>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2206      	movs	r2, #6
 8000f38:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8000f3c:	e1b1      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	773b      	strb	r3, [r7, #28]
            break;
 8000f42:	e1ae      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8000f44:	897b      	ldrh	r3, [r7, #10]
 8000f46:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000f4a:	d104      	bne.n	8000f56 <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2205      	movs	r2, #5
 8000f50:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f54:	e1a5      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8000f56:	893b      	ldrh	r3, [r7, #8]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d804      	bhi.n	8000f66 <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2206      	movs	r2, #6
 8000f60:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f64:	e19d      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8000f6c:	7d7b      	ldrb	r3, [r7, #21]
 8000f6e:	09db      	lsrs	r3, r3, #7
 8000f70:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8000f72:	7d7b      	ldrb	r3, [r7, #21]
 8000f74:	115b      	asrs	r3, r3, #5
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8000f7e:	7d7b      	ldrb	r3, [r7, #21]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8000f86:	7d7b      	ldrb	r3, [r7, #21]
 8000f88:	109b      	asrs	r3, r3, #2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8000faa:	893b      	ldrh	r3, [r7, #8]
 8000fac:	3b02      	subs	r3, #2
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	893b      	ldrh	r3, [r7, #8]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8000fca:	893b      	ldrh	r3, [r7, #8]
 8000fcc:	3b02      	subs	r3, #2
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fdfb 	bl	8000bce <ifx_i2c_dl_calc_crc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8000fdc:	7d3b      	ldrb	r3, [r7, #20]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <ifx_i2c_pl_event_handler+0x19e>
 8000fe2:	220b      	movs	r2, #11
 8000fe4:	e000      	b.n	8000fe8 <ifx_i2c_pl_event_handler+0x1a0>
 8000fe6:	220a      	movs	r2, #10
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8000fee:	e158      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000ff0:	8b3a      	ldrh	r2, [r7, #24]
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d10d      	bne.n	8001014 <ifx_i2c_pl_event_handler+0x1cc>
 8000ff8:	8b7b      	ldrh	r3, [r7, #26]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000ffe:	893a      	ldrh	r2, [r7, #8]
 8001000:	8b7b      	ldrh	r3, [r7, #26]
 8001002:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001004:	429a      	cmp	r2, r3
 8001006:	d105      	bne.n	8001014 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001008:	7f7b      	ldrb	r3, [r7, #29]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d002      	beq.n	8001014 <ifx_i2c_pl_event_handler+0x1cc>
 800100e:	7f7b      	ldrb	r3, [r7, #29]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d104      	bne.n	800101e <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2206      	movs	r2, #6
 8001018:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800101c:	e141      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 800101e:	7ffa      	ldrb	r2, [r7, #31]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8001026:	3301      	adds	r3, #1
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	429a      	cmp	r2, r3
 800102e:	d00c      	beq.n	800104a <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2209      	movs	r2, #9
 8001034:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8001038:	2300      	movs	r3, #0
 800103a:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800103c:	2300      	movs	r3, #0
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff fde5 	bl	8000c12 <ifx_i2c_dl_send_frame_internal>
                    break;
 8001048:	e12b      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001050:	7fba      	ldrb	r2, [r7, #30]
 8001052:	429a      	cmp	r2, r3
 8001054:	d004      	beq.n	8001060 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2209      	movs	r2, #9
 800105a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800105e:	e120      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001060:	7f7b      	ldrb	r3, [r7, #29]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d104      	bne.n	8001070 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2205      	movs	r2, #5
 800106a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800106e:	e118      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8001076:	3301      	adds	r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800108c:	893a      	ldrh	r2, [r7, #8]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f00b f8c8 	bl	800c226 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	893a      	ldrh	r2, [r7, #8]
 800109a:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2204      	movs	r2, #4
 80010aa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 80010b2:	2300      	movs	r3, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff fdaa 	bl	8000c12 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 80010be:	e0f0      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80010c6:	461a      	mov	r2, r3
 80010c8:	7f7b      	ldrb	r3, [r7, #29]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	bf0c      	ite	eq
 80010ce:	2301      	moveq	r3, #1
 80010d0:	2300      	movne	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d004      	beq.n	80010e2 <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2209      	movs	r2, #9
 80010dc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80010e0:	e0df      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 80010e2:	8b3a      	ldrh	r2, [r7, #24]
 80010e4:	8afb      	ldrh	r3, [r7, #22]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d004      	beq.n	80010f4 <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2205      	movs	r2, #5
 80010ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80010f2:	e0d6      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 80010f4:	893b      	ldrh	r3, [r7, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d802      	bhi.n	8001100 <ifx_i2c_pl_event_handler+0x2b8>
 80010fa:	8b7b      	ldrh	r3, [r7, #26]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2209      	movs	r2, #9
 8001104:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001108:	e0cb      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 800110a:	7f7b      	ldrb	r3, [r7, #29]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d110      	bne.n	8001132 <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2209      	movs	r2, #9
 8001114:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2203      	movs	r2, #3
 8001124:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2203      	movs	r2, #3
 800112c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 8001130:	e0b7      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d108      	bne.n	800114a <ifx_i2c_pl_event_handler+0x302>
 8001138:	7f7b      	ldrb	r3, [r7, #29]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d005      	beq.n	800114a <ifx_i2c_pl_event_handler+0x302>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001144:	7fba      	ldrb	r2, [r7, #30]
 8001146:	429a      	cmp	r2, r3
 8001148:	d004      	beq.n	8001154 <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2209      	movs	r2, #9
 800114e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001152:	e0a6      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001154:	7f7b      	ldrb	r3, [r7, #29]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d104      	bne.n	8001164 <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001162:	e09e      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800116c:	2300      	movs	r3, #0
 800116e:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001176:	2300      	movs	r3, #0
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	47a0      	blx	r4
            }
            break;
 8001180:	e08f      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2203      	movs	r2, #3
 8001186:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f909 	bl	80013a6 <ifx_i2c_pl_receive_frame>
            }
            break;
 8001194:	e085      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 8001196:	897b      	ldrh	r3, [r7, #10]
 8001198:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800119c:	d104      	bne.n	80011a8 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2205      	movs	r2, #5
 80011a2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80011a6:	e07c      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00f      	beq.n	80011de <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80011ca:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80011d2:	3b05      	subs	r3, #5
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2104      	movs	r1, #4
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 80011dc:	e061      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80011ea:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80011f2:	3b05      	subs	r3, #5
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2106      	movs	r1, #6
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	47a0      	blx	r4
            break;
 80011fc:	e051      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2202      	movs	r2, #2
 8001202:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001206:	2300      	movs	r3, #0
 8001208:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 800120a:	2300      	movs	r3, #0
 800120c:	2201      	movs	r2, #1
 800120e:	2100      	movs	r1, #0
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff fcfe 	bl	8000c12 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001216:	e044      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8001218:	2100      	movs	r1, #0
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff fdbe 	bl	8000d9c <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001226:	2b08      	cmp	r3, #8
 8001228:	d03a      	beq.n	80012a0 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 800122a:	2300      	movs	r3, #0
 800122c:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 800122e:	e037      	b.n	80012a0 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10c      	bne.n	8001266 <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800125a:	2300      	movs	r3, #0
 800125c:	2200      	movs	r2, #0
 800125e:	2101      	movs	r1, #1
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	47a0      	blx	r4
 8001264:	e00a      	b.n	800127c <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff fd76 	bl	8000d58 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2208      	movs	r2, #8
 8001270:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 800127c:	2300      	movs	r3, #0
 800127e:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001280:	e00f      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001290:	2300      	movs	r3, #0
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	47a0      	blx	r4
                continue_state_machine = FALSE;
 800129a:	2300      	movs	r3, #0
 800129c:	773b      	strb	r3, [r7, #28]
                break;
 800129e:	e000      	b.n	80012a2 <ifx_i2c_pl_event_handler+0x45a>
            break;
 80012a0:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 80012a2:	7f3b      	ldrb	r3, [r7, #28]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f43f adeb 	beq.w	8000e80 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	@ 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}

080012b4 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	22bb      	movs	r2, #187	@ 0xbb
 80012d2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 80012e2:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80012ea:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <ifx_i2c_pl_init+0x9c>)
 80012ec:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	22c8      	movs	r2, #200	@ 0xc8
 80012f2:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10b      	bne.n	8001318 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001306:	4618      	mov	r0, r3
 8001308:	f004 fd5e 	bl	8005dc8 <pal_i2c_init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 8001312:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001316:	e016      	b.n	8001346 <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2299      	movs	r2, #153	@ 0x99
 8001326:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2205      	movs	r2, #5
 800132e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001332:	e003      	b.n	800133c <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa84 	bl	800184c <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	08001b35 	.word	0x08001b35

08001354 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	4613      	mov	r3, r2
 8001360:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001368:	2b01      	cmp	r3, #1
 800136a:	d007      	beq.n	800137c <ifx_i2c_pl_send_frame+0x28>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001372:	2b02      	cmp	r3, #2
 8001374:	d002      	beq.n	800137c <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 8001376:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800137a:	e010      	b.n	800139e <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	88fa      	ldrh	r2, [r7, #6]
 8001390:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001394:	2100      	movs	r1, #0
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 fa58 	bl	800184c <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d007      	beq.n	80013c8 <ifx_i2c_pl_receive_frame+0x22>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d002      	beq.n	80013c8 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 80013c2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80013c6:	e008      	b.n	80013da <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa3a 	bl	800184c <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70fb      	strb	r3, [r7, #3]
 80013ee:	4613      	mov	r3, r2
 80013f0:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	883a      	ldrh	r2, [r7, #0]
 8001406:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	22c8      	movs	r2, #200	@ 0xc8
 8001416:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001434:	461a      	mov	r2, r3
 8001436:	f004 fcdd 	bl	8005df4 <pal_i2c_write>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	72fb      	strb	r3, [r7, #11]
 8001450:	4613      	mov	r3, r2
 8001452:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	7afa      	ldrb	r2, [r7, #11]
 8001458:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001462:	3301      	adds	r3, #1
 8001464:	893a      	ldrh	r2, [r7, #8]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	f00a fedc 	bl	800c226 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800146e:	893b      	ldrh	r3, [r7, #8]
 8001470:	3301      	adds	r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	22c8      	movs	r2, #200	@ 0xc8
 8001486:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80014a4:	461a      	mov	r2, r3
 80014a6:	f004 fca5 	bl	8005df4 <pal_i2c_write>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 80014ba:	2204      	movs	r2, #4
 80014bc:	2182      	movs	r1, #130	@ 0x82
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff8f 	bl	80013e2 <ifx_i2c_pl_read_register>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fcf8 	bl	8005eec <pal_i2c_set_bitrate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d019      	beq.n	8001544 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	b291      	uxth	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4908      	ldr	r1, [pc, #32]	@ (8001554 <ifx_i2c_pl_set_bit_rate+0x88>)
 8001532:	f004 fe2d 	bl	8006190 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 8001536:	2301      	movs	r3, #1
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	e005      	b.n	8001548 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 800153c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001540:	81fb      	strh	r3, [r7, #14]
 8001542:	e001      	b.n	8001548 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 8001544:	2300      	movs	r3, #0
 8001546:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 8001548:	89fb      	ldrh	r3, [r7, #14]

}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	08001559 	.word	0x08001559

08001558 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	@ 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 8001560:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001564:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	733b      	strb	r3, [r7, #12]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 800157e:	b2db      	uxtb	r3, r3
 8001580:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8001596:	2bbb      	cmp	r3, #187	@ 0xbb
 8001598:	d031      	beq.n	80015fe <ifx_i2c_pl_negotiation_event_handler+0xa6>
 800159a:	2bbb      	cmp	r3, #187	@ 0xbb
 800159c:	f300 8145 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015a0:	2baa      	cmp	r3, #170	@ 0xaa
 80015a2:	f000 812d 	beq.w	8001800 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 80015a6:	2baa      	cmp	r3, #170	@ 0xaa
 80015a8:	f300 813f 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015ac:	2b88      	cmp	r3, #136	@ 0x88
 80015ae:	f000 8103 	beq.w	80017b8 <ifx_i2c_pl_negotiation_event_handler+0x260>
 80015b2:	2b88      	cmp	r3, #136	@ 0x88
 80015b4:	f300 8139 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015b8:	2b77      	cmp	r3, #119	@ 0x77
 80015ba:	f000 80c6 	beq.w	800174a <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 80015be:	2b77      	cmp	r3, #119	@ 0x77
 80015c0:	f300 8133 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015c4:	2b66      	cmp	r3, #102	@ 0x66
 80015c6:	f000 809d 	beq.w	8001704 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 80015ca:	2b66      	cmp	r3, #102	@ 0x66
 80015cc:	f300 812d 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015d0:	2b55      	cmp	r3, #85	@ 0x55
 80015d2:	f000 808d 	beq.w	80016f0 <ifx_i2c_pl_negotiation_event_handler+0x198>
 80015d6:	2b55      	cmp	r3, #85	@ 0x55
 80015d8:	f300 8127 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015dc:	2b44      	cmp	r3, #68	@ 0x44
 80015de:	d040      	beq.n	8001662 <ifx_i2c_pl_negotiation_event_handler+0x10a>
 80015e0:	2b44      	cmp	r3, #68	@ 0x44
 80015e2:	f300 8122 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015e6:	2b33      	cmp	r3, #51	@ 0x33
 80015e8:	d031      	beq.n	800164e <ifx_i2c_pl_negotiation_event_handler+0xf6>
 80015ea:	2b33      	cmp	r3, #51	@ 0x33
 80015ec:	f300 811d 	bgt.w	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80015f0:	2b11      	cmp	r3, #17
 80015f2:	f000 80cb 	beq.w	800178c <ifx_i2c_pl_negotiation_event_handler+0x234>
 80015f6:	2b22      	cmp	r3, #34	@ 0x22
 80015f8:	f000 80d4 	beq.w	80017a4 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 80015fc:	e115      	b.n	800182a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 80015fe:	2164      	movs	r1, #100	@ 0x64
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff63 	bl	80014cc <ifx_i2c_pl_set_bit_rate>
 8001606:	4603      	mov	r3, r0
 8001608:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 800160a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2233      	movs	r2, #51	@ 0x33
 8001614:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 800161e:	e106      	b.n	800182e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001620:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001622:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001626:	f040 8102 	bne.w	800182e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	22aa      	movs	r2, #170	@ 0xaa
 800162e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001640:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4980      	ldr	r1, [pc, #512]	@ (8001848 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 8001648:	f004 fda2 	bl	8006190 <pal_os_event_register_callback_oneshot>
            break;
 800164c:	e0ef      	b.n	800182e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2244      	movs	r2, #68	@ 0x44
 8001652:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001656:	2204      	movs	r2, #4
 8001658:	2184      	movs	r1, #132	@ 0x84
 800165a:	69b8      	ldr	r0, [r7, #24]
 800165c:	f7ff fec1 	bl	80013e2 <ifx_i2c_pl_read_register>
            break;
 8001660:	e0e8      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001684:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001688:	d911      	bls.n	80016ae <ifx_i2c_pl_negotiation_event_handler+0x156>
 800168a:	8abb      	ldrh	r3, [r7, #20]
 800168c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001690:	d80d      	bhi.n	80016ae <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001692:	2304      	movs	r3, #4
 8001694:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2255      	movs	r2, #85	@ 0x55
 800169a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2202      	movs	r2, #2
 80016a4:	2189      	movs	r1, #137	@ 0x89
 80016a6:	69b8      	ldr	r0, [r7, #24]
 80016a8:	f7ff fecb 	bl	8001442 <ifx_i2c_pl_write_register>
 80016ac:	e01f      	b.n	80016ee <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80016b4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80016b8:	d811      	bhi.n	80016de <ifx_i2c_pl_negotiation_event_handler+0x186>
 80016ba:	8abb      	ldrh	r3, [r7, #20]
 80016bc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80016c0:	d90d      	bls.n	80016de <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 80016c2:	2303      	movs	r3, #3
 80016c4:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2255      	movs	r2, #85	@ 0x55
 80016ca:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2202      	movs	r2, #2
 80016d4:	2189      	movs	r1, #137	@ 0x89
 80016d6:	69b8      	ldr	r0, [r7, #24]
 80016d8:	f7ff feb3 	bl	8001442 <ifx_i2c_pl_write_register>
 80016dc:	e007      	b.n	80016ee <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2266      	movs	r2, #102	@ 0x66
 80016e2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80016ec:	e0a2      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 80016ee:	e0a1      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2266      	movs	r2, #102	@ 0x66
 80016f4:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80016f8:	2204      	movs	r2, #4
 80016fa:	2184      	movs	r1, #132	@ 0x84
 80016fc:	69b8      	ldr	r0, [r7, #24]
 80016fe:	f7ff fe70 	bl	80013e2 <ifx_i2c_pl_read_register>
            break;
 8001702:	e097      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21b      	sxth	r3, r3
 800171a:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001722:	8aba      	ldrh	r2, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	d208      	bcs.n	800173a <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	22aa      	movs	r2, #170	@ 0xaa
 8001734:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001738:	e003      	b.n	8001742 <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2277      	movs	r2, #119	@ 0x77
 800173e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001748:	e074      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff feba 	bl	80014cc <ifx_i2c_pl_set_bit_rate>
 8001758:	4603      	mov	r3, r0
 800175a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 800175c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2211      	movs	r2, #17
 8001766:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001770:	e05f      	b.n	8001832 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001772:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001774:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001778:	d15b      	bne.n	8001832 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	22aa      	movs	r2, #170	@ 0xaa
 800177e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 800178a:	e052      	b.n	8001832 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2222      	movs	r2, #34	@ 0x22
 8001790:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2202      	movs	r2, #2
 800179a:	2181      	movs	r1, #129	@ 0x81
 800179c:	69b8      	ldr	r0, [r7, #24]
 800179e:	f7ff fe50 	bl	8001442 <ifx_i2c_pl_write_register>
            break;
 80017a2:	e047      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2288      	movs	r2, #136	@ 0x88
 80017a8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 80017ac:	2202      	movs	r2, #2
 80017ae:	2181      	movs	r1, #129	@ 0x81
 80017b0:	69b8      	ldr	r0, [r7, #24]
 80017b2:	f7ff fe16 	bl	80013e2 <ifx_i2c_pl_read_register>
            break;
 80017b6:	e03d      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	22aa      	movs	r2, #170	@ 0xaa
 80017bc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80017de:	8afa      	ldrh	r2, [r7, #22]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d805      	bhi.n	80017f0 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	8afa      	ldrh	r2, [r7, #22]
 80017e8:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 80017ec:	2300      	movs	r3, #0
 80017ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80017fe:	e019      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001800:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001802:	2b00      	cmp	r3, #0
 8001804:	d104      	bne.n	8001810 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800180e:	e003      	b.n	8001818 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 800181e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001820:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	69b8      	ldr	r0, [r7, #24]
 8001826:	47a0      	blx	r4
            break;
 8001828:	e004      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001832:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001834:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f aea6 	bne.w	800158a <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	372c      	adds	r7, #44	@ 0x2c
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	08001559 	.word	0x08001559

0800184c <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00c      	beq.n	8001878 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 800186c:	8879      	ldrh	r1, [r7, #2]
 800186e:	2300      	movs	r3, #0
 8001870:	2200      	movs	r2, #0
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001876:	e0f0      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800187e:	3b01      	subs	r3, #1
 8001880:	2b04      	cmp	r3, #4
 8001882:	f200 80dc 	bhi.w	8001a3e <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001886:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <ifx_i2c_pl_frame_event_handler+0x40>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	080018a9 	.word	0x080018a9
 8001890:	080018b1 	.word	0x080018b1
 8001894:	080018cf 	.word	0x080018cf
 8001898:	08001a1d 	.word	0x08001a1d
 800189c:	080018a1 	.word	0x080018a1
                ifx_i2c_pl_soft_reset(p_ctx);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f983 	bl	8001bac <ifx_i2c_pl_soft_reset>
            break;
 80018a6:	e0d8      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fe55 	bl	8001558 <ifx_i2c_pl_negotiation_event_handler>
            break;
 80018ae:	e0d4      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d105      	bne.n	80018ce <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 80018c2:	2204      	movs	r2, #4
 80018c4:	2182      	movs	r1, #130	@ 0x82
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fd8b 	bl	80013e2 <ifx_i2c_pl_read_register>
                    break;
 80018cc:	e0c5      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d159      	bne.n	800198c <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80018de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d052      	beq.n	800198c <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80018fe:	8a7b      	ldrh	r3, [r7, #18]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <ifx_i2c_pl_frame_event_handler+0xda>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 800190a:	8a7a      	ldrh	r2, [r7, #18]
 800190c:	429a      	cmp	r2, r3
 800190e:	d80a      	bhi.n	8001926 <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2204      	movs	r2, #4
 8001914:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001918:	8a7b      	ldrh	r3, [r7, #18]
 800191a:	461a      	mov	r2, r3
 800191c:	2180      	movs	r1, #128	@ 0x80
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fd5f 	bl	80013e2 <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001924:	e079      	b.n	8001a1a <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001926:	f004 fce8 	bl	80062fa <pal_os_timer_get_time_in_milliseconds>
 800192a:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d205      	bcs.n	8001950 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	d209      	bcs.n	8001970 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001962:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	493e      	ldr	r1, [pc, #248]	@ (8001a64 <ifx_i2c_pl_frame_event_handler+0x218>)
 800196a:	f004 fc11 	bl	8006190 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800196e:	e054      	b.n	8001a1a <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800198a:	e046      	b.n	8001a1a <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2204      	movs	r2, #4
 800199a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 80019aa:	2180      	movs	r1, #128	@ 0x80
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fd48 	bl	8001442 <ifx_i2c_pl_write_register>
            break;
 80019b2:	e052      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 80019b4:	f004 fca1 	bl	80062fa <pal_os_timer_get_time_in_milliseconds>
 80019b8:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d205      	bcs.n	80019de <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d209      	bcs.n	80019fe <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80019f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	491b      	ldr	r1, [pc, #108]	@ (8001a64 <ifx_i2c_pl_frame_event_handler+0x218>)
 80019f8:	f004 fbca 	bl	8006190 <pal_os_event_register_callback_oneshot>
            break;
 80019fc:	e02d      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	47a0      	blx	r4
            break;
 8001a18:	e01f      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
 8001a1a:	e01e      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	47a0      	blx	r4
            break;
 8001a3c:	e00d      	b.n	8001a5a <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	47a0      	blx	r4
            break;
 8001a58:	bf00      	nop
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	080014b3 	.word	0x080014b3

08001a68 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d10c      	bne.n	8001a98 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001a90:	461a      	mov	r2, r3
 8001a92:	f004 f9af 	bl	8005df4 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8001a96:	e010      	b.n	8001aba <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d10b      	bne.n	8001aba <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f004 f9db 	bl	8005e70 <pal_i2c_read>
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d11f      	bne.n	8001b18 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d110      	bne.n	8001b04 <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001afc:	461a      	mov	r2, r3
 8001afe:	f004 f9b7 	bl	8005e70 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8001b02:	e012      	b.n	8001b2a <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d10d      	bne.n	8001b2a <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001b0e:	2100      	movs	r1, #0
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fe9b 	bl	800184c <ifx_i2c_pl_frame_event_handler>
}
 8001b16:	e008      	b.n	8001b2a <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d103      	bne.n	8001b2a <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001b22:	2100      	movs	r1, #0
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fe91 	bl	800184c <ifx_i2c_pl_frame_event_handler>
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60fb      	str	r3, [r7, #12]
    switch (event)
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01e      	beq.n	8001b88 <ifx_i2c_pl_pal_event_handler+0x54>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db25      	blt.n	8001b9a <ifx_i2c_pl_pal_event_handler+0x66>
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d822      	bhi.n	8001b9a <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	b291      	uxth	r1, r2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	490b      	ldr	r1, [pc, #44]	@ (8001ba4 <ifx_i2c_pl_pal_event_handler+0x70>)
 8001b76:	f004 fb0b 	bl	8006190 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001b7a:	e00f      	b.n	8001b9c <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001b7c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff fe63 	bl	800184c <ifx_i2c_pl_frame_event_handler>
            break;
 8001b86:	e009      	b.n	8001b9c <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001b8e:	2332      	movs	r3, #50	@ 0x32
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4905      	ldr	r1, [pc, #20]	@ (8001ba8 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001b94:	f004 fafc 	bl	8006190 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001b98:	e000      	b.n	8001b9c <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001b9a:	bf00      	nop
    }
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	08001a69 	.word	0x08001a69
 8001ba8:	08001ac3 	.word	0x08001ac3

08001bac <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001bbe:	3b99      	subs	r3, #153	@ 0x99
 8001bc0:	2b0a      	cmp	r3, #10
 8001bc2:	d85e      	bhi.n	8001c82 <ifx_i2c_pl_soft_reset+0xd6>
 8001bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bcc <ifx_i2c_pl_soft_reset+0x20>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001bf9 	.word	0x08001bf9
 8001bd0:	08001c83 	.word	0x08001c83
 8001bd4:	08001c83 	.word	0x08001c83
 8001bd8:	08001c83 	.word	0x08001c83
 8001bdc:	08001c83 	.word	0x08001c83
 8001be0:	08001c83 	.word	0x08001c83
 8001be4:	08001c83 	.word	0x08001c83
 8001be8:	08001c83 	.word	0x08001c83
 8001bec:	08001c71 	.word	0x08001c71
 8001bf0:	08001c0d 	.word	0x08001c0d
 8001bf4:	08001c55 	.word	0x08001c55
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	22a2      	movs	r2, #162	@ 0xa2
 8001bfc:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001c00:	2204      	movs	r2, #4
 8001c02:	2182      	movs	r1, #130	@ 0x82
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fbec 	bl	80013e2 <ifx_i2c_pl_read_register>
            break;
 8001c0a:	e03b      	b.n	8001c84 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d10b      	bne.n	8001c40 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	22a3      	movs	r2, #163	@ 0xa3
 8001c2c:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2202      	movs	r2, #2
 8001c36:	2188      	movs	r1, #136	@ 0x88
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fc02 	bl	8001442 <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001c3e:	e021      	b.n	8001c84 <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001c48:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fdfd 	bl	800184c <ifx_i2c_pl_frame_event_handler>
            break;
 8001c52:	e017      	b.n	8001c84 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	22a1      	movs	r2, #161	@ 0xa1
 8001c58:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001c62:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <ifx_i2c_pl_soft_reset+0xe0>)
 8001c6a:	f004 fa91 	bl	8006190 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001c6e:	e009      	b.n	8001c84 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fde6 	bl	800184c <ifx_i2c_pl_frame_event_handler>
            break;
 8001c80:	e000      	b.n	8001c84 <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8001c82:	bf00      	nop
    }
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	08001bad 	.word	0x08001bad

08001c90 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001c9a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001c9e:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8001ca8:	491c      	ldr	r1, [pc, #112]	@ (8001d1c <ifx_i2c_prl_init+0x8c>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f001 faa0 	bl	80031f0 <ifx_i2c_tl_init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12b      	bne.n	8001d0e <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d104      	bne.n	8001cd0 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001cce:	e003      	b.n	8001cd8 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2211      	movs	r2, #17
 8001cfc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2211      	movs	r2, #17
 8001d04:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	81fb      	strh	r3, [r7, #14]
 8001d0c:	e000      	b.n	8001d10 <ifx_i2c_prl_init+0x80>
            break;
 8001d0e:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8001d10:	89fb      	ldrh	r3, [r7, #14]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08002899 	.word	0x08002899

08001d20 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001d2a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001d2e:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d12e      	bne.n	8001d98 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001d46:	2b33      	cmp	r3, #51	@ 0x33
 8001d48:	d109      	bne.n	8001d5e <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	81fb      	strh	r3, [r7, #14]
            break;
 8001d5c:	e01d      	b.n	8001d9a <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d118      	bne.n	8001d9a <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001d6e:	2b22      	cmp	r3, #34	@ 0x22
 8001d70:	d113      	bne.n	8001d9a <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2208      	movs	r2, #8
 8001d76:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001d88:	2301      	movs	r3, #1
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fd83 	bl	8002898 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8001d92:	2300      	movs	r3, #0
 8001d94:	81fb      	strh	r3, [r7, #14]
            break;
 8001d96:	e000      	b.n	8001d9a <ifx_i2c_prl_close+0x7a>
            break;
 8001d98:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001db4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001db8:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05a      	beq.n	8001e76 <ifx_i2c_prl_transceive+0xd2>
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d057      	beq.n	8001e76 <ifx_i2c_prl_transceive+0xd2>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d152      	bne.n	8001e76 <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001dd6:	2b11      	cmp	r3, #17
 8001dd8:	d10d      	bne.n	8001df6 <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2208      	movs	r2, #8
 8001de8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8001df4:	e003      	b.n	8001dfe <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d006      	beq.n	8001e28 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001e20:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d103      	bne.n	8001e30 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e2e:	e003      	b.n	8001e38 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	1d1a      	adds	r2, r3, #4
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a3a      	ldr	r2, [r7, #32]
 8001e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2211      	movs	r2, #17
 8001e62:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 fd13 	bl	8002898 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8001e72:	2300      	movs	r3, #0
 8001e74:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 8001e76:	8afb      	ldrh	r3, [r7, #22]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b09e      	sub	sp, #120	@ 0x78
 8001e84:	af06      	add	r7, sp, #24
 8001e86:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001e88:	f240 1307 	movw	r3, #263	@ 0x107
 8001e8c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8001e90:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <ifx_i2c_prl_prf+0xa4>)
 8001e92:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001e96:	461d      	mov	r5, r3
 8001e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	f107 020a 	add.w	r2, r7, #10
 8001eac:	f107 010c 	add.w	r1, r7, #12
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 f8a7 	bl	8006004 <pal_os_datastore_read>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8001ebc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001ec4:	f240 1307 	movw	r3, #263	@ 0x107
 8001ec8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8001ecc:	e024      	b.n	8001f18 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001ece:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001ed8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001edc:	f107 010c 	add.w	r1, r7, #12
 8001ee0:	2528      	movs	r5, #40	@ 0x28
 8001ee2:	9504      	str	r5, [sp, #16]
 8001ee4:	9203      	str	r2, [sp, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	9202      	str	r2, [sp, #8]
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2310      	movs	r3, #16
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4623      	mov	r3, r4
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f003 fe9a 	bl	8005c2e <pal_crypt_tls_prf_sha256>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001f00:	f240 1307 	movw	r3, #263	@ 0x107
 8001f04:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00a f942 	bl	800c19c <memset>

    } while (FALSE);
    return (return_status);
 8001f18:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3760      	adds	r7, #96	@ 0x60
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bdb0      	pop	{r4, r5, r7, pc}
 8001f24:	0800cdfc 	.word	0x0800cdfc

08001f28 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	461a      	mov	r2, r3
 8001f34:	460b      	mov	r3, r1
 8001f36:	817b      	strh	r3, [r7, #10]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7a7a      	ldrb	r2, [r7, #9]
 8001f40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	33a1      	adds	r3, #161	@ 0xa1
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fcab 	bl	80058a6 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	33a6      	adds	r3, #166	@ 0xa6
 8001f60:	897a      	ldrh	r2, [r7, #10]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fc87 	bl	8005878 <optiga_common_set_uint16>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b08e      	sub	sp, #56	@ 0x38
 8001f76:	af06      	add	r7, sp, #24
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001f82:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001f86:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8001f88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f8c:	88f9      	ldrh	r1, [r7, #6]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff ffc9 	bl	8001f28 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3378      	adds	r3, #120	@ 0x78
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fc7d 	bl	80058a6 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8001fb6:	88f9      	ldrh	r1, [r7, #6]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	9205      	str	r2, [sp, #20]
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	9204      	str	r2, [sp, #16]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	9203      	str	r2, [sp, #12]
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f003 fe4f 	bl	8005c7a <pal_crypt_encrypt_aes128_ccm>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	83fb      	strh	r3, [r7, #30]
 8001fe6:	e000      	b.n	8001fea <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8001fe8:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	@ 0x38
 8001ff8:	af06      	add	r7, sp, #24
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002004:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002008:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 800200a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800200e:	88f9      	ldrh	r1, [r7, #6]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff ff88 	bl	8001f28 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8002018:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800201c:	3358      	adds	r3, #88	@ 0x58
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	3304      	adds	r3, #4
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fc39 	bl	80058a6 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	3308      	adds	r3, #8
 8002038:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 800203a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800203e:	3358      	adds	r3, #88	@ 0x58
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8002048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800204a:	9205      	str	r2, [sp, #20]
 800204c:	2208      	movs	r2, #8
 800204e:	9204      	str	r2, [sp, #16]
 8002050:	2208      	movs	r2, #8
 8002052:	9203      	str	r2, [sp, #12]
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	2308      	movs	r3, #8
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4603      	mov	r3, r0
 8002062:	460a      	mov	r2, r1
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	2000      	movs	r0, #0
 8002068:	f003 fe28 	bl	8005cbc <pal_crypt_decrypt_aes128_ccm>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8002072:	2300      	movs	r3, #0
 8002074:	83fb      	strh	r3, [r7, #30]
 8002076:	e000      	b.n	800207a <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8002078:	bf00      	nop
    } while (FALSE);
    return (return_status);
 800207a:	8bfb      	ldrh	r3, [r7, #30]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af02      	add	r7, sp, #8
 800208a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 800208c:	2300      	movs	r3, #0
 800208e:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d134      	bne.n	800210c <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80020c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3354      	adds	r3, #84	@ 0x54
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	2201      	movs	r2, #1
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f001 f8a9 	bl	800324c <ifx_i2c_tl_transceive>
 80020fa:	4603      	mov	r3, r0
 80020fc:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002108:	801a      	strh	r2, [r3, #0]
 800210a:	e00d      	b.n	8002128 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002112:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	22ff      	movs	r2, #255	@ 0xff
 8002122:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8002126:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8002128:	89fb      	ldrh	r3, [r7, #14]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b08a      	sub	sp, #40	@ 0x28
 8002136:	af04      	add	r7, sp, #16
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800213c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002140:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 800214c:	2b55      	cmp	r3, #85	@ 0x55
 800214e:	f000 8178 	beq.w	8002442 <ifx_i2c_prl_do_handshake+0x310>
 8002152:	2b55      	cmp	r3, #85	@ 0x55
 8002154:	f300 817f 	bgt.w	8002456 <ifx_i2c_prl_do_handshake+0x324>
 8002158:	2b44      	cmp	r3, #68	@ 0x44
 800215a:	f000 8100 	beq.w	800235e <ifx_i2c_prl_do_handshake+0x22c>
 800215e:	2b44      	cmp	r3, #68	@ 0x44
 8002160:	f300 8179 	bgt.w	8002456 <ifx_i2c_prl_do_handshake+0x324>
 8002164:	2b33      	cmp	r3, #51	@ 0x33
 8002166:	f000 8095 	beq.w	8002294 <ifx_i2c_prl_do_handshake+0x162>
 800216a:	2b33      	cmp	r3, #51	@ 0x33
 800216c:	f300 8173 	bgt.w	8002456 <ifx_i2c_prl_do_handshake+0x324>
 8002170:	2b11      	cmp	r3, #17
 8002172:	d002      	beq.n	800217a <ifx_i2c_prl_do_handshake+0x48>
 8002174:	2b22      	cmp	r3, #34	@ 0x22
 8002176:	d034      	beq.n	80021e2 <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 8002178:	e16d      	b.n	8002456 <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2226      	movs	r2, #38	@ 0x26
 800219e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3354      	adds	r3, #84	@ 0x54
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	2202      	movs	r2, #2
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f001 f847 	bl	800324c <ifx_i2c_tl_transceive>
 80021be:	4603      	mov	r3, r0
 80021c0:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 80021c2:	8afb      	ldrh	r3, [r7, #22]
 80021c4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80021c8:	d106      	bne.n	80021d8 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2255      	movs	r2, #85	@ 0x55
 80021ce:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80021d2:	2301      	movs	r3, #1
 80021d4:	613b      	str	r3, [r7, #16]
                    break;
 80021d6:	e13f      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2222      	movs	r2, #34	@ 0x22
 80021dc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80021e0:	e13a      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002204:	2b01      	cmp	r3, #1
 8002206:	d109      	bne.n	800221c <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002208:	f240 1307 	movw	r3, #263	@ 0x107
 800220c:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	22ff      	movs	r2, #255	@ 0xff
 8002212:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
                    break;
 800221a:	e11d      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002222:	2b26      	cmp	r3, #38	@ 0x26
 8002224:	d108      	bne.n	8002238 <ifx_i2c_prl_do_handshake+0x106>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8002234:	2b01      	cmp	r3, #1
 8002236:	d004      	beq.n	8002242 <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2255      	movs	r2, #85	@ 0x55
 800223c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002240:	e10a      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3322      	adds	r3, #34	@ 0x22
 8002246:	4618      	mov	r0, r3
 8002248:	f003 fb4e 	bl	80058e8 <optiga_common_get_uint32>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	3302      	adds	r3, #2
 8002264:	2220      	movs	r2, #32
 8002266:	4619      	mov	r1, r3
 8002268:	f009 ffdd 	bl	800c226 <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fe07 	bl	8001e80 <ifx_i2c_prl_prf>
 8002272:	4603      	mov	r3, r0
 8002274:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002276:	8afb      	ldrh	r3, [r7, #22]
 8002278:	f240 1207 	movw	r2, #263	@ 0x107
 800227c:	4293      	cmp	r3, r2
 800227e:	d104      	bne.n	800228a <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2255      	movs	r2, #85	@ 0x55
 8002284:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002288:	e0e6      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2233      	movs	r2, #51	@ 0x33
 800228e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002292:	e0e1      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2208      	movs	r2, #8
 8002298:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3380      	adds	r3, #128	@ 0x80
 80022aa:	2220      	movs	r2, #32
 80022ac:	4619      	mov	r1, r3
 80022ae:	f009 ffba 	bl	800c226 <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f003 faf1 	bl	80058a6 <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	2224      	movs	r2, #36	@ 0x24
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fe49 	bl	8001f72 <ifx_i2c_prl_encrypt_msg>
 80022e0:	4603      	mov	r3, r0
 80022e2:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 80022e4:	8afb      	ldrh	r3, [r7, #22]
 80022e6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80022ea:	d106      	bne.n	80022fa <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2255      	movs	r2, #85	@ 0x55
 80022f0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
                    break;
 80022f8:	e0ae      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f003 fac7 	bl	80058a6 <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2231      	movs	r2, #49	@ 0x31
 800231c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3354      	adds	r3, #84	@ 0x54
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	2231      	movs	r2, #49	@ 0x31
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 ff88 	bl	800324c <ifx_i2c_tl_transceive>
 800233c:	4603      	mov	r3, r0
 800233e:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002340:	8afb      	ldrh	r3, [r7, #22]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2255      	movs	r2, #85	@ 0x55
 800234a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800234e:	2301      	movs	r3, #1
 8002350:	613b      	str	r3, [r7, #16]
                    break;
 8002352:	e081      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2244      	movs	r2, #68	@ 0x44
 8002358:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800235c:	e07c      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b08      	cmp	r3, #8
 8002364:	d104      	bne.n	8002370 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 800236c:	2b31      	cmp	r3, #49	@ 0x31
 800236e:	d006      	beq.n	800237e <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2255      	movs	r2, #85	@ 0x55
 8002374:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002378:	2301      	movs	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
                    break;
 800237c:	e06c      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fab0 	bl	80058e8 <optiga_common_get_uint32>
 8002388:	4602      	mov	r2, r0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	1d59      	adds	r1, r3, #5
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80023a0:	9203      	str	r2, [sp, #12]
 80023a2:	2224      	movs	r2, #36	@ 0x24
 80023a4:	9202      	str	r2, [sp, #8]
 80023a6:	2210      	movs	r2, #16
 80023a8:	9201      	str	r2, [sp, #4]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	2224      	movs	r2, #36	@ 0x24
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fe1f 	bl	8001ff4 <ifx_i2c_prl_decrypt_msg>
 80023b6:	4603      	mov	r3, r0
 80023b8:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 80023ba:	8afb      	ldrh	r3, [r7, #22]
 80023bc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80023c0:	d106      	bne.n	80023d0 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2255      	movs	r2, #85	@ 0x55
 80023c6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	613b      	str	r3, [r7, #16]
                    break;
 80023ce:	e043      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fa63 	bl	80058a6 <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	33a8      	adds	r3, #168	@ 0xa8
 80023ea:	2220      	movs	r2, #32
 80023ec:	4619      	mov	r1, r3
 80023ee:	f009 fec5 	bl	800c17c <memcmp>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80023f8:	f240 1307 	movw	r3, #263	@ 0x107
 80023fc:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2255      	movs	r2, #85	@ 0x55
 8002402:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002406:	2301      	movs	r3, #1
 8002408:	613b      	str	r3, [r7, #16]
                    break;
 800240a:	e025      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	2204      	movs	r2, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f009 feaf 	bl	800c17c <memcmp>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002424:	f240 1307 	movw	r3, #263	@ 0x107
 8002428:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2255      	movs	r2, #85	@ 0x55
 800242e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002432:	2301      	movs	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
                    break;
 8002436:	e00f      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002440:	e00a      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002442:	f240 1307 	movw	r3, #263	@ 0x107
 8002446:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	22ff      	movs	r2, #255	@ 0xff
 800244c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
            break;
 8002454:	e000      	b.n	8002458 <ifx_i2c_prl_do_handshake+0x326>
            break;
 8002456:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f43f ae73 	beq.w	8002146 <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 8002460:	8afb      	ldrh	r3, [r7, #22]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b094      	sub	sp, #80	@ 0x50
 800246e:	af02      	add	r7, sp, #8
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800247a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800247e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002488:	2b01      	cmp	r3, #1
 800248a:	d003      	beq.n	8002494 <ifx_i2c_prl_do_manage_context+0x2a>
 800248c:	2b02      	cmp	r3, #2
 800248e:	f000 80eb 	beq.w	8002668 <ifx_i2c_prl_do_manage_context+0x1fe>
 8002492:	e1df      	b.n	8002854 <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800249a:	b25b      	sxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	da07      	bge.n	80024b0 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 80024ae:	e1ed      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80024b6:	2b22      	cmp	r3, #34	@ 0x22
 80024b8:	d10c      	bne.n	80024d4 <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2260      	movs	r2, #96	@ 0x60
 80024be:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 80024d2:	e0a6      	b.n	8002622 <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80024da:	2b11      	cmp	r3, #17
 80024dc:	f040 8093 	bne.w	8002606 <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80024e6:	885b      	ldrh	r3, [r3, #2]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d033      	beq.n	8002554 <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2234      	movs	r2, #52	@ 0x34
 80024f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80024fa:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80024fc:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3354      	adds	r3, #84	@ 0x54
 8002502:	461a      	mov	r2, r3
 8002504:	f003 fd7e 	bl	8006004 <pal_os_datastore_read>
 8002508:	4603      	mov	r3, r0
 800250a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 800250e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002512:	2b01      	cmp	r3, #1
 8002514:	f000 81b7 	beq.w	8002886 <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800252a:	2b00      	cmp	r3, #0
 800252c:	d130      	bne.n	8002590 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 800254c:	2300      	movs	r3, #0
 800254e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002552:	e19b      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800255a:	2b00      	cmp	r3, #0
 800255c:	d112      	bne.n	8002584 <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 800257c:	2300      	movs	r3, #0
 800257e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002582:	e183      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2268      	movs	r2, #104	@ 0x68
 8002594:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f003 f97e 	bl	80058a6 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2205      	movs	r2, #5
 80025ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2205      	movs	r2, #5
 80025bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80025ce:	885b      	ldrh	r3, [r3, #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d026      	beq.n	8002622 <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	2234      	movs	r2, #52	@ 0x34
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f009 fddd 	bl	800c19c <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80025e8:	885b      	ldrh	r3, [r3, #2]
 80025ea:	f107 0110 	add.w	r1, r7, #16
 80025ee:	2234      	movs	r2, #52	@ 0x34
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fc89 	bl	8005f08 <pal_os_datastore_write>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 80025fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002600:	2b01      	cmp	r3, #1
 8002602:	d10e      	bne.n	8002622 <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 8002604:	e142      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	22ff      	movs	r2, #255	@ 0xff
 800260a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2207      	movs	r2, #7
 8002612:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800261c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002620:	e134      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3354      	adds	r3, #84	@ 0x54
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4603      	mov	r3, r0
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fe05 	bl	800324c <ifx_i2c_tl_transceive>
 8002642:	4603      	mov	r3, r0
 8002644:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 8002648:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 811c 	bne.w	800288a <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 800265a:	2300      	movs	r3, #0
 800265c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002666:	e111      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 800267a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800267e:	2b6c      	cmp	r3, #108	@ 0x6c
 8002680:	d133      	bne.n	80026ea <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002688:	2b11      	cmp	r3, #17
 800268a:	d12e      	bne.n	80026ea <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d12b      	bne.n	80026ea <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3308      	adds	r3, #8
 800269c:	2228      	movs	r2, #40	@ 0x28
 800269e:	4619      	mov	r1, r3
 80026a0:	f009 fdc1 	bl	800c226 <memcpy>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2204      	movs	r2, #4
 80026e4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80026e8:	e0ac      	b.n	8002844 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 80026ea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	f040 808b 	bne.w	800280a <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 80026fa:	2b22      	cmp	r3, #34	@ 0x22
 80026fc:	f040 8085 	bne.w	800280a <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 8081 	bne.w	800280a <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f103 0008 	add.w	r0, r3, #8
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3358      	adds	r3, #88	@ 0x58
 800271a:	2228      	movs	r2, #40	@ 0x28
 800271c:	4619      	mov	r1, r3
 800271e:	f009 fd82 	bl	800c226 <memcpy>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800275c:	885b      	ldrh	r3, [r3, #2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02e      	beq.n	80027c0 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2234      	movs	r2, #52	@ 0x34
 8002766:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002770:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002772:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800277a:	461a      	mov	r2, r3
 800277c:	f003 fbc4 	bl	8005f08 <pal_os_datastore_write>
 8002780:	4603      	mov	r3, r0
 8002782:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	22ff      	movs	r2, #255	@ 0xff
 8002792:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2207      	movs	r2, #7
 800279a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80027ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
                        break;
 80027be:	e065      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3358      	adds	r3, #88	@ 0x58
 80027c4:	2228      	movs	r2, #40	@ 0x28
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f009 fce7 	bl	800c19c <memset>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	649a      	str	r2, [r3, #72]	@ 0x48
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002808:	e01c      	b.n	8002844 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2234      	movs	r2, #52	@ 0x34
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f009 fcc3 	bl	800c19c <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800281c:	885b      	ldrh	r3, [r3, #2]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002828:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 800282a:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800282c:	2234      	movs	r2, #52	@ 0x34
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fb6a 	bl	8005f08 <pal_os_datastore_write>
 8002834:	4603      	mov	r3, r0
 8002836:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 800283a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800283e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002842:	e023      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 800284c:	2300      	movs	r3, #0
 800284e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002852:	e01b      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	22ff      	movs	r2, #255	@ 0xff
 8002858:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2207      	movs	r2, #7
 8002860:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002884:	e002      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <ifx_i2c_prl_do_manage_context+0x422>
                break;
 800288a:	bf00      	nop
    }
  return (return_status);
 800288c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002890:	4618      	mov	r0, r3
 8002892:	3748      	adds	r7, #72	@ 0x48
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b097      	sub	sp, #92	@ 0x5c
 800289c:	af04      	add	r7, sp, #16
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	461a      	mov	r2, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
 80028a8:	4613      	mov	r3, r2
 80028aa:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80028b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80028b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <ifx_i2c_prl_event_handler+0x36>
 80028c4:	897b      	ldrh	r3, [r7, #10]
 80028c6:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d029      	beq.n	8002922 <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	22ff      	movs	r2, #255	@ 0xff
 80028d2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d105      	bne.n	80028ec <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f240 1207 	movw	r2, #263	@ 0x107
 80028e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80028ea:	e016      	b.n	800291a <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10d      	bne.n	8002912 <ifx_i2c_prl_event_handler+0x7a>
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028fc:	d009      	beq.n	8002912 <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002904:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002910:	e003      	b.n	800291a <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	897a      	ldrh	r2, [r7, #10]
 8002916:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2207      	movs	r2, #7
 800291e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002928:	3b01      	subs	r3, #1
 800292a:	2b07      	cmp	r3, #7
 800292c:	f200 8445 	bhi.w	80031ba <ifx_i2c_prl_event_handler+0x922>
 8002930:	a201      	add	r2, pc, #4	@ (adr r2, 8002938 <ifx_i2c_prl_event_handler+0xa0>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002959 	.word	0x08002959
 800293c:	080029c7 	.word	0x080029c7
 8002940:	08002dd9 	.word	0x08002dd9
 8002944:	08002b07 	.word	0x08002b07
 8002948:	08002a0b 	.word	0x08002a0b
 800294c:	08003071 	.word	0x08003071
 8002950:	0800318b 	.word	0x0800318b
 8002954:	08002975 	.word	0x08002975
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002962:	2300      	movs	r3, #0
 8002964:	2200      	movs	r2, #0
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	47a0      	blx	r4
                exit_machine = FALSE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002970:	f000 bc34 	b.w	80031dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002974:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002978:	893a      	ldrh	r2, [r7, #8]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fd74 	bl	800246a <ifx_i2c_prl_do_manage_context>
 8002982:	4603      	mov	r3, r0
 8002984:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002988:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8424 	beq.w	80031da <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22ff      	movs	r2, #255	@ 0xff
 8002996:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2207      	movs	r2, #7
 800299e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80029b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 80029c2:	f000 bc0a 	b.w	80031da <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db09      	blt.n	80029e6 <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d011      	beq.n	8002a00 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2205      	movs	r2, #5
 80029ea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2211      	movs	r2, #17
 80029f2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 80029fe:	e3ed      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2204      	movs	r2, #4
 8002a04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002a08:	e3e8      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	2228      	movs	r2, #40	@ 0x28
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f009 fbc2 	bl	800c19c <memset>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	2234      	movs	r2, #52	@ 0x34
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f009 fba5 	bl	800c19c <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a58:	885b      	ldrh	r3, [r3, #2]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a64:	885b      	ldrh	r3, [r3, #2]
 8002a66:	f107 0110 	add.w	r1, r7, #16
 8002a6a:	2234      	movs	r2, #52	@ 0x34
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fa4b 	bl	8005f08 <pal_os_datastore_write>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002a78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01d      	beq.n	8002abc <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	22ff      	movs	r2, #255	@ 0xff
 8002a84:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002a9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f240 1207 	movw	r2, #263	@ 0x107
 8002ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002aba:	e38f      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff fb37 	bl	8002132 <ifx_i2c_prl_do_handshake>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002aca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ace:	f240 1207 	movw	r2, #263	@ 0x107
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d109      	bne.n	8002aea <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002adc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002ae8:	e378      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d104      	bne.n	8002afe <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2204      	movs	r2, #4
 8002af8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002afc:	e36e      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002b04:	e36a      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	f043 0320 	orr.w	r3, r3, #32
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d006      	beq.n	8002b3e <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002b36:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d122      	bne.n	8002b84 <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	3301      	adds	r3, #1
 8002b44:	f113 0f10 	cmn.w	r3, #16
 8002b48:	d914      	bls.n	8002b74 <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10f      	bne.n	8002b74 <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2205      	movs	r2, #5
 8002b60:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2211      	movs	r2, #17
 8002b6e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002b72:	e333      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7e:	320d      	adds	r2, #13
 8002b80:	b292      	uxth	r2, r2
 8002b82:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002ba4:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	f040 80c2 	bne.w	8002d32 <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f113 0f10 	cmn.w	r3, #16
 8002bb8:	d914      	bls.n	8002be4 <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2205      	movs	r2, #5
 8002bd0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2211      	movs	r2, #17
 8002bde:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002be2:	e2fb      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d13f      	bne.n	8002c6e <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf2:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002c02:	3305      	adds	r3, #5
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002c0a:	9203      	str	r2, [sp, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	9202      	str	r2, [sp, #8]
 8002c10:	2200      	movs	r2, #0
 8002c12:	9201      	str	r2, [sp, #4]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4623      	mov	r3, r4
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff f9ea 	bl	8001ff4 <ifx_i2c_prl_decrypt_msg>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c2a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002c2e:	d118      	bne.n	8002c62 <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	22ff      	movs	r2, #255	@ 0xff
 8002c34:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002c60:	e2bc      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002c6c:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f002 fe0a 	bl	80058a6 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002c96:	1d59      	adds	r1, r3, #5
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4603      	mov	r3, r0
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff f960 	bl	8001f72 <ifx_i2c_prl_encrypt_msg>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002cb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cbc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002cc0:	d118      	bne.n	8002cf4 <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	22ff      	movs	r2, #255	@ 0xff
 8002cc6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2207      	movs	r2, #7
 8002cce:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002cf2:	e273      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002cfe:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8002d10:	4413      	add	r3, r2
 8002d12:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002d14:	3308      	adds	r3, #8
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4603      	mov	r3, r0
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fa91 	bl	800324c <ifx_i2c_tl_transceive>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002d30:	e021      	b.n	8002d76 <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3e:	3304      	adds	r3, #4
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002d46:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002d4c:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4603      	mov	r3, r0
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fa6e 	bl	800324c <ifx_i2c_tl_transceive>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8002d76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d7a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002d7e:	d11d      	bne.n	8002dbc <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	22ff      	movs	r2, #255	@ 0xff
 8002d84:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002db6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8002dba:	e20f      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002dd6:	e201      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fd82 	bl	80058e8 <optiga_common_get_uint32>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d118      	bne.n	8002e22 <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	22ff      	movs	r2, #255	@ 0xff
 8002df4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002e20:	e1dc      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d040      	beq.n	8002eb0 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b40      	cmp	r3, #64	@ 0x40
 8002e34:	d003      	beq.n	8002e3e <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002e3a:	2b44      	cmp	r3, #68	@ 0x44
 8002e3c:	d10c      	bne.n	8002e58 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002e3e:	893b      	ldrh	r3, [r7, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d004      	beq.n	8002e4e <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d004      	beq.n	8002e58 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d109      	bne.n	8002e6c <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e6a:	e018      	b.n	8002e9e <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002e7c:	2b11      	cmp	r3, #17
 8002e7e:	d109      	bne.n	8002e94 <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e92:	e004      	b.n	8002e9e <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2206      	movs	r2, #6
 8002ea2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	22ff      	movs	r2, #255	@ 0xff
 8002eaa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8002eae:	e195      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d018      	beq.n	8002ef0 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	22ff      	movs	r2, #255	@ 0xff
 8002ec2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2207      	movs	r2, #7
 8002eca:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002edc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002eee:	e175      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d006      	beq.n	8002f0a <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	f040 8082 	bne.w	800300e <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	2b0d      	cmp	r3, #13
 8002f0e:	d818      	bhi.n	8002f42 <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	22ff      	movs	r2, #255	@ 0xff
 8002f14:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002f40:	e14c      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4a:	3303      	adds	r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d805      	bhi.n	8002f5c <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d818      	bhi.n	8002f8e <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	22ff      	movs	r2, #255	@ 0xff
 8002f60:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2207      	movs	r2, #7
 8002f68:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002f8c:	e126      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa0:	3a0d      	subs	r2, #13
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002fb0:	8818      	ldrh	r0, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002fba:	3305      	adds	r3, #5
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002fc2:	9203      	str	r2, [sp, #12]
 8002fc4:	2224      	movs	r2, #36	@ 0x24
 8002fc6:	9202      	str	r2, [sp, #8]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	9201      	str	r2, [sp, #4]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	4623      	mov	r3, r4
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff f80e 	bl	8001ff4 <ifx_i2c_prl_decrypt_msg>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002fde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fe2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002fe6:	d108      	bne.n	8002ffa <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2206      	movs	r2, #6
 8002fec:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8002ff8:	e0f0      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 800300a:	bf00      	nop
            break;
 800300c:	e0e6      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d81c      	bhi.n	800304e <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2207      	movs	r2, #7
 8003018:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	22ff      	movs	r2, #255	@ 0xff
 8003020:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003034:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 8003038:	e0d0      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 800304c:	e0c6      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	3a01      	subs	r2, #1
 800305a:	b292      	uxth	r2, r2
 800305c:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 800306e:	e0b5      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b44      	cmp	r3, #68	@ 0x44
 8003076:	d166      	bne.n	8003146 <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d104      	bne.n	8003088 <ifx_i2c_prl_event_handler+0x7f0>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003084:	2b02      	cmp	r3, #2
 8003086:	d918      	bls.n	80030ba <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	22ff      	movs	r2, #255	@ 0xff
 800308c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2207      	movs	r2, #7
 8003094:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80030a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80030b8:	e090      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d004      	beq.n	80030ce <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d136      	bne.n	800313c <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80030d4:	3301      	adds	r3, #1
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d91c      	bls.n	800312a <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	22ff      	movs	r2, #255	@ 0xff
 80030f4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2207      	movs	r2, #7
 80030fc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800310e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8003128:	e058      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2204      	movs	r2, #4
 800312e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2204      	movs	r2, #4
 8003136:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 800313a:	e04f      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2207      	movs	r2, #7
 8003140:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003144:	e04a      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 800314c:	2b03      	cmp	r3, #3
 800314e:	d117      	bne.n	8003180 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	22ff      	movs	r2, #255	@ 0xff
 8003154:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2207      	movs	r2, #7
 800315c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800316e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2207      	movs	r2, #7
 8003184:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003188:	e028      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003190:	2bff      	cmp	r3, #255	@ 0xff
 8003192:	d00d      	beq.n	80031b0 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7fe ff75 	bl	8002084 <ifx_i2c_prl_send_alert>
 800319a:	4603      	mov	r3, r0
 800319c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	22ff      	movs	r2, #255	@ 0xff
 80031a4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 80031ae:	e015      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80031b8:	e010      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80031c6:	2300      	movs	r3, #0
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	47a0      	blx	r4
                exit_machine = FALSE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80031d8:	e000      	b.n	80031dc <ifx_i2c_prl_event_handler+0x944>
            break;
 80031da:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 80031dc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	f43f ab9e 	beq.w	8002922 <ifx_i2c_prl_event_handler+0x8a>
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	374c      	adds	r7, #76	@ 0x4c
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}

080031f0 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8003202:	4911      	ldr	r1, [pc, #68]	@ (8003248 <ifx_i2c_tl_init+0x58>)
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fd fc11 	bl	8000a2c <ifx_i2c_dl_init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003210:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003214:	e014      	b.n	8003240 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8003234:	3b06      	subs	r3, #6
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08003531 	.word	0x08003531

0800324c <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 800325c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003260:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <ifx_i2c_tl_transceive+0xa0>
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03e      	beq.n	80032ec <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003274:	2b01      	cmp	r3, #1
 8003276:	d138      	bne.n	80032ea <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003280:	f003 f83b 	bl	80062fa <pal_os_timer_get_time_in_milliseconds>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a3a      	ldr	r2, [r7, #32]
 80032b0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80032da:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f866 	bl	80033b0 <ifx_i2c_tl_send_next_fragment>
 80032e4:	4603      	mov	r3, r0
 80032e6:	82fb      	strh	r3, [r7, #22]
 80032e8:	e000      	b.n	80032ec <ifx_i2c_tl_transceive+0xa0>
            break;
 80032ea:	bf00      	nop
    } while (FALSE);
    return (status);
 80032ec:	8afb      	ldrh	r3, [r7, #22]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003308:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800330c:	e00f      	b.n	800332e <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f842 	bl	80033b0 <ifx_i2c_tl_send_next_fragment>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003344:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <ifx_i2c_tl_calculate_pctr+0x38>
 8003360:	897a      	ldrh	r2, [r7, #10]
 8003362:	89bb      	ldrh	r3, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d802      	bhi.n	800336e <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e019      	b.n	80033a2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <ifx_i2c_tl_calculate_pctr+0x50>
 8003378:	897a      	ldrh	r2, [r7, #10]
 800337a:	89bb      	ldrh	r3, [r7, #12]
 800337c:	429a      	cmp	r2, r3
 800337e:	d902      	bls.n	8003386 <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e00d      	b.n	80033a2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <ifx_i2c_tl_calculate_pctr+0x68>
 8003390:	897a      	ldrh	r2, [r7, #10]
 8003392:	89bb      	ldrh	r3, [r7, #12]
 8003394:	429a      	cmp	r2, r3
 8003396:	d902      	bls.n	800339e <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003398:	2302      	movs	r3, #2
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	e001      	b.n	80033a2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 800339e:	2304      	movs	r3, #4
 80033a0:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80033be:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffb8 	bl	8003336 <ifx_i2c_tl_calculate_pctr>
 80033c6:	4603      	mov	r3, r0
 80033c8:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80033d0:	461a      	mov	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	429a      	cmp	r2, r3
 80033de:	da07      	bge.n	80033f0 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 80033f0:	7b7b      	ldrb	r3, [r7, #13]
 80033f2:	f043 0308 	orr.w	r3, r3, #8
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 8003404:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 8003412:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003414:	89fa      	ldrh	r2, [r7, #14]
 8003416:	4619      	mov	r1, r3
 8003418:	f008 ff05 	bl	800c226 <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003422:	89fb      	ldrh	r3, [r7, #14]
 8003424:	4413      	add	r3, r2
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	3301      	adds	r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fb36 	bl	8000aa8 <ifx_i2c_dl_send_frame>
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2207      	movs	r2, #7
 8003456:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fb1e 	bl	8000aa8 <ifx_i2c_dl_send_frame>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	460a      	mov	r2, r1
 8003482:	71fb      	strb	r3, [r7, #7]
 8003484:	4613      	mov	r3, r2
 8003486:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003488:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800348c:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b07      	cmp	r3, #7
 8003492:	d00b      	beq.n	80034ac <ifx_i2c_tl_check_chaining_error+0x34>
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <ifx_i2c_tl_check_chaining_error+0x34>
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d005      	beq.n	80034ac <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d002      	beq.n	80034ac <ifx_i2c_tl_check_chaining_error+0x34>
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d110      	bne.n	80034ce <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	4a0b      	ldr	r2, [pc, #44]	@ (80034dc <ifx_i2c_tl_check_chaining_error+0x64>)
 80034b0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80034b4:	79ba      	ldrb	r2, [r7, #6]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d007      	beq.n	80034ca <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	4a07      	ldr	r2, [pc, #28]	@ (80034dc <ifx_i2c_tl_check_chaining_error+0x64>)
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80034c4:	79ba      	ldrb	r2, [r7, #6]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d101      	bne.n	80034ce <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 80034ca:	2300      	movs	r3, #0
 80034cc:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 80034ce:	89fb      	ldrh	r3, [r7, #14]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	0800cf60 	.word	0x0800cf60

080034e0 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 80034ec:	2300      	movs	r3, #0
 80034ee:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f023 0307 	bic.w	r3, r3, #7
 80034f6:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <presence_bit_check+0x42>
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8003516:	7b7b      	ldrb	r3, [r7, #13]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d002      	beq.n	8003522 <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 800351c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003520:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 8003522:	89fb      	ldrh	r3, [r7, #14]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	460b      	mov	r3, r1
 800353e:	817b      	strh	r3, [r7, #10]
 8003540:	4613      	mov	r3, r2
 8003542:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2206      	movs	r2, #6
 8003572:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800357c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003580:	893b      	ldrh	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	4619      	mov	r1, r3
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ffa8 	bl	80034e0 <presence_bit_check>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2206      	movs	r2, #6
 800359a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80035a4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80035b6:	3b01      	subs	r3, #1
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	f200 81d0 	bhi.w	800395e <ifx_i2c_dl_event_handler+0x42e>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <ifx_i2c_dl_event_handler+0x94>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035e5 	.word	0x080035e5
 80035c8:	080035fb 	.word	0x080035fb
 80035cc:	0800395f 	.word	0x0800395f
 80035d0:	08003691 	.word	0x08003691
 80035d4:	080037d7 	.word	0x080037d7
 80035d8:	0800392d 	.word	0x0800392d
 80035dc:	080038eb 	.word	0x080038eb
 80035e0:	0800388f 	.word	0x0800388f
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80035ee:	2300      	movs	r3, #0
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	47a0      	blx	r4
            }
            break;
 80035f8:	e1c3      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d040      	beq.n	8003686 <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003610:	429a      	cmp	r2, r3
 8003612:	d215      	bcs.n	8003640 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8003614:	7dbb      	ldrb	r3, [r7, #22]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d104      	bne.n	8003624 <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2208      	movs	r2, #8
 800361e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003622:	e1ae      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8003624:	893b      	ldrh	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2206      	movs	r2, #6
 800362e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003632:	e1a6      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff feb9 	bl	80033b0 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 800363e:	e19f      	b.n	8003980 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2204      	movs	r2, #4
 8003644:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 818a 	bne.w	8003980 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7fd fa4b 	bl	8000b08 <ifx_i2c_dl_receive_frame>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2206      	movs	r2, #6
 800367c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	757b      	strb	r3, [r7, #21]
            break;
 8003684:	e17c      	b.n	8003980 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2206      	movs	r2, #6
 800368a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800368e:	e178      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003690:	897b      	ldrh	r3, [r7, #10]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8098 	beq.w	80037cc <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2206      	movs	r2, #6
 80036a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 80036aa:	e16a      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036b6:	d114      	bne.n	80036e2 <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 80036b8:	7dbb      	ldrb	r3, [r7, #22]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d005      	beq.n	80036ca <ifx_i2c_dl_event_handler+0x19a>
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7fd fa22 	bl	8000b08 <ifx_i2c_dl_receive_frame>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2206      	movs	r2, #6
 80036ce:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80036d2:	e156      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2204      	movs	r2, #4
 80036d8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	757b      	strb	r3, [r7, #21]
                        break;
 80036e0:	e14f      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 80036e8:	7dbb      	ldrb	r3, [r7, #22]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fec3 	bl	8003478 <ifx_i2c_tl_check_chaining_error>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2208      	movs	r2, #8
 80036fc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003700:	e13f      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003702:	7dbb      	ldrb	r3, [r7, #22]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2206      	movs	r2, #6
 800371a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 800371e:	e130      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003720:	7dbb      	ldrb	r3, [r7, #22]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <ifx_i2c_dl_event_handler+0x1fc>
 8003726:	7dbb      	ldrb	r3, [r7, #22]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d14a      	bne.n	80037c2 <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003732:	461a      	mov	r2, r3
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	4413      	add	r3, r2
 8003738:	3b01      	subs	r3, #1
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003740:	8812      	ldrh	r2, [r2, #0]
 8003742:	4293      	cmp	r3, r2
 8003744:	dd09      	ble.n	800375a <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800374c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2206      	movs	r2, #6
 8003754:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003758:	e113      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 800376a:	1898      	adds	r0, r3, r2
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	893b      	ldrh	r3, [r7, #8]
 8003772:	3b01      	subs	r3, #1
 8003774:	461a      	mov	r2, r3
 8003776:	f008 fd56 	bl	800c226 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	4413      	add	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80037a4:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	2100      	movs	r1, #0
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 80037c0:	e0df      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2205      	movs	r2, #5
 80037c6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 80037ca:	e0da      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2206      	movs	r2, #6
 80037d0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80037d4:	e0d5      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 80037d6:	893a      	ldrh	r2, [r7, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80037de:	3301      	adds	r3, #1
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d004      	beq.n	80037ee <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2207      	movs	r2, #7
 80037e8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80037ec:	e0c9      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80037f4:	461a      	mov	r2, r3
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	3b01      	subs	r3, #1
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003802:	8812      	ldrh	r2, [r2, #0]
 8003804:	4293      	cmp	r3, r2
 8003806:	dd09      	ble.n	800381c <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800380e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2204      	movs	r2, #4
 8003816:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800381a:	e0b2      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2206      	movs	r2, #6
 8003826:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800382a:	e0aa      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003838:	1898      	adds	r0, r3, r2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1c59      	adds	r1, r3, #1
 800383e:	893b      	ldrh	r3, [r7, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	461a      	mov	r2, r3
 8003844:	f008 fcef 	bl	800c226 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 800384e:	893b      	ldrh	r3, [r7, #8]
 8003850:	4413      	add	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2204      	movs	r2, #4
 8003870:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7fd f947 	bl	8000b08 <ifx_i2c_dl_receive_frame>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2206      	movs	r2, #6
 8003884:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003888:	2300      	movs	r3, #0
 800388a:	757b      	strb	r3, [r7, #21]
            }
            break;
 800388c:	e079      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 800388e:	893b      	ldrh	r3, [r7, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d909      	bls.n	80038a8 <ifx_i2c_dl_event_handler+0x378>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 800389a:	2b01      	cmp	r3, #1
 800389c:	d104      	bne.n	80038a8 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2207      	movs	r2, #7
 80038a2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80038a6:	e06c      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	b2d1      	uxtb	r1, r2
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fd16 	bl	80032f6 <ifx_i2c_tl_resend_packets>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2206      	movs	r2, #6
 80038d4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 80038d8:	e053      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 80038da:	2300      	movs	r3, #0
 80038dc:	757b      	strb	r3, [r7, #21]
            break;
 80038de:	e050      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2206      	movs	r2, #6
 80038e4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 80038e8:	e04b      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	b2d1      	uxtb	r1, r2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff fd9d 	bl	8003446 <ifx_i2c_tl_send_chaining_error>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2206      	movs	r2, #6
 8003916:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 800391a:	e032      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	757b      	strb	r3, [r7, #21]
            break;
 8003920:	e02f      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2206      	movs	r2, #6
 8003926:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 800392a:	e02a      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003930:	897b      	ldrh	r3, [r7, #10]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <ifx_i2c_dl_event_handler+0x410>
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003954:	2300      	movs	r3, #0
 8003956:	2200      	movs	r2, #0
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	47a0      	blx	r4
            }
            break;
 800395c:	e011      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003976:	2300      	movs	r3, #0
 8003978:	2200      	movs	r2, #0
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	47a0      	blx	r4
            }
            break;
 800397e:	e000      	b.n	8003982 <ifx_i2c_dl_event_handler+0x452>
            break;
 8003980:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003982:	7d7b      	ldrb	r3, [r7, #21]
 8003984:	2b01      	cmp	r3, #1
 8003986:	f43f ade3 	beq.w	8003550 <ifx_i2c_dl_event_handler+0x20>
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	bd90      	pop	{r4, r7, pc}

08003994 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800399c:	1d39      	adds	r1, r7, #4
 800399e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039a2:	2201      	movs	r2, #1
 80039a4:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <__io_putchar+0x20>)
 80039a6:	f007 fa1d 	bl	800ade4 <HAL_UART_Transmit>
    return ch;
 80039aa:	687b      	ldr	r3, [r7, #4]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000674 	.word	0x20000674

080039b8 <optiga_util_callback>:
extern pal_i2c_t optiga_pal_i2c_context_0;
static volatile optiga_lib_status_t optiga_lib_status = OPTIGA_LIB_SUCCESS;

// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <optiga_util_callback+0x20>)
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	8013      	strh	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	200006bc 	.word	0x200006bc

080039dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 80039ee:	f002 fc1d 	bl	800622c <pal_os_event_timer_tick>
    }
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <optiga_main_logic>:
void optiga_main_logic(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 8003a06:	f240 3302 	movw	r3, #770	@ 0x302
 8003a0a:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4925      	ldr	r1, [pc, #148]	@ (8003aa4 <optiga_main_logic+0xa8>)
 8003a10:	2000      	movs	r0, #0
 8003a12:	f001 ffcb 	bl	80059ac <optiga_util_create>
 8003a16:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8003a1e:	4822      	ldr	r0, [pc, #136]	@ (8003aa8 <optiga_main_logic+0xac>)
 8003a20:	f008 fba4 	bl	800c16c <puts>
        return;
 8003a24:	e03a      	b.n	8003a9c <optiga_main_logic+0xa0>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003a26:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <optiga_main_logic+0xb0>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f002 f820 	bl	8005a74 <optiga_util_open_application>
 8003a34:	4603      	mov	r3, r0
 8003a36:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 8003a3e:	481c      	ldr	r0, [pc, #112]	@ (8003ab0 <optiga_main_logic+0xb4>)
 8003a40:	f008 fb94 	bl	800c16c <puts>
            continue;
 8003a44:	e029      	b.n	8003a9a <optiga_main_logic+0x9e>
        }
        HAL_Delay(100);
 8003a46:	2064      	movs	r0, #100	@ 0x64
 8003a48:	f002 ff0a 	bl	8006860 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003a4c:	e001      	b.n	8003a52 <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8003a4e:	f002 fbcb 	bl	80061e8 <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003a52:	4b16      	ldr	r3, [pc, #88]	@ (8003aac <optiga_main_logic+0xb0>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d0f8      	beq.n	8003a4e <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 8003a5c:	2064      	movs	r0, #100	@ 0x64
 8003a5e:	f002 feff 	bl	8006860 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <optiga_main_logic+0xb0>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <optiga_main_logic+0x88>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8003a6c:	4811      	ldr	r0, [pc, #68]	@ (8003ab4 <optiga_main_logic+0xb8>)
 8003a6e:	f008 fb7d 	bl	800c16c <puts>
            break;
 8003a72:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Turn ON LED if you want
 8003a74:	2201      	movs	r2, #1
 8003a76:	2120      	movs	r1, #32
 8003a78:	480f      	ldr	r0, [pc, #60]	@ (8003ab8 <optiga_main_logic+0xbc>)
 8003a7a:	f003 fa4b 	bl	8006f14 <HAL_GPIO_WritePin>

    example_optiga_util_read_data();
 8003a7e:	f7fc fd89 	bl	8000594 <example_optiga_util_read_data>
 8003a82:	e00b      	b.n	8003a9c <optiga_main_logic+0xa0>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8003a84:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <optiga_main_logic+0xb0>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480b      	ldr	r0, [pc, #44]	@ (8003abc <optiga_main_logic+0xc0>)
 8003a8e:	f008 fb05 	bl	800c09c <iprintf>
            HAL_Delay(2000);
 8003a92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a96:	f002 fee3 	bl	8006860 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003a9a:	e7c4      	b.n	8003a26 <optiga_main_logic+0x2a>
//    {
//        pal_os_event_trigger_registered_callback();
//    }
//
//    optiga_util_destroy(me_util);
}
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	080039b9 	.word	0x080039b9
 8003aa8:	0800ce10 	.word	0x0800ce10
 8003aac:	200006bc 	.word	0x200006bc
 8003ab0:	0800ce38 	.word	0x0800ce38
 8003ab4:	0800ce78 	.word	0x0800ce78
 8003ab8:	40020000 	.word	0x40020000
 8003abc:	0800cea4 	.word	0x0800cea4

08003ac0 <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8003ac8:	4811      	ldr	r0, [pc, #68]	@ (8003b10 <I2C_Scan+0x50>)
 8003aca:	f008 fb4f 	bl	800c16c <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e013      	b.n	8003afc <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	b299      	uxth	r1, r3
 8003adc:	230a      	movs	r3, #10
 8003ade:	2201      	movs	r2, #1
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f003 fedf 	bl	80078a4 <HAL_I2C_IsDeviceReady>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4808      	ldr	r0, [pc, #32]	@ (8003b14 <I2C_Scan+0x54>)
 8003af2:	f008 fad3 	bl	800c09c <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3301      	adds	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	dae7      	bge.n	8003ad4 <I2C_Scan+0x14>
        }
    }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	0800ced4 	.word	0x0800ced4
 8003b14:	0800cee8 	.word	0x0800cee8

08003b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b1c:	f002 fe2e 	bl	800677c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b20:	f000 f84c 	bl	8003bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b24:	f000 f966 	bl	8003df4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003b28:	f000 f93a 	bl	8003da0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003b2c:	f000 f8be 	bl	8003cac <MX_I2C1_Init>
  MX_TIM2_Init();
 8003b30:	f000 f8ea 	bl	8003d08 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003b34:	f000 f8ae 	bl	8003c94 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003b38:	4819      	ldr	r0, [pc, #100]	@ (8003ba0 <main+0x88>)
 8003b3a:	f006 fd1f 	bl	800a57c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	201c      	movs	r0, #28
 8003b44:	f002 ff8b 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b48:	201c      	movs	r0, #28
 8003b4a:	f002 ffa4 	bl	8006a96 <HAL_NVIC_EnableIRQ>

  HAL_Delay(1000);
 8003b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b52:	f002 fe85 	bl	8006860 <HAL_Delay>
      printf("Powering ON OPTIGA Trust M...\r\n");
 8003b56:	4813      	ldr	r0, [pc, #76]	@ (8003ba4 <main+0x8c>)
 8003b58:	f008 fb08 	bl	800c16c <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 8003b5c:	4812      	ldr	r0, [pc, #72]	@ (8003ba8 <main+0x90>)
 8003b5e:	f002 f8ce 	bl	8005cfe <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 8003b62:	4812      	ldr	r0, [pc, #72]	@ (8003bac <main+0x94>)
 8003b64:	f008 fb02 	bl	800c16c <puts>
      pal_gpio_set_low(&optiga_reset_0);
 8003b68:	4811      	ldr	r0, [pc, #68]	@ (8003bb0 <main+0x98>)
 8003b6a:	f002 f8d8 	bl	8005d1e <pal_gpio_set_low>
      HAL_Delay(10);
 8003b6e:	200a      	movs	r0, #10
 8003b70:	f002 fe76 	bl	8006860 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 8003b74:	480e      	ldr	r0, [pc, #56]	@ (8003bb0 <main+0x98>)
 8003b76:	f002 f8c2 	bl	8005cfe <pal_gpio_set_high>
      HAL_Delay(10);
 8003b7a:	200a      	movs	r0, #10
 8003b7c:	f002 fe70 	bl	8006860 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 8003b80:	480c      	ldr	r0, [pc, #48]	@ (8003bb4 <main+0x9c>)
 8003b82:	f7ff ff9d 	bl	8003ac0 <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 8003b86:	480c      	ldr	r0, [pc, #48]	@ (8003bb8 <main+0xa0>)
 8003b88:	f008 faf0 	bl	800c16c <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 8003b8c:	2064      	movs	r0, #100	@ 0x64
 8003b8e:	f002 fe67 	bl	8006860 <HAL_Delay>
      optiga_main_logic();
 8003b92:	f7ff ff33 	bl	80039fc <optiga_main_logic>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8003b96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b9a:	f002 fe61 	bl	8006860 <HAL_Delay>
 8003b9e:	e7fa      	b.n	8003b96 <main+0x7e>
 8003ba0:	2000062c 	.word	0x2000062c
 8003ba4:	0800cf04 	.word	0x0800cf04
 8003ba8:	200004fc 	.word	0x200004fc
 8003bac:	0800cf24 	.word	0x0800cf24
 8003bb0:	20000504 	.word	0x20000504
 8003bb4:	200005d8 	.word	0x200005d8
 8003bb8:	0800cf3c 	.word	0x0800cf3c

08003bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b094      	sub	sp, #80	@ 0x50
 8003bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	2230      	movs	r2, #48	@ 0x30
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f008 fae6 	bl	800c19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bd0:	f107 030c 	add.w	r3, r7, #12
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <SystemClock_Config+0xd0>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	4a28      	ldr	r2, [pc, #160]	@ (8003c8c <SystemClock_Config+0xd0>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf0:	4b26      	ldr	r3, [pc, #152]	@ (8003c8c <SystemClock_Config+0xd0>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	4b23      	ldr	r3, [pc, #140]	@ (8003c90 <SystemClock_Config+0xd4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003c08:	4a21      	ldr	r2, [pc, #132]	@ (8003c90 <SystemClock_Config+0xd4>)
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b1f      	ldr	r3, [pc, #124]	@ (8003c90 <SystemClock_Config+0xd4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c20:	2301      	movs	r3, #1
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c24:	2310      	movs	r3, #16
 8003c26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003c30:	2310      	movs	r3, #16
 8003c32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003c34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c3e:	2307      	movs	r3, #7
 8003c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c42:	f107 0320 	add.w	r3, r7, #32
 8003c46:	4618      	mov	r0, r3
 8003c48:	f005 ffb0 	bl	8009bac <HAL_RCC_OscConfig>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003c52:	f000 f947 	bl	8003ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c56:	230f      	movs	r3, #15
 8003c58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c6c:	f107 030c 	add.w	r3, r7, #12
 8003c70:	2102      	movs	r1, #2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f006 fa12 	bl	800a09c <HAL_RCC_ClockConfig>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c7e:	f000 f931 	bl	8003ee4 <Error_Handler>
  }
}
 8003c82:	bf00      	nop
 8003c84:	3750      	adds	r7, #80	@ 0x50
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000

08003c94 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	201f      	movs	r0, #31
 8003c9e:	f002 fede 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ca2:	201f      	movs	r0, #31
 8003ca4:	f002 fef7 	bl	8006a96 <HAL_NVIC_EnableIRQ>
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}

08003cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cb2:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <MX_I2C1_Init+0x54>)
 8003cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003cb6:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cb8:	4a12      	ldr	r2, [pc, #72]	@ (8003d04 <MX_I2C1_Init+0x58>)
 8003cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cdc:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ce2:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ce8:	4804      	ldr	r0, [pc, #16]	@ (8003cfc <MX_I2C1_Init+0x50>)
 8003cea:	f003 f951 	bl	8006f90 <HAL_I2C_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003cf4:	f000 f8f6 	bl	8003ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200005d8 	.word	0x200005d8
 8003d00:	40005400 	.word	0x40005400
 8003d04:	00061a80 	.word	0x00061a80

08003d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d2e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8003d3a:	4b18      	ldr	r3, [pc, #96]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d3c:	2209      	movs	r2, #9
 8003d3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d40:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d46:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d4c:	4813      	ldr	r0, [pc, #76]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d4e:	f006 fbc5 	bl	800a4dc <HAL_TIM_Base_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d58:	f000 f8c4 	bl	8003ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	4619      	mov	r1, r3
 8003d68:	480c      	ldr	r0, [pc, #48]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d6a:	f006 fd59 	bl	800a820 <HAL_TIM_ConfigClockSource>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d74:	f000 f8b6 	bl	8003ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d80:	463b      	mov	r3, r7
 8003d82:	4619      	mov	r1, r3
 8003d84:	4805      	ldr	r0, [pc, #20]	@ (8003d9c <MX_TIM2_Init+0x94>)
 8003d86:	f006 ff5b 	bl	800ac40 <HAL_TIMEx_MasterConfigSynchronization>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003d90:	f000 f8a8 	bl	8003ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2000062c 	.word	0x2000062c

08003da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003da4:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003da6:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <MX_USART2_UART_Init+0x50>)
 8003da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003daa:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003db2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dca:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dd6:	4805      	ldr	r0, [pc, #20]	@ (8003dec <MX_USART2_UART_Init+0x4c>)
 8003dd8:	f006 ffb4 	bl	800ad44 <HAL_UART_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003de2:	f000 f87f 	bl	8003ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000674 	.word	0x20000674
 8003df0:	40004400 	.word	0x40004400

08003df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	4b32      	ldr	r3, [pc, #200]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	4a31      	ldr	r2, [pc, #196]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e36:	4b28      	ldr	r3, [pc, #160]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	4b24      	ldr	r3, [pc, #144]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	4a23      	ldr	r2, [pc, #140]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e52:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <MX_GPIO_Init+0xe4>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8003e80:	4816      	ldr	r0, [pc, #88]	@ (8003edc <MX_GPIO_Init+0xe8>)
 8003e82:	f003 f847 	bl	8006f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4810      	ldr	r0, [pc, #64]	@ (8003ee0 <MX_GPIO_Init+0xec>)
 8003e9e:	f002 feb5 	bl	8006c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8003ea2:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8003ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4808      	ldr	r0, [pc, #32]	@ (8003edc <MX_GPIO_Init+0xe8>)
 8003ebc:	f002 fea6 	bl	8006c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	2028      	movs	r0, #40	@ 0x28
 8003ec6:	f002 fdca 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003eca:	2028      	movs	r0, #40	@ 0x28
 8003ecc:	f002 fde3 	bl	8006a96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ed0:	bf00      	nop
 8003ed2:	3728      	adds	r7, #40	@ 0x28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40020800 	.word	0x40020800

08003ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee8:	b672      	cpsid	i
}
 8003eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <Error_Handler+0x8>

08003ef0 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
 8003efc:	4613      	mov	r3, r2
 8003efe:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8003f00:	78bb      	ldrb	r3, [r7, #2]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d00e      	beq.n	8003f24 <optiga_cmd_set_shielded_connection_option+0x34>
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	dc10      	bgt.n	8003f2c <optiga_cmd_set_shielded_connection_option+0x3c>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <optiga_cmd_set_shielded_connection_option+0x24>
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d004      	beq.n	8003f1c <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 8003f12:	e00b      	b.n	8003f2c <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	769a      	strb	r2, [r3, #26]
        break;
 8003f1a:	e008      	b.n	8003f2e <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	76da      	strb	r2, [r3, #27]
        break;
 8003f22:	e004      	b.n	8003f2e <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	771a      	strb	r2, [r3, #28]
        break;
 8003f2a:	e000      	b.n	8003f2e <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8003f2c:	bf00      	nop
    }
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
 8003f46:	460b      	mov	r3, r1
 8003f48:	71bb      	strb	r3, [r7, #6]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	79fa      	ldrb	r2, [r7, #7]
 8003f52:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	79ba      	ldrb	r2, [r7, #6]
 8003f5a:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8003f5c:	88bb      	ldrh	r3, [r7, #4]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	3302      	adds	r3, #2
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	88ba      	ldrh	r2, [r7, #4]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 ff6e 	bl	8004e6c <optiga_cmd_execute_handler>
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	72fb      	strb	r3, [r7, #11]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	7aba      	ldrb	r2, [r7, #10]
 8003fb6:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	7e3a      	ldrb	r2, [r7, #24]
 8003fbc:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	7afa      	ldrb	r2, [r7, #11]
 8003fce:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8c3a      	ldrh	r2, [r7, #32]
 8003fd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 ff47 	bl	8004e6c <optiga_cmd_execute_handler>
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 fc78 	bl	80058e8 <optiga_common_get_uint32>
 8003ff8:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 8004000:	d201      	bcs.n	8004006 <optiga_cmd_session_available+0x20>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <optiga_cmd_session_available+0x22>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8a9b      	ldrh	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11d      	bne.n	8004064 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e017      	b.n	800405e <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4413      	add	r3, r2
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b10      	cmp	r3, #16
 8004038:	d00e      	beq.n	8004058 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	b21a      	sxth	r2, r3
 800403e:	4b0c      	ldr	r3, [pc, #48]	@ (8004070 <optiga_cmd_session_assign+0x60>)
 8004040:	4313      	orrs	r3, r2
 8004042:	b21b      	sxth	r3, r3
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	2210      	movs	r2, #16
 8004052:	701a      	strb	r2, [r3, #0]
                break;
 8004054:	bf00      	nop
            }
        }
    }
}
 8004056:	e005      	b.n	8004064 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	3301      	adds	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d9e4      	bls.n	800402e <optiga_cmd_session_assign+0x1e>
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	ffffe100 	.word	0xffffe100

08004074 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8a9b      	ldrh	r3, [r3, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8a9b      	ldrh	r3, [r3, #20]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
    }
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
 80040c0:	4613      	mov	r3, r2
 80040c2:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e027      	b.n	8004122 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d002      	beq.n	80040de <optiga_cmd_queue_get_count_of+0x2a>
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d00c      	beq.n	80040f6 <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 80040dc:	e017      	b.n	800410e <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	737b      	strb	r3, [r7, #13]
            break;
 80040f4:	e00b      	b.n	800410e <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	737b      	strb	r3, [r7, #13]
            break;
 800410c:	bf00      	nop
        }
        if (state_to_check == slot_value)
 800410e:	78ba      	ldrb	r2, [r7, #2]
 8004110:	7b7b      	ldrb	r3, [r7, #13]
 8004112:	429a      	cmp	r2, r3
 8004114:	d102      	bne.n	800411c <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 8004116:	7bbb      	ldrb	r3, [r7, #14]
 8004118:	3301      	adds	r3, #1
 800411a:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	3301      	adds	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b05      	cmp	r3, #5
 8004126:	d9d4      	bls.n	80040d2 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8004128:	7bbb      	ldrb	r3, [r7, #14]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e01f      	b.n	8004186 <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10f      	bne.n	8004180 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
           break;
 800417e:	e006      	b.n	800418e <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	3301      	adds	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b05      	cmp	r3, #5
 800418a:	d9dc      	bls.n	8004146 <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7f9b      	ldrb	r3, [r3, #30]
 80041aa:	4619      	mov	r1, r3
 80041ac:	460b      	mov	r3, r1
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	440b      	add	r3, r1
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7f9b      	ldrb	r3, [r3, #30]
 80041c6:	4619      	mov	r1, r3
 80041c8:	460b      	mov	r3, r1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	440b      	add	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	779a      	strb	r2, [r3, #30]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041f8:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 80041fa:	23ff      	movs	r3, #255	@ 0xff
 80041fc:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 80041fe:	2300      	movs	r3, #0
 8004200:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800420c:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800420e:	2202      	movs	r2, #2
 8004210:	2109      	movs	r1, #9
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7ff ff4e 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800421e:	2208      	movs	r2, #8
 8004220:	2109      	movs	r1, #9
 8004222:	6978      	ldr	r0, [r7, #20]
 8004224:	f7ff ff46 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 8004228:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00f      	beq.n	800424e <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800422e:	2204      	movs	r2, #4
 8004230:	2109      	movs	r1, #9
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7ff ff3e 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 8004238:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10f      	bne.n	800425e <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 800423e:	2223      	movs	r2, #35	@ 0x23
 8004240:	2108      	movs	r1, #8
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f7ff ff36 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 8004248:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 800424e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	496d      	ldr	r1, [pc, #436]	@ (800440c <optiga_cmd_queue_scheduler+0x220>)
 8004256:	6938      	ldr	r0, [r7, #16]
 8004258:	f001 ff9a 	bl	8006190 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 800425c:	e0d2      	b.n	8004404 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 800425e:	6938      	ldr	r0, [r7, #16]
 8004260:	f001 ff70 	bl	8006144 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 8004264:	7e7b      	ldrb	r3, [r7, #25]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d105      	bne.n	8004276 <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004276:	2300      	movs	r3, #0
 8004278:	76fb      	strb	r3, [r7, #27]
 800427a:	e05b      	b.n	8004334 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 800427c:	7efa      	ldrb	r2, [r7, #27]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004290:	2208      	movs	r2, #8
 8004292:	2109      	movs	r1, #9
 8004294:	6978      	ldr	r0, [r7, #20]
 8004296:	f7ff ff0d 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10d      	bne.n	80042bc <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	7a5b      	ldrb	r3, [r3, #9]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d142      	bne.n	800432e <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 80042ac:	2b23      	cmp	r3, #35	@ 0x23
 80042ae:	d13e      	bne.n	800432e <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 80042b6:	7efb      	ldrb	r3, [r7, #27]
 80042b8:	76bb      	strb	r3, [r7, #26]
 80042ba:	e038      	b.n	800432e <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	7a5b      	ldrb	r3, [r3, #9]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d134      	bne.n	800432e <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d201      	bcs.n	80042d6 <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 80042d2:	2301      	movs	r3, #1
 80042d4:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d326      	bcc.n	800432e <optiga_cmd_queue_scheduler+0x142>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d31f      	bcc.n	800432e <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 80042f2:	2b22      	cmp	r3, #34	@ 0x22
 80042f4:	d105      	bne.n	8004302 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80042f6:	6978      	ldr	r0, [r7, #20]
 80042f8:	f7ff fe75 	bl	8003fe6 <optiga_cmd_session_available>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d010      	beq.n	8004324 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004306:	2b22      	cmp	r3, #34	@ 0x22
 8004308:	d104      	bne.n	8004314 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	8a9b      	ldrh	r3, [r3, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004318:	2b21      	cmp	r3, #33	@ 0x21
 800431a:	d003      	beq.n	8004324 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004320:	2b23      	cmp	r3, #35	@ 0x23
 8004322:	d104      	bne.n	800432e <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 800432a:	7efb      	ldrb	r3, [r7, #27]
 800432c:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800432e:	7efb      	ldrb	r3, [r7, #27]
 8004330:	3301      	adds	r3, #1
 8004332:	76fb      	strb	r3, [r7, #27]
 8004334:	7efb      	ldrb	r3, [r7, #27]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d9a0      	bls.n	800427c <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 800433a:	7ebb      	ldrb	r3, [r7, #26]
 800433c:	2bff      	cmp	r3, #255	@ 0xff
 800433e:	d102      	bne.n	8004346 <optiga_cmd_queue_scheduler+0x15a>
 8004340:	7e7b      	ldrb	r3, [r7, #25]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d08e      	beq.n	8004264 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 8004346:	7ebb      	ldrb	r3, [r7, #26]
 8004348:	2bff      	cmp	r3, #255	@ 0xff
 800434a:	d054      	beq.n	80043f6 <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 800434c:	7eba      	ldrb	r2, [r7, #26]
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4413      	add	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004360:	7eba      	ldrb	r2, [r7, #26]
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b22      	cmp	r3, #34	@ 0x22
 8004376:	d111      	bne.n	800439c <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8004382:	7eba      	ldrb	r2, [r7, #26]
 8004384:	6979      	ldr	r1, [r7, #20]
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fe3a 	bl	8004010 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 800439c:	7eba      	ldrb	r2, [r7, #26]
 800439e:	6979      	ldr	r1, [r7, #20]
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80043b6:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 80043b8:	7eba      	ldrb	r2, [r7, #26]
 80043ba:	6979      	ldr	r1, [r7, #20]
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2332      	movs	r3, #50	@ 0x32
 80043ce:	4910      	ldr	r1, [pc, #64]	@ (8004410 <optiga_cmd_queue_scheduler+0x224>)
 80043d0:	6938      	ldr	r0, [r7, #16]
 80043d2:	f001 fedd 	bl	8006190 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 80043d6:	7eba      	ldrb	r2, [r7, #26]
 80043d8:	6979      	ldr	r1, [r7, #20]
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80043e8:	2204      	movs	r2, #4
 80043ea:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 80043f4:	e006      	b.n	8004404 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 80043f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4903      	ldr	r1, [pc, #12]	@ (800440c <optiga_cmd_queue_scheduler+0x220>)
 80043fe:	6938      	ldr	r0, [r7, #16]
 8004400:	f001 fec6 	bl	8006190 <pal_os_event_register_callback_oneshot>
}
 8004404:	bf00      	nop
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	080041ed 	.word	0x080041ed
 8004410:	08003f81 	.word	0x08003f81

08004414 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004414:	b5b0      	push	{r4, r5, r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7f9b      	ldrb	r3, [r3, #30]
 8004428:	4619      	mov	r1, r3
 800442a:	460b      	mov	r3, r1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	440b      	add	r3, r1
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b23      	cmp	r3, #35	@ 0x23
 800443c:	d111      	bne.n	8004462 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7f9b      	ldrb	r3, [r3, #30]
 8004446:	4619      	mov	r1, r3
 8004448:	460b      	mov	r3, r1
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	440b      	add	r3, r1
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004456:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004458:	2b23      	cmp	r3, #35	@ 0x23
 800445a:	d112      	bne.n	8004482 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b23      	cmp	r3, #35	@ 0x23
 8004460:	d00f      	beq.n	8004482 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681c      	ldr	r4, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7f9b      	ldrb	r3, [r3, #30]
 800446a:	461d      	mov	r5, r3
 800446c:	f001 ff4c 	bl	8006308 <pal_os_timer_get_time_in_microseconds>
 8004470:	4602      	mov	r2, r0
 8004472:	462b      	mov	r3, r5
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	442b      	add	r3, r5
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4423      	add	r3, r4
 800447c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004480:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7f9b      	ldrb	r3, [r3, #30]
 800448a:	4619      	mov	r1, r3
 800448c:	460b      	mov	r3, r1
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	440b      	add	r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	7f9b      	ldrb	r3, [r3, #30]
 80044a6:	4619      	mov	r1, r3
 80044a8:	460b      	mov	r3, r1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	440b      	add	r3, r1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b23      	cmp	r3, #35	@ 0x23
 80044ba:	d111      	bne.n	80044e0 <optiga_cmd_queue_update_slot+0xcc>
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	2b23      	cmp	r3, #35	@ 0x23
 80044c0:	d10e      	bne.n	80044e0 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7f9b      	ldrb	r3, [r3, #30]
 80044ca:	4619      	mov	r1, r3
 80044cc:	460b      	mov	r3, r1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	440b      	add	r3, r1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80044da:	2208      	movs	r2, #8
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e00d      	b.n	80044fc <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7f9b      	ldrb	r3, [r3, #30]
 80044e8:	4619      	mov	r1, r3
 80044ea:	460b      	mov	r3, r1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	440b      	add	r3, r1
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80044f8:	2202      	movs	r2, #2
 80044fa:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7f9b      	ldrb	r3, [r3, #30]
 8004504:	4619      	mov	r1, r3
 8004506:	460b      	mov	r3, r1
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	440b      	add	r3, r1
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	701a      	strb	r2, [r3, #0]
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bdb0      	pop	{r4, r5, r7, pc}

08004520 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7f9b      	ldrb	r3, [r3, #30]
 8004530:	4619      	mov	r1, r3
 8004532:	460b      	mov	r3, r1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	440b      	add	r3, r1
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004544:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7f9b      	ldrb	r3, [r3, #30]
 800454e:	4619      	mov	r1, r3
 8004550:	460b      	mov	r3, r1
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	440b      	add	r3, r1
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7f9b      	ldrb	r3, [r3, #30]
 800456a:	4619      	mov	r1, r3
 800456c:	460b      	mov	r3, r1
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	440b      	add	r3, r1
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	7f9b      	ldrb	r3, [r3, #30]
 8004586:	4619      	mov	r1, r3
 8004588:	460b      	mov	r3, r1
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	440b      	add	r3, r1
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <optiga_cmd_queue_reset_slot+0x98>)
 80045aa:	f001 fdb3 	bl	8006114 <pal_os_event_start>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	080041ed 	.word	0x080041ed

080045bc <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	7f9b      	ldrb	r3, [r3, #30]
 80045cc:	4619      	mov	r1, r3
 80045ce:	460b      	mov	r3, r1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	440b      	add	r3, r1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7f9b      	ldrb	r3, [r3, #30]
 80045e8:	4619      	mov	r1, r3
 80045ea:	460b      	mov	r3, r1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	440b      	add	r3, r1
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004610:	2122      	movs	r1, #34	@ 0x22
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fefe 	bl	8004414 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff fd22 	bl	8004074 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff fee2 	bl	8004414 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ff5c 	bl	8004520 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800467a:	f240 2302 	movw	r3, #514	@ 0x202
 800467e:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004684:	2b00      	cmp	r3, #0
 8004686:	d011      	beq.n	80046ac <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8004688:	2308      	movs	r3, #8
 800468a:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004698:	f107 020c 	add.w	r2, r7, #12
 800469c:	4619      	mov	r1, r3
 800469e:	f001 fcb1 	bl	8006004 <pal_os_datastore_read>
 80046a2:	4603      	mov	r3, r0
 80046a4:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 80046a6:	89fb      	ldrh	r3, [r7, #14]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11a      	bne.n	80046e2 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f917 	bl	80058e8 <optiga_common_get_uint32>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f90d 	bl	80058e8 <optiga_common_get_uint32>
 80046ce:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 80046d4:	f240 2302 	movw	r3, #514	@ 0x202
 80046d8:	81fb      	strh	r3, [r7, #14]
            break;
 80046da:	e003      	b.n	80046e4 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 80046dc:	2300      	movs	r3, #0
 80046de:	81fb      	strh	r3, [r7, #14]
 80046e0:	e000      	b.n	80046e4 <optiga_cmd_restore_context+0x72>
                break;
 80046e2:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 80046e4:	89fb      	ldrh	r3, [r7, #14]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	7e5b      	ldrb	r3, [r3, #25]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d029      	beq.n	8004756 <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004706:	2b22      	cmp	r3, #34	@ 0x22
 8004708:	d125      	bne.n	8004756 <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004712:	2208      	movs	r2, #8
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f001 fdde 	bl	80062d8 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004720:	2b33      	cmp	r3, #51	@ 0x33
 8004722:	d118      	bne.n	8004756 <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	d014      	beq.n	8004756 <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004738:	2208      	movs	r2, #8
 800473a:	4619      	mov	r1, r3
 800473c:	f001 fbe4 	bl	8005f08 <pal_os_datastore_write>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8c1b      	ldrh	r3, [r3, #32]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2204      	movs	r2, #4
 8004754:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 8004756:	bf00      	nop
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	7ddb      	ldrb	r3, [r3, #23]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d05f      	beq.n	8004838 <optiga_cmd_execute_comms_open+0xd8>
 8004778:	2b02      	cmp	r3, #2
 800477a:	dc6d      	bgt.n	8004858 <optiga_cmd_execute_comms_open+0xf8>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <optiga_cmd_execute_comms_open+0x26>
 8004780:	2b01      	cmp	r3, #1
 8004782:	d01b      	beq.n	80047bc <optiga_cmd_execute_comms_open+0x5c>
 8004784:	e068      	b.n	8004858 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004786:	2121      	movs	r1, #33	@ 0x21
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff56 	bl	800463a <optiga_cmd_request_lock>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8c1b      	ldrh	r3, [r3, #32]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	759a      	strb	r2, [r3, #22]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f240 2202 	movw	r2, #514	@ 0x202
 80047aa:	841a      	strh	r2, [r3, #32]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
                    break;
 80047b2:	e05c      	b.n	800486e <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	75da      	strb	r2, [r3, #23]
                break;
 80047ba:	e058      	b.n	800486e <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	7e92      	ldrb	r2, [r2, #26]
 80047c6:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	7ed2      	ldrb	r2, [r2, #27]
 80047d2:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	7f12      	ldrb	r2, [r2, #28]
 80047de:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 80047ee:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 ff4e 	bl	800569a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 ff57 	bl	80056b8 <optiga_comms_open>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8c1b      	ldrh	r3, [r3, #32]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	759a      	strb	r2, [r3, #22]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f240 2202 	movw	r2, #514	@ 0x202
 8004826:	841a      	strh	r2, [r3, #32]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
                    break;
 800482e:	e01e      	b.n	800486e <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	75da      	strb	r2, [r3, #23]
                break;
 8004836:	e01a      	b.n	800486e <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004840:	2332      	movs	r3, #50	@ 0x32
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4910      	ldr	r1, [pc, #64]	@ (8004888 <optiga_cmd_execute_comms_open+0x128>)
 8004846:	f001 fca3 	bl	8006190 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2209      	movs	r2, #9
 8004854:	75da      	strb	r2, [r3, #23]
                break;
 8004856:	e00a      	b.n	800486e <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2204      	movs	r2, #4
 800485c:	759a      	strb	r2, [r3, #22]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f240 2202 	movw	r2, #514	@ 0x202
 8004864:	841a      	strh	r2, [r3, #32]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
            break;
 800486c:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <optiga_cmd_execute_comms_open+0x120>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	7d9b      	ldrb	r3, [r3, #22]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f43f af75 	beq.w	800476a <optiga_cmd_execute_comms_open+0xa>
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	08003f81 	.word	0x08003f81

0800488c <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	7ddb      	ldrb	r3, [r3, #23]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d002      	beq.n	80048aa <optiga_cmd_execute_comms_close+0x1e>
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d068      	beq.n	800497a <optiga_cmd_execute_comms_close+0xee>
 80048a8:	e07a      	b.n	80049a0 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	7f1b      	ldrb	r3, [r3, #28]
 80048ae:	2b22      	cmp	r3, #34	@ 0x22
 80048b0:	d002      	beq.n	80048b8 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	7e92      	ldrb	r2, [r2, #26]
 80048c2:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	7ed2      	ldrb	r2, [r2, #27]
 80048ce:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	7f12      	ldrb	r2, [r2, #28]
 80048e6:	751a      	strb	r2, [r3, #20]
 80048e8:	e004      	b.n	80048f4 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2233      	movs	r2, #51	@ 0x33
 80048f2:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2204      	movs	r2, #4
 8004902:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004912:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 febc 	bl	800569a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 ff43 	bl	80057b4 <optiga_comms_close>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8c1b      	ldrh	r3, [r3, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	759a      	strb	r2, [r3, #22]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f240 2202 	movw	r2, #514	@ 0x202
 800494a:	841a      	strh	r2, [r3, #32]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
                    break;
 8004952:	e031      	b.n	80049b8 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7f1b      	ldrb	r3, [r3, #28]
 8004958:	2b22      	cmp	r3, #34	@ 0x22
 800495a:	d106      	bne.n	800496a <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2204      	movs	r2, #4
 8004960:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004968:	e026      	b.n	80049b8 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff fe75 	bl	800465a <optiga_cmd_release_lock>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	841a      	strh	r2, [r3, #32]
                break;
 8004978:	e01e      	b.n	80049b8 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68d2      	ldr	r2, [r2, #12]
 8004982:	2100      	movs	r1, #0
 8004984:	4610      	mov	r0, r2
 8004986:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7f1b      	ldrb	r3, [r3, #28]
 800498c:	2b22      	cmp	r3, #34	@ 0x22
 800498e:	d112      	bne.n	80049b6 <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff fe62 	bl	800465a <optiga_cmd_release_lock>
 8004996:	4603      	mov	r3, r0
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 800499e:	e00a      	b.n	80049b6 <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2204      	movs	r2, #4
 80049a4:	759a      	strb	r2, [r3, #22]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f240 2202 	movw	r2, #514	@ 0x202
 80049ac:	841a      	strh	r2, [r3, #32]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
            break;
 80049b4:	e000      	b.n	80049b8 <optiga_cmd_execute_comms_close+0x12c>
                break;
 80049b6:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <optiga_cmd_execute_comms_close+0x13e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	7d9b      	ldrb	r3, [r3, #22]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	f43f af66 	beq.w	8004896 <optiga_cmd_execute_comms_close+0xa>
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af02      	add	r7, sp, #8
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7ddb      	ldrb	r3, [r3, #23]
 80049e8:	3b05      	subs	r3, #5
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	f200 80d6 	bhi.w	8004b9c <optiga_cmd_execute_prepare_command+0x1c8>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <optiga_cmd_execute_prepare_command+0x24>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a61 	.word	0x08004a61
 8004a04:	08004a75 	.word	0x08004a75
 8004a08:	08004ab1 	.word	0x08004ab1
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7ddb      	ldrb	r3, [r3, #23]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d107      	bne.n	8004a2a <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fdf4 	bl	8004608 <optiga_cmd_request_session>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	841a      	strh	r2, [r3, #32]
 8004a28:	e007      	b.n	8004a3a <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004a2a:	2121      	movs	r1, #33	@ 0x21
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fe04 	bl	800463a <optiga_cmd_request_lock>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8c1b      	ldrh	r3, [r3, #32]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2204      	movs	r2, #4
 8004a46:	759a      	strb	r2, [r3, #22]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f240 2202 	movw	r2, #514	@ 0x202
 8004a4e:	841a      	strh	r2, [r3, #32]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
                    break;
 8004a56:	e0ac      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2209      	movs	r2, #9
 8004a5c:	75da      	strb	r2, [r3, #23]
                break;
 8004a5e:	e0a8      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fdab 	bl	80045bc <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
                break;
 8004a72:	e09e      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8004a74:	2123      	movs	r1, #35	@ 0x23
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff fddf 	bl	800463a <optiga_cmd_request_lock>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8c1b      	ldrh	r3, [r3, #32]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	759a      	strb	r2, [r3, #22]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f240 2202 	movw	r2, #514	@ 0x202
 8004a98:	841a      	strh	r2, [r3, #32]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
                    break;
 8004aa0:	e087      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2209      	movs	r2, #9
 8004aa6:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
                break;
 8004aae:	e080      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8c1b      	ldrh	r3, [r3, #32]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
                    break;
 8004ad8:	e06b      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f240 6222 	movw	r2, #1570	@ 0x622
 8004ae2:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	7e92      	ldrb	r2, [r2, #26]
 8004aee:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	7ed2      	ldrb	r2, [r2, #27]
 8004afa:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7e9a      	ldrb	r2, [r3, #26]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fdbc 	bl	800569a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004b34:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004b42:	3306      	adds	r3, #6
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4623      	mov	r3, r4
 8004b48:	f000 fdee 	bl	8005728 <optiga_comms_transceive>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8c1b      	ldrh	r3, [r3, #32]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	759a      	strb	r2, [r3, #22]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f240 2202 	movw	r2, #514	@ 0x202
 8004b68:	841a      	strh	r2, [r3, #32]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
                    break;
 8004b70:	e01f      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2203      	movs	r2, #3
 8004b76:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	220a      	movs	r2, #10
 8004b7c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7f5b      	ldrb	r3, [r3, #29]
 8004b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	775a      	strb	r2, [r3, #29]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7f5b      	ldrb	r3, [r3, #29]
 8004b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	775a      	strb	r2, [r3, #29]
                break;
 8004b9a:	e00a      	b.n	8004bb2 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	759a      	strb	r2, [r3, #22]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f240 2202 	movw	r2, #514	@ 0x202
 8004ba8:	841a      	strh	r2, [r3, #32]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
            break;
 8004bb0:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <optiga_cmd_execute_prepare_command+0x1f0>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	7d9b      	ldrb	r3, [r3, #22]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	f43f af10 	beq.w	80049e4 <optiga_cmd_execute_prepare_command+0x10>
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd90      	pop	{r4, r7, pc}

08004bcc <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa69 	bl	80050b4 <optiga_cmd_get_error_code_handler>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8c1b      	ldrh	r3, [r3, #32]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d004      	beq.n	8004bfc <optiga_cmd_execute_get_device_error+0x30>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8c1b      	ldrh	r3, [r3, #32]
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	da0a      	bge.n	8004c12 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c04:	d10c      	bne.n	8004c20 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7f5b      	ldrb	r3, [r3, #29]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d106      	bne.n	8004c20 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2204      	movs	r2, #4
 8004c16:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
            break;
 8004c1e:	bf00      	nop
        }
    } while (FALSE);
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7f5b      	ldrb	r3, [r3, #29]
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da0b      	bge.n	8004c60 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8c1b      	ldrh	r3, [r3, #32]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d14e      	bne.n	8004cfc <optiga_cmd_execute_process_optiga_response+0xd4>
 8004c5e:	e006      	b.n	8004c6e <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2204      	movs	r2, #4
 8004c64:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
            break;
 8004c6c:	e06f      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2bf1      	cmp	r3, #241	@ 0xf1
 8004c76:	d113      	bne.n	8004ca0 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4934      	ldr	r1, [pc, #208]	@ (8004d58 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004c88:	f001 fa82 	bl	8006190 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8004c9e:	e056      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7e1b      	ldrb	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10e      	bne.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7ddb      	ldrb	r3, [r3, #23]
 8004cac:	2b0e      	cmp	r3, #14
 8004cae:	d006      	beq.n	8004cbe <optiga_cmd_execute_process_optiga_response+0x96>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7ddb      	ldrb	r3, [r3, #23]
 8004cb4:	2b0d      	cmp	r3, #13
 8004cb6:	d002      	beq.n	8004cbe <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	220c      	movs	r2, #12
 8004cbc:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
                    break;
 8004cc4:	e043      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4920      	ldr	r1, [pc, #128]	@ (8004d58 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004cd6:	f001 fa5b 	bl	8006190 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	7e9b      	ldrb	r3, [r3, #26]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2209      	movs	r2, #9
 8004cf8:	75da      	strb	r2, [r3, #23]
}
 8004cfa:	e028      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8c1b      	ldrh	r3, [r3, #32]
 8004d00:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8004d04:	d106      	bne.n	8004d14 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	220c      	movs	r2, #12
 8004d0a:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
                break;
 8004d12:	e01c      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7ddb      	ldrb	r3, [r3, #23]
 8004d18:	2b0d      	cmp	r3, #13
 8004d1a:	d103      	bne.n	8004d24 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
}
 8004d22:	e014      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	220b      	movs	r2, #11
 8004d28:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7f5b      	ldrb	r3, [r3, #29]
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	775a      	strb	r2, [r3, #29]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	7f5b      	ldrb	r3, [r3, #29]
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
}
 8004d4c:	e7ff      	b.n	8004d4e <optiga_cmd_execute_process_optiga_response+0x126>
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	08003f81 	.word	0x08003f81

08004d5c <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7ddb      	ldrb	r3, [r3, #23]
 8004d6a:	3b0a      	subs	r3, #10
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d84d      	bhi.n	8004e0c <optiga_cmd_execute_process_response+0xb0>
 8004d70:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <optiga_cmd_execute_process_response+0x1c>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d8d 	.word	0x08004d8d
 8004d7c:	08004d97 	.word	0x08004d97
 8004d80:	08004de1 	.word	0x08004de1
 8004d84:	08004da1 	.word	0x08004da1
 8004d88:	08004df5 	.word	0x08004df5
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ff4a 	bl	8004c28 <optiga_cmd_execute_process_optiga_response>
                break;
 8004d94:	e045      	b.n	8004e22 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff17 	bl	8004bcc <optiga_cmd_execute_get_device_error>
                break;
 8004d9e:	e040      	b.n	8004e22 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fc3e 	bl	8004622 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8c1b      	ldrh	r3, [r3, #32]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	220c      	movs	r2, #12
 8004db2:	75da      	strb	r2, [r3, #23]
 8004db4:	e010      	b.n	8004dd8 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	220b      	movs	r2, #11
 8004dba:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	7f5b      	ldrb	r3, [r3, #29]
 8004dc0:	f023 0303 	bic.w	r3, r3, #3
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	775a      	strb	r2, [r3, #29]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7f5b      	ldrb	r3, [r3, #29]
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
                break;
 8004dde:	e020      	b.n	8004e22 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fc3a 	bl	800465a <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	220e      	movs	r2, #14
 8004dea:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
                break;
 8004df2:	e016      	b.n	8004e22 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68d0      	ldr	r0, [r2, #12]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	8c12      	ldrh	r2, [r2, #32]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4798      	blx	r3
                *exit_loop = TRUE;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
                break;
 8004e0a:	e00a      	b.n	8004e22 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	759a      	strb	r2, [r3, #22]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f240 2202 	movw	r2, #514	@ 0x202
 8004e18:	841a      	strh	r2, [r3, #32]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
            break;
 8004e20:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <optiga_cmd_execute_process_response+0xd6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7d9b      	ldrb	r3, [r3, #22]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d099      	beq.n	8004d66 <optiga_cmd_execute_process_response+0xa>
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop

08004e3c <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fc07 	bl	800465a <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	68d0      	ldr	r0, [r2, #12]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	8c12      	ldrh	r2, [r2, #32]
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4798      	blx	r3
        *exit_loop = TRUE;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fc31 	bl	80046ee <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	887a      	ldrh	r2, [r7, #2]
 8004e96:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7d9b      	ldrb	r3, [r3, #22]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d830      	bhi.n	8004f02 <optiga_cmd_execute_handler+0x96>
 8004ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <optiga_cmd_execute_handler+0x3c>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ebd 	.word	0x08004ebd
 8004eac:	08004ecb 	.word	0x08004ecb
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee7 	.word	0x08004ee7
 8004eb8:	08004ef5 	.word	0x08004ef5
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8004ebc:	f107 030b 	add.w	r3, r7, #11
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff fc4c 	bl	8004760 <optiga_cmd_execute_comms_open>
                break;
 8004ec8:	e01c      	b.n	8004f04 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8004eca:	f107 030b 	add.w	r3, r7, #11
 8004ece:	4619      	mov	r1, r3
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff fcdb 	bl	800488c <optiga_cmd_execute_comms_close>
                break;
 8004ed6:	e015      	b.n	8004f04 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8004ed8:	f107 030b 	add.w	r3, r7, #11
 8004edc:	4619      	mov	r1, r3
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff fd78 	bl	80049d4 <optiga_cmd_execute_prepare_command>
                break;
 8004ee4:	e00e      	b.n	8004f04 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8004ee6:	f107 030b 	add.w	r3, r7, #11
 8004eea:	4619      	mov	r1, r3
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ff35 	bl	8004d5c <optiga_cmd_execute_process_response>
                break;
 8004ef2:	e007      	b.n	8004f04 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8004ef4:	f107 030b 	add.w	r3, r7, #11
 8004ef8:	4619      	mov	r1, r3
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff9e 	bl	8004e3c <optiga_cmd_execute_error_handler>
                break;
 8004f00:	e000      	b.n	8004f04 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 8004f02:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8004f04:	7afb      	ldrb	r3, [r7, #11]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c6      	beq.n	8004e98 <optiga_cmd_execute_handler+0x2c>
}
 8004f0a:	bf00      	nop
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8004f26:	f001 f9a1 	bl	800626c <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d15b      	bne.n	8004fe8 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <optiga_cmd_create+0xec>)
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2109      	movs	r1, #9
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff f8b9 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d051      	beq.n	8004fec <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 8004f48:	2128      	movs	r1, #40	@ 0x28
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f001 f99c 	bl	8006288 <pal_os_calloc>
 8004f50:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d04b      	beq.n	8004ff0 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	4a26      	ldr	r2, [pc, #152]	@ (8005000 <optiga_cmd_create+0xec>)
 8004f68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	4a24      	ldr	r2, [pc, #144]	@ (8005004 <optiga_cmd_create+0xf0>)
 8004f74:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	7b1b      	ldrb	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d129      	bne.n	8004fda <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681c      	ldr	r4, [r3, #0]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	481d      	ldr	r0, [pc, #116]	@ (8005008 <optiga_cmd_create+0xf4>)
 8004f92:	f001 f8e5 	bl	8006160 <pal_os_event_create>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681c      	ldr	r4, [r3, #0]
 8004fa0:	6979      	ldr	r1, [r7, #20]
 8004fa2:	481a      	ldr	r0, [pc, #104]	@ (800500c <optiga_cmd_create+0xf8>)
 8004fa4:	f000 fb3c 	bl	8005620 <optiga_comms_create>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d105      	bne.n	8004fc2 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	f001 f974 	bl	80062a4 <pal_os_free>
                me = NULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
                break;
 8004fc0:	e017      	b.n	8004ff2 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004fd8:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	331e      	adds	r3, #30
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6978      	ldr	r0, [r7, #20]
 8004fe2:	f7ff f8a8 	bl	8004136 <optiga_cmd_queue_assign_slot>
 8004fe6:	e004      	b.n	8004ff2 <optiga_cmd_create+0xde>
            break;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <optiga_cmd_create+0xde>
            break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <optiga_cmd_create+0xde>
            break;
 8004ff0:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8004ff2:	f001 f942 	bl	800627a <pal_os_lock_exit_critical_section>
    return (me);
 8004ff6:	697b      	ldr	r3, [r7, #20]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd90      	pop	{r4, r7, pc}
 8005000:	200004cc 	.word	0x200004cc
 8005004:	200004d0 	.word	0x200004d0
 8005008:	080041ed 	.word	0x080041ed
 800500c:	08004e6d 	.word	0x08004e6d

08005010 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005018:	f240 2302 	movw	r3, #514	@ 0x202
 800501c:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 800501e:	f001 f925 	bl	800626c <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d03c      	beq.n	80050a2 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fafa 	bl	8004622 <optiga_cmd_release_session>
 800502e:	4603      	mov	r3, r0
 8005030:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff f8b1 	bl	800419a <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <optiga_cmd_destroy+0xa0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	2109      	movs	r1, #9
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff f837 	bl	80040b4 <optiga_cmd_queue_get_count_of>
 8005046:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 8005048:	2b06      	cmp	r3, #6
 800504a:	d125      	bne.n	8005098 <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	7b1b      	ldrb	r3, [r3, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d120      	bne.n	8005098 <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f001 f870 	bl	8006144 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 faf5 	bl	800566c <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8005092:	4618      	mov	r0, r3
 8005094:	f001 f8e0 	bl	8006258 <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 f903 	bl	80062a4 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 800509e:	2300      	movs	r3, #0
 80050a0:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 80050a2:	f001 f8ea 	bl	800627a <pal_os_lock_exit_critical_section>

    return (return_status);
 80050a6:	89fb      	ldrh	r3, [r7, #14]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	200004cc 	.word	0x200004cc

080050b4 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 80050bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050c0:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80050c2:	2309      	movs	r3, #9
 80050c4:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	7f5b      	ldrb	r3, [r3, #29]
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	f000 8099 	beq.w	800520c <optiga_cmd_get_error_code_handler+0x158>
 80050da:	2b03      	cmp	r3, #3
 80050dc:	f300 80b6 	bgt.w	800524c <optiga_cmd_get_error_code_handler+0x198>
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d002      	beq.n	80050ea <optiga_cmd_get_error_code_handler+0x36>
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d052      	beq.n	800518e <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 80050e8:	e0b0      	b.n	800524c <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f103 020d 	add.w	r2, r3, #13
 80050f2:	89bb      	ldrh	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fbbc 	bl	8005878 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005100:	89bb      	ldrh	r3, [r7, #12]
 8005102:	3302      	adds	r3, #2
 8005104:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f103 020d 	add.w	r2, r3, #13
 800510e:	89bb      	ldrh	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fbaf 	bl	8005878 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800511a:	89bb      	ldrh	r3, [r7, #12]
 800511c:	3302      	adds	r3, #2
 800511e:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f103 020d 	add.w	r2, r3, #13
 8005128:	89bb      	ldrh	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	2101      	movs	r1, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fba2 	bl	8005878 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005134:	89bb      	ldrh	r3, [r7, #12]
 8005136:	3302      	adds	r3, #2
 8005138:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800513a:	89bb      	ldrh	r3, [r7, #12]
 800513c:	3b09      	subs	r3, #9
 800513e:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8005146:	3305      	adds	r3, #5
 8005148:	2100      	movs	r1, #0
 800514a:	2001      	movs	r0, #1
 800514c:	f7fe fef5 	bl	8003f3a <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	89ba      	ldrh	r2, [r7, #12]
 8005156:	3a05      	subs	r2, #5
 8005158:	b292      	uxth	r2, r2
 800515a:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7f5b      	ldrb	r3, [r3, #29]
 8005160:	f023 0303 	bic.w	r3, r3, #3
 8005164:	b2da      	uxtb	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	775a      	strb	r2, [r3, #29]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7f5b      	ldrb	r3, [r3, #29]
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	b2da      	uxtb	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005180:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4935      	ldr	r1, [pc, #212]	@ (800525c <optiga_cmd_get_error_code_handler+0x1a8>)
 8005188:	f001 f802 	bl	8006190 <pal_os_event_register_callback_oneshot>
        break;
 800518c:	e061      	b.n	8005252 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f240 6222 	movw	r2, #1570	@ 0x622
 8005196:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	7e92      	ldrb	r2, [r2, #26]
 80051a2:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	7ed2      	ldrb	r2, [r2, #27]
 80051ae:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa6f 	bl	800569a <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3306      	adds	r3, #6
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4623      	mov	r3, r4
 80051d8:	f000 faa6 	bl	8005728 <optiga_comms_transceive>
 80051dc:	4603      	mov	r3, r0
 80051de:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 80051e6:	f240 2302 	movw	r3, #514	@ 0x202
 80051ea:	81fb      	strh	r3, [r7, #14]
                break;
 80051ec:	e031      	b.n	8005252 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7f5b      	ldrb	r3, [r3, #29]
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	775a      	strb	r2, [r3, #29]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	7f5b      	ldrb	r3, [r3, #29]
 8005200:	f043 0303 	orr.w	r3, r3, #3
 8005204:	b2da      	uxtb	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	775a      	strb	r2, [r3, #29]
        break;
 800520a:	e022      	b.n	8005252 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	7c9b      	ldrb	r3, [r3, #18]
 8005212:	2bff      	cmp	r3, #255	@ 0xff
 8005214:	d01c      	beq.n	8005250 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	7d9b      	ldrb	r3, [r3, #22]
 800521c:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 800521e:	89fb      	ldrh	r3, [r7, #14]
 8005220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005228:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	220a      	movs	r2, #10
 8005234:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 800523e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4905      	ldr	r1, [pc, #20]	@ (800525c <optiga_cmd_get_error_code_handler+0x1a8>)
 8005246:	f000 ffa3 	bl	8006190 <pal_os_event_register_callback_oneshot>
        break;
 800524a:	e002      	b.n	8005252 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005250:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005252:	89fb      	ldrh	r3, [r7, #14]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}
 800525c:	08003f81 	.word	0x08003f81

08005260 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005268:	f240 2302 	movw	r3, #514	@ 0x202
 800526c:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	7d9b      	ldrb	r3, [r3, #22]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d002      	beq.n	800527c <optiga_cmd_open_application_handler+0x1c>
 8005276:	2b03      	cmp	r3, #3
 8005278:	d075      	beq.n	8005366 <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 800527a:	e08e      	b.n	800539a <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 800527c:	2314      	movs	r3, #20
 800527e:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7e5b      	ldrb	r3, [r3, #25]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <optiga_cmd_open_application_handler+0x2c>
 8005288:	2200      	movs	r2, #0
 800528a:	e000      	b.n	800528e <optiga_cmd_open_application_handler+0x2e>
 800528c:	2208      	movs	r2, #8
 800528e:	89bb      	ldrh	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005294:	89bb      	ldrh	r3, [r7, #12]
 8005296:	f240 6215 	movw	r2, #1557	@ 0x615
 800529a:	4293      	cmp	r3, r2
 800529c:	d903      	bls.n	80052a6 <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800529e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80052a2:	81fb      	strh	r3, [r7, #14]
                break;
 80052a4:	e079      	b.n	800539a <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7e5b      	ldrb	r3, [r3, #25]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff f9df 	bl	8004672 <optiga_cmd_restore_context>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d16e      	bne.n	8005398 <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <optiga_cmd_open_application_handler+0x6a>
 80052c6:	2210      	movs	r2, #16
 80052c8:	e000      	b.n	80052cc <optiga_cmd_open_application_handler+0x6c>
 80052ca:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80052d2:	3305      	adds	r3, #5
 80052d4:	20f0      	movs	r0, #240	@ 0xf0
 80052d6:	f7fe fe30 	bl	8003f3a <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330d      	adds	r3, #13
 80052e0:	3309      	adds	r3, #9
 80052e2:	2210      	movs	r2, #16
 80052e4:	492f      	ldr	r1, [pc, #188]	@ (80053a4 <optiga_cmd_open_application_handler+0x144>)
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 ffe7 	bl	80062ba <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7e5b      	ldrb	r3, [r3, #25]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005304:	2208      	movs	r2, #8
 8005306:	4619      	mov	r1, r3
 8005308:	f000 ffd7 	bl	80062ba <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <optiga_cmd_open_application_handler+0xb8>
 8005314:	2214      	movs	r2, #20
 8005316:	e000      	b.n	800531a <optiga_cmd_open_application_handler+0xba>
 8005318:	221c      	movs	r2, #28
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005328:	2208      	movs	r2, #8
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f000 ffd3 	bl	80062d8 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005336:	2b00      	cmp	r3, #0
 8005338:	d012      	beq.n	8005360 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005346:	2208      	movs	r2, #8
 8005348:	4619      	mov	r1, r3
 800534a:	f000 fddd 	bl	8005f08 <pal_os_datastore_write>
 800534e:	4603      	mov	r3, r0
 8005350:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 8005358:	f240 2302 	movw	r3, #514	@ 0x202
 800535c:	81fb      	strh	r3, [r7, #14]
                    break;
 800535e:	e01c      	b.n	800539a <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 8005360:	2300      	movs	r3, #0
 8005362:	81fb      	strh	r3, [r7, #14]
        break;
 8005364:	e019      	b.n	800539a <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	7c9b      	ldrb	r3, [r3, #18]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7f5b      	ldrb	r3, [r3, #29]
 8005374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005378:	b2da      	uxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	775a      	strb	r2, [r3, #29]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7f5a      	ldrb	r2, [r3, #29]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	775a      	strb	r2, [r3, #29]
                break;
 8005386:	e008      	b.n	800539a <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2233      	movs	r2, #51	@ 0x33
 8005390:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 8005392:	2300      	movs	r3, #0
 8005394:	81fb      	strh	r3, [r7, #14]
        break;
 8005396:	e000      	b.n	800539a <optiga_cmd_open_application_handler+0x13a>
                    break;
 8005398:	bf00      	nop
    }

    return (return_status);
 800539a:	89fb      	ldrh	r3, [r7, #14]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	0800cf70 	.word	0x0800cf70

080053a8 <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af04      	add	r7, sp, #16
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	460b      	mov	r3, r1
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 80053b6:	7af9      	ldrb	r1, [r7, #11]
 80053b8:	23f0      	movs	r3, #240	@ 0xf0
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	2300      	movs	r3, #0
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <optiga_cmd_open_application+0x30>)
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7fe fde5 	bl	8003f98 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	08005261 	.word	0x08005261

080053dc <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80053ea:	f240 2302 	movw	r3, #514	@ 0x202
 80053ee:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80053f0:	2309      	movs	r3, #9
 80053f2:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 80053f4:	2381      	movs	r3, #129	@ 0x81
 80053f6:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	7d9b      	ldrb	r3, [r3, #22]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d002      	beq.n	8005406 <optiga_cmd_get_data_object_handler+0x2a>
 8005400:	2b03      	cmp	r3, #3
 8005402:	d06e      	beq.n	80054e2 <optiga_cmd_get_data_object_handler+0x106>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005404:	e0ec      	b.n	80055e0 <optiga_cmd_get_data_object_handler+0x204>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8005406:	230a      	movs	r3, #10
 8005408:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800540a:	8a3b      	ldrh	r3, [r7, #16]
 800540c:	f240 6215 	movw	r2, #1557	@ 0x615
 8005410:	4293      	cmp	r3, r2
 8005412:	d907      	bls.n	8005424 <optiga_cmd_get_data_object_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005414:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005418:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	801a      	strh	r2, [r3, #0]
                break;
 8005422:	e0dd      	b.n	80055e0 <optiga_cmd_get_data_object_handler+0x204>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	8bbb      	ldrh	r3, [r7, #28]
 800542a:	3308      	adds	r3, #8
 800542c:	4413      	add	r3, r2
 800542e:	1d5a      	adds	r2, r3, #5
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	891b      	ldrh	r3, [r3, #8]
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 fa1e 	bl	8005878 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800543c:	8bbb      	ldrh	r3, [r7, #28]
 800543e:	3302      	adds	r3, #2
 8005440:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	899b      	ldrh	r3, [r3, #12]
 8005446:	461a      	mov	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	89db      	ldrh	r3, [r3, #14]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f240 6211 	movw	r2, #1553	@ 0x611
 8005452:	4293      	cmp	r3, r2
 8005454:	bfa8      	it	ge
 8005456:	4613      	movge	r3, r2
 8005458:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	7c9b      	ldrb	r3, [r3, #18]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11f      	bne.n	80054a2 <optiga_cmd_get_data_object_handler+0xc6>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	8bbb      	ldrh	r3, [r7, #28]
 8005468:	3308      	adds	r3, #8
 800546a:	4413      	add	r3, r2
 800546c:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	895a      	ldrh	r2, [r3, #10]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005476:	4413      	add	r3, r2
 8005478:	b29b      	uxth	r3, r3
 800547a:	4619      	mov	r1, r3
 800547c:	f000 f9fc 	bl	8005878 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005480:	8bbb      	ldrh	r3, [r7, #28]
 8005482:	3302      	adds	r3, #2
 8005484:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	8bbb      	ldrh	r3, [r7, #28]
 800548c:	3308      	adds	r3, #8
 800548e:	4413      	add	r3, r2
 8005490:	3305      	adds	r3, #5
 8005492:	89fa      	ldrh	r2, [r7, #14]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f9ee 	bl	8005878 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800549c:	8bbb      	ldrh	r3, [r7, #28]
 800549e:	3302      	adds	r3, #2
 80054a0:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	891b      	ldrh	r3, [r3, #8]
 80054a6:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <optiga_cmd_get_data_object_handler+0xd6>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	7e59      	ldrb	r1, [r3, #25]
 80054b6:	8bbb      	ldrh	r3, [r7, #28]
 80054b8:	3b09      	subs	r3, #9
 80054ba:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 80054c2:	3305      	adds	r3, #5
 80054c4:	7ef8      	ldrb	r0, [r7, #27]
 80054c6:	f7fe fd38 	bl	8003f3a <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	8bba      	ldrh	r2, [r7, #28]
 80054d0:	3a05      	subs	r2, #5
 80054d2:	b292      	uxth	r2, r2
 80054d4:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	89fa      	ldrh	r2, [r7, #14]
 80054da:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 80054dc:	2300      	movs	r3, #0
 80054de:	83fb      	strh	r3, [r7, #30]
        break;
 80054e0:	e07e      	b.n	80055e0 <optiga_cmd_get_data_object_handler+0x204>
            me->chaining_ongoing = FALSE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	7c9b      	ldrb	r3, [r3, #18]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d025      	beq.n	800553e <optiga_cmd_get_data_object_handler+0x162>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	89db      	ldrh	r3, [r3, #14]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <optiga_cmd_get_data_object_handler+0x13c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7f5b      	ldrb	r3, [r3, #29]
 80054fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005502:	b2da      	uxtb	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	775a      	strb	r2, [r3, #29]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7f5b      	ldrb	r3, [r3, #29]
 800550c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	775a      	strb	r2, [r3, #29]
 8005516:	e00e      	b.n	8005536 <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	7f5b      	ldrb	r3, [r3, #29]
 800551c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005520:	b2da      	uxtb	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	775a      	strb	r2, [r3, #29]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7f5a      	ldrb	r2, [r3, #29]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 8005536:	f240 2302 	movw	r3, #514	@ 0x202
 800553a:	83fb      	strh	r3, [r7, #30]
        break;
 800553c:	e04f      	b.n	80055de <optiga_cmd_get_data_object_handler+0x202>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8c1b      	ldrh	r3, [r3, #32]
 8005542:	f248 0208 	movw	r2, #32776	@ 0x8008
 8005546:	4293      	cmp	r3, r2
 8005548:	d107      	bne.n	800555a <optiga_cmd_get_data_object_handler+0x17e>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	89d2      	ldrh	r2, [r2, #14]
 8005552:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 8005554:	2300      	movs	r3, #0
 8005556:	83fb      	strh	r3, [r7, #30]
        break;
 8005558:	e041      	b.n	80055de <optiga_cmd_get_data_object_handler+0x202>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	88db      	ldrh	r3, [r3, #6]
 8005560:	3b04      	subs	r3, #4
 8005562:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	899b      	ldrh	r3, [r3, #12]
 8005568:	8a7a      	ldrh	r2, [r7, #18]
 800556a:	429a      	cmp	r2, r3
 800556c:	d907      	bls.n	800557e <optiga_cmd_get_data_object_handler+0x1a2>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800556e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005572:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	801a      	strh	r2, [r3, #0]
                    break;
 800557c:	e030      	b.n	80055e0 <optiga_cmd_get_data_object_handler+0x204>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	89d2      	ldrh	r2, [r2, #14]
 8005586:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 800558e:	3309      	adds	r3, #9
 8005590:	8a7a      	ldrh	r2, [r7, #18]
 8005592:	4619      	mov	r1, r3
 8005594:	f000 fe91 	bl	80062ba <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	89da      	ldrh	r2, [r3, #14]
 800559c:	8a7b      	ldrh	r3, [r7, #18]
 800559e:	4413      	add	r3, r2
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	8a1b      	ldrh	r3, [r3, #16]
 80055aa:	8a7a      	ldrh	r2, [r7, #18]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d305      	bcc.n	80055bc <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	89da      	ldrh	r2, [r3, #14]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d10b      	bne.n	80055d4 <optiga_cmd_get_data_object_handler+0x1f8>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	89d2      	ldrh	r2, [r2, #14]
 80055c4:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2200      	movs	r2, #0
 80055d0:	821a      	strh	r2, [r3, #16]
 80055d2:	e002      	b.n	80055da <optiga_cmd_get_data_object_handler+0x1fe>
                    me->chaining_ongoing = TRUE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	761a      	strb	r2, [r3, #24]
                return_status = OPTIGA_LIB_SUCCESS;
 80055da:	2300      	movs	r3, #0
 80055dc:	83fb      	strh	r3, [r7, #30]
        break;
 80055de:	bf00      	nop
    }

    return (return_status);
 80055e0:	8bfb      	ldrh	r3, [r7, #30]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af04      	add	r7, sp, #16
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	460b      	mov	r3, r1
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 80055fa:	7af9      	ldrb	r1, [r7, #11]
 80055fc:	2381      	movs	r3, #129	@ 0x81
 80055fe:	9302      	str	r3, [sp, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	2306      	movs	r3, #6
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2302      	movs	r3, #2
 800560a:	4a04      	ldr	r2, [pc, #16]	@ (800561c <optiga_cmd_get_data_object+0x30>)
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7fe fcc3 	bl	8003f98 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	080053dd 	.word	0x080053dd

08005620 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 800562e:	4b0e      	ldr	r3, [pc, #56]	@ (8005668 <optiga_comms_create+0x48>)
 8005630:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	7c1b      	ldrb	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d110      	bne.n	800565c <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 800563a:	f000 fae8 	bl	8005c0e <pal_init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
                break;
 8005648:	e008      	b.n	800565c <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 800565c:	68fb      	ldr	r3, [r7, #12]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200004d4 	.word	0x200004d4

0800566c <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7c1b      	ldrb	r3, [r3, #16]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d10a      	bne.n	8005692 <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 800568e:	f000 fac6 	bl	8005c1e <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	609a      	str	r2, [r3, #8]
    return (0);
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80056c0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80056c4:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8a6 	bl	8005818 <check_optiga_comms_state>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d122      	bne.n	8005718 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a10      	ldr	r2, [pc, #64]	@ (8005724 <optiga_comms_open+0x6c>)
 80056e2:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	7d12      	ldrb	r2, [r2, #20]
 80056ee:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fa fff0 	bl	80006e8 <ifx_i2c_open>
 8005708:	4603      	mov	r3, r0
 800570a:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 800570c:	89fb      	ldrh	r3, [r7, #14]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005718:	89fb      	ldrh	r3, [r7, #14]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	0800584d 	.word	0x0800584d

08005728 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005738:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800573c:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f86a 	bl	8005818 <check_optiga_comms_state>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d12c      	bne.n	80057a4 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <optiga_comms_transceive+0x88>)
 800575a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	7c92      	ldrb	r2, [r2, #18]
 8005766:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	7cd2      	ldrb	r2, [r2, #19]
 8005772:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	7d12      	ldrb	r2, [r2, #20]
 800577e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6858      	ldr	r0, [r3, #4]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	f7fa ffe3 	bl	800075a <ifx_i2c_transceive>
 8005794:	4603      	mov	r3, r0
 8005796:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005798:	8afb      	ldrh	r3, [r7, #22]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80057a4:	8afb      	ldrh	r3, [r7, #22]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	0800584d 	.word	0x0800584d

080057b4 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80057bc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80057c0:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f828 	bl	8005818 <check_optiga_comms_state>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d11c      	bne.n	8005808 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005814 <optiga_comms_close+0x60>)
 80057de:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	7d12      	ldrb	r2, [r2, #20]
 80057ea:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa ffea 	bl	80007cc <ifx_i2c_close>
 80057f8:	4603      	mov	r3, r0
 80057fa:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80057fc:	89fb      	ldrh	r3, [r7, #14]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005808:	89fb      	ldrh	r3, [r7, #14]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	0800584d 	.word	0x0800584d

08005818 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005820:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005824:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <check_optiga_comms_state+0x26>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	7c5b      	ldrb	r3, [r3, #17]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d004      	beq.n	800583e <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 800583a:	2300      	movs	r3, #0
 800583c:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 800583e:	89fb      	ldrh	r3, [r7, #14]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	4611      	mov	r1, r2
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	745a      	strb	r2, [r3, #17]
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b29b      	uxth	r3, r3
 800588a:	b2da      	uxtb	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3301      	adds	r3, #1
 8005894:	887a      	ldrh	r2, [r7, #2]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	0e1b      	lsrs	r3, r3, #24
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	0c1a      	lsrs	r2, r3, #16
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3301      	adds	r3, #1
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	0a1a      	lsrs	r2, r3, #8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3302      	adds	r3, #2
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3303      	adds	r3, #3
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	061a      	lsls	r2, r3, #24
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3301      	adds	r3, #1
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3302      	adds	r3, #2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005906:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	3103      	adds	r1, #3
 800590c:	7809      	ldrb	r1, [r1, #0]
 800590e:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 8005914:	68fb      	ldr	r3, [r7, #12]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	6992      	ldr	r2, [r2, #24]
 8005940:	8879      	ldrh	r1, [r7, #2]
 8005942:	4610      	mov	r0, r2
 8005944:	4798      	blx	r3
}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 800595c:	2200      	movs	r2, #0
 800595e:	2101      	movs	r1, #1
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f804 	bl	800596e <optiga_util_set_comms_params>
    }
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
 800597a:	4613      	mov	r3, r2
 800597c:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d002      	beq.n	800598a <optiga_util_set_comms_params+0x1c>
 8005984:	2b02      	cmp	r3, #2
 8005986:	d005      	beq.n	8005994 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005988:	e009      	b.n	800599e <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	78ba      	ldrb	r2, [r7, #2]
 800598e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8005992:	e004      	b.n	800599e <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	78ba      	ldrb	r2, [r7, #2]
 8005998:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 800599c:	bf00      	nop
        }
    }
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02b      	beq.n	8005a1c <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80059c4:	2124      	movs	r1, #36	@ 0x24
 80059c6:	2001      	movs	r0, #1
 80059c8:	f000 fc5e 	bl	8006288 <pal_os_calloc>
 80059cc:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d025      	beq.n	8005a20 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2200      	movs	r2, #0
 80059e4:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	490c      	ldr	r1, [pc, #48]	@ (8005a2c <optiga_util_create+0x80>)
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fa89 	bl	8004f14 <optiga_cmd_create>
 8005a02:	4602      	mov	r2, r0
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d108      	bne.n	8005a22 <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f000 fc47 	bl	80062a4 <pal_os_free>
            me = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e002      	b.n	8005a22 <optiga_util_create+0x76>
            break;
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <optiga_util_create+0x76>
            break;
 8005a20:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 8005a22:	697b      	ldr	r3, [r7, #20]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	08005923 	.word	0x08005923

08005a30 <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <optiga_util_destroy+0x16>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005a3e:	f240 3303 	movw	r3, #771	@ 0x303
 8005a42:	81fb      	strh	r3, [r7, #14]
            break;
 8005a44:	e011      	b.n	8005a6a <optiga_util_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8c1b      	ldrh	r3, [r3, #32]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d103      	bne.n	8005a56 <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005a4e:	f240 3305 	movw	r3, #773	@ 0x305
 8005a52:	81fb      	strh	r3, [r7, #14]
            break;
 8005a54:	e009      	b.n	8005a6a <optiga_util_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fad8 	bl	8005010 <optiga_cmd_destroy>
 8005a60:	4603      	mov	r3, r0
 8005a62:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fc1d 	bl	80062a4 <pal_os_free>
    } while (FALSE);
    return (return_value);
 8005a6a:	89fb      	ldrh	r3, [r7, #14]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005a80:	f240 3302 	movw	r3, #770	@ 0x302
 8005a84:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <optiga_util_open_application+0x20>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005a94:	f240 3303 	movw	r3, #771	@ 0x303
 8005a98:	81fb      	strh	r3, [r7, #14]
            break;
 8005a9a:	e03d      	b.n	8005b18 <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8c1b      	ldrh	r3, [r3, #32]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d103      	bne.n	8005aac <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005aa4:	f240 3305 	movw	r3, #773	@ 0x305
 8005aa8:	81fb      	strh	r3, [r7, #14]
            break;
 8005aaa:	e035      	b.n	8005b18 <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6958      	ldr	r0, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005abc:	2200      	movs	r2, #0
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f7fe fa16 	bl	8003ef0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6958      	ldr	r0, [r3, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f7fe fa0d 	bl	8003ef0 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	2133      	movs	r1, #51	@ 0x33
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fa03 	bl	8003ef0 <optiga_cmd_set_shielded_connection_option>
 8005aea:	e006      	b.n	8005afa <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	2202      	movs	r2, #2
 8005af2:	2111      	movs	r1, #17
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe f9fb 	bl	8003ef0 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	78f9      	ldrb	r1, [r7, #3]
 8005b00:	2200      	movs	r2, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fc50 	bl	80053a8 <optiga_cmd_open_application>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff18 	bl	800594e <optiga_util_reset_protection_level>

    return (return_value);
 8005b1e:	89fb      	ldrh	r3, [r7, #14]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	817b      	strh	r3, [r7, #10]
 8005b36:	4613      	mov	r3, r2
 8005b38:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005b3a:	f240 3302 	movw	r3, #770	@ 0x302
 8005b3e:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <optiga_util_read_data+0x32>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <optiga_util_read_data+0x32>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005b5a:	f240 3303 	movw	r3, #771	@ 0x303
 8005b5e:	82fb      	strh	r3, [r7, #22]
            break;
 8005b60:	e04d      	b.n	8005bfe <optiga_util_read_data+0xd6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8c1b      	ldrh	r3, [r3, #32]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d103      	bne.n	8005b72 <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005b6a:	f240 3305 	movw	r3, #773	@ 0x305
 8005b6e:	82fb      	strh	r3, [r7, #22]
            break;
 8005b70:	e045      	b.n	8005bfe <optiga_util_read_data+0xd6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2214      	movs	r2, #20
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fba8 	bl	80062d8 <pal_os_memset>

        p_params->oid = optiga_oid;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	897a      	ldrh	r2, [r7, #10]
 8005b8c:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	893a      	ldrh	r2, [r7, #8]
 8005b92:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2200      	movs	r2, #0
 8005b98:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6958      	ldr	r0, [r3, #20]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	f7fe f992 	bl	8003ef0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6958      	ldr	r0, [r3, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7fe f989 	bl	8003ef0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6958      	ldr	r0, [r3, #20]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	7c9b      	ldrb	r3, [r3, #18]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7ff fcff 	bl	80055ec <optiga_cmd_get_data_object>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005bf2:	8afb      	ldrh	r3, [r7, #22]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <optiga_util_read_data+0xd6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fea5 	bl	800594e <optiga_util_reset_protection_level>

    return (return_value);
 8005c04:	8afb      	ldrh	r3, [r7, #22]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <pal_deinit>:


pal_status_t pal_deinit(void)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	817b      	strh	r3, [r7, #10]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d012      	beq.n	8005c6e <pal_crypt_tls_prf_sha256+0x40>
 8005c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00f      	beq.n	8005c6e <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	82fb      	strh	r3, [r7, #22]
 8005c52:	e007      	b.n	8005c64 <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8005c54:	8afb      	ldrh	r3, [r7, #22]
 8005c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c58:	4413      	add	r3, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8005c5e:	8afb      	ldrh	r3, [r7, #22]
 8005c60:	3301      	adds	r3, #1
 8005c62:	82fb      	strh	r3, [r7, #22]
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	8afa      	ldrh	r2, [r7, #22]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3f2      	bcc.n	8005c54 <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b087      	sub	sp, #28
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	82fb      	strh	r3, [r7, #22]
 8005c8e:	e00a      	b.n	8005ca6 <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 8005c90:	8afb      	ldrh	r3, [r7, #22]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	441a      	add	r2, r3
 8005c96:	8afb      	ldrh	r3, [r7, #22]
 8005c98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c9a:	440b      	add	r3, r1
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8005ca0:	8afb      	ldrh	r3, [r7, #22]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	82fb      	strh	r3, [r7, #22]
 8005ca6:	8afa      	ldrh	r2, [r7, #22]
 8005ca8:	8c3b      	ldrh	r3, [r7, #32]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d3f0      	bcc.n	8005c90 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	371c      	adds	r7, #28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	82fb      	strh	r3, [r7, #22]
 8005cd0:	e00a      	b.n	8005ce8 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 8005cd2:	8afb      	ldrh	r3, [r7, #22]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8afb      	ldrh	r3, [r7, #22]
 8005cda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005cdc:	440b      	add	r3, r1
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	82fb      	strh	r3, [r7, #22]
 8005ce8:	8afa      	ldrh	r2, [r7, #22]
 8005cea:	8c3b      	ldrh	r3, [r7, #32]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d3f0      	bcc.n	8005cd2 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005d0e:	2201      	movs	r2, #1
 8005d10:	4619      	mov	r1, r3
 8005d12:	f001 f8ff 	bl	8006f14 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4619      	mov	r1, r3
 8005d32:	f001 f8ef 	bl	8006f14 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8005d48:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <pal_i2c_acquire+0x2c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8005d50:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <pal_i2c_acquire+0x2c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	4a05      	ldr	r2, [pc, #20]	@ (8005d6c <pal_i2c_acquire+0x2c>)
 8005d58:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 8005d5e:	2301      	movs	r3, #1
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000d4c 	.word	0x20000d4c

08005d70 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 8005d78:	4b04      	ldr	r3, [pc, #16]	@ (8005d8c <pal_i2c_release+0x1c>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000d4c 	.word	0x20000d4c

08005d90 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff ffd8 	bl	8005d70 <pal_i2c_release>
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ff9a 	bl	8005d40 <pal_i2c_acquire>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d120      	bne.n	8005e54 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8005e12:	4a16      	ldr	r2, [pc, #88]	@ (8005e6c <pal_i2c_write+0x78>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	b299      	uxth	r1, r3
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e2a:	9200      	str	r2, [sp, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	f001 fa09 	bl	8007244 <HAL_I2C_Master_Transmit>
 8005e32:	4603      	mov	r3, r0
 8005e34:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8005e36:	7d7b      	ldrb	r3, [r7, #21]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff ffa6 	bl	8005d90 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8005e44:	2300      	movs	r3, #0
 8005e46:	82fb      	strh	r3, [r7, #22]
 8005e48:	e00a      	b.n	8005e60 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ff9f 	bl	8005d90 <invoke_upper_layer_callback>
 8005e52:	e005      	b.n	8005e60 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005e54:	2302      	movs	r3, #2
 8005e56:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8005e58:	2102      	movs	r1, #2
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff ff98 	bl	8005d90 <invoke_upper_layer_callback>
    }

    return status;
 8005e60:	8afb      	ldrh	r3, [r7, #22]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000d50 	.word	0x20000d50

08005e70 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff ff5c 	bl	8005d40 <pal_i2c_acquire>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d120      	bne.n	8005ed0 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8005e8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ee8 <pal_i2c_read+0x78>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	b299      	uxth	r1, r3
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ea6:	9200      	str	r2, [sp, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	f001 fac9 	bl	8007440 <HAL_I2C_Master_Receive>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8005eb2:	7d7b      	ldrb	r3, [r7, #21]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8005eb8:	2100      	movs	r1, #0
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff ff68 	bl	8005d90 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	82fb      	strh	r3, [r7, #22]
 8005ec4:	e00a      	b.n	8005edc <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff ff61 	bl	8005d90 <invoke_upper_layer_callback>
 8005ece:	e005      	b.n	8005edc <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8005ed4:	2102      	movs	r1, #2
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff ff5a 	bl	8005d90 <invoke_upper_layer_callback>
    }

    return status;
 8005edc:	8afb      	ldrh	r3, [r7, #22]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000d50 	.word	0x20000d50

08005eec <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	80fb      	strh	r3, [r7, #6]
 8005f14:	4613      	mov	r3, r2
 8005f16:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	2b33      	cmp	r3, #51	@ 0x33
 8005f24:	d043      	beq.n	8005fae <pal_os_datastore_write+0xa6>
 8005f26:	2b33      	cmp	r3, #51	@ 0x33
 8005f28:	dc5e      	bgt.n	8005fe8 <pal_os_datastore_write+0xe0>
 8005f2a:	2b11      	cmp	r3, #17
 8005f2c:	d002      	beq.n	8005f34 <pal_os_datastore_write+0x2c>
 8005f2e:	2b22      	cmp	r3, #34	@ 0x22
 8005f30:	d020      	beq.n	8005f74 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8005f32:	e059      	b.n	8005fe8 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005f34:	88bb      	ldrh	r3, [r7, #4]
 8005f36:	2b40      	cmp	r3, #64	@ 0x40
 8005f38:	d858      	bhi.n	8005fec <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8005f3a:	88bb      	ldrh	r3, [r7, #4]
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	b299      	uxth	r1, r3
 8005f40:	7b7b      	ldrb	r3, [r7, #13]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	737a      	strb	r2, [r7, #13]
 8005f46:	461a      	mov	r2, r3
 8005f48:	b2c9      	uxtb	r1, r1
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff8 <pal_os_datastore_write+0xf0>)
 8005f4c:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	737a      	strb	r2, [r7, #13]
 8005f54:	461a      	mov	r2, r3
 8005f56:	88bb      	ldrh	r3, [r7, #4]
 8005f58:	b2d9      	uxtb	r1, r3
 8005f5a:	4b27      	ldr	r3, [pc, #156]	@ (8005ff8 <pal_os_datastore_write+0xf0>)
 8005f5c:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8005f5e:	7b7b      	ldrb	r3, [r7, #13]
 8005f60:	4a25      	ldr	r2, [pc, #148]	@ (8005ff8 <pal_os_datastore_write+0xf0>)
 8005f62:	4413      	add	r3, r2
 8005f64:	88ba      	ldrh	r2, [r7, #4]
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f006 f95c 	bl	800c226 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	81fb      	strh	r3, [r7, #14]
            break;
 8005f72:	e03b      	b.n	8005fec <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8005f74:	88bb      	ldrh	r3, [r7, #4]
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	b299      	uxth	r1, r3
 8005f7a:	7b7b      	ldrb	r3, [r7, #13]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	737a      	strb	r2, [r7, #13]
 8005f80:	461a      	mov	r2, r3
 8005f82:	b2c9      	uxtb	r1, r1
 8005f84:	4b1d      	ldr	r3, [pc, #116]	@ (8005ffc <pal_os_datastore_write+0xf4>)
 8005f86:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8005f88:	7b7b      	ldrb	r3, [r7, #13]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	737a      	strb	r2, [r7, #13]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	88bb      	ldrh	r3, [r7, #4]
 8005f92:	b2d9      	uxtb	r1, r3
 8005f94:	4b19      	ldr	r3, [pc, #100]	@ (8005ffc <pal_os_datastore_write+0xf4>)
 8005f96:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8005f98:	7b7b      	ldrb	r3, [r7, #13]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	@ (8005ffc <pal_os_datastore_write+0xf4>)
 8005f9c:	4413      	add	r3, r2
 8005f9e:	88ba      	ldrh	r2, [r7, #4]
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f006 f93f 	bl	800c226 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	81fb      	strh	r3, [r7, #14]
            break;
 8005fac:	e01f      	b.n	8005fee <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8005fae:	88bb      	ldrh	r3, [r7, #4]
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	b299      	uxth	r1, r3
 8005fb4:	7b7b      	ldrb	r3, [r7, #13]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	737a      	strb	r2, [r7, #13]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	b2c9      	uxtb	r1, r1
 8005fbe:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <pal_os_datastore_write+0xf8>)
 8005fc0:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8005fc2:	7b7b      	ldrb	r3, [r7, #13]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	737a      	strb	r2, [r7, #13]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	88bb      	ldrh	r3, [r7, #4]
 8005fcc:	b2d9      	uxtb	r1, r3
 8005fce:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <pal_os_datastore_write+0xf8>)
 8005fd0:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8005fd2:	7b7b      	ldrb	r3, [r7, #13]
 8005fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8006000 <pal_os_datastore_write+0xf8>)
 8005fd6:	4413      	add	r3, r2
 8005fd8:	88ba      	ldrh	r2, [r7, #4]
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f006 f922 	bl	800c226 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	81fb      	strh	r3, [r7, #14]
            break;
 8005fe6:	e002      	b.n	8005fee <pal_os_datastore_write+0xe6>
            break;
 8005fe8:	bf00      	nop
 8005fea:	e000      	b.n	8005fee <pal_os_datastore_write+0xe6>
            break;
 8005fec:	bf00      	nop
        }
    }
    return return_status;
 8005fee:	89fb      	ldrh	r3, [r7, #14]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	2000050c 	.word	0x2000050c
 8005ffc:	20000d54 	.word	0x20000d54
 8006000:	20000d98 	.word	0x20000d98

08006004 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	4603      	mov	r3, r0
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006012:	2301      	movs	r3, #1
 8006014:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	2b33      	cmp	r3, #51	@ 0x33
 800601e:	d049      	beq.n	80060b4 <pal_os_datastore_read+0xb0>
 8006020:	2b33      	cmp	r3, #51	@ 0x33
 8006022:	dc67      	bgt.n	80060f4 <pal_os_datastore_read+0xf0>
 8006024:	2b11      	cmp	r3, #17
 8006026:	d002      	beq.n	800602e <pal_os_datastore_read+0x2a>
 8006028:	2b22      	cmp	r3, #34	@ 0x22
 800602a:	d023      	beq.n	8006074 <pal_os_datastore_read+0x70>
 800602c:	e062      	b.n	80060f4 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 800602e:	7d7b      	ldrb	r3, [r7, #21]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	757a      	strb	r2, [r7, #21]
 8006034:	461a      	mov	r2, r3
 8006036:	4b34      	ldr	r3, [pc, #208]	@ (8006108 <pal_os_datastore_read+0x104>)
 8006038:	5c9b      	ldrb	r3, [r3, r2]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 800603e:	7d7b      	ldrb	r3, [r7, #21]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	757a      	strb	r2, [r7, #21]
 8006044:	461a      	mov	r2, r3
 8006046:	4b30      	ldr	r3, [pc, #192]	@ (8006108 <pal_os_datastore_read+0x104>)
 8006048:	5c9b      	ldrb	r3, [r3, r2]
 800604a:	461a      	mov	r2, r3
 800604c:	8a7b      	ldrh	r3, [r7, #18]
 800604e:	4313      	orrs	r3, r2
 8006050:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006052:	8a7b      	ldrh	r3, [r7, #18]
 8006054:	2b40      	cmp	r3, #64	@ 0x40
 8006056:	d851      	bhi.n	80060fc <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8006058:	7d7b      	ldrb	r3, [r7, #21]
 800605a:	4a2b      	ldr	r2, [pc, #172]	@ (8006108 <pal_os_datastore_read+0x104>)
 800605c:	4413      	add	r3, r2
 800605e:	8a7a      	ldrh	r2, [r7, #18]
 8006060:	4619      	mov	r1, r3
 8006062:	68b8      	ldr	r0, [r7, #8]
 8006064:	f006 f8df 	bl	800c226 <memcpy>
                *p_buffer_length = data_length;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8a7a      	ldrh	r2, [r7, #18]
 800606c:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 800606e:	2300      	movs	r3, #0
 8006070:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8006072:	e043      	b.n	80060fc <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8006074:	7d7b      	ldrb	r3, [r7, #21]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	757a      	strb	r2, [r7, #21]
 800607a:	461a      	mov	r2, r3
 800607c:	4b23      	ldr	r3, [pc, #140]	@ (800610c <pal_os_datastore_read+0x108>)
 800607e:	5c9b      	ldrb	r3, [r3, r2]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006084:	7d7b      	ldrb	r3, [r7, #21]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	757a      	strb	r2, [r7, #21]
 800608a:	461a      	mov	r2, r3
 800608c:	4b1f      	ldr	r3, [pc, #124]	@ (800610c <pal_os_datastore_read+0x108>)
 800608e:	5c9b      	ldrb	r3, [r3, r2]
 8006090:	461a      	mov	r2, r3
 8006092:	8a7b      	ldrh	r3, [r7, #18]
 8006094:	4313      	orrs	r3, r2
 8006096:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8006098:	7d7b      	ldrb	r3, [r7, #21]
 800609a:	4a1c      	ldr	r2, [pc, #112]	@ (800610c <pal_os_datastore_read+0x108>)
 800609c:	4413      	add	r3, r2
 800609e:	8a7a      	ldrh	r2, [r7, #18]
 80060a0:	4619      	mov	r1, r3
 80060a2:	68b8      	ldr	r0, [r7, #8]
 80060a4:	f006 f8bf 	bl	800c226 <memcpy>
            *p_buffer_length = data_length;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8a7a      	ldrh	r2, [r7, #18]
 80060ac:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80060ae:	2300      	movs	r3, #0
 80060b0:	82fb      	strh	r3, [r7, #22]
            break;
 80060b2:	e024      	b.n	80060fe <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 80060b4:	7d7b      	ldrb	r3, [r7, #21]
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	757a      	strb	r2, [r7, #21]
 80060ba:	461a      	mov	r2, r3
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <pal_os_datastore_read+0x10c>)
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 80060c4:	7d7b      	ldrb	r3, [r7, #21]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	757a      	strb	r2, [r7, #21]
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <pal_os_datastore_read+0x10c>)
 80060ce:	5c9b      	ldrb	r3, [r3, r2]
 80060d0:	461a      	mov	r2, r3
 80060d2:	8a7b      	ldrh	r3, [r7, #18]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 80060d8:	7d7b      	ldrb	r3, [r7, #21]
 80060da:	4a0d      	ldr	r2, [pc, #52]	@ (8006110 <pal_os_datastore_read+0x10c>)
 80060dc:	4413      	add	r3, r2
 80060de:	8a7a      	ldrh	r2, [r7, #18]
 80060e0:	4619      	mov	r1, r3
 80060e2:	68b8      	ldr	r0, [r7, #8]
 80060e4:	f006 f89f 	bl	800c226 <memcpy>
            *p_buffer_length = data_length;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8a7a      	ldrh	r2, [r7, #18]
 80060ec:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80060ee:	2300      	movs	r3, #0
 80060f0:	82fb      	strh	r3, [r7, #22]
            break;
 80060f2:	e004      	b.n	80060fe <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	801a      	strh	r2, [r3, #0]
            break;
 80060fa:	e000      	b.n	80060fe <pal_os_datastore_read+0xfa>
            break;
 80060fc:	bf00      	nop
        }
    }

    return return_status;
 80060fe:	8afb      	ldrh	r3, [r7, #22]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2000050c 	.word	0x2000050c
 800610c:	20000d54 	.word	0x20000d54
 8006110:	20000d98 	.word	0x20000d98

08006114 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	7a1b      	ldrb	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 800612e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f82a 	bl	8006190 <pal_os_event_register_callback_oneshot>
    }
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	721a      	strb	r2, [r3, #8]
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d007      	beq.n	8006180 <pal_os_event_create+0x20>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4804      	ldr	r0, [pc, #16]	@ (800618c <pal_os_event_create+0x2c>)
 800617c:	f7ff ffca 	bl	8006114 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006180:	4b02      	ldr	r3, [pc, #8]	@ (800618c <pal_os_event_create+0x2c>)
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000da4 	.word	0x20000da4

08006190 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	4a0d      	ldr	r2, [pc, #52]	@ (80061d8 <pal_os_event_register_callback_oneshot+0x48>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 80061b6:	f000 fb47 	bl	8006848 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	4a06      	ldr	r2, [pc, #24]	@ (80061dc <pal_os_event_register_callback_oneshot+0x4c>)
 80061c2:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 80061c4:	4b06      	ldr	r3, [pc, #24]	@ (80061e0 <pal_os_event_register_callback_oneshot+0x50>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 80061ca:	4806      	ldr	r0, [pc, #24]	@ (80061e4 <pal_os_event_register_callback_oneshot+0x54>)
 80061cc:	f004 f9d6 	bl	800a57c <HAL_TIM_Base_Start_IT>
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	10624dd3 	.word	0x10624dd3
 80061dc:	20000dbc 	.word	0x20000dbc
 80061e0:	20000dc0 	.word	0x20000dc0
 80061e4:	2000062c 	.word	0x2000062c

080061e8 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <pal_os_event_trigger_registered_callback+0x3c>)
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <pal_os_event_trigger_registered_callback+0x3c>)
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 80061fc:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <pal_os_event_trigger_registered_callback+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8006202:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <pal_os_event_trigger_registered_callback+0x3c>)
 8006204:	2200      	movs	r2, #0
 8006206:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8006208:	4b06      	ldr	r3, [pc, #24]	@ (8006224 <pal_os_event_trigger_registered_callback+0x3c>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 800620e:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <pal_os_event_trigger_registered_callback+0x40>)
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6838      	ldr	r0, [r7, #0]
 8006218:	4798      	blx	r3
    }
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000da4 	.word	0x20000da4
 8006228:	20000dc0 	.word	0x20000dc0

0800622c <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006230:	4b07      	ldr	r3, [pc, #28]	@ (8006250 <pal_os_event_timer_tick+0x24>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <pal_os_event_timer_tick+0x1e>
 8006238:	f000 fb06 	bl	8006848 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <pal_os_event_timer_tick+0x28>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d301      	bcc.n	800624a <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 8006246:	f7ff ffcf 	bl	80061e8 <pal_os_event_trigger_registered_callback>
    }
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000dc0 	.word	0x20000dc0
 8006254:	20000dbc 	.word	0x20000dbc

08006258 <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f005 fd6d 	bl	800bd74 <calloc>
 800629a:	4603      	mov	r3, r0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <pal_os_free>:

void pal_os_free(void * block)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
    free(block);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f005 fd7d 	bl	800bdac <free>
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f005 ffab 	bl	800c226 <memcpy>
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f005 ff55 	bl	800c19c <memset>
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 80062fe:	f000 faa3 	bl	8006848 <HAL_GetTick>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	bd80      	pop	{r7, pc}

08006308 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 800630c:	f000 fa9c 	bl	8006848 <HAL_GetTick>
 8006310:	4603      	mov	r3, r0
 8006312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006316:	fb02 f303 	mul.w	r3, r2, r3
}
 800631a:	4618      	mov	r0, r3
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	4b10      	ldr	r3, [pc, #64]	@ (800636c <HAL_MspInit+0x4c>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	4a0f      	ldr	r2, [pc, #60]	@ (800636c <HAL_MspInit+0x4c>)
 8006330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006334:	6453      	str	r3, [r2, #68]	@ 0x44
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <HAL_MspInit+0x4c>)
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4b09      	ldr	r3, [pc, #36]	@ (800636c <HAL_MspInit+0x4c>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	4a08      	ldr	r2, [pc, #32]	@ (800636c <HAL_MspInit+0x4c>)
 800634c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006350:	6413      	str	r3, [r2, #64]	@ 0x40
 8006352:	4b06      	ldr	r3, [pc, #24]	@ (800636c <HAL_MspInit+0x4c>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40023800 	.word	0x40023800

08006370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	@ 0x28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	609a      	str	r2, [r3, #8]
 8006384:	60da      	str	r2, [r3, #12]
 8006386:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1d      	ldr	r2, [pc, #116]	@ (8006404 <HAL_I2C_MspInit+0x94>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d134      	bne.n	80063fc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	4b1c      	ldr	r3, [pc, #112]	@ (8006408 <HAL_I2C_MspInit+0x98>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639a:	4a1b      	ldr	r2, [pc, #108]	@ (8006408 <HAL_I2C_MspInit+0x98>)
 800639c:	f043 0302 	orr.w	r3, r3, #2
 80063a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80063a2:	4b19      	ldr	r3, [pc, #100]	@ (8006408 <HAL_I2C_MspInit+0x98>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063b4:	2312      	movs	r3, #18
 80063b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063bc:	2303      	movs	r3, #3
 80063be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063c0:	2304      	movs	r3, #4
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	4619      	mov	r1, r3
 80063ca:	4810      	ldr	r0, [pc, #64]	@ (800640c <HAL_I2C_MspInit+0x9c>)
 80063cc:	f000 fc1e 	bl	8006c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006408 <HAL_I2C_MspInit+0x98>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006408 <HAL_I2C_MspInit+0x98>)
 80063da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063de:	6413      	str	r3, [r2, #64]	@ 0x40
 80063e0:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <HAL_I2C_MspInit+0x98>)
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80063ec:	2200      	movs	r2, #0
 80063ee:	2100      	movs	r1, #0
 80063f0:	2020      	movs	r0, #32
 80063f2:	f000 fb34 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80063f6:	2020      	movs	r0, #32
 80063f8:	f000 fb4d 	bl	8006a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80063fc:	bf00      	nop
 80063fe:	3728      	adds	r7, #40	@ 0x28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40005400 	.word	0x40005400
 8006408:	40023800 	.word	0x40023800
 800640c:	40020400 	.word	0x40020400

08006410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006420:	d115      	bne.n	800644e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <HAL_TIM_Base_MspInit+0x48>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	4a0b      	ldr	r2, [pc, #44]	@ (8006458 <HAL_TIM_Base_MspInit+0x48>)
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	6413      	str	r3, [r2, #64]	@ 0x40
 8006432:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <HAL_TIM_Base_MspInit+0x48>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800643e:	2200      	movs	r2, #0
 8006440:	2100      	movs	r1, #0
 8006442:	201c      	movs	r0, #28
 8006444:	f000 fb0b 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006448:	201c      	movs	r0, #28
 800644a:	f000 fb24 	bl	8006a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40023800 	.word	0x40023800

0800645c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <HAL_UART_MspInit+0x94>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d133      	bne.n	80064e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <HAL_UART_MspInit+0x98>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <HAL_UART_MspInit+0x98>)
 8006488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800648c:	6413      	str	r3, [r2, #64]	@ 0x40
 800648e:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <HAL_UART_MspInit+0x98>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	613b      	str	r3, [r7, #16]
 8006498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <HAL_UART_MspInit+0x98>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	4a14      	ldr	r2, [pc, #80]	@ (80064f4 <HAL_UART_MspInit+0x98>)
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80064aa:	4b12      	ldr	r3, [pc, #72]	@ (80064f4 <HAL_UART_MspInit+0x98>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80064b6:	230c      	movs	r3, #12
 80064b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ba:	2302      	movs	r3, #2
 80064bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064c6:	2307      	movs	r3, #7
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ca:	f107 0314 	add.w	r3, r7, #20
 80064ce:	4619      	mov	r1, r3
 80064d0:	4809      	ldr	r0, [pc, #36]	@ (80064f8 <HAL_UART_MspInit+0x9c>)
 80064d2:	f000 fb9b 	bl	8006c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80064d6:	2200      	movs	r2, #0
 80064d8:	2100      	movs	r1, #0
 80064da:	2026      	movs	r0, #38	@ 0x26
 80064dc:	f000 fabf 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80064e0:	2026      	movs	r0, #38	@ 0x26
 80064e2:	f000 fad8 	bl	8006a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80064e6:	bf00      	nop
 80064e8:	3728      	adds	r7, #40	@ 0x28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40004400 	.word	0x40004400
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40020000 	.word	0x40020000

080064fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006500:	bf00      	nop
 8006502:	e7fd      	b.n	8006500 <NMI_Handler+0x4>

08006504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006508:	bf00      	nop
 800650a:	e7fd      	b.n	8006508 <HardFault_Handler+0x4>

0800650c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006510:	bf00      	nop
 8006512:	e7fd      	b.n	8006510 <MemManage_Handler+0x4>

08006514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006518:	bf00      	nop
 800651a:	e7fd      	b.n	8006518 <BusFault_Handler+0x4>

0800651c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <UsageFault_Handler+0x4>

08006524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006528:	bf00      	nop
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006532:	b480      	push	{r7}
 8006534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006536:	bf00      	nop
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006552:	f000 f965 	bl	8006820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006560:	4802      	ldr	r0, [pc, #8]	@ (800656c <TIM2_IRQHandler+0x10>)
 8006562:	f004 f86d 	bl	800a640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006566:	bf00      	nop
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	2000062c 	.word	0x2000062c

08006570 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006574:	4802      	ldr	r0, [pc, #8]	@ (8006580 <I2C1_EV_IRQHandler+0x10>)
 8006576:	f001 fac3 	bl	8007b00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800657a:	bf00      	nop
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200005d8 	.word	0x200005d8

08006584 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006588:	4802      	ldr	r0, [pc, #8]	@ (8006594 <I2C1_ER_IRQHandler+0x10>)
 800658a:	f001 fc0c 	bl	8007da6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800658e:	bf00      	nop
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	200005d8 	.word	0x200005d8

08006598 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800659c:	4802      	ldr	r0, [pc, #8]	@ (80065a8 <USART2_IRQHandler+0x10>)
 800659e:	f004 fcad 	bl	800aefc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000674 	.word	0x20000674

080065ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80065b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80065b4:	f000 fcc8 	bl	8006f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80065b8:	bf00      	nop
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e00a      	b.n	80065e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80065ce:	f3af 8000 	nop.w
 80065d2:	4601      	mov	r1, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	60ba      	str	r2, [r7, #8]
 80065da:	b2ca      	uxtb	r2, r1
 80065dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	3301      	adds	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	dbf0      	blt.n	80065ce <_read+0x12>
  }

  return len;
 80065ec:	687b      	ldr	r3, [r7, #4]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	e009      	b.n	800661c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	60ba      	str	r2, [r7, #8]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd f9bf 	bl	8003994 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	3301      	adds	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	dbf1      	blt.n	8006608 <_write+0x12>
  }
  return len;
 8006624:	687b      	ldr	r3, [r7, #4]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <_close>:

int _close(int file)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006656:	605a      	str	r2, [r3, #4]
  return 0;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <_isatty>:

int _isatty(int file)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800666e:	2301      	movs	r3, #1
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066a0:	4a14      	ldr	r2, [pc, #80]	@ (80066f4 <_sbrk+0x5c>)
 80066a2:	4b15      	ldr	r3, [pc, #84]	@ (80066f8 <_sbrk+0x60>)
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066ac:	4b13      	ldr	r3, [pc, #76]	@ (80066fc <_sbrk+0x64>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066b4:	4b11      	ldr	r3, [pc, #68]	@ (80066fc <_sbrk+0x64>)
 80066b6:	4a12      	ldr	r2, [pc, #72]	@ (8006700 <_sbrk+0x68>)
 80066b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066ba:	4b10      	ldr	r3, [pc, #64]	@ (80066fc <_sbrk+0x64>)
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d207      	bcs.n	80066d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066c8:	f005 fd80 	bl	800c1cc <__errno>
 80066cc:	4603      	mov	r3, r0
 80066ce:	220c      	movs	r2, #12
 80066d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066d6:	e009      	b.n	80066ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066d8:	4b08      	ldr	r3, [pc, #32]	@ (80066fc <_sbrk+0x64>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066de:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <_sbrk+0x64>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	4a05      	ldr	r2, [pc, #20]	@ (80066fc <_sbrk+0x64>)
 80066e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20018000 	.word	0x20018000
 80066f8:	00000400 	.word	0x00000400
 80066fc:	20000dc4 	.word	0x20000dc4
 8006700:	20000f18 	.word	0x20000f18

08006704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <SystemInit+0x20>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670e:	4a05      	ldr	r2, [pc, #20]	@ (8006724 <SystemInit+0x20>)
 8006710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006718:	bf00      	nop
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800672c:	f7ff ffea 	bl	8006704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006730:	480c      	ldr	r0, [pc, #48]	@ (8006764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006732:	490d      	ldr	r1, [pc, #52]	@ (8006768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006734:	4a0d      	ldr	r2, [pc, #52]	@ (800676c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006738:	e002      	b.n	8006740 <LoopCopyDataInit>

0800673a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800673a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800673c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800673e:	3304      	adds	r3, #4

08006740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006744:	d3f9      	bcc.n	800673a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006746:	4a0a      	ldr	r2, [pc, #40]	@ (8006770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006748:	4c0a      	ldr	r4, [pc, #40]	@ (8006774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800674a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800674c:	e001      	b.n	8006752 <LoopFillZerobss>

0800674e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800674e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006750:	3204      	adds	r2, #4

08006752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006754:	d3fb      	bcc.n	800674e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006756:	f005 fd3f 	bl	800c1d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800675a:	f7fd f9dd 	bl	8003b18 <main>
  bx  lr    
 800675e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006760:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006768:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 800676c:	0800cfdc 	.word	0x0800cfdc
  ldr r2, =_sbss
 8006770:	200005b8 	.word	0x200005b8
  ldr r4, =_ebss
 8006774:	20000f18 	.word	0x20000f18

08006778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006778:	e7fe      	b.n	8006778 <ADC_IRQHandler>
	...

0800677c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006780:	4b0e      	ldr	r3, [pc, #56]	@ (80067bc <HAL_Init+0x40>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0d      	ldr	r2, [pc, #52]	@ (80067bc <HAL_Init+0x40>)
 8006786:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800678a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800678c:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <HAL_Init+0x40>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a0a      	ldr	r2, [pc, #40]	@ (80067bc <HAL_Init+0x40>)
 8006792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006798:	4b08      	ldr	r3, [pc, #32]	@ (80067bc <HAL_Init+0x40>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a07      	ldr	r2, [pc, #28]	@ (80067bc <HAL_Init+0x40>)
 800679e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067a4:	2003      	movs	r0, #3
 80067a6:	f000 f94f 	bl	8006a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067aa:	2000      	movs	r0, #0
 80067ac:	f000 f808 	bl	80067c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067b0:	f7ff fdb6 	bl	8006320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40023c00 	.word	0x40023c00

080067c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067c8:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <HAL_InitTick+0x54>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	4b12      	ldr	r3, [pc, #72]	@ (8006818 <HAL_InitTick+0x58>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80067da:	fbb2 f3f3 	udiv	r3, r2, r3
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f967 	bl	8006ab2 <HAL_SYSTICK_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e00e      	b.n	800680c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d80a      	bhi.n	800680a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067f4:	2200      	movs	r2, #0
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067fc:	f000 f92f 	bl	8006a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006800:	4a06      	ldr	r2, [pc, #24]	@ (800681c <HAL_InitTick+0x5c>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000550 	.word	0x20000550
 8006818:	20000558 	.word	0x20000558
 800681c:	20000554 	.word	0x20000554

08006820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_IncTick+0x20>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <HAL_IncTick+0x24>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4413      	add	r3, r2
 8006830:	4a04      	ldr	r2, [pc, #16]	@ (8006844 <HAL_IncTick+0x24>)
 8006832:	6013      	str	r3, [r2, #0]
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000558 	.word	0x20000558
 8006844:	20000dc8 	.word	0x20000dc8

08006848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  return uwTick;
 800684c:	4b03      	ldr	r3, [pc, #12]	@ (800685c <HAL_GetTick+0x14>)
 800684e:	681b      	ldr	r3, [r3, #0]
}
 8006850:	4618      	mov	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20000dc8 	.word	0x20000dc8

08006860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006868:	f7ff ffee 	bl	8006848 <HAL_GetTick>
 800686c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006878:	d005      	beq.n	8006886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800687a:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <HAL_Delay+0x44>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006886:	bf00      	nop
 8006888:	f7ff ffde 	bl	8006848 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	429a      	cmp	r2, r3
 8006896:	d8f7      	bhi.n	8006888 <HAL_Delay+0x28>
  {
  }
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000558 	.word	0x20000558

080068a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068b8:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <__NVIC_SetPriorityGrouping+0x44>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068c4:	4013      	ands	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80068d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068da:	4a04      	ldr	r2, [pc, #16]	@ (80068ec <__NVIC_SetPriorityGrouping+0x44>)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	60d3      	str	r3, [r2, #12]
}
 80068e0:	bf00      	nop
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	e000ed00 	.word	0xe000ed00

080068f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068f4:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <__NVIC_GetPriorityGrouping+0x18>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	f003 0307 	and.w	r3, r3, #7
}
 80068fe:	4618      	mov	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	e000ed00 	.word	0xe000ed00

0800690c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800691a:	2b00      	cmp	r3, #0
 800691c:	db0b      	blt.n	8006936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	f003 021f 	and.w	r2, r3, #31
 8006924:	4907      	ldr	r1, [pc, #28]	@ (8006944 <__NVIC_EnableIRQ+0x38>)
 8006926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	2001      	movs	r0, #1
 800692e:	fa00 f202 	lsl.w	r2, r0, r2
 8006932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	e000e100 	.word	0xe000e100

08006948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006958:	2b00      	cmp	r3, #0
 800695a:	db0a      	blt.n	8006972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	b2da      	uxtb	r2, r3
 8006960:	490c      	ldr	r1, [pc, #48]	@ (8006994 <__NVIC_SetPriority+0x4c>)
 8006962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006966:	0112      	lsls	r2, r2, #4
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	440b      	add	r3, r1
 800696c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006970:	e00a      	b.n	8006988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	b2da      	uxtb	r2, r3
 8006976:	4908      	ldr	r1, [pc, #32]	@ (8006998 <__NVIC_SetPriority+0x50>)
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	3b04      	subs	r3, #4
 8006980:	0112      	lsls	r2, r2, #4
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	440b      	add	r3, r1
 8006986:	761a      	strb	r2, [r3, #24]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	e000e100 	.word	0xe000e100
 8006998:	e000ed00 	.word	0xe000ed00

0800699c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800699c:	b480      	push	{r7}
 800699e:	b089      	sub	sp, #36	@ 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f1c3 0307 	rsb	r3, r3, #7
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	bf28      	it	cs
 80069ba:	2304      	movcs	r3, #4
 80069bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d902      	bls.n	80069cc <NVIC_EncodePriority+0x30>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3b03      	subs	r3, #3
 80069ca:	e000      	b.n	80069ce <NVIC_EncodePriority+0x32>
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	43da      	mvns	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	401a      	ands	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	fa01 f303 	lsl.w	r3, r1, r3
 80069ee:	43d9      	mvns	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f4:	4313      	orrs	r3, r2
         );
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3724      	adds	r7, #36	@ 0x24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a14:	d301      	bcc.n	8006a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a16:	2301      	movs	r3, #1
 8006a18:	e00f      	b.n	8006a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a44 <SysTick_Config+0x40>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a22:	210f      	movs	r1, #15
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a28:	f7ff ff8e 	bl	8006948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <SysTick_Config+0x40>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a32:	4b04      	ldr	r3, [pc, #16]	@ (8006a44 <SysTick_Config+0x40>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000e010 	.word	0xe000e010

08006a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ff29 	bl	80068a8 <__NVIC_SetPriorityGrouping>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	4603      	mov	r3, r0
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a70:	f7ff ff3e 	bl	80068f0 <__NVIC_GetPriorityGrouping>
 8006a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	6978      	ldr	r0, [r7, #20]
 8006a7c:	f7ff ff8e 	bl	800699c <NVIC_EncodePriority>
 8006a80:	4602      	mov	r2, r0
 8006a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a86:	4611      	mov	r1, r2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff ff5d 	bl	8006948 <__NVIC_SetPriority>
}
 8006a8e:	bf00      	nop
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff31 	bl	800690c <__NVIC_EnableIRQ>
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ffa2 	bl	8006a04 <SysTick_Config>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ad8:	f7ff feb6 	bl	8006848 <HAL_GetTick>
 8006adc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d008      	beq.n	8006afc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2280      	movs	r2, #128	@ 0x80
 8006aee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e052      	b.n	8006ba2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0216 	bic.w	r2, r2, #22
 8006b0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d103      	bne.n	8006b2c <HAL_DMA_Abort+0x62>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0208 	bic.w	r2, r2, #8
 8006b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0201 	bic.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b4c:	e013      	b.n	8006b76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b4e:	f7ff fe7b 	bl	8006848 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d90c      	bls.n	8006b76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e015      	b.n	8006ba2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e4      	bne.n	8006b4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b88:	223f      	movs	r2, #63	@ 0x3f
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2280      	movs	r2, #128	@ 0x80
 8006bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e00c      	b.n	8006be2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2205      	movs	r2, #5
 8006bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bfc:	b2db      	uxtb	r3, r3
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b089      	sub	sp, #36	@ 0x24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e159      	b.n	8006edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c28:	2201      	movs	r2, #1
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	f040 8148 	bne.w	8006ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d005      	beq.n	8006c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d130      	bne.n	8006cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	2203      	movs	r2, #3
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c94:	2201      	movs	r2, #1
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	091b      	lsrs	r3, r3, #4
 8006caa:	f003 0201 	and.w	r2, r3, #1
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d017      	beq.n	8006cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d123      	bne.n	8006d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	08da      	lsrs	r2, r3, #3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3208      	adds	r2, #8
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	220f      	movs	r2, #15
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	08da      	lsrs	r2, r3, #3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3208      	adds	r2, #8
 8006d4a:	69b9      	ldr	r1, [r7, #24]
 8006d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 0203 	and.w	r2, r3, #3
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80a2 	beq.w	8006ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	4b57      	ldr	r3, [pc, #348]	@ (8006ef4 <HAL_GPIO_Init+0x2e8>)
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	4a56      	ldr	r2, [pc, #344]	@ (8006ef4 <HAL_GPIO_Init+0x2e8>)
 8006d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006da2:	4b54      	ldr	r3, [pc, #336]	@ (8006ef4 <HAL_GPIO_Init+0x2e8>)
 8006da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dae:	4a52      	ldr	r2, [pc, #328]	@ (8006ef8 <HAL_GPIO_Init+0x2ec>)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	089b      	lsrs	r3, r3, #2
 8006db4:	3302      	adds	r3, #2
 8006db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0303 	and.w	r3, r3, #3
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	220f      	movs	r2, #15
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a49      	ldr	r2, [pc, #292]	@ (8006efc <HAL_GPIO_Init+0x2f0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d019      	beq.n	8006e0e <HAL_GPIO_Init+0x202>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a48      	ldr	r2, [pc, #288]	@ (8006f00 <HAL_GPIO_Init+0x2f4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_GPIO_Init+0x1fe>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a47      	ldr	r2, [pc, #284]	@ (8006f04 <HAL_GPIO_Init+0x2f8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00d      	beq.n	8006e06 <HAL_GPIO_Init+0x1fa>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a46      	ldr	r2, [pc, #280]	@ (8006f08 <HAL_GPIO_Init+0x2fc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d007      	beq.n	8006e02 <HAL_GPIO_Init+0x1f6>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a45      	ldr	r2, [pc, #276]	@ (8006f0c <HAL_GPIO_Init+0x300>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <HAL_GPIO_Init+0x1f2>
 8006dfa:	2304      	movs	r3, #4
 8006dfc:	e008      	b.n	8006e10 <HAL_GPIO_Init+0x204>
 8006dfe:	2307      	movs	r3, #7
 8006e00:	e006      	b.n	8006e10 <HAL_GPIO_Init+0x204>
 8006e02:	2303      	movs	r3, #3
 8006e04:	e004      	b.n	8006e10 <HAL_GPIO_Init+0x204>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e002      	b.n	8006e10 <HAL_GPIO_Init+0x204>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_GPIO_Init+0x204>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	f002 0203 	and.w	r2, r2, #3
 8006e16:	0092      	lsls	r2, r2, #2
 8006e18:	4093      	lsls	r3, r2
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e20:	4935      	ldr	r1, [pc, #212]	@ (8006ef8 <HAL_GPIO_Init+0x2ec>)
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	089b      	lsrs	r3, r3, #2
 8006e26:	3302      	adds	r3, #2
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e2e:	4b38      	ldr	r3, [pc, #224]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e52:	4a2f      	ldr	r2, [pc, #188]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e58:	4b2d      	ldr	r3, [pc, #180]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4013      	ands	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e7c:	4a24      	ldr	r2, [pc, #144]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006e82:	4b23      	ldr	r3, [pc, #140]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006eac:	4b18      	ldr	r3, [pc, #96]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8006f10 <HAL_GPIO_Init+0x304>)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	f67f aea2 	bls.w	8006c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3724      	adds	r7, #36	@ 0x24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40013800 	.word	0x40013800
 8006efc:	40020000 	.word	0x40020000
 8006f00:	40020400 	.word	0x40020400
 8006f04:	40020800 	.word	0x40020800
 8006f08:	40020c00 	.word	0x40020c00
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40013c00 	.word	0x40013c00

08006f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
 8006f20:	4613      	mov	r3, r2
 8006f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f24:	787b      	ldrb	r3, [r7, #1]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f2a:	887a      	ldrh	r2, [r7, #2]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f30:	e003      	b.n	8006f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f32:	887b      	ldrh	r3, [r7, #2]
 8006f34:	041a      	lsls	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	619a      	str	r2, [r3, #24]
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f52:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d006      	beq.n	8006f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f5e:	4a05      	ldr	r2, [pc, #20]	@ (8006f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f806 	bl	8006f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40013c00 	.word	0x40013c00

08006f78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e12b      	b.n	80071fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff f9da 	bl	8006370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2224      	movs	r2, #36	@ 0x24
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0201 	bic.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ff4:	f003 fa4a 	bl	800a48c <HAL_RCC_GetPCLK1Freq>
 8006ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4a81      	ldr	r2, [pc, #516]	@ (8007204 <HAL_I2C_Init+0x274>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d807      	bhi.n	8007014 <HAL_I2C_Init+0x84>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4a80      	ldr	r2, [pc, #512]	@ (8007208 <HAL_I2C_Init+0x278>)
 8007008:	4293      	cmp	r3, r2
 800700a:	bf94      	ite	ls
 800700c:	2301      	movls	r3, #1
 800700e:	2300      	movhi	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	e006      	b.n	8007022 <HAL_I2C_Init+0x92>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a7d      	ldr	r2, [pc, #500]	@ (800720c <HAL_I2C_Init+0x27c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	bf94      	ite	ls
 800701c:	2301      	movls	r3, #1
 800701e:	2300      	movhi	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e0e7      	b.n	80071fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4a78      	ldr	r2, [pc, #480]	@ (8007210 <HAL_I2C_Init+0x280>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	0c9b      	lsrs	r3, r3, #18
 8007034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4a6a      	ldr	r2, [pc, #424]	@ (8007204 <HAL_I2C_Init+0x274>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d802      	bhi.n	8007064 <HAL_I2C_Init+0xd4>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	3301      	adds	r3, #1
 8007062:	e009      	b.n	8007078 <HAL_I2C_Init+0xe8>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800706a:	fb02 f303 	mul.w	r3, r2, r3
 800706e:	4a69      	ldr	r2, [pc, #420]	@ (8007214 <HAL_I2C_Init+0x284>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	099b      	lsrs	r3, r3, #6
 8007076:	3301      	adds	r3, #1
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	430b      	orrs	r3, r1
 800707e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800708a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	495c      	ldr	r1, [pc, #368]	@ (8007204 <HAL_I2C_Init+0x274>)
 8007094:	428b      	cmp	r3, r1
 8007096:	d819      	bhi.n	80070cc <HAL_I2C_Init+0x13c>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	1e59      	subs	r1, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80070ac:	400b      	ands	r3, r1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_I2C_Init+0x138>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1e59      	subs	r1, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80070c0:	3301      	adds	r3, #1
 80070c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070c6:	e051      	b.n	800716c <HAL_I2C_Init+0x1dc>
 80070c8:	2304      	movs	r3, #4
 80070ca:	e04f      	b.n	800716c <HAL_I2C_Init+0x1dc>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d111      	bne.n	80070f8 <HAL_I2C_Init+0x168>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	1e58      	subs	r0, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6859      	ldr	r1, [r3, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	440b      	add	r3, r1
 80070e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070e6:	3301      	adds	r3, #1
 80070e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	e012      	b.n	800711e <HAL_I2C_Init+0x18e>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	1e58      	subs	r0, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6859      	ldr	r1, [r3, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	0099      	lsls	r1, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	fbb0 f3f3 	udiv	r3, r0, r3
 800710e:	3301      	adds	r3, #1
 8007110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_I2C_Init+0x196>
 8007122:	2301      	movs	r3, #1
 8007124:	e022      	b.n	800716c <HAL_I2C_Init+0x1dc>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10e      	bne.n	800714c <HAL_I2C_Init+0x1bc>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1e58      	subs	r0, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6859      	ldr	r1, [r3, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	440b      	add	r3, r1
 800713c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007140:	3301      	adds	r3, #1
 8007142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800714a:	e00f      	b.n	800716c <HAL_I2C_Init+0x1dc>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	1e58      	subs	r0, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6859      	ldr	r1, [r3, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	0099      	lsls	r1, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007162:	3301      	adds	r3, #1
 8007164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	6809      	ldr	r1, [r1, #0]
 8007170:	4313      	orrs	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800719a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6911      	ldr	r1, [r2, #16]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68d2      	ldr	r2, [r2, #12]
 80071a6:	4311      	orrs	r1, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695a      	ldr	r2, [r3, #20]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	000186a0 	.word	0x000186a0
 8007208:	001e847f 	.word	0x001e847f
 800720c:	003d08ff 	.word	0x003d08ff
 8007210:	431bde83 	.word	0x431bde83
 8007214:	10624dd3 	.word	0x10624dd3

08007218 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722a:	2b80      	cmp	r3, #128	@ 0x80
 800722c:	d103      	bne.n	8007236 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	611a      	str	r2, [r3, #16]
  }
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	461a      	mov	r2, r3
 8007250:	460b      	mov	r3, r1
 8007252:	817b      	strh	r3, [r7, #10]
 8007254:	4613      	mov	r3, r2
 8007256:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007258:	f7ff faf6 	bl	8006848 <HAL_GetTick>
 800725c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b20      	cmp	r3, #32
 8007268:	f040 80e0 	bne.w	800742c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2319      	movs	r3, #25
 8007272:	2201      	movs	r2, #1
 8007274:	4970      	ldr	r1, [pc, #448]	@ (8007438 <HAL_I2C_Master_Transmit+0x1f4>)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f002 fa14 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007282:	2302      	movs	r3, #2
 8007284:	e0d3      	b.n	800742e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_I2C_Master_Transmit+0x50>
 8007290:	2302      	movs	r3, #2
 8007292:	e0cc      	b.n	800742e <HAL_I2C_Master_Transmit+0x1ea>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d007      	beq.n	80072ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0201 	orr.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2221      	movs	r2, #33	@ 0x21
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2210      	movs	r2, #16
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	893a      	ldrh	r2, [r7, #8]
 80072ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4a50      	ldr	r2, [pc, #320]	@ (800743c <HAL_I2C_Master_Transmit+0x1f8>)
 80072fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072fc:	8979      	ldrh	r1, [r7, #10]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 ffd6 	bl	80092b4 <I2C_MasterRequestWrite>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e08d      	b.n	800742e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007312:	2300      	movs	r3, #0
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007328:	e066      	b.n	80073f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	6a39      	ldr	r1, [r7, #32]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f002 fad2 	bl	80098d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00d      	beq.n	8007356 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	2b04      	cmp	r3, #4
 8007340:	d107      	bne.n	8007352 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e06b      	b.n	800742e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b04      	cmp	r3, #4
 8007392:	d11b      	bne.n	80073cc <HAL_I2C_Master_Transmit+0x188>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	d017      	beq.n	80073cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	6a39      	ldr	r1, [r7, #32]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f002 fac9 	bl	8009968 <I2C_WaitOnBTFFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00d      	beq.n	80073f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d107      	bne.n	80073f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e01a      	b.n	800742e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d194      	bne.n	800732a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800740e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e000      	b.n	800742e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800742c:	2302      	movs	r3, #2
  }
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	00100002 	.word	0x00100002
 800743c:	ffff0000 	.word	0xffff0000

08007440 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08c      	sub	sp, #48	@ 0x30
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	461a      	mov	r2, r3
 800744c:	460b      	mov	r3, r1
 800744e:	817b      	strh	r3, [r7, #10]
 8007450:	4613      	mov	r3, r2
 8007452:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007454:	f7ff f9f8 	bl	8006848 <HAL_GetTick>
 8007458:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b20      	cmp	r3, #32
 8007464:	f040 8217 	bne.w	8007896 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	2319      	movs	r3, #25
 800746e:	2201      	movs	r2, #1
 8007470:	497c      	ldr	r1, [pc, #496]	@ (8007664 <HAL_I2C_Master_Receive+0x224>)
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f002 f916 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800747e:	2302      	movs	r3, #2
 8007480:	e20a      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_I2C_Master_Receive+0x50>
 800748c:	2302      	movs	r3, #2
 800748e:	e203      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d007      	beq.n	80074b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2222      	movs	r2, #34	@ 0x22
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2210      	movs	r2, #16
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	893a      	ldrh	r2, [r7, #8]
 80074e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4a5c      	ldr	r2, [pc, #368]	@ (8007668 <HAL_I2C_Master_Receive+0x228>)
 80074f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80074f8:	8979      	ldrh	r1, [r7, #10]
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f001 ff5a 	bl	80093b8 <I2C_MasterRequestRead>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e1c4      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d113      	bne.n	800753e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007516:	2300      	movs	r3, #0
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	623b      	str	r3, [r7, #32]
 800752a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e198      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007542:	2b01      	cmp	r3, #1
 8007544:	d11b      	bne.n	800757e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	e178      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007582:	2b02      	cmp	r3, #2
 8007584:	d11b      	bne.n	80075be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007594:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	e158      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80075cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075e4:	e144      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	f200 80f1 	bhi.w	80077d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d123      	bne.n	8007640 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f002 fa2d 	bl	8009a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e145      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800763e:	e117      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007644:	2b02      	cmp	r3, #2
 8007646:	d14e      	bne.n	80076e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	2200      	movs	r2, #0
 8007650:	4906      	ldr	r1, [pc, #24]	@ (800766c <HAL_I2C_Master_Receive+0x22c>)
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f002 f826 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d008      	beq.n	8007670 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e11a      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
 8007662:	bf00      	nop
 8007664:	00100002 	.word	0x00100002
 8007668:	ffff0000 	.word	0xffff0000
 800766c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800767e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076e4:	e0c4      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	2200      	movs	r2, #0
 80076ee:	496c      	ldr	r1, [pc, #432]	@ (80078a0 <HAL_I2C_Master_Receive+0x460>)
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f001 ffd7 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0cb      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800770e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b01      	subs	r3, #1
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007748:	2200      	movs	r2, #0
 800774a:	4955      	ldr	r1, [pc, #340]	@ (80078a0 <HAL_I2C_Master_Receive+0x460>)
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f001 ffa9 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e09d      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800776a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077d0:	e04e      	b.n	8007870 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f002 f940 	bl	8009a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e058      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b04      	cmp	r3, #4
 8007824:	d124      	bne.n	8007870 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800782a:	2b03      	cmp	r3, #3
 800782c:	d107      	bne.n	800783e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800783c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007874:	2b00      	cmp	r3, #0
 8007876:	f47f aeb6 	bne.w	80075e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e000      	b.n	8007898 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3728      	adds	r7, #40	@ 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	00010004 	.word	0x00010004

080078a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08a      	sub	sp, #40	@ 0x28
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	460b      	mov	r3, r1
 80078b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80078b4:	f7fe ffc8 	bl	8006848 <HAL_GetTick>
 80078b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	f040 8111 	bne.w	8007aee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	2319      	movs	r3, #25
 80078d2:	2201      	movs	r2, #1
 80078d4:	4988      	ldr	r1, [pc, #544]	@ (8007af8 <HAL_I2C_IsDeviceReady+0x254>)
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f001 fee4 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80078e2:	2302      	movs	r3, #2
 80078e4:	e104      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_I2C_IsDeviceReady+0x50>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e0fd      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b01      	cmp	r3, #1
 8007908:	d007      	beq.n	800791a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2224      	movs	r2, #36	@ 0x24
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a70      	ldr	r2, [pc, #448]	@ (8007afc <HAL_I2C_IsDeviceReady+0x258>)
 800793c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800794c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2200      	movs	r2, #0
 8007956:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 fea2 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007970:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007974:	d103      	bne.n	800797e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800797c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e0b6      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007990:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007992:	f7fe ff59 	bl	8006848 <HAL_GetTick>
 8007996:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	bf0c      	ite	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	2300      	movne	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079bc:	bf0c      	ite	eq
 80079be:	2301      	moveq	r3, #1
 80079c0:	2300      	movne	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80079c6:	e025      	b.n	8007a14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079c8:	f7fe ff3e 	bl	8006848 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d302      	bcc.n	80079de <HAL_I2C_IsDeviceReady+0x13a>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	22a0      	movs	r2, #160	@ 0xa0
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	bf0c      	ite	eq
 80079f4:	2301      	moveq	r3, #1
 80079f6:	2300      	movne	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2301      	moveq	r3, #1
 8007a0e:	2300      	movne	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a1e:	d005      	beq.n	8007a2c <HAL_I2C_IsDeviceReady+0x188>
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <HAL_I2C_IsDeviceReady+0x188>
 8007a26:	7dbb      	ldrb	r3, [r7, #22]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0cd      	beq.n	80079c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d129      	bne.n	8007a96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2319      	movs	r3, #25
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4921      	ldr	r1, [pc, #132]	@ (8007af8 <HAL_I2C_IsDeviceReady+0x254>)
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f001 fe16 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e036      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e02c      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aa4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007aae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	2319      	movs	r3, #25
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	490f      	ldr	r1, [pc, #60]	@ (8007af8 <HAL_I2C_IsDeviceReady+0x254>)
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f001 fdf2 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e012      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	f4ff af32 	bcc.w	800793e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	00100002 	.word	0x00100002
 8007afc:	ffff0000 	.word	0xffff0000

08007b00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d003      	beq.n	8007b38 <HAL_I2C_EV_IRQHandler+0x38>
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	2b40      	cmp	r3, #64	@ 0x40
 8007b34:	f040 80b1 	bne.w	8007c9a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10d      	bne.n	8007b6e <HAL_I2C_EV_IRQHandler+0x6e>
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007b58:	d003      	beq.n	8007b62 <HAL_I2C_EV_IRQHandler+0x62>
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007b60:	d101      	bne.n	8007b66 <HAL_I2C_EV_IRQHandler+0x66>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e000      	b.n	8007b68 <HAL_I2C_EV_IRQHandler+0x68>
 8007b66:	2300      	movs	r3, #0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	f000 8114 	beq.w	8007d96 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <HAL_I2C_EV_IRQHandler+0x90>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fff6 	bl	8009b74 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fd76 	bl	800867a <I2C_Master_SB>
 8007b8e:	e083      	b.n	8007c98 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_I2C_EV_IRQHandler+0xac>
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fdee 	bl	8008786 <I2C_Master_ADD10>
 8007baa:	e075      	b.n	8007c98 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <HAL_I2C_EV_IRQHandler+0xc8>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fe0a 	bl	80087da <I2C_Master_ADDR>
 8007bc6:	e067      	b.n	8007c98 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d036      	beq.n	8007c40 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be0:	f000 80db 	beq.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00d      	beq.n	8007c0a <HAL_I2C_EV_IRQHandler+0x10a>
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <HAL_I2C_EV_IRQHandler+0x10a>
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9d6 	bl	8007fb4 <I2C_MasterTransmit_TXE>
 8007c08:	e046      	b.n	8007c98 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80c2 	beq.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80bc 	beq.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b21      	cmp	r3, #33	@ 0x21
 8007c26:	d103      	bne.n	8007c30 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa5f 	bl	80080ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c2e:	e0b4      	b.n	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b40      	cmp	r3, #64	@ 0x40
 8007c34:	f040 80b1 	bne.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 facd 	bl	80081d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c3e:	e0ac      	b.n	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c4e:	f000 80a4 	beq.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00d      	beq.n	8007c78 <HAL_I2C_EV_IRQHandler+0x178>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d008      	beq.n	8007c78 <HAL_I2C_EV_IRQHandler+0x178>
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb49 	bl	8008308 <I2C_MasterReceive_RXNE>
 8007c76:	e00f      	b.n	8007c98 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 808b 	beq.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8085 	beq.w	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc01 	bl	8008498 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c96:	e080      	b.n	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
 8007c98:	e07f      	b.n	8007d9a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d004      	beq.n	8007cac <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	e007      	b.n	8007cbc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d011      	beq.n	8007cea <HAL_I2C_EV_IRQHandler+0x1ea>
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00c      	beq.n	8007cea <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007ce0:	69b9      	ldr	r1, [r7, #24]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 ffc8 	bl	8008c78 <I2C_Slave_ADDR>
 8007ce8:	e05a      	b.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f003 0310 	and.w	r3, r3, #16
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d008      	beq.n	8007d06 <HAL_I2C_EV_IRQHandler+0x206>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 f802 	bl	8008d08 <I2C_Slave_STOPF>
 8007d04:	e04c      	b.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b21      	cmp	r3, #33	@ 0x21
 8007d0a:	d002      	beq.n	8007d12 <HAL_I2C_EV_IRQHandler+0x212>
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b29      	cmp	r3, #41	@ 0x29
 8007d10:	d120      	bne.n	8007d54 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <HAL_I2C_EV_IRQHandler+0x238>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d008      	beq.n	8007d38 <HAL_I2C_EV_IRQHandler+0x238>
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fee3 	bl	8008afc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d36:	e032      	b.n	8007d9e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d02d      	beq.n	8007d9e <HAL_I2C_EV_IRQHandler+0x29e>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d028      	beq.n	8007d9e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 ff12 	bl	8008b76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d52:	e024      	b.n	8007d9e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <HAL_I2C_EV_IRQHandler+0x27a>
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d008      	beq.n	8007d7a <HAL_I2C_EV_IRQHandler+0x27a>
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 ff20 	bl	8008bb8 <I2C_SlaveReceive_RXNE>
 8007d78:	e012      	b.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00d      	beq.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d008      	beq.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 ff50 	bl	8008c34 <I2C_SlaveReceive_BTF>
 8007d94:	e004      	b.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007d96:	bf00      	nop
 8007d98:	e002      	b.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007da0:	3720      	adds	r7, #32
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b08a      	sub	sp, #40	@ 0x28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dc8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00d      	beq.n	8007df0 <HAL_I2C_ER_IRQHandler+0x4a>
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <HAL_I2C_ER_IRQHandler+0x70>
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d008      	beq.n	8007e16 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	f043 0302 	orr.w	r3, r3, #2
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007e14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d03e      	beq.n	8007e9e <HAL_I2C_ER_IRQHandler+0xf8>
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d039      	beq.n	8007e9e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007e2a:	7efb      	ldrb	r3, [r7, #27]
 8007e2c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e3c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e42:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007e44:	7ebb      	ldrb	r3, [r7, #26]
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d112      	bne.n	8007e70 <HAL_I2C_ER_IRQHandler+0xca>
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10f      	bne.n	8007e70 <HAL_I2C_ER_IRQHandler+0xca>
 8007e50:	7cfb      	ldrb	r3, [r7, #19]
 8007e52:	2b21      	cmp	r3, #33	@ 0x21
 8007e54:	d008      	beq.n	8007e68 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007e56:	7cfb      	ldrb	r3, [r7, #19]
 8007e58:	2b29      	cmp	r3, #41	@ 0x29
 8007e5a:	d005      	beq.n	8007e68 <HAL_I2C_ER_IRQHandler+0xc2>
 8007e5c:	7cfb      	ldrb	r3, [r7, #19]
 8007e5e:	2b28      	cmp	r3, #40	@ 0x28
 8007e60:	d106      	bne.n	8007e70 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b21      	cmp	r3, #33	@ 0x21
 8007e66:	d103      	bne.n	8007e70 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f87d 	bl	8008f68 <I2C_Slave_AF>
 8007e6e:	e016      	b.n	8007e9e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007e78:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	f043 0304 	orr.w	r3, r3, #4
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007e82:	7efb      	ldrb	r3, [r7, #27]
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d002      	beq.n	8007e8e <HAL_I2C_ER_IRQHandler+0xe8>
 8007e88:	7efb      	ldrb	r3, [r7, #27]
 8007e8a:	2b40      	cmp	r3, #64	@ 0x40
 8007e8c:	d107      	bne.n	8007e9e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e9c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00d      	beq.n	8007ec4 <HAL_I2C_ER_IRQHandler+0x11e>
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	f043 0308 	orr.w	r3, r3, #8
 8007eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007ec2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f8ba 	bl	8009050 <I2C_ITError>
  }
}
 8007edc:	bf00      	nop
 8007ede:	3728      	adds	r7, #40	@ 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
 8007f40:	4613      	mov	r3, r2
 8007f42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d150      	bne.n	800807c <I2C_MasterTransmit_TXE+0xc8>
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	2b21      	cmp	r3, #33	@ 0x21
 8007fde:	d14d      	bne.n	800807c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d01d      	beq.n	8008022 <I2C_MasterTransmit_TXE+0x6e>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d01a      	beq.n	8008022 <I2C_MasterTransmit_TXE+0x6e>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ff2:	d016      	beq.n	8008022 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008002:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2211      	movs	r2, #17
 8008008:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff ff62 	bl	8007ee4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008020:	e060      	b.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008030:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008040:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b40      	cmp	r3, #64	@ 0x40
 800805a:	d107      	bne.n	800806c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff ff7d 	bl	8007f64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800806a:	e03b      	b.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ff35 	bl	8007ee4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800807a:	e033      	b.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b21      	cmp	r3, #33	@ 0x21
 8008080:	d005      	beq.n	800808e <I2C_MasterTransmit_TXE+0xda>
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b40      	cmp	r3, #64	@ 0x40
 8008086:	d12d      	bne.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b22      	cmp	r3, #34	@ 0x22
 800808c:	d12a      	bne.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d108      	bne.n	80080aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80080a8:	e01c      	b.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b40      	cmp	r3, #64	@ 0x40
 80080b4:	d103      	bne.n	80080be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f88e 	bl	80081d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80080bc:	e012      	b.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	781a      	ldrb	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80080e2:	e7ff      	b.n	80080e4 <I2C_MasterTransmit_TXE+0x130>
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b21      	cmp	r3, #33	@ 0x21
 8008104:	d164      	bne.n	80081d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008134:	e04c      	b.n	80081d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b08      	cmp	r3, #8
 800813a:	d01d      	beq.n	8008178 <I2C_MasterTransmit_BTF+0x8c>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b20      	cmp	r3, #32
 8008140:	d01a      	beq.n	8008178 <I2C_MasterTransmit_BTF+0x8c>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008148:	d016      	beq.n	8008178 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008158:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2211      	movs	r2, #17
 800815e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff feb7 	bl	8007ee4 <HAL_I2C_MasterTxCpltCallback>
}
 8008176:	e02b      	b.n	80081d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008186:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008196:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b40      	cmp	r3, #64	@ 0x40
 80081b0:	d107      	bne.n	80081c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff fed2 	bl	8007f64 <HAL_I2C_MemTxCpltCallback>
}
 80081c0:	e006      	b.n	80081d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff fe8a 	bl	8007ee4 <HAL_I2C_MasterTxCpltCallback>
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d11d      	bne.n	800822c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d10b      	bne.n	8008210 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008208:	1c9a      	adds	r2, r3, #2
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800820e:	e077      	b.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008214:	b29b      	uxth	r3, r3
 8008216:	121b      	asrs	r3, r3, #8
 8008218:	b2da      	uxtb	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800822a:	e069      	b.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008230:	2b01      	cmp	r3, #1
 8008232:	d10b      	bne.n	800824c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008238:	b2da      	uxtb	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800824a:	e059      	b.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008250:	2b02      	cmp	r3, #2
 8008252:	d152      	bne.n	80082fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	2b22      	cmp	r3, #34	@ 0x22
 8008258:	d10d      	bne.n	8008276 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008268:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008274:	e044      	b.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d015      	beq.n	80082ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	2b21      	cmp	r3, #33	@ 0x21
 8008284:	d112      	bne.n	80082ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80082aa:	e029      	b.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d124      	bne.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	2b21      	cmp	r3, #33	@ 0x21
 80082ba:	d121      	bne.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80082ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fe36 	bl	8007f64 <HAL_I2C_MemTxCpltCallback>
}
 80082f8:	e002      	b.n	8008300 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7fe ff8c 	bl	8007218 <I2C_Flush_DR>
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b22      	cmp	r3, #34	@ 0x22
 800831a:	f040 80b9 	bne.w	8008490 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008328:	b29b      	uxth	r3, r3
 800832a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b03      	cmp	r3, #3
 8008330:	d921      	bls.n	8008376 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b03      	cmp	r3, #3
 8008360:	f040 8096 	bne.w	8008490 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008372:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008374:	e08c      	b.n	8008490 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	2b02      	cmp	r3, #2
 800837c:	d07f      	beq.n	800847e <I2C_MasterReceive_RXNE+0x176>
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d002      	beq.n	800838a <I2C_MasterReceive_RXNE+0x82>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d179      	bne.n	800847e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fb34 	bl	80099f8 <I2C_WaitOnSTOPRequestThroughIT>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d14c      	bne.n	8008430 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80083b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691a      	ldr	r2, [r3, #16]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b40      	cmp	r3, #64	@ 0x40
 80083ee:	d10a      	bne.n	8008406 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fdba 	bl	8007f78 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008404:	e044      	b.n	8008490 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d002      	beq.n	800841a <I2C_MasterReceive_RXNE+0x112>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b20      	cmp	r3, #32
 8008418:	d103      	bne.n	8008422 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008420:	e002      	b.n	8008428 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2212      	movs	r2, #18
 8008426:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fd65 	bl	8007ef8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800842e:	e02f      	b.n	8008490 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800843e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691a      	ldr	r2, [r3, #16]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff fd88 	bl	8007f8c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800847c:	e008      	b.n	8008490 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800848c:	605a      	str	r2, [r3, #4]
}
 800848e:	e7ff      	b.n	8008490 <I2C_MasterReceive_RXNE+0x188>
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d11b      	bne.n	80084e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80084e6:	e0c4      	b.n	8008672 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d129      	bne.n	8008546 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008500:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b04      	cmp	r3, #4
 8008506:	d00a      	beq.n	800851e <I2C_MasterReceive_BTF+0x86>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d007      	beq.n	800851e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800851c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008544:	e095      	b.n	8008672 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d17d      	bne.n	800864c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d002      	beq.n	800855c <I2C_MasterReceive_BTF+0xc4>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b10      	cmp	r3, #16
 800855a:	d108      	bne.n	800856e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e016      	b.n	800859c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b04      	cmp	r3, #4
 8008572:	d002      	beq.n	800857a <I2C_MasterReceive_BTF+0xe2>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d108      	bne.n	800858c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e007      	b.n	800859c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800859a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a6:	b2d2      	uxtb	r2, r2
 80085a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085de:	b29b      	uxth	r3, r3
 80085e0:	3b01      	subs	r3, #1
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80085f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	d10a      	bne.n	8008622 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff fcac 	bl	8007f78 <HAL_I2C_MemRxCpltCallback>
}
 8008620:	e027      	b.n	8008672 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d002      	beq.n	8008636 <I2C_MasterReceive_BTF+0x19e>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b20      	cmp	r3, #32
 8008634:	d103      	bne.n	800863e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	631a      	str	r2, [r3, #48]	@ 0x30
 800863c:	e002      	b.n	8008644 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2212      	movs	r2, #18
 8008642:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fc57 	bl	8007ef8 <HAL_I2C_MasterRxCpltCallback>
}
 800864a:	e012      	b.n	8008672 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b40      	cmp	r3, #64	@ 0x40
 800868c:	d117      	bne.n	80086be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80086a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80086a8:	e067      	b.n	800877a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	611a      	str	r2, [r3, #16]
}
 80086bc:	e05d      	b.n	800877a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086c6:	d133      	bne.n	8008730 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b21      	cmp	r3, #33	@ 0x21
 80086d2:	d109      	bne.n	80086e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80086e4:	611a      	str	r2, [r3, #16]
 80086e6:	e008      	b.n	80086fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <I2C_Master_SB+0x92>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d108      	bne.n	800871e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d032      	beq.n	800877a <I2C_Master_SB+0x100>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d02d      	beq.n	800877a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800872c:	605a      	str	r2, [r3, #4]
}
 800872e:	e024      	b.n	800877a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10e      	bne.n	8008756 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873c:	b29b      	uxth	r3, r3
 800873e:	11db      	asrs	r3, r3, #7
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f003 0306 	and.w	r3, r3, #6
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f063 030f 	orn	r3, r3, #15
 800874c:	b2da      	uxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	611a      	str	r2, [r3, #16]
}
 8008754:	e011      	b.n	800877a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800875a:	2b01      	cmp	r3, #1
 800875c:	d10d      	bne.n	800877a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008762:	b29b      	uxth	r3, r3
 8008764:	11db      	asrs	r3, r3, #7
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 0306 	and.w	r3, r3, #6
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f063 030e 	orn	r3, r3, #14
 8008772:	b2da      	uxtb	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	611a      	str	r2, [r3, #16]
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008792:	b2da      	uxtb	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d004      	beq.n	80087ac <I2C_Master_ADD10+0x26>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d108      	bne.n	80087be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00c      	beq.n	80087ce <I2C_Master_ADD10+0x48>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d007      	beq.n	80087ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087cc:	605a      	str	r2, [r3, #4]
  }
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80087da:	b480      	push	{r7}
 80087dc:	b091      	sub	sp, #68	@ 0x44
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b22      	cmp	r3, #34	@ 0x22
 8008802:	f040 8169 	bne.w	8008ad8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10f      	bne.n	800882e <I2C_Master_ADDR+0x54>
 800880e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008812:	2b40      	cmp	r3, #64	@ 0x40
 8008814:	d10b      	bne.n	800882e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008816:	2300      	movs	r3, #0
 8008818:	633b      	str	r3, [r7, #48]	@ 0x30
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	633b      	str	r3, [r7, #48]	@ 0x30
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	633b      	str	r3, [r7, #48]	@ 0x30
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	e160      	b.n	8008af0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008832:	2b00      	cmp	r3, #0
 8008834:	d11d      	bne.n	8008872 <I2C_Master_ADDR+0x98>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800883e:	d118      	bne.n	8008872 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008840:	2300      	movs	r3, #0
 8008842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008864:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008870:	e13e      	b.n	8008af0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d113      	bne.n	80088a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800887c:	2300      	movs	r3, #0
 800887e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008890:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	e115      	b.n	8008ad0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	f040 808a 	bne.w	80089c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088b6:	d137      	bne.n	8008928 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088d6:	d113      	bne.n	8008900 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088e8:	2300      	movs	r3, #0
 80088ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	e0e7      	b.n	8008ad0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008900:	2300      	movs	r3, #0
 8008902:	623b      	str	r3, [r7, #32]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	623b      	str	r3, [r7, #32]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	623b      	str	r3, [r7, #32]
 8008914:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e0d3      	b.n	8008ad0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892a:	2b08      	cmp	r3, #8
 800892c:	d02e      	beq.n	800898c <I2C_Master_ADDR+0x1b2>
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	2b20      	cmp	r3, #32
 8008932:	d02b      	beq.n	800898c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008936:	2b12      	cmp	r3, #18
 8008938:	d102      	bne.n	8008940 <I2C_Master_ADDR+0x166>
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	2b01      	cmp	r3, #1
 800893e:	d125      	bne.n	800898c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008942:	2b04      	cmp	r3, #4
 8008944:	d00e      	beq.n	8008964 <I2C_Master_ADDR+0x18a>
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	2b02      	cmp	r3, #2
 800894a:	d00b      	beq.n	8008964 <I2C_Master_ADDR+0x18a>
 800894c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800894e:	2b10      	cmp	r3, #16
 8008950:	d008      	beq.n	8008964 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e007      	b.n	8008974 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008972:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008974:	2300      	movs	r3, #0
 8008976:	61fb      	str	r3, [r7, #28]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	e0a1      	b.n	8008ad0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800899a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800899c:	2300      	movs	r3, #0
 800899e:	61bb      	str	r3, [r7, #24]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e085      	b.n	8008ad0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d14d      	bne.n	8008a6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d016      	beq.n	8008a02 <I2C_Master_ADDR+0x228>
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d013      	beq.n	8008a02 <I2C_Master_ADDR+0x228>
 80089da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d010      	beq.n	8008a02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e007      	b.n	8008a12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a20:	d117      	bne.n	8008a52 <I2C_Master_ADDR+0x278>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a28:	d00b      	beq.n	8008a42 <I2C_Master_ADDR+0x268>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d008      	beq.n	8008a42 <I2C_Master_ADDR+0x268>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d005      	beq.n	8008a42 <I2C_Master_ADDR+0x268>
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	d002      	beq.n	8008a42 <I2C_Master_ADDR+0x268>
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d107      	bne.n	8008a52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	e032      	b.n	8008ad0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a88:	d117      	bne.n	8008aba <I2C_Master_ADDR+0x2e0>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a90:	d00b      	beq.n	8008aaa <I2C_Master_ADDR+0x2d0>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d008      	beq.n	8008aaa <I2C_Master_ADDR+0x2d0>
 8008a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d005      	beq.n	8008aaa <I2C_Master_ADDR+0x2d0>
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	2b10      	cmp	r3, #16
 8008aa2:	d002      	beq.n	8008aaa <I2C_Master_ADDR+0x2d0>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d107      	bne.n	8008aba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ab8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008ad6:	e00b      	b.n	8008af0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
}
 8008aee:	e7ff      	b.n	8008af0 <I2C_Master_ADDR+0x316>
 8008af0:	bf00      	nop
 8008af2:	3744      	adds	r7, #68	@ 0x44
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d02b      	beq.n	8008b6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d114      	bne.n	8008b6e <I2C_SlaveTransmit_TXE+0x72>
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b29      	cmp	r3, #41	@ 0x29
 8008b48:	d111      	bne.n	8008b6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2221      	movs	r2, #33	@ 0x21
 8008b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2228      	movs	r2, #40	@ 0x28
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff f9cf 	bl	8007f0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d011      	beq.n	8008bac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	781a      	ldrb	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d02c      	beq.n	8008c2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d114      	bne.n	8008c2c <I2C_SlaveReceive_RXNE+0x74>
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c06:	d111      	bne.n	8008c2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2222      	movs	r2, #34	@ 0x22
 8008c1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2228      	movs	r2, #40	@ 0x28
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff f97a 	bl	8007f20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691a      	ldr	r2, [r3, #16]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c92:	2b28      	cmp	r3, #40	@ 0x28
 8008c94:	d125      	bne.n	8008ce2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ca4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	81bb      	strh	r3, [r7, #12]
 8008cc4:	e002      	b.n	8008ccc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008cd4:	89ba      	ldrh	r2, [r7, #12]
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff f92a 	bl	8007f34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ce0:	e00e      	b.n	8008d00 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	60bb      	str	r3, [r7, #8]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	60bb      	str	r3, [r7, #8]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60bb      	str	r3, [r7, #8]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	60bb      	str	r3, [r7, #8]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0201 	orr.w	r2, r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d64:	d172      	bne.n	8008e4c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b22      	cmp	r3, #34	@ 0x22
 8008d6a:	d002      	beq.n	8008d72 <I2C_Slave_STOPF+0x6a>
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d70:	d135      	bne.n	8008dde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	f043 0204 	orr.w	r2, r3, #4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008da4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fd ff1f 	bl	8006bee <HAL_DMA_GetState>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d049      	beq.n	8008e4a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dba:	4a69      	ldr	r2, [pc, #420]	@ (8008f60 <I2C_Slave_STOPF+0x258>)
 8008dbc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fd fef1 	bl	8006baa <HAL_DMA_Abort_IT>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d03d      	beq.n	8008e4a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ddc:	e035      	b.n	8008e4a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfa:	f043 0204 	orr.w	r2, r3, #4
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd fee9 	bl	8006bee <HAL_DMA_GetState>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d014      	beq.n	8008e4c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e26:	4a4e      	ldr	r2, [pc, #312]	@ (8008f60 <I2C_Slave_STOPF+0x258>)
 8008e28:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fd febb 	bl	8006baa <HAL_DMA_Abort_IT>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	e000      	b.n	8008e4c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e4a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d03e      	beq.n	8008ed4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d112      	bne.n	8008e8a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6e:	b2d2      	uxtb	r2, r2
 8008e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e94:	2b40      	cmp	r3, #64	@ 0x40
 8008e96:	d112      	bne.n	8008ebe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691a      	ldr	r2, [r3, #16]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	f043 0204 	orr.w	r2, r3, #4
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f8b7 	bl	8009050 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008ee2:	e039      	b.n	8008f58 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee8:	d109      	bne.n	8008efe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2228      	movs	r2, #40	@ 0x28
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff f811 	bl	8007f20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b28      	cmp	r3, #40	@ 0x28
 8008f08:	d111      	bne.n	8008f2e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a15      	ldr	r2, [pc, #84]	@ (8008f64 <I2C_Slave_STOPF+0x25c>)
 8008f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff f812 	bl	8007f50 <HAL_I2C_ListenCpltCallback>
}
 8008f2c:	e014      	b.n	8008f58 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f32:	2b22      	cmp	r3, #34	@ 0x22
 8008f34:	d002      	beq.n	8008f3c <I2C_Slave_STOPF+0x234>
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	2b22      	cmp	r3, #34	@ 0x22
 8008f3a:	d10d      	bne.n	8008f58 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7fe ffe4 	bl	8007f20 <HAL_I2C_SlaveRxCpltCallback>
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	08009555 	.word	0x08009555
 8008f64:	ffff0000 	.word	0xffff0000

08008f68 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f76:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d002      	beq.n	8008f8a <I2C_Slave_AF+0x22>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d129      	bne.n	8008fde <I2C_Slave_AF+0x76>
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b28      	cmp	r3, #40	@ 0x28
 8008f8e:	d126      	bne.n	8008fde <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a2e      	ldr	r2, [pc, #184]	@ (800904c <I2C_Slave_AF+0xe4>)
 8008f94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008fa4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008fae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fbe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fe ffba 	bl	8007f50 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008fdc:	e031      	b.n	8009042 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2b21      	cmp	r3, #33	@ 0x21
 8008fe2:	d129      	bne.n	8009038 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a19      	ldr	r2, [pc, #100]	@ (800904c <I2C_Slave_AF+0xe4>)
 8008fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2221      	movs	r2, #33	@ 0x21
 8008fee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800900e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009018:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009028:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe f8f4 	bl	8007218 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7fe ff6b 	bl	8007f0c <HAL_I2C_SlaveTxCpltCallback>
}
 8009036:	e004      	b.n	8009042 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009040:	615a      	str	r2, [r3, #20]
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	ffff0000 	.word	0xffff0000

08009050 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800905e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009066:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b10      	cmp	r3, #16
 800906c:	d002      	beq.n	8009074 <I2C_ITError+0x24>
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	2b40      	cmp	r3, #64	@ 0x40
 8009072:	d10a      	bne.n	800908a <I2C_ITError+0x3a>
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b22      	cmp	r3, #34	@ 0x22
 8009078:	d107      	bne.n	800908a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009088:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009090:	2b28      	cmp	r3, #40	@ 0x28
 8009092:	d107      	bne.n	80090a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2228      	movs	r2, #40	@ 0x28
 800909e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80090a2:	e015      	b.n	80090d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090b2:	d00a      	beq.n	80090ca <I2C_ITError+0x7a>
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	2b60      	cmp	r3, #96	@ 0x60
 80090b8:	d007      	beq.n	80090ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090de:	d162      	bne.n	80091a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d020      	beq.n	8009140 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009102:	4a6a      	ldr	r2, [pc, #424]	@ (80092ac <I2C_ITError+0x25c>)
 8009104:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800910a:	4618      	mov	r0, r3
 800910c:	f7fd fd4d 	bl	8006baa <HAL_DMA_Abort_IT>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8089 	beq.w	800922a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
 800913e:	e074      	b.n	800922a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	4a59      	ldr	r2, [pc, #356]	@ (80092ac <I2C_ITError+0x25c>)
 8009146:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914c:	4618      	mov	r0, r3
 800914e:	f7fd fd2c 	bl	8006baa <HAL_DMA_Abort_IT>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d068      	beq.n	800922a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009162:	2b40      	cmp	r3, #64	@ 0x40
 8009164:	d10b      	bne.n	800917e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691a      	ldr	r2, [r3, #16]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009170:	b2d2      	uxtb	r2, r2
 8009172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	e041      	b.n	800922a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b60      	cmp	r3, #96	@ 0x60
 80091b0:	d125      	bne.n	80091fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ca:	2b40      	cmp	r3, #64	@ 0x40
 80091cc:	d10b      	bne.n	80091e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0201 	bic.w	r2, r2, #1
 80091f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7fe fed2 	bl	8007fa0 <HAL_I2C_AbortCpltCallback>
 80091fc:	e015      	b.n	800922a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009208:	2b40      	cmp	r3, #64	@ 0x40
 800920a:	d10b      	bne.n	8009224 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691a      	ldr	r2, [r3, #16]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009216:	b2d2      	uxtb	r2, r2
 8009218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7fe feb1 	bl	8007f8c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10e      	bne.n	8009258 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009266:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800926e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b04      	cmp	r3, #4
 800927a:	d113      	bne.n	80092a4 <I2C_ITError+0x254>
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	2b28      	cmp	r3, #40	@ 0x28
 8009280:	d110      	bne.n	80092a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a0a      	ldr	r2, [pc, #40]	@ (80092b0 <I2C_ITError+0x260>)
 8009286:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fe fe56 	bl	8007f50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	08009555 	.word	0x08009555
 80092b0:	ffff0000 	.word	0xffff0000

080092b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b088      	sub	sp, #32
 80092b8:	af02      	add	r7, sp, #8
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	460b      	mov	r3, r1
 80092c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d006      	beq.n	80092de <I2C_MasterRequestWrite+0x2a>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d003      	beq.n	80092de <I2C_MasterRequestWrite+0x2a>
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80092dc:	d108      	bne.n	80092f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	e00b      	b.n	8009308 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f4:	2b12      	cmp	r3, #18
 80092f6:	d107      	bne.n	8009308 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f9c5 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00d      	beq.n	800933c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932e:	d103      	bne.n	8009338 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009336:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e035      	b.n	80093a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009344:	d108      	bne.n	8009358 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009346:	897b      	ldrh	r3, [r7, #10]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	461a      	mov	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009354:	611a      	str	r2, [r3, #16]
 8009356:	e01b      	b.n	8009390 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009358:	897b      	ldrh	r3, [r7, #10]
 800935a:	11db      	asrs	r3, r3, #7
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 0306 	and.w	r3, r3, #6
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f063 030f 	orn	r3, r3, #15
 8009368:	b2da      	uxtb	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	490e      	ldr	r1, [pc, #56]	@ (80093b0 <I2C_MasterRequestWrite+0xfc>)
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 fa0e 	bl	8009798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e010      	b.n	80093a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009386:	897b      	ldrh	r3, [r7, #10]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	4907      	ldr	r1, [pc, #28]	@ (80093b4 <I2C_MasterRequestWrite+0x100>)
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 f9fe 	bl	8009798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	00010008 	.word	0x00010008
 80093b4:	00010002 	.word	0x00010002

080093b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	460b      	mov	r3, r1
 80093c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d006      	beq.n	80093f2 <I2C_MasterRequestRead+0x3a>
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d003      	beq.n	80093f2 <I2C_MasterRequestRead+0x3a>
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80093f0:	d108      	bne.n	8009404 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	e00b      	b.n	800941c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009408:	2b11      	cmp	r3, #17
 800940a:	d107      	bne.n	800941c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800941a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 f93b 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00d      	beq.n	8009450 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009442:	d103      	bne.n	800944c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800944a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e079      	b.n	8009544 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009458:	d108      	bne.n	800946c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800945a:	897b      	ldrh	r3, [r7, #10]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	b2da      	uxtb	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	611a      	str	r2, [r3, #16]
 800946a:	e05f      	b.n	800952c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800946c:	897b      	ldrh	r3, [r7, #10]
 800946e:	11db      	asrs	r3, r3, #7
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 0306 	and.w	r3, r3, #6
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f063 030f 	orn	r3, r3, #15
 800947c:	b2da      	uxtb	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	4930      	ldr	r1, [pc, #192]	@ (800954c <I2C_MasterRequestRead+0x194>)
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 f984 	bl	8009798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e054      	b.n	8009544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800949a:	897b      	ldrh	r3, [r7, #10]
 800949c:	b2da      	uxtb	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	4929      	ldr	r1, [pc, #164]	@ (8009550 <I2C_MasterRequestRead+0x198>)
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f974 	bl	8009798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e044      	b.n	8009544 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ba:	2300      	movs	r3, #0
 80094bc:	613b      	str	r3, [r7, #16]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f8d9 	bl	80096a4 <I2C_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00d      	beq.n	8009514 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009506:	d103      	bne.n	8009510 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800950e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e017      	b.n	8009544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009514:	897b      	ldrh	r3, [r7, #10]
 8009516:	11db      	asrs	r3, r3, #7
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0306 	and.w	r3, r3, #6
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f063 030e 	orn	r3, r3, #14
 8009524:	b2da      	uxtb	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4907      	ldr	r1, [pc, #28]	@ (8009550 <I2C_MasterRequestRead+0x198>)
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f930 	bl	8009798 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	00010008 	.word	0x00010008
 8009550:	00010002 	.word	0x00010002

08009554 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009564:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800956c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800956e:	4b4b      	ldr	r3, [pc, #300]	@ (800969c <I2C_DMAAbort+0x148>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	4a4a      	ldr	r2, [pc, #296]	@ (80096a0 <I2C_DMAAbort+0x14c>)
 8009576:	fba2 2303 	umull	r2, r3, r2, r3
 800957a:	0a1a      	lsrs	r2, r3, #8
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	00da      	lsls	r2, r3, #3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009592:	f043 0220 	orr.w	r2, r3, #32
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800959a:	e00a      	b.n	80095b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3b01      	subs	r3, #1
 80095a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b0:	d0ea      	beq.n	8009588 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095be:	2200      	movs	r2, #0
 80095c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ce:	2200      	movs	r2, #0
 80095d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2200      	movs	r2, #0
 80095e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f4:	2200      	movs	r2, #0
 80095f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009604:	2200      	movs	r2, #0
 8009606:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0201 	bic.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b60      	cmp	r3, #96	@ 0x60
 8009622:	d10e      	bne.n	8009642 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2220      	movs	r2, #32
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	2200      	movs	r2, #0
 8009638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800963a:	6978      	ldr	r0, [r7, #20]
 800963c:	f7fe fcb0 	bl	8007fa0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009640:	e027      	b.n	8009692 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009642:	7cfb      	ldrb	r3, [r7, #19]
 8009644:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009648:	2b28      	cmp	r3, #40	@ 0x28
 800964a:	d117      	bne.n	800967c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800966a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2200      	movs	r2, #0
 8009670:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2228      	movs	r2, #40	@ 0x28
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800967a:	e007      	b.n	800968c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800968c:	6978      	ldr	r0, [r7, #20]
 800968e:	f7fe fc7d 	bl	8007f8c <HAL_I2C_ErrorCallback>
}
 8009692:	bf00      	nop
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000550 	.word	0x20000550
 80096a0:	14f8b589 	.word	0x14f8b589

080096a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	4613      	mov	r3, r2
 80096b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096b4:	e048      	b.n	8009748 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096bc:	d044      	beq.n	8009748 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096be:	f7fd f8c3 	bl	8006848 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d302      	bcc.n	80096d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d139      	bne.n	8009748 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	0c1b      	lsrs	r3, r3, #16
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10d      	bne.n	80096fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	43da      	mvns	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	e00c      	b.n	8009714 <I2C_WaitOnFlagUntilTimeout+0x70>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	43da      	mvns	r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4013      	ands	r3, r2
 8009706:	b29b      	uxth	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	bf0c      	ite	eq
 800970c:	2301      	moveq	r3, #1
 800970e:	2300      	movne	r3, #0
 8009710:	b2db      	uxtb	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	429a      	cmp	r2, r3
 8009718:	d116      	bne.n	8009748 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e023      	b.n	8009790 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	0c1b      	lsrs	r3, r3, #16
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b01      	cmp	r3, #1
 8009750:	d10d      	bne.n	800976e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	43da      	mvns	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	4013      	ands	r3, r2
 800975e:	b29b      	uxth	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	bf0c      	ite	eq
 8009764:	2301      	moveq	r3, #1
 8009766:	2300      	movne	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	461a      	mov	r2, r3
 800976c:	e00c      	b.n	8009788 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	43da      	mvns	r2, r3
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4013      	ands	r3, r2
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	bf0c      	ite	eq
 8009780:	2301      	moveq	r3, #1
 8009782:	2300      	movne	r3, #0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	461a      	mov	r2, r3
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	429a      	cmp	r2, r3
 800978c:	d093      	beq.n	80096b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097a6:	e071      	b.n	800988c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097b6:	d123      	bne.n	8009800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ec:	f043 0204 	orr.w	r2, r3, #4
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e067      	b.n	80098d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009806:	d041      	beq.n	800988c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009808:	f7fd f81e 	bl	8006848 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d302      	bcc.n	800981e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d136      	bne.n	800988c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	0c1b      	lsrs	r3, r3, #16
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b01      	cmp	r3, #1
 8009826:	d10c      	bne.n	8009842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	43da      	mvns	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4013      	ands	r3, r2
 8009834:	b29b      	uxth	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	bf14      	ite	ne
 800983a:	2301      	movne	r3, #1
 800983c:	2300      	moveq	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	e00b      	b.n	800985a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	43da      	mvns	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4013      	ands	r3, r2
 800984e:	b29b      	uxth	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	bf14      	ite	ne
 8009854:	2301      	movne	r3, #1
 8009856:	2300      	moveq	r3, #0
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d016      	beq.n	800988c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2220      	movs	r2, #32
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	f043 0220 	orr.w	r2, r3, #32
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e021      	b.n	80098d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	0c1b      	lsrs	r3, r3, #16
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b01      	cmp	r3, #1
 8009894:	d10c      	bne.n	80098b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	43da      	mvns	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	4013      	ands	r3, r2
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	bf14      	ite	ne
 80098a8:	2301      	movne	r3, #1
 80098aa:	2300      	moveq	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	e00b      	b.n	80098c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	43da      	mvns	r2, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4013      	ands	r3, r2
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bf14      	ite	ne
 80098c2:	2301      	movne	r3, #1
 80098c4:	2300      	moveq	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f47f af6d 	bne.w	80097a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098e4:	e034      	b.n	8009950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f915 	bl	8009b16 <I2C_IsAcknowledgeFailed>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e034      	b.n	8009960 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098fc:	d028      	beq.n	8009950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098fe:	f7fc ffa3 	bl	8006848 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	429a      	cmp	r2, r3
 800990c:	d302      	bcc.n	8009914 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d11d      	bne.n	8009950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800991e:	2b80      	cmp	r3, #128	@ 0x80
 8009920:	d016      	beq.n	8009950 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993c:	f043 0220 	orr.w	r2, r3, #32
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e007      	b.n	8009960 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800995a:	2b80      	cmp	r3, #128	@ 0x80
 800995c:	d1c3      	bne.n	80098e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009974:	e034      	b.n	80099e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f8cd 	bl	8009b16 <I2C_IsAcknowledgeFailed>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e034      	b.n	80099f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800998c:	d028      	beq.n	80099e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800998e:	f7fc ff5b 	bl	8006848 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	429a      	cmp	r2, r3
 800999c:	d302      	bcc.n	80099a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d11d      	bne.n	80099e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d016      	beq.n	80099e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2220      	movs	r2, #32
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099cc:	f043 0220 	orr.w	r2, r3, #32
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e007      	b.n	80099f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d1c3      	bne.n	8009976 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a04:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	08db      	lsrs	r3, r3, #3
 8009a0a:	4a13      	ldr	r2, [pc, #76]	@ (8009a58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a10:	0a1a      	lsrs	r2, r3, #8
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d107      	bne.n	8009a36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2a:	f043 0220 	orr.w	r2, r3, #32
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e008      	b.n	8009a48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a44:	d0e9      	beq.n	8009a1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	20000550 	.word	0x20000550
 8009a58:	14f8b589 	.word	0x14f8b589

08009a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a68:	e049      	b.n	8009afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	f003 0310 	and.w	r3, r3, #16
 8009a74:	2b10      	cmp	r3, #16
 8009a76:	d119      	bne.n	8009aac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0210 	mvn.w	r2, #16
 8009a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e030      	b.n	8009b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aac:	f7fc fecc 	bl	8006848 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d302      	bcc.n	8009ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d11d      	bne.n	8009afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009acc:	2b40      	cmp	r3, #64	@ 0x40
 8009ace:	d016      	beq.n	8009afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aea:	f043 0220 	orr.w	r2, r3, #32
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e007      	b.n	8009b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b08:	2b40      	cmp	r3, #64	@ 0x40
 8009b0a:	d1ae      	bne.n	8009a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b2c:	d11b      	bne.n	8009b66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009b36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2220      	movs	r2, #32
 8009b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b52:	f043 0204 	orr.w	r2, r3, #4
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b80:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009b84:	d103      	bne.n	8009b8e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b8c:	e007      	b.n	8009b9e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009b96:	d102      	bne.n	8009b9e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
	...

08009bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e267      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d075      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009bca:	4b88      	ldr	r3, [pc, #544]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f003 030c 	and.w	r3, r3, #12
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d00c      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009bd6:	4b85      	ldr	r3, [pc, #532]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	d112      	bne.n	8009c08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009be2:	4b82      	ldr	r3, [pc, #520]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bee:	d10b      	bne.n	8009c08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bf0:	4b7e      	ldr	r3, [pc, #504]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d05b      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x108>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d157      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e242      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c10:	d106      	bne.n	8009c20 <HAL_RCC_OscConfig+0x74>
 8009c12:	4b76      	ldr	r3, [pc, #472]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a75      	ldr	r2, [pc, #468]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	e01d      	b.n	8009c5c <HAL_RCC_OscConfig+0xb0>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c28:	d10c      	bne.n	8009c44 <HAL_RCC_OscConfig+0x98>
 8009c2a:	4b70      	ldr	r3, [pc, #448]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a6f      	ldr	r2, [pc, #444]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	4b6d      	ldr	r3, [pc, #436]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a6c      	ldr	r2, [pc, #432]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	e00b      	b.n	8009c5c <HAL_RCC_OscConfig+0xb0>
 8009c44:	4b69      	ldr	r3, [pc, #420]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a68      	ldr	r2, [pc, #416]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	4b66      	ldr	r3, [pc, #408]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a65      	ldr	r2, [pc, #404]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d013      	beq.n	8009c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c64:	f7fc fdf0 	bl	8006848 <HAL_GetTick>
 8009c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c6a:	e008      	b.n	8009c7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c6c:	f7fc fdec 	bl	8006848 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b64      	cmp	r3, #100	@ 0x64
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e207      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0f0      	beq.n	8009c6c <HAL_RCC_OscConfig+0xc0>
 8009c8a:	e014      	b.n	8009cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c8c:	f7fc fddc 	bl	8006848 <HAL_GetTick>
 8009c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c92:	e008      	b.n	8009ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c94:	f7fc fdd8 	bl	8006848 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b64      	cmp	r3, #100	@ 0x64
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e1f3      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ca6:	4b51      	ldr	r3, [pc, #324]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1f0      	bne.n	8009c94 <HAL_RCC_OscConfig+0xe8>
 8009cb2:	e000      	b.n	8009cb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d063      	beq.n	8009d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 030c 	and.w	r3, r3, #12
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00b      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cce:	4b47      	ldr	r3, [pc, #284]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d11c      	bne.n	8009d14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cda:	4b44      	ldr	r3, [pc, #272]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d116      	bne.n	8009d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ce6:	4b41      	ldr	r3, [pc, #260]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d005      	beq.n	8009cfe <HAL_RCC_OscConfig+0x152>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d001      	beq.n	8009cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e1c7      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	4937      	ldr	r1, [pc, #220]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d12:	e03a      	b.n	8009d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d020      	beq.n	8009d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d1c:	4b34      	ldr	r3, [pc, #208]	@ (8009df0 <HAL_RCC_OscConfig+0x244>)
 8009d1e:	2201      	movs	r2, #1
 8009d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d22:	f7fc fd91 	bl	8006848 <HAL_GetTick>
 8009d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d28:	e008      	b.n	8009d3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d2a:	f7fc fd8d 	bl	8006848 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d901      	bls.n	8009d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e1a8      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0f0      	beq.n	8009d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d48:	4b28      	ldr	r3, [pc, #160]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	4925      	ldr	r1, [pc, #148]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	600b      	str	r3, [r1, #0]
 8009d5c:	e015      	b.n	8009d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d5e:	4b24      	ldr	r3, [pc, #144]	@ (8009df0 <HAL_RCC_OscConfig+0x244>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d64:	f7fc fd70 	bl	8006848 <HAL_GetTick>
 8009d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d6a:	e008      	b.n	8009d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d6c:	f7fc fd6c 	bl	8006848 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e187      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f0      	bne.n	8009d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d036      	beq.n	8009e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d016      	beq.n	8009dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d9e:	4b15      	ldr	r3, [pc, #84]	@ (8009df4 <HAL_RCC_OscConfig+0x248>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da4:	f7fc fd50 	bl	8006848 <HAL_GetTick>
 8009da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dac:	f7fc fd4c 	bl	8006848 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e167      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009dec <HAL_RCC_OscConfig+0x240>)
 8009dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0f0      	beq.n	8009dac <HAL_RCC_OscConfig+0x200>
 8009dca:	e01b      	b.n	8009e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dcc:	4b09      	ldr	r3, [pc, #36]	@ (8009df4 <HAL_RCC_OscConfig+0x248>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dd2:	f7fc fd39 	bl	8006848 <HAL_GetTick>
 8009dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009dd8:	e00e      	b.n	8009df8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dda:	f7fc fd35 	bl	8006848 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d907      	bls.n	8009df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e150      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
 8009dec:	40023800 	.word	0x40023800
 8009df0:	42470000 	.word	0x42470000
 8009df4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009df8:	4b88      	ldr	r3, [pc, #544]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dfc:	f003 0302 	and.w	r3, r3, #2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1ea      	bne.n	8009dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0304 	and.w	r3, r3, #4
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8097 	beq.w	8009f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e16:	4b81      	ldr	r3, [pc, #516]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10f      	bne.n	8009e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]
 8009e26:	4b7d      	ldr	r3, [pc, #500]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e32:	4b7a      	ldr	r3, [pc, #488]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e3a:	60bb      	str	r3, [r7, #8]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e42:	4b77      	ldr	r3, [pc, #476]	@ (800a020 <HAL_RCC_OscConfig+0x474>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d118      	bne.n	8009e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e4e:	4b74      	ldr	r3, [pc, #464]	@ (800a020 <HAL_RCC_OscConfig+0x474>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a73      	ldr	r2, [pc, #460]	@ (800a020 <HAL_RCC_OscConfig+0x474>)
 8009e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e5a:	f7fc fcf5 	bl	8006848 <HAL_GetTick>
 8009e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e60:	e008      	b.n	8009e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e62:	f7fc fcf1 	bl	8006848 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e10c      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e74:	4b6a      	ldr	r3, [pc, #424]	@ (800a020 <HAL_RCC_OscConfig+0x474>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0f0      	beq.n	8009e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d106      	bne.n	8009e96 <HAL_RCC_OscConfig+0x2ea>
 8009e88:	4b64      	ldr	r3, [pc, #400]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e8c:	4a63      	ldr	r2, [pc, #396]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009e8e:	f043 0301 	orr.w	r3, r3, #1
 8009e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e94:	e01c      	b.n	8009ed0 <HAL_RCC_OscConfig+0x324>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d10c      	bne.n	8009eb8 <HAL_RCC_OscConfig+0x30c>
 8009e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009ea4:	f043 0304 	orr.w	r3, r3, #4
 8009ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eae:	4a5b      	ldr	r2, [pc, #364]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009eb6:	e00b      	b.n	8009ed0 <HAL_RCC_OscConfig+0x324>
 8009eb8:	4b58      	ldr	r3, [pc, #352]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ebc:	4a57      	ldr	r2, [pc, #348]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009ebe:	f023 0301 	bic.w	r3, r3, #1
 8009ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ec4:	4b55      	ldr	r3, [pc, #340]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec8:	4a54      	ldr	r2, [pc, #336]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009eca:	f023 0304 	bic.w	r3, r3, #4
 8009ece:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d015      	beq.n	8009f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ed8:	f7fc fcb6 	bl	8006848 <HAL_GetTick>
 8009edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ede:	e00a      	b.n	8009ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ee0:	f7fc fcb2 	bl	8006848 <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e0cb      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ef6:	4b49      	ldr	r3, [pc, #292]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0ee      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x334>
 8009f02:	e014      	b.n	8009f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f04:	f7fc fca0 	bl	8006848 <HAL_GetTick>
 8009f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f0a:	e00a      	b.n	8009f22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f0c:	f7fc fc9c 	bl	8006848 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e0b5      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f22:	4b3e      	ldr	r3, [pc, #248]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1ee      	bne.n	8009f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d105      	bne.n	8009f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f34:	4b39      	ldr	r3, [pc, #228]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f38:	4a38      	ldr	r2, [pc, #224]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 80a1 	beq.w	800a08c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f4a:	4b34      	ldr	r3, [pc, #208]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f003 030c 	and.w	r3, r3, #12
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d05c      	beq.n	800a010 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d141      	bne.n	8009fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f5e:	4b31      	ldr	r3, [pc, #196]	@ (800a024 <HAL_RCC_OscConfig+0x478>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f64:	f7fc fc70 	bl	8006848 <HAL_GetTick>
 8009f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f6a:	e008      	b.n	8009f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f6c:	f7fc fc6c 	bl	8006848 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d901      	bls.n	8009f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e087      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f7e:	4b27      	ldr	r3, [pc, #156]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1f0      	bne.n	8009f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	69da      	ldr	r2, [r3, #28]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	431a      	orrs	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f98:	019b      	lsls	r3, r3, #6
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa0:	085b      	lsrs	r3, r3, #1
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	041b      	lsls	r3, r3, #16
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	061b      	lsls	r3, r3, #24
 8009fae:	491b      	ldr	r1, [pc, #108]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fb4:	4b1b      	ldr	r3, [pc, #108]	@ (800a024 <HAL_RCC_OscConfig+0x478>)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fba:	f7fc fc45 	bl	8006848 <HAL_GetTick>
 8009fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fc2:	f7fc fc41 	bl	8006848 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d901      	bls.n	8009fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e05c      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fd4:	4b11      	ldr	r3, [pc, #68]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0f0      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x416>
 8009fe0:	e054      	b.n	800a08c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <HAL_RCC_OscConfig+0x478>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fe8:	f7fc fc2e 	bl	8006848 <HAL_GetTick>
 8009fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ff0:	f7fc fc2a 	bl	8006848 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e045      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a002:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <HAL_RCC_OscConfig+0x470>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1f0      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x444>
 800a00e:	e03d      	b.n	800a08c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d107      	bne.n	800a028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e038      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
 800a01c:	40023800 	.word	0x40023800
 800a020:	40007000 	.word	0x40007000
 800a024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a028:	4b1b      	ldr	r3, [pc, #108]	@ (800a098 <HAL_RCC_OscConfig+0x4ec>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d028      	beq.n	800a088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a040:	429a      	cmp	r2, r3
 800a042:	d121      	bne.n	800a088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a04e:	429a      	cmp	r2, r3
 800a050:	d11a      	bne.n	800a088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a058:	4013      	ands	r3, r2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a05e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a060:	4293      	cmp	r3, r2
 800a062:	d111      	bne.n	800a088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	3b01      	subs	r3, #1
 800a072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a074:	429a      	cmp	r2, r3
 800a076:	d107      	bne.n	800a088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a084:	429a      	cmp	r2, r3
 800a086:	d001      	beq.n	800a08c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e000      	b.n	800a08e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	40023800 	.word	0x40023800

0800a09c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0cc      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0b0:	4b68      	ldr	r3, [pc, #416]	@ (800a254 <HAL_RCC_ClockConfig+0x1b8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0307 	and.w	r3, r3, #7
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d90c      	bls.n	800a0d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0be:	4b65      	ldr	r3, [pc, #404]	@ (800a254 <HAL_RCC_ClockConfig+0x1b8>)
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0c6:	4b63      	ldr	r3, [pc, #396]	@ (800a254 <HAL_RCC_ClockConfig+0x1b8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d001      	beq.n	800a0d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e0b8      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d020      	beq.n	800a126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d005      	beq.n	800a0fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a0f0:	4b59      	ldr	r3, [pc, #356]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	4a58      	ldr	r2, [pc, #352]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a0fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0308 	and.w	r3, r3, #8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a108:	4b53      	ldr	r3, [pc, #332]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	4a52      	ldr	r2, [pc, #328]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a10e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a114:	4b50      	ldr	r3, [pc, #320]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	494d      	ldr	r1, [pc, #308]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a122:	4313      	orrs	r3, r2
 800a124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d044      	beq.n	800a1bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d107      	bne.n	800a14a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a13a:	4b47      	ldr	r3, [pc, #284]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d119      	bne.n	800a17a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e07f      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d003      	beq.n	800a15a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a156:	2b03      	cmp	r3, #3
 800a158:	d107      	bne.n	800a16a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a15a:	4b3f      	ldr	r3, [pc, #252]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a162:	2b00      	cmp	r3, #0
 800a164:	d109      	bne.n	800a17a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e06f      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a16a:	4b3b      	ldr	r3, [pc, #236]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e067      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a17a:	4b37      	ldr	r3, [pc, #220]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f023 0203 	bic.w	r2, r3, #3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	4934      	ldr	r1, [pc, #208]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a18c:	f7fc fb5c 	bl	8006848 <HAL_GetTick>
 800a190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a192:	e00a      	b.n	800a1aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a194:	f7fc fb58 	bl	8006848 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e04f      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f003 020c 	and.w	r2, r3, #12
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d1eb      	bne.n	800a194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1bc:	4b25      	ldr	r3, [pc, #148]	@ (800a254 <HAL_RCC_ClockConfig+0x1b8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d20c      	bcs.n	800a1e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ca:	4b22      	ldr	r3, [pc, #136]	@ (800a254 <HAL_RCC_ClockConfig+0x1b8>)
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	b2d2      	uxtb	r2, r2
 800a1d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1d2:	4b20      	ldr	r3, [pc, #128]	@ (800a254 <HAL_RCC_ClockConfig+0x1b8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d001      	beq.n	800a1e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e032      	b.n	800a24a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d008      	beq.n	800a202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1f0:	4b19      	ldr	r3, [pc, #100]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4916      	ldr	r1, [pc, #88]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a20e:	4b12      	ldr	r3, [pc, #72]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	490e      	ldr	r1, [pc, #56]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a222:	f000 f821 	bl	800a268 <HAL_RCC_GetSysClockFreq>
 800a226:	4602      	mov	r2, r0
 800a228:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <HAL_RCC_ClockConfig+0x1bc>)
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	091b      	lsrs	r3, r3, #4
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	490a      	ldr	r1, [pc, #40]	@ (800a25c <HAL_RCC_ClockConfig+0x1c0>)
 800a234:	5ccb      	ldrb	r3, [r1, r3]
 800a236:	fa22 f303 	lsr.w	r3, r2, r3
 800a23a:	4a09      	ldr	r2, [pc, #36]	@ (800a260 <HAL_RCC_ClockConfig+0x1c4>)
 800a23c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a23e:	4b09      	ldr	r3, [pc, #36]	@ (800a264 <HAL_RCC_ClockConfig+0x1c8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f7fc fabc 	bl	80067c0 <HAL_InitTick>

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40023c00 	.word	0x40023c00
 800a258:	40023800 	.word	0x40023800
 800a25c:	0800cf80 	.word	0x0800cf80
 800a260:	20000550 	.word	0x20000550
 800a264:	20000554 	.word	0x20000554

0800a268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a26c:	b094      	sub	sp, #80	@ 0x50
 800a26e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a280:	4b79      	ldr	r3, [pc, #484]	@ (800a468 <HAL_RCC_GetSysClockFreq+0x200>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 030c 	and.w	r3, r3, #12
 800a288:	2b08      	cmp	r3, #8
 800a28a:	d00d      	beq.n	800a2a8 <HAL_RCC_GetSysClockFreq+0x40>
 800a28c:	2b08      	cmp	r3, #8
 800a28e:	f200 80e1 	bhi.w	800a454 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <HAL_RCC_GetSysClockFreq+0x34>
 800a296:	2b04      	cmp	r3, #4
 800a298:	d003      	beq.n	800a2a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a29a:	e0db      	b.n	800a454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a29c:	4b73      	ldr	r3, [pc, #460]	@ (800a46c <HAL_RCC_GetSysClockFreq+0x204>)
 800a29e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a2a0:	e0db      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a2a2:	4b73      	ldr	r3, [pc, #460]	@ (800a470 <HAL_RCC_GetSysClockFreq+0x208>)
 800a2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a2a6:	e0d8      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a2a8:	4b6f      	ldr	r3, [pc, #444]	@ (800a468 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a2b2:	4b6d      	ldr	r3, [pc, #436]	@ (800a468 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d063      	beq.n	800a386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2be:	4b6a      	ldr	r3, [pc, #424]	@ (800a468 <HAL_RCC_GetSysClockFreq+0x200>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	099b      	lsrs	r3, r3, #6
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a2da:	4622      	mov	r2, r4
 800a2dc:	462b      	mov	r3, r5
 800a2de:	f04f 0000 	mov.w	r0, #0
 800a2e2:	f04f 0100 	mov.w	r1, #0
 800a2e6:	0159      	lsls	r1, r3, #5
 800a2e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a2ec:	0150      	lsls	r0, r2, #5
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	1a51      	subs	r1, r2, r1
 800a2f6:	6139      	str	r1, [r7, #16]
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	eb63 0301 	sbc.w	r3, r3, r1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	f04f 0200 	mov.w	r2, #0
 800a304:	f04f 0300 	mov.w	r3, #0
 800a308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a30c:	4659      	mov	r1, fp
 800a30e:	018b      	lsls	r3, r1, #6
 800a310:	4651      	mov	r1, sl
 800a312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a316:	4651      	mov	r1, sl
 800a318:	018a      	lsls	r2, r1, #6
 800a31a:	4651      	mov	r1, sl
 800a31c:	ebb2 0801 	subs.w	r8, r2, r1
 800a320:	4659      	mov	r1, fp
 800a322:	eb63 0901 	sbc.w	r9, r3, r1
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	f04f 0300 	mov.w	r3, #0
 800a32e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a33a:	4690      	mov	r8, r2
 800a33c:	4699      	mov	r9, r3
 800a33e:	4623      	mov	r3, r4
 800a340:	eb18 0303 	adds.w	r3, r8, r3
 800a344:	60bb      	str	r3, [r7, #8]
 800a346:	462b      	mov	r3, r5
 800a348:	eb49 0303 	adc.w	r3, r9, r3
 800a34c:	60fb      	str	r3, [r7, #12]
 800a34e:	f04f 0200 	mov.w	r2, #0
 800a352:	f04f 0300 	mov.w	r3, #0
 800a356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a35a:	4629      	mov	r1, r5
 800a35c:	024b      	lsls	r3, r1, #9
 800a35e:	4621      	mov	r1, r4
 800a360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a364:	4621      	mov	r1, r4
 800a366:	024a      	lsls	r2, r1, #9
 800a368:	4610      	mov	r0, r2
 800a36a:	4619      	mov	r1, r3
 800a36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a36e:	2200      	movs	r2, #0
 800a370:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a378:	f7f5 ff82 	bl	8000280 <__aeabi_uldivmod>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4613      	mov	r3, r2
 800a382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a384:	e058      	b.n	800a438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a386:	4b38      	ldr	r3, [pc, #224]	@ (800a468 <HAL_RCC_GetSysClockFreq+0x200>)
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	099b      	lsrs	r3, r3, #6
 800a38c:	2200      	movs	r2, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	4611      	mov	r1, r2
 800a392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a396:	623b      	str	r3, [r7, #32]
 800a398:	2300      	movs	r3, #0
 800a39a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a39c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	464b      	mov	r3, r9
 800a3a4:	f04f 0000 	mov.w	r0, #0
 800a3a8:	f04f 0100 	mov.w	r1, #0
 800a3ac:	0159      	lsls	r1, r3, #5
 800a3ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3b2:	0150      	lsls	r0, r2, #5
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	ebb2 0a01 	subs.w	sl, r2, r1
 800a3be:	4649      	mov	r1, r9
 800a3c0:	eb63 0b01 	sbc.w	fp, r3, r1
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a3d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a3d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a3d8:	ebb2 040a 	subs.w	r4, r2, sl
 800a3dc:	eb63 050b 	sbc.w	r5, r3, fp
 800a3e0:	f04f 0200 	mov.w	r2, #0
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	00eb      	lsls	r3, r5, #3
 800a3ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3ee:	00e2      	lsls	r2, r4, #3
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	461d      	mov	r5, r3
 800a3f4:	4643      	mov	r3, r8
 800a3f6:	18e3      	adds	r3, r4, r3
 800a3f8:	603b      	str	r3, [r7, #0]
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	eb45 0303 	adc.w	r3, r5, r3
 800a400:	607b      	str	r3, [r7, #4]
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a40e:	4629      	mov	r1, r5
 800a410:	028b      	lsls	r3, r1, #10
 800a412:	4621      	mov	r1, r4
 800a414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a418:	4621      	mov	r1, r4
 800a41a:	028a      	lsls	r2, r1, #10
 800a41c:	4610      	mov	r0, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a422:	2200      	movs	r2, #0
 800a424:	61bb      	str	r3, [r7, #24]
 800a426:	61fa      	str	r2, [r7, #28]
 800a428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a42c:	f7f5 ff28 	bl	8000280 <__aeabi_uldivmod>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4613      	mov	r3, r2
 800a436:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a438:	4b0b      	ldr	r3, [pc, #44]	@ (800a468 <HAL_RCC_GetSysClockFreq+0x200>)
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	3301      	adds	r3, #1
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a452:	e002      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a454:	4b05      	ldr	r3, [pc, #20]	@ (800a46c <HAL_RCC_GetSysClockFreq+0x204>)
 800a456:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a45a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3750      	adds	r7, #80	@ 0x50
 800a460:	46bd      	mov	sp, r7
 800a462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a466:	bf00      	nop
 800a468:	40023800 	.word	0x40023800
 800a46c:	00f42400 	.word	0x00f42400
 800a470:	007a1200 	.word	0x007a1200

0800a474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a478:	4b03      	ldr	r3, [pc, #12]	@ (800a488 <HAL_RCC_GetHCLKFreq+0x14>)
 800a47a:	681b      	ldr	r3, [r3, #0]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000550 	.word	0x20000550

0800a48c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a490:	f7ff fff0 	bl	800a474 <HAL_RCC_GetHCLKFreq>
 800a494:	4602      	mov	r2, r0
 800a496:	4b05      	ldr	r3, [pc, #20]	@ (800a4ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	0a9b      	lsrs	r3, r3, #10
 800a49c:	f003 0307 	and.w	r3, r3, #7
 800a4a0:	4903      	ldr	r1, [pc, #12]	@ (800a4b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4a2:	5ccb      	ldrb	r3, [r1, r3]
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	40023800 	.word	0x40023800
 800a4b0:	0800cf90 	.word	0x0800cf90

0800a4b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a4b8:	f7ff ffdc 	bl	800a474 <HAL_RCC_GetHCLKFreq>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	0b5b      	lsrs	r3, r3, #13
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	4903      	ldr	r1, [pc, #12]	@ (800a4d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4ca:	5ccb      	ldrb	r3, [r1, r3]
 800a4cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40023800 	.word	0x40023800
 800a4d8:	0800cf90 	.word	0x0800cf90

0800a4dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e041      	b.n	800a572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7fb ff84 	bl	8006410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f000 fa70 	bl	800aa00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d001      	beq.n	800a594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e044      	b.n	800a61e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0201 	orr.w	r2, r2, #1
 800a5aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a62c <HAL_TIM_Base_Start_IT+0xb0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d018      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5be:	d013      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a630 <HAL_TIM_Base_Start_IT+0xb4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00e      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a19      	ldr	r2, [pc, #100]	@ (800a634 <HAL_TIM_Base_Start_IT+0xb8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d009      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a17      	ldr	r2, [pc, #92]	@ (800a638 <HAL_TIM_Base_Start_IT+0xbc>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d004      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a16      	ldr	r2, [pc, #88]	@ (800a63c <HAL_TIM_Base_Start_IT+0xc0>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d111      	bne.n	800a60c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b06      	cmp	r3, #6
 800a5f8:	d010      	beq.n	800a61c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0201 	orr.w	r2, r2, #1
 800a608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a60a:	e007      	b.n	800a61c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0201 	orr.w	r2, r2, #1
 800a61a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	40010000 	.word	0x40010000
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40014000 	.word	0x40014000

0800a640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f003 0302 	and.w	r3, r3, #2
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d020      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01b      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f06f 0202 	mvn.w	r2, #2
 800a674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	f003 0303 	and.w	r3, r3, #3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f999 	bl	800a9c2 <HAL_TIM_IC_CaptureCallback>
 800a690:	e005      	b.n	800a69e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f98b 	bl	800a9ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f99c 	bl	800a9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f003 0304 	and.w	r3, r3, #4
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d020      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d01b      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f06f 0204 	mvn.w	r2, #4
 800a6c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f973 	bl	800a9c2 <HAL_TIM_IC_CaptureCallback>
 800a6dc:	e005      	b.n	800a6ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f965 	bl	800a9ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f976 	bl	800a9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d020      	beq.n	800a73c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01b      	beq.n	800a73c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0208 	mvn.w	r2, #8
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2204      	movs	r2, #4
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f94d 	bl	800a9c2 <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f93f 	bl	800a9ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f950 	bl	800a9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	2b00      	cmp	r3, #0
 800a744:	d020      	beq.n	800a788 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d01b      	beq.n	800a788 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0210 	mvn.w	r2, #16
 800a758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2208      	movs	r2, #8
 800a75e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f927 	bl	800a9c2 <HAL_TIM_IC_CaptureCallback>
 800a774:	e005      	b.n	800a782 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f919 	bl	800a9ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f92a 	bl	800a9d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00c      	beq.n	800a7ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d007      	beq.n	800a7ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f06f 0201 	mvn.w	r2, #1
 800a7a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7f9 f918 	bl	80039dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00c      	beq.n	800a7d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fab0 	bl	800ad30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00c      	beq.n	800a7f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d007      	beq.n	800a7f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f8fb 	bl	800a9ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f003 0320 	and.w	r3, r3, #32
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00c      	beq.n	800a818 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f003 0320 	and.w	r3, r3, #32
 800a804:	2b00      	cmp	r3, #0
 800a806:	d007      	beq.n	800a818 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0220 	mvn.w	r2, #32
 800a810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa82 	bl	800ad1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a818:	bf00      	nop
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a834:	2b01      	cmp	r3, #1
 800a836:	d101      	bne.n	800a83c <HAL_TIM_ConfigClockSource+0x1c>
 800a838:	2302      	movs	r3, #2
 800a83a:	e0b4      	b.n	800a9a6 <HAL_TIM_ConfigClockSource+0x186>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a85a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a874:	d03e      	beq.n	800a8f4 <HAL_TIM_ConfigClockSource+0xd4>
 800a876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a87a:	f200 8087 	bhi.w	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a87e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a882:	f000 8086 	beq.w	800a992 <HAL_TIM_ConfigClockSource+0x172>
 800a886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a88a:	d87f      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a88c:	2b70      	cmp	r3, #112	@ 0x70
 800a88e:	d01a      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0xa6>
 800a890:	2b70      	cmp	r3, #112	@ 0x70
 800a892:	d87b      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a894:	2b60      	cmp	r3, #96	@ 0x60
 800a896:	d050      	beq.n	800a93a <HAL_TIM_ConfigClockSource+0x11a>
 800a898:	2b60      	cmp	r3, #96	@ 0x60
 800a89a:	d877      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a89c:	2b50      	cmp	r3, #80	@ 0x50
 800a89e:	d03c      	beq.n	800a91a <HAL_TIM_ConfigClockSource+0xfa>
 800a8a0:	2b50      	cmp	r3, #80	@ 0x50
 800a8a2:	d873      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a8a4:	2b40      	cmp	r3, #64	@ 0x40
 800a8a6:	d058      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x13a>
 800a8a8:	2b40      	cmp	r3, #64	@ 0x40
 800a8aa:	d86f      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a8ac:	2b30      	cmp	r3, #48	@ 0x30
 800a8ae:	d064      	beq.n	800a97a <HAL_TIM_ConfigClockSource+0x15a>
 800a8b0:	2b30      	cmp	r3, #48	@ 0x30
 800a8b2:	d86b      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d060      	beq.n	800a97a <HAL_TIM_ConfigClockSource+0x15a>
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d867      	bhi.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d05c      	beq.n	800a97a <HAL_TIM_ConfigClockSource+0x15a>
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d05a      	beq.n	800a97a <HAL_TIM_ConfigClockSource+0x15a>
 800a8c4:	e062      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8d6:	f000 f993 	bl	800ac00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	609a      	str	r2, [r3, #8]
      break;
 800a8f2:	e04f      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a904:	f000 f97c 	bl	800ac00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a916:	609a      	str	r2, [r3, #8]
      break;
 800a918:	e03c      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a926:	461a      	mov	r2, r3
 800a928:	f000 f8f0 	bl	800ab0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2150      	movs	r1, #80	@ 0x50
 800a932:	4618      	mov	r0, r3
 800a934:	f000 f949 	bl	800abca <TIM_ITRx_SetConfig>
      break;
 800a938:	e02c      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a946:	461a      	mov	r2, r3
 800a948:	f000 f90f 	bl	800ab6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2160      	movs	r1, #96	@ 0x60
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f939 	bl	800abca <TIM_ITRx_SetConfig>
      break;
 800a958:	e01c      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a966:	461a      	mov	r2, r3
 800a968:	f000 f8d0 	bl	800ab0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2140      	movs	r1, #64	@ 0x40
 800a972:	4618      	mov	r0, r3
 800a974:	f000 f929 	bl	800abca <TIM_ITRx_SetConfig>
      break;
 800a978:	e00c      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4619      	mov	r1, r3
 800a984:	4610      	mov	r0, r2
 800a986:	f000 f920 	bl	800abca <TIM_ITRx_SetConfig>
      break;
 800a98a:	e003      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	73fb      	strb	r3, [r7, #15]
      break;
 800a990:	e000      	b.n	800a994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9b6:	bf00      	nop
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b083      	sub	sp, #12
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
	...

0800aa00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a37      	ldr	r2, [pc, #220]	@ (800aaf0 <TIM_Base_SetConfig+0xf0>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00f      	beq.n	800aa38 <TIM_Base_SetConfig+0x38>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa1e:	d00b      	beq.n	800aa38 <TIM_Base_SetConfig+0x38>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a34      	ldr	r2, [pc, #208]	@ (800aaf4 <TIM_Base_SetConfig+0xf4>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d007      	beq.n	800aa38 <TIM_Base_SetConfig+0x38>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a33      	ldr	r2, [pc, #204]	@ (800aaf8 <TIM_Base_SetConfig+0xf8>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_Base_SetConfig+0x38>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a32      	ldr	r2, [pc, #200]	@ (800aafc <TIM_Base_SetConfig+0xfc>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d108      	bne.n	800aa4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a28      	ldr	r2, [pc, #160]	@ (800aaf0 <TIM_Base_SetConfig+0xf0>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d01b      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa58:	d017      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a25      	ldr	r2, [pc, #148]	@ (800aaf4 <TIM_Base_SetConfig+0xf4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d013      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a24      	ldr	r2, [pc, #144]	@ (800aaf8 <TIM_Base_SetConfig+0xf8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00f      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a23      	ldr	r2, [pc, #140]	@ (800aafc <TIM_Base_SetConfig+0xfc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00b      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a22      	ldr	r2, [pc, #136]	@ (800ab00 <TIM_Base_SetConfig+0x100>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d007      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a21      	ldr	r2, [pc, #132]	@ (800ab04 <TIM_Base_SetConfig+0x104>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d003      	beq.n	800aa8a <TIM_Base_SetConfig+0x8a>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a20      	ldr	r2, [pc, #128]	@ (800ab08 <TIM_Base_SetConfig+0x108>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d108      	bne.n	800aa9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	689a      	ldr	r2, [r3, #8]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a0c      	ldr	r2, [pc, #48]	@ (800aaf0 <TIM_Base_SetConfig+0xf0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d103      	bne.n	800aaca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f043 0204 	orr.w	r2, r3, #4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	601a      	str	r2, [r3, #0]
}
 800aae2:	bf00      	nop
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	40010000 	.word	0x40010000
 800aaf4:	40000400 	.word	0x40000400
 800aaf8:	40000800 	.word	0x40000800
 800aafc:	40000c00 	.word	0x40000c00
 800ab00:	40014000 	.word	0x40014000
 800ab04:	40014400 	.word	0x40014400
 800ab08:	40014800 	.word	0x40014800

0800ab0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	f023 0201 	bic.w	r2, r3, #1
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f023 030a 	bic.w	r3, r3, #10
 800ab48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	621a      	str	r2, [r3, #32]
}
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b087      	sub	sp, #28
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	60f8      	str	r0, [r7, #12]
 800ab72:	60b9      	str	r1, [r7, #8]
 800ab74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	f023 0210 	bic.w	r2, r3, #16
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	031b      	lsls	r3, r3, #12
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aba6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	011b      	lsls	r3, r3, #4
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	621a      	str	r2, [r3, #32]
}
 800abbe:	bf00      	nop
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	f043 0307 	orr.w	r3, r3, #7
 800abec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	609a      	str	r2, [r3, #8]
}
 800abf4:	bf00      	nop
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	021a      	lsls	r2, r3, #8
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	431a      	orrs	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	609a      	str	r2, [r3, #8]
}
 800ac34:	bf00      	nop
 800ac36:	371c      	adds	r7, #28
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d101      	bne.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac54:	2302      	movs	r3, #2
 800ac56:	e050      	b.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a1c      	ldr	r2, [pc, #112]	@ (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d018      	beq.n	800acce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aca4:	d013      	beq.n	800acce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a18      	ldr	r2, [pc, #96]	@ (800ad0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00e      	beq.n	800acce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a16      	ldr	r2, [pc, #88]	@ (800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d009      	beq.n	800acce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a15      	ldr	r2, [pc, #84]	@ (800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d004      	beq.n	800acce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a13      	ldr	r2, [pc, #76]	@ (800ad18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d10c      	bne.n	800ace8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	40010000 	.word	0x40010000
 800ad0c:	40000400 	.word	0x40000400
 800ad10:	40000800 	.word	0x40000800
 800ad14:	40000c00 	.word	0x40000c00
 800ad18:	40014000 	.word	0x40014000

0800ad1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e042      	b.n	800addc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d106      	bne.n	800ad70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7fb fb76 	bl	800645c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2224      	movs	r2, #36	@ 0x24
 800ad74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ad86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fd7f 	bl	800b88c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	691a      	ldr	r2, [r3, #16]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695a      	ldr	r2, [r3, #20]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68da      	ldr	r2, [r3, #12]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800adbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08a      	sub	sp, #40	@ 0x28
 800ade8:	af02      	add	r7, sp, #8
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	4613      	mov	r3, r2
 800adf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b20      	cmp	r3, #32
 800ae02:	d175      	bne.n	800aef0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <HAL_UART_Transmit+0x2c>
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e06e      	b.n	800aef2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2221      	movs	r2, #33	@ 0x21
 800ae1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae22:	f7fb fd11 	bl	8006848 <HAL_GetTick>
 800ae26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	88fa      	ldrh	r2, [r7, #6]
 800ae2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	88fa      	ldrh	r2, [r7, #6]
 800ae32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae3c:	d108      	bne.n	800ae50 <HAL_UART_Transmit+0x6c>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d104      	bne.n	800ae50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	e003      	b.n	800ae58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae58:	e02e      	b.n	800aeb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2200      	movs	r2, #0
 800ae62:	2180      	movs	r1, #128	@ 0x80
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 fb1d 	bl	800b4a4 <UART_WaitOnFlagUntilTimeout>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d005      	beq.n	800ae7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2220      	movs	r2, #32
 800ae74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e03a      	b.n	800aef2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10b      	bne.n	800ae9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	3302      	adds	r3, #2
 800ae96:	61bb      	str	r3, [r7, #24]
 800ae98:	e007      	b.n	800aeaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	781a      	ldrb	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	3301      	adds	r3, #1
 800aea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1cb      	bne.n	800ae5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2200      	movs	r2, #0
 800aeca:	2140      	movs	r1, #64	@ 0x40
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 fae9 	bl	800b4a4 <UART_WaitOnFlagUntilTimeout>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d005      	beq.n	800aee4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e006      	b.n	800aef2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	e000      	b.n	800aef2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800aef0:	2302      	movs	r3, #2
  }
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
	...

0800aefc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b0ba      	sub	sp, #232	@ 0xe8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800af22:	2300      	movs	r3, #0
 800af24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800af28:	2300      	movs	r3, #0
 800af2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af32:	f003 030f 	and.w	r3, r3, #15
 800af36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800af3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10f      	bne.n	800af62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af46:	f003 0320 	and.w	r3, r3, #32
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d009      	beq.n	800af62 <HAL_UART_IRQHandler+0x66>
 800af4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af52:	f003 0320 	and.w	r3, r3, #32
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fbd7 	bl	800b70e <UART_Receive_IT>
      return;
 800af60:	e273      	b.n	800b44a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800af62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 80de 	beq.w	800b128 <HAL_UART_IRQHandler+0x22c>
 800af6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	d106      	bne.n	800af86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800af78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 80d1 	beq.w	800b128 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800af86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00b      	beq.n	800afaa <HAL_UART_IRQHandler+0xae>
 800af92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa2:	f043 0201 	orr.w	r2, r3, #1
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afae:	f003 0304 	and.w	r3, r3, #4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00b      	beq.n	800afce <HAL_UART_IRQHandler+0xd2>
 800afb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc6:	f043 0202 	orr.w	r2, r3, #2
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00b      	beq.n	800aff2 <HAL_UART_IRQHandler+0xf6>
 800afda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d005      	beq.n	800aff2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afea:	f043 0204 	orr.w	r2, r3, #4
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff6:	f003 0308 	and.w	r3, r3, #8
 800affa:	2b00      	cmp	r3, #0
 800affc:	d011      	beq.n	800b022 <HAL_UART_IRQHandler+0x126>
 800affe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b002:	f003 0320 	and.w	r3, r3, #32
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d005      	beq.n	800b022 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b01a:	f043 0208 	orr.w	r2, r3, #8
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 820a 	beq.w	800b440 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b030:	f003 0320 	and.w	r3, r3, #32
 800b034:	2b00      	cmp	r3, #0
 800b036:	d008      	beq.n	800b04a <HAL_UART_IRQHandler+0x14e>
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b03c:	f003 0320 	and.w	r3, r3, #32
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fb62 	bl	800b70e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b054:	2b40      	cmp	r3, #64	@ 0x40
 800b056:	bf0c      	ite	eq
 800b058:	2301      	moveq	r3, #1
 800b05a:	2300      	movne	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b066:	f003 0308 	and.w	r3, r3, #8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d103      	bne.n	800b076 <HAL_UART_IRQHandler+0x17a>
 800b06e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b072:	2b00      	cmp	r3, #0
 800b074:	d04f      	beq.n	800b116 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fa6d 	bl	800b556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b086:	2b40      	cmp	r3, #64	@ 0x40
 800b088:	d141      	bne.n	800b10e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3314      	adds	r3, #20
 800b090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b098:	e853 3f00 	ldrex	r3, [r3]
 800b09c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b0a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3314      	adds	r3, #20
 800b0b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b0b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b0ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b0c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b0ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1d9      	bne.n	800b08a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d013      	beq.n	800b106 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0e2:	4a8a      	ldr	r2, [pc, #552]	@ (800b30c <HAL_UART_IRQHandler+0x410>)
 800b0e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fb fd5d 	bl	8006baa <HAL_DMA_Abort_IT>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d016      	beq.n	800b124 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b100:	4610      	mov	r0, r2
 800b102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b104:	e00e      	b.n	800b124 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f9b6 	bl	800b478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10c:	e00a      	b.n	800b124 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9b2 	bl	800b478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b114:	e006      	b.n	800b124 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f9ae 	bl	800b478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b122:	e18d      	b.n	800b440 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b124:	bf00      	nop
    return;
 800b126:	e18b      	b.n	800b440 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	f040 8167 	bne.w	800b400 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b136:	f003 0310 	and.w	r3, r3, #16
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 8160 	beq.w	800b400 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b144:	f003 0310 	and.w	r3, r3, #16
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 8159 	beq.w	800b400 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	60bb      	str	r3, [r7, #8]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	60bb      	str	r3, [r7, #8]
 800b162:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b16e:	2b40      	cmp	r3, #64	@ 0x40
 800b170:	f040 80ce 	bne.w	800b310 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b180:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80a9 	beq.w	800b2dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b18e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b192:	429a      	cmp	r2, r3
 800b194:	f080 80a2 	bcs.w	800b2dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b19e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1aa:	f000 8088 	beq.w	800b2be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	330c      	adds	r3, #12
 800b1b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1bc:	e853 3f00 	ldrex	r3, [r3]
 800b1c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b1c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	330c      	adds	r3, #12
 800b1d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b1da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b1de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b1e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b1ea:	e841 2300 	strex	r3, r2, [r1]
 800b1ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b1f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1d9      	bne.n	800b1ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3314      	adds	r3, #20
 800b200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b20a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b20c:	f023 0301 	bic.w	r3, r3, #1
 800b210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3314      	adds	r3, #20
 800b21a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b21e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b222:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e1      	bne.n	800b1fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3314      	adds	r3, #20
 800b23c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b24c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3314      	adds	r3, #20
 800b256:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b25a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b25c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e3      	bne.n	800b236 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2220      	movs	r2, #32
 800b272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	330c      	adds	r3, #12
 800b282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b28c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b28e:	f023 0310 	bic.w	r3, r3, #16
 800b292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	330c      	adds	r3, #12
 800b29c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b2a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b2a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b2a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b2ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e3      	bne.n	800b27c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fb fc06 	bl	8006aca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f8d9 	bl	800b48c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b2da:	e0b3      	b.n	800b444 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b2e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	f040 80ad 	bne.w	800b444 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2f4:	f040 80a6 	bne.w	800b444 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f8c1 	bl	800b48c <HAL_UARTEx_RxEventCallback>
      return;
 800b30a:	e09b      	b.n	800b444 <HAL_UART_IRQHandler+0x548>
 800b30c:	0800b61d 	.word	0x0800b61d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b318:	b29b      	uxth	r3, r3
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b324:	b29b      	uxth	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 808e 	beq.w	800b448 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b32c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 8089 	beq.w	800b448 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	330c      	adds	r3, #12
 800b33c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b34c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	330c      	adds	r3, #12
 800b356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b35a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b35c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e3      	bne.n	800b336 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3314      	adds	r3, #20
 800b374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	623b      	str	r3, [r7, #32]
   return(result);
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	f023 0301 	bic.w	r3, r3, #1
 800b384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3314      	adds	r3, #20
 800b38e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b392:	633a      	str	r2, [r7, #48]	@ 0x30
 800b394:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b39a:	e841 2300 	strex	r3, r2, [r1]
 800b39e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1e3      	bne.n	800b36e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	e853 3f00 	ldrex	r3, [r3]
 800b3c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0310 	bic.w	r3, r3, #16
 800b3ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	330c      	adds	r3, #12
 800b3d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b3d8:	61fa      	str	r2, [r7, #28]
 800b3da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	69b9      	ldr	r1, [r7, #24]
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	e841 2300 	strex	r3, r2, [r1]
 800b3e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e3      	bne.n	800b3b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f847 	bl	800b48c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3fe:	e023      	b.n	800b448 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <HAL_UART_IRQHandler+0x524>
 800b40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b414:	2b00      	cmp	r3, #0
 800b416:	d003      	beq.n	800b420 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f910 	bl	800b63e <UART_Transmit_IT>
    return;
 800b41e:	e014      	b.n	800b44a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00e      	beq.n	800b44a <HAL_UART_IRQHandler+0x54e>
 800b42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b434:	2b00      	cmp	r3, #0
 800b436:	d008      	beq.n	800b44a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f950 	bl	800b6de <UART_EndTransmit_IT>
    return;
 800b43e:	e004      	b.n	800b44a <HAL_UART_IRQHandler+0x54e>
    return;
 800b440:	bf00      	nop
 800b442:	e002      	b.n	800b44a <HAL_UART_IRQHandler+0x54e>
      return;
 800b444:	bf00      	nop
 800b446:	e000      	b.n	800b44a <HAL_UART_IRQHandler+0x54e>
      return;
 800b448:	bf00      	nop
  }
}
 800b44a:	37e8      	adds	r7, #232	@ 0xe8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	603b      	str	r3, [r7, #0]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4b4:	e03b      	b.n	800b52e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4bc:	d037      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4be:	f7fb f9c3 	bl	8006848 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	6a3a      	ldr	r2, [r7, #32]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d302      	bcc.n	800b4d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e03a      	b.n	800b54e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f003 0304 	and.w	r3, r3, #4
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d023      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b80      	cmp	r3, #128	@ 0x80
 800b4ea:	d020      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2b40      	cmp	r3, #64	@ 0x40
 800b4f0:	d01d      	beq.n	800b52e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0308 	and.w	r3, r3, #8
 800b4fc:	2b08      	cmp	r3, #8
 800b4fe:	d116      	bne.n	800b52e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b500:	2300      	movs	r3, #0
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f000 f81d 	bl	800b556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2208      	movs	r2, #8
 800b520:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e00f      	b.n	800b54e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	4013      	ands	r3, r2
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	bf0c      	ite	eq
 800b53e:	2301      	moveq	r3, #1
 800b540:	2300      	movne	r3, #0
 800b542:	b2db      	uxtb	r3, r3
 800b544:	461a      	mov	r2, r3
 800b546:	79fb      	ldrb	r3, [r7, #7]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d0b4      	beq.n	800b4b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3718      	adds	r7, #24
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b556:	b480      	push	{r7}
 800b558:	b095      	sub	sp, #84	@ 0x54
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	330c      	adds	r3, #12
 800b564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b568:	e853 3f00 	ldrex	r3, [r3]
 800b56c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	330c      	adds	r3, #12
 800b57c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b57e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e5      	bne.n	800b55e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3314      	adds	r3, #20
 800b598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	f023 0301 	bic.w	r3, r3, #1
 800b5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3314      	adds	r3, #20
 800b5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e5      	bne.n	800b592 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d119      	bne.n	800b602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	330c      	adds	r3, #12
 800b5d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	e853 3f00 	ldrex	r3, [r3]
 800b5dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f023 0310 	bic.w	r3, r3, #16
 800b5e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5ee:	61ba      	str	r2, [r7, #24]
 800b5f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	e841 2300 	strex	r3, r2, [r1]
 800b5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1e5      	bne.n	800b5ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b610:	bf00      	nop
 800b612:	3754      	adds	r7, #84	@ 0x54
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff ff21 	bl	800b478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b21      	cmp	r3, #33	@ 0x21
 800b650:	d13e      	bne.n	800b6d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b65a:	d114      	bne.n	800b686 <UART_Transmit_IT+0x48>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d110      	bne.n	800b686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	1c9a      	adds	r2, r3, #2
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	621a      	str	r2, [r3, #32]
 800b684:	e008      	b.n	800b698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	1c59      	adds	r1, r3, #1
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	6211      	str	r1, [r2, #32]
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10f      	bne.n	800b6cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e000      	b.n	800b6d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6d0:	2302      	movs	r3, #2
  }
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff fea6 	bl	800b450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b08c      	sub	sp, #48	@ 0x30
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b22      	cmp	r3, #34	@ 0x22
 800b728:	f040 80aa 	bne.w	800b880 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b734:	d115      	bne.n	800b762 <UART_Receive_IT+0x54>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d111      	bne.n	800b762 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b742:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b750:	b29a      	uxth	r2, r3
 800b752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b754:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75a:	1c9a      	adds	r2, r3, #2
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	629a      	str	r2, [r3, #40]	@ 0x28
 800b760:	e024      	b.n	800b7ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b766:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b770:	d007      	beq.n	800b782 <UART_Receive_IT+0x74>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <UART_Receive_IT+0x82>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e008      	b.n	800b7a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	b2db      	uxtb	r3, r3
 800b798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d15d      	bne.n	800b87c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0220 	bic.w	r2, r2, #32
 800b7ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b7de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695a      	ldr	r2, [r3, #20]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f022 0201 	bic.w	r2, r2, #1
 800b7ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b802:	2b01      	cmp	r3, #1
 800b804:	d135      	bne.n	800b872 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	330c      	adds	r3, #12
 800b812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	e853 3f00 	ldrex	r3, [r3]
 800b81a:	613b      	str	r3, [r7, #16]
   return(result);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f023 0310 	bic.w	r3, r3, #16
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	330c      	adds	r3, #12
 800b82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b82c:	623a      	str	r2, [r7, #32]
 800b82e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	69f9      	ldr	r1, [r7, #28]
 800b832:	6a3a      	ldr	r2, [r7, #32]
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	61bb      	str	r3, [r7, #24]
   return(result);
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e5      	bne.n	800b80c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 0310 	and.w	r3, r3, #16
 800b84a:	2b10      	cmp	r3, #16
 800b84c:	d10a      	bne.n	800b864 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	60fb      	str	r3, [r7, #12]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff fe0e 	bl	800b48c <HAL_UARTEx_RxEventCallback>
 800b870:	e002      	b.n	800b878 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff fdf6 	bl	800b464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	e002      	b.n	800b882 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e000      	b.n	800b882 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b880:	2302      	movs	r3, #2
  }
}
 800b882:	4618      	mov	r0, r3
 800b884:	3730      	adds	r7, #48	@ 0x30
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b88c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b890:	b0c0      	sub	sp, #256	@ 0x100
 800b892:	af00      	add	r7, sp, #0
 800b894:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8a8:	68d9      	ldr	r1, [r3, #12]
 800b8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	ea40 0301 	orr.w	r3, r0, r1
 800b8b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ba:	689a      	ldr	r2, [r3, #8]
 800b8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b8e4:	f021 010c 	bic.w	r1, r1, #12
 800b8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b8f2:	430b      	orrs	r3, r1
 800b8f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b906:	6999      	ldr	r1, [r3, #24]
 800b908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	ea40 0301 	orr.w	r3, r0, r1
 800b912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	4b8f      	ldr	r3, [pc, #572]	@ (800bb58 <UART_SetConfig+0x2cc>)
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d005      	beq.n	800b92c <UART_SetConfig+0xa0>
 800b920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	4b8d      	ldr	r3, [pc, #564]	@ (800bb5c <UART_SetConfig+0x2d0>)
 800b928:	429a      	cmp	r2, r3
 800b92a:	d104      	bne.n	800b936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b92c:	f7fe fdc2 	bl	800a4b4 <HAL_RCC_GetPCLK2Freq>
 800b930:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b934:	e003      	b.n	800b93e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b936:	f7fe fda9 	bl	800a48c <HAL_RCC_GetPCLK1Freq>
 800b93a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b948:	f040 810c 	bne.w	800bb64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b94c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b950:	2200      	movs	r2, #0
 800b952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b956:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b95a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b95e:	4622      	mov	r2, r4
 800b960:	462b      	mov	r3, r5
 800b962:	1891      	adds	r1, r2, r2
 800b964:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b966:	415b      	adcs	r3, r3
 800b968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b96a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b96e:	4621      	mov	r1, r4
 800b970:	eb12 0801 	adds.w	r8, r2, r1
 800b974:	4629      	mov	r1, r5
 800b976:	eb43 0901 	adc.w	r9, r3, r1
 800b97a:	f04f 0200 	mov.w	r2, #0
 800b97e:	f04f 0300 	mov.w	r3, #0
 800b982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b98a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b98e:	4690      	mov	r8, r2
 800b990:	4699      	mov	r9, r3
 800b992:	4623      	mov	r3, r4
 800b994:	eb18 0303 	adds.w	r3, r8, r3
 800b998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b99c:	462b      	mov	r3, r5
 800b99e:	eb49 0303 	adc.w	r3, r9, r3
 800b9a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b9b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b9b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	18db      	adds	r3, r3, r3
 800b9be:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	eb42 0303 	adc.w	r3, r2, r3
 800b9c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b9cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b9d0:	f7f4 fc56 	bl	8000280 <__aeabi_uldivmod>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4b61      	ldr	r3, [pc, #388]	@ (800bb60 <UART_SetConfig+0x2d4>)
 800b9da:	fba3 2302 	umull	r2, r3, r3, r2
 800b9de:	095b      	lsrs	r3, r3, #5
 800b9e0:	011c      	lsls	r4, r3, #4
 800b9e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b9ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b9f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	1891      	adds	r1, r2, r2
 800b9fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b9fc:	415b      	adcs	r3, r3
 800b9fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ba04:	4641      	mov	r1, r8
 800ba06:	eb12 0a01 	adds.w	sl, r2, r1
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	eb43 0b01 	adc.w	fp, r3, r1
 800ba10:	f04f 0200 	mov.w	r2, #0
 800ba14:	f04f 0300 	mov.w	r3, #0
 800ba18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ba20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba24:	4692      	mov	sl, r2
 800ba26:	469b      	mov	fp, r3
 800ba28:	4643      	mov	r3, r8
 800ba2a:	eb1a 0303 	adds.w	r3, sl, r3
 800ba2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba32:	464b      	mov	r3, r9
 800ba34:	eb4b 0303 	adc.w	r3, fp, r3
 800ba38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ba3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ba4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ba50:	460b      	mov	r3, r1
 800ba52:	18db      	adds	r3, r3, r3
 800ba54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba56:	4613      	mov	r3, r2
 800ba58:	eb42 0303 	adc.w	r3, r2, r3
 800ba5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ba62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ba66:	f7f4 fc0b 	bl	8000280 <__aeabi_uldivmod>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4b3b      	ldr	r3, [pc, #236]	@ (800bb60 <UART_SetConfig+0x2d4>)
 800ba72:	fba3 2301 	umull	r2, r3, r3, r1
 800ba76:	095b      	lsrs	r3, r3, #5
 800ba78:	2264      	movs	r2, #100	@ 0x64
 800ba7a:	fb02 f303 	mul.w	r3, r2, r3
 800ba7e:	1acb      	subs	r3, r1, r3
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ba86:	4b36      	ldr	r3, [pc, #216]	@ (800bb60 <UART_SetConfig+0x2d4>)
 800ba88:	fba3 2302 	umull	r2, r3, r3, r2
 800ba8c:	095b      	lsrs	r3, r3, #5
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ba94:	441c      	add	r4, r3
 800ba96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800baa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800baa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	1891      	adds	r1, r2, r2
 800baae:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bab0:	415b      	adcs	r3, r3
 800bab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bab8:	4641      	mov	r1, r8
 800baba:	1851      	adds	r1, r2, r1
 800babc:	6339      	str	r1, [r7, #48]	@ 0x30
 800babe:	4649      	mov	r1, r9
 800bac0:	414b      	adcs	r3, r1
 800bac2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac4:	f04f 0200 	mov.w	r2, #0
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bad0:	4659      	mov	r1, fp
 800bad2:	00cb      	lsls	r3, r1, #3
 800bad4:	4651      	mov	r1, sl
 800bad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bada:	4651      	mov	r1, sl
 800badc:	00ca      	lsls	r2, r1, #3
 800bade:	4610      	mov	r0, r2
 800bae0:	4619      	mov	r1, r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	4642      	mov	r2, r8
 800bae6:	189b      	adds	r3, r3, r2
 800bae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800baec:	464b      	mov	r3, r9
 800baee:	460a      	mov	r2, r1
 800baf0:	eb42 0303 	adc.w	r3, r2, r3
 800baf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800baf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bb04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bb08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	18db      	adds	r3, r3, r3
 800bb10:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb12:	4613      	mov	r3, r2
 800bb14:	eb42 0303 	adc.w	r3, r2, r3
 800bb18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bb1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bb22:	f7f4 fbad 	bl	8000280 <__aeabi_uldivmod>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb60 <UART_SetConfig+0x2d4>)
 800bb2c:	fba3 1302 	umull	r1, r3, r3, r2
 800bb30:	095b      	lsrs	r3, r3, #5
 800bb32:	2164      	movs	r1, #100	@ 0x64
 800bb34:	fb01 f303 	mul.w	r3, r1, r3
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	00db      	lsls	r3, r3, #3
 800bb3c:	3332      	adds	r3, #50	@ 0x32
 800bb3e:	4a08      	ldr	r2, [pc, #32]	@ (800bb60 <UART_SetConfig+0x2d4>)
 800bb40:	fba2 2303 	umull	r2, r3, r2, r3
 800bb44:	095b      	lsrs	r3, r3, #5
 800bb46:	f003 0207 	and.w	r2, r3, #7
 800bb4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4422      	add	r2, r4
 800bb52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb54:	e106      	b.n	800bd64 <UART_SetConfig+0x4d8>
 800bb56:	bf00      	nop
 800bb58:	40011000 	.word	0x40011000
 800bb5c:	40011400 	.word	0x40011400
 800bb60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bb72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	1891      	adds	r1, r2, r2
 800bb7c:	6239      	str	r1, [r7, #32]
 800bb7e:	415b      	adcs	r3, r3
 800bb80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb86:	4641      	mov	r1, r8
 800bb88:	1854      	adds	r4, r2, r1
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	eb43 0501 	adc.w	r5, r3, r1
 800bb90:	f04f 0200 	mov.w	r2, #0
 800bb94:	f04f 0300 	mov.w	r3, #0
 800bb98:	00eb      	lsls	r3, r5, #3
 800bb9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb9e:	00e2      	lsls	r2, r4, #3
 800bba0:	4614      	mov	r4, r2
 800bba2:	461d      	mov	r5, r3
 800bba4:	4643      	mov	r3, r8
 800bba6:	18e3      	adds	r3, r4, r3
 800bba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bbac:	464b      	mov	r3, r9
 800bbae:	eb45 0303 	adc.w	r3, r5, r3
 800bbb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bbc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bbc6:	f04f 0200 	mov.w	r2, #0
 800bbca:	f04f 0300 	mov.w	r3, #0
 800bbce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	008b      	lsls	r3, r1, #2
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbdc:	4621      	mov	r1, r4
 800bbde:	008a      	lsls	r2, r1, #2
 800bbe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bbe4:	f7f4 fb4c 	bl	8000280 <__aeabi_uldivmod>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4b60      	ldr	r3, [pc, #384]	@ (800bd70 <UART_SetConfig+0x4e4>)
 800bbee:	fba3 2302 	umull	r2, r3, r3, r2
 800bbf2:	095b      	lsrs	r3, r3, #5
 800bbf4:	011c      	lsls	r4, r3, #4
 800bbf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bc00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bc04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	1891      	adds	r1, r2, r2
 800bc0e:	61b9      	str	r1, [r7, #24]
 800bc10:	415b      	adcs	r3, r3
 800bc12:	61fb      	str	r3, [r7, #28]
 800bc14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc18:	4641      	mov	r1, r8
 800bc1a:	1851      	adds	r1, r2, r1
 800bc1c:	6139      	str	r1, [r7, #16]
 800bc1e:	4649      	mov	r1, r9
 800bc20:	414b      	adcs	r3, r1
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	f04f 0300 	mov.w	r3, #0
 800bc2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc30:	4659      	mov	r1, fp
 800bc32:	00cb      	lsls	r3, r1, #3
 800bc34:	4651      	mov	r1, sl
 800bc36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc3a:	4651      	mov	r1, sl
 800bc3c:	00ca      	lsls	r2, r1, #3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4619      	mov	r1, r3
 800bc42:	4603      	mov	r3, r0
 800bc44:	4642      	mov	r2, r8
 800bc46:	189b      	adds	r3, r3, r2
 800bc48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	460a      	mov	r2, r1
 800bc50:	eb42 0303 	adc.w	r3, r2, r3
 800bc54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bc64:	f04f 0200 	mov.w	r2, #0
 800bc68:	f04f 0300 	mov.w	r3, #0
 800bc6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bc70:	4649      	mov	r1, r9
 800bc72:	008b      	lsls	r3, r1, #2
 800bc74:	4641      	mov	r1, r8
 800bc76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc7a:	4641      	mov	r1, r8
 800bc7c:	008a      	lsls	r2, r1, #2
 800bc7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bc82:	f7f4 fafd 	bl	8000280 <__aeabi_uldivmod>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	4b38      	ldr	r3, [pc, #224]	@ (800bd70 <UART_SetConfig+0x4e4>)
 800bc8e:	fba3 2301 	umull	r2, r3, r3, r1
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	2264      	movs	r2, #100	@ 0x64
 800bc96:	fb02 f303 	mul.w	r3, r2, r3
 800bc9a:	1acb      	subs	r3, r1, r3
 800bc9c:	011b      	lsls	r3, r3, #4
 800bc9e:	3332      	adds	r3, #50	@ 0x32
 800bca0:	4a33      	ldr	r2, [pc, #204]	@ (800bd70 <UART_SetConfig+0x4e4>)
 800bca2:	fba2 2303 	umull	r2, r3, r2, r3
 800bca6:	095b      	lsrs	r3, r3, #5
 800bca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bcac:	441c      	add	r4, r3
 800bcae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	673b      	str	r3, [r7, #112]	@ 0x70
 800bcb6:	677a      	str	r2, [r7, #116]	@ 0x74
 800bcb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	1891      	adds	r1, r2, r2
 800bcc2:	60b9      	str	r1, [r7, #8]
 800bcc4:	415b      	adcs	r3, r3
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bccc:	4641      	mov	r1, r8
 800bcce:	1851      	adds	r1, r2, r1
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	414b      	adcs	r3, r1
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	f04f 0200 	mov.w	r2, #0
 800bcdc:	f04f 0300 	mov.w	r3, #0
 800bce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bce4:	4659      	mov	r1, fp
 800bce6:	00cb      	lsls	r3, r1, #3
 800bce8:	4651      	mov	r1, sl
 800bcea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcee:	4651      	mov	r1, sl
 800bcf0:	00ca      	lsls	r2, r1, #3
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	189b      	adds	r3, r3, r2
 800bcfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcfe:	464b      	mov	r3, r9
 800bd00:	460a      	mov	r2, r1
 800bd02:	eb42 0303 	adc.w	r3, r2, r3
 800bd06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd12:	667a      	str	r2, [r7, #100]	@ 0x64
 800bd14:	f04f 0200 	mov.w	r2, #0
 800bd18:	f04f 0300 	mov.w	r3, #0
 800bd1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bd20:	4649      	mov	r1, r9
 800bd22:	008b      	lsls	r3, r1, #2
 800bd24:	4641      	mov	r1, r8
 800bd26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	008a      	lsls	r2, r1, #2
 800bd2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bd32:	f7f4 faa5 	bl	8000280 <__aeabi_uldivmod>
 800bd36:	4602      	mov	r2, r0
 800bd38:	460b      	mov	r3, r1
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <UART_SetConfig+0x4e4>)
 800bd3c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd40:	095b      	lsrs	r3, r3, #5
 800bd42:	2164      	movs	r1, #100	@ 0x64
 800bd44:	fb01 f303 	mul.w	r3, r1, r3
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	011b      	lsls	r3, r3, #4
 800bd4c:	3332      	adds	r3, #50	@ 0x32
 800bd4e:	4a08      	ldr	r2, [pc, #32]	@ (800bd70 <UART_SetConfig+0x4e4>)
 800bd50:	fba2 2303 	umull	r2, r3, r2, r3
 800bd54:	095b      	lsrs	r3, r3, #5
 800bd56:	f003 020f 	and.w	r2, r3, #15
 800bd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4422      	add	r2, r4
 800bd62:	609a      	str	r2, [r3, #8]
}
 800bd64:	bf00      	nop
 800bd66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd70:	51eb851f 	.word	0x51eb851f

0800bd74 <calloc>:
 800bd74:	4b02      	ldr	r3, [pc, #8]	@ (800bd80 <calloc+0xc>)
 800bd76:	460a      	mov	r2, r1
 800bd78:	4601      	mov	r1, r0
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	f000 b802 	b.w	800bd84 <_calloc_r>
 800bd80:	20000568 	.word	0x20000568

0800bd84 <_calloc_r>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	fba1 5402 	umull	r5, r4, r1, r2
 800bd8a:	b93c      	cbnz	r4, 800bd9c <_calloc_r+0x18>
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	f000 f837 	bl	800be00 <_malloc_r>
 800bd92:	4606      	mov	r6, r0
 800bd94:	b928      	cbnz	r0, 800bda2 <_calloc_r+0x1e>
 800bd96:	2600      	movs	r6, #0
 800bd98:	4630      	mov	r0, r6
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	220c      	movs	r2, #12
 800bd9e:	6002      	str	r2, [r0, #0]
 800bda0:	e7f9      	b.n	800bd96 <_calloc_r+0x12>
 800bda2:	462a      	mov	r2, r5
 800bda4:	4621      	mov	r1, r4
 800bda6:	f000 f9f9 	bl	800c19c <memset>
 800bdaa:	e7f5      	b.n	800bd98 <_calloc_r+0x14>

0800bdac <free>:
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <free+0xc>)
 800bdae:	4601      	mov	r1, r0
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f000 ba47 	b.w	800c244 <_free_r>
 800bdb6:	bf00      	nop
 800bdb8:	20000568 	.word	0x20000568

0800bdbc <sbrk_aligned>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	4e0f      	ldr	r6, [pc, #60]	@ (800bdfc <sbrk_aligned+0x40>)
 800bdc0:	460c      	mov	r4, r1
 800bdc2:	6831      	ldr	r1, [r6, #0]
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	b911      	cbnz	r1, 800bdce <sbrk_aligned+0x12>
 800bdc8:	f000 f9f0 	bl	800c1ac <_sbrk_r>
 800bdcc:	6030      	str	r0, [r6, #0]
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f000 f9eb 	bl	800c1ac <_sbrk_r>
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	d103      	bne.n	800bde2 <sbrk_aligned+0x26>
 800bdda:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bdde:	4620      	mov	r0, r4
 800bde0:	bd70      	pop	{r4, r5, r6, pc}
 800bde2:	1cc4      	adds	r4, r0, #3
 800bde4:	f024 0403 	bic.w	r4, r4, #3
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d0f8      	beq.n	800bdde <sbrk_aligned+0x22>
 800bdec:	1a21      	subs	r1, r4, r0
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f000 f9dc 	bl	800c1ac <_sbrk_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d1f2      	bne.n	800bdde <sbrk_aligned+0x22>
 800bdf8:	e7ef      	b.n	800bdda <sbrk_aligned+0x1e>
 800bdfa:	bf00      	nop
 800bdfc:	20000dcc 	.word	0x20000dcc

0800be00 <_malloc_r>:
 800be00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be04:	1ccd      	adds	r5, r1, #3
 800be06:	f025 0503 	bic.w	r5, r5, #3
 800be0a:	3508      	adds	r5, #8
 800be0c:	2d0c      	cmp	r5, #12
 800be0e:	bf38      	it	cc
 800be10:	250c      	movcc	r5, #12
 800be12:	2d00      	cmp	r5, #0
 800be14:	4606      	mov	r6, r0
 800be16:	db01      	blt.n	800be1c <_malloc_r+0x1c>
 800be18:	42a9      	cmp	r1, r5
 800be1a:	d904      	bls.n	800be26 <_malloc_r+0x26>
 800be1c:	230c      	movs	r3, #12
 800be1e:	6033      	str	r3, [r6, #0]
 800be20:	2000      	movs	r0, #0
 800be22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800befc <_malloc_r+0xfc>
 800be2a:	f000 f869 	bl	800bf00 <__malloc_lock>
 800be2e:	f8d8 3000 	ldr.w	r3, [r8]
 800be32:	461c      	mov	r4, r3
 800be34:	bb44      	cbnz	r4, 800be88 <_malloc_r+0x88>
 800be36:	4629      	mov	r1, r5
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ffbf 	bl	800bdbc <sbrk_aligned>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	4604      	mov	r4, r0
 800be42:	d158      	bne.n	800bef6 <_malloc_r+0xf6>
 800be44:	f8d8 4000 	ldr.w	r4, [r8]
 800be48:	4627      	mov	r7, r4
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	d143      	bne.n	800bed6 <_malloc_r+0xd6>
 800be4e:	2c00      	cmp	r4, #0
 800be50:	d04b      	beq.n	800beea <_malloc_r+0xea>
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	4639      	mov	r1, r7
 800be56:	4630      	mov	r0, r6
 800be58:	eb04 0903 	add.w	r9, r4, r3
 800be5c:	f000 f9a6 	bl	800c1ac <_sbrk_r>
 800be60:	4581      	cmp	r9, r0
 800be62:	d142      	bne.n	800beea <_malloc_r+0xea>
 800be64:	6821      	ldr	r1, [r4, #0]
 800be66:	1a6d      	subs	r5, r5, r1
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff ffa6 	bl	800bdbc <sbrk_aligned>
 800be70:	3001      	adds	r0, #1
 800be72:	d03a      	beq.n	800beea <_malloc_r+0xea>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	442b      	add	r3, r5
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	f8d8 3000 	ldr.w	r3, [r8]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	bb62      	cbnz	r2, 800bedc <_malloc_r+0xdc>
 800be82:	f8c8 7000 	str.w	r7, [r8]
 800be86:	e00f      	b.n	800bea8 <_malloc_r+0xa8>
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	1b52      	subs	r2, r2, r5
 800be8c:	d420      	bmi.n	800bed0 <_malloc_r+0xd0>
 800be8e:	2a0b      	cmp	r2, #11
 800be90:	d917      	bls.n	800bec2 <_malloc_r+0xc2>
 800be92:	1961      	adds	r1, r4, r5
 800be94:	42a3      	cmp	r3, r4
 800be96:	6025      	str	r5, [r4, #0]
 800be98:	bf18      	it	ne
 800be9a:	6059      	strne	r1, [r3, #4]
 800be9c:	6863      	ldr	r3, [r4, #4]
 800be9e:	bf08      	it	eq
 800bea0:	f8c8 1000 	streq.w	r1, [r8]
 800bea4:	5162      	str	r2, [r4, r5]
 800bea6:	604b      	str	r3, [r1, #4]
 800bea8:	4630      	mov	r0, r6
 800beaa:	f000 f82f 	bl	800bf0c <__malloc_unlock>
 800beae:	f104 000b 	add.w	r0, r4, #11
 800beb2:	1d23      	adds	r3, r4, #4
 800beb4:	f020 0007 	bic.w	r0, r0, #7
 800beb8:	1ac2      	subs	r2, r0, r3
 800beba:	bf1c      	itt	ne
 800bebc:	1a1b      	subne	r3, r3, r0
 800bebe:	50a3      	strne	r3, [r4, r2]
 800bec0:	e7af      	b.n	800be22 <_malloc_r+0x22>
 800bec2:	6862      	ldr	r2, [r4, #4]
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	bf0c      	ite	eq
 800bec8:	f8c8 2000 	streq.w	r2, [r8]
 800becc:	605a      	strne	r2, [r3, #4]
 800bece:	e7eb      	b.n	800bea8 <_malloc_r+0xa8>
 800bed0:	4623      	mov	r3, r4
 800bed2:	6864      	ldr	r4, [r4, #4]
 800bed4:	e7ae      	b.n	800be34 <_malloc_r+0x34>
 800bed6:	463c      	mov	r4, r7
 800bed8:	687f      	ldr	r7, [r7, #4]
 800beda:	e7b6      	b.n	800be4a <_malloc_r+0x4a>
 800bedc:	461a      	mov	r2, r3
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	d1fb      	bne.n	800bedc <_malloc_r+0xdc>
 800bee4:	2300      	movs	r3, #0
 800bee6:	6053      	str	r3, [r2, #4]
 800bee8:	e7de      	b.n	800bea8 <_malloc_r+0xa8>
 800beea:	230c      	movs	r3, #12
 800beec:	6033      	str	r3, [r6, #0]
 800beee:	4630      	mov	r0, r6
 800bef0:	f000 f80c 	bl	800bf0c <__malloc_unlock>
 800bef4:	e794      	b.n	800be20 <_malloc_r+0x20>
 800bef6:	6005      	str	r5, [r0, #0]
 800bef8:	e7d6      	b.n	800bea8 <_malloc_r+0xa8>
 800befa:	bf00      	nop
 800befc:	20000dd0 	.word	0x20000dd0

0800bf00 <__malloc_lock>:
 800bf00:	4801      	ldr	r0, [pc, #4]	@ (800bf08 <__malloc_lock+0x8>)
 800bf02:	f000 b98e 	b.w	800c222 <__retarget_lock_acquire_recursive>
 800bf06:	bf00      	nop
 800bf08:	20000f10 	.word	0x20000f10

0800bf0c <__malloc_unlock>:
 800bf0c:	4801      	ldr	r0, [pc, #4]	@ (800bf14 <__malloc_unlock+0x8>)
 800bf0e:	f000 b989 	b.w	800c224 <__retarget_lock_release_recursive>
 800bf12:	bf00      	nop
 800bf14:	20000f10 	.word	0x20000f10

0800bf18 <std>:
 800bf18:	2300      	movs	r3, #0
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf26:	6083      	str	r3, [r0, #8]
 800bf28:	8181      	strh	r1, [r0, #12]
 800bf2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf2c:	81c2      	strh	r2, [r0, #14]
 800bf2e:	6183      	str	r3, [r0, #24]
 800bf30:	4619      	mov	r1, r3
 800bf32:	2208      	movs	r2, #8
 800bf34:	305c      	adds	r0, #92	@ 0x5c
 800bf36:	f000 f931 	bl	800c19c <memset>
 800bf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf70 <std+0x58>)
 800bf3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <std+0x5c>)
 800bf40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf42:	4b0d      	ldr	r3, [pc, #52]	@ (800bf78 <std+0x60>)
 800bf44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf46:	4b0d      	ldr	r3, [pc, #52]	@ (800bf7c <std+0x64>)
 800bf48:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf80 <std+0x68>)
 800bf4c:	6224      	str	r4, [r4, #32]
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d006      	beq.n	800bf60 <std+0x48>
 800bf52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf56:	4294      	cmp	r4, r2
 800bf58:	d002      	beq.n	800bf60 <std+0x48>
 800bf5a:	33d0      	adds	r3, #208	@ 0xd0
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	d105      	bne.n	800bf6c <std+0x54>
 800bf60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf68:	f000 b95a 	b.w	800c220 <__retarget_lock_init_recursive>
 800bf6c:	bd10      	pop	{r4, pc}
 800bf6e:	bf00      	nop
 800bf70:	0800c9d1 	.word	0x0800c9d1
 800bf74:	0800c9f3 	.word	0x0800c9f3
 800bf78:	0800ca2b 	.word	0x0800ca2b
 800bf7c:	0800ca4f 	.word	0x0800ca4f
 800bf80:	20000dd4 	.word	0x20000dd4

0800bf84 <stdio_exit_handler>:
 800bf84:	4a02      	ldr	r2, [pc, #8]	@ (800bf90 <stdio_exit_handler+0xc>)
 800bf86:	4903      	ldr	r1, [pc, #12]	@ (800bf94 <stdio_exit_handler+0x10>)
 800bf88:	4803      	ldr	r0, [pc, #12]	@ (800bf98 <stdio_exit_handler+0x14>)
 800bf8a:	f000 b869 	b.w	800c060 <_fwalk_sglue>
 800bf8e:	bf00      	nop
 800bf90:	2000055c 	.word	0x2000055c
 800bf94:	0800c981 	.word	0x0800c981
 800bf98:	2000056c 	.word	0x2000056c

0800bf9c <cleanup_stdio>:
 800bf9c:	6841      	ldr	r1, [r0, #4]
 800bf9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd0 <cleanup_stdio+0x34>)
 800bfa0:	4299      	cmp	r1, r3
 800bfa2:	b510      	push	{r4, lr}
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	d001      	beq.n	800bfac <cleanup_stdio+0x10>
 800bfa8:	f000 fcea 	bl	800c980 <_fflush_r>
 800bfac:	68a1      	ldr	r1, [r4, #8]
 800bfae:	4b09      	ldr	r3, [pc, #36]	@ (800bfd4 <cleanup_stdio+0x38>)
 800bfb0:	4299      	cmp	r1, r3
 800bfb2:	d002      	beq.n	800bfba <cleanup_stdio+0x1e>
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fce3 	bl	800c980 <_fflush_r>
 800bfba:	68e1      	ldr	r1, [r4, #12]
 800bfbc:	4b06      	ldr	r3, [pc, #24]	@ (800bfd8 <cleanup_stdio+0x3c>)
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	d004      	beq.n	800bfcc <cleanup_stdio+0x30>
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfc8:	f000 bcda 	b.w	800c980 <_fflush_r>
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000dd4 	.word	0x20000dd4
 800bfd4:	20000e3c 	.word	0x20000e3c
 800bfd8:	20000ea4 	.word	0x20000ea4

0800bfdc <global_stdio_init.part.0>:
 800bfdc:	b510      	push	{r4, lr}
 800bfde:	4b0b      	ldr	r3, [pc, #44]	@ (800c00c <global_stdio_init.part.0+0x30>)
 800bfe0:	4c0b      	ldr	r4, [pc, #44]	@ (800c010 <global_stdio_init.part.0+0x34>)
 800bfe2:	4a0c      	ldr	r2, [pc, #48]	@ (800c014 <global_stdio_init.part.0+0x38>)
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2104      	movs	r1, #4
 800bfec:	f7ff ff94 	bl	800bf18 <std>
 800bff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bff4:	2201      	movs	r2, #1
 800bff6:	2109      	movs	r1, #9
 800bff8:	f7ff ff8e 	bl	800bf18 <std>
 800bffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c000:	2202      	movs	r2, #2
 800c002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c006:	2112      	movs	r1, #18
 800c008:	f7ff bf86 	b.w	800bf18 <std>
 800c00c:	20000f0c 	.word	0x20000f0c
 800c010:	20000dd4 	.word	0x20000dd4
 800c014:	0800bf85 	.word	0x0800bf85

0800c018 <__sfp_lock_acquire>:
 800c018:	4801      	ldr	r0, [pc, #4]	@ (800c020 <__sfp_lock_acquire+0x8>)
 800c01a:	f000 b902 	b.w	800c222 <__retarget_lock_acquire_recursive>
 800c01e:	bf00      	nop
 800c020:	20000f11 	.word	0x20000f11

0800c024 <__sfp_lock_release>:
 800c024:	4801      	ldr	r0, [pc, #4]	@ (800c02c <__sfp_lock_release+0x8>)
 800c026:	f000 b8fd 	b.w	800c224 <__retarget_lock_release_recursive>
 800c02a:	bf00      	nop
 800c02c:	20000f11 	.word	0x20000f11

0800c030 <__sinit>:
 800c030:	b510      	push	{r4, lr}
 800c032:	4604      	mov	r4, r0
 800c034:	f7ff fff0 	bl	800c018 <__sfp_lock_acquire>
 800c038:	6a23      	ldr	r3, [r4, #32]
 800c03a:	b11b      	cbz	r3, 800c044 <__sinit+0x14>
 800c03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c040:	f7ff bff0 	b.w	800c024 <__sfp_lock_release>
 800c044:	4b04      	ldr	r3, [pc, #16]	@ (800c058 <__sinit+0x28>)
 800c046:	6223      	str	r3, [r4, #32]
 800c048:	4b04      	ldr	r3, [pc, #16]	@ (800c05c <__sinit+0x2c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1f5      	bne.n	800c03c <__sinit+0xc>
 800c050:	f7ff ffc4 	bl	800bfdc <global_stdio_init.part.0>
 800c054:	e7f2      	b.n	800c03c <__sinit+0xc>
 800c056:	bf00      	nop
 800c058:	0800bf9d 	.word	0x0800bf9d
 800c05c:	20000f0c 	.word	0x20000f0c

0800c060 <_fwalk_sglue>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	4607      	mov	r7, r0
 800c066:	4688      	mov	r8, r1
 800c068:	4614      	mov	r4, r2
 800c06a:	2600      	movs	r6, #0
 800c06c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c070:	f1b9 0901 	subs.w	r9, r9, #1
 800c074:	d505      	bpl.n	800c082 <_fwalk_sglue+0x22>
 800c076:	6824      	ldr	r4, [r4, #0]
 800c078:	2c00      	cmp	r4, #0
 800c07a:	d1f7      	bne.n	800c06c <_fwalk_sglue+0xc>
 800c07c:	4630      	mov	r0, r6
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d907      	bls.n	800c098 <_fwalk_sglue+0x38>
 800c088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c08c:	3301      	adds	r3, #1
 800c08e:	d003      	beq.n	800c098 <_fwalk_sglue+0x38>
 800c090:	4629      	mov	r1, r5
 800c092:	4638      	mov	r0, r7
 800c094:	47c0      	blx	r8
 800c096:	4306      	orrs	r6, r0
 800c098:	3568      	adds	r5, #104	@ 0x68
 800c09a:	e7e9      	b.n	800c070 <_fwalk_sglue+0x10>

0800c09c <iprintf>:
 800c09c:	b40f      	push	{r0, r1, r2, r3}
 800c09e:	b507      	push	{r0, r1, r2, lr}
 800c0a0:	4906      	ldr	r1, [pc, #24]	@ (800c0bc <iprintf+0x20>)
 800c0a2:	ab04      	add	r3, sp, #16
 800c0a4:	6808      	ldr	r0, [r1, #0]
 800c0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0aa:	6881      	ldr	r1, [r0, #8]
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	f000 f93d 	bl	800c32c <_vfiprintf_r>
 800c0b2:	b003      	add	sp, #12
 800c0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b8:	b004      	add	sp, #16
 800c0ba:	4770      	bx	lr
 800c0bc:	20000568 	.word	0x20000568

0800c0c0 <_puts_r>:
 800c0c0:	6a03      	ldr	r3, [r0, #32]
 800c0c2:	b570      	push	{r4, r5, r6, lr}
 800c0c4:	6884      	ldr	r4, [r0, #8]
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	460e      	mov	r6, r1
 800c0ca:	b90b      	cbnz	r3, 800c0d0 <_puts_r+0x10>
 800c0cc:	f7ff ffb0 	bl	800c030 <__sinit>
 800c0d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0d2:	07db      	lsls	r3, r3, #31
 800c0d4:	d405      	bmi.n	800c0e2 <_puts_r+0x22>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	0598      	lsls	r0, r3, #22
 800c0da:	d402      	bmi.n	800c0e2 <_puts_r+0x22>
 800c0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0de:	f000 f8a0 	bl	800c222 <__retarget_lock_acquire_recursive>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	0719      	lsls	r1, r3, #28
 800c0e6:	d502      	bpl.n	800c0ee <_puts_r+0x2e>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d135      	bne.n	800c15a <_puts_r+0x9a>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 fcef 	bl	800cad4 <__swsetup_r>
 800c0f6:	b380      	cbz	r0, 800c15a <_puts_r+0x9a>
 800c0f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c0fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0fe:	07da      	lsls	r2, r3, #31
 800c100:	d405      	bmi.n	800c10e <_puts_r+0x4e>
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	059b      	lsls	r3, r3, #22
 800c106:	d402      	bmi.n	800c10e <_puts_r+0x4e>
 800c108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c10a:	f000 f88b 	bl	800c224 <__retarget_lock_release_recursive>
 800c10e:	4628      	mov	r0, r5
 800c110:	bd70      	pop	{r4, r5, r6, pc}
 800c112:	2b00      	cmp	r3, #0
 800c114:	da04      	bge.n	800c120 <_puts_r+0x60>
 800c116:	69a2      	ldr	r2, [r4, #24]
 800c118:	429a      	cmp	r2, r3
 800c11a:	dc17      	bgt.n	800c14c <_puts_r+0x8c>
 800c11c:	290a      	cmp	r1, #10
 800c11e:	d015      	beq.n	800c14c <_puts_r+0x8c>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	6022      	str	r2, [r4, #0]
 800c126:	7019      	strb	r1, [r3, #0]
 800c128:	68a3      	ldr	r3, [r4, #8]
 800c12a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c12e:	3b01      	subs	r3, #1
 800c130:	60a3      	str	r3, [r4, #8]
 800c132:	2900      	cmp	r1, #0
 800c134:	d1ed      	bne.n	800c112 <_puts_r+0x52>
 800c136:	2b00      	cmp	r3, #0
 800c138:	da11      	bge.n	800c15e <_puts_r+0x9e>
 800c13a:	4622      	mov	r2, r4
 800c13c:	210a      	movs	r1, #10
 800c13e:	4628      	mov	r0, r5
 800c140:	f000 fc89 	bl	800ca56 <__swbuf_r>
 800c144:	3001      	adds	r0, #1
 800c146:	d0d7      	beq.n	800c0f8 <_puts_r+0x38>
 800c148:	250a      	movs	r5, #10
 800c14a:	e7d7      	b.n	800c0fc <_puts_r+0x3c>
 800c14c:	4622      	mov	r2, r4
 800c14e:	4628      	mov	r0, r5
 800c150:	f000 fc81 	bl	800ca56 <__swbuf_r>
 800c154:	3001      	adds	r0, #1
 800c156:	d1e7      	bne.n	800c128 <_puts_r+0x68>
 800c158:	e7ce      	b.n	800c0f8 <_puts_r+0x38>
 800c15a:	3e01      	subs	r6, #1
 800c15c:	e7e4      	b.n	800c128 <_puts_r+0x68>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	6022      	str	r2, [r4, #0]
 800c164:	220a      	movs	r2, #10
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	e7ee      	b.n	800c148 <_puts_r+0x88>
	...

0800c16c <puts>:
 800c16c:	4b02      	ldr	r3, [pc, #8]	@ (800c178 <puts+0xc>)
 800c16e:	4601      	mov	r1, r0
 800c170:	6818      	ldr	r0, [r3, #0]
 800c172:	f7ff bfa5 	b.w	800c0c0 <_puts_r>
 800c176:	bf00      	nop
 800c178:	20000568 	.word	0x20000568

0800c17c <memcmp>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	3901      	subs	r1, #1
 800c180:	4402      	add	r2, r0
 800c182:	4290      	cmp	r0, r2
 800c184:	d101      	bne.n	800c18a <memcmp+0xe>
 800c186:	2000      	movs	r0, #0
 800c188:	e005      	b.n	800c196 <memcmp+0x1a>
 800c18a:	7803      	ldrb	r3, [r0, #0]
 800c18c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c190:	42a3      	cmp	r3, r4
 800c192:	d001      	beq.n	800c198 <memcmp+0x1c>
 800c194:	1b18      	subs	r0, r3, r4
 800c196:	bd10      	pop	{r4, pc}
 800c198:	3001      	adds	r0, #1
 800c19a:	e7f2      	b.n	800c182 <memcmp+0x6>

0800c19c <memset>:
 800c19c:	4402      	add	r2, r0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d100      	bne.n	800c1a6 <memset+0xa>
 800c1a4:	4770      	bx	lr
 800c1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1aa:	e7f9      	b.n	800c1a0 <memset+0x4>

0800c1ac <_sbrk_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d06      	ldr	r5, [pc, #24]	@ (800c1c8 <_sbrk_r+0x1c>)
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	602b      	str	r3, [r5, #0]
 800c1b8:	f7fa fa6e 	bl	8006698 <_sbrk>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_sbrk_r+0x1a>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_sbrk_r+0x1a>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	20000f14 	.word	0x20000f14

0800c1cc <__errno>:
 800c1cc:	4b01      	ldr	r3, [pc, #4]	@ (800c1d4 <__errno+0x8>)
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	20000568 	.word	0x20000568

0800c1d8 <__libc_init_array>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	4d0d      	ldr	r5, [pc, #52]	@ (800c210 <__libc_init_array+0x38>)
 800c1dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c214 <__libc_init_array+0x3c>)
 800c1de:	1b64      	subs	r4, r4, r5
 800c1e0:	10a4      	asrs	r4, r4, #2
 800c1e2:	2600      	movs	r6, #0
 800c1e4:	42a6      	cmp	r6, r4
 800c1e6:	d109      	bne.n	800c1fc <__libc_init_array+0x24>
 800c1e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c218 <__libc_init_array+0x40>)
 800c1ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c21c <__libc_init_array+0x44>)
 800c1ec:	f000 fd92 	bl	800cd14 <_init>
 800c1f0:	1b64      	subs	r4, r4, r5
 800c1f2:	10a4      	asrs	r4, r4, #2
 800c1f4:	2600      	movs	r6, #0
 800c1f6:	42a6      	cmp	r6, r4
 800c1f8:	d105      	bne.n	800c206 <__libc_init_array+0x2e>
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c200:	4798      	blx	r3
 800c202:	3601      	adds	r6, #1
 800c204:	e7ee      	b.n	800c1e4 <__libc_init_array+0xc>
 800c206:	f855 3b04 	ldr.w	r3, [r5], #4
 800c20a:	4798      	blx	r3
 800c20c:	3601      	adds	r6, #1
 800c20e:	e7f2      	b.n	800c1f6 <__libc_init_array+0x1e>
 800c210:	0800cfd4 	.word	0x0800cfd4
 800c214:	0800cfd4 	.word	0x0800cfd4
 800c218:	0800cfd4 	.word	0x0800cfd4
 800c21c:	0800cfd8 	.word	0x0800cfd8

0800c220 <__retarget_lock_init_recursive>:
 800c220:	4770      	bx	lr

0800c222 <__retarget_lock_acquire_recursive>:
 800c222:	4770      	bx	lr

0800c224 <__retarget_lock_release_recursive>:
 800c224:	4770      	bx	lr

0800c226 <memcpy>:
 800c226:	440a      	add	r2, r1
 800c228:	4291      	cmp	r1, r2
 800c22a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c22e:	d100      	bne.n	800c232 <memcpy+0xc>
 800c230:	4770      	bx	lr
 800c232:	b510      	push	{r4, lr}
 800c234:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c23c:	4291      	cmp	r1, r2
 800c23e:	d1f9      	bne.n	800c234 <memcpy+0xe>
 800c240:	bd10      	pop	{r4, pc}
	...

0800c244 <_free_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4605      	mov	r5, r0
 800c248:	2900      	cmp	r1, #0
 800c24a:	d041      	beq.n	800c2d0 <_free_r+0x8c>
 800c24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c250:	1f0c      	subs	r4, r1, #4
 800c252:	2b00      	cmp	r3, #0
 800c254:	bfb8      	it	lt
 800c256:	18e4      	addlt	r4, r4, r3
 800c258:	f7ff fe52 	bl	800bf00 <__malloc_lock>
 800c25c:	4a1d      	ldr	r2, [pc, #116]	@ (800c2d4 <_free_r+0x90>)
 800c25e:	6813      	ldr	r3, [r2, #0]
 800c260:	b933      	cbnz	r3, 800c270 <_free_r+0x2c>
 800c262:	6063      	str	r3, [r4, #4]
 800c264:	6014      	str	r4, [r2, #0]
 800c266:	4628      	mov	r0, r5
 800c268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c26c:	f7ff be4e 	b.w	800bf0c <__malloc_unlock>
 800c270:	42a3      	cmp	r3, r4
 800c272:	d908      	bls.n	800c286 <_free_r+0x42>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	1821      	adds	r1, r4, r0
 800c278:	428b      	cmp	r3, r1
 800c27a:	bf01      	itttt	eq
 800c27c:	6819      	ldreq	r1, [r3, #0]
 800c27e:	685b      	ldreq	r3, [r3, #4]
 800c280:	1809      	addeq	r1, r1, r0
 800c282:	6021      	streq	r1, [r4, #0]
 800c284:	e7ed      	b.n	800c262 <_free_r+0x1e>
 800c286:	461a      	mov	r2, r3
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	b10b      	cbz	r3, 800c290 <_free_r+0x4c>
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	d9fa      	bls.n	800c286 <_free_r+0x42>
 800c290:	6811      	ldr	r1, [r2, #0]
 800c292:	1850      	adds	r0, r2, r1
 800c294:	42a0      	cmp	r0, r4
 800c296:	d10b      	bne.n	800c2b0 <_free_r+0x6c>
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	4401      	add	r1, r0
 800c29c:	1850      	adds	r0, r2, r1
 800c29e:	4283      	cmp	r3, r0
 800c2a0:	6011      	str	r1, [r2, #0]
 800c2a2:	d1e0      	bne.n	800c266 <_free_r+0x22>
 800c2a4:	6818      	ldr	r0, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	6053      	str	r3, [r2, #4]
 800c2aa:	4408      	add	r0, r1
 800c2ac:	6010      	str	r0, [r2, #0]
 800c2ae:	e7da      	b.n	800c266 <_free_r+0x22>
 800c2b0:	d902      	bls.n	800c2b8 <_free_r+0x74>
 800c2b2:	230c      	movs	r3, #12
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	e7d6      	b.n	800c266 <_free_r+0x22>
 800c2b8:	6820      	ldr	r0, [r4, #0]
 800c2ba:	1821      	adds	r1, r4, r0
 800c2bc:	428b      	cmp	r3, r1
 800c2be:	bf04      	itt	eq
 800c2c0:	6819      	ldreq	r1, [r3, #0]
 800c2c2:	685b      	ldreq	r3, [r3, #4]
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	bf04      	itt	eq
 800c2c8:	1809      	addeq	r1, r1, r0
 800c2ca:	6021      	streq	r1, [r4, #0]
 800c2cc:	6054      	str	r4, [r2, #4]
 800c2ce:	e7ca      	b.n	800c266 <_free_r+0x22>
 800c2d0:	bd38      	pop	{r3, r4, r5, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20000dd0 	.word	0x20000dd0

0800c2d8 <__sfputc_r>:
 800c2d8:	6893      	ldr	r3, [r2, #8]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	b410      	push	{r4}
 800c2e0:	6093      	str	r3, [r2, #8]
 800c2e2:	da08      	bge.n	800c2f6 <__sfputc_r+0x1e>
 800c2e4:	6994      	ldr	r4, [r2, #24]
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	db01      	blt.n	800c2ee <__sfputc_r+0x16>
 800c2ea:	290a      	cmp	r1, #10
 800c2ec:	d103      	bne.n	800c2f6 <__sfputc_r+0x1e>
 800c2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f2:	f000 bbb0 	b.w	800ca56 <__swbuf_r>
 800c2f6:	6813      	ldr	r3, [r2, #0]
 800c2f8:	1c58      	adds	r0, r3, #1
 800c2fa:	6010      	str	r0, [r2, #0]
 800c2fc:	7019      	strb	r1, [r3, #0]
 800c2fe:	4608      	mov	r0, r1
 800c300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <__sfputs_r>:
 800c306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	18d5      	adds	r5, r2, r3
 800c310:	42ac      	cmp	r4, r5
 800c312:	d101      	bne.n	800c318 <__sfputs_r+0x12>
 800c314:	2000      	movs	r0, #0
 800c316:	e007      	b.n	800c328 <__sfputs_r+0x22>
 800c318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31c:	463a      	mov	r2, r7
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ffda 	bl	800c2d8 <__sfputc_r>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d1f3      	bne.n	800c310 <__sfputs_r+0xa>
 800c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c32c <_vfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460d      	mov	r5, r1
 800c332:	b09d      	sub	sp, #116	@ 0x74
 800c334:	4614      	mov	r4, r2
 800c336:	4698      	mov	r8, r3
 800c338:	4606      	mov	r6, r0
 800c33a:	b118      	cbz	r0, 800c344 <_vfiprintf_r+0x18>
 800c33c:	6a03      	ldr	r3, [r0, #32]
 800c33e:	b90b      	cbnz	r3, 800c344 <_vfiprintf_r+0x18>
 800c340:	f7ff fe76 	bl	800c030 <__sinit>
 800c344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c346:	07d9      	lsls	r1, r3, #31
 800c348:	d405      	bmi.n	800c356 <_vfiprintf_r+0x2a>
 800c34a:	89ab      	ldrh	r3, [r5, #12]
 800c34c:	059a      	lsls	r2, r3, #22
 800c34e:	d402      	bmi.n	800c356 <_vfiprintf_r+0x2a>
 800c350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c352:	f7ff ff66 	bl	800c222 <__retarget_lock_acquire_recursive>
 800c356:	89ab      	ldrh	r3, [r5, #12]
 800c358:	071b      	lsls	r3, r3, #28
 800c35a:	d501      	bpl.n	800c360 <_vfiprintf_r+0x34>
 800c35c:	692b      	ldr	r3, [r5, #16]
 800c35e:	b99b      	cbnz	r3, 800c388 <_vfiprintf_r+0x5c>
 800c360:	4629      	mov	r1, r5
 800c362:	4630      	mov	r0, r6
 800c364:	f000 fbb6 	bl	800cad4 <__swsetup_r>
 800c368:	b170      	cbz	r0, 800c388 <_vfiprintf_r+0x5c>
 800c36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c36c:	07dc      	lsls	r4, r3, #31
 800c36e:	d504      	bpl.n	800c37a <_vfiprintf_r+0x4e>
 800c370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c374:	b01d      	add	sp, #116	@ 0x74
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	89ab      	ldrh	r3, [r5, #12]
 800c37c:	0598      	lsls	r0, r3, #22
 800c37e:	d4f7      	bmi.n	800c370 <_vfiprintf_r+0x44>
 800c380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c382:	f7ff ff4f 	bl	800c224 <__retarget_lock_release_recursive>
 800c386:	e7f3      	b.n	800c370 <_vfiprintf_r+0x44>
 800c388:	2300      	movs	r3, #0
 800c38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c38c:	2320      	movs	r3, #32
 800c38e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c392:	f8cd 800c 	str.w	r8, [sp, #12]
 800c396:	2330      	movs	r3, #48	@ 0x30
 800c398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c548 <_vfiprintf_r+0x21c>
 800c39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3a0:	f04f 0901 	mov.w	r9, #1
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	469a      	mov	sl, r3
 800c3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ac:	b10a      	cbz	r2, 800c3b2 <_vfiprintf_r+0x86>
 800c3ae:	2a25      	cmp	r2, #37	@ 0x25
 800c3b0:	d1f9      	bne.n	800c3a6 <_vfiprintf_r+0x7a>
 800c3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c3b6:	d00b      	beq.n	800c3d0 <_vfiprintf_r+0xa4>
 800c3b8:	465b      	mov	r3, fp
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	4629      	mov	r1, r5
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f7ff ffa1 	bl	800c306 <__sfputs_r>
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	f000 80a7 	beq.w	800c518 <_vfiprintf_r+0x1ec>
 800c3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3cc:	445a      	add	r2, fp
 800c3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 809f 	beq.w	800c518 <_vfiprintf_r+0x1ec>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3e4:	f10a 0a01 	add.w	sl, sl, #1
 800c3e8:	9304      	str	r3, [sp, #16]
 800c3ea:	9307      	str	r3, [sp, #28]
 800c3ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3f2:	4654      	mov	r4, sl
 800c3f4:	2205      	movs	r2, #5
 800c3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fa:	4853      	ldr	r0, [pc, #332]	@ (800c548 <_vfiprintf_r+0x21c>)
 800c3fc:	f7f3 fef0 	bl	80001e0 <memchr>
 800c400:	9a04      	ldr	r2, [sp, #16]
 800c402:	b9d8      	cbnz	r0, 800c43c <_vfiprintf_r+0x110>
 800c404:	06d1      	lsls	r1, r2, #27
 800c406:	bf44      	itt	mi
 800c408:	2320      	movmi	r3, #32
 800c40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c40e:	0713      	lsls	r3, r2, #28
 800c410:	bf44      	itt	mi
 800c412:	232b      	movmi	r3, #43	@ 0x2b
 800c414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c418:	f89a 3000 	ldrb.w	r3, [sl]
 800c41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c41e:	d015      	beq.n	800c44c <_vfiprintf_r+0x120>
 800c420:	9a07      	ldr	r2, [sp, #28]
 800c422:	4654      	mov	r4, sl
 800c424:	2000      	movs	r0, #0
 800c426:	f04f 0c0a 	mov.w	ip, #10
 800c42a:	4621      	mov	r1, r4
 800c42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c430:	3b30      	subs	r3, #48	@ 0x30
 800c432:	2b09      	cmp	r3, #9
 800c434:	d94b      	bls.n	800c4ce <_vfiprintf_r+0x1a2>
 800c436:	b1b0      	cbz	r0, 800c466 <_vfiprintf_r+0x13a>
 800c438:	9207      	str	r2, [sp, #28]
 800c43a:	e014      	b.n	800c466 <_vfiprintf_r+0x13a>
 800c43c:	eba0 0308 	sub.w	r3, r0, r8
 800c440:	fa09 f303 	lsl.w	r3, r9, r3
 800c444:	4313      	orrs	r3, r2
 800c446:	9304      	str	r3, [sp, #16]
 800c448:	46a2      	mov	sl, r4
 800c44a:	e7d2      	b.n	800c3f2 <_vfiprintf_r+0xc6>
 800c44c:	9b03      	ldr	r3, [sp, #12]
 800c44e:	1d19      	adds	r1, r3, #4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	9103      	str	r1, [sp, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	bfbb      	ittet	lt
 800c458:	425b      	neglt	r3, r3
 800c45a:	f042 0202 	orrlt.w	r2, r2, #2
 800c45e:	9307      	strge	r3, [sp, #28]
 800c460:	9307      	strlt	r3, [sp, #28]
 800c462:	bfb8      	it	lt
 800c464:	9204      	strlt	r2, [sp, #16]
 800c466:	7823      	ldrb	r3, [r4, #0]
 800c468:	2b2e      	cmp	r3, #46	@ 0x2e
 800c46a:	d10a      	bne.n	800c482 <_vfiprintf_r+0x156>
 800c46c:	7863      	ldrb	r3, [r4, #1]
 800c46e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c470:	d132      	bne.n	800c4d8 <_vfiprintf_r+0x1ac>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	1d1a      	adds	r2, r3, #4
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	9203      	str	r2, [sp, #12]
 800c47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c47e:	3402      	adds	r4, #2
 800c480:	9305      	str	r3, [sp, #20]
 800c482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c558 <_vfiprintf_r+0x22c>
 800c486:	7821      	ldrb	r1, [r4, #0]
 800c488:	2203      	movs	r2, #3
 800c48a:	4650      	mov	r0, sl
 800c48c:	f7f3 fea8 	bl	80001e0 <memchr>
 800c490:	b138      	cbz	r0, 800c4a2 <_vfiprintf_r+0x176>
 800c492:	9b04      	ldr	r3, [sp, #16]
 800c494:	eba0 000a 	sub.w	r0, r0, sl
 800c498:	2240      	movs	r2, #64	@ 0x40
 800c49a:	4082      	lsls	r2, r0
 800c49c:	4313      	orrs	r3, r2
 800c49e:	3401      	adds	r4, #1
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a6:	4829      	ldr	r0, [pc, #164]	@ (800c54c <_vfiprintf_r+0x220>)
 800c4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4ac:	2206      	movs	r2, #6
 800c4ae:	f7f3 fe97 	bl	80001e0 <memchr>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d03f      	beq.n	800c536 <_vfiprintf_r+0x20a>
 800c4b6:	4b26      	ldr	r3, [pc, #152]	@ (800c550 <_vfiprintf_r+0x224>)
 800c4b8:	bb1b      	cbnz	r3, 800c502 <_vfiprintf_r+0x1d6>
 800c4ba:	9b03      	ldr	r3, [sp, #12]
 800c4bc:	3307      	adds	r3, #7
 800c4be:	f023 0307 	bic.w	r3, r3, #7
 800c4c2:	3308      	adds	r3, #8
 800c4c4:	9303      	str	r3, [sp, #12]
 800c4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c8:	443b      	add	r3, r7
 800c4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4cc:	e76a      	b.n	800c3a4 <_vfiprintf_r+0x78>
 800c4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	2001      	movs	r0, #1
 800c4d6:	e7a8      	b.n	800c42a <_vfiprintf_r+0xfe>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	3401      	adds	r4, #1
 800c4dc:	9305      	str	r3, [sp, #20]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	f04f 0c0a 	mov.w	ip, #10
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4ea:	3a30      	subs	r2, #48	@ 0x30
 800c4ec:	2a09      	cmp	r2, #9
 800c4ee:	d903      	bls.n	800c4f8 <_vfiprintf_r+0x1cc>
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d0c6      	beq.n	800c482 <_vfiprintf_r+0x156>
 800c4f4:	9105      	str	r1, [sp, #20]
 800c4f6:	e7c4      	b.n	800c482 <_vfiprintf_r+0x156>
 800c4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	2301      	movs	r3, #1
 800c500:	e7f0      	b.n	800c4e4 <_vfiprintf_r+0x1b8>
 800c502:	ab03      	add	r3, sp, #12
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	462a      	mov	r2, r5
 800c508:	4b12      	ldr	r3, [pc, #72]	@ (800c554 <_vfiprintf_r+0x228>)
 800c50a:	a904      	add	r1, sp, #16
 800c50c:	4630      	mov	r0, r6
 800c50e:	f3af 8000 	nop.w
 800c512:	4607      	mov	r7, r0
 800c514:	1c78      	adds	r0, r7, #1
 800c516:	d1d6      	bne.n	800c4c6 <_vfiprintf_r+0x19a>
 800c518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c51a:	07d9      	lsls	r1, r3, #31
 800c51c:	d405      	bmi.n	800c52a <_vfiprintf_r+0x1fe>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	059a      	lsls	r2, r3, #22
 800c522:	d402      	bmi.n	800c52a <_vfiprintf_r+0x1fe>
 800c524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c526:	f7ff fe7d 	bl	800c224 <__retarget_lock_release_recursive>
 800c52a:	89ab      	ldrh	r3, [r5, #12]
 800c52c:	065b      	lsls	r3, r3, #25
 800c52e:	f53f af1f 	bmi.w	800c370 <_vfiprintf_r+0x44>
 800c532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c534:	e71e      	b.n	800c374 <_vfiprintf_r+0x48>
 800c536:	ab03      	add	r3, sp, #12
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	462a      	mov	r2, r5
 800c53c:	4b05      	ldr	r3, [pc, #20]	@ (800c554 <_vfiprintf_r+0x228>)
 800c53e:	a904      	add	r1, sp, #16
 800c540:	4630      	mov	r0, r6
 800c542:	f000 f879 	bl	800c638 <_printf_i>
 800c546:	e7e4      	b.n	800c512 <_vfiprintf_r+0x1e6>
 800c548:	0800cf98 	.word	0x0800cf98
 800c54c:	0800cfa2 	.word	0x0800cfa2
 800c550:	00000000 	.word	0x00000000
 800c554:	0800c307 	.word	0x0800c307
 800c558:	0800cf9e 	.word	0x0800cf9e

0800c55c <_printf_common>:
 800c55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c560:	4616      	mov	r6, r2
 800c562:	4698      	mov	r8, r3
 800c564:	688a      	ldr	r2, [r1, #8]
 800c566:	690b      	ldr	r3, [r1, #16]
 800c568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c56c:	4293      	cmp	r3, r2
 800c56e:	bfb8      	it	lt
 800c570:	4613      	movlt	r3, r2
 800c572:	6033      	str	r3, [r6, #0]
 800c574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c578:	4607      	mov	r7, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	b10a      	cbz	r2, 800c582 <_printf_common+0x26>
 800c57e:	3301      	adds	r3, #1
 800c580:	6033      	str	r3, [r6, #0]
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	0699      	lsls	r1, r3, #26
 800c586:	bf42      	ittt	mi
 800c588:	6833      	ldrmi	r3, [r6, #0]
 800c58a:	3302      	addmi	r3, #2
 800c58c:	6033      	strmi	r3, [r6, #0]
 800c58e:	6825      	ldr	r5, [r4, #0]
 800c590:	f015 0506 	ands.w	r5, r5, #6
 800c594:	d106      	bne.n	800c5a4 <_printf_common+0x48>
 800c596:	f104 0a19 	add.w	sl, r4, #25
 800c59a:	68e3      	ldr	r3, [r4, #12]
 800c59c:	6832      	ldr	r2, [r6, #0]
 800c59e:	1a9b      	subs	r3, r3, r2
 800c5a0:	42ab      	cmp	r3, r5
 800c5a2:	dc26      	bgt.n	800c5f2 <_printf_common+0x96>
 800c5a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5a8:	6822      	ldr	r2, [r4, #0]
 800c5aa:	3b00      	subs	r3, #0
 800c5ac:	bf18      	it	ne
 800c5ae:	2301      	movne	r3, #1
 800c5b0:	0692      	lsls	r2, r2, #26
 800c5b2:	d42b      	bmi.n	800c60c <_printf_common+0xb0>
 800c5b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	47c8      	blx	r9
 800c5be:	3001      	adds	r0, #1
 800c5c0:	d01e      	beq.n	800c600 <_printf_common+0xa4>
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	6922      	ldr	r2, [r4, #16]
 800c5c6:	f003 0306 	and.w	r3, r3, #6
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	bf02      	ittt	eq
 800c5ce:	68e5      	ldreq	r5, [r4, #12]
 800c5d0:	6833      	ldreq	r3, [r6, #0]
 800c5d2:	1aed      	subeq	r5, r5, r3
 800c5d4:	68a3      	ldr	r3, [r4, #8]
 800c5d6:	bf0c      	ite	eq
 800c5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5dc:	2500      	movne	r5, #0
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	bfc4      	itt	gt
 800c5e2:	1a9b      	subgt	r3, r3, r2
 800c5e4:	18ed      	addgt	r5, r5, r3
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	341a      	adds	r4, #26
 800c5ea:	42b5      	cmp	r5, r6
 800c5ec:	d11a      	bne.n	800c624 <_printf_common+0xc8>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e008      	b.n	800c604 <_printf_common+0xa8>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	4652      	mov	r2, sl
 800c5f6:	4641      	mov	r1, r8
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	47c8      	blx	r9
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	d103      	bne.n	800c608 <_printf_common+0xac>
 800c600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c608:	3501      	adds	r5, #1
 800c60a:	e7c6      	b.n	800c59a <_printf_common+0x3e>
 800c60c:	18e1      	adds	r1, r4, r3
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	2030      	movs	r0, #48	@ 0x30
 800c612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c616:	4422      	add	r2, r4
 800c618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c61c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c620:	3302      	adds	r3, #2
 800c622:	e7c7      	b.n	800c5b4 <_printf_common+0x58>
 800c624:	2301      	movs	r3, #1
 800c626:	4622      	mov	r2, r4
 800c628:	4641      	mov	r1, r8
 800c62a:	4638      	mov	r0, r7
 800c62c:	47c8      	blx	r9
 800c62e:	3001      	adds	r0, #1
 800c630:	d0e6      	beq.n	800c600 <_printf_common+0xa4>
 800c632:	3601      	adds	r6, #1
 800c634:	e7d9      	b.n	800c5ea <_printf_common+0x8e>
	...

0800c638 <_printf_i>:
 800c638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c63c:	7e0f      	ldrb	r7, [r1, #24]
 800c63e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c640:	2f78      	cmp	r7, #120	@ 0x78
 800c642:	4691      	mov	r9, r2
 800c644:	4680      	mov	r8, r0
 800c646:	460c      	mov	r4, r1
 800c648:	469a      	mov	sl, r3
 800c64a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c64e:	d807      	bhi.n	800c660 <_printf_i+0x28>
 800c650:	2f62      	cmp	r7, #98	@ 0x62
 800c652:	d80a      	bhi.n	800c66a <_printf_i+0x32>
 800c654:	2f00      	cmp	r7, #0
 800c656:	f000 80d2 	beq.w	800c7fe <_printf_i+0x1c6>
 800c65a:	2f58      	cmp	r7, #88	@ 0x58
 800c65c:	f000 80b9 	beq.w	800c7d2 <_printf_i+0x19a>
 800c660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c668:	e03a      	b.n	800c6e0 <_printf_i+0xa8>
 800c66a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c66e:	2b15      	cmp	r3, #21
 800c670:	d8f6      	bhi.n	800c660 <_printf_i+0x28>
 800c672:	a101      	add	r1, pc, #4	@ (adr r1, 800c678 <_printf_i+0x40>)
 800c674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c678:	0800c6d1 	.word	0x0800c6d1
 800c67c:	0800c6e5 	.word	0x0800c6e5
 800c680:	0800c661 	.word	0x0800c661
 800c684:	0800c661 	.word	0x0800c661
 800c688:	0800c661 	.word	0x0800c661
 800c68c:	0800c661 	.word	0x0800c661
 800c690:	0800c6e5 	.word	0x0800c6e5
 800c694:	0800c661 	.word	0x0800c661
 800c698:	0800c661 	.word	0x0800c661
 800c69c:	0800c661 	.word	0x0800c661
 800c6a0:	0800c661 	.word	0x0800c661
 800c6a4:	0800c7e5 	.word	0x0800c7e5
 800c6a8:	0800c70f 	.word	0x0800c70f
 800c6ac:	0800c79f 	.word	0x0800c79f
 800c6b0:	0800c661 	.word	0x0800c661
 800c6b4:	0800c661 	.word	0x0800c661
 800c6b8:	0800c807 	.word	0x0800c807
 800c6bc:	0800c661 	.word	0x0800c661
 800c6c0:	0800c70f 	.word	0x0800c70f
 800c6c4:	0800c661 	.word	0x0800c661
 800c6c8:	0800c661 	.word	0x0800c661
 800c6cc:	0800c7a7 	.word	0x0800c7a7
 800c6d0:	6833      	ldr	r3, [r6, #0]
 800c6d2:	1d1a      	adds	r2, r3, #4
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6032      	str	r2, [r6, #0]
 800c6d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e09d      	b.n	800c820 <_printf_i+0x1e8>
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	6820      	ldr	r0, [r4, #0]
 800c6e8:	1d19      	adds	r1, r3, #4
 800c6ea:	6031      	str	r1, [r6, #0]
 800c6ec:	0606      	lsls	r6, r0, #24
 800c6ee:	d501      	bpl.n	800c6f4 <_printf_i+0xbc>
 800c6f0:	681d      	ldr	r5, [r3, #0]
 800c6f2:	e003      	b.n	800c6fc <_printf_i+0xc4>
 800c6f4:	0645      	lsls	r5, r0, #25
 800c6f6:	d5fb      	bpl.n	800c6f0 <_printf_i+0xb8>
 800c6f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6fc:	2d00      	cmp	r5, #0
 800c6fe:	da03      	bge.n	800c708 <_printf_i+0xd0>
 800c700:	232d      	movs	r3, #45	@ 0x2d
 800c702:	426d      	negs	r5, r5
 800c704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c708:	4859      	ldr	r0, [pc, #356]	@ (800c870 <_printf_i+0x238>)
 800c70a:	230a      	movs	r3, #10
 800c70c:	e011      	b.n	800c732 <_printf_i+0xfa>
 800c70e:	6821      	ldr	r1, [r4, #0]
 800c710:	6833      	ldr	r3, [r6, #0]
 800c712:	0608      	lsls	r0, r1, #24
 800c714:	f853 5b04 	ldr.w	r5, [r3], #4
 800c718:	d402      	bmi.n	800c720 <_printf_i+0xe8>
 800c71a:	0649      	lsls	r1, r1, #25
 800c71c:	bf48      	it	mi
 800c71e:	b2ad      	uxthmi	r5, r5
 800c720:	2f6f      	cmp	r7, #111	@ 0x6f
 800c722:	4853      	ldr	r0, [pc, #332]	@ (800c870 <_printf_i+0x238>)
 800c724:	6033      	str	r3, [r6, #0]
 800c726:	bf14      	ite	ne
 800c728:	230a      	movne	r3, #10
 800c72a:	2308      	moveq	r3, #8
 800c72c:	2100      	movs	r1, #0
 800c72e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c732:	6866      	ldr	r6, [r4, #4]
 800c734:	60a6      	str	r6, [r4, #8]
 800c736:	2e00      	cmp	r6, #0
 800c738:	bfa2      	ittt	ge
 800c73a:	6821      	ldrge	r1, [r4, #0]
 800c73c:	f021 0104 	bicge.w	r1, r1, #4
 800c740:	6021      	strge	r1, [r4, #0]
 800c742:	b90d      	cbnz	r5, 800c748 <_printf_i+0x110>
 800c744:	2e00      	cmp	r6, #0
 800c746:	d04b      	beq.n	800c7e0 <_printf_i+0x1a8>
 800c748:	4616      	mov	r6, r2
 800c74a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c74e:	fb03 5711 	mls	r7, r3, r1, r5
 800c752:	5dc7      	ldrb	r7, [r0, r7]
 800c754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c758:	462f      	mov	r7, r5
 800c75a:	42bb      	cmp	r3, r7
 800c75c:	460d      	mov	r5, r1
 800c75e:	d9f4      	bls.n	800c74a <_printf_i+0x112>
 800c760:	2b08      	cmp	r3, #8
 800c762:	d10b      	bne.n	800c77c <_printf_i+0x144>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	07df      	lsls	r7, r3, #31
 800c768:	d508      	bpl.n	800c77c <_printf_i+0x144>
 800c76a:	6923      	ldr	r3, [r4, #16]
 800c76c:	6861      	ldr	r1, [r4, #4]
 800c76e:	4299      	cmp	r1, r3
 800c770:	bfde      	ittt	le
 800c772:	2330      	movle	r3, #48	@ 0x30
 800c774:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c778:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c77c:	1b92      	subs	r2, r2, r6
 800c77e:	6122      	str	r2, [r4, #16]
 800c780:	f8cd a000 	str.w	sl, [sp]
 800c784:	464b      	mov	r3, r9
 800c786:	aa03      	add	r2, sp, #12
 800c788:	4621      	mov	r1, r4
 800c78a:	4640      	mov	r0, r8
 800c78c:	f7ff fee6 	bl	800c55c <_printf_common>
 800c790:	3001      	adds	r0, #1
 800c792:	d14a      	bne.n	800c82a <_printf_i+0x1f2>
 800c794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c798:	b004      	add	sp, #16
 800c79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	f043 0320 	orr.w	r3, r3, #32
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	4833      	ldr	r0, [pc, #204]	@ (800c874 <_printf_i+0x23c>)
 800c7a8:	2778      	movs	r7, #120	@ 0x78
 800c7aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	6831      	ldr	r1, [r6, #0]
 800c7b2:	061f      	lsls	r7, r3, #24
 800c7b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7b8:	d402      	bmi.n	800c7c0 <_printf_i+0x188>
 800c7ba:	065f      	lsls	r7, r3, #25
 800c7bc:	bf48      	it	mi
 800c7be:	b2ad      	uxthmi	r5, r5
 800c7c0:	6031      	str	r1, [r6, #0]
 800c7c2:	07d9      	lsls	r1, r3, #31
 800c7c4:	bf44      	itt	mi
 800c7c6:	f043 0320 	orrmi.w	r3, r3, #32
 800c7ca:	6023      	strmi	r3, [r4, #0]
 800c7cc:	b11d      	cbz	r5, 800c7d6 <_printf_i+0x19e>
 800c7ce:	2310      	movs	r3, #16
 800c7d0:	e7ac      	b.n	800c72c <_printf_i+0xf4>
 800c7d2:	4827      	ldr	r0, [pc, #156]	@ (800c870 <_printf_i+0x238>)
 800c7d4:	e7e9      	b.n	800c7aa <_printf_i+0x172>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	f023 0320 	bic.w	r3, r3, #32
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	e7f6      	b.n	800c7ce <_printf_i+0x196>
 800c7e0:	4616      	mov	r6, r2
 800c7e2:	e7bd      	b.n	800c760 <_printf_i+0x128>
 800c7e4:	6833      	ldr	r3, [r6, #0]
 800c7e6:	6825      	ldr	r5, [r4, #0]
 800c7e8:	6961      	ldr	r1, [r4, #20]
 800c7ea:	1d18      	adds	r0, r3, #4
 800c7ec:	6030      	str	r0, [r6, #0]
 800c7ee:	062e      	lsls	r6, r5, #24
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	d501      	bpl.n	800c7f8 <_printf_i+0x1c0>
 800c7f4:	6019      	str	r1, [r3, #0]
 800c7f6:	e002      	b.n	800c7fe <_printf_i+0x1c6>
 800c7f8:	0668      	lsls	r0, r5, #25
 800c7fa:	d5fb      	bpl.n	800c7f4 <_printf_i+0x1bc>
 800c7fc:	8019      	strh	r1, [r3, #0]
 800c7fe:	2300      	movs	r3, #0
 800c800:	6123      	str	r3, [r4, #16]
 800c802:	4616      	mov	r6, r2
 800c804:	e7bc      	b.n	800c780 <_printf_i+0x148>
 800c806:	6833      	ldr	r3, [r6, #0]
 800c808:	1d1a      	adds	r2, r3, #4
 800c80a:	6032      	str	r2, [r6, #0]
 800c80c:	681e      	ldr	r6, [r3, #0]
 800c80e:	6862      	ldr	r2, [r4, #4]
 800c810:	2100      	movs	r1, #0
 800c812:	4630      	mov	r0, r6
 800c814:	f7f3 fce4 	bl	80001e0 <memchr>
 800c818:	b108      	cbz	r0, 800c81e <_printf_i+0x1e6>
 800c81a:	1b80      	subs	r0, r0, r6
 800c81c:	6060      	str	r0, [r4, #4]
 800c81e:	6863      	ldr	r3, [r4, #4]
 800c820:	6123      	str	r3, [r4, #16]
 800c822:	2300      	movs	r3, #0
 800c824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c828:	e7aa      	b.n	800c780 <_printf_i+0x148>
 800c82a:	6923      	ldr	r3, [r4, #16]
 800c82c:	4632      	mov	r2, r6
 800c82e:	4649      	mov	r1, r9
 800c830:	4640      	mov	r0, r8
 800c832:	47d0      	blx	sl
 800c834:	3001      	adds	r0, #1
 800c836:	d0ad      	beq.n	800c794 <_printf_i+0x15c>
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	079b      	lsls	r3, r3, #30
 800c83c:	d413      	bmi.n	800c866 <_printf_i+0x22e>
 800c83e:	68e0      	ldr	r0, [r4, #12]
 800c840:	9b03      	ldr	r3, [sp, #12]
 800c842:	4298      	cmp	r0, r3
 800c844:	bfb8      	it	lt
 800c846:	4618      	movlt	r0, r3
 800c848:	e7a6      	b.n	800c798 <_printf_i+0x160>
 800c84a:	2301      	movs	r3, #1
 800c84c:	4632      	mov	r2, r6
 800c84e:	4649      	mov	r1, r9
 800c850:	4640      	mov	r0, r8
 800c852:	47d0      	blx	sl
 800c854:	3001      	adds	r0, #1
 800c856:	d09d      	beq.n	800c794 <_printf_i+0x15c>
 800c858:	3501      	adds	r5, #1
 800c85a:	68e3      	ldr	r3, [r4, #12]
 800c85c:	9903      	ldr	r1, [sp, #12]
 800c85e:	1a5b      	subs	r3, r3, r1
 800c860:	42ab      	cmp	r3, r5
 800c862:	dcf2      	bgt.n	800c84a <_printf_i+0x212>
 800c864:	e7eb      	b.n	800c83e <_printf_i+0x206>
 800c866:	2500      	movs	r5, #0
 800c868:	f104 0619 	add.w	r6, r4, #25
 800c86c:	e7f5      	b.n	800c85a <_printf_i+0x222>
 800c86e:	bf00      	nop
 800c870:	0800cfa9 	.word	0x0800cfa9
 800c874:	0800cfba 	.word	0x0800cfba

0800c878 <__sflush_r>:
 800c878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	0716      	lsls	r6, r2, #28
 800c882:	4605      	mov	r5, r0
 800c884:	460c      	mov	r4, r1
 800c886:	d454      	bmi.n	800c932 <__sflush_r+0xba>
 800c888:	684b      	ldr	r3, [r1, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	dc02      	bgt.n	800c894 <__sflush_r+0x1c>
 800c88e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c890:	2b00      	cmp	r3, #0
 800c892:	dd48      	ble.n	800c926 <__sflush_r+0xae>
 800c894:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c896:	2e00      	cmp	r6, #0
 800c898:	d045      	beq.n	800c926 <__sflush_r+0xae>
 800c89a:	2300      	movs	r3, #0
 800c89c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8a0:	682f      	ldr	r7, [r5, #0]
 800c8a2:	6a21      	ldr	r1, [r4, #32]
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	d030      	beq.n	800c90a <__sflush_r+0x92>
 800c8a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	0759      	lsls	r1, r3, #29
 800c8ae:	d505      	bpl.n	800c8bc <__sflush_r+0x44>
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	1ad2      	subs	r2, r2, r3
 800c8b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8b6:	b10b      	cbz	r3, 800c8bc <__sflush_r+0x44>
 800c8b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8ba:	1ad2      	subs	r2, r2, r3
 800c8bc:	2300      	movs	r3, #0
 800c8be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8c0:	6a21      	ldr	r1, [r4, #32]
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	47b0      	blx	r6
 800c8c6:	1c43      	adds	r3, r0, #1
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	d106      	bne.n	800c8da <__sflush_r+0x62>
 800c8cc:	6829      	ldr	r1, [r5, #0]
 800c8ce:	291d      	cmp	r1, #29
 800c8d0:	d82b      	bhi.n	800c92a <__sflush_r+0xb2>
 800c8d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c97c <__sflush_r+0x104>)
 800c8d4:	410a      	asrs	r2, r1
 800c8d6:	07d6      	lsls	r6, r2, #31
 800c8d8:	d427      	bmi.n	800c92a <__sflush_r+0xb2>
 800c8da:	2200      	movs	r2, #0
 800c8dc:	6062      	str	r2, [r4, #4]
 800c8de:	04d9      	lsls	r1, r3, #19
 800c8e0:	6922      	ldr	r2, [r4, #16]
 800c8e2:	6022      	str	r2, [r4, #0]
 800c8e4:	d504      	bpl.n	800c8f0 <__sflush_r+0x78>
 800c8e6:	1c42      	adds	r2, r0, #1
 800c8e8:	d101      	bne.n	800c8ee <__sflush_r+0x76>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	b903      	cbnz	r3, 800c8f0 <__sflush_r+0x78>
 800c8ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f2:	602f      	str	r7, [r5, #0]
 800c8f4:	b1b9      	cbz	r1, 800c926 <__sflush_r+0xae>
 800c8f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8fa:	4299      	cmp	r1, r3
 800c8fc:	d002      	beq.n	800c904 <__sflush_r+0x8c>
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7ff fca0 	bl	800c244 <_free_r>
 800c904:	2300      	movs	r3, #0
 800c906:	6363      	str	r3, [r4, #52]	@ 0x34
 800c908:	e00d      	b.n	800c926 <__sflush_r+0xae>
 800c90a:	2301      	movs	r3, #1
 800c90c:	4628      	mov	r0, r5
 800c90e:	47b0      	blx	r6
 800c910:	4602      	mov	r2, r0
 800c912:	1c50      	adds	r0, r2, #1
 800c914:	d1c9      	bne.n	800c8aa <__sflush_r+0x32>
 800c916:	682b      	ldr	r3, [r5, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d0c6      	beq.n	800c8aa <__sflush_r+0x32>
 800c91c:	2b1d      	cmp	r3, #29
 800c91e:	d001      	beq.n	800c924 <__sflush_r+0xac>
 800c920:	2b16      	cmp	r3, #22
 800c922:	d11e      	bne.n	800c962 <__sflush_r+0xea>
 800c924:	602f      	str	r7, [r5, #0]
 800c926:	2000      	movs	r0, #0
 800c928:	e022      	b.n	800c970 <__sflush_r+0xf8>
 800c92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c92e:	b21b      	sxth	r3, r3
 800c930:	e01b      	b.n	800c96a <__sflush_r+0xf2>
 800c932:	690f      	ldr	r7, [r1, #16]
 800c934:	2f00      	cmp	r7, #0
 800c936:	d0f6      	beq.n	800c926 <__sflush_r+0xae>
 800c938:	0793      	lsls	r3, r2, #30
 800c93a:	680e      	ldr	r6, [r1, #0]
 800c93c:	bf08      	it	eq
 800c93e:	694b      	ldreq	r3, [r1, #20]
 800c940:	600f      	str	r7, [r1, #0]
 800c942:	bf18      	it	ne
 800c944:	2300      	movne	r3, #0
 800c946:	eba6 0807 	sub.w	r8, r6, r7
 800c94a:	608b      	str	r3, [r1, #8]
 800c94c:	f1b8 0f00 	cmp.w	r8, #0
 800c950:	dde9      	ble.n	800c926 <__sflush_r+0xae>
 800c952:	6a21      	ldr	r1, [r4, #32]
 800c954:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c956:	4643      	mov	r3, r8
 800c958:	463a      	mov	r2, r7
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b0      	blx	r6
 800c95e:	2800      	cmp	r0, #0
 800c960:	dc08      	bgt.n	800c974 <__sflush_r+0xfc>
 800c962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96a:	81a3      	strh	r3, [r4, #12]
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	4407      	add	r7, r0
 800c976:	eba8 0800 	sub.w	r8, r8, r0
 800c97a:	e7e7      	b.n	800c94c <__sflush_r+0xd4>
 800c97c:	dfbffffe 	.word	0xdfbffffe

0800c980 <_fflush_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	690b      	ldr	r3, [r1, #16]
 800c984:	4605      	mov	r5, r0
 800c986:	460c      	mov	r4, r1
 800c988:	b913      	cbnz	r3, 800c990 <_fflush_r+0x10>
 800c98a:	2500      	movs	r5, #0
 800c98c:	4628      	mov	r0, r5
 800c98e:	bd38      	pop	{r3, r4, r5, pc}
 800c990:	b118      	cbz	r0, 800c99a <_fflush_r+0x1a>
 800c992:	6a03      	ldr	r3, [r0, #32]
 800c994:	b90b      	cbnz	r3, 800c99a <_fflush_r+0x1a>
 800c996:	f7ff fb4b 	bl	800c030 <__sinit>
 800c99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0f3      	beq.n	800c98a <_fflush_r+0xa>
 800c9a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9a4:	07d0      	lsls	r0, r2, #31
 800c9a6:	d404      	bmi.n	800c9b2 <_fflush_r+0x32>
 800c9a8:	0599      	lsls	r1, r3, #22
 800c9aa:	d402      	bmi.n	800c9b2 <_fflush_r+0x32>
 800c9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ae:	f7ff fc38 	bl	800c222 <__retarget_lock_acquire_recursive>
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	f7ff ff5f 	bl	800c878 <__sflush_r>
 800c9ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9bc:	07da      	lsls	r2, r3, #31
 800c9be:	4605      	mov	r5, r0
 800c9c0:	d4e4      	bmi.n	800c98c <_fflush_r+0xc>
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	059b      	lsls	r3, r3, #22
 800c9c6:	d4e1      	bmi.n	800c98c <_fflush_r+0xc>
 800c9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ca:	f7ff fc2b 	bl	800c224 <__retarget_lock_release_recursive>
 800c9ce:	e7dd      	b.n	800c98c <_fflush_r+0xc>

0800c9d0 <__sread>:
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d8:	f000 f978 	bl	800cccc <_read_r>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	bfab      	itete	ge
 800c9e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9e4:	181b      	addge	r3, r3, r0
 800c9e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9ea:	bfac      	ite	ge
 800c9ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9ee:	81a3      	strhlt	r3, [r4, #12]
 800c9f0:	bd10      	pop	{r4, pc}

0800c9f2 <__swrite>:
 800c9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	461f      	mov	r7, r3
 800c9f8:	898b      	ldrh	r3, [r1, #12]
 800c9fa:	05db      	lsls	r3, r3, #23
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	4616      	mov	r6, r2
 800ca02:	d505      	bpl.n	800ca10 <__swrite+0x1e>
 800ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f000 f94c 	bl	800cca8 <_lseek_r>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	463b      	mov	r3, r7
 800ca20:	4628      	mov	r0, r5
 800ca22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca26:	f000 b963 	b.w	800ccf0 <_write_r>

0800ca2a <__sseek>:
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca32:	f000 f939 	bl	800cca8 <_lseek_r>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	bf15      	itete	ne
 800ca3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca46:	81a3      	strheq	r3, [r4, #12]
 800ca48:	bf18      	it	ne
 800ca4a:	81a3      	strhne	r3, [r4, #12]
 800ca4c:	bd10      	pop	{r4, pc}

0800ca4e <__sclose>:
 800ca4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca52:	f000 b8f7 	b.w	800cc44 <_close_r>

0800ca56 <__swbuf_r>:
 800ca56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca58:	460e      	mov	r6, r1
 800ca5a:	4614      	mov	r4, r2
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	b118      	cbz	r0, 800ca68 <__swbuf_r+0x12>
 800ca60:	6a03      	ldr	r3, [r0, #32]
 800ca62:	b90b      	cbnz	r3, 800ca68 <__swbuf_r+0x12>
 800ca64:	f7ff fae4 	bl	800c030 <__sinit>
 800ca68:	69a3      	ldr	r3, [r4, #24]
 800ca6a:	60a3      	str	r3, [r4, #8]
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	071a      	lsls	r2, r3, #28
 800ca70:	d501      	bpl.n	800ca76 <__swbuf_r+0x20>
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	b943      	cbnz	r3, 800ca88 <__swbuf_r+0x32>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 f82b 	bl	800cad4 <__swsetup_r>
 800ca7e:	b118      	cbz	r0, 800ca88 <__swbuf_r+0x32>
 800ca80:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ca84:	4638      	mov	r0, r7
 800ca86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	6922      	ldr	r2, [r4, #16]
 800ca8c:	1a98      	subs	r0, r3, r2
 800ca8e:	6963      	ldr	r3, [r4, #20]
 800ca90:	b2f6      	uxtb	r6, r6
 800ca92:	4283      	cmp	r3, r0
 800ca94:	4637      	mov	r7, r6
 800ca96:	dc05      	bgt.n	800caa4 <__swbuf_r+0x4e>
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f7ff ff70 	bl	800c980 <_fflush_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d1ed      	bne.n	800ca80 <__swbuf_r+0x2a>
 800caa4:	68a3      	ldr	r3, [r4, #8]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	60a3      	str	r3, [r4, #8]
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	701e      	strb	r6, [r3, #0]
 800cab2:	6962      	ldr	r2, [r4, #20]
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d004      	beq.n	800cac4 <__swbuf_r+0x6e>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	07db      	lsls	r3, r3, #31
 800cabe:	d5e1      	bpl.n	800ca84 <__swbuf_r+0x2e>
 800cac0:	2e0a      	cmp	r6, #10
 800cac2:	d1df      	bne.n	800ca84 <__swbuf_r+0x2e>
 800cac4:	4621      	mov	r1, r4
 800cac6:	4628      	mov	r0, r5
 800cac8:	f7ff ff5a 	bl	800c980 <_fflush_r>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d0d9      	beq.n	800ca84 <__swbuf_r+0x2e>
 800cad0:	e7d6      	b.n	800ca80 <__swbuf_r+0x2a>
	...

0800cad4 <__swsetup_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4b29      	ldr	r3, [pc, #164]	@ (800cb7c <__swsetup_r+0xa8>)
 800cad8:	4605      	mov	r5, r0
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	460c      	mov	r4, r1
 800cade:	b118      	cbz	r0, 800cae8 <__swsetup_r+0x14>
 800cae0:	6a03      	ldr	r3, [r0, #32]
 800cae2:	b90b      	cbnz	r3, 800cae8 <__swsetup_r+0x14>
 800cae4:	f7ff faa4 	bl	800c030 <__sinit>
 800cae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caec:	0719      	lsls	r1, r3, #28
 800caee:	d422      	bmi.n	800cb36 <__swsetup_r+0x62>
 800caf0:	06da      	lsls	r2, r3, #27
 800caf2:	d407      	bmi.n	800cb04 <__swsetup_r+0x30>
 800caf4:	2209      	movs	r2, #9
 800caf6:	602a      	str	r2, [r5, #0]
 800caf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cafc:	81a3      	strh	r3, [r4, #12]
 800cafe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb02:	e033      	b.n	800cb6c <__swsetup_r+0x98>
 800cb04:	0758      	lsls	r0, r3, #29
 800cb06:	d512      	bpl.n	800cb2e <__swsetup_r+0x5a>
 800cb08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb0a:	b141      	cbz	r1, 800cb1e <__swsetup_r+0x4a>
 800cb0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb10:	4299      	cmp	r1, r3
 800cb12:	d002      	beq.n	800cb1a <__swsetup_r+0x46>
 800cb14:	4628      	mov	r0, r5
 800cb16:	f7ff fb95 	bl	800c244 <_free_r>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb24:	81a3      	strh	r3, [r4, #12]
 800cb26:	2300      	movs	r3, #0
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f043 0308 	orr.w	r3, r3, #8
 800cb34:	81a3      	strh	r3, [r4, #12]
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	b94b      	cbnz	r3, 800cb4e <__swsetup_r+0x7a>
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb44:	d003      	beq.n	800cb4e <__swsetup_r+0x7a>
 800cb46:	4621      	mov	r1, r4
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f000 f83f 	bl	800cbcc <__smakebuf_r>
 800cb4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb52:	f013 0201 	ands.w	r2, r3, #1
 800cb56:	d00a      	beq.n	800cb6e <__swsetup_r+0x9a>
 800cb58:	2200      	movs	r2, #0
 800cb5a:	60a2      	str	r2, [r4, #8]
 800cb5c:	6962      	ldr	r2, [r4, #20]
 800cb5e:	4252      	negs	r2, r2
 800cb60:	61a2      	str	r2, [r4, #24]
 800cb62:	6922      	ldr	r2, [r4, #16]
 800cb64:	b942      	cbnz	r2, 800cb78 <__swsetup_r+0xa4>
 800cb66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb6a:	d1c5      	bne.n	800caf8 <__swsetup_r+0x24>
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}
 800cb6e:	0799      	lsls	r1, r3, #30
 800cb70:	bf58      	it	pl
 800cb72:	6962      	ldrpl	r2, [r4, #20]
 800cb74:	60a2      	str	r2, [r4, #8]
 800cb76:	e7f4      	b.n	800cb62 <__swsetup_r+0x8e>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	e7f7      	b.n	800cb6c <__swsetup_r+0x98>
 800cb7c:	20000568 	.word	0x20000568

0800cb80 <__swhatbuf_r>:
 800cb80:	b570      	push	{r4, r5, r6, lr}
 800cb82:	460c      	mov	r4, r1
 800cb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb88:	2900      	cmp	r1, #0
 800cb8a:	b096      	sub	sp, #88	@ 0x58
 800cb8c:	4615      	mov	r5, r2
 800cb8e:	461e      	mov	r6, r3
 800cb90:	da0d      	bge.n	800cbae <__swhatbuf_r+0x2e>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb98:	f04f 0100 	mov.w	r1, #0
 800cb9c:	bf14      	ite	ne
 800cb9e:	2340      	movne	r3, #64	@ 0x40
 800cba0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cba4:	2000      	movs	r0, #0
 800cba6:	6031      	str	r1, [r6, #0]
 800cba8:	602b      	str	r3, [r5, #0]
 800cbaa:	b016      	add	sp, #88	@ 0x58
 800cbac:	bd70      	pop	{r4, r5, r6, pc}
 800cbae:	466a      	mov	r2, sp
 800cbb0:	f000 f858 	bl	800cc64 <_fstat_r>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	dbec      	blt.n	800cb92 <__swhatbuf_r+0x12>
 800cbb8:	9901      	ldr	r1, [sp, #4]
 800cbba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbc2:	4259      	negs	r1, r3
 800cbc4:	4159      	adcs	r1, r3
 800cbc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbca:	e7eb      	b.n	800cba4 <__swhatbuf_r+0x24>

0800cbcc <__smakebuf_r>:
 800cbcc:	898b      	ldrh	r3, [r1, #12]
 800cbce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd0:	079d      	lsls	r5, r3, #30
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	d507      	bpl.n	800cbe8 <__smakebuf_r+0x1c>
 800cbd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	6123      	str	r3, [r4, #16]
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	6163      	str	r3, [r4, #20]
 800cbe4:	b003      	add	sp, #12
 800cbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe8:	ab01      	add	r3, sp, #4
 800cbea:	466a      	mov	r2, sp
 800cbec:	f7ff ffc8 	bl	800cb80 <__swhatbuf_r>
 800cbf0:	9f00      	ldr	r7, [sp, #0]
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff f902 	bl	800be00 <_malloc_r>
 800cbfc:	b948      	cbnz	r0, 800cc12 <__smakebuf_r+0x46>
 800cbfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc02:	059a      	lsls	r2, r3, #22
 800cc04:	d4ee      	bmi.n	800cbe4 <__smakebuf_r+0x18>
 800cc06:	f023 0303 	bic.w	r3, r3, #3
 800cc0a:	f043 0302 	orr.w	r3, r3, #2
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	e7e2      	b.n	800cbd8 <__smakebuf_r+0xc>
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	6020      	str	r0, [r4, #0]
 800cc16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	9b01      	ldr	r3, [sp, #4]
 800cc1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc22:	b15b      	cbz	r3, 800cc3c <__smakebuf_r+0x70>
 800cc24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f000 f82d 	bl	800cc88 <_isatty_r>
 800cc2e:	b128      	cbz	r0, 800cc3c <__smakebuf_r+0x70>
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	f023 0303 	bic.w	r3, r3, #3
 800cc36:	f043 0301 	orr.w	r3, r3, #1
 800cc3a:	81a3      	strh	r3, [r4, #12]
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	431d      	orrs	r5, r3
 800cc40:	81a5      	strh	r5, [r4, #12]
 800cc42:	e7cf      	b.n	800cbe4 <__smakebuf_r+0x18>

0800cc44 <_close_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d06      	ldr	r5, [pc, #24]	@ (800cc60 <_close_r+0x1c>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	f7f9 fced 	bl	800662e <_close>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_close_r+0x1a>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_close_r+0x1a>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	20000f14 	.word	0x20000f14

0800cc64 <_fstat_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	4d07      	ldr	r5, [pc, #28]	@ (800cc84 <_fstat_r+0x20>)
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	4608      	mov	r0, r1
 800cc6e:	4611      	mov	r1, r2
 800cc70:	602b      	str	r3, [r5, #0]
 800cc72:	f7f9 fce8 	bl	8006646 <_fstat>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	d102      	bne.n	800cc80 <_fstat_r+0x1c>
 800cc7a:	682b      	ldr	r3, [r5, #0]
 800cc7c:	b103      	cbz	r3, 800cc80 <_fstat_r+0x1c>
 800cc7e:	6023      	str	r3, [r4, #0]
 800cc80:	bd38      	pop	{r3, r4, r5, pc}
 800cc82:	bf00      	nop
 800cc84:	20000f14 	.word	0x20000f14

0800cc88 <_isatty_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d06      	ldr	r5, [pc, #24]	@ (800cca4 <_isatty_r+0x1c>)
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4604      	mov	r4, r0
 800cc90:	4608      	mov	r0, r1
 800cc92:	602b      	str	r3, [r5, #0]
 800cc94:	f7f9 fce7 	bl	8006666 <_isatty>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d102      	bne.n	800cca2 <_isatty_r+0x1a>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	b103      	cbz	r3, 800cca2 <_isatty_r+0x1a>
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	20000f14 	.word	0x20000f14

0800cca8 <_lseek_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	@ (800ccc8 <_lseek_r+0x20>)
 800ccac:	4604      	mov	r4, r0
 800ccae:	4608      	mov	r0, r1
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	602a      	str	r2, [r5, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f7f9 fce0 	bl	800667c <_lseek>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_lseek_r+0x1e>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_lseek_r+0x1e>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	20000f14 	.word	0x20000f14

0800cccc <_read_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d07      	ldr	r5, [pc, #28]	@ (800ccec <_read_r+0x20>)
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	4608      	mov	r0, r1
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	602a      	str	r2, [r5, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f7f9 fc6e 	bl	80065bc <_read>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <_read_r+0x1e>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	b103      	cbz	r3, 800ccea <_read_r+0x1e>
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	20000f14 	.word	0x20000f14

0800ccf0 <_write_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d07      	ldr	r5, [pc, #28]	@ (800cd10 <_write_r+0x20>)
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	4608      	mov	r0, r1
 800ccf8:	4611      	mov	r1, r2
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	602a      	str	r2, [r5, #0]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	f7f9 fc79 	bl	80065f6 <_write>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	d102      	bne.n	800cd0e <_write_r+0x1e>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	b103      	cbz	r3, 800cd0e <_write_r+0x1e>
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	20000f14 	.word	0x20000f14

0800cd14 <_init>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	bf00      	nop
 800cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1a:	bc08      	pop	{r3}
 800cd1c:	469e      	mov	lr, r3
 800cd1e:	4770      	bx	lr

0800cd20 <_fini>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	bf00      	nop
 800cd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd26:	bc08      	pop	{r3}
 800cd28:	469e      	mov	lr, r3
 800cd2a:	4770      	bx	lr
