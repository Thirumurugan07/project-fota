
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019ac  08011db8  08011db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013764  08013764  000155c0  2**0
                  CONTENTS
  4 .ARM          00000008  08013764  08013764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801376c  0801376c  000155c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801376c  0801376c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013770  08013770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005c0  20000000  08013774  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de4  200005c0  08013d34  000155c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  08013d34  000163a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000155c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bba  00000000  00000000  000155f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000601a  00000000  00000000  0003a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  000401c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016dd  00000000  00000000  00041fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d293  00000000  00000000  00043685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f80  00000000  00000000  00060918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f6c1  00000000  00000000  0008a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082d4  00000000  00000000  00129f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00132270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005c0 	.word	0x200005c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011da0 	.word	0x08011da0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c4 	.word	0x200005c4
 80001dc:	08011da0 	.word	0x08011da0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <int_to_str>:
  * @brief  Convert an Integer to a string
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void int_to_str(uint8_t* p_str, uint32_t intNum) {
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, divider = 1000000000,pos = 0, status = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <int_to_str+0x94>)
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]

	for (i = 0;i < 10;i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e02e      	b.n	80005fe <int_to_str+0x7e>
		p_str[pos++] = (intNum/divider) + 48;
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1c59      	adds	r1, r3, #1
 80005ae:	60f9      	str	r1, [r7, #12]
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	440b      	add	r3, r1
 80005b4:	3230      	adds	r2, #48	@ 0x30
 80005b6:	b2d2      	uxtb	r2, r2
 80005b8:	701a      	strb	r2, [r3, #0]
		intNum %= divider;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	fbb3 f2f2 	udiv	r2, r3, r2
 80005c2:	6939      	ldr	r1, [r7, #16]
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	603b      	str	r3, [r7, #0]
		divider /= 10;
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <int_to_str+0x98>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	08db      	lsrs	r3, r3, #3
 80005d6:	613b      	str	r3, [r7, #16]
		if ((p_str[pos-1] == '0') || (status == 0)) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3b01      	subs	r3, #1
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b30      	cmp	r3, #48	@ 0x30
 80005e4:	d002      	beq.n	80005ec <int_to_str+0x6c>
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <int_to_str+0x72>
			pos = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e002      	b.n	80005f8 <int_to_str+0x78>
		}
		else {
			status++;
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
	for (i = 0;i < 10;i++) {
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2b09      	cmp	r3, #9
 8000602:	d9cd      	bls.n	80005a0 <int_to_str+0x20>
		}
	}
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	371c      	adds	r7, #28
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	3b9aca00 	.word	0x3b9aca00
 8000618:	cccccccd 	.word	0xcccccccd

0800061c <str_to_int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */

uint32_t str_to_int(uint8_t *p_inputStr, uint32_t* p_intNum) {
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, res = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
	  uint32_t val = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]

	  if ((p_inputStr[0] == '0') && ((p_inputStr[1] == 'x') || (p_inputStr[1] == 'X')))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b30      	cmp	r3, #48	@ 0x30
 8000638:	f040 80d7 	bne.w	80007ea <str_to_int+0x1ce>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b78      	cmp	r3, #120	@ 0x78
 8000644:	d005      	beq.n	8000652 <str_to_int+0x36>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b58      	cmp	r3, #88	@ 0x58
 800064e:	f040 80cc 	bne.w	80007ea <str_to_int+0x1ce>
	  {
	    i = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000656:	e057      	b.n	8000708 <str_to_int+0xec>
	    {
	      if (IS_VALID_HEX(p_inputStr[i]))
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b40      	cmp	r3, #64	@ 0x40
 8000662:	d905      	bls.n	8000670 <str_to_int+0x54>
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b46      	cmp	r3, #70	@ 0x46
 800066e:	d917      	bls.n	80006a0 <str_to_int+0x84>
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b60      	cmp	r3, #96	@ 0x60
 800067a:	d905      	bls.n	8000688 <str_to_int+0x6c>
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b66      	cmp	r3, #102	@ 0x66
 8000686:	d90b      	bls.n	80006a0 <str_to_int+0x84>
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b2f      	cmp	r3, #47	@ 0x2f
 8000692:	d936      	bls.n	8000702 <str_to_int+0xe6>
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b39      	cmp	r3, #57	@ 0x39
 800069e:	d830      	bhi.n	8000702 <str_to_int+0xe6>
	      {
	        val = (val << 4) + CONVERTHEX(p_inputStr[i]);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	440a      	add	r2, r1
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	2a2f      	cmp	r2, #47	@ 0x2f
 80006ae:	d90b      	bls.n	80006c8 <str_to_int+0xac>
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	440a      	add	r2, r1
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	2a39      	cmp	r2, #57	@ 0x39
 80006ba:	d805      	bhi.n	80006c8 <str_to_int+0xac>
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	440a      	add	r2, r1
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	3a30      	subs	r2, #48	@ 0x30
 80006c6:	e016      	b.n	80006f6 <str_to_int+0xda>
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	440a      	add	r2, r1
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	2a40      	cmp	r2, #64	@ 0x40
 80006d2:	d90b      	bls.n	80006ec <str_to_int+0xd0>
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	440a      	add	r2, r1
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	2a46      	cmp	r2, #70	@ 0x46
 80006de:	d805      	bhi.n	80006ec <str_to_int+0xd0>
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	440a      	add	r2, r1
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	3a37      	subs	r2, #55	@ 0x37
 80006ea:	e004      	b.n	80006f6 <str_to_int+0xda>
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	440a      	add	r2, r1
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	3a57      	subs	r2, #87	@ 0x57
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
	      {
	        /* Return 0, Invalid input */
	        res = 0;
	        break;
	      }
	      i++;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e002      	b.n	8000708 <str_to_int+0xec>
	        res = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
	        break;
 8000706:	e008      	b.n	800071a <str_to_int+0xfe>
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b0a      	cmp	r3, #10
 800070c:	d805      	bhi.n	800071a <str_to_int+0xfe>
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d19e      	bne.n	8000658 <str_to_int+0x3c>
	    }

	    /* valid result */
	    if (p_inputStr[i] == '\0')
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d167      	bne.n	80007f6 <str_to_int+0x1da>
	    {
	      *p_intNum= val;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	601a      	str	r2, [r3, #0]
	      res = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
	    if (p_inputStr[i] == '\0')
 8000730:	e061      	b.n	80007f6 <str_to_int+0x1da>
	  }
	  else /* max 10-digit decimal input */
	  {
	    while ( ( i < 11 ) && ( res != 1 ) )
	    {
	      if (p_inputStr[i] == '\0')
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d105      	bne.n	800074a <str_to_int+0x12e>
	      {
	        *p_intNum = val;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	601a      	str	r2, [r3, #0]
	        /* return 1 */
	        res = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	e04c      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'k') || (p_inputStr[i] == 'K')) && (i > 0))
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b6b      	cmp	r3, #107	@ 0x6b
 8000754:	d005      	beq.n	8000762 <str_to_int+0x146>
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000760:	d10b      	bne.n	800077a <str_to_int+0x15e>
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <str_to_int+0x15e>
	      {
	        val = val << 10;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	029b      	lsls	r3, r3, #10
 800076c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	e034      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'm') || (p_inputStr[i] == 'M')) && (i > 0))
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b6d      	cmp	r3, #109	@ 0x6d
 8000784:	d005      	beq.n	8000792 <str_to_int+0x176>
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000790:	d10b      	bne.n	80007aa <str_to_int+0x18e>
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d008      	beq.n	80007aa <str_to_int+0x18e>
	      {
	        val = val << 20;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	051b      	lsls	r3, r3, #20
 800079c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
	        res = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	e01c      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else if (ISVALIDDEC(p_inputStr[i]))
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007b4:	d913      	bls.n	80007de <str_to_int+0x1c2>
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b39      	cmp	r3, #57	@ 0x39
 80007c0:	d80d      	bhi.n	80007de <str_to_int+0x1c2>
	      {
	        val = val * 10 + CONVERTDEC(p_inputStr[i]);
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	440b      	add	r3, r1
 80007d8:	3b30      	subs	r3, #48	@ 0x30
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e002      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else
	      {
	        /* return 0, Invalid input */
	        res = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
	        break;
 80007e2:	e008      	b.n	80007f6 <str_to_int+0x1da>
	      }
	      i++;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( res != 1 ) )
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2b0a      	cmp	r3, #10
 80007ee:	d802      	bhi.n	80007f6 <str_to_int+0x1da>
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d19d      	bne.n	8000732 <str_to_int+0x116>
	    }
	  }

	  return res;
 80007f6:	693b      	ldr	r3, [r7, #16]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <serial_put_string>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */

void serial_put_string(uint8_t* p_string) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	 uint16_t length = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	81fb      	strh	r3, [r7, #14]

	  while (p_string[length] != '\0')
 8000810:	e002      	b.n	8000818 <serial_put_string+0x14>
	  {
	    length++;
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	3301      	adds	r3, #1
 8000816:	81fb      	strh	r3, [r7, #14]
	  while (p_string[length] != '\0')
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f6      	bne.n	8000812 <serial_put_string+0xe>
	  }
	  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000824:	89fa      	ldrh	r2, [r7, #14]
 8000826:	2364      	movs	r3, #100	@ 0x64
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4803      	ldr	r0, [pc, #12]	@ (8000838 <serial_put_string+0x34>)
 800082c:	f00f f8b2 	bl	800f994 <HAL_UART_Transmit>
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000680 	.word	0x20000680

0800083c <serial_put_byte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */

HAL_StatusTypeDef serial_put_byte(uint8_t param) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	/* May be timeouted... */
	  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <serial_put_byte+0x34>)
 8000848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000850:	d103      	bne.n	800085a <serial_put_byte+0x1e>
	  {
	    UartHandle.gState = HAL_UART_STATE_READY;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <serial_put_byte+0x34>)
 8000854:	2220      	movs	r2, #32
 8000856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  }
	  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 800085a:	1df9      	adds	r1, r7, #7
 800085c:	2364      	movs	r3, #100	@ 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <serial_put_byte+0x34>)
 8000862:	f00f f897 	bl	800f994 <HAL_UART_Transmit>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000680 	.word	0x20000680

08000874 <get_sector>:
#include "ymodem/flash_if.h"



uint32_t get_sector(uint32_t Address)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if (Address < 0x08004000) return FLASH_SECTOR_0;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <get_sector+0x78>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d201      	bcs.n	8000888 <get_sector+0x14>
 8000884:	2300      	movs	r3, #0
 8000886:	e02a      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08008000) return FLASH_SECTOR_1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <get_sector+0x7c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d201      	bcs.n	8000894 <get_sector+0x20>
 8000890:	2301      	movs	r3, #1
 8000892:	e024      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x0800C000) return FLASH_SECTOR_2;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <get_sector+0x80>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d201      	bcs.n	80008a0 <get_sector+0x2c>
 800089c:	2302      	movs	r3, #2
 800089e:	e01e      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08010000) return FLASH_SECTOR_3;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <get_sector+0x84>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d801      	bhi.n	80008ac <get_sector+0x38>
 80008a8:	2303      	movs	r3, #3
 80008aa:	e018      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08020000) return FLASH_SECTOR_4;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <get_sector+0x88>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d801      	bhi.n	80008b8 <get_sector+0x44>
 80008b4:	2304      	movs	r3, #4
 80008b6:	e012      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08040000) return FLASH_SECTOR_5;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <get_sector+0x8c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d801      	bhi.n	80008c4 <get_sector+0x50>
 80008c0:	2305      	movs	r3, #5
 80008c2:	e00c      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08060000) return FLASH_SECTOR_6;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <get_sector+0x90>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d801      	bhi.n	80008d0 <get_sector+0x5c>
 80008cc:	2306      	movs	r3, #6
 80008ce:	e006      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08080000) return FLASH_SECTOR_7;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <get_sector+0x94>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d801      	bhi.n	80008dc <get_sector+0x68>
 80008d8:	2307      	movs	r3, #7
 80008da:	e000      	b.n	80008de <get_sector+0x6a>
  else return FLASH_SECTOR_7; // fallback
 80008dc:	2307      	movs	r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	08004000 	.word	0x08004000
 80008f0:	08008000 	.word	0x08008000
 80008f4:	0800c000 	.word	0x0800c000
 80008f8:	0800ffff 	.word	0x0800ffff
 80008fc:	0801ffff 	.word	0x0801ffff
 8000900:	0803ffff 	.word	0x0803ffff
 8000904:	0805ffff 	.word	0x0805ffff
 8000908:	0807ffff 	.word	0x0807ffff

0800090c <FLASH_IF_init>:
/**
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_IF_init(void) {
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
/* Unlocking hte program memroy*/
	 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <FLASH_IF_init+0x14>)
 8000912:	2293      	movs	r2, #147	@ 0x93
 8000914:	60da      	str	r2, [r3, #12]
	                         FLASH_FLAG_PGSERR);


}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40023c00 	.word	0x40023c00

08000924 <FLASH_IF_erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */

uint32_t FLASH_IF_erase(uint32_t StartSector) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	@ 0x58
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef desc;
	uint32_t result = FLASHIF_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t sectorError;
	uint32_t userStartSector;

	  /* Unlock the Flash to enable the flash control register access *************/

	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000930:	f00a fad4 	bl	800aedc <HAL_FLASH_Unlock>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <FLASH_IF_erase+0x20>
		serial_put_string((uint8_t*)"Erase failed at unlock itself 1");
 800093a:	481c      	ldr	r0, [pc, #112]	@ (80009ac <FLASH_IF_erase+0x88>)
 800093c:	f7ff ff62 	bl	8000804 <serial_put_string>
		result = FLASHIF_ERASEKO;
 8000940:	2301      	movs	r3, #1
 8000942:	657b      	str	r3, [r7, #84]	@ 0x54
	}
	FLASH_IF_init();
 8000944:	f7ff ffe2 	bl	800090c <FLASH_IF_init>


	desc.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000948:	2300      	movs	r3, #0
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40
	desc.Sector = get_sector(StartSector);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff91 	bl	8000874 <get_sector>
 8000952:	4603      	mov	r3, r0
 8000954:	64bb      	str	r3, [r7, #72]	@ 0x48
	desc.NbSectors = 3;
 8000956:	2303      	movs	r3, #3
 8000958:	64fb      	str	r3, [r7, #76]	@ 0x4c
	desc.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800095a:	2302      	movs	r3, #2
 800095c:	653b      	str	r3, [r7, #80]	@ 0x50

	if (StartSector < USER_FLASH_END_ADDRESS) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <FLASH_IF_erase+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d219      	bcs.n	800099a <FLASH_IF_erase+0x76>
		if (HAL_FLASHEx_Erase(&desc, &sectorError) != HAL_OK) {
 8000966:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800096a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f00a fc65 	bl	800b240 <HAL_FLASHEx_Erase>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d010      	beq.n	800099e <FLASH_IF_erase+0x7a>
			char msg[50];
			sprintf(msg, "Erase failed at sector: %lu\n", sectorError);
 800097c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <FLASH_IF_erase+0x90>)
 8000984:	4618      	mov	r0, r3
 8000986:	f010 f935 	bl	8010bf4 <siprintf>
			serial_put_string((uint8_t*)msg);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff38 	bl	8000804 <serial_put_string>
			result = FLASHIF_ERASEKO;
 8000994:	2301      	movs	r3, #1
 8000996:	657b      	str	r3, [r7, #84]	@ 0x54
 8000998:	e001      	b.n	800099e <FLASH_IF_erase+0x7a>
		}


	}
	else result = FLASHIF_ERASEKO;
 800099a:	2301      	movs	r3, #1
 800099c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_FLASH_Lock();
 800099e:	f00a fabf 	bl	800af20 <HAL_FLASH_Lock>
	return result;
 80009a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3758      	adds	r7, #88	@ 0x58
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08011db8 	.word	0x08011db8
 80009b0:	0807ffff 	.word	0x0807ffff
 80009b4:	08011dd8 	.word	0x08011dd8

080009b8 <FLASH_IF_disable_all_protection>:


void FLASH_IF_disable_all_protection(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80009be:	f00a fa8d 	bl	800aedc <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80009c2:	f00a fabd 	bl	800af40 <HAL_FLASH_OB_Unlock>

    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASHEx_OBGetConfig(&OBInit);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00a fd15 	bl	800b3f8 <HAL_FLASHEx_OBGetConfig>

    // Set RDP to Level 0 (no protection)
    OBInit.OptionType = OPTIONBYTE_RDP | OPTIONBYTE_WRP;
 80009ce:	2303      	movs	r3, #3
 80009d0:	607b      	str	r3, [r7, #4]
    OBInit.RDPLevel = OB_RDP_LEVEL_0;
 80009d2:	23aa      	movs	r3, #170	@ 0xaa
 80009d4:	617b      	str	r3, [r7, #20]
    OBInit.WRPSector = 0xFFF; // All sectors
 80009d6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80009da:	60fb      	str	r3, [r7, #12]
    OBInit.Banks = FLASH_BANK_1;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
    OBInit.WRPState = OB_WRPSTATE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]

    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00a fc98 	bl	800b31c <HAL_FLASHEx_OBProgram>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <FLASH_IF_disable_all_protection+0x40>
        serial_put_string("Option byte programming failed!");
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <FLASH_IF_disable_all_protection+0x5c>)
 80009f4:	f7ff ff06 	bl	8000804 <serial_put_string>
    }

    // Launch Option Bytes programming
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80009f8:	f00a face 	bl	800af98 <HAL_FLASH_OB_Launch>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <FLASH_IF_disable_all_protection+0x50>
    	serial_put_string((uint8_t*)"OB launch failed!");
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <FLASH_IF_disable_all_protection+0x60>)
 8000a04:	f7ff fefe 	bl	8000804 <serial_put_string>
    }

    HAL_FLASH_OB_Lock();
 8000a08:	f00a fab6 	bl	800af78 <HAL_FLASH_OB_Lock>
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08011df8 	.word	0x08011df8
 8000a18:	08011e18 	.word	0x08011e18

08000a1c <FLASH_IF_write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */

uint32_t FLASH_IF_write(uint32_t destination, uint32_t* p_source, uint32_t length) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	uint32_t status = FLASHIF_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8000a30:	f00a fa54 	bl	800aedc <HAL_FLASH_Unlock>

	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	e026      	b.n	8000a88 <FLASH_IF_write+0x6c>
	        /* Word programming (32-bit) */
	        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(p_source + i)) == HAL_OK) {
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4413      	add	r3, r2
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	462b      	mov	r3, r5
 8000a4e:	68f9      	ldr	r1, [r7, #12]
 8000a50:	2002      	movs	r0, #2
 8000a52:	f00a f9f1 	bl	800ae38 <HAL_FLASH_Program>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10f      	bne.n	8000a7c <FLASH_IF_write+0x60>
	            /* Check the written value */
	            if (*(uint32_t*)destination != *(p_source + i)) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	440b      	add	r3, r1
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d002      	beq.n	8000a74 <FLASH_IF_write+0x58>
	                status = FLASHIF_WRITINGCTRL_ERROR;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
	                break;
 8000a72:	e011      	b.n	8000a98 <FLASH_IF_write+0x7c>
	            }
	            destination += 4; // Move to next word
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3304      	adds	r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e002      	b.n	8000a82 <FLASH_IF_write+0x66>
	        } else {
	            status = FLASHIF_WRITING_ERROR;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	617b      	str	r3, [r7, #20]
	            break;
 8000a80:	e00a      	b.n	8000a98 <FLASH_IF_write+0x7c>
	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	3301      	adds	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d203      	bcs.n	8000a98 <FLASH_IF_write+0x7c>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <FLASH_IF_write+0x8c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d9d0      	bls.n	8000a3a <FLASH_IF_write+0x1e>
	        }
	    }
	HAL_FLASH_Lock();
 8000a98:	f00a fa42 	bl	800af20 <HAL_FLASH_Lock>

	return status;
 8000a9c:	697b      	ldr	r3, [r7, #20]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	0807fffb 	.word	0x0807fffb

08000aac <FLASH_IF_get_write_protection_status>:
  * @param  None
  * @retval If a sector in application area is write-protected returned value is a combination
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_IF_get_write_protection_status(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef config;
	uint32_t protected = FLASHIF_PROTECTION_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
	 /* Get the current configuration */
	HAL_FLASHEx_OBGetConfig(&config);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00a fc9d 	bl	800b3f8 <HAL_FLASHEx_OBGetConfig>

	 /* Get pages already write protected ****************************************/
	 /* Check if write protection is enabled for any sectors */
	if ((config.WRPState == OB_WRPSTATE_ENABLE) && (config.WRPSector & FLASH_SECTOR_TO_BE_PROTECTED)) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d106      	bne.n	8000ad2 <FLASH_IF_get_write_protection_status+0x26>
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <FLASH_IF_get_write_protection_status+0x26>
		protected = FLASHIF_PROTECTION_WRPENABLED;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
	}
	return protected;
 8000ad2:	69fb      	ldr	r3, [r7, #28]

}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <FLASH_IF_write_protection_config>:
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */

uint32_t FLASH_IF_write_protection_config(uint32_t protectionState)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    FLASH_OBProgramInitTypeDef config;
    HAL_StatusTypeDef status;

    // Unlock the Flash to enable the flash control register access
    if (HAL_FLASH_Unlock() != HAL_OK) {
 8000ae4:	f00a f9fa 	bl	800aedc <HAL_FLASH_Unlock>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <FLASH_IF_write_protection_config+0x1c>
        serial_put_string((uint8_t *)"Error: Failed to unlock Flash control register\r\n");
 8000aee:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <FLASH_IF_write_protection_config+0xb0>)
 8000af0:	f7ff fe88 	bl	8000804 <serial_put_string>
        return FLASHIF_PROTECTION_ERROR;
 8000af4:	2304      	movs	r3, #4
 8000af6:	e045      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    // Unlock the Option Bytes
    if (HAL_FLASH_OB_Unlock() != HAL_OK) {
 8000af8:	f00a fa22 	bl	800af40 <HAL_FLASH_OB_Unlock>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <FLASH_IF_write_protection_config+0x34>
        serial_put_string((uint8_t *)"Error: Failed to unlock Option Bytes\r\n");
 8000b02:	4823      	ldr	r0, [pc, #140]	@ (8000b90 <FLASH_IF_write_protection_config+0xb4>)
 8000b04:	f7ff fe7e 	bl	8000804 <serial_put_string>
        HAL_FLASH_Lock(); // Lock flash back before returning
 8000b08:	f00a fa0a 	bl	800af20 <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	e039      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    // Prepare Option Bytes configuration
    config.OptionType = OPTIONBYTE_WRP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
    config.Banks = FLASH_BANK_1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
    config.WRPSector = FLASH_SECTOR_TO_BE_PROTECTED;
 8000b18:	23e0      	movs	r3, #224	@ 0xe0
 8000b1a:	613b      	str	r3, [r7, #16]

    if (protectionState == FLASHIF_WRP_ENABLE) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <FLASH_IF_write_protection_config+0x4c>
        config.WRPState = OB_WRPSTATE_ENABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e001      	b.n	8000b2c <FLASH_IF_write_protection_config+0x50>
    } else {
        config.WRPState = OB_WRPSTATE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
    }

    // Program the Option Bytes
    status = HAL_FLASHEx_OBProgram(&config);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00a fbf3 	bl	800b31c <HAL_FLASHEx_OBProgram>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d008      	beq.n	8000b56 <FLASH_IF_write_protection_config+0x7a>
        serial_put_string((uint8_t *)"Error: Failed to program Option Bytes\r\n");
 8000b44:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <FLASH_IF_write_protection_config+0xb8>)
 8000b46:	f7ff fe5d 	bl	8000804 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b4a:	f00a fa15 	bl	800af78 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b4e:	f00a f9e7 	bl	800af20 <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b52:	2304      	movs	r3, #4
 8000b54:	e016      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    // Launch Option Bytes loading (causes a system reset)
    status = HAL_FLASH_OB_Launch();
 8000b56:	f00a fa1f 	bl	800af98 <HAL_FLASH_OB_Launch>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d008      	beq.n	8000b7a <FLASH_IF_write_protection_config+0x9e>
        serial_put_string((uint8_t *)"Error: Failed to launch Option Bytes reload\r\n");
 8000b68:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <FLASH_IF_write_protection_config+0xbc>)
 8000b6a:	f7ff fe4b 	bl	8000804 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b6e:	f00a fa03 	bl	800af78 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b72:	f00a f9d5 	bl	800af20 <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b76:	2304      	movs	r3, #4
 8000b78:	e004      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    HAL_FLASH_OB_Lock();
 8000b7a:	f00a f9fd 	bl	800af78 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000b7e:	f00a f9cf 	bl	800af20 <HAL_FLASH_Lock>

    return FLASHIF_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08011e2c 	.word	0x08011e2c
 8000b90:	08011e60 	.word	0x08011e60
 8000b94:	08011e88 	.word	0x08011e88
 8000b98:	08011eb0 	.word	0x08011eb0

08000b9c <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000ba4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000ba8:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d027      	beq.n	8000c04 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d818      	bhi.n	8000c02 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	22b1      	movs	r2, #177	@ 0xb1
 8000bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f8f5 	bl	8000dd8 <ifx_i2c_init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8000c00:	e000      	b.n	8000c04 <ifx_i2c_open+0x68>
                break;
 8000c02:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000c04:	89fb      	ldrh	r3, [r7, #14]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b088      	sub	sp, #32
 8000c12:	af02      	add	r7, sp, #8
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c1e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c22:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d122      	bne.n	8000c74 <ifx_i2c_transceive+0x66>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d01d      	beq.n	8000c74 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6a3a      	ldr	r2, [r7, #32]
 8000c44:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f001 fb5c 	bl	8002310 <ifx_i2c_prl_transceive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d108      	bne.n	8000c74 <ifx_i2c_transceive+0x66>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2203      	movs	r2, #3
 8000c70:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000c74:	8afb      	ldrh	r3, [r7, #22]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c88:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c8c:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d02a      	beq.n	8000cee <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000ca2:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000cae:	4912      	ldr	r1, [pc, #72]	@ (8000cf8 <ifx_i2c_close+0x78>)
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f001 faeb 	bl	800228c <ifx_i2c_prl_close>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000cc0:	d115      	bne.n	8000cee <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 fc16 	bl	80074fa <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fbb1 	bl	800743c <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 fbab 	bl	800743c <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2204      	movs	r2, #4
 8000cea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 8000cee:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08000d65 	.word	0x08000d65

08000cfc <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	461a      	mov	r2, r3
 8000d08:	460b      	mov	r3, r1
 8000d0a:	817b      	strh	r3, [r7, #10]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000d26:	8979      	ldrh	r1, [r7, #10]
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	897a      	ldrh	r2, [r7, #10]
 8000d30:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2204      	movs	r2, #4
 8000d38:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000d46:	897b      	ldrh	r3, [r7, #10]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d106      	bne.n	8000d5a <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000d54:	e001      	b.n	8000d5a <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8000d56:	bf00      	nop
 8000d58:	e000      	b.n	8000d5c <ifx_i2c_tl_event_handler+0x60>
            break;
 8000d5a:	bf00      	nop
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	817b      	strh	r3, [r7, #10]
 8000d74:	4613      	mov	r3, r2
 8000d76:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d112      	bne.n	8000db0 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 fbb2 	bl	80074fa <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fb4d 	bl	800743c <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fb47 	bl	800743c <pal_gpio_set_low>
            break;
 8000dae:	e000      	b.n	8000db2 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000db0:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d008      	beq.n	8000dce <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4798      	blx	r3
    }
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8000de0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000de4:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d004      	beq.n	8000dfa <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d156      	bne.n	8000ea8 <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000e00:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e02:	d048      	beq.n	8000e96 <ifx_i2c_init+0xbe>
 8000e04:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e06:	dc4d      	bgt.n	8000ea4 <ifx_i2c_init+0xcc>
 8000e08:	2bb1      	cmp	r3, #177	@ 0xb1
 8000e0a:	d002      	beq.n	8000e12 <ifx_i2c_init+0x3a>
 8000e0c:	2bb2      	cmp	r3, #178	@ 0xb2
 8000e0e:	d021      	beq.n	8000e54 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 8000e10:	e048      	b.n	8000ea4 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d105      	bne.n	8000e28 <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e22:	4618      	mov	r0, r3
 8000e24:	f006 fb0a 	bl	800743c <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 fb04 	bl	800743c <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	22b2      	movs	r2, #178	@ 0xb2
 8000e38:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4923      	ldr	r1, [pc, #140]	@ (8000ed8 <ifx_i2c_init+0x100>)
 8000e4a:	f006 fd49 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81fb      	strh	r3, [r7, #14]
                break;
 8000e52:	e028      	b.n	8000ea6 <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fad9 	bl	800741c <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fad3 	bl	800741c <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	22b3      	movs	r2, #179	@ 0xb3
 8000e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e84:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4913      	ldr	r1, [pc, #76]	@ (8000ed8 <ifx_i2c_init+0x100>)
 8000e8c:	f006 fd28 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e90:	2300      	movs	r3, #0
 8000e92:	81fb      	strh	r3, [r7, #14]
                break;
 8000e94:	e007      	b.n	8000ea6 <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000e96:	4911      	ldr	r1, [pc, #68]	@ (8000edc <ifx_i2c_init+0x104>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f001 f9af 	bl	80021fc <ifx_i2c_prl_init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	81fb      	strh	r3, [r7, #14]
                break;
 8000ea2:	e000      	b.n	8000ea6 <ifx_i2c_init+0xce>
                break;
 8000ea4:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8000ea6:	e009      	b.n	8000ebc <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000eb0:	490a      	ldr	r1, [pc, #40]	@ (8000edc <ifx_i2c_init+0x104>)
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 f9a2 	bl	80021fc <ifx_i2c_prl_init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000ec2:	89f9      	ldrh	r1, [r7, #14]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff17 	bl	8000cfc <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	08000dd9 	.word	0x08000dd9
 8000edc:	08000cfd 	.word	0x08000cfd

08000ee0 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000ef2:	4919      	ldr	r1, [pc, #100]	@ (8000f58 <ifx_i2c_dl_init+0x78>)
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fc93 	bl	8001820 <ifx_i2c_pl_init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000f00:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000f04:	e024      	b.n	8000f50 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08001361 	.word	0x08001361

08000f5c <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <ifx_i2c_dl_send_frame+0x1c>
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000f78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000f7c:	e01a      	b.n	8000fb4 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000fa6:	8879      	ldrh	r1, [r7, #2]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2200      	movs	r2, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f88b 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
 8000fb2:	4603      	mov	r3, r0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d002      	beq.n	8000fd4 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000fce:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000fd2:	e019      	b.n	8001008 <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000fec:	f006 fd2d 	bl	8007a4a <pal_os_timer_get_time_in_milliseconds>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <ifx_i2c_dl_receive_frame+0x54>)
 8000ffc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fc86 	bl	8001912 <ifx_i2c_pl_receive_frame>
 8001006:	4603      	mov	r3, r0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0002bf20 	.word	0x0002bf20

08001014 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4613      	mov	r3, r2
 8001022:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	b29a      	uxth	r2, r3
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4053      	eors	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	b29a      	uxth	r2, r3
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	4053      	eors	r3, r2
 8001044:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8001046:	897b      	ldrh	r3, [r7, #10]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800104c:	897b      	ldrh	r3, [r7, #10]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	4053      	eors	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	b29a      	uxth	r2, r3
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	4053      	eors	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	b29a      	uxth	r2, r3
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	4053      	eors	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	4053      	eors	r3, r2
 8001074:	b29b      	uxth	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	81fb      	strh	r3, [r7, #14]
 8001096:	e00d      	b.n	80010b4 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffb5 	bl	8001014 <ifx_i2c_dl_calc_crc_byte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	3301      	adds	r3, #1
 80010b2:	81fb      	strh	r3, [r7, #14]
 80010b4:	89fa      	ldrh	r2, [r7, #14]
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3ed      	bcc.n	8001098 <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 80010bc:	89bb      	ldrh	r3, [r7, #12]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	460b      	mov	r3, r1
 80010dc:	707b      	strb	r3, [r7, #1]
 80010de:	4613      	mov	r3, r2
 80010e0:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80010e8:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 80010ea:	787b      	ldrb	r3, [r7, #1]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80010f6:	3301      	adds	r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8001106:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d105      	bne.n	800111a <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001118:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 800111a:	787b      	ldrb	r3, [r7, #1]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <ifx_i2c_dl_send_frame_internal+0x6a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001126:	2b09      	cmp	r3, #9
 8001128:	d103      	bne.n	8001132 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001130:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8001132:	8afb      	ldrh	r3, [r7, #22]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	015b      	lsls	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d027      	beq.n	80011a2 <ifx_i2c_dl_send_frame_internal+0xda>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8001152:	783b      	ldrb	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <ifx_i2c_dl_send_frame_internal+0x9a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001168:	3301      	adds	r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
 8001196:	4a31      	ldr	r2, [pc, #196]	@ (800125c <ifx_i2c_dl_send_frame_internal+0x194>)
 8001198:	4931      	ldr	r1, [pc, #196]	@ (8001260 <ifx_i2c_dl_send_frame_internal+0x198>)
 800119a:	4832      	ldr	r0, [pc, #200]	@ (8001264 <ifx_i2c_dl_send_frame_internal+0x19c>)
 800119c:	f005 fe0a 	bl	8006db4 <optiga_lib_print_message>
 80011a0:	e006      	b.n	80011b0 <ifx_i2c_dl_send_frame_internal+0xe8>
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	3302      	adds	r3, #2
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	3303      	adds	r3, #3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	6938      	ldr	r0, [r7, #16]
 80011d2:	f7ff ff56 	bl	8001082 <ifx_i2c_dl_calc_crc>
 80011d6:	4603      	mov	r3, r0
 80011d8:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29a      	uxth	r2, r3
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	3303      	adds	r3, #3
 80011e4:	4619      	mov	r1, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	440b      	add	r3, r1
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	3304      	adds	r3, #4
 80011f2:	461a      	mov	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01e      	beq.n	8001242 <ifx_i2c_dl_send_frame_internal+0x17a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	2b01      	cmp	r3, #1
 8001210:	d006      	beq.n	8001220 <ifx_i2c_dl_send_frame_internal+0x158>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b03      	cmp	r3, #3
 800121e:	d108      	bne.n	8001232 <ifx_i2c_dl_send_frame_internal+0x16a>
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	3305      	adds	r3, #5
 8001224:	b29b      	uxth	r3, r3
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <ifx_i2c_dl_send_frame_internal+0x1a0>)
 8001228:	4619      	mov	r1, r3
 800122a:	6938      	ldr	r0, [r7, #16]
 800122c:	f005 fe24 	bl	8006e78 <optiga_lib_print_array_hex_format>
 8001230:	e007      	b.n	8001242 <ifx_i2c_dl_send_frame_internal+0x17a>
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	3305      	adds	r3, #5
 8001236:	b29b      	uxth	r3, r3
 8001238:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <ifx_i2c_dl_send_frame_internal+0x1a4>)
 800123a:	4619      	mov	r1, r3
 800123c:	6938      	ldr	r0, [r7, #16]
 800123e:	f005 fe1b 	bl	8006e78 <optiga_lib_print_array_hex_format>
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	3305      	adds	r3, #5
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	6939      	ldr	r1, [r7, #16]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb37 	bl	80018c0 <ifx_i2c_pl_send_frame>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08011ee0 	.word	0x08011ee0
 8001260:	08011ee8 	.word	0x08011ee8
 8001264:	08011f00 	.word	0x08011f00
 8001268:	08011f08 	.word	0x08011f08
 800126c:	08011f10 	.word	0x08011f10

08001270 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2203      	movs	r2, #3
 8001284:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2205      	movs	r2, #5
 8001294:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8001298:	2300      	movs	r3, #0
 800129a:	2202      	movs	r2, #2
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff12 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
 80012a4:	4603      	mov	r3, r0
 80012a6:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 80012c0:	f006 fbc3 	bl	8007a4a <pal_os_timer_get_time_in_milliseconds>
 80012c4:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d205      	bcs.n	80012ea <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <ifx_i2c_dl_resend_frame+0xa8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d82c      	bhi.n	800134c <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d109      	bne.n	8001310 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffb3 	bl	8001270 <ifx_i2c_dl_resync>
 800130a:	4603      	mov	r3, r0
 800130c:	82fb      	strh	r3, [r7, #22]
 800130e:	e015      	b.n	800133c <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001316:	3301      	adds	r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	2301      	movs	r3, #1
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fec8 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
 8001338:	4603      	mov	r3, r0
 800133a:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2206      	movs	r2, #6
 8001346:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 800134a:	e003      	b.n	8001354 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2208      	movs	r2, #8
 8001350:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0002bf1f 	.word	0x0002bf1f

08001360 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	460b      	mov	r3, r1
 800136e:	817b      	strh	r3, [r7, #10]
 8001370:	4613      	mov	r3, r2
 8001372:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8001388:	2301      	movs	r3, #1
 800138a:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800139e:	d108      	bne.n	80013b2 <ifx_i2c_pl_event_handler+0x52>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d003      	beq.n	80013b2 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2208      	movs	r2, #8
 80013ae:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80013b8:	3b01      	subs	r3, #1
 80013ba:	2b0a      	cmp	r3, #10
 80013bc:	f200 820d 	bhi.w	80017da <ifx_i2c_pl_event_handler+0x47a>
 80013c0:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <ifx_i2c_pl_event_handler+0x68>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	0800141b 	.word	0x0800141b
 80013d0:	0800145d 	.word	0x0800145d
 80013d4:	080016ef 	.word	0x080016ef
 80013d8:	08001771 	.word	0x08001771
 80013dc:	08001757 	.word	0x08001757
 80013e0:	080017db 	.word	0x080017db
 80013e4:	08001789 	.word	0x08001789
 80013e8:	080016db 	.word	0x080016db
 80013ec:	08001509 	.word	0x08001509
 80013f0:	08001619 	.word	0x08001619
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 80013f4:	897b      	ldrh	r3, [r7, #10]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <ifx_i2c_pl_event_handler+0x9e>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <ifx_i2c_pl_event_handler+0xa0>
 80013fe:	2302      	movs	r3, #2
 8001400:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8001402:	2300      	movs	r3, #0
 8001404:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800140c:	7cfb      	ldrb	r3, [r7, #19]
 800140e:	b299      	uxth	r1, r3
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	47a0      	blx	r4
            }
            break;
 8001418:	e1ef      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001420:	d104      	bne.n	800142c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800142a:	e1e6      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800142c:	f006 fb0d 	bl	8007a4a <pal_os_timer_get_time_in_milliseconds>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2203      	movs	r2, #3
 800143c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 fa66 	bl	8001912 <ifx_i2c_pl_receive_frame>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2206      	movs	r2, #6
 8001450:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8001454:	e1d1      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                    continue_state_machine = FALSE;
 8001456:	2300      	movs	r3, #0
 8001458:	773b      	strb	r3, [r7, #28]
            break;
 800145a:	e1ce      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 800145c:	897b      	ldrh	r3, [r7, #10]
 800145e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001462:	d104      	bne.n	800146e <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800146c:	e1c5      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 800146e:	893b      	ldrh	r3, [r7, #8]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d804      	bhi.n	800147e <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2206      	movs	r2, #6
 8001478:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800147c:	e1bd      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8001484:	7d7b      	ldrb	r3, [r7, #21]
 8001486:	09db      	lsrs	r3, r3, #7
 8001488:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 800148a:	7d7b      	ldrb	r3, [r7, #21]
 800148c:	115b      	asrs	r3, r3, #5
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8001496:	7d7b      	ldrb	r3, [r7, #21]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 800149e:	7d7b      	ldrb	r3, [r7, #21]
 80014a0:	109b      	asrs	r3, r3, #2
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3302      	adds	r3, #2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 80014c2:	893b      	ldrh	r3, [r7, #8]
 80014c4:	3b02      	subs	r3, #2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	893b      	ldrh	r3, [r7, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	440b      	add	r3, r1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 80014e2:	893b      	ldrh	r3, [r7, #8]
 80014e4:	3b02      	subs	r3, #2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fdc9 	bl	8001082 <ifx_i2c_dl_calc_crc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 80014f4:	7d3b      	ldrb	r3, [r7, #20]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <ifx_i2c_pl_event_handler+0x19e>
 80014fa:	220b      	movs	r2, #11
 80014fc:	e000      	b.n	8001500 <ifx_i2c_pl_event_handler+0x1a0>
 80014fe:	220a      	movs	r2, #10
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8001506:	e178      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001508:	8b3a      	ldrh	r2, [r7, #24]
 800150a:	8afb      	ldrh	r3, [r7, #22]
 800150c:	429a      	cmp	r2, r3
 800150e:	d10d      	bne.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
 8001510:	8b7b      	ldrh	r3, [r7, #26]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001516:	893a      	ldrh	r2, [r7, #8]
 8001518:	8b7b      	ldrh	r3, [r7, #26]
 800151a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d105      	bne.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001520:	7f7b      	ldrb	r3, [r7, #29]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d002      	beq.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
 8001526:	7f7b      	ldrb	r3, [r7, #29]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d104      	bne.n	8001536 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2206      	movs	r2, #6
 8001530:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001534:	e161      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8001536:	7ffa      	ldrb	r2, [r7, #31]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800153e:	3301      	adds	r3, #1
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	429a      	cmp	r2, r3
 8001546:	d00c      	beq.n	8001562 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2209      	movs	r2, #9
 800154c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8001550:	2300      	movs	r3, #0
 8001552:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff fdb4 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
                    break;
 8001560:	e14b      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001568:	7fba      	ldrb	r2, [r7, #30]
 800156a:	429a      	cmp	r2, r3
 800156c:	d004      	beq.n	8001578 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2209      	movs	r2, #9
 8001572:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001576:	e140      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001578:	7f7b      	ldrb	r3, [r7, #29]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d104      	bne.n	8001588 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2205      	movs	r2, #5
 8001582:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001586:	e138      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800158e:	3301      	adds	r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80015a4:	893a      	ldrh	r2, [r7, #8]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00f fcda 	bl	8010f62 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	893a      	ldrh	r2, [r7, #8]
 80015b2:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2204      	movs	r2, #4
 80015c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
 80015ca:	4a90      	ldr	r2, [pc, #576]	@ (800180c <ifx_i2c_pl_event_handler+0x4ac>)
 80015cc:	4990      	ldr	r1, [pc, #576]	@ (8001810 <ifx_i2c_pl_event_handler+0x4b0>)
 80015ce:	4891      	ldr	r0, [pc, #580]	@ (8001814 <ifx_i2c_pl_event_handler+0x4b4>)
 80015d0:	f005 fbf0 	bl	8006db4 <optiga_lib_print_message>
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d006      	beq.n	80015f0 <ifx_i2c_pl_event_handler+0x290>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d106      	bne.n	80015fe <ifx_i2c_pl_event_handler+0x29e>
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	4a89      	ldr	r2, [pc, #548]	@ (8001818 <ifx_i2c_pl_event_handler+0x4b8>)
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f005 fc3e 	bl	8006e78 <optiga_lib_print_array_hex_format>
 80015fc:	e005      	b.n	800160a <ifx_i2c_pl_event_handler+0x2aa>
 80015fe:	893b      	ldrh	r3, [r7, #8]
 8001600:	4a86      	ldr	r2, [pc, #536]	@ (800181c <ifx_i2c_pl_event_handler+0x4bc>)
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f005 fc37 	bl	8006e78 <optiga_lib_print_array_hex_format>
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fd59 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001616:	e0f0      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800161e:	461a      	mov	r2, r3
 8001620:	7f7b      	ldrb	r3, [r7, #29]
 8001622:	2b02      	cmp	r3, #2
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	429a      	cmp	r2, r3
 800162e:	d004      	beq.n	800163a <ifx_i2c_pl_event_handler+0x2da>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2209      	movs	r2, #9
 8001634:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001638:	e0df      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (crc_received != crc_calculated)
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	429a      	cmp	r2, r3
 8001640:	d004      	beq.n	800164c <ifx_i2c_pl_event_handler+0x2ec>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800164a:	e0d6      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800164c:	893b      	ldrh	r3, [r7, #8]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d802      	bhi.n	8001658 <ifx_i2c_pl_event_handler+0x2f8>
 8001652:	8b7b      	ldrh	r3, [r7, #26]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <ifx_i2c_pl_event_handler+0x302>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2209      	movs	r2, #9
 800165c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001660:	e0cb      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8001662:	7f7b      	ldrb	r3, [r7, #29]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d110      	bne.n	800168a <ifx_i2c_pl_event_handler+0x32a>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2209      	movs	r2, #9
 800166c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2203      	movs	r2, #3
 800167c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2203      	movs	r2, #3
 8001684:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 8001688:	e0b7      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d108      	bne.n	80016a2 <ifx_i2c_pl_event_handler+0x342>
 8001690:	7f7b      	ldrb	r3, [r7, #29]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d005      	beq.n	80016a2 <ifx_i2c_pl_event_handler+0x342>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800169c:	7fba      	ldrb	r2, [r7, #30]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d004      	beq.n	80016ac <ifx_i2c_pl_event_handler+0x34c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2209      	movs	r2, #9
 80016a6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016aa:	e0a6      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80016ac:	7f7b      	ldrb	r3, [r7, #29]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <ifx_i2c_pl_event_handler+0x35c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016ba:	e09e      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80016ce:	2300      	movs	r3, #0
 80016d0:	2200      	movs	r2, #0
 80016d2:	2102      	movs	r1, #2
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	47a0      	blx	r4
            }
            break;
 80016d8:	e08f      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f913 	bl	8001912 <ifx_i2c_pl_receive_frame>
            }
            break;
 80016ec:	e085      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80016f4:	d104      	bne.n	8001700 <ifx_i2c_pl_event_handler+0x3a0>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016fe:	e07c      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001708:	2300      	movs	r3, #0
 800170a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <ifx_i2c_pl_event_handler+0x3d6>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001722:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800172a:	3b05      	subs	r3, #5
 800172c:	b29b      	uxth	r3, r3
 800172e:	2104      	movs	r1, #4
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001734:	e061      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001742:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800174a:	3b05      	subs	r3, #5
 800174c:	b29b      	uxth	r3, r3
 800174e:	2106      	movs	r1, #6
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	47a0      	blx	r4
            break;
 8001754:	e051      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800175e:	2300      	movs	r3, #0
 8001760:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001762:	2300      	movs	r3, #0
 8001764:	2201      	movs	r2, #1
 8001766:	2100      	movs	r1, #0
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fcad 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800176e:	e044      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8001770:	2100      	movs	r1, #0
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fd9e 	bl	80012b4 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800177e:	2b08      	cmp	r3, #8
 8001780:	d03a      	beq.n	80017f8 <ifx_i2c_pl_event_handler+0x498>
                {
                    continue_state_machine = FALSE;
 8001782:	2300      	movs	r3, #0
 8001784:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 8001786:	e037      	b.n	80017f8 <ifx_i2c_pl_event_handler+0x498>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <ifx_i2c_pl_event_handler+0x43a>
                {
                    p_ctx->dl.error = 1;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10c      	bne.n	80017be <ifx_i2c_pl_event_handler+0x45e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80017b2:	2300      	movs	r3, #0
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	47a0      	blx	r4
 80017bc:	e00a      	b.n	80017d4 <ifx_i2c_pl_event_handler+0x474>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fd56 	bl	8001270 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2208      	movs	r2, #8
 80017c8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	773b      	strb	r3, [r7, #28]
            }
            break;
 80017d8:	e00f      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80017e8:	2300      	movs	r3, #0
 80017ea:	2200      	movs	r2, #0
 80017ec:	2101      	movs	r1, #1
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	47a0      	blx	r4
                continue_state_machine = FALSE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	773b      	strb	r3, [r7, #28]
                break;
 80017f6:	e000      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            break;
 80017f8:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 80017fa:	7f3b      	ldrb	r3, [r7, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f43f adcb 	beq.w	8001398 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3724      	adds	r7, #36	@ 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	08011ee0 	.word	0x08011ee0
 8001810:	08011ee8 	.word	0x08011ee8
 8001814:	08011f18 	.word	0x08011f18
 8001818:	08011f08 	.word	0x08011f08
 800181c:	08011f10 	.word	0x08011f10

08001820 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	22bb      	movs	r2, #187	@ 0xbb
 800183e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800184e:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001856:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <ifx_i2c_pl_init+0x9c>)
 8001858:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	22c8      	movs	r2, #200	@ 0xc8
 800185e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10b      	bne.n	8001884 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fe36 	bl	80074e4 <pal_i2c_init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800187e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001882:	e016      	b.n	80018b2 <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2299      	movs	r2, #153	@ 0x99
 8001892:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800189e:	e003      	b.n	80018a8 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fa84 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	080020a1 	.word	0x080020a1

080018c0 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	4613      	mov	r3, r2
 80018cc:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d007      	beq.n	80018e8 <ifx_i2c_pl_send_frame+0x28>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d002      	beq.n	80018e8 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80018e2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018e6:	e010      	b.n	800190a <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001900:	2100      	movs	r1, #0
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa58 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001920:	2b01      	cmp	r3, #1
 8001922:	d007      	beq.n	8001934 <ifx_i2c_pl_receive_frame+0x22>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800192a:	2b02      	cmp	r3, #2
 800192c:	d002      	beq.n	8001934 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800192e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001932:	e008      	b.n	8001946 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800193c:	2100      	movs	r1, #0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fa3a 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
 800195a:	4613      	mov	r3, r2
 800195c:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	883a      	ldrh	r2, [r7, #0]
 8001972:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	22c8      	movs	r2, #200	@ 0xc8
 8001982:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80019a0:	461a      	mov	r2, r3
 80019a2:	f005 fdb5 	bl	8007510 <pal_i2c_write>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	72fb      	strb	r3, [r7, #11]
 80019bc:	4613      	mov	r3, r2
 80019be:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	7afa      	ldrb	r2, [r7, #11]
 80019c4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80019ce:	3301      	adds	r3, #1
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00f fac4 	bl	8010f62 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80019da:	893b      	ldrh	r3, [r7, #8]
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2202      	movs	r2, #2
 80019ea:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	22c8      	movs	r2, #200	@ 0xc8
 80019f2:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001a10:	461a      	mov	r2, r3
 8001a12:	f005 fd7d 	bl	8007510 <pal_i2c_write>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001a26:	2204      	movs	r2, #4
 8001a28:	2182      	movs	r1, #130	@ 0x82
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff8f 	bl	800194e <ifx_i2c_pl_read_register>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fdd0 	bl	8007608 <pal_i2c_set_bitrate>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d019      	beq.n	8001ab0 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	b291      	uxth	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <ifx_i2c_pl_set_bit_rate+0x88>)
 8001a9e:	f005 ff1f 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	81fb      	strh	r3, [r7, #14]
 8001aa6:	e005      	b.n	8001ab4 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 8001aa8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001aac:	81fb      	strh	r3, [r7, #14]
 8001aae:	e001      	b.n	8001ab4 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 8001ab4:	89fb      	ldrh	r3, [r7, #14]

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	08001ac5 	.word	0x08001ac5

08001ac4 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b08b      	sub	sp, #44	@ 0x2c
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 8001acc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ad0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	733b      	strb	r3, [r7, #12]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8001b02:	2bbb      	cmp	r3, #187	@ 0xbb
 8001b04:	d031      	beq.n	8001b6a <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001b06:	2bbb      	cmp	r3, #187	@ 0xbb
 8001b08:	f300 8145 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b0c:	2baa      	cmp	r3, #170	@ 0xaa
 8001b0e:	f000 812d 	beq.w	8001d6c <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 8001b12:	2baa      	cmp	r3, #170	@ 0xaa
 8001b14:	f300 813f 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b18:	2b88      	cmp	r3, #136	@ 0x88
 8001b1a:	f000 8103 	beq.w	8001d24 <ifx_i2c_pl_negotiation_event_handler+0x260>
 8001b1e:	2b88      	cmp	r3, #136	@ 0x88
 8001b20:	f300 8139 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b24:	2b77      	cmp	r3, #119	@ 0x77
 8001b26:	f000 80c6 	beq.w	8001cb6 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001b2a:	2b77      	cmp	r3, #119	@ 0x77
 8001b2c:	f300 8133 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b30:	2b66      	cmp	r3, #102	@ 0x66
 8001b32:	f000 809d 	beq.w	8001c70 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001b36:	2b66      	cmp	r3, #102	@ 0x66
 8001b38:	f300 812d 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b3c:	2b55      	cmp	r3, #85	@ 0x55
 8001b3e:	f000 808d 	beq.w	8001c5c <ifx_i2c_pl_negotiation_event_handler+0x198>
 8001b42:	2b55      	cmp	r3, #85	@ 0x55
 8001b44:	f300 8127 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b48:	2b44      	cmp	r3, #68	@ 0x44
 8001b4a:	d040      	beq.n	8001bce <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001b4c:	2b44      	cmp	r3, #68	@ 0x44
 8001b4e:	f300 8122 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b52:	2b33      	cmp	r3, #51	@ 0x33
 8001b54:	d031      	beq.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001b56:	2b33      	cmp	r3, #51	@ 0x33
 8001b58:	f300 811d 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	f000 80cb 	beq.w	8001cf8 <ifx_i2c_pl_negotiation_event_handler+0x234>
 8001b62:	2b22      	cmp	r3, #34	@ 0x22
 8001b64:	f000 80d4 	beq.w	8001d10 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001b68:	e115      	b.n	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001b6a:	2164      	movs	r1, #100	@ 0x64
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff63 	bl	8001a38 <ifx_i2c_pl_set_bit_rate>
 8001b72:	4603      	mov	r3, r0
 8001b74:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001b76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2233      	movs	r2, #51	@ 0x33
 8001b80:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001b8a:	e106      	b.n	8001d9a <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001b8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b8e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001b92:	f040 8102 	bne.w	8001d9a <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	22aa      	movs	r2, #170	@ 0xaa
 8001b9a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001bac:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4980      	ldr	r1, [pc, #512]	@ (8001db4 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 8001bb4:	f005 fe94 	bl	80078e0 <pal_os_event_register_callback_oneshot>
            break;
 8001bb8:	e0ef      	b.n	8001d9a <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2244      	movs	r2, #68	@ 0x44
 8001bbe:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	2184      	movs	r1, #132	@ 0x84
 8001bc6:	69b8      	ldr	r0, [r7, #24]
 8001bc8:	f7ff fec1 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8001bcc:	e0e8      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001bf0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bf4:	d911      	bls.n	8001c1a <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001bf6:	8abb      	ldrh	r3, [r7, #20]
 8001bf8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bfc:	d80d      	bhi.n	8001c1a <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2255      	movs	r2, #85	@ 0x55
 8001c06:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2202      	movs	r2, #2
 8001c10:	2189      	movs	r1, #137	@ 0x89
 8001c12:	69b8      	ldr	r0, [r7, #24]
 8001c14:	f7ff fecb 	bl	80019ae <ifx_i2c_pl_write_register>
 8001c18:	e01f      	b.n	8001c5a <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001c20:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001c24:	d811      	bhi.n	8001c4a <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001c26:	8abb      	ldrh	r3, [r7, #20]
 8001c28:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001c2c:	d90d      	bls.n	8001c4a <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2255      	movs	r2, #85	@ 0x55
 8001c36:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	2202      	movs	r2, #2
 8001c40:	2189      	movs	r1, #137	@ 0x89
 8001c42:	69b8      	ldr	r0, [r7, #24]
 8001c44:	f7ff feb3 	bl	80019ae <ifx_i2c_pl_write_register>
 8001c48:	e007      	b.n	8001c5a <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2266      	movs	r2, #102	@ 0x66
 8001c4e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001c58:	e0a2      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001c5a:	e0a1      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2266      	movs	r2, #102	@ 0x66
 8001c60:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001c64:	2204      	movs	r2, #4
 8001c66:	2184      	movs	r1, #132	@ 0x84
 8001c68:	69b8      	ldr	r0, [r7, #24]
 8001c6a:	f7ff fe70 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8001c6e:	e097      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001c8e:	8aba      	ldrh	r2, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d208      	bcs.n	8001ca6 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	22aa      	movs	r2, #170	@ 0xaa
 8001ca0:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001ca4:	e003      	b.n	8001cae <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2277      	movs	r2, #119	@ 0x77
 8001caa:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001cb4:	e074      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff feba 	bl	8001a38 <ifx_i2c_pl_set_bit_rate>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001cc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2211      	movs	r2, #17
 8001cd2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001cdc:	e05f      	b.n	8001d9e <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ce0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ce4:	d15b      	bne.n	8001d9e <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	22aa      	movs	r2, #170	@ 0xaa
 8001cea:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001cf6:	e052      	b.n	8001d9e <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2222      	movs	r2, #34	@ 0x22
 8001cfc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2202      	movs	r2, #2
 8001d06:	2181      	movs	r1, #129	@ 0x81
 8001d08:	69b8      	ldr	r0, [r7, #24]
 8001d0a:	f7ff fe50 	bl	80019ae <ifx_i2c_pl_write_register>
            break;
 8001d0e:	e047      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2288      	movs	r2, #136	@ 0x88
 8001d14:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001d18:	2202      	movs	r2, #2
 8001d1a:	2181      	movs	r1, #129	@ 0x81
 8001d1c:	69b8      	ldr	r0, [r7, #24]
 8001d1e:	f7ff fe16 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8001d22:	e03d      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	22aa      	movs	r2, #170	@ 0xaa
 8001d28:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001d4a:	8afa      	ldrh	r2, [r7, #22]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d805      	bhi.n	8001d5c <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	8afa      	ldrh	r2, [r7, #22]
 8001d54:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001d6a:	e019      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001d6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001d7a:	e003      	b.n	8001d84 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d8c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	69b8      	ldr	r0, [r7, #24]
 8001d92:	47a0      	blx	r4
            break;
 8001d94:	e004      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 8001d96:	bf00      	nop
 8001d98:	e002      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001d9a:	bf00      	nop
 8001d9c:	e000      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001d9e:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001da0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f aea6 	bne.w	8001af6 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	372c      	adds	r7, #44	@ 0x2c
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	08001ac5 	.word	0x08001ac5

08001db8 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001dd8:	8879      	ldrh	r1, [r7, #2]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001de2:	e0f0      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001dea:	3b01      	subs	r3, #1
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	f200 80dc 	bhi.w	8001faa <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e15 	.word	0x08001e15
 8001dfc:	08001e1d 	.word	0x08001e1d
 8001e00:	08001e3b 	.word	0x08001e3b
 8001e04:	08001f89 	.word	0x08001f89
 8001e08:	08001e0d 	.word	0x08001e0d
                ifx_i2c_pl_soft_reset(p_ctx);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f983 	bl	8002118 <ifx_i2c_pl_soft_reset>
            break;
 8001e12:	e0d8      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fe55 	bl	8001ac4 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001e1a:	e0d4      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d105      	bne.n	8001e3a <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001e2e:	2204      	movs	r2, #4
 8001e30:	2182      	movs	r1, #130	@ 0x82
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fd8b 	bl	800194e <ifx_i2c_pl_read_register>
                    break;
 8001e38:	e0c5      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d159      	bne.n	8001ef8 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d052      	beq.n	8001ef8 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e6a:	8a7b      	ldrh	r3, [r7, #18]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <ifx_i2c_pl_frame_event_handler+0xda>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001e76:	8a7a      	ldrh	r2, [r7, #18]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d80a      	bhi.n	8001e92 <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001e84:	8a7b      	ldrh	r3, [r7, #18]
 8001e86:	461a      	mov	r2, r3
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fd5f 	bl	800194e <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e90:	e079      	b.n	8001f86 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001e92:	f005 fdda 	bl	8007a4a <pal_os_timer_get_time_in_milliseconds>
 8001e96:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d205      	bcs.n	8001ebc <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d209      	bcs.n	8001edc <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ece:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	493e      	ldr	r1, [pc, #248]	@ (8001fd0 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001ed6:	f005 fd03 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001eda:	e054      	b.n	8001f86 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001eea:	2300      	movs	r3, #0
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001ef6:	e046      	b.n	8001f86 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10e      	bne.n	8001f20 <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2204      	movs	r2, #4
 8001f06:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fd48 	bl	80019ae <ifx_i2c_pl_write_register>
            break;
 8001f1e:	e052      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001f20:	f005 fd93 	bl	8007a4a <pal_os_timer_get_time_in_milliseconds>
 8001f24:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d205      	bcs.n	8001f4a <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d209      	bcs.n	8001f6a <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001f5c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	491b      	ldr	r1, [pc, #108]	@ (8001fd0 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001f64:	f005 fcbc 	bl	80078e0 <pal_os_event_register_callback_oneshot>
            break;
 8001f68:	e02d      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	47a0      	blx	r4
            break;
 8001f84:	e01f      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
 8001f86:	e01e      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	47a0      	blx	r4
            break;
 8001fa8:	e00d      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	47a0      	blx	r4
            break;
 8001fc4:	bf00      	nop
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	08001a1f 	.word	0x08001a1f

08001fd4 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10c      	bne.n	8002004 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f005 fa87 	bl	8007510 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8002002:	e010      	b.n	8002026 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 800200a:	2b02      	cmp	r3, #2
 800200c:	d10b      	bne.n	8002026 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002020:	461a      	mov	r2, r3
 8002022:	f005 fab3 	bl	800758c <pal_i2c_read>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11f      	bne.n	8002084 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 800204a:	2b01      	cmp	r3, #1
 800204c:	d110      	bne.n	8002070 <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002068:	461a      	mov	r2, r3
 800206a:	f005 fa8f 	bl	800758c <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800206e:	e012      	b.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8002076:	2b02      	cmp	r3, #2
 8002078:	d10d      	bne.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800207a:	2100      	movs	r1, #0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fe9b 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
}
 8002082:	e008      	b.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800208a:	2b02      	cmp	r3, #2
 800208c:	d103      	bne.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800208e:	2100      	movs	r1, #0
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fe91 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
    switch (event)
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01e      	beq.n	80020f4 <ifx_i2c_pl_pal_event_handler+0x54>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db25      	blt.n	8002106 <ifx_i2c_pl_pal_event_handler+0x66>
 80020ba:	3b01      	subs	r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d822      	bhi.n	8002106 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	b291      	uxth	r1, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80020da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	490b      	ldr	r1, [pc, #44]	@ (8002110 <ifx_i2c_pl_pal_event_handler+0x70>)
 80020e2:	f005 fbfd 	bl	80078e0 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 80020e6:	e00f      	b.n	8002108 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 80020e8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff fe63 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
            break;
 80020f2:	e009      	b.n	8002108 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80020fa:	2332      	movs	r3, #50	@ 0x32
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4905      	ldr	r1, [pc, #20]	@ (8002114 <ifx_i2c_pl_pal_event_handler+0x74>)
 8002100:	f005 fbee 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8002104:	e000      	b.n	8002108 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8002106:	bf00      	nop
    }
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	08001fd5 	.word	0x08001fd5
 8002114:	0800202f 	.word	0x0800202f

08002118 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8002120:	2300      	movs	r3, #0
 8002122:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800212a:	3b99      	subs	r3, #153	@ 0x99
 800212c:	2b0a      	cmp	r3, #10
 800212e:	d85e      	bhi.n	80021ee <ifx_i2c_pl_soft_reset+0xd6>
 8002130:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <ifx_i2c_pl_soft_reset+0x20>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002165 	.word	0x08002165
 800213c:	080021ef 	.word	0x080021ef
 8002140:	080021ef 	.word	0x080021ef
 8002144:	080021ef 	.word	0x080021ef
 8002148:	080021ef 	.word	0x080021ef
 800214c:	080021ef 	.word	0x080021ef
 8002150:	080021ef 	.word	0x080021ef
 8002154:	080021ef 	.word	0x080021ef
 8002158:	080021dd 	.word	0x080021dd
 800215c:	08002179 	.word	0x08002179
 8002160:	080021c1 	.word	0x080021c1
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	22a2      	movs	r2, #162	@ 0xa2
 8002168:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800216c:	2204      	movs	r2, #4
 800216e:	2182      	movs	r1, #130	@ 0x82
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fbec 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8002176:	e03b      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	b2da      	uxtb	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8002190:	2b08      	cmp	r3, #8
 8002192:	d10b      	bne.n	80021ac <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	22a3      	movs	r2, #163	@ 0xa3
 8002198:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2202      	movs	r2, #2
 80021a2:	2188      	movs	r1, #136	@ 0x88
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff fc02 	bl	80019ae <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 80021aa:	e021      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 80021b4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fdfd 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
            break;
 80021be:	e017      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	22a1      	movs	r2, #161	@ 0xa1
 80021c4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80021ce:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <ifx_i2c_pl_soft_reset+0xe0>)
 80021d6:	f005 fb83 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 80021da:	e009      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fde6 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
            break;
 80021ec:	e000      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 80021ee:	bf00      	nop
    }
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	08002119 	.word	0x08002119

080021fc <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002206:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800220a:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8002214:	491c      	ldr	r1, [pc, #112]	@ (8002288 <ifx_i2c_prl_init+0x8c>)
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f001 faa0 	bl	800375c <ifx_i2c_tl_init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12b      	bne.n	800227a <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800222e:	2b11      	cmp	r3, #17
 8002230:	d104      	bne.n	800223c <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800223a:	e003      	b.n	8002244 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2211      	movs	r2, #17
 8002268:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2211      	movs	r2, #17
 8002270:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8002274:	2300      	movs	r3, #0
 8002276:	81fb      	strh	r3, [r7, #14]
 8002278:	e000      	b.n	800227c <ifx_i2c_prl_init+0x80>
            break;
 800227a:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 800227c:	89fb      	ldrh	r3, [r7, #14]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	08002e05 	.word	0x08002e05

0800228c <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002296:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800229a:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12e      	bne.n	8002304 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80022b2:	2b33      	cmp	r3, #51	@ 0x33
 80022b4:	d109      	bne.n	80022ca <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80022ba:	2300      	movs	r3, #0
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 80022c4:	2300      	movs	r3, #0
 80022c6:	81fb      	strh	r3, [r7, #14]
            break;
 80022c8:	e01d      	b.n	8002306 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d118      	bne.n	8002306 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80022da:	2b22      	cmp	r3, #34	@ 0x22
 80022dc:	d113      	bne.n	8002306 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80022f4:	2301      	movs	r3, #1
 80022f6:	2100      	movs	r1, #0
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fd83 	bl	8002e04 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 80022fe:	2300      	movs	r3, #0
 8002300:	81fb      	strh	r3, [r7, #14]
            break;
 8002302:	e000      	b.n	8002306 <ifx_i2c_prl_close+0x7a>
            break;
 8002304:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8002306:	89fb      	ldrh	r3, [r7, #14]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002320:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002324:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05a      	beq.n	80023e2 <ifx_i2c_prl_transceive+0xd2>
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d057      	beq.n	80023e2 <ifx_i2c_prl_transceive+0xd2>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002338:	2b01      	cmp	r3, #1
 800233a:	d152      	bne.n	80023e2 <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002342:	2b11      	cmp	r3, #17
 8002344:	d10d      	bne.n	8002362 <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 800234c:	2b00      	cmp	r3, #0
 800234e:	d108      	bne.n	8002362 <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2208      	movs	r2, #8
 8002354:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8002360:	e003      	b.n	800236a <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d006      	beq.n	8002394 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800238c:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002390:	2b03      	cmp	r3, #3
 8002392:	d103      	bne.n	800239c <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
 800239a:	e003      	b.n	80023a4 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2211      	movs	r2, #17
 80023ce:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	2100      	movs	r1, #0
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fd13 	bl	8002e04 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 80023de:	2300      	movs	r3, #0
 80023e0:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 80023e2:	8afb      	ldrh	r3, [r7, #22]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b09e      	sub	sp, #120	@ 0x78
 80023f0:	af06      	add	r7, sp, #24
 80023f2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 80023f4:	f240 1307 	movw	r3, #263	@ 0x107
 80023f8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <ifx_i2c_prl_prf+0xa4>)
 80023fe:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002402:	461d      	mov	r5, r3
 8002404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	f107 020a 	add.w	r2, r7, #10
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	4618      	mov	r0, r3
 800241e:	f005 f999 	bl	8007754 <pal_os_datastore_read>
 8002422:	4603      	mov	r3, r0
 8002424:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8002428:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002430:	f240 1307 	movw	r3, #263	@ 0x107
 8002434:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8002438:	e024      	b.n	8002484 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 800243a:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002444:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002448:	f107 010c 	add.w	r1, r7, #12
 800244c:	2528      	movs	r5, #40	@ 0x28
 800244e:	9504      	str	r5, [sp, #16]
 8002450:	9203      	str	r2, [sp, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2310      	movs	r3, #16
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4623      	mov	r3, r4
 800245e:	4602      	mov	r2, r0
 8002460:	2000      	movs	r0, #0
 8002462:	f004 ff73 	bl	800734c <pal_crypt_tls_prf_sha256>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 800246c:	f240 1307 	movw	r3, #263	@ 0x107
 8002470:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	461a      	mov	r2, r3
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f00e fd29 	bl	8010ed6 <memset>

    } while (FALSE);
    return (return_status);
 8002484:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8002488:	4618      	mov	r0, r3
 800248a:	3760      	adds	r7, #96	@ 0x60
 800248c:	46bd      	mov	sp, r7
 800248e:	bdb0      	pop	{r4, r5, r7, pc}
 8002490:	08011f20 	.word	0x08011f20

08002494 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	7a7a      	ldrb	r2, [r7, #9]
 80024ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	33a1      	adds	r3, #161	@ 0xa1
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fb11 	bl	8006ade <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	33a6      	adds	r3, #166	@ 0xa6
 80024cc:	897a      	ldrh	r2, [r7, #10]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 faed 	bl	8006ab0 <optiga_common_set_uint16>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b08e      	sub	sp, #56	@ 0x38
 80024e2:	af06      	add	r7, sp, #24
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80024ee:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80024f2:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 80024f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024f8:	88f9      	ldrh	r1, [r7, #6]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ffc9 	bl	8002494 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3378      	adds	r3, #120	@ 0x78
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	3304      	adds	r3, #4
 8002510:	6839      	ldr	r1, [r7, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 fae3 	bl	8006ade <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8002522:	88f9      	ldrh	r1, [r7, #6]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	9205      	str	r2, [sp, #20]
 8002528:	2208      	movs	r2, #8
 800252a:	9204      	str	r2, [sp, #16]
 800252c:	2208      	movs	r2, #8
 800252e:	9203      	str	r2, [sp, #12]
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2308      	movs	r3, #8
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4603      	mov	r3, r0
 800253e:	460a      	mov	r2, r1
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	2000      	movs	r0, #0
 8002544:	f004 ff28 	bl	8007398 <pal_crypt_encrypt_aes128_ccm>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 800254e:	2300      	movs	r3, #0
 8002550:	83fb      	strh	r3, [r7, #30]
 8002552:	e000      	b.n	8002556 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8002554:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002556:	8bfb      	ldrh	r3, [r7, #30]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	@ 0x38
 8002564:	af06      	add	r7, sp, #24
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002570:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002574:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800257a:	88f9      	ldrh	r1, [r7, #6]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff ff88 	bl	8002494 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8002584:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002588:	3358      	adds	r3, #88	@ 0x58
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	3304      	adds	r3, #4
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f004 fa9f 	bl	8006ade <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	3308      	adds	r3, #8
 80025a4:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80025a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025aa:	3358      	adds	r3, #88	@ 0x58
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80025b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b6:	9205      	str	r2, [sp, #20]
 80025b8:	2208      	movs	r2, #8
 80025ba:	9204      	str	r2, [sp, #16]
 80025bc:	2208      	movs	r2, #8
 80025be:	9203      	str	r2, [sp, #12]
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	2308      	movs	r3, #8
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4603      	mov	r3, r0
 80025ce:	460a      	mov	r2, r1
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	2000      	movs	r0, #0
 80025d4:	f004 ff01 	bl	80073da <pal_crypt_decrypt_aes128_ccm>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 80025de:	2300      	movs	r3, #0
 80025e0:	83fb      	strh	r3, [r7, #30]
 80025e2:	e000      	b.n	80025e6 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 80025e4:	bf00      	nop
    } while (FALSE);
    return (return_status);
 80025e6:	8bfb      	ldrh	r3, [r7, #30]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 80025f8:	2300      	movs	r3, #0
 80025fa:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800260a:	2b04      	cmp	r3, #4
 800260c:	d134      	bne.n	8002678 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002614:	3301      	adds	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3354      	adds	r3, #84	@ 0x54
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	2201      	movs	r2, #1
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f001 f8a9 	bl	80037b8 <ifx_i2c_tl_transceive>
 8002666:	4603      	mov	r3, r0
 8002668:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e00d      	b.n	8002694 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800267e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22ff      	movs	r2, #255	@ 0xff
 800268e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8002692:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8002694:	89fb      	ldrh	r3, [r7, #14]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b08a      	sub	sp, #40	@ 0x28
 80026a2:	af04      	add	r7, sp, #16
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80026a8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80026ac:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80026b8:	2b55      	cmp	r3, #85	@ 0x55
 80026ba:	f000 8178 	beq.w	80029ae <ifx_i2c_prl_do_handshake+0x310>
 80026be:	2b55      	cmp	r3, #85	@ 0x55
 80026c0:	f300 817f 	bgt.w	80029c2 <ifx_i2c_prl_do_handshake+0x324>
 80026c4:	2b44      	cmp	r3, #68	@ 0x44
 80026c6:	f000 8100 	beq.w	80028ca <ifx_i2c_prl_do_handshake+0x22c>
 80026ca:	2b44      	cmp	r3, #68	@ 0x44
 80026cc:	f300 8179 	bgt.w	80029c2 <ifx_i2c_prl_do_handshake+0x324>
 80026d0:	2b33      	cmp	r3, #51	@ 0x33
 80026d2:	f000 8095 	beq.w	8002800 <ifx_i2c_prl_do_handshake+0x162>
 80026d6:	2b33      	cmp	r3, #51	@ 0x33
 80026d8:	f300 8173 	bgt.w	80029c2 <ifx_i2c_prl_do_handshake+0x324>
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d002      	beq.n	80026e6 <ifx_i2c_prl_do_handshake+0x48>
 80026e0:	2b22      	cmp	r3, #34	@ 0x22
 80026e2:	d034      	beq.n	800274e <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 80026e4:	e16d      	b.n	80029c2 <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2226      	movs	r2, #38	@ 0x26
 800270a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3354      	adds	r3, #84	@ 0x54
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	2202      	movs	r2, #2
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 f847 	bl	80037b8 <ifx_i2c_tl_transceive>
 800272a:	4603      	mov	r3, r0
 800272c:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002734:	d106      	bne.n	8002744 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2255      	movs	r2, #85	@ 0x55
 800273a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800273e:	2301      	movs	r3, #1
 8002740:	613b      	str	r3, [r7, #16]
                    break;
 8002742:	e13f      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2222      	movs	r2, #34	@ 0x22
 8002748:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800274c:	e13a      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800274e:	2301      	movs	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002770:	2b01      	cmp	r3, #1
 8002772:	d109      	bne.n	8002788 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002774:	f240 1307 	movw	r3, #263	@ 0x107
 8002778:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	22ff      	movs	r2, #255	@ 0xff
 800277e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
                    break;
 8002786:	e11d      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800278e:	2b26      	cmp	r3, #38	@ 0x26
 8002790:	d108      	bne.n	80027a4 <ifx_i2c_prl_do_handshake+0x106>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d004      	beq.n	80027ae <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2255      	movs	r2, #85	@ 0x55
 80027a8:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80027ac:	e10a      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3322      	adds	r3, #34	@ 0x22
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 f9b4 	bl	8006b20 <optiga_common_get_uint32>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3302      	adds	r3, #2
 80027d0:	2220      	movs	r2, #32
 80027d2:	4619      	mov	r1, r3
 80027d4:	f00e fbc5 	bl	8010f62 <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fe07 	bl	80023ec <ifx_i2c_prl_prf>
 80027de:	4603      	mov	r3, r0
 80027e0:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80027e2:	8afb      	ldrh	r3, [r7, #22]
 80027e4:	f240 1207 	movw	r2, #263	@ 0x107
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d104      	bne.n	80027f6 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2255      	movs	r2, #85	@ 0x55
 80027f0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80027f4:	e0e6      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2233      	movs	r2, #51	@ 0x33
 80027fa:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80027fe:	e0e1      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2208      	movs	r2, #8
 8002804:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3380      	adds	r3, #128	@ 0x80
 8002816:	2220      	movs	r2, #32
 8002818:	4619      	mov	r1, r3
 800281a:	f00e fba2 	bl	8010f62 <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f004 f957 	bl	8006ade <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	2224      	movs	r2, #36	@ 0x24
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fe49 	bl	80024de <ifx_i2c_prl_encrypt_msg>
 800284c:	4603      	mov	r3, r0
 800284e:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002850:	8afb      	ldrh	r3, [r7, #22]
 8002852:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002856:	d106      	bne.n	8002866 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2255      	movs	r2, #85	@ 0x55
 800285c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
                    break;
 8002864:	e0ae      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f004 f92d 	bl	8006ade <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2231      	movs	r2, #49	@ 0x31
 8002888:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3354      	adds	r3, #84	@ 0x54
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	2231      	movs	r2, #49	@ 0x31
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 ff88 	bl	80037b8 <ifx_i2c_tl_transceive>
 80028a8:	4603      	mov	r3, r0
 80028aa:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2255      	movs	r2, #85	@ 0x55
 80028b6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
                    break;
 80028be:	e081      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2244      	movs	r2, #68	@ 0x44
 80028c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80028c8:	e07c      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d104      	bne.n	80028dc <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80028d8:	2b31      	cmp	r3, #49	@ 0x31
 80028da:	d006      	beq.n	80028ea <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2255      	movs	r2, #85	@ 0x55
 80028e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	613b      	str	r3, [r7, #16]
                    break;
 80028e8:	e06c      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 f916 	bl	8006b20 <optiga_common_get_uint32>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1d59      	adds	r1, r3, #5
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 800290c:	9203      	str	r2, [sp, #12]
 800290e:	2224      	movs	r2, #36	@ 0x24
 8002910:	9202      	str	r2, [sp, #8]
 8002912:	2210      	movs	r2, #16
 8002914:	9201      	str	r2, [sp, #4]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4603      	mov	r3, r0
 800291a:	2224      	movs	r2, #36	@ 0x24
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fe1f 	bl	8002560 <ifx_i2c_prl_decrypt_msg>
 8002922:	4603      	mov	r3, r0
 8002924:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002926:	8afb      	ldrh	r3, [r7, #22]
 8002928:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800292c:	d106      	bne.n	800293c <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2255      	movs	r2, #85	@ 0x55
 8002932:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002936:	2301      	movs	r3, #1
 8002938:	613b      	str	r3, [r7, #16]
                    break;
 800293a:	e043      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f004 f8c9 	bl	8006ade <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	33a8      	adds	r3, #168	@ 0xa8
 8002956:	2220      	movs	r2, #32
 8002958:	4619      	mov	r1, r3
 800295a:	f00e faac 	bl	8010eb6 <memcmp>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002964:	f240 1307 	movw	r3, #263	@ 0x107
 8002968:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2255      	movs	r2, #85	@ 0x55
 800296e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002972:	2301      	movs	r3, #1
 8002974:	613b      	str	r3, [r7, #16]
                    break;
 8002976:	e025      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2204      	movs	r2, #4
 8002984:	4618      	mov	r0, r3
 8002986:	f00e fa96 	bl	8010eb6 <memcmp>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002990:	f240 1307 	movw	r3, #263	@ 0x107
 8002994:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2255      	movs	r2, #85	@ 0x55
 800299a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	613b      	str	r3, [r7, #16]
                    break;
 80029a2:	e00f      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80029ac:	e00a      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80029ae:	f240 1307 	movw	r3, #263	@ 0x107
 80029b2:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	22ff      	movs	r2, #255	@ 0xff
 80029b8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
            break;
 80029c0:	e000      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80029c2:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f43f ae73 	beq.w	80026b2 <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80029cc:	8afb      	ldrh	r3, [r7, #22]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b094      	sub	sp, #80	@ 0x50
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80029e6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80029ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d003      	beq.n	8002a00 <ifx_i2c_prl_do_manage_context+0x2a>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	f000 80eb 	beq.w	8002bd4 <ifx_i2c_prl_do_manage_context+0x1fe>
 80029fe:	e1df      	b.n	8002dc0 <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da07      	bge.n	8002a1c <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002a1a:	e1ed      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002a22:	2b22      	cmp	r3, #34	@ 0x22
 8002a24:	d10c      	bne.n	8002a40 <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2260      	movs	r2, #96	@ 0x60
 8002a2a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8002a3e:	e0a6      	b.n	8002b8e <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002a46:	2b11      	cmp	r3, #17
 8002a48:	f040 8093 	bne.w	8002b72 <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a52:	885b      	ldrh	r3, [r3, #2]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d033      	beq.n	8002ac0 <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2234      	movs	r2, #52	@ 0x34
 8002a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a66:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002a68:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3354      	adds	r3, #84	@ 0x54
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f004 fe70 	bl	8007754 <pal_os_datastore_read>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002a7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	f000 81b7 	beq.w	8002df2 <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002abe:	e19b      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002aee:	e183      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2268      	movs	r2, #104	@ 0x68
 8002b00:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f003 ffe4 	bl	8006ade <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2205      	movs	r2, #5
 8002b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2205      	movs	r2, #5
 8002b28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002b3a:	885b      	ldrh	r3, [r3, #2]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d026      	beq.n	8002b8e <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	2234      	movs	r2, #52	@ 0x34
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00e f9c4 	bl	8010ed6 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002b54:	885b      	ldrh	r3, [r3, #2]
 8002b56:	f107 0110 	add.w	r1, r7, #16
 8002b5a:	2234      	movs	r2, #52	@ 0x34
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fd7b 	bl	8007658 <pal_os_datastore_write>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002b68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10e      	bne.n	8002b8e <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 8002b70:	e142      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	@ 0xff
 8002b76:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002b88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002b8c:	e134      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3354      	adds	r3, #84	@ 0x54
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fe05 	bl	80037b8 <ifx_i2c_tl_transceive>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 8002bb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 811c 	bne.w	8002df6 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002bd2:	e111      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002be6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002bea:	2b6c      	cmp	r3, #108	@ 0x6c
 8002bec:	d133      	bne.n	8002c56 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002bf4:	2b11      	cmp	r3, #17
 8002bf6:	d12e      	bne.n	8002c56 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d12b      	bne.n	8002c56 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3308      	adds	r3, #8
 8002c08:	2228      	movs	r2, #40	@ 0x28
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f00e f9a9 	bl	8010f62 <memcpy>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c54:	e0ac      	b.n	8002db0 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002c56:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	f040 808b 	bne.w	8002d76 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002c66:	2b22      	cmp	r3, #34	@ 0x22
 8002c68:	f040 8085 	bne.w	8002d76 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 8081 	bne.w	8002d76 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f103 0008 	add.w	r0, r3, #8
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3358      	adds	r3, #88	@ 0x58
 8002c86:	2228      	movs	r2, #40	@ 0x28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f00e f96a 	bl	8010f62 <memcpy>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002cc8:	885b      	ldrh	r3, [r3, #2]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02e      	beq.n	8002d2c <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2234      	movs	r2, #52	@ 0x34
 8002cd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002cdc:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002cde:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f004 fcb6 	bl	8007658 <pal_os_datastore_write>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002cf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d018      	beq.n	8002d2c <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	@ 0xff
 8002cfe:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2207      	movs	r2, #7
 8002d06:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
                        break;
 8002d2a:	e065      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3358      	adds	r3, #88	@ 0x58
 8002d30:	2228      	movs	r2, #40	@ 0x28
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f00e f8ce 	bl	8010ed6 <memset>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	649a      	str	r2, [r3, #72]	@ 0x48
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d74:	e01c      	b.n	8002db0 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2234      	movs	r2, #52	@ 0x34
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f00e f8aa 	bl	8010ed6 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d88:	885b      	ldrh	r3, [r3, #2]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d94:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002d96:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002d98:	2234      	movs	r2, #52	@ 0x34
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fc5c 	bl	8007658 <pal_os_datastore_write>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8002da6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002daa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002dae:	e023      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002dbe:	e01b      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	22ff      	movs	r2, #255	@ 0xff
 8002dc4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002dde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002df0:	e002      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002df6:	bf00      	nop
    }
  return (return_status);
 8002df8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3748      	adds	r7, #72	@ 0x48
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b097      	sub	sp, #92	@ 0x5c
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	4613      	mov	r3, r2
 8002e16:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002e1e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002e22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <ifx_i2c_prl_event_handler+0x36>
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d029      	beq.n	8002e8e <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	@ 0xff
 8002e3e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d105      	bne.n	8002e58 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f240 1207 	movw	r2, #263	@ 0x107
 8002e52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e56:	e016      	b.n	8002e86 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10d      	bne.n	8002e7e <ifx_i2c_prl_event_handler+0x7a>
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e68:	d009      	beq.n	8002e7e <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e7c:	e003      	b.n	8002e86 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	897a      	ldrh	r2, [r7, #10]
 8002e82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2207      	movs	r2, #7
 8002e8a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002e94:	3b01      	subs	r3, #1
 8002e96:	2b07      	cmp	r3, #7
 8002e98:	f200 8445 	bhi.w	8003726 <ifx_i2c_prl_event_handler+0x922>
 8002e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <ifx_i2c_prl_event_handler+0xa0>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002ec5 	.word	0x08002ec5
 8002ea8:	08002f33 	.word	0x08002f33
 8002eac:	08003345 	.word	0x08003345
 8002eb0:	08003073 	.word	0x08003073
 8002eb4:	08002f77 	.word	0x08002f77
 8002eb8:	080035dd 	.word	0x080035dd
 8002ebc:	080036f7 	.word	0x080036f7
 8002ec0:	08002ee1 	.word	0x08002ee1
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	47a0      	blx	r4
                exit_machine = FALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002edc:	f000 bc34 	b.w	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002ee0:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff fd74 	bl	80029d6 <ifx_i2c_prl_do_manage_context>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002ef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8424 	beq.w	8003746 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	22ff      	movs	r2, #255	@ 0xff
 8002f02:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2207      	movs	r2, #7
 8002f0a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002f2e:	f000 bc0a 	b.w	8003746 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db09      	blt.n	8002f52 <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d011      	beq.n	8002f6c <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2211      	movs	r2, #17
 8002f5e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002f6a:	e3ed      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002f74:	e3e8      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	2228      	movs	r2, #40	@ 0x28
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f00d ffa9 	bl	8010ed6 <memset>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	2234      	movs	r2, #52	@ 0x34
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00d ff8c 	bl	8010ed6 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002fc4:	885b      	ldrh	r3, [r3, #2]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02e      	beq.n	8003028 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002fd0:	885b      	ldrh	r3, [r3, #2]
 8002fd2:	f107 0110 	add.w	r1, r7, #16
 8002fd6:	2234      	movs	r2, #52	@ 0x34
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fb3d 	bl	8007658 <pal_os_datastore_write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01d      	beq.n	8003028 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	22ff      	movs	r2, #255	@ 0xff
 8002ff0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800300a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f240 1207 	movw	r2, #263	@ 0x107
 8003022:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8003026:	e38f      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fb37 	bl	800269e <ifx_i2c_prl_do_handshake>
 8003030:	4603      	mov	r3, r0
 8003032:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8003036:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800303a:	f240 1207 	movw	r2, #263	@ 0x107
 800303e:	4293      	cmp	r3, r2
 8003040:	d109      	bne.n	8003056 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003048:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2207      	movs	r2, #7
 8003050:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8003054:	e378      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800305c:	2b01      	cmp	r3, #1
 800305e:	d104      	bne.n	800306a <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2204      	movs	r2, #4
 8003064:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8003068:	e36e      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8003070:	e36a      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003078:	b25b      	sxtb	r3, r3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	b25b      	sxtb	r3, r3
 8003080:	f043 0320 	orr.w	r3, r3, #32
 8003084:	b25b      	sxtb	r3, r3
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d006      	beq.n	80030aa <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80030a2:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d122      	bne.n	80030f0 <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	3301      	adds	r3, #1
 80030b0:	f113 0f10 	cmn.w	r3, #16
 80030b4:	d914      	bls.n	80030e0 <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10f      	bne.n	80030e0 <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2205      	movs	r2, #5
 80030cc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2211      	movs	r2, #17
 80030da:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 80030de:	e333      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	320d      	adds	r2, #13
 80030ec:	b292      	uxth	r2, r2
 80030ee:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d007      	beq.n	800311a <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003110:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8003114:	2b03      	cmp	r3, #3
 8003116:	f040 80c2 	bne.w	800329e <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	3301      	adds	r3, #1
 8003120:	f113 0f10 	cmn.w	r3, #16
 8003124:	d914      	bls.n	8003150 <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2205      	movs	r2, #5
 800313c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2211      	movs	r2, #17
 800314a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 800314e:	e2fb      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003156:	2b04      	cmp	r3, #4
 8003158:	d13f      	bne.n	80031da <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800316e:	3305      	adds	r3, #5
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8003176:	9203      	str	r2, [sp, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	9202      	str	r2, [sp, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4623      	mov	r3, r4
 8003184:	4602      	mov	r2, r0
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff f9ea 	bl	8002560 <ifx_i2c_prl_decrypt_msg>
 800318c:	4603      	mov	r3, r0
 800318e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8003192:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003196:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800319a:	d118      	bne.n	80031ce <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2207      	movs	r2, #7
 80031a8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80031ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 80031cc:	e2bc      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 80031d8:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2205      	movs	r2, #5
 80031e8:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f003 fc70 	bl	8006ade <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8003202:	1d59      	adds	r1, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4603      	mov	r3, r0
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff f960 	bl	80024de <ifx_i2c_prl_encrypt_msg>
 800321e:	4603      	mov	r3, r0
 8003220:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003224:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003228:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800322c:	d118      	bne.n	8003260 <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2207      	movs	r2, #7
 800323a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800324c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003258:	2301      	movs	r3, #1
 800325a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 800325e:	e273      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 800326a:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 800327c:	4413      	add	r3, r2
 800327e:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8003280:	3308      	adds	r3, #8
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4603      	mov	r3, r0
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa91 	bl	80037b8 <ifx_i2c_tl_transceive>
 8003296:	4603      	mov	r3, r0
 8003298:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800329c:	e021      	b.n	80032e2 <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	3304      	adds	r3, #4
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80032b2:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80032b8:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80032c6:	4413      	add	r3, r2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4603      	mov	r3, r0
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fa6e 	bl	80037b8 <ifx_i2c_tl_transceive>
 80032dc:	4603      	mov	r3, r0
 80032de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 80032e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032e6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80032ea:	d11d      	bne.n	8003328 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	22ff      	movs	r2, #255	@ 0xff
 80032f0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2207      	movs	r2, #7
 80032f8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800330a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003322:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8003326:	e20f      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2203      	movs	r2, #3
 8003338:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003342:	e201      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	3301      	adds	r3, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fbe8 	bl	8006b20 <optiga_common_get_uint32>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8003356:	893b      	ldrh	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d118      	bne.n	800338e <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	22ff      	movs	r2, #255	@ 0xff
 8003360:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2207      	movs	r2, #7
 8003368:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800337a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 800338c:	e1dc      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d040      	beq.n	800341c <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d003      	beq.n	80033aa <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80033a6:	2b44      	cmp	r3, #68	@ 0x44
 80033a8:	d10c      	bne.n	80033c4 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d004      	beq.n	80033ba <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d004      	beq.n	80033c4 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d109      	bne.n	80033d8 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80033d6:	e018      	b.n	800340a <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10e      	bne.n	8003400 <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 80033e8:	2b11      	cmp	r3, #17
 80033ea:	d109      	bne.n	8003400 <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80033fe:	e004      	b.n	800340a <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003406:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2206      	movs	r2, #6
 800340e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	@ 0xff
 8003416:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 800341a:	e195      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003426:	429a      	cmp	r2, r3
 8003428:	d018      	beq.n	800345c <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	22ff      	movs	r2, #255	@ 0xff
 800342e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2207      	movs	r2, #7
 8003436:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003448:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 800345a:	e175      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d006      	beq.n	8003476 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8003470:	2b03      	cmp	r3, #3
 8003472:	f040 8082 	bne.w	800357a <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	2b0d      	cmp	r3, #13
 800347a:	d818      	bhi.n	80034ae <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2207      	movs	r2, #7
 8003488:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800349a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80034ac:	e14c      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	3303      	adds	r3, #3
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d805      	bhi.n	80034c8 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d818      	bhi.n	80034fa <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	@ 0xff
 80034cc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2207      	movs	r2, #7
 80034d4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80034e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80034f8:	e126      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	3a0d      	subs	r2, #13
 800350e:	b292      	uxth	r2, r2
 8003510:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800351c:	8818      	ldrh	r0, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003526:	3305      	adds	r3, #5
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 800352e:	9203      	str	r2, [sp, #12]
 8003530:	2224      	movs	r2, #36	@ 0x24
 8003532:	9202      	str	r2, [sp, #8]
 8003534:	2210      	movs	r2, #16
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4623      	mov	r3, r4
 800353c:	4602      	mov	r2, r0
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff f80e 	bl	8002560 <ifx_i2c_prl_decrypt_msg>
 8003544:	4603      	mov	r3, r0
 8003546:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 800354a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800354e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003552:	d108      	bne.n	8003566 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2206      	movs	r2, #6
 8003558:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2204      	movs	r2, #4
 8003560:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8003564:	e0f0      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003576:	bf00      	nop
            break;
 8003578:	e0e6      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d81c      	bhi.n	80035ba <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2207      	movs	r2, #7
 8003584:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	22ff      	movs	r2, #255	@ 0xff
 800358c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80035a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 80035a4:	e0d0      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80035ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80035b8:	e0c6      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	3a01      	subs	r2, #1
 80035c6:	b292      	uxth	r2, r2
 80035c8:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80035da:	e0b5      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b44      	cmp	r3, #68	@ 0x44
 80035e2:	d166      	bne.n	80036b2 <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d104      	bne.n	80035f4 <ifx_i2c_prl_event_handler+0x7f0>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d918      	bls.n	8003626 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	22ff      	movs	r2, #255	@ 0xff
 80035f8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2207      	movs	r2, #7
 8003600:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003624:	e090      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d004      	beq.n	800363a <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003636:	2b03      	cmp	r3, #3
 8003638:	d136      	bne.n	80036a8 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003640:	3301      	adds	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003658:	2b03      	cmp	r3, #3
 800365a:	d91c      	bls.n	8003696 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	22ff      	movs	r2, #255	@ 0xff
 8003660:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2207      	movs	r2, #7
 8003668:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800367a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8003694:	e058      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2204      	movs	r2, #4
 800369a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2204      	movs	r2, #4
 80036a2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 80036a6:	e04f      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2207      	movs	r2, #7
 80036ac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80036b0:	e04a      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d117      	bne.n	80036ec <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	22ff      	movs	r2, #255	@ 0xff
 80036c0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2207      	movs	r2, #7
 80036c8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80036da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2207      	movs	r2, #7
 80036f0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80036f4:	e028      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80036fc:	2bff      	cmp	r3, #255	@ 0xff
 80036fe:	d00d      	beq.n	800371c <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7fe ff75 	bl	80025f0 <ifx_i2c_prl_send_alert>
 8003706:	4603      	mov	r3, r0
 8003708:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	22ff      	movs	r2, #255	@ 0xff
 8003710:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 800371a:	e015      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003724:	e010      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003732:	2300      	movs	r3, #0
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	47a0      	blx	r4
                exit_machine = FALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003744:	e000      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003746:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003748:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800374c:	2b01      	cmp	r3, #1
 800374e:	f43f ab9e 	beq.w	8002e8e <ifx_i2c_prl_event_handler+0x8a>
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	374c      	adds	r7, #76	@ 0x4c
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}

0800375c <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800376e:	4911      	ldr	r1, [pc, #68]	@ (80037b4 <ifx_i2c_tl_init+0x58>)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd fbb5 	bl	8000ee0 <ifx_i2c_dl_init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 800377c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003780:	e014      	b.n	80037ac <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80037a0:	3b06      	subs	r3, #6
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	08003a9d 	.word	0x08003a9d

080037b8 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80037c8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80037cc:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d041      	beq.n	8003858 <ifx_i2c_tl_transceive+0xa0>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d03e      	beq.n	8003858 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d138      	bne.n	8003856 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 80037ec:	f004 f92d 	bl	8007a4a <pal_os_timer_get_time_in_milliseconds>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003846:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f866 	bl	800391c <ifx_i2c_tl_send_next_fragment>
 8003850:	4603      	mov	r3, r0
 8003852:	82fb      	strh	r3, [r7, #22]
 8003854:	e000      	b.n	8003858 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003856:	bf00      	nop
    } while (FALSE);
    return (status);
 8003858:	8afb      	ldrh	r3, [r7, #22]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003870:	2b01      	cmp	r3, #1
 8003872:	d002      	beq.n	800387a <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003874:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003878:	e00f      	b.n	800389a <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f842 	bl	800391c <ifx_i2c_tl_send_next_fragment>
 8003898:	4603      	mov	r3, r0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80038b0:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <ifx_i2c_tl_calculate_pctr+0x38>
 80038cc:	897a      	ldrh	r2, [r7, #10]
 80038ce:	89bb      	ldrh	r3, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d802      	bhi.n	80038da <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e019      	b.n	800390e <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <ifx_i2c_tl_calculate_pctr+0x50>
 80038e4:	897a      	ldrh	r2, [r7, #10]
 80038e6:	89bb      	ldrh	r3, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d902      	bls.n	80038f2 <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e00d      	b.n	800390e <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <ifx_i2c_tl_calculate_pctr+0x68>
 80038fc:	897a      	ldrh	r2, [r7, #10]
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d902      	bls.n	800390a <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003904:	2302      	movs	r3, #2
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e001      	b.n	800390e <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 800390a:	2304      	movs	r3, #4
 800390c:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 800392a:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ffb8 	bl	80038a2 <ifx_i2c_tl_calculate_pctr>
 8003932:	4603      	mov	r3, r0
 8003934:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	429a      	cmp	r2, r3
 800394a:	da07      	bge.n	800395c <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 800395c:	7b7b      	ldrb	r3, [r7, #13]
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 8003970:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800397e:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003980:	89fa      	ldrh	r2, [r7, #14]
 8003982:	4619      	mov	r1, r3
 8003984:	f00d faed 	bl	8010f62 <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 800398e:	89fb      	ldrh	r3, [r7, #14]
 8003990:	4413      	add	r3, r2
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	3301      	adds	r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fada 	bl	8000f5c <ifx_i2c_dl_send_frame>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2207      	movs	r2, #7
 80039c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fac2 	bl	8000f5c <ifx_i2c_dl_send_frame>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80039f4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80039f8:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b07      	cmp	r3, #7
 80039fe:	d00b      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d005      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d002      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d110      	bne.n	8003a3a <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a48 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003a1c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003a20:	79ba      	ldrb	r2, [r7, #6]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d007      	beq.n	8003a36 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4a07      	ldr	r2, [pc, #28]	@ (8003a48 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003a30:	79ba      	ldrb	r2, [r7, #6]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d101      	bne.n	8003a3a <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003a36:	2300      	movs	r3, #0
 8003a38:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	08013554 	.word	0x08013554

08003a4c <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f023 0307 	bic.w	r3, r3, #7
 8003a62:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <presence_bit_check+0x42>
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8003a82:	7b7b      	ldrb	r3, [r7, #13]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d002      	beq.n	8003a8e <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 8003a88:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003a8c:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 8003a8e:	89fb      	ldrh	r3, [r7, #14]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	817b      	strh	r3, [r7, #10]
 8003aac:	4613      	mov	r3, r2
 8003aae:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2206      	movs	r2, #6
 8003ade:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003ae8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	4619      	mov	r1, r3
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ffa8 	bl	8003a4c <presence_bit_check>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2206      	movs	r2, #6
 8003b06:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003b10:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003b22:	3b01      	subs	r3, #1
 8003b24:	2b07      	cmp	r3, #7
 8003b26:	f200 81d0 	bhi.w	8003eca <ifx_i2c_dl_event_handler+0x42e>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <ifx_i2c_dl_event_handler+0x94>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b51 	.word	0x08003b51
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003ecb 	.word	0x08003ecb
 8003b3c:	08003bfd 	.word	0x08003bfd
 8003b40:	08003d43 	.word	0x08003d43
 8003b44:	08003e99 	.word	0x08003e99
 8003b48:	08003e57 	.word	0x08003e57
 8003b4c:	08003dfb 	.word	0x08003dfb
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	47a0      	blx	r4
            }
            break;
 8003b64:	e1c3      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d040      	beq.n	8003bf2 <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d215      	bcs.n	8003bac <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8003b80:	7dbb      	ldrb	r3, [r7, #22]
 8003b82:	2b07      	cmp	r3, #7
 8003b84:	d104      	bne.n	8003b90 <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b8e:	e1ae      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2206      	movs	r2, #6
 8003b9a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b9e:	e1a6      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff feb9 	bl	800391c <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003baa:	e19f      	b.n	8003eec <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 818a 	bne.w	8003eec <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7fd f9ef 	bl	8000fbc <ifx_i2c_dl_receive_frame>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2206      	movs	r2, #6
 8003be8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	757b      	strb	r3, [r7, #21]
            break;
 8003bf0:	e17c      	b.n	8003eec <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2206      	movs	r2, #6
 8003bf6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003bfa:	e178      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003bfc:	897b      	ldrh	r3, [r7, #10]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8098 	beq.w	8003d38 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2206      	movs	r2, #6
 8003c12:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c16:	e16a      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c22:	d114      	bne.n	8003c4e <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003c24:	7dbb      	ldrb	r3, [r7, #22]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d005      	beq.n	8003c36 <ifx_i2c_dl_event_handler+0x19a>
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7fd f9c6 	bl	8000fbc <ifx_i2c_dl_receive_frame>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2206      	movs	r2, #6
 8003c3a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003c3e:	e156      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2204      	movs	r2, #4
 8003c44:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	757b      	strb	r3, [r7, #21]
                        break;
 8003c4c:	e14f      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003c54:	7dbb      	ldrb	r3, [r7, #22]
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fec3 	bl	80039e4 <ifx_i2c_tl_check_chaining_error>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2208      	movs	r2, #8
 8003c68:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c6c:	e13f      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003c6e:	7dbb      	ldrb	r3, [r7, #22]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2206      	movs	r2, #6
 8003c86:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c8a:	e130      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003c8c:	7dbb      	ldrb	r3, [r7, #22]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <ifx_i2c_dl_event_handler+0x1fc>
 8003c92:	7dbb      	ldrb	r3, [r7, #22]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d14a      	bne.n	8003d2e <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	dd09      	ble.n	8003cc6 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cb8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2206      	movs	r2, #6
 8003cc0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003cc4:	e113      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003cd6:	1898      	adds	r0, r3, r2
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f00d f93e 	bl	8010f62 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003cec:	893b      	ldrh	r3, [r7, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003d10:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003d2c:	e0df      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2205      	movs	r2, #5
 8003d32:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003d36:	e0da      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d40:	e0d5      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003d42:	893a      	ldrh	r2, [r7, #8]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d004      	beq.n	8003d5a <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2207      	movs	r2, #7
 8003d54:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d58:	e0c9      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003d60:	461a      	mov	r2, r3
 8003d62:	893b      	ldrh	r3, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	3b01      	subs	r3, #1
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	dd09      	ble.n	8003d88 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d7a:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2204      	movs	r2, #4
 8003d82:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d86:	e0b2      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d104      	bne.n	8003d98 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2206      	movs	r2, #6
 8003d92:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d96:	e0aa      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003da4:	1898      	adds	r0, r3, r2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	461a      	mov	r2, r3
 8003db0:	f00d f8d7 	bl	8010f62 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7fd f8eb 	bl	8000fbc <ifx_i2c_dl_receive_frame>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2206      	movs	r2, #6
 8003df0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003df8:	e079      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d909      	bls.n	8003e14 <ifx_i2c_dl_event_handler+0x378>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d104      	bne.n	8003e14 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003e12:	e06c      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	b2d1      	uxtb	r1, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d111      	bne.n	8003e4c <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff fd16 	bl	8003862 <ifx_i2c_tl_resend_packets>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2206      	movs	r2, #6
 8003e40:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003e44:	e053      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	757b      	strb	r3, [r7, #21]
            break;
 8003e4a:	e050      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2206      	movs	r2, #6
 8003e50:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003e54:	e04b      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	b2d1      	uxtb	r1, r2
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff fd9d 	bl	80039b2 <ifx_i2c_tl_send_chaining_error>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2206      	movs	r2, #6
 8003e82:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003e86:	e032      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	757b      	strb	r3, [r7, #21]
            break;
 8003e8c:	e02f      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2206      	movs	r2, #6
 8003e92:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003e96:	e02a      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <ifx_i2c_dl_event_handler+0x410>
 8003ea6:	893b      	ldrh	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	47a0      	blx	r4
            }
            break;
 8003ec8:	e011      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	47a0      	blx	r4
            }
            break;
 8003eea:	e000      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            break;
 8003eec:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003eee:	7d7b      	ldrb	r3, [r7, #21]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f43f ade3 	beq.w	8003abc <ifx_i2c_dl_event_handler+0x20>
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd90      	pop	{r4, r7, pc}

08003f00 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003f08:	1d39      	adds	r1, r7, #4
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4803      	ldr	r0, [pc, #12]	@ (8003f20 <__io_putchar+0x20>)
 8003f12:	f00b fd3f 	bl	800f994 <HAL_UART_Transmit>

  return ch;
 8003f16:	687b      	ldr	r3, [r7, #4]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000680 	.word	0x20000680

08003f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f2a:	f006 fcef 	bl	800a90c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f2e:	f000 f86f 	bl	8004010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f32:	f000 f99f 	bl	8004274 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f36:	f000 f973 	bl	8004220 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003f3a:	f000 f8f5 	bl	8004128 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003f3e:	f000 f921 	bl	8004184 <MX_TIM2_Init>
  MX_CRC_Init();
 8003f42:	f000 f8dd 	bl	8004100 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003f46:	f000 f8cf 	bl	80040e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003f4a:	4828      	ldr	r0, [pc, #160]	@ (8003fec <main+0xc8>)
 8003f4c:	f00b f8ee 	bl	800f12c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f50:	2200      	movs	r2, #0
 8003f52:	2100      	movs	r1, #0
 8003f54:	201c      	movs	r0, #28
 8003f56:	f006 fe4a 	bl	800abee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f5a:	201c      	movs	r0, #28
 8003f5c:	f006 fe63 	bl	800ac26 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8003f60:	2201      	movs	r2, #1
 8003f62:	2120      	movs	r1, #32
 8003f64:	4822      	ldr	r0, [pc, #136]	@ (8003ff0 <main+0xcc>)
 8003f66:	f007 fdad 	bl	800bac4 <HAL_GPIO_WritePin>

   // optiga_main_logic();
    /* Check the GPIO for 3 seconds */
  	//  optiga_main_logic();
      GPIO_PinState OTA_Pin_state;
      uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8003f6a:	f006 fd35 	bl	800a9d8 <HAL_GetTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8003f74:	60fb      	str	r3, [r7, #12]

      printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8003f76:	481f      	ldr	r0, [pc, #124]	@ (8003ff4 <main+0xd0>)
 8003f78:	f00c ff86 	bl	8010e88 <puts>
      do
      {
        OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8003f7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f80:	481d      	ldr	r0, [pc, #116]	@ (8003ff8 <main+0xd4>)
 8003f82:	f007 fd87 	bl	800ba94 <HAL_GPIO_ReadPin>
 8003f86:	4603      	mov	r3, r0
 8003f88:	72fb      	strb	r3, [r7, #11]
        uint32_t current_tick = HAL_GetTick();
 8003f8a:	f006 fd25 	bl	800a9d8 <HAL_GetTick>
 8003f8e:	6078      	str	r0, [r7, #4]

        /* Check the button is pressed or not for 3seconds */
        if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d104      	bne.n	8003fa0 <main+0x7c>
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d800      	bhi.n	8003fa0 <main+0x7c>
      {
 8003f9e:	e7ed      	b.n	8003f7c <main+0x58>
        {
          /* Either timeout or Button is pressed */
          break;
        }
      }while( 1 );
      if( OTA_Pin_state == GPIO_PIN_RESET ) {
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <main+0x8c>
    	  /* Initialise Flash */
    	 	  FLASH_IF_init();
 8003fa6:	f7fc fcb1 	bl	800090c <FLASH_IF_init>
    	 	  /* Display main menu */
    	 	  main_menu ();
 8003faa:	f000 fabf 	bl	800452c <main_menu>
 8003fae:	e01a      	b.n	8003fe6 <main+0xc2>
      }
      else {
    	  /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    	 	  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8003fb0:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <main+0xd8>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <main+0xdc>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fbc:	d113      	bne.n	8003fe6 <main+0xc2>
    	 	  {
    	 		  /* Jump to user application */
    	 		  jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8003fbe:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <main+0xe0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a11      	ldr	r2, [pc, #68]	@ (8004008 <main+0xe4>)
 8003fc4:	6013      	str	r3, [r2, #0]
    	 		  jumpToApplication = (pFunction) jumpAddress;
 8003fc6:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <main+0xe4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <main+0xe8>)
 8003fce:	601a      	str	r2, [r3, #0]
    	 		  /* Initialize user application's Stack Pointer */
    	 		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <main+0xd8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f383 8808 	msr	MSP, r3
}
 8003fdc:	bf00      	nop
    	 		  jumpToApplication();
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <main+0xe8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <main+0xc2>
 8003fea:	bf00      	nop
 8003fec:	20000638 	.word	0x20000638
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	08011f34 	.word	0x08011f34
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	08020000 	.word	0x08020000
 8004000:	2ffe0000 	.word	0x2ffe0000
 8004004:	08020004 	.word	0x08020004
 8004008:	200006cc 	.word	0x200006cc
 800400c:	200006c8 	.word	0x200006c8

08004010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b094      	sub	sp, #80	@ 0x50
 8004014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004016:	f107 0320 	add.w	r3, r7, #32
 800401a:	2230      	movs	r2, #48	@ 0x30
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f00c ff59 	bl	8010ed6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <SystemClock_Config+0xd0>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	4a28      	ldr	r2, [pc, #160]	@ (80040e0 <SystemClock_Config+0xd0>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004042:	6413      	str	r3, [r2, #64]	@ 0x40
 8004044:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <SystemClock_Config+0xd0>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004050:	2300      	movs	r3, #0
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	4b23      	ldr	r3, [pc, #140]	@ (80040e4 <SystemClock_Config+0xd4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800405c:	4a21      	ldr	r2, [pc, #132]	@ (80040e4 <SystemClock_Config+0xd4>)
 800405e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <SystemClock_Config+0xd4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004070:	2302      	movs	r3, #2
 8004072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004074:	2301      	movs	r3, #1
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004078:	2310      	movs	r3, #16
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800407c:	2302      	movs	r3, #2
 800407e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004080:	2300      	movs	r3, #0
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004084:	2310      	movs	r3, #16
 8004086:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004088:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800408e:	2304      	movs	r3, #4
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004092:	2307      	movs	r3, #7
 8004094:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	4618      	mov	r0, r3
 800409c:	f00a fb5e 	bl	800e75c <HAL_RCC_OscConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80040a6:	f000 f95d 	bl	8004364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040aa:	230f      	movs	r3, #15
 80040ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ae:	2302      	movs	r3, #2
 80040b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040c0:	f107 030c 	add.w	r3, r7, #12
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f00a fdc0 	bl	800ec4c <HAL_RCC_ClockConfig>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80040d2:	f000 f947 	bl	8004364 <Error_Handler>
  }
}
 80040d6:	bf00      	nop
 80040d8:	3750      	adds	r7, #80	@ 0x50
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40007000 	.word	0x40007000

080040e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	201f      	movs	r0, #31
 80040f2:	f006 fd7c 	bl	800abee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040f6:	201f      	movs	r0, #31
 80040f8:	f006 fd95 	bl	800ac26 <HAL_NVIC_EnableIRQ>
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}

08004100 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <MX_CRC_Init+0x20>)
 8004106:	4a07      	ldr	r2, [pc, #28]	@ (8004124 <MX_CRC_Init+0x24>)
 8004108:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800410a:	4805      	ldr	r0, [pc, #20]	@ (8004120 <MX_CRC_Init+0x20>)
 800410c:	f006 fda5 	bl	800ac5a <HAL_CRC_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004116:	f000 f925 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200005dc 	.word	0x200005dc
 8004124:	40023000 	.word	0x40023000

08004128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <MX_I2C1_Init+0x50>)
 800412e:	4a13      	ldr	r2, [pc, #76]	@ (800417c <MX_I2C1_Init+0x54>)
 8004130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004134:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <MX_I2C1_Init+0x58>)
 8004136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004138:	4b0f      	ldr	r3, [pc, #60]	@ (8004178 <MX_I2C1_Init+0x50>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800413e:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800414a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <MX_I2C1_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004152:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004158:	4b07      	ldr	r3, [pc, #28]	@ (8004178 <MX_I2C1_Init+0x50>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004160:	2200      	movs	r2, #0
 8004162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004164:	4804      	ldr	r0, [pc, #16]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004166:	f007 fceb 	bl	800bb40 <HAL_I2C_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004170:	f000 f8f8 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200005e4 	.word	0x200005e4
 800417c:	40005400 	.word	0x40005400
 8004180:	00061a80 	.word	0x00061a80

08004184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004198:	463b      	mov	r3, r7
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <MX_TIM2_Init+0x98>)
 80041a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <MX_TIM2_Init+0x98>)
 80041aa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80041ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <MX_TIM2_Init+0x98>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <MX_TIM2_Init+0x98>)
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041be:	4b17      	ldr	r3, [pc, #92]	@ (800421c <MX_TIM2_Init+0x98>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <MX_TIM2_Init+0x98>)
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041ca:	4814      	ldr	r0, [pc, #80]	@ (800421c <MX_TIM2_Init+0x98>)
 80041cc:	f00a ff5e 	bl	800f08c <HAL_TIM_Base_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80041d6:	f000 f8c5 	bl	8004364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041e0:	f107 0308 	add.w	r3, r7, #8
 80041e4:	4619      	mov	r1, r3
 80041e6:	480d      	ldr	r0, [pc, #52]	@ (800421c <MX_TIM2_Init+0x98>)
 80041e8:	f00b f8f2 	bl	800f3d0 <HAL_TIM_ConfigClockSource>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80041f2:	f000 f8b7 	bl	8004364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041fe:	463b      	mov	r3, r7
 8004200:	4619      	mov	r1, r3
 8004202:	4806      	ldr	r0, [pc, #24]	@ (800421c <MX_TIM2_Init+0x98>)
 8004204:	f00b faf4 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800420e:	f000 f8a9 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000638 	.word	0x20000638

08004220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004224:	4b11      	ldr	r3, [pc, #68]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004226:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <MX_USART2_UART_Init+0x50>)
 8004228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 800422c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004232:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 800423a:	2200      	movs	r2, #0
 800423c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004244:	4b09      	ldr	r3, [pc, #36]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004246:	220c      	movs	r2, #12
 8004248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004256:	4805      	ldr	r0, [pc, #20]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004258:	f00b fb4c 	bl	800f8f4 <HAL_UART_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004262:	f000 f87f 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000680 	.word	0x20000680
 8004270:	40004400 	.word	0x40004400

08004274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	@ 0x28
 8004278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b32      	ldr	r3, [pc, #200]	@ (8004358 <MX_GPIO_Init+0xe4>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	4a31      	ldr	r2, [pc, #196]	@ (8004358 <MX_GPIO_Init+0xe4>)
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	6313      	str	r3, [r2, #48]	@ 0x30
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <MX_GPIO_Init+0xe4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b6:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042d2:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80042fa:	2200      	movs	r2, #0
 80042fc:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004300:	4816      	ldr	r0, [pc, #88]	@ (800435c <MX_GPIO_Init+0xe8>)
 8004302:	f007 fbdf 	bl	800bac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800430a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800430c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4619      	mov	r1, r3
 800431c:	4810      	ldr	r0, [pc, #64]	@ (8004360 <MX_GPIO_Init+0xec>)
 800431e:	f007 fa35 	bl	800b78c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8004322:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004328:	2301      	movs	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004330:	2300      	movs	r3, #0
 8004332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004334:	f107 0314 	add.w	r3, r7, #20
 8004338:	4619      	mov	r1, r3
 800433a:	4808      	ldr	r0, [pc, #32]	@ (800435c <MX_GPIO_Init+0xe8>)
 800433c:	f007 fa26 	bl	800b78c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004340:	2200      	movs	r2, #0
 8004342:	2100      	movs	r1, #0
 8004344:	2028      	movs	r0, #40	@ 0x28
 8004346:	f006 fc52 	bl	800abee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800434a:	2028      	movs	r0, #40	@ 0x28
 800434c:	f006 fc6b 	bl	800ac26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004350:	bf00      	nop
 8004352:	3728      	adds	r7, #40	@ 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	40020000 	.word	0x40020000
 8004360:	40020800 	.word	0x40020800

08004364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004368:	b672      	cpsid	i
}
 800436a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <Error_Handler+0x8>

08004370 <serial_download>:
/**
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void serial_download(void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
	uint8_t number[11] = {0};
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f8c3 2003 	str.w	r2, [r3, #3]
	uint32_t size = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
	COM_StatusTypeDef result = COM_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
	serial_put_string((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 800438e:	483b      	ldr	r0, [pc, #236]	@ (800447c <serial_download+0x10c>)
 8004390:	f7fc fa38 	bl	8000804 <serial_put_string>

	if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 8004394:	483a      	ldr	r0, [pc, #232]	@ (8004480 <serial_download+0x110>)
 8004396:	f7fc fac5 	bl	8000924 <FLASH_IF_erase>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <serial_download+0x36>
		serial_put_string((uint8_t*)"Error occured while erasing the flash");
 80043a0:	4838      	ldr	r0, [pc, #224]	@ (8004484 <serial_download+0x114>)
 80043a2:	f7fc fa2f 	bl	8000804 <serial_put_string>
	}

	result = ymodem_receive(&size);
 80043a6:	463b      	mov	r3, r7
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 ff3b 	bl	800a224 <ymodem_receive>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75fb      	strb	r3, [r7, #23]

	if (result == COM_OK) {
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d119      	bne.n	80043ec <serial_download+0x7c>
			serial_put_string((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 80043b8:	4833      	ldr	r0, [pc, #204]	@ (8004488 <serial_download+0x118>)
 80043ba:	f7fc fa23 	bl	8000804 <serial_put_string>
			serial_put_string((uint8_t *)aFileName);
 80043be:	4833      	ldr	r0, [pc, #204]	@ (800448c <serial_download+0x11c>)
 80043c0:	f7fc fa20 	bl	8000804 <serial_put_string>
		    int_to_str(number, size);
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f8d8 	bl	8000580 <int_to_str>
		    serial_put_string((uint8_t *)"\n\r Size: ");
 80043d0:	482f      	ldr	r0, [pc, #188]	@ (8004490 <serial_download+0x120>)
 80043d2:	f7fc fa17 	bl	8000804 <serial_put_string>
		    serial_put_string((uint8_t *)number);
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc fa13 	bl	8000804 <serial_put_string>
		    serial_put_string((uint8_t *)" Bytes\r\n");
 80043de:	482d      	ldr	r0, [pc, #180]	@ (8004494 <serial_download+0x124>)
 80043e0:	f7fc fa10 	bl	8000804 <serial_put_string>
		    serial_put_string((uint8_t *)"-------------------\r\n");
 80043e4:	482c      	ldr	r0, [pc, #176]	@ (8004498 <serial_download+0x128>)
 80043e6:	f7fc fa0d 	bl	8000804 <serial_put_string>
 80043ea:	e017      	b.n	800441c <serial_download+0xac>
	}
	else if (result == COM_ABORT) {
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d103      	bne.n	80043fa <serial_download+0x8a>
		serial_put_string((uint8_t*)"\r\n\nAborted by User.\n\r");
 80043f2:	482a      	ldr	r0, [pc, #168]	@ (800449c <serial_download+0x12c>)
 80043f4:	f7fc fa06 	bl	8000804 <serial_put_string>
 80043f8:	e010      	b.n	800441c <serial_download+0xac>
	}
	else if (result == COM_LIMIT) {
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d103      	bne.n	8004408 <serial_download+0x98>
		serial_put_string((uint8_t*)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8004400:	4827      	ldr	r0, [pc, #156]	@ (80044a0 <serial_download+0x130>)
 8004402:	f7fc f9ff 	bl	8000804 <serial_put_string>
 8004406:	e009      	b.n	800441c <serial_download+0xac>
	}
	else if (result == COM_DATA) {
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d103      	bne.n	8004416 <serial_download+0xa6>
		serial_put_string((uint8_t *)"\n\n\rVerification failed!\n\r");
 800440e:	4825      	ldr	r0, [pc, #148]	@ (80044a4 <serial_download+0x134>)
 8004410:	f7fc f9f8 	bl	8000804 <serial_put_string>
 8004414:	e002      	b.n	800441c <serial_download+0xac>
	}
	else
	  {
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8004416:	4824      	ldr	r0, [pc, #144]	@ (80044a8 <serial_download+0x138>)
 8004418:	f7fc f9f4 	bl	8000804 <serial_put_string>
	  }
	  optiga_init();
 800441c:	f000 f9b2 	bl	8004784 <optiga_init>

	if ( verify_firmware_integrity(size) != 0) {
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fb58 	bl	8004ad8 <verify_firmware_integrity>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <serial_download+0xf6>
		optiga_deinit();
 800442e:	f000 fb2f 	bl	8004a90 <optiga_deinit>
		serial_put_string("Firmware Authenticated!\r\n");
 8004432:	481e      	ldr	r0, [pc, #120]	@ (80044ac <serial_download+0x13c>)
 8004434:	f7fc f9e6 	bl	8000804 <serial_put_string>
		serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 8004438:	481d      	ldr	r0, [pc, #116]	@ (80044b0 <serial_download+0x140>)
 800443a:	f7fc f9e3 	bl	8000804 <serial_put_string>
		      /* execute the new program */
		      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <serial_download+0x144>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1d      	ldr	r2, [pc, #116]	@ (80044b8 <serial_download+0x148>)
 8004444:	6013      	str	r3, [r2, #0]
		      /* Jump to user application */
		      jumpToApplication = (pFunction)jumpAddress;
 8004446:	4b1c      	ldr	r3, [pc, #112]	@ (80044b8 <serial_download+0x148>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <serial_download+0x14c>)
 800444e:	601a      	str	r2, [r3, #0]
		      /* Initialize user application's Stack Pointer */
		      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <serial_download+0x110>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f383 8808 	msr	MSP, r3
}
 800445c:	bf00      	nop
		      jumpToApplication();
 800445e:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <serial_download+0x14c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4798      	blx	r3
	else {
		optiga_deinit();
		serial_put_string("Firmware Not Authenticated!\r\nHALT!!!\r\n");
		while (1);
	}
}
 8004464:	e006      	b.n	8004474 <serial_download+0x104>
		optiga_deinit();
 8004466:	f000 fb13 	bl	8004a90 <optiga_deinit>
		serial_put_string("Firmware Not Authenticated!\r\nHALT!!!\r\n");
 800446a:	4815      	ldr	r0, [pc, #84]	@ (80044c0 <serial_download+0x150>)
 800446c:	f7fc f9ca 	bl	8000804 <serial_put_string>
		while (1);
 8004470:	bf00      	nop
 8004472:	e7fd      	b.n	8004470 <serial_download+0x100>
}
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	08011f6c 	.word	0x08011f6c
 8004480:	08020000 	.word	0x08020000
 8004484:	08011fa8 	.word	0x08011fa8
 8004488:	08011fd0 	.word	0x08011fd0
 800448c:	200006d4 	.word	0x200006d4
 8004490:	08012024 	.word	0x08012024
 8004494:	08012030 	.word	0x08012030
 8004498:	0801203c 	.word	0x0801203c
 800449c:	08012054 	.word	0x08012054
 80044a0:	0801206c 	.word	0x0801206c
 80044a4:	080120ac 	.word	0x080120ac
 80044a8:	080120c8 	.word	0x080120c8
 80044ac:	080120e8 	.word	0x080120e8
 80044b0:	08012104 	.word	0x08012104
 80044b4:	08020004 	.word	0x08020004
 80044b8:	200006cc 	.word	0x200006cc
 80044bc:	200006c8 	.word	0x200006c8
 80044c0:	08012128 	.word	0x08012128

080044c4 <serial_upload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */

void serial_upload(void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
	 uint8_t status = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	71fb      	strb	r3, [r7, #7]
	 serial_put_string((uint8_t *)"\n\n\rSelect Receive File\n\r");
 80044ce:	4811      	ldr	r0, [pc, #68]	@ (8004514 <serial_upload+0x50>)
 80044d0:	f7fc f998 	bl	8000804 <serial_put_string>
	 HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 80044d4:	1df9      	adds	r1, r7, #7
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044da:	2201      	movs	r2, #1
 80044dc:	480e      	ldr	r0, [pc, #56]	@ (8004518 <serial_upload+0x54>)
 80044de:	f00b fae4 	bl	800faaa <HAL_UART_Receive>
	 if ( status == CRC16)
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b43      	cmp	r3, #67	@ 0x43
 80044e6:	d111      	bne.n	800450c <serial_upload+0x48>
	   {
	     /* Transmit the flash image through ymodem protocol */
	     status = ymodem_transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 80044e8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80044ec:	490b      	ldr	r1, [pc, #44]	@ (800451c <serial_upload+0x58>)
 80044ee:	480c      	ldr	r0, [pc, #48]	@ (8004520 <serial_upload+0x5c>)
 80044f0:	f006 f848 	bl	800a584 <ymodem_transmit>
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]

	     if (status != 0)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <serial_upload+0x42>
	     {
	       serial_put_string((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 80044fe:	4809      	ldr	r0, [pc, #36]	@ (8004524 <serial_upload+0x60>)
 8004500:	f7fc f980 	bl	8000804 <serial_put_string>
	     else
	     {
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
	     }
	   }
}
 8004504:	e002      	b.n	800450c <serial_upload+0x48>
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8004506:	4808      	ldr	r0, [pc, #32]	@ (8004528 <serial_upload+0x64>)
 8004508:	f7fc f97c 	bl	8000804 <serial_put_string>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08012150 	.word	0x08012150
 8004518:	20000680 	.word	0x20000680
 800451c:	0801216c 	.word	0x0801216c
 8004520:	08020000 	.word	0x08020000
 8004524:	08012184 	.word	0x08012184
 8004528:	080121b0 	.word	0x080121b0

0800452c <main_menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */

void main_menu(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
	 uint8_t key = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	70fb      	strb	r3, [r7, #3]

	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8004536:	484b      	ldr	r0, [pc, #300]	@ (8004664 <main_menu+0x138>)
 8004538:	f7fc f964 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 800453c:	484a      	ldr	r0, [pc, #296]	@ (8004668 <main_menu+0x13c>)
 800453e:	f7fc f961 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n= Secure Booting and Firmware Update with hardware root of trust(1.1)=");
 8004542:	484a      	ldr	r0, [pc, #296]	@ (800466c <main_menu+0x140>)
 8004544:	f7fc f95e 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 8004548:	4847      	ldr	r0, [pc, #284]	@ (8004668 <main_menu+0x13c>)
 800454a:	f7fc f95b 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                   By STM Application Team          =");
 800454e:	4848      	ldr	r0, [pc, #288]	@ (8004670 <main_menu+0x144>)
 8004550:	f7fc f958 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8004554:	4843      	ldr	r0, [pc, #268]	@ (8004664 <main_menu+0x138>)
 8004556:	f7fc f955 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n\r\n");
 800455a:	4846      	ldr	r0, [pc, #280]	@ (8004674 <main_menu+0x148>)
 800455c:	f7fc f952 	bl	8000804 <serial_put_string>
	  FLASH_IF_disable_all_protection();
 8004560:	f7fc fa2a 	bl	80009b8 <FLASH_IF_disable_all_protection>

	  while (1)
	  {

		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8004564:	4844      	ldr	r0, [pc, #272]	@ (8004678 <main_menu+0x14c>)
 8004566:	f7fc f94d 	bl	8000804 <serial_put_string>
		  serial_put_string((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 800456a:	4844      	ldr	r0, [pc, #272]	@ (800467c <main_menu+0x150>)
 800456c:	f7fc f94a 	bl	8000804 <serial_put_string>
		  serial_put_string((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8004570:	4843      	ldr	r0, [pc, #268]	@ (8004680 <main_menu+0x154>)
 8004572:	f7fc f947 	bl	8000804 <serial_put_string>
		  serial_put_string((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8004576:	4843      	ldr	r0, [pc, #268]	@ (8004684 <main_menu+0x158>)
 8004578:	f7fc f944 	bl	8000804 <serial_put_string>

		  flashProtection = FLASH_IF_get_write_protection_status();
 800457c:	f7fc fa96 	bl	8000aac <FLASH_IF_get_write_protection_status>
 8004580:	4603      	mov	r3, r0
 8004582:	4a41      	ldr	r2, [pc, #260]	@ (8004688 <main_menu+0x15c>)
 8004584:	6013      	str	r3, [r2, #0]

	    if(flashProtection == FLASHIF_PROTECTION_WRPENABLED)
 8004586:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <main_menu+0x15c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d103      	bne.n	8004596 <main_menu+0x6a>
	    {
	    	serial_put_string((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 800458e:	483f      	ldr	r0, [pc, #252]	@ (800468c <main_menu+0x160>)
 8004590:	f7fc f938 	bl	8000804 <serial_put_string>
 8004594:	e002      	b.n	800459c <main_menu+0x70>
	    }
	    else
	    {
	    	serial_put_string((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8004596:	483e      	ldr	r0, [pc, #248]	@ (8004690 <main_menu+0x164>)
 8004598:	f7fc f934 	bl	8000804 <serial_put_string>
	    }
	    serial_put_string((uint8_t *)"==========================================================\r\n\n");
 800459c:	483d      	ldr	r0, [pc, #244]	@ (8004694 <main_menu+0x168>)
 800459e:	f7fc f931 	bl	8000804 <serial_put_string>

	    /* Clean the input path */
	    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80045a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004698 <main_menu+0x16c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
	//    __HAL_UART_CLEAR_OREFLAG(&UartHandle);

	    /* Receive key */
	    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 80045a8:	1cf9      	adds	r1, r7, #3
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045ae:	2201      	movs	r2, #1
 80045b0:	4839      	ldr	r0, [pc, #228]	@ (8004698 <main_menu+0x16c>)
 80045b2:	f00b fa7a 	bl	800faaa <HAL_UART_Receive>



	    switch (key)
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	3b31      	subs	r3, #49	@ 0x31
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d84d      	bhi.n	800465a <main_menu+0x12e>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <main_menu+0x98>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045db 	.word	0x080045db
 80045cc:	080045e1 	.word	0x080045e1
 80045d0:	0800460f 	.word	0x0800460f
	    {
	    case '1' :
	      /* Download user application in the Flash */
	      serial_download();
 80045d4:	f7ff fecc 	bl	8004370 <serial_download>
	      break;
 80045d8:	e043      	b.n	8004662 <main_menu+0x136>
	    case '2' :
	      /* Upload user application from the Flash */
	      serial_upload();
 80045da:	f7ff ff73 	bl	80044c4 <serial_upload>
	      break;
 80045de:	e040      	b.n	8004662 <main_menu+0x136>
	    case '3' :
	    	serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 80045e0:	482e      	ldr	r0, [pc, #184]	@ (800469c <main_menu+0x170>)
 80045e2:	f7fc f90f 	bl	8000804 <serial_put_string>
	      /* execute the new program */
	      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80045e6:	4b2e      	ldr	r3, [pc, #184]	@ (80046a0 <main_menu+0x174>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2e      	ldr	r2, [pc, #184]	@ (80046a4 <main_menu+0x178>)
 80045ec:	6013      	str	r3, [r2, #0]
	      /* Jump to user application */
	      jumpToApplication = (pFunction)jumpAddress;
 80045ee:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <main_menu+0x178>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b2c      	ldr	r3, [pc, #176]	@ (80046a8 <main_menu+0x17c>)
 80045f6:	601a      	str	r2, [r3, #0]
	      /* Initialize user application's Stack Pointer */
	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80045f8:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <main_menu+0x180>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f383 8808 	msr	MSP, r3
}
 8004604:	bf00      	nop
	      jumpToApplication();
 8004606:	4b28      	ldr	r3, [pc, #160]	@ (80046a8 <main_menu+0x17c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4798      	blx	r3
	      break;
 800460c:	e029      	b.n	8004662 <main_menu+0x136>
	    case '4' :

	      if (flashProtection != FLASHIF_PROTECTION_NONE)
 800460e:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <main_menu+0x15c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <main_menu+0x10c>
	      {
	        /* Disable the write protection */
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 8004616:	2001      	movs	r0, #1
 8004618:	f7fc fa60 	bl	8000adc <FLASH_IF_write_protection_config>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <main_menu+0x104>
	        {
	        	serial_put_string((uint8_t *)"Write Protection disabled...\r\n");
 8004622:	4823      	ldr	r0, [pc, #140]	@ (80046b0 <main_menu+0x184>)
 8004624:	f7fc f8ee 	bl	8000804 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 8004628:	4822      	ldr	r0, [pc, #136]	@ (80046b4 <main_menu+0x188>)
 800462a:	f7fc f8eb 	bl	8000804 <serial_put_string>
	        else
	        {
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
	        }
	      }
	      break;
 800462e:	e018      	b.n	8004662 <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 8004630:	4821      	ldr	r0, [pc, #132]	@ (80046b8 <main_menu+0x18c>)
 8004632:	f7fc f8e7 	bl	8000804 <serial_put_string>
	      break;
 8004636:	e014      	b.n	8004662 <main_menu+0x136>
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8004638:	2000      	movs	r0, #0
 800463a:	f7fc fa4f 	bl	8000adc <FLASH_IF_write_protection_config>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <main_menu+0x126>
	        	serial_put_string((uint8_t *)"Write Protection enabled...\r\n");
 8004644:	481d      	ldr	r0, [pc, #116]	@ (80046bc <main_menu+0x190>)
 8004646:	f7fc f8dd 	bl	8000804 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 800464a:	481a      	ldr	r0, [pc, #104]	@ (80046b4 <main_menu+0x188>)
 800464c:	f7fc f8da 	bl	8000804 <serial_put_string>
	      break;
 8004650:	e007      	b.n	8004662 <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
 8004652:	481b      	ldr	r0, [pc, #108]	@ (80046c0 <main_menu+0x194>)
 8004654:	f7fc f8d6 	bl	8000804 <serial_put_string>
	      break;
 8004658:	e003      	b.n	8004662 <main_menu+0x136>
		default:
			serial_put_string((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 800465a:	481a      	ldr	r0, [pc, #104]	@ (80046c4 <main_menu+0x198>)
 800465c:	f7fc f8d2 	bl	8000804 <serial_put_string>
		break;
 8004660:	bf00      	nop
		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8004662:	e77f      	b.n	8004564 <main_menu+0x38>
 8004664:	080121d0 	.word	0x080121d0
 8004668:	0801221c 	.word	0x0801221c
 800466c:	08012268 	.word	0x08012268
 8004670:	080122b4 	.word	0x080122b4
 8004674:	08012300 	.word	0x08012300
 8004678:	08012308 	.word	0x08012308
 800467c:	08012348 	.word	0x08012348
 8004680:	08012388 	.word	0x08012388
 8004684:	080123c8 	.word	0x080123c8
 8004688:	200006d0 	.word	0x200006d0
 800468c:	08012408 	.word	0x08012408
 8004690:	08012448 	.word	0x08012448
 8004694:	08012488 	.word	0x08012488
 8004698:	20000680 	.word	0x20000680
 800469c:	08012104 	.word	0x08012104
 80046a0:	08020004 	.word	0x08020004
 80046a4:	200006cc 	.word	0x200006cc
 80046a8:	200006c8 	.word	0x200006c8
 80046ac:	08020000 	.word	0x08020000
 80046b0:	080124c8 	.word	0x080124c8
 80046b4:	080124e8 	.word	0x080124e8
 80046b8:	08012508 	.word	0x08012508
 80046bc:	08012538 	.word	0x08012538
 80046c0:	08012558 	.word	0x08012558
 80046c4:	08012584 	.word	0x08012584

080046c8 <optiga_util_callback>:
extern pal_i2c_t optiga_pal_i2c_context_0;
extern I2C_HandleTypeDef hi2c1;

// ---------- Internal Callbacks ----------
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <optiga_util_callback+0x20>)
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	8013      	strh	r3, [r2, #0]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000718 	.word	0x20000718

080046ec <optiga_crypt_callback>:

static void optiga_crypt_callback(void *context, optiga_lib_status_t return_status)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80046f8:	4a04      	ldr	r2, [pc, #16]	@ (800470c <optiga_crypt_callback+0x20>)
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	8013      	strh	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000718 	.word	0x20000718

08004710 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004720:	d101      	bne.n	8004726 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8004722:	f003 f92b 	bl	800797c <pal_os_event_timer_tick>
    }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <I2C_Scan>:

// ---------- I2C Scanner (for debugging) ----------
static void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8004738:	4810      	ldr	r0, [pc, #64]	@ (800477c <I2C_Scan+0x4c>)
 800473a:	f00c fba5 	bl	8010e88 <puts>
    for (uint8_t addr = 0x01; addr < 0x33; addr++)
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e013      	b.n	800476c <I2C_Scan+0x3c>
    {
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	b29b      	uxth	r3, r3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b299      	uxth	r1, r3
 800474c:	230a      	movs	r3, #10
 800474e:	2201      	movs	r2, #1
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f007 fe7f 	bl	800c454 <HAL_I2C_IsDeviceReady>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <I2C_Scan+0x36>
        {
            printf("Device found at 0x%02X\r\n", addr);
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	4619      	mov	r1, r3
 8004760:	4807      	ldr	r0, [pc, #28]	@ (8004780 <I2C_Scan+0x50>)
 8004762:	f00c fb29 	bl	8010db8 <iprintf>
    for (uint8_t addr = 0x01; addr < 0x33; addr++)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	3301      	adds	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b32      	cmp	r3, #50	@ 0x32
 8004770:	d9e8      	bls.n	8004744 <I2C_Scan+0x14>
        }
    }
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	080125c4 	.word	0x080125c4
 8004780:	080125d8 	.word	0x080125d8

08004784 <optiga_init>:

// ---------- Global Function: optiga_init ----------
void optiga_init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
    pal_gpio_set_high(&optiga_vdd_0);
 800478a:	4828      	ldr	r0, [pc, #160]	@ (800482c <optiga_init+0xa8>)
 800478c:	f002 fe46 	bl	800741c <pal_gpio_set_high>
    HAL_Delay(10);
 8004790:	200a      	movs	r0, #10
 8004792:	f006 f92d 	bl	800a9f0 <HAL_Delay>

    optiga_lib_status_t return_status;
    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8004796:	2200      	movs	r2, #0
 8004798:	4925      	ldr	r1, [pc, #148]	@ (8004830 <optiga_init+0xac>)
 800479a:	2000      	movs	r0, #0
 800479c:	f002 fc7e 	bl	800709c <optiga_util_create>
 80047a0:	4603      	mov	r3, r0
 80047a2:	4a24      	ldr	r2, [pc, #144]	@ (8004834 <optiga_init+0xb0>)
 80047a4:	6013      	str	r3, [r2, #0]
    if (!me_util)
 80047a6:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <optiga_init+0xb0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <optiga_init+0x32>
    {
        printf("❌ Failed to create OPTIGA util instance.\r\n");
 80047ae:	4822      	ldr	r0, [pc, #136]	@ (8004838 <optiga_init+0xb4>)
 80047b0:	f00c fb6a 	bl	8010e88 <puts>
        return;
 80047b4:	e037      	b.n	8004826 <optiga_init+0xa2>
    }

    I2C_Scan(&hi2c1);
 80047b6:	4821      	ldr	r0, [pc, #132]	@ (800483c <optiga_init+0xb8>)
 80047b8:	f7ff ffba 	bl	8004730 <I2C_Scan>
    printf("Starting OPTIGA Trust M logic...\r\n");
 80047bc:	4820      	ldr	r0, [pc, #128]	@ (8004840 <optiga_init+0xbc>)
 80047be:	f00c fb63 	bl	8010e88 <puts>

    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 80047c2:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <optiga_init+0xc0>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 80047c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <optiga_init+0xb0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f002 fcc8 	bl	8007164 <optiga_util_open_application>
 80047d4:	4603      	mov	r3, r0
 80047d6:	80fb      	strh	r3, [r7, #6]
        if (return_status != OPTIGA_LIB_SUCCESS)
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <optiga_init+0x62>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 80047de:	481a      	ldr	r0, [pc, #104]	@ (8004848 <optiga_init+0xc4>)
 80047e0:	f00c fb52 	bl	8010e88 <puts>
            continue;
 80047e4:	e01e      	b.n	8004824 <optiga_init+0xa0>
        }

        HAL_Delay(100);
 80047e6:	2064      	movs	r0, #100	@ 0x64
 80047e8:	f006 f902 	bl	800a9f0 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80047ec:	e001      	b.n	80047f2 <optiga_init+0x6e>
        {
            pal_os_event_trigger_registered_callback();
 80047ee:	f003 f8a3 	bl	8007938 <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <optiga_init+0xc0>)
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d0f8      	beq.n	80047ee <optiga_init+0x6a>
        }

        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 80047fc:	4b11      	ldr	r3, [pc, #68]	@ (8004844 <optiga_init+0xc0>)
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <optiga_init+0x8a>
        {
            printf("✅ OPTIGA Trust M initialized successfully.\r\n");
 8004806:	4811      	ldr	r0, [pc, #68]	@ (800484c <optiga_init+0xc8>)
 8004808:	f00c fb3e 	bl	8010e88 <puts>
            break;
 800480c:	e00b      	b.n	8004826 <optiga_init+0xa2>
        }
        else
        {
            printf("❌ OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <optiga_init+0xc0>)
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	480e      	ldr	r0, [pc, #56]	@ (8004850 <optiga_init+0xcc>)
 8004818:	f00c face 	bl	8010db8 <iprintf>
            HAL_Delay(2000);
 800481c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004820:	f006 f8e6 	bl	800a9f0 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8004824:	e7cd      	b.n	80047c2 <optiga_init+0x3e>
        }
    }
}
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000500 	.word	0x20000500
 8004830:	080046c9 	.word	0x080046c9
 8004834:	20000714 	.word	0x20000714
 8004838:	080125f4 	.word	0x080125f4
 800483c:	200005e4 	.word	0x200005e4
 8004840:	08012620 	.word	0x08012620
 8004844:	20000718 	.word	0x20000718
 8004848:	08012644 	.word	0x08012644
 800484c:	08012684 	.word	0x08012684
 8004850:	080126b4 	.word	0x080126b4

08004854 <verify_firmware_signature>:

// ---------- Internal Function ----------
static bool verify_firmware_signature(uint32_t size)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b0d2      	sub	sp, #328	@ 0x148
 8004858:	af04      	add	r7, sp, #16
 800485a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800485e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004862:	6018      	str	r0, [r3, #0]
    uint32_t firmware_size = size - SIGNATURE_SIZE;
 8004864:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004868:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3b47      	subs	r3, #71	@ 0x47
 8004870:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    const uint8_t *firmware_ptr = (const uint8_t *)APPLICATION_ADDRESS;
 8004874:	4b78      	ldr	r3, [pc, #480]	@ (8004a58 <verify_firmware_signature+0x204>)
 8004876:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    uint8_t calc_hash[SHA_SIZE];
    uint8_t signature[SIGNATURE_SIZE];

    // 1. Calculate SHA-256 hash of firmware
    mbedtls_sha256_context ctx;
    mbedtls_sha256_init(&ctx);
 800487a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800487e:	4618      	mov	r0, r3
 8004880:	f003 f908 	bl	8007a94 <mbedtls_sha256_init>

    if (mbedtls_sha256_starts_ret(&ctx, 0) != 0 ||
 8004884:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f003 f920 	bl	8007ad0 <mbedtls_sha256_starts_ret>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d116      	bne.n	80048c4 <verify_firmware_signature+0x70>
        mbedtls_sha256_update_ret(&ctx, firmware_ptr, firmware_size) != 0 ||
 8004896:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800489a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800489e:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80048a2:	4618      	mov	r0, r3
 80048a4:	f004 fec8 	bl	8009638 <mbedtls_sha256_update_ret>
 80048a8:	4603      	mov	r3, r0
    if (mbedtls_sha256_starts_ret(&ctx, 0) != 0 ||
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <verify_firmware_signature+0x70>
        mbedtls_sha256_finish_ret(&ctx, calc_hash) != 0)
 80048ae:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 80048b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f004 ff32 	bl	8009722 <mbedtls_sha256_finish_ret>
 80048be:	4603      	mov	r3, r0
        mbedtls_sha256_update_ret(&ctx, firmware_ptr, firmware_size) != 0 ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <verify_firmware_signature+0x84>
    {
        printf("❌ SHA-256 calculation failed.\r\n");
 80048c4:	4865      	ldr	r0, [pc, #404]	@ (8004a5c <verify_firmware_signature+0x208>)
 80048c6:	f00c fadf 	bl	8010e88 <puts>
        mbedtls_sha256_free(&ctx);
 80048ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048ce:	4618      	mov	r0, r3
 80048d0:	f003 f8ed 	bl	8007aae <mbedtls_sha256_free>
        return false;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e0b9      	b.n	8004a4c <verify_firmware_signature+0x1f8>
    }

    mbedtls_sha256_free(&ctx);
 80048d8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048dc:	4618      	mov	r0, r3
 80048de:	f003 f8e6 	bl	8007aae <mbedtls_sha256_free>
    printf("✅ SHA-256 hash calculated:\r\n");
 80048e2:	485f      	ldr	r0, [pc, #380]	@ (8004a60 <verify_firmware_signature+0x20c>)
 80048e4:	f00c fad0 	bl	8010e88 <puts>
    for (int i = 0; i < SHA_SIZE; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80048ee:	e00e      	b.n	800490e <verify_firmware_signature+0xba>
        printf("%02X", calc_hash[i]);
 80048f0:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 80048f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80048f8:	4413      	add	r3, r2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	4619      	mov	r1, r3
 80048fe:	4859      	ldr	r0, [pc, #356]	@ (8004a64 <verify_firmware_signature+0x210>)
 8004900:	f00c fa5a 	bl	8010db8 <iprintf>
    for (int i = 0; i < SHA_SIZE; i++)
 8004904:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004908:	3301      	adds	r3, #1
 800490a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800490e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004912:	2b1f      	cmp	r3, #31
 8004914:	ddec      	ble.n	80048f0 <verify_firmware_signature+0x9c>
    printf("\r\n");
 8004916:	4854      	ldr	r0, [pc, #336]	@ (8004a68 <verify_firmware_signature+0x214>)
 8004918:	f00c fab6 	bl	8010e88 <puts>

    // 2. Copy signature from flash
    memcpy(signature, (uint8_t *)(APPLICATION_ADDRESS + firmware_size), SIGNATURE_SIZE);
 800491c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004920:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8004924:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8004928:	461a      	mov	r2, r3
 800492a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800492e:	4611      	mov	r1, r2
 8004930:	2247      	movs	r2, #71	@ 0x47
 8004932:	4618      	mov	r0, r3
 8004934:	f00c fb15 	bl	8010f62 <memcpy>

    // 3. Read public key from OPTIGA
    uint8_t public_key[65];
    uint16_t public_key_len = sizeof(public_key);
 8004938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800493c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8004940:	2241      	movs	r2, #65	@ 0x41
 8004942:	801a      	strh	r2, [r3, #0]
    optiga_lib_status = optiga_util_read_data(me_util, SIGNATURE_OID, 0, public_key, &public_key_len);
 8004944:	4b49      	ldr	r3, [pc, #292]	@ (8004a6c <verify_firmware_signature+0x218>)
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	f107 020c 	add.w	r2, r7, #12
 800494c:	f107 030a 	add.w	r3, r7, #10
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	2200      	movs	r2, #0
 8004956:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 800495a:	f002 fc69 	bl	8007230 <optiga_util_read_data>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	4b43      	ldr	r3, [pc, #268]	@ (8004a70 <verify_firmware_signature+0x21c>)
 8004964:	801a      	strh	r2, [r3, #0]
    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8004966:	4b42      	ldr	r3, [pc, #264]	@ (8004a70 <verify_firmware_signature+0x21c>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <verify_firmware_signature+0x12a>
    {
        printf("❌ Failed to read public key from OID 0x%04X\r\n", SIGNATURE_OID);
 8004970:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8004974:	483f      	ldr	r0, [pc, #252]	@ (8004a74 <verify_firmware_signature+0x220>)
 8004976:	f00c fa1f 	bl	8010db8 <iprintf>
        return false;
 800497a:	2300      	movs	r3, #0
 800497c:	e066      	b.n	8004a4c <verify_firmware_signature+0x1f8>
    }

    printf("✅ Public key (OID 0x%04X):\r\n", SIGNATURE_OID);
 800497e:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8004982:	483d      	ldr	r0, [pc, #244]	@ (8004a78 <verify_firmware_signature+0x224>)
 8004984:	f00c fa18 	bl	8010db8 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800498e:	e010      	b.n	80049b2 <verify_firmware_signature+0x15e>
        printf("%02X", public_key[i]);
 8004990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004994:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8004998:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800499c:	4413      	add	r3, r2
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	4619      	mov	r1, r3
 80049a2:	4830      	ldr	r0, [pc, #192]	@ (8004a64 <verify_firmware_signature+0x210>)
 80049a4:	f00c fa08 	bl	8010db8 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 80049a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80049ac:	3301      	adds	r3, #1
 80049ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80049b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049b6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80049c2:	4293      	cmp	r3, r2
 80049c4:	dbe4      	blt.n	8004990 <verify_firmware_signature+0x13c>
    printf("\r\n");
 80049c6:	4828      	ldr	r0, [pc, #160]	@ (8004a68 <verify_firmware_signature+0x214>)
 80049c8:	f00c fa5e 	bl	8010e88 <puts>

    // 4. Verify signature using OPTIGA
    optiga_crypt_t *me_crypt = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 80049cc:	2200      	movs	r2, #0
 80049ce:	492b      	ldr	r1, [pc, #172]	@ (8004a7c <verify_firmware_signature+0x228>)
 80049d0:	2000      	movs	r0, #0
 80049d2:	f001 ffdb 	bl	800698c <optiga_crypt_create>
 80049d6:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (!me_crypt)
 80049da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <verify_firmware_signature+0x198>
    {
        printf("❌ Failed to create OPTIGA crypt instance!\r\n");
 80049e2:	4827      	ldr	r0, [pc, #156]	@ (8004a80 <verify_firmware_signature+0x22c>)
 80049e4:	f00c fa50 	bl	8010e88 <puts>
        return false;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e02f      	b.n	8004a4c <verify_firmware_signature+0x1f8>
    }

    optiga_lib_status = OPTIGA_LIB_BUSY;
 80049ec:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <verify_firmware_signature+0x21c>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	801a      	strh	r2, [r3, #0]
    optiga_crypt_ecdsa_verify(me_crypt,
 80049f2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80049f6:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 80049fa:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <verify_firmware_signature+0x230>)
 80049fc:	9202      	str	r2, [sp, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	9201      	str	r2, [sp, #4]
 8004a02:	2247      	movs	r2, #71	@ 0x47
 8004a04:	9200      	str	r2, [sp, #0]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004a0c:	f002 f826 	bl	8006a5c <optiga_crypt_ecdsa_verify>
                               calc_hash, SHA_SIZE,
                               signature, SIGNATURE_SIZE,
                               OPTIGA_CRYPT_OID_DATA, &public_key_oid);

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8004a10:	e001      	b.n	8004a16 <verify_firmware_signature+0x1c2>
        pal_os_event_trigger_registered_callback();
 8004a12:	f002 ff91 	bl	8007938 <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8004a16:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <verify_firmware_signature+0x21c>)
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d0f8      	beq.n	8004a12 <verify_firmware_signature+0x1be>

    optiga_crypt_destroy(me_crypt);
 8004a20:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004a24:	f001 fff6 	bl	8006a14 <optiga_crypt_destroy>

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <verify_firmware_signature+0x21c>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <verify_firmware_signature+0x1f0>
    {
        printf("❌ Signature verification FAILED! Status: 0x%04X\r\n", optiga_lib_status);
 8004a32:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <verify_firmware_signature+0x21c>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4813      	ldr	r0, [pc, #76]	@ (8004a88 <verify_firmware_signature+0x234>)
 8004a3c:	f00c f9bc 	bl	8010db8 <iprintf>
        return false;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e003      	b.n	8004a4c <verify_firmware_signature+0x1f8>
    }

    printf("✅ Firmware signature verified successfully.\r\n");
 8004a44:	4811      	ldr	r0, [pc, #68]	@ (8004a8c <verify_firmware_signature+0x238>)
 8004a46:	f00c fa1f 	bl	8010e88 <puts>
    return true;
 8004a4a:	2301      	movs	r3, #1
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	08020000 	.word	0x08020000
 8004a5c:	080126e8 	.word	0x080126e8
 8004a60:	0801270c 	.word	0x0801270c
 8004a64:	0801272c 	.word	0x0801272c
 8004a68:	08012734 	.word	0x08012734
 8004a6c:	20000714 	.word	0x20000714
 8004a70:	20000718 	.word	0x20000718
 8004a74:	08012738 	.word	0x08012738
 8004a78:	08012768 	.word	0x08012768
 8004a7c:	080046ed 	.word	0x080046ed
 8004a80:	08012788 	.word	0x08012788
 8004a84:	200004cc 	.word	0x200004cc
 8004a88:	080127b8 	.word	0x080127b8
 8004a8c:	080127ec 	.word	0x080127ec

08004a90 <optiga_deinit>:
void optiga_deinit(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
    if (me_util != NULL)
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <optiga_deinit+0x38>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <optiga_deinit+0x22>
    {
        optiga_util_destroy(me_util);
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <optiga_deinit+0x38>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f002 fb3d 	bl	8007120 <optiga_util_destroy>
        me_util = NULL;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <optiga_deinit+0x38>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
        printf("✅ OPTIGA util instance destroyed.\r\n");
 8004aac:	4807      	ldr	r0, [pc, #28]	@ (8004acc <optiga_deinit+0x3c>)
 8004aae:	f00c f9eb 	bl	8010e88 <puts>
    }

    // Optional: Power down or reset VDD if needed
    pal_gpio_set_low(&optiga_vdd_0);
 8004ab2:	4807      	ldr	r0, [pc, #28]	@ (8004ad0 <optiga_deinit+0x40>)
 8004ab4:	f002 fcc2 	bl	800743c <pal_gpio_set_low>
    HAL_Delay(10);
 8004ab8:	200a      	movs	r0, #10
 8004aba:	f005 ff99 	bl	800a9f0 <HAL_Delay>
    printf("🔌 OPTIGA VDD set low (powered down).\r\n");
 8004abe:	4805      	ldr	r0, [pc, #20]	@ (8004ad4 <optiga_deinit+0x44>)
 8004ac0:	f00c f9e2 	bl	8010e88 <puts>
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000714 	.word	0x20000714
 8004acc:	0801281c 	.word	0x0801281c
 8004ad0:	20000500 	.word	0x20000500
 8004ad4:	08012844 	.word	0x08012844

08004ad8 <verify_firmware_integrity>:
// ---------- Global Function ----------
bool verify_firmware_integrity(uint32_t size)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    return verify_firmware_signature(size);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff feb7 	bl	8004854 <verify_firmware_signature>
 8004ae6:	4603      	mov	r3, r0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
 8004afc:	4613      	mov	r3, r2
 8004afe:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8004b00:	78bb      	ldrb	r3, [r7, #2]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d00e      	beq.n	8004b24 <optiga_cmd_set_shielded_connection_option+0x34>
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	dc10      	bgt.n	8004b2c <optiga_cmd_set_shielded_connection_option+0x3c>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <optiga_cmd_set_shielded_connection_option+0x24>
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d004      	beq.n	8004b1c <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 8004b12:	e00b      	b.n	8004b2c <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	769a      	strb	r2, [r3, #26]
        break;
 8004b1a:	e008      	b.n	8004b2e <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	76da      	strb	r2, [r3, #27]
        break;
 8004b22:	e004      	b.n	8004b2e <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	771a      	strb	r2, [r3, #28]
        break;
 8004b2a:	e000      	b.n	8004b2e <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8004b2c:	bf00      	nop
    }
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4603      	mov	r3, r0
 8004b44:	71fb      	strb	r3, [r7, #7]
 8004b46:	460b      	mov	r3, r1
 8004b48:	71bb      	strb	r3, [r7, #6]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	79ba      	ldrb	r2, [r7, #6]
 8004b5a:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004b5c:	88bb      	ldrh	r3, [r7, #4]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	3302      	adds	r3, #2
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	3303      	adds	r3, #3
 8004b6e:	88ba      	ldrh	r2, [r7, #4]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60ba      	str	r2, [r7, #8]
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 8004b98:	8afb      	ldrh	r3, [r7, #22]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	82fa      	strh	r2, [r7, #22]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8004ba8:	89bb      	ldrh	r3, [r7, #12]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	1c59      	adds	r1, r3, #1
 8004bb2:	82f9      	strh	r1, [r7, #22]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	440b      	add	r3, r1
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 8004bbe:	8afb      	ldrh	r3, [r7, #22]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	82fa      	strh	r2, [r7, #22]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	89ba      	ldrh	r2, [r7, #12]
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8afa      	ldrh	r2, [r7, #22]
 8004bd4:	801a      	strh	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8004bea:	2100      	movs	r1, #0
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 ff6f 	bl	8005ad0 <optiga_cmd_execute_handler>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	461a      	mov	r2, r3
 8004c06:	460b      	mov	r3, r1
 8004c08:	72fb      	strb	r3, [r7, #11]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	7aba      	ldrb	r2, [r7, #10]
 8004c18:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	7e3a      	ldrb	r2, [r7, #24]
 8004c1e:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	7afa      	ldrb	r2, [r7, #11]
 8004c30:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8c3a      	ldrh	r2, [r7, #32]
 8004c36:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 ff48 	bl	8005ad0 <optiga_cmd_execute_handler>
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3308      	adds	r3, #8
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 ff63 	bl	8006b20 <optiga_common_get_uint32>
 8004c5a:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 8004c62:	d201      	bcs.n	8004c68 <optiga_cmd_session_available+0x20>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <optiga_cmd_session_available+0x22>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8a9b      	ldrh	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11d      	bne.n	8004cc8 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e017      	b.n	8004cc2 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d00e      	beq.n	8004cbc <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	b21a      	sxth	r2, r3
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <optiga_cmd_session_assign+0x60>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	701a      	strb	r2, [r3, #0]
                break;
 8004cb8:	bf00      	nop
            }
        }
    }
}
 8004cba:	e005      	b.n	8004cc8 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d9e4      	bls.n	8004c92 <optiga_cmd_session_assign+0x1e>
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	ffffe100 	.word	0xffffe100

08004cd8 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8a9b      	ldrh	r3, [r3, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8a9b      	ldrh	r3, [r3, #20]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
    }
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
 8004d24:	4613      	mov	r3, r2
 8004d26:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]
 8004d34:	e027      	b.n	8004d86 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d002      	beq.n	8004d42 <optiga_cmd_queue_get_count_of+0x2a>
 8004d3c:	2b09      	cmp	r3, #9
 8004d3e:	d00c      	beq.n	8004d5a <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 8004d40:	e017      	b.n	8004d72 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	737b      	strb	r3, [r7, #13]
            break;
 8004d58:	e00b      	b.n	8004d72 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	737b      	strb	r3, [r7, #13]
            break;
 8004d70:	bf00      	nop
        }
        if (state_to_check == slot_value)
 8004d72:	78ba      	ldrb	r2, [r7, #2]
 8004d74:	7b7b      	ldrb	r3, [r7, #13]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d102      	bne.n	8004d80 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 8004d7a:	7bbb      	ldrb	r3, [r7, #14]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	3301      	adds	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d9d4      	bls.n	8004d36 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8004d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e01f      	b.n	8004dea <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6819      	ldr	r1, [r3, #0]
 8004dae:	7bfa      	ldrb	r2, [r7, #15]
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
           break;
 8004de2:	e006      	b.n	8004df2 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	3301      	adds	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d9dc      	bls.n	8004daa <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7f9b      	ldrb	r3, [r3, #30]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	460b      	mov	r3, r1
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	440b      	add	r3, r1
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7f9b      	ldrb	r3, [r3, #30]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	440b      	add	r3, r1
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	779a      	strb	r2, [r3, #30]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e5c:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 8004e5e:	23ff      	movs	r3, #255	@ 0xff
 8004e60:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004e70:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004e72:	2202      	movs	r2, #2
 8004e74:	2109      	movs	r1, #9
 8004e76:	6978      	ldr	r0, [r7, #20]
 8004e78:	f7ff ff4e 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d107      	bne.n	8004e92 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004e82:	2208      	movs	r2, #8
 8004e84:	2109      	movs	r1, #9
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff ff46 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8004e8c:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00f      	beq.n	8004eb2 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004e92:	2204      	movs	r2, #4
 8004e94:	2109      	movs	r1, #9
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff ff3e 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8004e9c:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10f      	bne.n	8004ec2 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 8004ea2:	2223      	movs	r2, #35	@ 0x23
 8004ea4:	2108      	movs	r1, #8
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff36 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8004eac:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 8004eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	496d      	ldr	r1, [pc, #436]	@ (8005070 <optiga_cmd_queue_scheduler+0x220>)
 8004eba:	6938      	ldr	r0, [r7, #16]
 8004ebc:	f002 fd10 	bl	80078e0 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8004ec0:	e0d2      	b.n	8005068 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 8004ec2:	6938      	ldr	r0, [r7, #16]
 8004ec4:	f002 fce6 	bl	8007894 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 8004ec8:	7e7b      	ldrb	r3, [r7, #25]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	76fb      	strb	r3, [r7, #27]
 8004ede:	e05b      	b.n	8004f98 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8004ee0:	7efa      	ldrb	r2, [r7, #27]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	2109      	movs	r1, #9
 8004ef8:	6978      	ldr	r0, [r7, #20]
 8004efa:	f7ff ff0d 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10d      	bne.n	8004f20 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	7a5b      	ldrb	r3, [r3, #9]
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d142      	bne.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004f10:	2b23      	cmp	r3, #35	@ 0x23
 8004f12:	d13e      	bne.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8004f1a:	7efb      	ldrb	r3, [r7, #27]
 8004f1c:	76bb      	strb	r3, [r7, #26]
 8004f1e:	e038      	b.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	7a5b      	ldrb	r3, [r3, #9]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d134      	bne.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d201      	bcs.n	8004f3a <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d326      	bcc.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d31f      	bcc.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004f56:	2b22      	cmp	r3, #34	@ 0x22
 8004f58:	d105      	bne.n	8004f66 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f7ff fe74 	bl	8004c48 <optiga_cmd_session_available>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d010      	beq.n	8004f88 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004f6a:	2b22      	cmp	r3, #34	@ 0x22
 8004f6c:	d104      	bne.n	8004f78 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	8a9b      	ldrh	r3, [r3, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004f7c:	2b21      	cmp	r3, #33	@ 0x21
 8004f7e:	d003      	beq.n	8004f88 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004f84:	2b23      	cmp	r3, #35	@ 0x23
 8004f86:	d104      	bne.n	8004f92 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 8004f8e:	7efb      	ldrb	r3, [r7, #27]
 8004f90:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004f92:	7efb      	ldrb	r3, [r7, #27]
 8004f94:	3301      	adds	r3, #1
 8004f96:	76fb      	strb	r3, [r7, #27]
 8004f98:	7efb      	ldrb	r3, [r7, #27]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d9a0      	bls.n	8004ee0 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8004f9e:	7ebb      	ldrb	r3, [r7, #26]
 8004fa0:	2bff      	cmp	r3, #255	@ 0xff
 8004fa2:	d102      	bne.n	8004faa <optiga_cmd_queue_scheduler+0x15a>
 8004fa4:	7e7b      	ldrb	r3, [r7, #25]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d08e      	beq.n	8004ec8 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 8004faa:	7ebb      	ldrb	r3, [r7, #26]
 8004fac:	2bff      	cmp	r3, #255	@ 0xff
 8004fae:	d054      	beq.n	800505a <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 8004fb0:	7eba      	ldrb	r2, [r7, #26]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004fc4:	7eba      	ldrb	r2, [r7, #26]
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b22      	cmp	r3, #34	@ 0x22
 8004fda:	d111      	bne.n	8005000 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8004fe6:	7eba      	ldrb	r2, [r7, #26]
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fe3a 	bl	8004c74 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8005000:	7eba      	ldrb	r2, [r7, #26]
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800501a:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 800501c:	7eba      	ldrb	r2, [r7, #26]
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2332      	movs	r3, #50	@ 0x32
 8005032:	4910      	ldr	r1, [pc, #64]	@ (8005074 <optiga_cmd_queue_scheduler+0x224>)
 8005034:	6938      	ldr	r0, [r7, #16]
 8005036:	f002 fc53 	bl	80078e0 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 800503a:	7eba      	ldrb	r2, [r7, #26]
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	4613      	mov	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800504c:	2204      	movs	r2, #4
 800504e:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8005058:	e006      	b.n	8005068 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 800505a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4903      	ldr	r1, [pc, #12]	@ (8005070 <optiga_cmd_queue_scheduler+0x220>)
 8005062:	6938      	ldr	r0, [r7, #16]
 8005064:	f002 fc3c 	bl	80078e0 <pal_os_event_register_callback_oneshot>
}
 8005068:	bf00      	nop
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	08004e51 	.word	0x08004e51
 8005074:	08004be3 	.word	0x08004be3

08005078 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8005078:	b5b0      	push	{r4, r5, r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	7f9b      	ldrb	r3, [r3, #30]
 800508c:	4619      	mov	r1, r3
 800508e:	460b      	mov	r3, r1
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	440b      	add	r3, r1
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b23      	cmp	r3, #35	@ 0x23
 80050a0:	d111      	bne.n	80050c6 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7f9b      	ldrb	r3, [r3, #30]
 80050aa:	4619      	mov	r1, r3
 80050ac:	460b      	mov	r3, r1
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	440b      	add	r3, r1
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80050ba:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80050bc:	2b23      	cmp	r3, #35	@ 0x23
 80050be:	d112      	bne.n	80050e6 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b23      	cmp	r3, #35	@ 0x23
 80050c4:	d00f      	beq.n	80050e6 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681c      	ldr	r4, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	7f9b      	ldrb	r3, [r3, #30]
 80050ce:	461d      	mov	r5, r3
 80050d0:	f002 fcc2 	bl	8007a58 <pal_os_timer_get_time_in_microseconds>
 80050d4:	4602      	mov	r2, r0
 80050d6:	462b      	mov	r3, r5
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	442b      	add	r3, r5
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4423      	add	r3, r4
 80050e0:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80050e4:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	7f9b      	ldrb	r3, [r3, #30]
 80050ee:	4619      	mov	r1, r3
 80050f0:	460b      	mov	r3, r1
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	440b      	add	r3, r1
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	7f9b      	ldrb	r3, [r3, #30]
 800510a:	4619      	mov	r1, r3
 800510c:	460b      	mov	r3, r1
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	440b      	add	r3, r1
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b23      	cmp	r3, #35	@ 0x23
 800511e:	d111      	bne.n	8005144 <optiga_cmd_queue_update_slot+0xcc>
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	2b23      	cmp	r3, #35	@ 0x23
 8005124:	d10e      	bne.n	8005144 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	7f9b      	ldrb	r3, [r3, #30]
 800512e:	4619      	mov	r1, r3
 8005130:	460b      	mov	r3, r1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	440b      	add	r3, r1
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800513e:	2208      	movs	r2, #8
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e00d      	b.n	8005160 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7f9b      	ldrb	r3, [r3, #30]
 800514c:	4619      	mov	r1, r3
 800514e:	460b      	mov	r3, r1
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	440b      	add	r3, r1
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800515c:	2202      	movs	r2, #2
 800515e:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	7f9b      	ldrb	r3, [r3, #30]
 8005168:	4619      	mov	r1, r3
 800516a:	460b      	mov	r3, r1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	440b      	add	r3, r1
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8005178:	78fa      	ldrb	r2, [r7, #3]
 800517a:	701a      	strb	r2, [r3, #0]
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bdb0      	pop	{r4, r5, r7, pc}

08005184 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7f9b      	ldrb	r3, [r3, #30]
 8005194:	4619      	mov	r1, r3
 8005196:	460b      	mov	r3, r1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	440b      	add	r3, r1
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051a8:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7f9b      	ldrb	r3, [r3, #30]
 80051b2:	4619      	mov	r1, r3
 80051b4:	460b      	mov	r3, r1
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	440b      	add	r3, r1
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7f9b      	ldrb	r3, [r3, #30]
 80051ce:	4619      	mov	r1, r3
 80051d0:	460b      	mov	r3, r1
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	440b      	add	r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7f9b      	ldrb	r3, [r3, #30]
 80051ea:	4619      	mov	r1, r3
 80051ec:	460b      	mov	r3, r1
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	440b      	add	r3, r1
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	4903      	ldr	r1, [pc, #12]	@ (800521c <optiga_cmd_queue_reset_slot+0x98>)
 800520e:	f002 fb29 	bl	8007864 <pal_os_event_start>
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	08004e51 	.word	0x08004e51

08005220 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7f9b      	ldrb	r3, [r3, #30]
 8005230:	4619      	mov	r1, r3
 8005232:	460b      	mov	r3, r1
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	440b      	add	r3, r1
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7f9b      	ldrb	r3, [r3, #30]
 800524c:	4619      	mov	r1, r3
 800524e:	460b      	mov	r3, r1
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	440b      	add	r3, r1
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8005274:	2122      	movs	r1, #34	@ 0x22
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fefe 	bl	8005078 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fd22 	bl	8004cd8 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fee2 	bl	8005078 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ff5c 	bl	8005184 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80052de:	f240 2302 	movw	r3, #514	@ 0x202
 80052e2:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 80052ec:	2308      	movs	r3, #8
 80052ee:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 80052fc:	f107 020c 	add.w	r2, r7, #12
 8005300:	4619      	mov	r1, r3
 8005302:	f002 fa27 	bl	8007754 <pal_os_datastore_read>
 8005306:	4603      	mov	r3, r0
 8005308:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11a      	bne.n	8005346 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005318:	4618      	mov	r0, r3
 800531a:	f001 fc01 	bl	8006b20 <optiga_common_get_uint32>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10d      	bne.n	8005340 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fbf7 	bl	8006b20 <optiga_common_get_uint32>
 8005332:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8005338:	f240 2302 	movw	r3, #514	@ 0x202
 800533c:	81fb      	strh	r3, [r7, #14]
            break;
 800533e:	e003      	b.n	8005348 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8005340:	2300      	movs	r3, #0
 8005342:	81fb      	strh	r3, [r7, #14]
 8005344:	e000      	b.n	8005348 <optiga_cmd_restore_context+0x72>
                break;
 8005346:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8005348:	89fb      	ldrh	r3, [r7, #14]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	7e5b      	ldrb	r3, [r3, #25]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d029      	beq.n	80053ba <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 800536a:	2b22      	cmp	r3, #34	@ 0x22
 800536c:	d125      	bne.n	80053ba <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005376:	2208      	movs	r2, #8
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f002 fb54 	bl	8007a28 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005384:	2b33      	cmp	r3, #51	@ 0x33
 8005386:	d118      	bne.n	80053ba <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 800538c:	2b00      	cmp	r3, #0
 800538e:	d014      	beq.n	80053ba <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800539c:	2208      	movs	r2, #8
 800539e:	4619      	mov	r1, r3
 80053a0:	f002 f95a 	bl	8007658 <pal_os_datastore_write>
 80053a4:	4603      	mov	r3, r0
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8c1b      	ldrh	r3, [r3, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2204      	movs	r2, #4
 80053b8:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	7ddb      	ldrb	r3, [r3, #23]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d05f      	beq.n	800549c <optiga_cmd_execute_comms_open+0xd8>
 80053dc:	2b02      	cmp	r3, #2
 80053de:	dc6d      	bgt.n	80054bc <optiga_cmd_execute_comms_open+0xf8>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <optiga_cmd_execute_comms_open+0x26>
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d01b      	beq.n	8005420 <optiga_cmd_execute_comms_open+0x5c>
 80053e8:	e068      	b.n	80054bc <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80053ea:	2121      	movs	r1, #33	@ 0x21
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff56 	bl	800529e <optiga_cmd_request_lock>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8c1b      	ldrh	r3, [r3, #32]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	759a      	strb	r2, [r3, #22]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f240 2202 	movw	r2, #514	@ 0x202
 800540e:	841a      	strh	r2, [r3, #32]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
                    break;
 8005416:	e05c      	b.n	80054d2 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	75da      	strb	r2, [r3, #23]
                break;
 800541e:	e058      	b.n	80054d2 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	7e92      	ldrb	r2, [r2, #26]
 800542a:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	7ed2      	ldrb	r2, [r2, #27]
 8005436:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	7f12      	ldrb	r2, [r2, #28]
 8005442:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005452:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4618      	mov	r0, r3
 800545e:	f001 f8e4 	bl	800662a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f001 f8ed 	bl	8006648 <optiga_comms_open>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8c1b      	ldrh	r3, [r3, #32]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2204      	movs	r2, #4
 8005482:	759a      	strb	r2, [r3, #22]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f240 2202 	movw	r2, #514	@ 0x202
 800548a:	841a      	strh	r2, [r3, #32]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
                    break;
 8005492:	e01e      	b.n	80054d2 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	75da      	strb	r2, [r3, #23]
                break;
 800549a:	e01a      	b.n	80054d2 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80054a4:	2332      	movs	r3, #50	@ 0x32
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4910      	ldr	r1, [pc, #64]	@ (80054ec <optiga_cmd_execute_comms_open+0x128>)
 80054aa:	f002 fa19 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2209      	movs	r2, #9
 80054b8:	75da      	strb	r2, [r3, #23]
                break;
 80054ba:	e00a      	b.n	80054d2 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	759a      	strb	r2, [r3, #22]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f240 2202 	movw	r2, #514	@ 0x202
 80054c8:	841a      	strh	r2, [r3, #32]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
            break;
 80054d0:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <optiga_cmd_execute_comms_open+0x120>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7d9b      	ldrb	r3, [r3, #22]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f43f af75 	beq.w	80053ce <optiga_cmd_execute_comms_open+0xa>
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08004be3 	.word	0x08004be3

080054f0 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	7ddb      	ldrb	r3, [r3, #23]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d002      	beq.n	800550e <optiga_cmd_execute_comms_close+0x1e>
 8005508:	2b04      	cmp	r3, #4
 800550a:	d068      	beq.n	80055de <optiga_cmd_execute_comms_close+0xee>
 800550c:	e07a      	b.n	8005604 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7f1b      	ldrb	r3, [r3, #28]
 8005512:	2b22      	cmp	r3, #34	@ 0x22
 8005514:	d002      	beq.n	800551c <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2204      	movs	r2, #4
 800551a:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	7e92      	ldrb	r2, [r2, #26]
 8005526:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	7ed2      	ldrb	r2, [r2, #27]
 8005532:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 800553c:	2b00      	cmp	r3, #0
 800553e:	d006      	beq.n	800554e <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	7f12      	ldrb	r2, [r2, #28]
 800554a:	751a      	strb	r2, [r3, #20]
 800554c:	e004      	b.n	8005558 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2233      	movs	r2, #51	@ 0x33
 8005556:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2204      	movs	r2, #4
 8005566:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005576:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4618      	mov	r0, r3
 8005582:	f001 f852 	bl	800662a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f001 f8d9 	bl	8006744 <optiga_comms_close>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8c1b      	ldrh	r3, [r3, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2204      	movs	r2, #4
 80055a6:	759a      	strb	r2, [r3, #22]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f240 2202 	movw	r2, #514	@ 0x202
 80055ae:	841a      	strh	r2, [r3, #32]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
                    break;
 80055b6:	e031      	b.n	800561c <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7f1b      	ldrb	r3, [r3, #28]
 80055bc:	2b22      	cmp	r3, #34	@ 0x22
 80055be:	d106      	bne.n	80055ce <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2204      	movs	r2, #4
 80055c4:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 80055cc:	e026      	b.n	800561c <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fe75 	bl	80052be <optiga_cmd_release_lock>
 80055d4:	4603      	mov	r3, r0
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	841a      	strh	r2, [r3, #32]
                break;
 80055dc:	e01e      	b.n	800561c <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68d2      	ldr	r2, [r2, #12]
 80055e6:	2100      	movs	r1, #0
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7f1b      	ldrb	r3, [r3, #28]
 80055f0:	2b22      	cmp	r3, #34	@ 0x22
 80055f2:	d112      	bne.n	800561a <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fe62 	bl	80052be <optiga_cmd_release_lock>
 80055fa:	4603      	mov	r3, r0
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8005602:	e00a      	b.n	800561a <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2204      	movs	r2, #4
 8005608:	759a      	strb	r2, [r3, #22]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f240 2202 	movw	r2, #514	@ 0x202
 8005610:	841a      	strh	r2, [r3, #32]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
            break;
 8005618:	e000      	b.n	800561c <optiga_cmd_execute_comms_close+0x12c>
                break;
 800561a:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <optiga_cmd_execute_comms_close+0x13e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	7d9b      	ldrb	r3, [r3, #22]
 8005628:	2b01      	cmp	r3, #1
 800562a:	f43f af66 	beq.w	80054fa <optiga_cmd_execute_comms_close+0xa>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b087      	sub	sp, #28
 800563c:	af02      	add	r7, sp, #8
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7ddb      	ldrb	r3, [r3, #23]
 800564c:	3b05      	subs	r3, #5
 800564e:	2b04      	cmp	r3, #4
 8005650:	f200 80d6 	bhi.w	8005800 <optiga_cmd_execute_prepare_command+0x1c8>
 8005654:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <optiga_cmd_execute_prepare_command+0x24>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005671 	.word	0x08005671
 8005660:	08005671 	.word	0x08005671
 8005664:	080056c5 	.word	0x080056c5
 8005668:	080056d9 	.word	0x080056d9
 800566c:	08005715 	.word	0x08005715
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	7ddb      	ldrb	r3, [r3, #23]
 800567a:	2b05      	cmp	r3, #5
 800567c:	d107      	bne.n	800568e <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fdf4 	bl	800526c <optiga_cmd_request_session>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	841a      	strh	r2, [r3, #32]
 800568c:	e007      	b.n	800569e <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800568e:	2121      	movs	r1, #33	@ 0x21
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe04 	bl	800529e <optiga_cmd_request_lock>
 8005696:	4603      	mov	r3, r0
 8005698:	461a      	mov	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	8c1b      	ldrh	r3, [r3, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	759a      	strb	r2, [r3, #22]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f240 2202 	movw	r2, #514	@ 0x202
 80056b2:	841a      	strh	r2, [r3, #32]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
                    break;
 80056ba:	e0ac      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2209      	movs	r2, #9
 80056c0:	75da      	strb	r2, [r3, #23]
                break;
 80056c2:	e0a8      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fdab 	bl	8005220 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2208      	movs	r2, #8
 80056ce:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
                break;
 80056d6:	e09e      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 80056d8:	2123      	movs	r1, #35	@ 0x23
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fddf 	bl	800529e <optiga_cmd_request_lock>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8c1b      	ldrh	r3, [r3, #32]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2204      	movs	r2, #4
 80056f4:	759a      	strb	r2, [r3, #22]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f240 2202 	movw	r2, #514	@ 0x202
 80056fc:	841a      	strh	r2, [r3, #32]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
                    break;
 8005704:	e087      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2209      	movs	r2, #9
 800570a:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
                break;
 8005712:	e080      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8c1b      	ldrh	r3, [r3, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2204      	movs	r2, #4
 8005734:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
                    break;
 800573c:	e06b      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f240 6222 	movw	r2, #1570	@ 0x622
 8005746:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	7e92      	ldrb	r2, [r2, #26]
 8005752:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	7ed2      	ldrb	r2, [r2, #27]
 800575e:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7e9a      	ldrb	r2, [r3, #26]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 ff52 	bl	800662a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005798:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80057a6:	3306      	adds	r3, #6
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4623      	mov	r3, r4
 80057ac:	f000 ff84 	bl	80066b8 <optiga_comms_transceive>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8c1b      	ldrh	r3, [r3, #32]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	759a      	strb	r2, [r3, #22]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f240 2202 	movw	r2, #514	@ 0x202
 80057cc:	841a      	strh	r2, [r3, #32]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
                    break;
 80057d4:	e01f      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2203      	movs	r2, #3
 80057da:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	220a      	movs	r2, #10
 80057e0:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7f5b      	ldrb	r3, [r3, #29]
 80057e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	775a      	strb	r2, [r3, #29]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7f5b      	ldrb	r3, [r3, #29]
 80057f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	775a      	strb	r2, [r3, #29]
                break;
 80057fe:	e00a      	b.n	8005816 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	759a      	strb	r2, [r3, #22]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f240 2202 	movw	r2, #514	@ 0x202
 800580c:	841a      	strh	r2, [r3, #32]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
            break;
 8005814:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <optiga_cmd_execute_prepare_command+0x1f0>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7d9b      	ldrb	r3, [r3, #22]
 8005822:	2b02      	cmp	r3, #2
 8005824:	f43f af10 	beq.w	8005648 <optiga_cmd_execute_prepare_command+0x10>
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}

08005830 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fa69 	bl	8005d18 <optiga_cmd_get_error_code_handler>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8c1b      	ldrh	r3, [r3, #32]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <optiga_cmd_execute_get_device_error+0x30>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8c1b      	ldrh	r3, [r3, #32]
 800585a:	b21b      	sxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	da0a      	bge.n	8005876 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005868:	d10c      	bne.n	8005884 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7f5b      	ldrb	r3, [r3, #29]
 800586e:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8005872:	2b03      	cmp	r3, #3
 8005874:	d106      	bne.n	8005884 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2204      	movs	r2, #4
 800587a:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
            break;
 8005882:	bf00      	nop
        }
    } while (FALSE);
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7f5b      	ldrb	r3, [r3, #29]
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da0b      	bge.n	80058c4 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8c1b      	ldrh	r3, [r3, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d14e      	bne.n	8005960 <optiga_cmd_execute_process_optiga_response+0xd4>
 80058c2:	e006      	b.n	80058d2 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2204      	movs	r2, #4
 80058c8:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
            break;
 80058d0:	e06f      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2bf1      	cmp	r3, #241	@ 0xf1
 80058da:	d113      	bne.n	8005904 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80058e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	4934      	ldr	r1, [pc, #208]	@ (80059bc <optiga_cmd_execute_process_optiga_response+0x130>)
 80058ec:	f001 fff8 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2203      	movs	r2, #3
 8005900:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8005902:	e056      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7e1b      	ldrb	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10e      	bne.n	800592a <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	7ddb      	ldrb	r3, [r3, #23]
 8005910:	2b0e      	cmp	r3, #14
 8005912:	d006      	beq.n	8005922 <optiga_cmd_execute_process_optiga_response+0x96>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	7ddb      	ldrb	r3, [r3, #23]
 8005918:	2b0d      	cmp	r3, #13
 800591a:	d002      	beq.n	8005922 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	220c      	movs	r2, #12
 8005920:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
                    break;
 8005928:	e043      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4920      	ldr	r1, [pc, #128]	@ (80059bc <optiga_cmd_execute_process_optiga_response+0x130>)
 800593a:	f001 ffd1 	bl	80078e0 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7e9b      	ldrb	r3, [r3, #26]
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	b2da      	uxtb	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2209      	movs	r2, #9
 800595c:	75da      	strb	r2, [r3, #23]
}
 800595e:	e028      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8c1b      	ldrh	r3, [r3, #32]
 8005964:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8005968:	d106      	bne.n	8005978 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	220c      	movs	r2, #12
 800596e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
                break;
 8005976:	e01c      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7ddb      	ldrb	r3, [r3, #23]
 800597c:	2b0d      	cmp	r3, #13
 800597e:	d103      	bne.n	8005988 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
}
 8005986:	e014      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	220b      	movs	r2, #11
 800598c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7f5b      	ldrb	r3, [r3, #29]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	775a      	strb	r2, [r3, #29]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	7f5b      	ldrb	r3, [r3, #29]
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
}
 80059b0:	e7ff      	b.n	80059b2 <optiga_cmd_execute_process_optiga_response+0x126>
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	08004be3 	.word	0x08004be3

080059c0 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7ddb      	ldrb	r3, [r3, #23]
 80059ce:	3b0a      	subs	r3, #10
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d84d      	bhi.n	8005a70 <optiga_cmd_execute_process_response+0xb0>
 80059d4:	a201      	add	r2, pc, #4	@ (adr r2, 80059dc <optiga_cmd_execute_process_response+0x1c>)
 80059d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059da:	bf00      	nop
 80059dc:	080059f1 	.word	0x080059f1
 80059e0:	080059fb 	.word	0x080059fb
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	08005a59 	.word	0x08005a59
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ff4a 	bl	800588c <optiga_cmd_execute_process_optiga_response>
                break;
 80059f8:	e045      	b.n	8005a86 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff ff17 	bl	8005830 <optiga_cmd_execute_get_device_error>
                break;
 8005a02:	e040      	b.n	8005a86 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff fc3e 	bl	8005286 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8c1b      	ldrh	r3, [r3, #32]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	220c      	movs	r2, #12
 8005a16:	75da      	strb	r2, [r3, #23]
 8005a18:	e010      	b.n	8005a3c <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	220b      	movs	r2, #11
 8005a1e:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	7f5b      	ldrb	r3, [r3, #29]
 8005a24:	f023 0303 	bic.w	r3, r3, #3
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	775a      	strb	r2, [r3, #29]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7f5b      	ldrb	r3, [r3, #29]
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
                break;
 8005a42:	e020      	b.n	8005a86 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fc3a 	bl	80052be <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	220e      	movs	r2, #14
 8005a4e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
                break;
 8005a56:	e016      	b.n	8005a86 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68d0      	ldr	r0, [r2, #12]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	8c12      	ldrh	r2, [r2, #32]
 8005a64:	4611      	mov	r1, r2
 8005a66:	4798      	blx	r3
                *exit_loop = TRUE;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
                break;
 8005a6e:	e00a      	b.n	8005a86 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2204      	movs	r2, #4
 8005a74:	759a      	strb	r2, [r3, #22]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f240 2202 	movw	r2, #514	@ 0x202
 8005a7c:	841a      	strh	r2, [r3, #32]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
            break;
 8005a84:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <optiga_cmd_execute_process_response+0xd6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7d9b      	ldrb	r3, [r3, #22]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d099      	beq.n	80059ca <optiga_cmd_execute_process_response+0xa>
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop

08005aa0 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fc07 	bl	80052be <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	68d0      	ldr	r0, [r2, #12]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	8c12      	ldrh	r2, [r2, #32]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4798      	blx	r3
        *exit_loop = TRUE;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 8005adc:	2301      	movs	r3, #1
 8005ade:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8005ae4:	887b      	ldrh	r3, [r7, #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fc31 	bl	8005352 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2204      	movs	r2, #4
 8005af4:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	7d9b      	ldrb	r3, [r3, #22]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d830      	bhi.n	8005b66 <optiga_cmd_execute_handler+0x96>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <optiga_cmd_execute_handler+0x3c>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b21 	.word	0x08005b21
 8005b10:	08005b2f 	.word	0x08005b2f
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b4b 	.word	0x08005b4b
 8005b1c:	08005b59 	.word	0x08005b59
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8005b20:	f107 030b 	add.w	r3, r7, #11
 8005b24:	4619      	mov	r1, r3
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff fc4c 	bl	80053c4 <optiga_cmd_execute_comms_open>
                break;
 8005b2c:	e01c      	b.n	8005b68 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8005b2e:	f107 030b 	add.w	r3, r7, #11
 8005b32:	4619      	mov	r1, r3
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff fcdb 	bl	80054f0 <optiga_cmd_execute_comms_close>
                break;
 8005b3a:	e015      	b.n	8005b68 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8005b3c:	f107 030b 	add.w	r3, r7, #11
 8005b40:	4619      	mov	r1, r3
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fd78 	bl	8005638 <optiga_cmd_execute_prepare_command>
                break;
 8005b48:	e00e      	b.n	8005b68 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8005b4a:	f107 030b 	add.w	r3, r7, #11
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff35 	bl	80059c0 <optiga_cmd_execute_process_response>
                break;
 8005b56:	e007      	b.n	8005b68 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8005b58:	f107 030b 	add.w	r3, r7, #11
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff ff9e 	bl	8005aa0 <optiga_cmd_execute_error_handler>
                break;
 8005b64:	e000      	b.n	8005b68 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 8005b66:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0c6      	beq.n	8005afc <optiga_cmd_execute_handler+0x2c>
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8005b8a:	f001 ff17 	bl	80079bc <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d15b      	bne.n	8005c4c <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <optiga_cmd_create+0xec>)
 8005b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2109      	movs	r1, #9
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f8b9 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d051      	beq.n	8005c50 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 8005bac:	2128      	movs	r1, #40	@ 0x28
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f001 ff12 	bl	80079d8 <pal_os_calloc>
 8005bb4:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d04b      	beq.n	8005c54 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	4a26      	ldr	r2, [pc, #152]	@ (8005c64 <optiga_cmd_create+0xec>)
 8005bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4a24      	ldr	r2, [pc, #144]	@ (8005c68 <optiga_cmd_create+0xf0>)
 8005bd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	7b1b      	ldrb	r3, [r3, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d129      	bne.n	8005c3e <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681c      	ldr	r4, [r3, #0]
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	481d      	ldr	r0, [pc, #116]	@ (8005c6c <optiga_cmd_create+0xf4>)
 8005bf6:	f001 fe5b 	bl	80078b0 <pal_os_event_create>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681c      	ldr	r4, [r3, #0]
 8005c04:	6979      	ldr	r1, [r7, #20]
 8005c06:	481a      	ldr	r0, [pc, #104]	@ (8005c70 <optiga_cmd_create+0xf8>)
 8005c08:	f000 fcd2 	bl	80065b0 <optiga_comms_create>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8005c1a:	6978      	ldr	r0, [r7, #20]
 8005c1c:	f001 feea 	bl	80079f4 <pal_os_free>
                me = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
                break;
 8005c24:	e017      	b.n	8005c56 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005c3c:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	331e      	adds	r3, #30
 8005c42:	4619      	mov	r1, r3
 8005c44:	6978      	ldr	r0, [r7, #20]
 8005c46:	f7ff f8a8 	bl	8004d9a <optiga_cmd_queue_assign_slot>
 8005c4a:	e004      	b.n	8005c56 <optiga_cmd_create+0xde>
            break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <optiga_cmd_create+0xde>
            break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <optiga_cmd_create+0xde>
            break;
 8005c54:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8005c56:	f001 feb8 	bl	80079ca <pal_os_lock_exit_critical_section>
    return (me);
 8005c5a:	697b      	ldr	r3, [r7, #20]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}
 8005c64:	200004d0 	.word	0x200004d0
 8005c68:	200004d4 	.word	0x200004d4
 8005c6c:	08004e51 	.word	0x08004e51
 8005c70:	08005ad1 	.word	0x08005ad1

08005c74 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005c7c:	f240 2302 	movw	r3, #514	@ 0x202
 8005c80:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 8005c82:	f001 fe9b 	bl	80079bc <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d03c      	beq.n	8005d06 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fafa 	bl	8005286 <optiga_cmd_release_session>
 8005c92:	4603      	mov	r3, r0
 8005c94:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff f8b1 	bl	8004dfe <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <optiga_cmd_destroy+0xa0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2109      	movs	r1, #9
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff f837 	bl	8004d18 <optiga_cmd_queue_get_count_of>
 8005caa:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 8005cac:	2b06      	cmp	r3, #6
 8005cae:	d125      	bne.n	8005cfc <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	7b1b      	ldrb	r3, [r3, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d120      	bne.n	8005cfc <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fde6 	bl	8007894 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fc8b 	bl	80065fc <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fe56 	bl	80079a8 <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 fe79 	bl	80079f4 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 8005d02:	2300      	movs	r3, #0
 8005d04:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 8005d06:	f001 fe60 	bl	80079ca <pal_os_lock_exit_critical_section>

    return (return_status);
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	200004d0 	.word	0x200004d0

08005d18 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8005d20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d24:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005d26:	2309      	movs	r3, #9
 8005d28:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7f5b      	ldrb	r3, [r3, #29]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	f000 8099 	beq.w	8005e70 <optiga_cmd_get_error_code_handler+0x158>
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	f300 80b6 	bgt.w	8005eb0 <optiga_cmd_get_error_code_handler+0x198>
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d002      	beq.n	8005d4e <optiga_cmd_get_error_code_handler+0x36>
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d052      	beq.n	8005df2 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 8005d4c:	e0b0      	b.n	8005eb0 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f103 020d 	add.w	r2, r3, #13
 8005d56:	89bb      	ldrh	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fea6 	bl	8006ab0 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005d64:	89bb      	ldrh	r3, [r7, #12]
 8005d66:	3302      	adds	r3, #2
 8005d68:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f103 020d 	add.w	r2, r3, #13
 8005d72:	89bb      	ldrh	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fe99 	bl	8006ab0 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005d7e:	89bb      	ldrh	r3, [r7, #12]
 8005d80:	3302      	adds	r3, #2
 8005d82:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f103 020d 	add.w	r2, r3, #13
 8005d8c:	89bb      	ldrh	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	2101      	movs	r1, #1
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fe8c 	bl	8006ab0 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005d98:	89bb      	ldrh	r3, [r7, #12]
 8005d9a:	3302      	adds	r3, #2
 8005d9c:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8005d9e:	89bb      	ldrh	r3, [r7, #12]
 8005da0:	3b09      	subs	r3, #9
 8005da2:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8005daa:	3305      	adds	r3, #5
 8005dac:	2100      	movs	r1, #0
 8005dae:	2001      	movs	r0, #1
 8005db0:	f7fe fec3 	bl	8004b3a <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	89ba      	ldrh	r2, [r7, #12]
 8005dba:	3a05      	subs	r2, #5
 8005dbc:	b292      	uxth	r2, r2
 8005dbe:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	7f5b      	ldrb	r3, [r3, #29]
 8005dc4:	f023 0303 	bic.w	r3, r3, #3
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	775a      	strb	r2, [r3, #29]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7f5b      	ldrb	r3, [r3, #29]
 8005dd2:	f043 0302 	orr.w	r3, r3, #2
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4935      	ldr	r1, [pc, #212]	@ (8005ec0 <optiga_cmd_get_error_code_handler+0x1a8>)
 8005dec:	f001 fd78 	bl	80078e0 <pal_os_event_register_callback_oneshot>
        break;
 8005df0:	e061      	b.n	8005eb6 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f240 6222 	movw	r2, #1570	@ 0x622
 8005dfa:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	7e92      	ldrb	r2, [r2, #26]
 8005e06:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	7ed2      	ldrb	r2, [r2, #27]
 8005e12:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fc05 	bl	800662a <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	3306      	adds	r3, #6
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	f000 fc3c 	bl	80066b8 <optiga_comms_transceive>
 8005e40:	4603      	mov	r3, r0
 8005e42:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8005e44:	89fb      	ldrh	r3, [r7, #14]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 8005e4a:	f240 2302 	movw	r3, #514	@ 0x202
 8005e4e:	81fb      	strh	r3, [r7, #14]
                break;
 8005e50:	e031      	b.n	8005eb6 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7f5b      	ldrb	r3, [r3, #29]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	775a      	strb	r2, [r3, #29]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7f5b      	ldrb	r3, [r3, #29]
 8005e64:	f043 0303 	orr.w	r3, r3, #3
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	775a      	strb	r2, [r3, #29]
        break;
 8005e6e:	e022      	b.n	8005eb6 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	7c9b      	ldrb	r3, [r3, #18]
 8005e76:	2bff      	cmp	r3, #255	@ 0xff
 8005e78:	d01c      	beq.n	8005eb4 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	7d9b      	ldrb	r3, [r3, #22]
 8005e80:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005e82:	89fb      	ldrh	r3, [r7, #14]
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2203      	movs	r2, #3
 8005e92:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	220a      	movs	r2, #10
 8005e98:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4905      	ldr	r1, [pc, #20]	@ (8005ec0 <optiga_cmd_get_error_code_handler+0x1a8>)
 8005eaa:	f001 fd19 	bl	80078e0 <pal_os_event_register_callback_oneshot>
        break;
 8005eae:	e002      	b.n	8005eb6 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005eb4:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005eb6:	89fb      	ldrh	r3, [r7, #14]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd90      	pop	{r4, r7, pc}
 8005ec0:	08004be3 	.word	0x08004be3

08005ec4 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005ecc:	f240 2302 	movw	r3, #514	@ 0x202
 8005ed0:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7d9b      	ldrb	r3, [r3, #22]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d002      	beq.n	8005ee0 <optiga_cmd_open_application_handler+0x1c>
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d07a      	beq.n	8005fd4 <optiga_cmd_open_application_handler+0x110>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 8005ede:	e0a2      	b.n	8006026 <optiga_cmd_open_application_handler+0x162>
            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");
 8005ee0:	4a53      	ldr	r2, [pc, #332]	@ (8006030 <optiga_cmd_open_application_handler+0x16c>)
 8005ee2:	4954      	ldr	r1, [pc, #336]	@ (8006034 <optiga_cmd_open_application_handler+0x170>)
 8005ee4:	4854      	ldr	r0, [pc, #336]	@ (8006038 <optiga_cmd_open_application_handler+0x174>)
 8005ee6:	f000 ff65 	bl	8006db4 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8005eea:	2314      	movs	r3, #20
 8005eec:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7e5b      	ldrb	r3, [r3, #25]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <optiga_cmd_open_application_handler+0x36>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	e000      	b.n	8005efc <optiga_cmd_open_application_handler+0x38>
 8005efa:	2208      	movs	r2, #8
 8005efc:	89bb      	ldrh	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005f02:	89bb      	ldrh	r3, [r7, #12]
 8005f04:	f240 6215 	movw	r2, #1557	@ 0x615
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d903      	bls.n	8005f14 <optiga_cmd_open_application_handler+0x50>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005f0c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005f10:	81fb      	strh	r3, [r7, #14]
                break;
 8005f12:	e088      	b.n	8006026 <optiga_cmd_open_application_handler+0x162>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7e5b      	ldrb	r3, [r3, #25]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <optiga_cmd_open_application_handler+0x64>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff f9da 	bl	80052d6 <optiga_cmd_restore_context>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d17d      	bne.n	8006024 <optiga_cmd_open_application_handler+0x160>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <optiga_cmd_open_application_handler+0x74>
 8005f34:	2210      	movs	r2, #16
 8005f36:	e000      	b.n	8005f3a <optiga_cmd_open_application_handler+0x76>
 8005f38:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005f40:	3305      	adds	r3, #5
 8005f42:	20f0      	movs	r0, #240	@ 0xf0
 8005f44:	f7fe fdf9 	bl	8004b3a <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330d      	adds	r3, #13
 8005f4e:	3309      	adds	r3, #9
 8005f50:	2210      	movs	r2, #16
 8005f52:	493a      	ldr	r1, [pc, #232]	@ (800603c <optiga_cmd_open_application_handler+0x178>)
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 fd58 	bl	8007a0a <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7e5b      	ldrb	r3, [r3, #25]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <optiga_cmd_open_application_handler+0xb6>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005f72:	2208      	movs	r2, #8
 8005f74:	4619      	mov	r1, r3
 8005f76:	f001 fd48 	bl	8007a0a <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <optiga_cmd_open_application_handler+0xc2>
 8005f82:	2214      	movs	r2, #20
 8005f84:	e000      	b.n	8005f88 <optiga_cmd_open_application_handler+0xc4>
 8005f86:	221c      	movs	r2, #28
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005f96:	2208      	movs	r2, #8
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fd44 	bl	8007a28 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d012      	beq.n	8005fce <optiga_cmd_open_application_handler+0x10a>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f001 fb4e 	bl	8007658 <pal_os_datastore_write>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005fc0:	89fb      	ldrh	r3, [r7, #14]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <optiga_cmd_open_application_handler+0x10a>
                    return_status = OPTIGA_CMD_ERROR;
 8005fc6:	f240 2302 	movw	r3, #514	@ 0x202
 8005fca:	81fb      	strh	r3, [r7, #14]
                    break;
 8005fcc:	e02b      	b.n	8006026 <optiga_cmd_open_application_handler+0x162>
            return_status = OPTIGA_LIB_SUCCESS;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	81fb      	strh	r3, [r7, #14]
        break;
 8005fd2:	e028      	b.n	8006026 <optiga_cmd_open_application_handler+0x162>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");
 8005fd4:	4a16      	ldr	r2, [pc, #88]	@ (8006030 <optiga_cmd_open_application_handler+0x16c>)
 8005fd6:	4917      	ldr	r1, [pc, #92]	@ (8006034 <optiga_cmd_open_application_handler+0x170>)
 8005fd8:	4819      	ldr	r0, [pc, #100]	@ (8006040 <optiga_cmd_open_application_handler+0x17c>)
 8005fda:	f000 feeb 	bl	8006db4 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	7c9b      	ldrb	r3, [r3, #18]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d010      	beq.n	800600a <optiga_cmd_open_application_handler+0x146>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
 8005fe8:	4a11      	ldr	r2, [pc, #68]	@ (8006030 <optiga_cmd_open_application_handler+0x16c>)
 8005fea:	4912      	ldr	r1, [pc, #72]	@ (8006034 <optiga_cmd_open_application_handler+0x170>)
 8005fec:	4815      	ldr	r0, [pc, #84]	@ (8006044 <optiga_cmd_open_application_handler+0x180>)
 8005fee:	f000 fee1 	bl	8006db4 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7f5b      	ldrb	r3, [r3, #29]
 8005ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	775a      	strb	r2, [r3, #29]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	7f5a      	ldrb	r2, [r3, #29]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	775a      	strb	r2, [r3, #29]
                break;
 8006008:	e00d      	b.n	8006026 <optiga_cmd_open_application_handler+0x162>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2233      	movs	r2, #51	@ 0x33
 8006012:	751a      	strb	r2, [r3, #20]
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
 8006014:	4a06      	ldr	r2, [pc, #24]	@ (8006030 <optiga_cmd_open_application_handler+0x16c>)
 8006016:	4907      	ldr	r1, [pc, #28]	@ (8006034 <optiga_cmd_open_application_handler+0x170>)
 8006018:	480b      	ldr	r0, [pc, #44]	@ (8006048 <optiga_cmd_open_application_handler+0x184>)
 800601a:	f000 fecb 	bl	8006db4 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
 800601e:	2300      	movs	r3, #0
 8006020:	81fb      	strh	r3, [r7, #14]
        break;
 8006022:	e000      	b.n	8006026 <optiga_cmd_open_application_handler+0x162>
                    break;
 8006024:	bf00      	nop
    }

    return (return_status);
 8006026:	89fb      	ldrh	r3, [r7, #14]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08012870 	.word	0x08012870
 8006034:	08012878 	.word	0x08012878
 8006038:	08012890 	.word	0x08012890
 800603c:	08013564 	.word	0x08013564
 8006040:	080128ac 	.word	0x080128ac
 8006044:	080128d8 	.word	0x080128d8
 8006048:	08012904 	.word	0x08012904

0800604c <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af04      	add	r7, sp, #16
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	460b      	mov	r3, r1
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 800605a:	4a0b      	ldr	r2, [pc, #44]	@ (8006088 <optiga_cmd_open_application+0x3c>)
 800605c:	490b      	ldr	r1, [pc, #44]	@ (800608c <optiga_cmd_open_application+0x40>)
 800605e:	480c      	ldr	r0, [pc, #48]	@ (8006090 <optiga_cmd_open_application+0x44>)
 8006060:	f000 fea8 	bl	8006db4 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8006064:	7af9      	ldrb	r1, [r7, #11]
 8006066:	23f0      	movs	r3, #240	@ 0xf0
 8006068:	9302      	str	r3, [sp, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	2300      	movs	r3, #0
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	2300      	movs	r3, #0
 8006074:	4a07      	ldr	r2, [pc, #28]	@ (8006094 <optiga_cmd_open_application+0x48>)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7fe fdbf 	bl	8004bfa <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	08012870 	.word	0x08012870
 800608c:	08012878 	.word	0x08012878
 8006090:	08013574 	.word	0x08013574
 8006094:	08005ec5 	.word	0x08005ec5

08006098 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80060a6:	f240 2302 	movw	r3, #514	@ 0x202
 80060aa:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80060ac:	2309      	movs	r3, #9
 80060ae:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 80060b0:	2381      	movs	r3, #129	@ 0x81
 80060b2:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7d9b      	ldrb	r3, [r3, #22]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d002      	beq.n	80060c2 <optiga_cmd_get_data_object_handler+0x2a>
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d073      	beq.n	80061a8 <optiga_cmd_get_data_object_handler+0x110>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 80060c0:	e105      	b.n	80062ce <optiga_cmd_get_data_object_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Sending read data command...");
 80060c2:	4a85      	ldr	r2, [pc, #532]	@ (80062d8 <optiga_cmd_get_data_object_handler+0x240>)
 80060c4:	4985      	ldr	r1, [pc, #532]	@ (80062dc <optiga_cmd_get_data_object_handler+0x244>)
 80060c6:	4886      	ldr	r0, [pc, #536]	@ (80062e0 <optiga_cmd_get_data_object_handler+0x248>)
 80060c8:	f000 fe74 	bl	8006db4 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80060cc:	230a      	movs	r3, #10
 80060ce:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80060d0:	8a3b      	ldrh	r3, [r7, #16]
 80060d2:	f240 6215 	movw	r2, #1557	@ 0x615
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d907      	bls.n	80060ea <optiga_cmd_get_data_object_handler+0x52>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80060da:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80060de:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2200      	movs	r2, #0
 80060e6:	801a      	strh	r2, [r3, #0]
                break;
 80060e8:	e0f1      	b.n	80062ce <optiga_cmd_get_data_object_handler+0x236>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	8bbb      	ldrh	r3, [r7, #28]
 80060f0:	3308      	adds	r3, #8
 80060f2:	4413      	add	r3, r2
 80060f4:	1d5a      	adds	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	891b      	ldrh	r3, [r3, #8]
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f000 fcd7 	bl	8006ab0 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006102:	8bbb      	ldrh	r3, [r7, #28]
 8006104:	3302      	adds	r3, #2
 8006106:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	899b      	ldrh	r3, [r3, #12]
 800610c:	461a      	mov	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	89db      	ldrh	r3, [r3, #14]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f240 6211 	movw	r2, #1553	@ 0x611
 8006118:	4293      	cmp	r3, r2
 800611a:	bfa8      	it	ge
 800611c:	4613      	movge	r3, r2
 800611e:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	7c9b      	ldrb	r3, [r3, #18]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d11f      	bne.n	8006168 <optiga_cmd_get_data_object_handler+0xd0>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	8bbb      	ldrh	r3, [r7, #28]
 800612e:	3308      	adds	r3, #8
 8006130:	4413      	add	r3, r2
 8006132:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	895a      	ldrh	r2, [r3, #10]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800613c:	4413      	add	r3, r2
 800613e:	b29b      	uxth	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	f000 fcb5 	bl	8006ab0 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006146:	8bbb      	ldrh	r3, [r7, #28]
 8006148:	3302      	adds	r3, #2
 800614a:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	8bbb      	ldrh	r3, [r7, #28]
 8006152:	3308      	adds	r3, #8
 8006154:	4413      	add	r3, r2
 8006156:	3305      	adds	r3, #5
 8006158:	89fa      	ldrh	r2, [r7, #14]
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fca7 	bl	8006ab0 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006162:	8bbb      	ldrh	r3, [r7, #28]
 8006164:	3302      	adds	r3, #2
 8006166:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	891b      	ldrh	r3, [r3, #8]
 800616c:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 8006170:	4293      	cmp	r3, r2
 8006172:	d101      	bne.n	8006178 <optiga_cmd_get_data_object_handler+0xe0>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8006174:	2301      	movs	r3, #1
 8006176:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7e59      	ldrb	r1, [r3, #25]
 800617c:	8bbb      	ldrh	r3, [r7, #28]
 800617e:	3b09      	subs	r3, #9
 8006180:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 8006188:	3305      	adds	r3, #5
 800618a:	7ef8      	ldrb	r0, [r7, #27]
 800618c:	f7fe fcd5 	bl	8004b3a <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	8bba      	ldrh	r2, [r7, #28]
 8006196:	3a05      	subs	r2, #5
 8006198:	b292      	uxth	r2, r2
 800619a:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	89fa      	ldrh	r2, [r7, #14]
 80061a0:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 80061a2:	2300      	movs	r3, #0
 80061a4:	83fb      	strh	r3, [r7, #30]
        break;
 80061a6:	e092      	b.n	80062ce <optiga_cmd_get_data_object_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
 80061a8:	4a4b      	ldr	r2, [pc, #300]	@ (80062d8 <optiga_cmd_get_data_object_handler+0x240>)
 80061aa:	494c      	ldr	r1, [pc, #304]	@ (80062dc <optiga_cmd_get_data_object_handler+0x244>)
 80061ac:	484d      	ldr	r0, [pc, #308]	@ (80062e4 <optiga_cmd_get_data_object_handler+0x24c>)
 80061ae:	f000 fe01 	bl	8006db4 <optiga_lib_print_message>
            me->chaining_ongoing = FALSE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	7c9b      	ldrb	r3, [r3, #18]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d02a      	beq.n	8006218 <optiga_cmd_get_data_object_handler+0x180>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
 80061c2:	4a45      	ldr	r2, [pc, #276]	@ (80062d8 <optiga_cmd_get_data_object_handler+0x240>)
 80061c4:	4945      	ldr	r1, [pc, #276]	@ (80062dc <optiga_cmd_get_data_object_handler+0x244>)
 80061c6:	4848      	ldr	r0, [pc, #288]	@ (80062e8 <optiga_cmd_get_data_object_handler+0x250>)
 80061c8:	f000 fdf4 	bl	8006db4 <optiga_lib_print_message>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	89db      	ldrh	r3, [r3, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00e      	beq.n	80061f2 <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	7f5b      	ldrb	r3, [r3, #29]
 80061d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	775a      	strb	r2, [r3, #29]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7f5b      	ldrb	r3, [r3, #29]
 80061e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	775a      	strb	r2, [r3, #29]
 80061f0:	e00e      	b.n	8006210 <optiga_cmd_get_data_object_handler+0x178>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7f5b      	ldrb	r3, [r3, #29]
 80061f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	775a      	strb	r2, [r3, #29]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7f5a      	ldrb	r2, [r3, #29]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2200      	movs	r2, #0
 800620e:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 8006210:	f240 2302 	movw	r3, #514	@ 0x202
 8006214:	83fb      	strh	r3, [r7, #30]
        break;
 8006216:	e059      	b.n	80062cc <optiga_cmd_get_data_object_handler+0x234>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8c1b      	ldrh	r3, [r3, #32]
 800621c:	f248 0208 	movw	r2, #32776	@ 0x8008
 8006220:	4293      	cmp	r3, r2
 8006222:	d107      	bne.n	8006234 <optiga_cmd_get_data_object_handler+0x19c>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	89d2      	ldrh	r2, [r2, #14]
 800622c:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 800622e:	2300      	movs	r3, #0
 8006230:	83fb      	strh	r3, [r7, #30]
        break;
 8006232:	e04b      	b.n	80062cc <optiga_cmd_get_data_object_handler+0x234>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	88db      	ldrh	r3, [r3, #6]
 800623a:	3b04      	subs	r3, #4
 800623c:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	899b      	ldrh	r3, [r3, #12]
 8006242:	8a7a      	ldrh	r2, [r7, #18]
 8006244:	429a      	cmp	r2, r3
 8006246:	d90c      	bls.n	8006262 <optiga_cmd_get_data_object_handler+0x1ca>
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
 8006248:	4a23      	ldr	r2, [pc, #140]	@ (80062d8 <optiga_cmd_get_data_object_handler+0x240>)
 800624a:	4924      	ldr	r1, [pc, #144]	@ (80062dc <optiga_cmd_get_data_object_handler+0x244>)
 800624c:	4826      	ldr	r0, [pc, #152]	@ (80062e8 <optiga_cmd_get_data_object_handler+0x250>)
 800624e:	f000 fdb1 	bl	8006db4 <optiga_lib_print_message>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8006252:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8006256:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2200      	movs	r2, #0
 800625e:	801a      	strh	r2, [r3, #0]
                    break;
 8006260:	e035      	b.n	80062ce <optiga_cmd_get_data_object_handler+0x236>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	89d2      	ldrh	r2, [r2, #14]
 800626a:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8006272:	3309      	adds	r3, #9
 8006274:	8a7a      	ldrh	r2, [r7, #18]
 8006276:	4619      	mov	r1, r3
 8006278:	f001 fbc7 	bl	8007a0a <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	89da      	ldrh	r2, [r3, #14]
 8006280:	8a7b      	ldrh	r3, [r7, #18]
 8006282:	4413      	add	r3, r2
 8006284:	b29a      	uxth	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	8a1b      	ldrh	r3, [r3, #16]
 800628e:	8a7a      	ldrh	r2, [r7, #18]
 8006290:	429a      	cmp	r2, r3
 8006292:	d305      	bcc.n	80062a0 <optiga_cmd_get_data_object_handler+0x208>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	89da      	ldrh	r2, [r3, #14]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 800629c:	429a      	cmp	r2, r3
 800629e:	d10b      	bne.n	80062b8 <optiga_cmd_get_data_object_handler+0x220>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	89d2      	ldrh	r2, [r2, #14]
 80062a8:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2200      	movs	r2, #0
 80062ae:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2200      	movs	r2, #0
 80062b4:	821a      	strh	r2, [r3, #16]
 80062b6:	e002      	b.n	80062be <optiga_cmd_get_data_object_handler+0x226>
                    me->chaining_ongoing = TRUE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	761a      	strb	r2, [r3, #24]
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
 80062be:	4a06      	ldr	r2, [pc, #24]	@ (80062d8 <optiga_cmd_get_data_object_handler+0x240>)
 80062c0:	4906      	ldr	r1, [pc, #24]	@ (80062dc <optiga_cmd_get_data_object_handler+0x244>)
 80062c2:	480a      	ldr	r0, [pc, #40]	@ (80062ec <optiga_cmd_get_data_object_handler+0x254>)
 80062c4:	f000 fd76 	bl	8006db4 <optiga_lib_print_message>
                return_status = OPTIGA_LIB_SUCCESS;
 80062c8:	2300      	movs	r3, #0
 80062ca:	83fb      	strh	r3, [r7, #30]
        break;
 80062cc:	bf00      	nop
    }

    return (return_status);
 80062ce:	8bfb      	ldrh	r3, [r7, #30]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	08012870 	.word	0x08012870
 80062dc:	08012878 	.word	0x08012878
 80062e0:	080129dc 	.word	0x080129dc
 80062e4:	080129fc 	.word	0x080129fc
 80062e8:	08012a2c 	.word	0x08012a2c
 80062ec:	08012a58 	.word	0x08012a58

080062f0 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af04      	add	r7, sp, #16
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	460b      	mov	r3, r1
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 80062fe:	4a0b      	ldr	r2, [pc, #44]	@ (800632c <optiga_cmd_get_data_object+0x3c>)
 8006300:	490b      	ldr	r1, [pc, #44]	@ (8006330 <optiga_cmd_get_data_object+0x40>)
 8006302:	480c      	ldr	r0, [pc, #48]	@ (8006334 <optiga_cmd_get_data_object+0x44>)
 8006304:	f000 fd56 	bl	8006db4 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8006308:	7af9      	ldrb	r1, [r7, #11]
 800630a:	2381      	movs	r3, #129	@ 0x81
 800630c:	9302      	str	r3, [sp, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	2306      	movs	r3, #6
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	2302      	movs	r3, #2
 8006318:	4a07      	ldr	r2, [pc, #28]	@ (8006338 <optiga_cmd_get_data_object+0x48>)
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7fe fc6d 	bl	8004bfa <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08012870 	.word	0x08012870
 8006330:	08012878 	.word	0x08012878
 8006334:	08013590 	.word	0x08013590
 8006338:	08006099 	.word	0x08006099

0800633c <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800634a:	2309      	movs	r3, #9
 800634c:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800634e:	f240 2302 	movw	r3, #514	@ 0x202
 8006352:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	7d9b      	ldrb	r3, [r3, #22]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d003      	beq.n	8006364 <optiga_cmd_verify_sign_handler+0x28>
 800635c:	2b03      	cmp	r3, #3
 800635e:	f000 80cc 	beq.w	80064fa <optiga_cmd_verify_sign_handler+0x1be>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8006362:	e0ed      	b.n	8006540 <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
 8006364:	4a79      	ldr	r2, [pc, #484]	@ (800654c <optiga_cmd_verify_sign_handler+0x210>)
 8006366:	497a      	ldr	r1, [pc, #488]	@ (8006550 <optiga_cmd_verify_sign_handler+0x214>)
 8006368:	487a      	ldr	r0, [pc, #488]	@ (8006554 <optiga_cmd_verify_sign_handler+0x218>)
 800636a:	f000 fd23 	bl	8006db4 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	7c1b      	ldrb	r3, [r3, #16]
 8006372:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	899b      	ldrh	r3, [r3, #12]
 8006378:	4413      	add	r3, r2
 800637a:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <optiga_cmd_verify_sign_handler+0x54>
                                     p_optiga_verify_sign->public_key->length));
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 800638a:	3309      	adds	r3, #9
 800638c:	b29b      	uxth	r3, r3
 800638e:	e000      	b.n	8006392 <optiga_cmd_verify_sign_handler+0x56>
 8006390:	2305      	movs	r3, #5
 8006392:	4413      	add	r3, r2
 8006394:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8006396:	330a      	adds	r3, #10
 8006398:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	f240 6215 	movw	r2, #1557	@ 0x615
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d903      	bls.n	80063ac <optiga_cmd_verify_sign_handler+0x70>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80063a4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80063a8:	82fb      	strh	r3, [r7, #22]
                break;
 80063aa:	e0c9      	b.n	8006540 <optiga_cmd_verify_sign_handler+0x204>
                                          p_optiga_verify_sign->digest_length,
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80063b0:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	2001      	movs	r0, #1
 80063c0:	f7fe fbde 	bl	8004b80 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330d      	adds	r3, #13
 80063ca:	89ba      	ldrh	r2, [r7, #12]
 80063cc:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80063d6:	461a      	mov	r2, r3
 80063d8:	f001 fb17 	bl	8007a0a <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	7c1b      	ldrb	r3, [r3, #16]
 80063e0:	461a      	mov	r2, r3
 80063e2:	89bb      	ldrh	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 80063f6:	f107 030c 	add.w	r3, r7, #12
 80063fa:	2002      	movs	r0, #2
 80063fc:	f7fe fbc0 	bl	8004b80 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330d      	adds	r3, #13
 8006406:	89ba      	ldrh	r2, [r7, #12]
 8006408:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8006412:	461a      	mov	r2, r3
 8006414:	f001 faf9 	bl	8007a0a <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	899a      	ldrh	r2, [r3, #12]
 800641c:	89bb      	ldrh	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	b29b      	uxth	r3, r3
 8006422:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	7c5b      	ldrb	r3, [r3, #17]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d119      	bne.n	8006460 <optiga_cmd_verify_sign_handler+0x124>
                                              me->p_optiga->optiga_comms_buffer,
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	2102      	movs	r1, #2
 800643a:	2004      	movs	r0, #4
 800643c:	f7fe fba0 	bl	8004b80 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330d      	adds	r3, #13
 8006446:	89ba      	ldrh	r2, [r7, #12]
 8006448:	441a      	add	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	89db      	ldrh	r3, [r3, #14]
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f000 fb2d 	bl	8006ab0 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006456:	89bb      	ldrh	r3, [r7, #12]
 8006458:	3302      	adds	r3, #2
 800645a:	b29b      	uxth	r3, r3
 800645c:	81bb      	strh	r3, [r7, #12]
 800645e:	e037      	b.n	80064d0 <optiga_cmd_verify_sign_handler+0x194>
                                              me->p_optiga->optiga_comms_buffer,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 8006468:	f107 030c 	add.w	r3, r7, #12
 800646c:	2101      	movs	r1, #1
 800646e:	2005      	movs	r0, #5
 8006470:	f7fe fb86 	bl	8004b80 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f103 010d 	add.w	r1, r3, #13
 8006480:	89bb      	ldrh	r3, [r7, #12]
 8006482:	1c58      	adds	r0, r3, #1
 8006484:	b280      	uxth	r0, r0
 8006486:	81b8      	strh	r0, [r7, #12]
 8006488:	440b      	add	r3, r1
 800648a:	7992      	ldrb	r2, [r2, #6]
 800648c:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8006492:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	2006      	movs	r0, #6
 80064a2:	f7fe fb6d 	bl	8004b80 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330d      	adds	r3, #13
 80064ac:	89ba      	ldrh	r2, [r7, #12]
 80064ae:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80064bc:	461a      	mov	r2, r3
 80064be:	f001 faa4 	bl	8007a0a <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	889a      	ldrh	r2, [r3, #4]
 80064c8:	89bb      	ldrh	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7e59      	ldrb	r1, [r3, #25]
 80064d4:	89bb      	ldrh	r3, [r7, #12]
 80064d6:	3b09      	subs	r3, #9
 80064d8:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 80064e0:	3305      	adds	r3, #5
 80064e2:	20b2      	movs	r0, #178	@ 0xb2
 80064e4:	f7fe fb29 	bl	8004b3a <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80064e8:	89ba      	ldrh	r2, [r7, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3a05      	subs	r2, #5
 80064f0:	b292      	uxth	r2, r2
 80064f2:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 80064f4:	2300      	movs	r3, #0
 80064f6:	82fb      	strh	r3, [r7, #22]
        break;
 80064f8:	e022      	b.n	8006540 <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
 80064fa:	4a14      	ldr	r2, [pc, #80]	@ (800654c <optiga_cmd_verify_sign_handler+0x210>)
 80064fc:	4914      	ldr	r1, [pc, #80]	@ (8006550 <optiga_cmd_verify_sign_handler+0x214>)
 80064fe:	4816      	ldr	r0, [pc, #88]	@ (8006558 <optiga_cmd_verify_sign_handler+0x21c>)
 8006500:	f000 fc58 	bl	8006db4 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	7c9b      	ldrb	r3, [r3, #18]
 800650a:	2bff      	cmp	r3, #255	@ 0xff
 800650c:	d110      	bne.n	8006530 <optiga_cmd_verify_sign_handler+0x1f4>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
 800650e:	4a0f      	ldr	r2, [pc, #60]	@ (800654c <optiga_cmd_verify_sign_handler+0x210>)
 8006510:	490f      	ldr	r1, [pc, #60]	@ (8006550 <optiga_cmd_verify_sign_handler+0x214>)
 8006512:	4812      	ldr	r0, [pc, #72]	@ (800655c <optiga_cmd_verify_sign_handler+0x220>)
 8006514:	f000 fc4e 	bl	8006db4 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	7f5b      	ldrb	r3, [r3, #29]
 800651c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006520:	b2da      	uxtb	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	775a      	strb	r2, [r3, #29]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7f5a      	ldrb	r2, [r3, #29]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	775a      	strb	r2, [r3, #29]
                break;
 800652e:	e007      	b.n	8006540 <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
 8006530:	4a06      	ldr	r2, [pc, #24]	@ (800654c <optiga_cmd_verify_sign_handler+0x210>)
 8006532:	4907      	ldr	r1, [pc, #28]	@ (8006550 <optiga_cmd_verify_sign_handler+0x214>)
 8006534:	480a      	ldr	r0, [pc, #40]	@ (8006560 <optiga_cmd_verify_sign_handler+0x224>)
 8006536:	f000 fc3d 	bl	8006db4 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
 800653a:	2300      	movs	r3, #0
 800653c:	82fb      	strh	r3, [r7, #22]
        break;
 800653e:	bf00      	nop
    }

    return (return_status);
 8006540:	8afb      	ldrh	r3, [r7, #22]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	08012870 	.word	0x08012870
 8006550:	08012878 	.word	0x08012878
 8006554:	08012c94 	.word	0x08012c94
 8006558:	08012cb4 	.word	0x08012cb4
 800655c:	08012ce4 	.word	0x08012ce4
 8006560:	08012d10 	.word	0x08012d10

08006564 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af04      	add	r7, sp, #16
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 8006572:	4a0b      	ldr	r2, [pc, #44]	@ (80065a0 <optiga_cmd_verify_sign+0x3c>)
 8006574:	490b      	ldr	r1, [pc, #44]	@ (80065a4 <optiga_cmd_verify_sign+0x40>)
 8006576:	480c      	ldr	r0, [pc, #48]	@ (80065a8 <optiga_cmd_verify_sign+0x44>)
 8006578:	f000 fc1c 	bl	8006db4 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 800657c:	7af9      	ldrb	r1, [r7, #11]
 800657e:	23b2      	movs	r3, #178	@ 0xb2
 8006580:	9302      	str	r3, [sp, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	2306      	movs	r3, #6
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	2302      	movs	r3, #2
 800658c:	4a07      	ldr	r2, [pc, #28]	@ (80065ac <optiga_cmd_verify_sign+0x48>)
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7fe fb33 	bl	8004bfa <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	08012870 	.word	0x08012870
 80065a4:	08012878 	.word	0x08012878
 80065a8:	080135ac 	.word	0x080135ac
 80065ac:	0800633d 	.word	0x0800633d

080065b0 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 80065be:	4b0e      	ldr	r3, [pc, #56]	@ (80065f8 <optiga_comms_create+0x48>)
 80065c0:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	7c1b      	ldrb	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d110      	bne.n	80065ec <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 80065ca:	f000 feaf 	bl	800732c <pal_init>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]
                break;
 80065d8:	e008      	b.n	80065ec <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	200004d8 	.word	0x200004d8

080065fc <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7c1b      	ldrb	r3, [r3, #16]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d10a      	bne.n	8006622 <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 800661e:	f000 fe8d 	bl	800733c <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	609a      	str	r2, [r3, #8]
    return (0);
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8006650:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006654:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8a6 	bl	80067a8 <check_optiga_comms_state>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d122      	bne.n	80066a8 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4a10      	ldr	r2, [pc, #64]	@ (80066b4 <optiga_comms_open+0x6c>)
 8006672:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	7d12      	ldrb	r2, [r2, #20]
 800667e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fa fa82 	bl	8000b9c <ifx_i2c_open>
 8006698:	4603      	mov	r3, r0
 800669a:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 800669c:	89fb      	ldrh	r3, [r7, #14]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80066a8:	89fb      	ldrh	r3, [r7, #14]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	080067dd 	.word	0x080067dd

080066b8 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80066c8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80066cc:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f86a 	bl	80067a8 <check_optiga_comms_state>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d12c      	bne.n	8006734 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <optiga_comms_transceive+0x88>)
 80066ea:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	7c92      	ldrb	r2, [r2, #18]
 80066f6:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	7cd2      	ldrb	r2, [r2, #19]
 8006702:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	7d12      	ldrb	r2, [r2, #20]
 800670e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6858      	ldr	r0, [r3, #4]
 8006716:	88fa      	ldrh	r2, [r7, #6]
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	f7fa fa75 	bl	8000c0e <ifx_i2c_transceive>
 8006724:	4603      	mov	r3, r0
 8006726:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8006728:	8afb      	ldrh	r3, [r7, #22]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8006734:	8afb      	ldrh	r3, [r7, #22]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	080067dd 	.word	0x080067dd

08006744 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800674c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006750:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f828 	bl	80067a8 <check_optiga_comms_state>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11c      	bne.n	8006798 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4a0d      	ldr	r2, [pc, #52]	@ (80067a4 <optiga_comms_close+0x60>)
 800676e:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	7d12      	ldrb	r2, [r2, #20]
 800677a:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4618      	mov	r0, r3
 8006784:	f7fa fa7c 	bl	8000c80 <ifx_i2c_close>
 8006788:	4603      	mov	r3, r0
 800678a:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 800678c:	89fb      	ldrh	r3, [r7, #14]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8006798:	89fb      	ldrh	r3, [r7, #14]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	080067dd 	.word	0x080067dd

080067a8 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80067b0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80067b4:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <check_optiga_comms_state+0x26>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7c5b      	ldrb	r3, [r3, #17]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d004      	beq.n	80067ce <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 80067ca:	2300      	movs	r3, #0
 80067cc:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 80067ce:	89fb      	ldrh	r3, [r7, #14]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	887a      	ldrh	r2, [r7, #2]
 80067f4:	4611      	mov	r1, r2
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	745a      	strb	r2, [r3, #17]
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    me->handler(me->caller_context, event);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006828:	8879      	ldrh	r1, [r7, #2]
 800682a:	4610      	mov	r0, r2
 800682c:	4798      	blx	r3
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <optiga_crypt_reset_protection_level+0x18>
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8006844:	2200      	movs	r2, #0
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f880 	bl	800694e <optiga_crypt_set_comms_params>
    }
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	461a      	mov	r2, r3
 8006862:	460b      	mov	r3, r1
 8006864:	72fb      	strb	r3, [r7, #11]
 8006866:	4613      	mov	r3, r2
 8006868:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800686a:	f240 4302 	movw	r3, #1026	@ 0x402
 800686e:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <optiga_crypt_verify+0x3a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <optiga_crypt_verify+0x3a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <optiga_crypt_verify+0x3a>
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8006890:	f240 4303 	movw	r3, #1027	@ 0x403
 8006894:	82fb      	strh	r3, [r7, #22]
            break;
 8006896:	e052      	b.n	800693e <optiga_crypt_verify+0xe8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d103      	bne.n	80068aa <optiga_crypt_verify+0x54>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80068a2:	f240 4305 	movw	r3, #1029	@ 0x405
 80068a6:	82fb      	strh	r3, [r7, #22]
            break;
 80068a8:	e049      	b.n	800693e <optiga_crypt_verify+0xe8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2234      	movs	r2, #52	@ 0x34
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 f8b3 	bl	8007a28 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068cc:	2200      	movs	r2, #0
 80068ce:	4619      	mov	r1, r3
 80068d0:	f7fe f90e 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068de:	2201      	movs	r2, #1
 80068e0:	4619      	mov	r1, r3
 80068e2:	f7fe f905 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	7aba      	ldrb	r2, [r7, #10]
 80068f0:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6a3a      	ldr	r2, [r7, #32]
 80068f6:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068fc:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006904:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8006906:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <optiga_crypt_verify+0xc2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 800690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006910:	881a      	ldrh	r2, [r3, #0]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	81da      	strh	r2, [r3, #14]
 8006916:	e002      	b.n	800691e <optiga_crypt_verify+0xc8>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691c:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006922:	7af9      	ldrb	r1, [r7, #11]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fe1c 	bl	8006564 <optiga_cmd_verify_sign>
 800692c:	4603      	mov	r3, r0
 800692e:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006930:	8afb      	ldrh	r3, [r7, #22]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <optiga_crypt_verify+0xe8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff ff79 	bl	8006836 <optiga_crypt_reset_protection_level>

    return (return_value);
 8006944:	8afb      	ldrh	r3, [r7, #22]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <optiga_crypt_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
 800695a:	4613      	mov	r3, r2
 800695c:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d002      	beq.n	800696a <optiga_crypt_set_comms_params+0x1c>
 8006964:	2b02      	cmp	r3, #2
 8006966:	d005      	beq.n	8006974 <optiga_crypt_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8006968:	e009      	b.n	800697e <optiga_crypt_set_comms_params+0x30>
            me->protection_level = value;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	78ba      	ldrb	r2, [r7, #2]
 800696e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            break;
 8006972:	e004      	b.n	800697e <optiga_crypt_set_comms_params+0x30>
            me->protocol_version = value;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	78ba      	ldrb	r2, [r7, #2]
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
            break;
 800697c:	bf00      	nop
        }
    }
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d02c      	beq.n	80069fe <optiga_crypt_create+0x72>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 80069a4:	2144      	movs	r1, #68	@ 0x44
 80069a6:	2001      	movs	r0, #1
 80069a8:	f001 f816 	bl	80079d8 <pal_os_calloc>
 80069ac:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d026      	beq.n	8006a02 <optiga_crypt_create+0x76>
        {
            break;
        }

        me->handler = handler;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        me->caller_context = caller_context;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	@ 0x38
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	490c      	ldr	r1, [pc, #48]	@ (8006a10 <optiga_crypt_create+0x84>)
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff f8ca 	bl	8005b78 <optiga_cmd_create>
 80069e4:	4602      	mov	r2, r0
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d108      	bne.n	8006a04 <optiga_crypt_create+0x78>
        {
            pal_os_free(me);
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f000 fffe 	bl	80079f4 <pal_os_free>
            me = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e002      	b.n	8006a04 <optiga_crypt_create+0x78>
            break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <optiga_crypt_create+0x78>
            break;
 8006a02:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8006a04:	697b      	ldr	r3, [r7, #20]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	08006809 	.word	0x08006809

08006a14 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8006a22:	f240 4303 	movw	r3, #1027	@ 0x403
 8006a26:	81fb      	strh	r3, [r7, #14]
            break;
 8006a28:	e012      	b.n	8006a50 <optiga_crypt_destroy+0x3c>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d103      	bne.n	8006a3c <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8006a34:	f240 4305 	movw	r3, #1029	@ 0x405
 8006a38:	81fb      	strh	r3, [r7, #14]
            break;
 8006a3a:	e009      	b.n	8006a50 <optiga_crypt_destroy+0x3c>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff f917 	bl	8005c74 <optiga_cmd_destroy>
 8006a46:	4603      	mov	r3, r0
 8006a48:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 ffd2 	bl	80079f4 <pal_os_free>

    } while (FALSE);
    return (return_value);
 8006a50:	89fb      	ldrh	r3, [r7, #14]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af06      	add	r7, sp, #24
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
 8006a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006aa4 <optiga_crypt_ecdsa_verify+0x48>)
 8006a6e:	490e      	ldr	r1, [pc, #56]	@ (8006aa8 <optiga_crypt_ecdsa_verify+0x4c>)
 8006a70:	480e      	ldr	r0, [pc, #56]	@ (8006aac <optiga_crypt_ecdsa_verify+0x50>)
 8006a72:	f000 f99f 	bl	8006db4 <optiga_lib_print_message>
    return (optiga_crypt_verify(me,
 8006a76:	79fa      	ldrb	r2, [r7, #7]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	7f3b      	ldrb	r3, [r7, #28]
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	8b3b      	ldrh	r3, [r7, #24]
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	2111      	movs	r1, #17
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fedf 	bl	8006856 <optiga_crypt_verify>
 8006a98:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	08013444 	.word	0x08013444
 8006aa8:	0801344c 	.word	0x0801344c
 8006aac:	080135c4 	.word	0x080135c4

08006ab0 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8006abc:	887b      	ldrh	r3, [r7, #2]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3301      	adds	r3, #1
 8006acc:	887a      	ldrh	r2, [r7, #2]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	0c1a      	lsrs	r2, r3, #16
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3301      	adds	r3, #1
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	0a1a      	lsrs	r2, r3, #8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3302      	adds	r3, #2
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	061a      	lsls	r2, r3, #24
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3301      	adds	r3, #1
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006b3e:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	3103      	adds	r1, #3
 8006b44:	7809      	ldrb	r1, [r1, #0]
 8006b46:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <optiga_lib_byte_to_hex_string>:
/* Converts the uint8 array to hex string format */
_STATIC_H void optiga_lib_byte_to_hex_string(const uint8_t * p_array_buffer,
                                             uint8_t * p_hex_string,
                                             uint32_t length,
                                             bool_t is_input_byte_array)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	70fb      	strb	r3, [r7, #3]
    uint32_t loop = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
    uint8_t hex_byte = 0, index = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	74bb      	strb	r3, [r7, #18]
 8006b70:	2300      	movs	r3, #0
 8006b72:	74fb      	strb	r3, [r7, #19]

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05f      	beq.n	8006c3a <optiga_lib_byte_to_hex_string+0xe0>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05c      	beq.n	8006c3a <optiga_lib_byte_to_hex_string+0xe0>
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e051      	b.n	8006c2a <optiga_lib_byte_to_hex_string+0xd0>
        {
            index = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	74fb      	strb	r3, [r7, #19]
            hex_byte = p_array_buffer[loop];
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	74bb      	strb	r3, [r7, #18]
            if (TRUE == is_input_byte_array)
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10f      	bne.n	8006bba <optiga_lib_byte_to_hex_string+0x60>
            {
                p_hex_string [index++] = '0';
 8006b9a:	7cfb      	ldrb	r3, [r7, #19]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	74fa      	strb	r2, [r7, #19]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	2230      	movs	r2, #48	@ 0x30
 8006ba8:	701a      	strb	r2, [r3, #0]
                p_hex_string [index++] = 'x';
 8006baa:	7cfb      	ldrb	r3, [r7, #19]
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	74fa      	strb	r2, [r7, #19]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	2278      	movs	r2, #120	@ 0x78
 8006bb8:	701a      	strb	r2, [r3, #0]
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
 8006bba:	7cbb      	ldrb	r3, [r7, #18]
 8006bbc:	091b      	lsrs	r3, r3, #4
 8006bbe:	747b      	strb	r3, [r7, #17]
 8006bc0:	7c7b      	ldrb	r3, [r7, #17]
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d903      	bls.n	8006bce <optiga_lib_byte_to_hex_string+0x74>
 8006bc6:	7c7b      	ldrb	r3, [r7, #17]
 8006bc8:	3337      	adds	r3, #55	@ 0x37
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	e002      	b.n	8006bd4 <optiga_lib_byte_to_hex_string+0x7a>
 8006bce:	7c7b      	ldrb	r3, [r7, #17]
 8006bd0:	3330      	adds	r3, #48	@ 0x30
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	7cfa      	ldrb	r2, [r7, #19]
 8006bd6:	1c51      	adds	r1, r2, #1
 8006bd8:	74f9      	strb	r1, [r7, #19]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	440a      	add	r2, r1
 8006be0:	7013      	strb	r3, [r2, #0]
 8006be2:	7cbb      	ldrb	r3, [r7, #18]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	747b      	strb	r3, [r7, #17]
 8006bea:	7c7b      	ldrb	r3, [r7, #17]
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	d903      	bls.n	8006bf8 <optiga_lib_byte_to_hex_string+0x9e>
 8006bf0:	7c7b      	ldrb	r3, [r7, #17]
 8006bf2:	3337      	adds	r3, #55	@ 0x37
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	e002      	b.n	8006bfe <optiga_lib_byte_to_hex_string+0xa4>
 8006bf8:	7c7b      	ldrb	r3, [r7, #17]
 8006bfa:	3330      	adds	r3, #48	@ 0x30
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	7cfa      	ldrb	r2, [r7, #19]
 8006c00:	1c51      	adds	r1, r2, #1
 8006c02:	74f9      	strb	r1, [r7, #19]
 8006c04:	4611      	mov	r1, r2
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	440a      	add	r2, r1
 8006c0a:	7013      	strb	r3, [r2, #0]
            
            p_hex_string [index++] = ' ';
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	74fa      	strb	r2, [r7, #19]
 8006c12:	461a      	mov	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	2220      	movs	r2, #32
 8006c1a:	701a      	strb	r2, [r3, #0]
            p_hex_string += index;
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
        for (loop = 0; loop < length; loop++)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	3301      	adds	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3a9      	bcc.n	8006b86 <optiga_lib_byte_to_hex_string+0x2c>
        }
        *p_hex_string = 0x00;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e000      	b.n	8006c3c <optiga_lib_byte_to_hex_string+0xe2>
            return;
 8006c3a:	bf00      	nop
    } while(0);
}
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <optiga_lib_word_to_hex_string>:
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                             uint8_t * p_buffer)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b087      	sub	sp, #28
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	6039      	str	r1, [r7, #0]
 8006c50:	80fb      	strh	r3, [r7, #6]
    uint8_t array_buffer [5] = {0};   
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	2300      	movs	r3, #0
 8006c58:	743b      	strb	r3, [r7, #16]
    uint8_t loop, hex_byte = 0, index = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	757b      	strb	r3, [r7, #21]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	75bb      	strb	r3, [r7, #22]
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	0a1b      	lsrs	r3, r3, #8
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	733b      	strb	r3, [r7, #12]
    array_buffer [1] = (uint8_t)((value & 0x00FF));
 8006c6c:	88fb      	ldrh	r3, [r7, #6]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	737b      	strb	r3, [r7, #13]

    p_buffer [index++] = '0';
 8006c72:	7dbb      	ldrb	r3, [r7, #22]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	75ba      	strb	r2, [r7, #22]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	2230      	movs	r2, #48	@ 0x30
 8006c80:	701a      	strb	r2, [r3, #0]
    p_buffer [index++] = 'x';
 8006c82:	7dbb      	ldrb	r3, [r7, #22]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	75ba      	strb	r2, [r7, #22]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2278      	movs	r2, #120	@ 0x78
 8006c90:	701a      	strb	r2, [r3, #0]
    
    for (loop = 0; loop < 2; loop++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
 8006c96:	e031      	b.n	8006cfc <optiga_lib_word_to_hex_string+0xb6>
    {
        hex_byte = array_buffer[loop];
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	3318      	adds	r3, #24
 8006c9c:	443b      	add	r3, r7
 8006c9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006ca2:	757b      	strb	r3, [r7, #21]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
 8006ca4:	7d7b      	ldrb	r3, [r7, #21]
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	753b      	strb	r3, [r7, #20]
 8006caa:	7d3b      	ldrb	r3, [r7, #20]
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d903      	bls.n	8006cb8 <optiga_lib_word_to_hex_string+0x72>
 8006cb0:	7d3b      	ldrb	r3, [r7, #20]
 8006cb2:	3337      	adds	r3, #55	@ 0x37
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	e002      	b.n	8006cbe <optiga_lib_word_to_hex_string+0x78>
 8006cb8:	7d3b      	ldrb	r3, [r7, #20]
 8006cba:	3330      	adds	r3, #48	@ 0x30
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	7dba      	ldrb	r2, [r7, #22]
 8006cc0:	1c51      	adds	r1, r2, #1
 8006cc2:	75b9      	strb	r1, [r7, #22]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	440a      	add	r2, r1
 8006cca:	7013      	strb	r3, [r2, #0]
 8006ccc:	7d7b      	ldrb	r3, [r7, #21]
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	753b      	strb	r3, [r7, #20]
 8006cd4:	7d3b      	ldrb	r3, [r7, #20]
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d903      	bls.n	8006ce2 <optiga_lib_word_to_hex_string+0x9c>
 8006cda:	7d3b      	ldrb	r3, [r7, #20]
 8006cdc:	3337      	adds	r3, #55	@ 0x37
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	e002      	b.n	8006ce8 <optiga_lib_word_to_hex_string+0xa2>
 8006ce2:	7d3b      	ldrb	r3, [r7, #20]
 8006ce4:	3330      	adds	r3, #48	@ 0x30
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	7dba      	ldrb	r2, [r7, #22]
 8006cea:	1c51      	adds	r1, r2, #1
 8006cec:	75b9      	strb	r1, [r7, #22]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	7013      	strb	r3, [r2, #0]
    for (loop = 0; loop < 2; loop++)
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d9ca      	bls.n	8006c98 <optiga_lib_word_to_hex_string+0x52>
    }    

}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <optiga_lib_print_length_of_data>:

/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_print_length_of_data(uint16_t value)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b092      	sub	sp, #72	@ 0x48
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	80fb      	strh	r3, [r7, #6]
    uint8_t uint16t_conv_buffer [10] = {0};
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	809a      	strh	r2, [r3, #4]
    char_t print_buffer[50];      

    sprintf((char_t *)print_buffer, "%37s", "Length of data - ");
 8006d28:	f107 0308 	add.w	r3, r7, #8
 8006d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006d68 <optiga_lib_print_length_of_data+0x58>)
 8006d2e:	490f      	ldr	r1, [pc, #60]	@ (8006d6c <optiga_lib_print_length_of_data+0x5c>)
 8006d30:	4618      	mov	r0, r3
 8006d32:	f009 ff5f 	bl	8010bf4 <siprintf>
    strcat(print_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
    optiga_lib_word_to_hex_string(value,uint16t_conv_buffer);
 8006d36:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff ff81 	bl	8006c46 <optiga_lib_word_to_hex_string>
    strcat(print_buffer,(char_t *)uint16t_conv_buffer); 
 8006d44:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006d48:	f107 0308 	add.w	r3, r7, #8
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f00a f8a2 	bl	8010e98 <strcat>
    
    optiga_lib_print_string_with_newline(print_buffer);
 8006d54:	f107 0308 	add.w	r3, r7, #8
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 f809 	bl	8006d70 <optiga_lib_print_string_with_newline>
}
 8006d5e:	bf00      	nop
 8006d60:	3748      	adds	r7, #72	@ 0x48
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	08013464 	.word	0x08013464
 8006d6c:	08013478 	.word	0x08013478

08006d70 <optiga_lib_print_string_with_newline>:
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
}

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006d78:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8006d7c:	81bb      	strh	r3, [r7, #12]

    if (NULL == p_log_string)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <optiga_lib_print_string_with_newline+0x36>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7f9 fa2b 	bl	80001e0 <strlen>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4807      	ldr	r0, [pc, #28]	@ (8006db0 <optiga_lib_print_string_with_newline+0x40>)
 8006d92:	f000 fc47 	bl	8007624 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 8006d96:	f107 030c 	add.w	r3, r7, #12
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4804      	ldr	r0, [pc, #16]	@ (8006db0 <optiga_lib_print_string_with_newline+0x40>)
 8006da0:	f000 fc40 	bl	8007624 <pal_logger_write>
 8006da4:	e000      	b.n	8006da8 <optiga_lib_print_string_with_newline+0x38>
        return;
 8006da6:	bf00      	nop

}
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000da8 	.word	0x20000da8

08006db4 <optiga_lib_print_message>:

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b0ec      	sub	sp, #432	@ 0x1b0
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006dbe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006dc2:	6018      	str	r0, [r3, #0]
 8006dc4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006dc8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006dcc:	6019      	str	r1, [r3, #0]
 8006dce:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006dd2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8006dd6:	601a      	str	r2, [r3, #0]
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006dd8:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8006ddc:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
    char_t color_buffer[400];

    if ((NULL == p_log_string) || (NULL == p_log_layer) || (NULL == p_log_color))
 8006de0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006de4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d038      	beq.n	8006e60 <optiga_lib_print_message+0xac>
 8006dee:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006df2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d031      	beq.n	8006e60 <optiga_lib_print_message+0xac>
 8006dfc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006e00:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02a      	beq.n	8006e60 <optiga_lib_print_message+0xac>
    {
        return;
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, p_log_layer, p_log_color);
 8006e0a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006e0e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006e12:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8006e16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006e1a:	f107 0014 	add.w	r0, r7, #20
 8006e1e:	4913      	ldr	r1, [pc, #76]	@ (8006e6c <optiga_lib_print_message+0xb8>)
 8006e20:	9101      	str	r1, [sp, #4]
 8006e22:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8006e26:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8006e2a:	6809      	ldr	r1, [r1, #0]
 8006e2c:	9100      	str	r1, [sp, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	490f      	ldr	r1, [pc, #60]	@ (8006e70 <optiga_lib_print_message+0xbc>)
 8006e34:	f009 fede 	bl	8010bf4 <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
 8006e38:	f107 0314 	add.w	r3, r7, #20
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7f9 f9cf 	bl	80001e0 <strlen>
 8006e42:	4602      	mov	r2, r0
 8006e44:	f107 0314 	add.w	r3, r7, #20
 8006e48:	4619      	mov	r1, r3
 8006e4a:	480a      	ldr	r0, [pc, #40]	@ (8006e74 <optiga_lib_print_message+0xc0>)
 8006e4c:	f000 fbea 	bl	8007624 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 8006e50:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006e54:	2202      	movs	r2, #2
 8006e56:	4619      	mov	r1, r3
 8006e58:	4806      	ldr	r0, [pc, #24]	@ (8006e74 <optiga_lib_print_message+0xc0>)
 8006e5a:	f000 fbe3 	bl	8007624 <pal_logger_write>
 8006e5e:	e000      	b.n	8006e62 <optiga_lib_print_message+0xae>
        return;
 8006e60:	bf00      	nop
}
 8006e62:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	0801348c 	.word	0x0801348c
 8006e70:	08013480 	.word	0x08013480
 8006e74:	20000da8 	.word	0x20000da8

08006e78 <optiga_lib_print_array_hex_format>:
}

void optiga_lib_print_array_hex_format(const uint8_t * p_log_string,
                                       uint16_t length,
                                       const char_t * p_log_color)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8006e7e:	af02      	add	r7, sp, #8
 8006e80:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006e84:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8006e88:	6018      	str	r0, [r3, #0]
 8006e8a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006e8e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006e98:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006e9c:	460a      	mov	r2, r1
 8006e9e:	801a      	strh	r2, [r3, #0]
    uint8_t temp_buffer[350];
    char_t output_buffer[400];
    uint16_t index;
    uint16_t temp_length;
    char_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006ea0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ea4:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8006ea8:	f640 220d 	movw	r2, #2573	@ 0xa0d
 8006eac:	801a      	strh	r2, [r3, #0]
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
 8006eae:	2320      	movs	r3, #32
 8006eb0:	f887 3303 	strb.w	r3, [r7, #771]	@ 0x303

    if ((NULL == p_log_string) || (NULL == p_log_color))
 8006eb4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006eb8:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 809c 	beq.w	8006ffc <optiga_lib_print_array_hex_format+0x184>
 8006ec4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ec8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8094 	beq.w	8006ffc <optiga_lib_print_array_hex_format+0x184>
    {
        return;
    }
    
    optiga_lib_print_length_of_data(length);
 8006ed4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ed8:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ff16 	bl	8006d10 <optiga_lib_print_length_of_data>
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
 8006eea:	e07c      	b.n	8006fe6 <optiga_lib_print_array_hex_format+0x16e>
    {
        temp_length = buffer_window;
 8006eec:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006ef0:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
        if ((length - index) < buffer_window)
 8006ef4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ef8:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006efc:	881a      	ldrh	r2, [r3, #0]
 8006efe:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	da09      	bge.n	8006f20 <optiga_lib_print_array_hex_format+0xa8>
        {
            temp_length =  length - index;
 8006f0c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006f10:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
 8006f20:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006f24:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006f28:	2100      	movs	r1, #0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fd7c 	bl	8007a28 <pal_os_memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fd74 	bl	8007a28 <pal_os_memset>

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);
 8006f40:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006f44:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006f48:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	18d0      	adds	r0, r2, r3
 8006f50:	f8b7 2304 	ldrh.w	r2, [r7, #772]	@ 0x304
 8006f54:	f507 71d2 	add.w	r1, r7, #420	@ 0x1a4
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f7ff fdfe 	bl	8006b5a <optiga_lib_byte_to_hex_string>

        OPTIGA_LIB_LOGGER_PRINT_ARRAY(output_buffer,temp_buffer, p_log_color);
 8006f5e:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006f62:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006f66:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 8006f6a:	f107 0014 	add.w	r0, r7, #20
 8006f6e:	4926      	ldr	r1, [pc, #152]	@ (8007008 <optiga_lib_print_array_hex_format+0x190>)
 8006f70:	9100      	str	r1, [sp, #0]
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	4925      	ldr	r1, [pc, #148]	@ (800700c <optiga_lib_print_array_hex_format+0x194>)
 8006f76:	f009 fe3d 	bl	8010bf4 <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
 8006f7a:	f107 0314 	add.w	r3, r7, #20
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 f92e 	bl	80001e0 <strlen>
 8006f84:	4602      	mov	r2, r0
 8006f86:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006f8a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8006f8e:	7819      	ldrb	r1, [r3, #0]
 8006f90:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006f94:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8006f98:	5499      	strb	r1, [r3, r2]
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
 8006f9a:	f107 0314 	add.w	r3, r7, #20
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7f9 f91e 	bl	80001e0 <strlen>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006fac:	f5a2 723e 	sub.w	r2, r2, #760	@ 0x2f8
 8006fb0:	7851      	ldrb	r1, [r2, #1]
 8006fb2:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006fb6:	f5a2 723d 	sub.w	r2, r2, #756	@ 0x2f4
 8006fba:	54d1      	strb	r1, [r2, r3]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7f9 f90d 	bl	80001e0 <strlen>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	f107 0314 	add.w	r3, r7, #20
 8006fce:	4619      	mov	r1, r3
 8006fd0:	480f      	ldr	r0, [pc, #60]	@ (8007010 <optiga_lib_print_array_hex_format+0x198>)
 8006fd2:	f000 fb27 	bl	8007624 <pal_logger_write>
    for (index = 0; index < length; index+=buffer_window)
 8006fd6:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
 8006fe6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006fea:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006fee:	f8b7 2306 	ldrh.w	r2, [r7, #774]	@ 0x306
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	f4ff af79 	bcc.w	8006eec <optiga_lib_print_array_hex_format+0x74>
 8006ffa:	e000      	b.n	8006ffe <optiga_lib_print_array_hex_format+0x186>
        return;
 8006ffc:	bf00      	nop
    }
}
 8006ffe:	f507 7742 	add.w	r7, r7, #776	@ 0x308
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	0801348c 	.word	0x0801348c
 800700c:	080134b8 	.word	0x080134b8
 8007010:	20000da8 	.word	0x20000da8

08007014 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	6992      	ldr	r2, [r2, #24]
 8007032:	8879      	ldrh	r1, [r7, #2]
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 800704e:	2200      	movs	r2, #0
 8007050:	2101      	movs	r1, #1
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f804 	bl	8007060 <optiga_util_set_comms_params>
    }
}
 8007058:	bf00      	nop
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
 800706c:	4613      	mov	r3, r2
 800706e:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d002      	beq.n	800707c <optiga_util_set_comms_params+0x1c>
 8007076:	2b02      	cmp	r3, #2
 8007078:	d005      	beq.n	8007086 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 800707a:	e009      	b.n	8007090 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	78ba      	ldrb	r2, [r7, #2]
 8007080:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8007084:	e004      	b.n	8007090 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	78ba      	ldrb	r2, [r7, #2]
 800708a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 800708e:	bf00      	nop
        }
    }
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02b      	beq.n	800710c <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80070b4:	2124      	movs	r1, #36	@ 0x24
 80070b6:	2001      	movs	r0, #1
 80070b8:	f000 fc8e 	bl	80079d8 <pal_os_calloc>
 80070bc:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d025      	beq.n	8007110 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2200      	movs	r2, #0
 80070d4:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	490c      	ldr	r1, [pc, #48]	@ (800711c <optiga_util_create+0x80>)
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fd43 	bl	8005b78 <optiga_cmd_create>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8007100:	6978      	ldr	r0, [r7, #20]
 8007102:	f000 fc77 	bl	80079f4 <pal_os_free>
            me = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e002      	b.n	8007112 <optiga_util_create+0x76>
            break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <optiga_util_create+0x76>
            break;
 8007110:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 8007112:	697b      	ldr	r3, [r7, #20]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	08007015 	.word	0x08007015

08007120 <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d103      	bne.n	8007136 <optiga_util_destroy+0x16>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800712e:	f240 3303 	movw	r3, #771	@ 0x303
 8007132:	81fb      	strh	r3, [r7, #14]
            break;
 8007134:	e011      	b.n	800715a <optiga_util_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8c1b      	ldrh	r3, [r3, #32]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d103      	bne.n	8007146 <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800713e:	f240 3305 	movw	r3, #773	@ 0x305
 8007142:	81fb      	strh	r3, [r7, #14]
            break;
 8007144:	e009      	b.n	800715a <optiga_util_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fd92 	bl	8005c74 <optiga_cmd_destroy>
 8007150:	4603      	mov	r3, r0
 8007152:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc4d 	bl	80079f4 <pal_os_free>
    } while (FALSE);
    return (return_value);
 800715a:	89fb      	ldrh	r3, [r7, #14]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8007170:	f240 3302 	movw	r3, #770	@ 0x302
 8007174:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
 8007176:	4a2b      	ldr	r2, [pc, #172]	@ (8007224 <optiga_util_open_application+0xc0>)
 8007178:	492b      	ldr	r1, [pc, #172]	@ (8007228 <optiga_util_open_application+0xc4>)
 800717a:	482c      	ldr	r0, [pc, #176]	@ (800722c <optiga_util_open_application+0xc8>)
 800717c:	f7ff fe1a 	bl	8006db4 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <optiga_util_open_application+0x2a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d103      	bne.n	8007196 <optiga_util_open_application+0x32>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800718e:	f240 3303 	movw	r3, #771	@ 0x303
 8007192:	81fb      	strh	r3, [r7, #14]
            break;
 8007194:	e03d      	b.n	8007212 <optiga_util_open_application+0xae>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8c1b      	ldrh	r3, [r3, #32]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d103      	bne.n	80071a6 <optiga_util_open_application+0x42>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800719e:	f240 3305 	movw	r3, #773	@ 0x305
 80071a2:	81fb      	strh	r3, [r7, #14]
            break;
 80071a4:	e035      	b.n	8007212 <optiga_util_open_application+0xae>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6958      	ldr	r0, [r3, #20]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80071b6:	2200      	movs	r2, #0
 80071b8:	4619      	mov	r1, r3
 80071ba:	f7fd fc99 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6958      	ldr	r0, [r3, #20]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80071c8:	2201      	movs	r2, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	f7fd fc90 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d107      	bne.n	80071e6 <optiga_util_open_application+0x82>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2202      	movs	r2, #2
 80071dc:	2133      	movs	r1, #51	@ 0x33
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd fc86 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
 80071e4:	e006      	b.n	80071f4 <optiga_util_open_application+0x90>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	2202      	movs	r2, #2
 80071ec:	2111      	movs	r1, #17
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fd fc7e 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	78f9      	ldrb	r1, [r7, #3]
 80071fa:	2200      	movs	r2, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe ff25 	bl	800604c <optiga_cmd_open_application>
 8007202:	4603      	mov	r3, r0
 8007204:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8007206:	89fb      	ldrh	r3, [r7, #14]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <optiga_util_open_application+0xae>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff ff14 	bl	8007040 <optiga_util_reset_protection_level>

    return (return_value);
 8007218:	89fb      	ldrh	r3, [r7, #14]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	080134c4 	.word	0x080134c4
 8007228:	080134cc 	.word	0x080134cc
 800722c:	080135e0 	.word	0x080135e0

08007230 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	607b      	str	r3, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	817b      	strh	r3, [r7, #10]
 800723e:	4613      	mov	r3, r2
 8007240:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8007242:	f240 3302 	movw	r3, #770	@ 0x302
 8007246:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
 8007248:	4a35      	ldr	r2, [pc, #212]	@ (8007320 <optiga_util_read_data+0xf0>)
 800724a:	4936      	ldr	r1, [pc, #216]	@ (8007324 <optiga_util_read_data+0xf4>)
 800724c:	4836      	ldr	r0, [pc, #216]	@ (8007328 <optiga_util_read_data+0xf8>)
 800724e:	f7ff fdb1 	bl	8006db4 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d009      	beq.n	800726c <optiga_util_read_data+0x3c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <optiga_util_read_data+0x3c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <optiga_util_read_data+0x3c>
            (NULL == buffer) || (NULL == length))
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <optiga_util_read_data+0x44>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800726c:	f240 3303 	movw	r3, #771	@ 0x303
 8007270:	82fb      	strh	r3, [r7, #22]
            break;
 8007272:	e04d      	b.n	8007310 <optiga_util_read_data+0xe0>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8c1b      	ldrh	r3, [r3, #32]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d103      	bne.n	8007284 <optiga_util_read_data+0x54>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800727c:	f240 3305 	movw	r3, #773	@ 0x305
 8007280:	82fb      	strh	r3, [r7, #22]
            break;
 8007282:	e045      	b.n	8007310 <optiga_util_read_data+0xe0>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2201      	movs	r2, #1
 8007288:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2214      	movs	r2, #20
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fbc7 	bl	8007a28 <pal_os_memset>

        p_params->oid = optiga_oid;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	897a      	ldrh	r2, [r7, #10]
 800729e:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	893a      	ldrh	r2, [r7, #8]
 80072a4:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2200      	movs	r2, #0
 80072aa:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	881a      	ldrh	r2, [r3, #0]
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2200      	movs	r2, #0
 80072c4:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2200      	movs	r2, #0
 80072ca:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6958      	ldr	r0, [r3, #20]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80072d6:	2200      	movs	r2, #0
 80072d8:	4619      	mov	r1, r3
 80072da:	f7fd fc09 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6958      	ldr	r0, [r3, #20]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80072e8:	2201      	movs	r2, #1
 80072ea:	4619      	mov	r1, r3
 80072ec:	f7fd fc00 	bl	8004af0 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6958      	ldr	r0, [r3, #20]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	7c9b      	ldrb	r3, [r3, #18]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4619      	mov	r1, r3
 80072fc:	f7fe fff8 	bl	80062f0 <optiga_cmd_get_data_object>
 8007300:	4603      	mov	r3, r0
 8007302:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8007304:	8afb      	ldrh	r3, [r7, #22]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <optiga_util_read_data+0xe0>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fe95 	bl	8007040 <optiga_util_reset_protection_level>

    return (return_value);
 8007316:	8afb      	ldrh	r3, [r7, #22]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	080134c4 	.word	0x080134c4
 8007324:	080134cc 	.word	0x080134cc
 8007328:	08013600 	.word	0x08013600

0800732c <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <pal_deinit>:


pal_status_t pal_deinit(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	461a      	mov	r2, r3
 8007358:	460b      	mov	r3, r1
 800735a:	817b      	strh	r3, [r7, #10]
 800735c:	4613      	mov	r3, r2
 800735e:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d012      	beq.n	800738c <pal_crypt_tls_prf_sha256+0x40>
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00f      	beq.n	800738c <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 800736c:	2300      	movs	r3, #0
 800736e:	82fb      	strh	r3, [r7, #22]
 8007370:	e007      	b.n	8007382 <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8007372:	8afb      	ldrh	r3, [r7, #22]
 8007374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007376:	4413      	add	r3, r2
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 800737c:	8afb      	ldrh	r3, [r7, #22]
 800737e:	3301      	adds	r3, #1
 8007380:	82fb      	strh	r3, [r7, #22]
 8007382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	8afa      	ldrh	r2, [r7, #22]
 8007388:	429a      	cmp	r2, r3
 800738a:	d3f2      	bcc.n	8007372 <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 80073a8:	2300      	movs	r3, #0
 80073aa:	82fb      	strh	r3, [r7, #22]
 80073ac:	e00a      	b.n	80073c4 <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 80073ae:	8afb      	ldrh	r3, [r7, #22]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	441a      	add	r2, r3
 80073b4:	8afb      	ldrh	r3, [r7, #22]
 80073b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b8:	440b      	add	r3, r1
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80073be:	8afb      	ldrh	r3, [r7, #22]
 80073c0:	3301      	adds	r3, #1
 80073c2:	82fb      	strh	r3, [r7, #22]
 80073c4:	8afa      	ldrh	r2, [r7, #22]
 80073c6:	8c3b      	ldrh	r3, [r7, #32]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d3f0      	bcc.n	80073ae <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 80073da:	b480      	push	{r7}
 80073dc:	b087      	sub	sp, #28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 80073ea:	2300      	movs	r3, #0
 80073ec:	82fb      	strh	r3, [r7, #22]
 80073ee:	e00a      	b.n	8007406 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 80073f0:	8afb      	ldrh	r3, [r7, #22]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	441a      	add	r2, r3
 80073f6:	8afb      	ldrh	r3, [r7, #22]
 80073f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80073fa:	440b      	add	r3, r1
 80073fc:	7812      	ldrb	r2, [r2, #0]
 80073fe:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8007400:	8afb      	ldrh	r3, [r7, #22]
 8007402:	3301      	adds	r3, #1
 8007404:	82fb      	strh	r3, [r7, #22]
 8007406:	8afa      	ldrh	r2, [r7, #22]
 8007408:	8c3b      	ldrh	r3, [r7, #32]
 800740a:	429a      	cmp	r2, r3
 800740c:	d3f0      	bcc.n	80073f0 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800742c:	2201      	movs	r2, #1
 800742e:	4619      	mov	r1, r3
 8007430:	f004 fb48 	bl	800bac4 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800744c:	2200      	movs	r2, #0
 800744e:	4619      	mov	r1, r3
 8007450:	f004 fb38 	bl	800bac4 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8007464:	4b08      	ldr	r3, [pc, #32]	@ (8007488 <pal_i2c_acquire+0x2c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 800746c:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <pal_i2c_acquire+0x2c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a05      	ldr	r2, [pc, #20]	@ (8007488 <pal_i2c_acquire+0x2c>)
 8007474:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 8007476:	2300      	movs	r3, #0
 8007478:	e000      	b.n	800747c <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 800747a:	2301      	movs	r3, #1
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	20000db0 	.word	0x20000db0

0800748c <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 8007494:	4b04      	ldr	r3, [pc, #16]	@ (80074a8 <pal_i2c_release+0x1c>)
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20000db0 	.word	0x20000db0

080074ac <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff ffd8 	bl	800748c <pal_i2c_release>
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd90      	pop	{r4, r7, pc}

080074e4 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 800751e:	2301      	movs	r3, #1
 8007520:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f7ff ff9a 	bl	800745c <pal_i2c_acquire>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d120      	bne.n	8007570 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 800752e:	4a16      	ldr	r2, [pc, #88]	@ (8007588 <pal_i2c_write+0x78>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	b299      	uxth	r1, r3
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007546:	9200      	str	r2, [sp, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	f004 fc53 	bl	800bdf4 <HAL_I2C_Master_Transmit>
 800754e:	4603      	mov	r3, r0
 8007550:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8007552:	7d7b      	ldrb	r3, [r7, #21]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8007558:	2100      	movs	r1, #0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff ffa6 	bl	80074ac <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8007560:	2300      	movs	r3, #0
 8007562:	82fb      	strh	r3, [r7, #22]
 8007564:	e00a      	b.n	800757c <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8007566:	2101      	movs	r1, #1
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff ff9f 	bl	80074ac <invoke_upper_layer_callback>
 800756e:	e005      	b.n	800757c <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8007570:	2302      	movs	r3, #2
 8007572:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8007574:	2102      	movs	r1, #2
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff ff98 	bl	80074ac <invoke_upper_layer_callback>
    }

    return status;
 800757c:	8afb      	ldrh	r3, [r7, #22]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000db4 	.word	0x20000db4

0800758c <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af02      	add	r7, sp, #8
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 800759a:	2301      	movs	r3, #1
 800759c:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff ff5c 	bl	800745c <pal_i2c_acquire>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d120      	bne.n	80075ec <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 80075aa:	4a16      	ldr	r2, [pc, #88]	@ (8007604 <pal_i2c_read+0x78>)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	b299      	uxth	r1, r3
 80075bc:	88fb      	ldrh	r3, [r7, #6]
 80075be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075c2:	9200      	str	r2, [sp, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	f004 fd13 	bl	800bff0 <HAL_I2C_Master_Receive>
 80075ca:	4603      	mov	r3, r0
 80075cc:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 80075ce:	7d7b      	ldrb	r3, [r7, #21]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 80075d4:	2100      	movs	r1, #0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff ff68 	bl	80074ac <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 80075dc:	2300      	movs	r3, #0
 80075de:	82fb      	strh	r3, [r7, #22]
 80075e0:	e00a      	b.n	80075f8 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 80075e2:	2101      	movs	r1, #1
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff ff61 	bl	80074ac <invoke_upper_layer_callback>
 80075ea:	e005      	b.n	80075f8 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80075ec:	2302      	movs	r3, #2
 80075ee:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 80075f0:	2102      	movs	r1, #2
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7ff ff5a 	bl	80074ac <invoke_upper_layer_callback>
    }

    return status;
 80075f8:	8afb      	ldrh	r3, [r7, #22]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000db4 	.word	0x20000db4

08007608 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]

    int32_t return_status = PAL_STATUS_FAILURE;
 8007630:	2301      	movs	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
    pal_logger_t * p_log_context = p_logger_context;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	613b      	str	r3, [r7, #16]

    do
    {
        HAL_UART_Transmit(&huart2, p_log_data, log_data_length, HAL_MAX_DELAY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	b29a      	uxth	r2, r3
 800763c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	4804      	ldr	r0, [pc, #16]	@ (8007654 <pal_logger_write+0x30>)
 8007644:	f008 f9a6 	bl	800f994 <HAL_UART_Transmit>
    } while(0);
    return ((pal_status_t)return_status);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	b29b      	uxth	r3, r3
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000680 	.word	0x20000680

08007658 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	80fb      	strh	r3, [r7, #6]
 8007664:	4613      	mov	r3, r2
 8007666:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8007668:	2301      	movs	r3, #1
 800766a:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 800766c:	2300      	movs	r3, #0
 800766e:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8007670:	88fb      	ldrh	r3, [r7, #6]
 8007672:	2b33      	cmp	r3, #51	@ 0x33
 8007674:	d043      	beq.n	80076fe <pal_os_datastore_write+0xa6>
 8007676:	2b33      	cmp	r3, #51	@ 0x33
 8007678:	dc5e      	bgt.n	8007738 <pal_os_datastore_write+0xe0>
 800767a:	2b11      	cmp	r3, #17
 800767c:	d002      	beq.n	8007684 <pal_os_datastore_write+0x2c>
 800767e:	2b22      	cmp	r3, #34	@ 0x22
 8007680:	d020      	beq.n	80076c4 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8007682:	e059      	b.n	8007738 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8007684:	88bb      	ldrh	r3, [r7, #4]
 8007686:	2b40      	cmp	r3, #64	@ 0x40
 8007688:	d858      	bhi.n	800773c <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 800768a:	88bb      	ldrh	r3, [r7, #4]
 800768c:	0a1b      	lsrs	r3, r3, #8
 800768e:	b299      	uxth	r1, r3
 8007690:	7b7b      	ldrb	r3, [r7, #13]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	737a      	strb	r2, [r7, #13]
 8007696:	461a      	mov	r2, r3
 8007698:	b2c9      	uxtb	r1, r1
 800769a:	4b2b      	ldr	r3, [pc, #172]	@ (8007748 <pal_os_datastore_write+0xf0>)
 800769c:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 800769e:	7b7b      	ldrb	r3, [r7, #13]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	737a      	strb	r2, [r7, #13]
 80076a4:	461a      	mov	r2, r3
 80076a6:	88bb      	ldrh	r3, [r7, #4]
 80076a8:	b2d9      	uxtb	r1, r3
 80076aa:	4b27      	ldr	r3, [pc, #156]	@ (8007748 <pal_os_datastore_write+0xf0>)
 80076ac:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 80076ae:	7b7b      	ldrb	r3, [r7, #13]
 80076b0:	4a25      	ldr	r2, [pc, #148]	@ (8007748 <pal_os_datastore_write+0xf0>)
 80076b2:	4413      	add	r3, r2
 80076b4:	88ba      	ldrh	r2, [r7, #4]
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f009 fc52 	bl	8010f62 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 80076be:	2300      	movs	r3, #0
 80076c0:	81fb      	strh	r3, [r7, #14]
            break;
 80076c2:	e03b      	b.n	800773c <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 80076c4:	88bb      	ldrh	r3, [r7, #4]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b299      	uxth	r1, r3
 80076ca:	7b7b      	ldrb	r3, [r7, #13]
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	737a      	strb	r2, [r7, #13]
 80076d0:	461a      	mov	r2, r3
 80076d2:	b2c9      	uxtb	r1, r1
 80076d4:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <pal_os_datastore_write+0xf4>)
 80076d6:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 80076d8:	7b7b      	ldrb	r3, [r7, #13]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	737a      	strb	r2, [r7, #13]
 80076de:	461a      	mov	r2, r3
 80076e0:	88bb      	ldrh	r3, [r7, #4]
 80076e2:	b2d9      	uxtb	r1, r3
 80076e4:	4b19      	ldr	r3, [pc, #100]	@ (800774c <pal_os_datastore_write+0xf4>)
 80076e6:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 80076e8:	7b7b      	ldrb	r3, [r7, #13]
 80076ea:	4a18      	ldr	r2, [pc, #96]	@ (800774c <pal_os_datastore_write+0xf4>)
 80076ec:	4413      	add	r3, r2
 80076ee:	88ba      	ldrh	r2, [r7, #4]
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f009 fc35 	bl	8010f62 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80076f8:	2300      	movs	r3, #0
 80076fa:	81fb      	strh	r3, [r7, #14]
            break;
 80076fc:	e01f      	b.n	800773e <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 80076fe:	88bb      	ldrh	r3, [r7, #4]
 8007700:	0a1b      	lsrs	r3, r3, #8
 8007702:	b299      	uxth	r1, r3
 8007704:	7b7b      	ldrb	r3, [r7, #13]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	737a      	strb	r2, [r7, #13]
 800770a:	461a      	mov	r2, r3
 800770c:	b2c9      	uxtb	r1, r1
 800770e:	4b10      	ldr	r3, [pc, #64]	@ (8007750 <pal_os_datastore_write+0xf8>)
 8007710:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8007712:	7b7b      	ldrb	r3, [r7, #13]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	737a      	strb	r2, [r7, #13]
 8007718:	461a      	mov	r2, r3
 800771a:	88bb      	ldrh	r3, [r7, #4]
 800771c:	b2d9      	uxtb	r1, r3
 800771e:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <pal_os_datastore_write+0xf8>)
 8007720:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8007722:	7b7b      	ldrb	r3, [r7, #13]
 8007724:	4a0a      	ldr	r2, [pc, #40]	@ (8007750 <pal_os_datastore_write+0xf8>)
 8007726:	4413      	add	r3, r2
 8007728:	88ba      	ldrh	r2, [r7, #4]
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f009 fc18 	bl	8010f62 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8007732:	2300      	movs	r3, #0
 8007734:	81fb      	strh	r3, [r7, #14]
            break;
 8007736:	e002      	b.n	800773e <pal_os_datastore_write+0xe6>
            break;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <pal_os_datastore_write+0xe6>
            break;
 800773c:	bf00      	nop
        }
    }
    return return_status;
 800773e:	89fb      	ldrh	r3, [r7, #14]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20000510 	.word	0x20000510
 800774c:	20000db8 	.word	0x20000db8
 8007750:	20000dfc 	.word	0x20000dfc

08007754 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8007762:	2301      	movs	r3, #1
 8007764:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	2b33      	cmp	r3, #51	@ 0x33
 800776e:	d049      	beq.n	8007804 <pal_os_datastore_read+0xb0>
 8007770:	2b33      	cmp	r3, #51	@ 0x33
 8007772:	dc67      	bgt.n	8007844 <pal_os_datastore_read+0xf0>
 8007774:	2b11      	cmp	r3, #17
 8007776:	d002      	beq.n	800777e <pal_os_datastore_read+0x2a>
 8007778:	2b22      	cmp	r3, #34	@ 0x22
 800777a:	d023      	beq.n	80077c4 <pal_os_datastore_read+0x70>
 800777c:	e062      	b.n	8007844 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 800777e:	7d7b      	ldrb	r3, [r7, #21]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	757a      	strb	r2, [r7, #21]
 8007784:	461a      	mov	r2, r3
 8007786:	4b34      	ldr	r3, [pc, #208]	@ (8007858 <pal_os_datastore_read+0x104>)
 8007788:	5c9b      	ldrb	r3, [r3, r2]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 800778e:	7d7b      	ldrb	r3, [r7, #21]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	757a      	strb	r2, [r7, #21]
 8007794:	461a      	mov	r2, r3
 8007796:	4b30      	ldr	r3, [pc, #192]	@ (8007858 <pal_os_datastore_read+0x104>)
 8007798:	5c9b      	ldrb	r3, [r3, r2]
 800779a:	461a      	mov	r2, r3
 800779c:	8a7b      	ldrh	r3, [r7, #18]
 800779e:	4313      	orrs	r3, r2
 80077a0:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80077a2:	8a7b      	ldrh	r3, [r7, #18]
 80077a4:	2b40      	cmp	r3, #64	@ 0x40
 80077a6:	d851      	bhi.n	800784c <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 80077a8:	7d7b      	ldrb	r3, [r7, #21]
 80077aa:	4a2b      	ldr	r2, [pc, #172]	@ (8007858 <pal_os_datastore_read+0x104>)
 80077ac:	4413      	add	r3, r2
 80077ae:	8a7a      	ldrh	r2, [r7, #18]
 80077b0:	4619      	mov	r1, r3
 80077b2:	68b8      	ldr	r0, [r7, #8]
 80077b4:	f009 fbd5 	bl	8010f62 <memcpy>
                *p_buffer_length = data_length;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8a7a      	ldrh	r2, [r7, #18]
 80077bc:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 80077be:	2300      	movs	r3, #0
 80077c0:	82fb      	strh	r3, [r7, #22]
            }
            break;
 80077c2:	e043      	b.n	800784c <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 80077c4:	7d7b      	ldrb	r3, [r7, #21]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	757a      	strb	r2, [r7, #21]
 80077ca:	461a      	mov	r2, r3
 80077cc:	4b23      	ldr	r3, [pc, #140]	@ (800785c <pal_os_datastore_read+0x108>)
 80077ce:	5c9b      	ldrb	r3, [r3, r2]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 80077d4:	7d7b      	ldrb	r3, [r7, #21]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	757a      	strb	r2, [r7, #21]
 80077da:	461a      	mov	r2, r3
 80077dc:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <pal_os_datastore_read+0x108>)
 80077de:	5c9b      	ldrb	r3, [r3, r2]
 80077e0:	461a      	mov	r2, r3
 80077e2:	8a7b      	ldrh	r3, [r7, #18]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 80077e8:	7d7b      	ldrb	r3, [r7, #21]
 80077ea:	4a1c      	ldr	r2, [pc, #112]	@ (800785c <pal_os_datastore_read+0x108>)
 80077ec:	4413      	add	r3, r2
 80077ee:	8a7a      	ldrh	r2, [r7, #18]
 80077f0:	4619      	mov	r1, r3
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	f009 fbb5 	bl	8010f62 <memcpy>
            *p_buffer_length = data_length;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8a7a      	ldrh	r2, [r7, #18]
 80077fc:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80077fe:	2300      	movs	r3, #0
 8007800:	82fb      	strh	r3, [r7, #22]
            break;
 8007802:	e024      	b.n	800784e <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8007804:	7d7b      	ldrb	r3, [r7, #21]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	757a      	strb	r2, [r7, #21]
 800780a:	461a      	mov	r2, r3
 800780c:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <pal_os_datastore_read+0x10c>)
 800780e:	5c9b      	ldrb	r3, [r3, r2]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8007814:	7d7b      	ldrb	r3, [r7, #21]
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	757a      	strb	r2, [r7, #21]
 800781a:	461a      	mov	r2, r3
 800781c:	4b10      	ldr	r3, [pc, #64]	@ (8007860 <pal_os_datastore_read+0x10c>)
 800781e:	5c9b      	ldrb	r3, [r3, r2]
 8007820:	461a      	mov	r2, r3
 8007822:	8a7b      	ldrh	r3, [r7, #18]
 8007824:	4313      	orrs	r3, r2
 8007826:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8007828:	7d7b      	ldrb	r3, [r7, #21]
 800782a:	4a0d      	ldr	r2, [pc, #52]	@ (8007860 <pal_os_datastore_read+0x10c>)
 800782c:	4413      	add	r3, r2
 800782e:	8a7a      	ldrh	r2, [r7, #18]
 8007830:	4619      	mov	r1, r3
 8007832:	68b8      	ldr	r0, [r7, #8]
 8007834:	f009 fb95 	bl	8010f62 <memcpy>
            *p_buffer_length = data_length;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8a7a      	ldrh	r2, [r7, #18]
 800783c:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 800783e:	2300      	movs	r3, #0
 8007840:	82fb      	strh	r3, [r7, #22]
            break;
 8007842:	e004      	b.n	800784e <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	801a      	strh	r2, [r3, #0]
            break;
 800784a:	e000      	b.n	800784e <pal_os_datastore_read+0xfa>
            break;
 800784c:	bf00      	nop
        }
    }

    return return_status;
 800784e:	8afb      	ldrh	r3, [r7, #22]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20000510 	.word	0x20000510
 800785c:	20000db8 	.word	0x20000db8
 8007860:	20000dfc 	.word	0x20000dfc

08007864 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	7a1b      	ldrb	r3, [r3, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 800787e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 f82a 	bl	80078e0 <pal_os_event_register_callback_oneshot>
    }
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	721a      	strb	r2, [r3, #8]
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
	...

080078b0 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <pal_os_event_create+0x20>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4804      	ldr	r0, [pc, #16]	@ (80078dc <pal_os_event_create+0x2c>)
 80078cc:	f7ff ffca 	bl	8007864 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 80078d0:	4b02      	ldr	r3, [pc, #8]	@ (80078dc <pal_os_event_create+0x2c>)
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000e08 	.word	0x20000e08

080078e0 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007928 <pal_os_event_register_callback_oneshot+0x48>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	099b      	lsrs	r3, r3, #6
 80078f8:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 8007906:	f003 f867 	bl	800a9d8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	4413      	add	r3, r2
 8007910:	4a06      	ldr	r2, [pc, #24]	@ (800792c <pal_os_event_register_callback_oneshot+0x4c>)
 8007912:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8007914:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <pal_os_event_register_callback_oneshot+0x50>)
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 800791a:	4806      	ldr	r0, [pc, #24]	@ (8007934 <pal_os_event_register_callback_oneshot+0x54>)
 800791c:	f007 fc06 	bl	800f12c <HAL_TIM_Base_Start_IT>
}
 8007920:	bf00      	nop
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	10624dd3 	.word	0x10624dd3
 800792c:	20000e20 	.word	0x20000e20
 8007930:	20000e24 	.word	0x20000e24
 8007934:	20000638 	.word	0x20000638

08007938 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <pal_os_event_trigger_registered_callback+0x3c>)
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d011      	beq.n	800796a <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 8007946:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <pal_os_event_trigger_registered_callback+0x3c>)
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 800794c:	4b09      	ldr	r3, [pc, #36]	@ (8007974 <pal_os_event_trigger_registered_callback+0x3c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8007952:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <pal_os_event_trigger_registered_callback+0x3c>)
 8007954:	2200      	movs	r2, #0
 8007956:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8007958:	4b06      	ldr	r3, [pc, #24]	@ (8007974 <pal_os_event_trigger_registered_callback+0x3c>)
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 800795e:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <pal_os_event_trigger_registered_callback+0x40>)
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6838      	ldr	r0, [r7, #0]
 8007968:	4798      	blx	r3
    }
}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000e08 	.word	0x20000e08
 8007978:	20000e24 	.word	0x20000e24

0800797c <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8007980:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <pal_os_event_timer_tick+0x24>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <pal_os_event_timer_tick+0x1e>
 8007988:	f003 f826 	bl	800a9d8 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <pal_os_event_timer_tick+0x28>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d301      	bcc.n	800799a <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 8007996:	f7ff ffcf 	bl	8007938 <pal_os_event_trigger_registered_callback>
    }
}
 800799a:	bf00      	nop
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000e24 	.word	0x20000e24
 80079a4:	20000e20 	.word	0x20000e20

080079a8 <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 80079c0:	bf00      	nop
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 80079ca:	b480      	push	{r7}
 80079cc:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 80079ce:	bf00      	nop
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f009 f833 	bl	8010a50 <calloc>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <pal_os_free>:

void pal_os_free(void * block)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
    free(block);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f009 f843 	bl	8010a88 <free>
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f009 faa1 	bl	8010f62 <memcpy>
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f009 fa4a 	bl	8010ed6 <memset>
}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 8007a4e:	f002 ffc3 	bl	800a9d8 <HAL_GetTick>
 8007a52:	4603      	mov	r3, r0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8007a5c:	f002 ffbc 	bl	800a9d8 <HAL_GetTick>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8007a7a:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <mbedtls_platform_zeroize+0x20>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000554 	.word	0x20000554

08007a94 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8007a9c:	226c      	movs	r2, #108	@ 0x6c
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f009 fa18 	bl	8010ed6 <memset>
}
 8007aa6:	bf00      	nop
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8007abc:	216c      	movs	r1, #108	@ 0x6c
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff ffd6 	bl	8007a70 <mbedtls_platform_zeroize>
 8007ac4:	e000      	b.n	8007ac8 <mbedtls_sha256_free+0x1a>
        return;
 8007ac6:	bf00      	nop
}
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d118      	bne.n	8007b1e <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1d      	ldr	r2, [pc, #116]	@ (8007b64 <mbedtls_sha256_starts_ret+0x94>)
 8007af0:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b68 <mbedtls_sha256_starts_ret+0x98>)
 8007af6:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1c      	ldr	r2, [pc, #112]	@ (8007b6c <mbedtls_sha256_starts_ret+0x9c>)
 8007afc:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a1b      	ldr	r2, [pc, #108]	@ (8007b70 <mbedtls_sha256_starts_ret+0xa0>)
 8007b02:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1b      	ldr	r2, [pc, #108]	@ (8007b74 <mbedtls_sha256_starts_ret+0xa4>)
 8007b08:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007b78 <mbedtls_sha256_starts_ret+0xa8>)
 8007b0e:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1a      	ldr	r2, [pc, #104]	@ (8007b7c <mbedtls_sha256_starts_ret+0xac>)
 8007b14:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a19      	ldr	r2, [pc, #100]	@ (8007b80 <mbedtls_sha256_starts_ret+0xb0>)
 8007b1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b1c:	e017      	b.n	8007b4e <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a18      	ldr	r2, [pc, #96]	@ (8007b84 <mbedtls_sha256_starts_ret+0xb4>)
 8007b22:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a18      	ldr	r2, [pc, #96]	@ (8007b88 <mbedtls_sha256_starts_ret+0xb8>)
 8007b28:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a17      	ldr	r2, [pc, #92]	@ (8007b8c <mbedtls_sha256_starts_ret+0xbc>)
 8007b2e:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a17      	ldr	r2, [pc, #92]	@ (8007b90 <mbedtls_sha256_starts_ret+0xc0>)
 8007b34:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a16      	ldr	r2, [pc, #88]	@ (8007b94 <mbedtls_sha256_starts_ret+0xc4>)
 8007b3a:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a16      	ldr	r2, [pc, #88]	@ (8007b98 <mbedtls_sha256_starts_ret+0xc8>)
 8007b40:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a15      	ldr	r2, [pc, #84]	@ (8007b9c <mbedtls_sha256_starts_ret+0xcc>)
 8007b46:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ba0 <mbedtls_sha256_starts_ret+0xd0>)
 8007b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	6a09e667 	.word	0x6a09e667
 8007b68:	bb67ae85 	.word	0xbb67ae85
 8007b6c:	3c6ef372 	.word	0x3c6ef372
 8007b70:	a54ff53a 	.word	0xa54ff53a
 8007b74:	510e527f 	.word	0x510e527f
 8007b78:	9b05688c 	.word	0x9b05688c
 8007b7c:	1f83d9ab 	.word	0x1f83d9ab
 8007b80:	5be0cd19 	.word	0x5be0cd19
 8007b84:	c1059ed8 	.word	0xc1059ed8
 8007b88:	367cd507 	.word	0x367cd507
 8007b8c:	3070dd17 	.word	0x3070dd17
 8007b90:	f70e5939 	.word	0xf70e5939
 8007b94:	ffc00b31 	.word	0xffc00b31
 8007b98:	68581511 	.word	0x68581511
 8007b9c:	64f98fa7 	.word	0x64f98fa7
 8007ba0:	befa4fa4 	.word	0xbefa4fa4

08007ba4 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8007ba4:	b490      	push	{r4, r7}
 8007ba6:	b0ce      	sub	sp, #312	@ 0x138
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007bb2:	6018      	str	r0, [r3, #0]
 8007bb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bb8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007bbc:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007bc4:	e016      	b.n	8007bf4 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8007bc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007bd4:	3202      	adds	r2, #2
 8007bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007be2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8007bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bee:	3301      	adds	r3, #1
 8007bf0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d9e4      	bls.n	8007bc6 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c02:	e03e      	b.n	8007c82 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8007c04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007c0e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	061a      	lsls	r2, r3, #24
 8007c1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	3301      	adds	r3, #1
 8007c22:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c26:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c2a:	6809      	ldr	r1, [r1, #0]
 8007c2c:	440b      	add	r3, r1
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	431a      	orrs	r2, r3
 8007c34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	3302      	adds	r3, #2
 8007c3c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c40:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c44:	6809      	ldr	r1, [r1, #0]
 8007c46:	440b      	add	r3, r1
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007c52:	0092      	lsls	r2, r2, #2
 8007c54:	3203      	adds	r2, #3
 8007c56:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c5a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c5e:	6809      	ldr	r1, [r1, #0]
 8007c60:	440a      	add	r2, r1
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	ea43 0102 	orr.w	r1, r3, r2
 8007c68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c70:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8007c78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c86:	2b0f      	cmp	r3, #15
 8007c88:	d9bc      	bls.n	8007c04 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c90:	f000 bcba 	b.w	8008608 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8007c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c9c:	69da      	ldr	r2, [r3, #28]
 8007c9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007cac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007cba:	4059      	eors	r1, r3
 8007cbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007cca:	404b      	eors	r3, r1
 8007ccc:	441a      	add	r2, r3
 8007cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cd6:	6999      	ldr	r1, [r3, #24]
 8007cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce0:	6918      	ldr	r0, [r3, #16]
 8007ce2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cea:	695c      	ldr	r4, [r3, #20]
 8007cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	4063      	eors	r3, r4
 8007cf8:	4003      	ands	r3, r0
 8007cfa:	404b      	eors	r3, r1
 8007cfc:	441a      	add	r2, r3
 8007cfe:	49e0      	ldr	r1, [pc, #896]	@ (8008080 <mbedtls_internal_sha256_process+0x4dc>)
 8007d00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d08:	441a      	add	r2, r3
 8007d0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d12:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007d20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007d2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007d3c:	405a      	eors	r2, r3
 8007d3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007d4c:	405a      	eors	r2, r3
 8007d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d56:	6819      	ldr	r1, [r3, #0]
 8007d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4019      	ands	r1, r3
 8007d64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d6c:	6898      	ldr	r0, [r3, #8]
 8007d6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d76:	681c      	ldr	r4, [r3, #0]
 8007d78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	4323      	orrs	r3, r4
 8007d84:	4003      	ands	r3, r0
 8007d86:	430b      	orrs	r3, r1
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007d8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d9c:	441a      	add	r2, r3
 8007d9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007da2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007da6:	60da      	str	r2, [r3, #12]
 8007da8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007db0:	441a      	add	r2, r3
 8007db2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007db6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dba:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007dbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007de2:	4059      	eors	r1, r3
 8007de4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007df2:	404b      	eors	r3, r1
 8007df4:	441a      	add	r2, r3
 8007df6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dfe:	6959      	ldr	r1, [r3, #20]
 8007e00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e08:	68d8      	ldr	r0, [r3, #12]
 8007e0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e12:	691c      	ldr	r4, [r3, #16]
 8007e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	4063      	eors	r3, r4
 8007e20:	4003      	ands	r3, r0
 8007e22:	404b      	eors	r3, r1
 8007e24:	441a      	add	r2, r3
 8007e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	4994      	ldr	r1, [pc, #592]	@ (8008080 <mbedtls_internal_sha256_process+0x4dc>)
 8007e2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e32:	441a      	add	r2, r3
 8007e34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e38:	1c59      	adds	r1, r3, #1
 8007e3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e46:	4413      	add	r3, r2
 8007e48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007e4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007e5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007e68:	405a      	eors	r2, r3
 8007e6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007e78:	405a      	eors	r2, r3
 8007e7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e82:	69d9      	ldr	r1, [r3, #28]
 8007e84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4019      	ands	r1, r3
 8007e90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e98:	6858      	ldr	r0, [r3, #4]
 8007e9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ea2:	69dc      	ldr	r4, [r3, #28]
 8007ea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4323      	orrs	r3, r4
 8007eb0:	4003      	ands	r3, r0
 8007eb2:	430b      	orrs	r3, r1
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007eba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ebe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ec8:	441a      	add	r2, r3
 8007eca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ece:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007edc:	441a      	add	r2, r3
 8007ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ee6:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8007ee8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007f00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007f0e:	4059      	eors	r1, r3
 8007f10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007f1e:	404b      	eors	r3, r1
 8007f20:	441a      	add	r2, r3
 8007f22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f2a:	6919      	ldr	r1, [r3, #16]
 8007f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f34:	6898      	ldr	r0, [r3, #8]
 8007f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f3e:	68dc      	ldr	r4, [r3, #12]
 8007f40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	4063      	eors	r3, r4
 8007f4c:	4003      	ands	r3, r0
 8007f4e:	404b      	eors	r3, r1
 8007f50:	441a      	add	r2, r3
 8007f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f56:	3302      	adds	r3, #2
 8007f58:	4949      	ldr	r1, [pc, #292]	@ (8008080 <mbedtls_internal_sha256_process+0x4dc>)
 8007f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f5e:	441a      	add	r2, r3
 8007f60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f64:	1c99      	adds	r1, r3, #2
 8007f66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f72:	4413      	add	r3, r2
 8007f74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007f78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007f86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007f94:	405a      	eors	r2, r3
 8007f96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007fa4:	405a      	eors	r2, r3
 8007fa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007faa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fae:	6999      	ldr	r1, [r3, #24]
 8007fb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	4019      	ands	r1, r3
 8007fbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fce:	699c      	ldr	r4, [r3, #24]
 8007fd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	4323      	orrs	r3, r4
 8007fdc:	4003      	ands	r3, r0
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ff4:	441a      	add	r2, r3
 8007ff6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ffa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008004:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008008:	441a      	add	r2, r3
 800800a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800800e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008012:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8008014:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008018:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800801c:	691a      	ldr	r2, [r3, #16]
 800801e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800802c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008030:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800803a:	4059      	eors	r1, r3
 800803c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008040:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	ea4f 6373 	mov.w	r3, r3, ror #25
 800804a:	404b      	eors	r3, r1
 800804c:	441a      	add	r2, r3
 800804e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008052:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008056:	68d9      	ldr	r1, [r3, #12]
 8008058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800805c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008060:	6858      	ldr	r0, [r3, #4]
 8008062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800806a:	689c      	ldr	r4, [r3, #8]
 800806c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008070:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	4063      	eors	r3, r4
 8008078:	4003      	ands	r3, r0
 800807a:	404b      	eors	r3, r1
 800807c:	441a      	add	r2, r3
 800807e:	e001      	b.n	8008084 <mbedtls_internal_sha256_process+0x4e0>
 8008080:	08013618 	.word	0x08013618
 8008084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008088:	3303      	adds	r3, #3
 800808a:	49e0      	ldr	r1, [pc, #896]	@ (800840c <mbedtls_internal_sha256_process+0x868>)
 800808c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008090:	441a      	add	r2, r3
 8008092:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008096:	1cd9      	adds	r1, r3, #3
 8008098:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800809c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80080a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080a4:	4413      	add	r3, r2
 80080a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80080aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80080b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80080c6:	405a      	eors	r2, r3
 80080c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80080d6:	405a      	eors	r2, r3
 80080d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080e0:	6959      	ldr	r1, [r3, #20]
 80080e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	4019      	ands	r1, r3
 80080ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080f6:	69d8      	ldr	r0, [r3, #28]
 80080f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008100:	695c      	ldr	r4, [r3, #20]
 8008102:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008106:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	4323      	orrs	r3, r4
 800810e:	4003      	ands	r3, r0
 8008110:	430b      	orrs	r3, r1
 8008112:	4413      	add	r3, r2
 8008114:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008118:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800811c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008126:	441a      	add	r2, r3
 8008128:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800812c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008136:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800813a:	441a      	add	r2, r3
 800813c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008144:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8008146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800814a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008154:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800815e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800816c:	4059      	eors	r1, r3
 800816e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008172:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	ea4f 6373 	mov.w	r3, r3, ror #25
 800817c:	404b      	eors	r3, r1
 800817e:	441a      	add	r2, r3
 8008180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008184:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008188:	6899      	ldr	r1, [r3, #8]
 800818a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800818e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008198:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800819c:	685c      	ldr	r4, [r3, #4]
 800819e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4063      	eors	r3, r4
 80081aa:	4003      	ands	r3, r0
 80081ac:	404b      	eors	r3, r1
 80081ae:	441a      	add	r2, r3
 80081b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081b4:	3304      	adds	r3, #4
 80081b6:	4995      	ldr	r1, [pc, #596]	@ (800840c <mbedtls_internal_sha256_process+0x868>)
 80081b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081bc:	441a      	add	r2, r3
 80081be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081c2:	1d19      	adds	r1, r3, #4
 80081c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081d0:	4413      	add	r3, r2
 80081d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80081d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80081e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80081f2:	405a      	eors	r2, r3
 80081f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008202:	405a      	eors	r2, r3
 8008204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008208:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800820c:	6919      	ldr	r1, [r3, #16]
 800820e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008212:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	4019      	ands	r1, r3
 800821a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800821e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008222:	6998      	ldr	r0, [r3, #24]
 8008224:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008228:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800822c:	691c      	ldr	r4, [r3, #16]
 800822e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008232:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	4323      	orrs	r3, r4
 800823a:	4003      	ands	r3, r0
 800823c:	430b      	orrs	r3, r1
 800823e:	4413      	add	r3, r2
 8008240:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008244:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800824c:	69da      	ldr	r2, [r3, #28]
 800824e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008252:	441a      	add	r2, r3
 8008254:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008258:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800825c:	61da      	str	r2, [r3, #28]
 800825e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008262:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008266:	441a      	add	r2, r3
 8008268:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800826c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008270:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8008272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008276:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008280:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800828a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800828e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008298:	4059      	eors	r1, r3
 800829a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800829e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80082a8:	404b      	eors	r3, r1
 80082aa:	441a      	add	r2, r3
 80082ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082b4:	6859      	ldr	r1, [r3, #4]
 80082b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082be:	69d8      	ldr	r0, [r3, #28]
 80082c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4063      	eors	r3, r4
 80082d6:	4003      	ands	r3, r0
 80082d8:	404b      	eors	r3, r1
 80082da:	441a      	add	r2, r3
 80082dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082e0:	3305      	adds	r3, #5
 80082e2:	494a      	ldr	r1, [pc, #296]	@ (800840c <mbedtls_internal_sha256_process+0x868>)
 80082e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80082e8:	441a      	add	r2, r3
 80082ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082ee:	1d59      	adds	r1, r3, #5
 80082f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80082f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082fc:	4413      	add	r3, r2
 80082fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008314:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800831e:	405a      	eors	r2, r3
 8008320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800832e:	405a      	eors	r2, r3
 8008330:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008338:	68d9      	ldr	r1, [r3, #12]
 800833a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800833e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	4019      	ands	r1, r3
 8008346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800834a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800834e:	6958      	ldr	r0, [r3, #20]
 8008350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008358:	68dc      	ldr	r4, [r3, #12]
 800835a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800835e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	4323      	orrs	r3, r4
 8008366:	4003      	ands	r3, r0
 8008368:	430b      	orrs	r3, r1
 800836a:	4413      	add	r3, r2
 800836c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008370:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800837e:	441a      	add	r2, r3
 8008380:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008384:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008388:	619a      	str	r2, [r3, #24]
 800838a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800838e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008392:	441a      	add	r2, r3
 8008394:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008398:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800839c:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800839e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80083b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80083c4:	4059      	eors	r1, r3
 80083c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80083d4:	404b      	eors	r3, r1
 80083d6:	441a      	add	r2, r3
 80083d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083ea:	6998      	ldr	r0, [r3, #24]
 80083ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083f4:	69dc      	ldr	r4, [r3, #28]
 80083f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4063      	eors	r3, r4
 8008402:	4003      	ands	r3, r0
 8008404:	404b      	eors	r3, r1
 8008406:	441a      	add	r2, r3
 8008408:	e002      	b.n	8008410 <mbedtls_internal_sha256_process+0x86c>
 800840a:	bf00      	nop
 800840c:	08013618 	.word	0x08013618
 8008410:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008414:	3306      	adds	r3, #6
 8008416:	4981      	ldr	r1, [pc, #516]	@ (800861c <mbedtls_internal_sha256_process+0xa78>)
 8008418:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800841c:	441a      	add	r2, r3
 800841e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008422:	1d99      	adds	r1, r3, #6
 8008424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008428:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800842c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008430:	4413      	add	r3, r2
 8008432:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008436:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800843a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008448:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008452:	405a      	eors	r2, r3
 8008454:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008458:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008462:	405a      	eors	r2, r3
 8008464:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800846c:	6899      	ldr	r1, [r3, #8]
 800846e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008472:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4019      	ands	r1, r3
 800847a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800847e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008482:	6918      	ldr	r0, [r3, #16]
 8008484:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008488:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800848c:	689c      	ldr	r4, [r3, #8]
 800848e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008492:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	4323      	orrs	r3, r4
 800849a:	4003      	ands	r3, r0
 800849c:	430b      	orrs	r3, r1
 800849e:	4413      	add	r3, r2
 80084a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80084a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80084b2:	441a      	add	r2, r3
 80084b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084bc:	615a      	str	r2, [r3, #20]
 80084be:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80084c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084c6:	441a      	add	r2, r3
 80084c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084d0:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80084d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80084ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80084f8:	4059      	eors	r1, r3
 80084fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008508:	404b      	eors	r3, r1
 800850a:	441a      	add	r2, r3
 800850c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008514:	69d9      	ldr	r1, [r3, #28]
 8008516:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800851a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800851e:	6958      	ldr	r0, [r3, #20]
 8008520:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008524:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008528:	699c      	ldr	r4, [r3, #24]
 800852a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800852e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	4063      	eors	r3, r4
 8008536:	4003      	ands	r3, r0
 8008538:	404b      	eors	r3, r1
 800853a:	441a      	add	r2, r3
 800853c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008540:	3307      	adds	r3, #7
 8008542:	4936      	ldr	r1, [pc, #216]	@ (800861c <mbedtls_internal_sha256_process+0xa78>)
 8008544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008548:	441a      	add	r2, r3
 800854a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800854e:	1dd9      	adds	r1, r3, #7
 8008550:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008554:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800855c:	4413      	add	r3, r2
 800855e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008562:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008566:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008570:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800857e:	405a      	eors	r2, r3
 8008580:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800858e:	405a      	eors	r2, r3
 8008590:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008594:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008598:	6859      	ldr	r1, [r3, #4]
 800859a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800859e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4019      	ands	r1, r3
 80085a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085ae:	68d8      	ldr	r0, [r3, #12]
 80085b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085b8:	685c      	ldr	r4, [r3, #4]
 80085ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	4323      	orrs	r3, r4
 80085c6:	4003      	ands	r3, r0
 80085c8:	430b      	orrs	r3, r1
 80085ca:	4413      	add	r3, r2
 80085cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80085d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085d8:	691a      	ldr	r2, [r3, #16]
 80085da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80085de:	441a      	add	r2, r3
 80085e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085e8:	611a      	str	r2, [r3, #16]
 80085ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80085ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80085f2:	441a      	add	r2, r3
 80085f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085fc:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 80085fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008602:	3308      	adds	r3, #8
 8008604:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008608:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800860c:	2b0f      	cmp	r3, #15
 800860e:	f67f ab41 	bls.w	8007c94 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8008612:	2310      	movs	r3, #16
 8008614:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008618:	f000 bfd5 	b.w	80095c6 <mbedtls_internal_sha256_process+0x1a22>
 800861c:	08013618 	.word	0x08013618
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8008620:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008628:	69da      	ldr	r2, [r3, #28]
 800862a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800862e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008638:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800863c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008646:	4059      	eors	r1, r3
 8008648:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800864c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008656:	404b      	eors	r3, r1
 8008658:	441a      	add	r2, r3
 800865a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800865e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008662:	6999      	ldr	r1, [r3, #24]
 8008664:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800866c:	6918      	ldr	r0, [r3, #16]
 800866e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008672:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008676:	695c      	ldr	r4, [r3, #20]
 8008678:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800867c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	4063      	eors	r3, r4
 8008684:	4003      	ands	r3, r0
 8008686:	404b      	eors	r3, r1
 8008688:	441a      	add	r2, r3
 800868a:	49ec      	ldr	r1, [pc, #944]	@ (8008a3c <mbedtls_internal_sha256_process+0xe98>)
 800868c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008690:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008694:	441a      	add	r2, r3
 8008696:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800869a:	1e99      	subs	r1, r3, #2
 800869c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086a8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80086ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086b0:	1e98      	subs	r0, r3, #2
 80086b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086be:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80086c2:	4059      	eors	r1, r3
 80086c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086c8:	1e98      	subs	r0, r3, #2
 80086ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086d6:	0a9b      	lsrs	r3, r3, #10
 80086d8:	4059      	eors	r1, r3
 80086da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086de:	1fd8      	subs	r0, r3, #7
 80086e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086ec:	4419      	add	r1, r3
 80086ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086f2:	f1a3 000f 	sub.w	r0, r3, #15
 80086f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008702:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008706:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800870a:	f1a3 040f 	sub.w	r4, r3, #15
 800870e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008712:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008716:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800871a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800871e:	4058      	eors	r0, r3
 8008720:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008724:	f1a3 040f 	sub.w	r4, r3, #15
 8008728:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800872c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008730:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008734:	08db      	lsrs	r3, r3, #3
 8008736:	4043      	eors	r3, r0
 8008738:	4419      	add	r1, r3
 800873a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800873e:	f1a3 0010 	sub.w	r0, r3, #16
 8008742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800874a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800874e:	18c8      	adds	r0, r1, r3
 8008750:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008754:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008758:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800875c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8008760:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008764:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008768:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800876c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008770:	4413      	add	r3, r2
 8008772:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008776:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800877a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008788:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008792:	405a      	eors	r2, r3
 8008794:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008798:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80087a2:	405a      	eors	r2, r3
 80087a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4019      	ands	r1, r3
 80087ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087c2:	6898      	ldr	r0, [r3, #8]
 80087c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087cc:	681c      	ldr	r4, [r3, #0]
 80087ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4323      	orrs	r3, r4
 80087da:	4003      	ands	r3, r0
 80087dc:	430b      	orrs	r3, r1
 80087de:	4413      	add	r3, r2
 80087e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80087e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087ec:	68da      	ldr	r2, [r3, #12]
 80087ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80087f2:	441a      	add	r2, r3
 80087f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087fc:	60da      	str	r2, [r3, #12]
 80087fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008802:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008806:	441a      	add	r2, r3
 8008808:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800880c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008810:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8008812:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008816:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800881a:	699a      	ldr	r2, [r3, #24]
 800881c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008820:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800882a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800882e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008838:	4059      	eors	r1, r3
 800883a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800883e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008848:	404b      	eors	r3, r1
 800884a:	441a      	add	r2, r3
 800884c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008850:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008854:	6959      	ldr	r1, [r3, #20]
 8008856:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800885a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800885e:	68d8      	ldr	r0, [r3, #12]
 8008860:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008864:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008868:	691c      	ldr	r4, [r3, #16]
 800886a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800886e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	4063      	eors	r3, r4
 8008876:	4003      	ands	r3, r0
 8008878:	404b      	eors	r3, r1
 800887a:	441a      	add	r2, r3
 800887c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008880:	3301      	adds	r3, #1
 8008882:	496e      	ldr	r1, [pc, #440]	@ (8008a3c <mbedtls_internal_sha256_process+0xe98>)
 8008884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008888:	441a      	add	r2, r3
 800888a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800888e:	1e59      	subs	r1, r3, #1
 8008890:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008894:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008898:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800889c:	ea4f 4173 	mov.w	r1, r3, ror #17
 80088a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088a4:	1e58      	subs	r0, r3, #1
 80088a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088b2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80088b6:	4059      	eors	r1, r3
 80088b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088bc:	1e58      	subs	r0, r3, #1
 80088be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088ca:	0a9b      	lsrs	r3, r3, #10
 80088cc:	4059      	eors	r1, r3
 80088ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088d2:	1f98      	subs	r0, r3, #6
 80088d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088e0:	4419      	add	r1, r3
 80088e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088e6:	f1a3 000e 	sub.w	r0, r3, #14
 80088ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088f6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80088fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088fe:	f1a3 040e 	sub.w	r4, r3, #14
 8008902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008906:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800890a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800890e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008912:	4058      	eors	r0, r3
 8008914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008918:	f1a3 040e 	sub.w	r4, r3, #14
 800891c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008920:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008924:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008928:	08db      	lsrs	r3, r3, #3
 800892a:	4043      	eors	r3, r0
 800892c:	18c8      	adds	r0, r1, r3
 800892e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008932:	f1a3 010f 	sub.w	r1, r3, #15
 8008936:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800893a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800893e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008942:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008946:	3301      	adds	r3, #1
 8008948:	4408      	add	r0, r1
 800894a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800894e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008952:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008956:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800895a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800895e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008962:	4413      	add	r3, r2
 8008964:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008968:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800896c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008976:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800897a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008984:	405a      	eors	r2, r3
 8008986:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800898a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008994:	405a      	eors	r2, r3
 8008996:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800899a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800899e:	69d9      	ldr	r1, [r3, #28]
 80089a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4019      	ands	r1, r3
 80089ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089b4:	6858      	ldr	r0, [r3, #4]
 80089b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089be:	69dc      	ldr	r4, [r3, #28]
 80089c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4323      	orrs	r3, r4
 80089cc:	4003      	ands	r3, r0
 80089ce:	430b      	orrs	r3, r1
 80089d0:	4413      	add	r3, r2
 80089d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80089d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80089e4:	441a      	add	r2, r3
 80089e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80089f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089f8:	441a      	add	r2, r3
 80089fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a02:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8008a04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008a1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008a2a:	4059      	eors	r1, r3
 8008a2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008a3a:	e001      	b.n	8008a40 <mbedtls_internal_sha256_process+0xe9c>
 8008a3c:	08013618 	.word	0x08013618
 8008a40:	404b      	eors	r3, r1
 8008a42:	441a      	add	r2, r3
 8008a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a4c:	6919      	ldr	r1, [r3, #16]
 8008a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a56:	6898      	ldr	r0, [r3, #8]
 8008a58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a60:	68dc      	ldr	r4, [r3, #12]
 8008a62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	4063      	eors	r3, r4
 8008a6e:	4003      	ands	r3, r0
 8008a70:	404b      	eors	r3, r1
 8008a72:	441a      	add	r2, r3
 8008a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a78:	3302      	adds	r3, #2
 8008a7a:	49ec      	ldr	r1, [pc, #944]	@ (8008e2c <mbedtls_internal_sha256_process+0x1288>)
 8008a7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a80:	441a      	add	r2, r3
 8008a82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a8a:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008a8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a92:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008a96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a9e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008aa2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008aa6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008aaa:	4059      	eors	r1, r3
 8008aac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ab0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ab4:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008ab8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008abc:	0a9b      	lsrs	r3, r3, #10
 8008abe:	4059      	eors	r1, r3
 8008ac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ac4:	1f58      	subs	r0, r3, #5
 8008ac6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ace:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ad2:	4419      	add	r1, r3
 8008ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ad8:	f1a3 000d 	sub.w	r0, r3, #13
 8008adc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ae0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ae4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ae8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008aec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008af0:	f1a3 040d 	sub.w	r4, r3, #13
 8008af4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008af8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008afc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b00:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008b04:	4058      	eors	r0, r3
 8008b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b0a:	f1a3 040d 	sub.w	r4, r3, #13
 8008b0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	4043      	eors	r3, r0
 8008b1e:	18c8      	adds	r0, r1, r3
 8008b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b24:	f1a3 010e 	sub.w	r1, r3, #14
 8008b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b30:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b38:	3302      	adds	r3, #2
 8008b3a:	4408      	add	r0, r1
 8008b3c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008b40:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008b44:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008b48:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008b4c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b54:	4413      	add	r3, r2
 8008b56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008b5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008b68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008b76:	405a      	eors	r2, r3
 8008b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008b86:	405a      	eors	r2, r3
 8008b88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b90:	6999      	ldr	r1, [r3, #24]
 8008b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	4019      	ands	r1, r3
 8008b9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ba2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bb0:	699c      	ldr	r4, [r3, #24]
 8008bb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	4323      	orrs	r3, r4
 8008bbe:	4003      	ands	r3, r0
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008bc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008bd6:	441a      	add	r2, r3
 8008bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008be0:	605a      	str	r2, [r3, #4]
 8008be2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008bea:	441a      	add	r2, r3
 8008bec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bf4:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8008bf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008c0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008c1c:	4059      	eors	r1, r3
 8008c1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008c2c:	404b      	eors	r3, r1
 8008c2e:	441a      	add	r2, r3
 8008c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c38:	68d9      	ldr	r1, [r3, #12]
 8008c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c42:	6858      	ldr	r0, [r3, #4]
 8008c44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c4c:	689c      	ldr	r4, [r3, #8]
 8008c4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	4063      	eors	r3, r4
 8008c5a:	4003      	ands	r3, r0
 8008c5c:	404b      	eors	r3, r1
 8008c5e:	441a      	add	r2, r3
 8008c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c64:	3303      	adds	r3, #3
 8008c66:	4971      	ldr	r1, [pc, #452]	@ (8008e2c <mbedtls_internal_sha256_process+0x1288>)
 8008c68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c6c:	441a      	add	r2, r3
 8008c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c72:	1c59      	adds	r1, r3, #1
 8008c74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c80:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008c84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c88:	1c58      	adds	r0, r3, #1
 8008c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008c96:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008c9a:	4059      	eors	r1, r3
 8008c9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ca0:	1c58      	adds	r0, r3, #1
 8008ca2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ca6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008caa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cae:	0a9b      	lsrs	r3, r3, #10
 8008cb0:	4059      	eors	r1, r3
 8008cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cb6:	1f18      	subs	r0, r3, #4
 8008cb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cc4:	4419      	add	r1, r3
 8008cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cca:	f1a3 000c 	sub.w	r0, r3, #12
 8008cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cda:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ce2:	f1a3 040c 	sub.w	r4, r3, #12
 8008ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008cf2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008cf6:	4058      	eors	r0, r3
 8008cf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cfc:	f1a3 040c 	sub.w	r4, r3, #12
 8008d00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d08:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d0c:	08db      	lsrs	r3, r3, #3
 8008d0e:	4043      	eors	r3, r0
 8008d10:	18c8      	adds	r0, r1, r3
 8008d12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d16:	f1a3 010d 	sub.w	r1, r3, #13
 8008d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d22:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d2a:	3303      	adds	r3, #3
 8008d2c:	4408      	add	r0, r1
 8008d2e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008d32:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008d36:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008d3a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008d3e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008d42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d46:	4413      	add	r3, r2
 8008d48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008d4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008d5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008d68:	405a      	eors	r2, r3
 8008d6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008d78:	405a      	eors	r2, r3
 8008d7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d82:	6959      	ldr	r1, [r3, #20]
 8008d84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	4019      	ands	r1, r3
 8008d90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d98:	69d8      	ldr	r0, [r3, #28]
 8008d9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008da2:	695c      	ldr	r4, [r3, #20]
 8008da4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008da8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	4323      	orrs	r3, r4
 8008db0:	4003      	ands	r3, r0
 8008db2:	430b      	orrs	r3, r1
 8008db4:	4413      	add	r3, r2
 8008db6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008dba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008dc8:	441a      	add	r2, r3
 8008dca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ddc:	441a      	add	r2, r3
 8008dde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008de2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008de6:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8008de8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008df6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008e00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008e0e:	4059      	eors	r1, r3
 8008e10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008e1e:	404b      	eors	r3, r1
 8008e20:	441a      	add	r2, r3
 8008e22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e2a:	e001      	b.n	8008e30 <mbedtls_internal_sha256_process+0x128c>
 8008e2c:	08013618 	.word	0x08013618
 8008e30:	6899      	ldr	r1, [r3, #8]
 8008e32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e44:	685c      	ldr	r4, [r3, #4]
 8008e46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	4063      	eors	r3, r4
 8008e52:	4003      	ands	r3, r0
 8008e54:	404b      	eors	r3, r1
 8008e56:	441a      	add	r2, r3
 8008e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	49ec      	ldr	r1, [pc, #944]	@ (8009210 <mbedtls_internal_sha256_process+0x166c>)
 8008e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e64:	441a      	add	r2, r3
 8008e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e6a:	1c99      	adds	r1, r3, #2
 8008e6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e78:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e80:	1c98      	adds	r0, r3, #2
 8008e82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008e8e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008e92:	4059      	eors	r1, r3
 8008e94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e98:	1c98      	adds	r0, r3, #2
 8008e9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ea2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ea6:	0a9b      	lsrs	r3, r3, #10
 8008ea8:	4059      	eors	r1, r3
 8008eaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eae:	1ed8      	subs	r0, r3, #3
 8008eb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008eb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008eb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ebc:	4419      	add	r1, r3
 8008ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ec2:	f1a3 000b 	sub.w	r0, r3, #11
 8008ec6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008eca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ece:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ed2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008ed6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eda:	f1a3 040b 	sub.w	r4, r3, #11
 8008ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ee2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ee6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008eea:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008eee:	4058      	eors	r0, r3
 8008ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ef4:	f1a3 040b 	sub.w	r4, r3, #11
 8008ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008efc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f00:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f04:	08db      	lsrs	r3, r3, #3
 8008f06:	4043      	eors	r3, r0
 8008f08:	18c8      	adds	r0, r1, r3
 8008f0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f0e:	f1a3 010c 	sub.w	r1, r3, #12
 8008f12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f1a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f22:	3304      	adds	r3, #4
 8008f24:	4408      	add	r0, r1
 8008f26:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008f2a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008f2e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008f32:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008f36:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008f3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008f52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008f60:	405a      	eors	r2, r3
 8008f62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008f70:	405a      	eors	r2, r3
 8008f72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f7a:	6919      	ldr	r1, [r3, #16]
 8008f7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	4019      	ands	r1, r3
 8008f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f90:	6998      	ldr	r0, [r3, #24]
 8008f92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f9a:	691c      	ldr	r4, [r3, #16]
 8008f9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fa0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	4323      	orrs	r3, r4
 8008fa8:	4003      	ands	r3, r0
 8008faa:	430b      	orrs	r3, r1
 8008fac:	4413      	add	r3, r2
 8008fae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008fb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008fc0:	441a      	add	r2, r3
 8008fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fca:	61da      	str	r2, [r3, #28]
 8008fcc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008fd4:	441a      	add	r2, r3
 8008fd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fde:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8008fe0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fe4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008ff8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ffc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8009006:	4059      	eors	r1, r3
 8009008:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800900c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	ea4f 6373 	mov.w	r3, r3, ror #25
 8009016:	404b      	eors	r3, r1
 8009018:	441a      	add	r2, r3
 800901a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800901e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009022:	6859      	ldr	r1, [r3, #4]
 8009024:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009028:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800902c:	69d8      	ldr	r0, [r3, #28]
 800902e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009032:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009036:	681c      	ldr	r4, [r3, #0]
 8009038:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800903c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4063      	eors	r3, r4
 8009044:	4003      	ands	r3, r0
 8009046:	404b      	eors	r3, r1
 8009048:	441a      	add	r2, r3
 800904a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800904e:	3305      	adds	r3, #5
 8009050:	496f      	ldr	r1, [pc, #444]	@ (8009210 <mbedtls_internal_sha256_process+0x166c>)
 8009052:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009056:	441a      	add	r2, r3
 8009058:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800905c:	1cd9      	adds	r1, r3, #3
 800905e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009066:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800906a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800906e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009072:	1cd8      	adds	r0, r3, #3
 8009074:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009078:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800907c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009080:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8009084:	4059      	eors	r1, r3
 8009086:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800908a:	1cd8      	adds	r0, r3, #3
 800908c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009094:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009098:	0a9b      	lsrs	r3, r3, #10
 800909a:	4059      	eors	r1, r3
 800909c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090a0:	1e98      	subs	r0, r3, #2
 80090a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090ae:	4419      	add	r1, r3
 80090b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090b4:	f1a3 000a 	sub.w	r0, r3, #10
 80090b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090c4:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80090c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090cc:	f1a3 040a 	sub.w	r4, r3, #10
 80090d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80090dc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80090e0:	4058      	eors	r0, r3
 80090e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090e6:	f1a3 040a 	sub.w	r4, r3, #10
 80090ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80090f6:	08db      	lsrs	r3, r3, #3
 80090f8:	4043      	eors	r3, r0
 80090fa:	18c8      	adds	r0, r1, r3
 80090fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009100:	f1a3 010b 	sub.w	r1, r3, #11
 8009104:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009108:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800910c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009110:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009114:	3305      	adds	r3, #5
 8009116:	4408      	add	r0, r1
 8009118:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800911c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009120:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009124:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009128:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800912c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009130:	4413      	add	r3, r2
 8009132:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009136:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800913a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8009144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009148:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8009152:	405a      	eors	r2, r3
 8009154:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009158:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8009162:	405a      	eors	r2, r3
 8009164:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009168:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800916c:	68d9      	ldr	r1, [r3, #12]
 800916e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009172:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	4019      	ands	r1, r3
 800917a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800917e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009182:	6958      	ldr	r0, [r3, #20]
 8009184:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009188:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800918c:	68dc      	ldr	r4, [r3, #12]
 800918e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009192:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	4323      	orrs	r3, r4
 800919a:	4003      	ands	r3, r0
 800919c:	430b      	orrs	r3, r1
 800919e:	4413      	add	r3, r2
 80091a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80091a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091b2:	441a      	add	r2, r3
 80091b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091bc:	619a      	str	r2, [r3, #24]
 80091be:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80091c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091c6:	441a      	add	r2, r3
 80091c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091d0:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80091d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80091ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80091f8:	4059      	eors	r1, r3
 80091fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	ea4f 6373 	mov.w	r3, r3, ror #25
 8009208:	404b      	eors	r3, r1
 800920a:	441a      	add	r2, r3
 800920c:	e002      	b.n	8009214 <mbedtls_internal_sha256_process+0x1670>
 800920e:	bf00      	nop
 8009210:	08013618 	.word	0x08013618
 8009214:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009218:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800921c:	6819      	ldr	r1, [r3, #0]
 800921e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009222:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009226:	6998      	ldr	r0, [r3, #24]
 8009228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800922c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009230:	69dc      	ldr	r4, [r3, #28]
 8009232:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009236:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4063      	eors	r3, r4
 800923e:	4003      	ands	r3, r0
 8009240:	404b      	eors	r3, r1
 8009242:	441a      	add	r2, r3
 8009244:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009248:	3306      	adds	r3, #6
 800924a:	49e3      	ldr	r1, [pc, #908]	@ (80095d8 <mbedtls_internal_sha256_process+0x1a34>)
 800924c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009250:	441a      	add	r2, r3
 8009252:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009256:	1d19      	adds	r1, r3, #4
 8009258:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800925c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009264:	ea4f 4173 	mov.w	r1, r3, ror #17
 8009268:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800926c:	1d18      	adds	r0, r3, #4
 800926e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009272:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009276:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800927a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800927e:	4059      	eors	r1, r3
 8009280:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009284:	1d18      	adds	r0, r3, #4
 8009286:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800928a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800928e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009292:	0a9b      	lsrs	r3, r3, #10
 8009294:	4059      	eors	r1, r3
 8009296:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800929a:	1e58      	subs	r0, r3, #1
 800929c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80092a8:	4419      	add	r1, r3
 80092aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092ae:	f1a3 0009 	sub.w	r0, r3, #9
 80092b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80092be:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80092c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092c6:	f1a3 0409 	sub.w	r4, r3, #9
 80092ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80092d6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80092da:	4058      	eors	r0, r3
 80092dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092e0:	f1a3 0409 	sub.w	r4, r3, #9
 80092e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80092f0:	08db      	lsrs	r3, r3, #3
 80092f2:	4043      	eors	r3, r0
 80092f4:	18c8      	adds	r0, r1, r3
 80092f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092fa:	f1a3 010a 	sub.w	r1, r3, #10
 80092fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009302:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009306:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800930a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800930e:	3306      	adds	r3, #6
 8009310:	4408      	add	r0, r1
 8009312:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009316:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800931a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800931e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009322:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800932a:	4413      	add	r3, r2
 800932c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009330:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800933e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009342:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	ea4f 3373 	mov.w	r3, r3, ror #13
 800934c:	405a      	eors	r2, r3
 800934e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009352:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800935c:	405a      	eors	r2, r3
 800935e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009362:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009366:	6899      	ldr	r1, [r3, #8]
 8009368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800936c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	4019      	ands	r1, r3
 8009374:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009378:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800937c:	6918      	ldr	r0, [r3, #16]
 800937e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009382:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009386:	689c      	ldr	r4, [r3, #8]
 8009388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800938c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	4323      	orrs	r3, r4
 8009394:	4003      	ands	r3, r0
 8009396:	430b      	orrs	r3, r1
 8009398:	4413      	add	r3, r2
 800939a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800939e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093a6:	695a      	ldr	r2, [r3, #20]
 80093a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093ac:	441a      	add	r2, r3
 80093ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093b6:	615a      	str	r2, [r3, #20]
 80093b8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093c0:	441a      	add	r2, r3
 80093c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093ca:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80093cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80093e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80093f2:	4059      	eors	r1, r3
 80093f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8009402:	404b      	eors	r3, r1
 8009404:	441a      	add	r2, r3
 8009406:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800940a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800940e:	69d9      	ldr	r1, [r3, #28]
 8009410:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009414:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009418:	6958      	ldr	r0, [r3, #20]
 800941a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800941e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009422:	699c      	ldr	r4, [r3, #24]
 8009424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	4063      	eors	r3, r4
 8009430:	4003      	ands	r3, r0
 8009432:	404b      	eors	r3, r1
 8009434:	441a      	add	r2, r3
 8009436:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800943a:	3307      	adds	r3, #7
 800943c:	4966      	ldr	r1, [pc, #408]	@ (80095d8 <mbedtls_internal_sha256_process+0x1a34>)
 800943e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009442:	441a      	add	r2, r3
 8009444:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009448:	1d59      	adds	r1, r3, #5
 800944a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800944e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009456:	ea4f 4173 	mov.w	r1, r3, ror #17
 800945a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800945e:	1d58      	adds	r0, r3, #5
 8009460:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009464:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800946c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8009470:	4059      	eors	r1, r3
 8009472:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009476:	1d58      	adds	r0, r3, #5
 8009478:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800947c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009480:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009484:	0a9b      	lsrs	r3, r3, #10
 8009486:	4059      	eors	r1, r3
 8009488:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800948c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009490:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8009494:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009498:	4419      	add	r1, r3
 800949a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800949e:	f1a3 0008 	sub.w	r0, r3, #8
 80094a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80094ae:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80094b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094b6:	f1a3 0408 	sub.w	r4, r3, #8
 80094ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80094c6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80094ca:	4058      	eors	r0, r3
 80094cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094d0:	f1a3 0408 	sub.w	r4, r3, #8
 80094d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80094e0:	08db      	lsrs	r3, r3, #3
 80094e2:	4043      	eors	r3, r0
 80094e4:	18c8      	adds	r0, r1, r3
 80094e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ea:	f1a3 0109 	sub.w	r1, r3, #9
 80094ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094f6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80094fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094fe:	3307      	adds	r3, #7
 8009500:	4408      	add	r0, r1
 8009502:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009506:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800950a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800950e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009512:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009516:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800951a:	4413      	add	r3, r2
 800951c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009520:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009524:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800952e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	ea4f 3373 	mov.w	r3, r3, ror #13
 800953c:	405a      	eors	r2, r3
 800953e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009542:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800954c:	405a      	eors	r2, r3
 800954e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009552:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009556:	6859      	ldr	r1, [r3, #4]
 8009558:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800955c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	4019      	ands	r1, r3
 8009564:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009568:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800956c:	68d8      	ldr	r0, [r3, #12]
 800956e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009572:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009576:	685c      	ldr	r4, [r3, #4]
 8009578:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800957c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	4323      	orrs	r3, r4
 8009584:	4003      	ands	r3, r0
 8009586:	430b      	orrs	r3, r1
 8009588:	4413      	add	r3, r2
 800958a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800958e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009592:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009596:	691a      	ldr	r2, [r3, #16]
 8009598:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800959c:	441a      	add	r2, r3
 800959e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80095a6:	611a      	str	r2, [r3, #16]
 80095a8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80095ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095b0:	441a      	add	r2, r3
 80095b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80095ba:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 80095bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095c0:	3308      	adds	r3, #8
 80095c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80095c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80095cc:	f67f a828 	bls.w	8008620 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80095d6:	e023      	b.n	8009620 <mbedtls_internal_sha256_process+0x1a7c>
 80095d8:	08013618 	.word	0x08013618
        ctx->state[i] += A[i];
 80095dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80095ea:	3202      	adds	r2, #2
 80095ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80095f8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80095fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009600:	18d1      	adds	r1, r2, r3
 8009602:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009606:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009610:	3202      	adds	r2, #2
 8009612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8009616:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800961a:	3301      	adds	r3, #1
 800961c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8009620:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009624:	2b07      	cmp	r3, #7
 8009626:	d9d9      	bls.n	80095dc <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009630:	46bd      	mov	sp, r7
 8009632:	bc90      	pop	{r4, r7}
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop

08009638 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 800964a:	2300      	movs	r3, #0
 800964c:	e065      	b.n	800971a <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009656:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800965e:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	441a      	add	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	429a      	cmp	r2, r3
 800967c:	d904      	bls.n	8009688 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d034      	beq.n	80096f8 <mbedtls_sha256_update_ret+0xc0>
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	429a      	cmp	r2, r3
 8009694:	d330      	bcc.n	80096f8 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	4413      	add	r3, r2
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f007 fc5c 	bl	8010f62 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3328      	adds	r3, #40	@ 0x28
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7fe fa77 	bl	8007ba4 <mbedtls_internal_sha256_process>
 80096b6:	6178      	str	r0, [r7, #20]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	e02b      	b.n	800971a <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	4413      	add	r3, r2
 80096c8:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	607b      	str	r3, [r7, #4]
        left = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 80096d6:	e00f      	b.n	80096f8 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7fe fa62 	bl	8007ba4 <mbedtls_internal_sha256_process>
 80096e0:	6178      	str	r0, [r7, #20]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	e016      	b.n	800971a <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	3340      	adds	r3, #64	@ 0x40
 80096f0:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3b40      	subs	r3, #64	@ 0x40
 80096f6:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80096fc:	d8ec      	bhi.n	80096d8 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	4618      	mov	r0, r3
 8009714:	f007 fc25 	bl	8010f62 <memcpy>

    return( 0 );
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009734:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	617a      	str	r2, [r7, #20]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4413      	add	r3, r2
 8009740:	2280      	movs	r2, #128	@ 0x80
 8009742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b38      	cmp	r3, #56	@ 0x38
 800974a:	d80c      	bhi.n	8009766 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	18d0      	adds	r0, r2, r3
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800975c:	461a      	mov	r2, r3
 800975e:	2100      	movs	r1, #0
 8009760:	f007 fbb9 	bl	8010ed6 <memset>
 8009764:	e01e      	b.n	80097a4 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	18d0      	adds	r0, r2, r3
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8009776:	461a      	mov	r2, r3
 8009778:	2100      	movs	r1, #0
 800977a:	f007 fbac 	bl	8010ed6 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3328      	adds	r3, #40	@ 0x28
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fe fa0d 	bl	8007ba4 <mbedtls_internal_sha256_process>
 800978a:	6138      	str	r0, [r7, #16]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	e128      	b.n	80099e8 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3328      	adds	r3, #40	@ 0x28
 800979a:	2238      	movs	r2, #56	@ 0x38
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f007 fb99 	bl	8010ed6 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	0e1b      	lsrs	r3, r3, #24
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	0e1b      	lsrs	r3, r3, #24
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	0c1b      	lsrs	r3, r3, #16
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	0a1b      	lsrs	r3, r3, #8
 8009806:	b2da      	uxtb	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3328      	adds	r3, #40	@ 0x28
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fe f9c0 	bl	8007ba4 <mbedtls_internal_sha256_process>
 8009824:	6138      	str	r0, [r7, #16]
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	e0db      	b.n	80099e8 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	0e1b      	lsrs	r3, r3, #24
 8009836:	b2da      	uxtb	r2, r3
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	701a      	strb	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	0c1a      	lsrs	r2, r3, #16
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	0a1a      	lsrs	r2, r3, #8
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	3302      	adds	r3, #2
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	3303      	adds	r3, #3
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	0e1a      	lsrs	r2, r3, #24
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	3304      	adds	r3, #4
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	0c1a      	lsrs	r2, r3, #16
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	3305      	adds	r3, #5
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	701a      	strb	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	0a1a      	lsrs	r2, r3, #8
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	3306      	adds	r3, #6
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	3307      	adds	r3, #7
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	0e1a      	lsrs	r2, r3, #24
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	0c1a      	lsrs	r2, r3, #16
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	3309      	adds	r3, #9
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	0a1a      	lsrs	r2, r3, #8
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	330a      	adds	r3, #10
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691a      	ldr	r2, [r3, #16]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	330b      	adds	r3, #11
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	0e1a      	lsrs	r2, r3, #24
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	330c      	adds	r3, #12
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	0c1a      	lsrs	r2, r3, #16
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	330d      	adds	r3, #13
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	0a1a      	lsrs	r2, r3, #8
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	330e      	adds	r3, #14
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695a      	ldr	r2, [r3, #20]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	330f      	adds	r3, #15
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	0e1a      	lsrs	r2, r3, #24
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	3310      	adds	r3, #16
 8009910:	b2d2      	uxtb	r2, r2
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	0c1a      	lsrs	r2, r3, #16
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	3311      	adds	r3, #17
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	0a1a      	lsrs	r2, r3, #8
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	3312      	adds	r3, #18
 800992c:	b2d2      	uxtb	r2, r2
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699a      	ldr	r2, [r3, #24]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	3313      	adds	r3, #19
 8009938:	b2d2      	uxtb	r2, r2
 800993a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	0e1a      	lsrs	r2, r3, #24
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	3314      	adds	r3, #20
 8009946:	b2d2      	uxtb	r2, r2
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	0c1a      	lsrs	r2, r3, #16
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	3315      	adds	r3, #21
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	0a1a      	lsrs	r2, r3, #8
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	3316      	adds	r3, #22
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	69da      	ldr	r2, [r3, #28]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	3317      	adds	r3, #23
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	0e1a      	lsrs	r2, r3, #24
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	3318      	adds	r3, #24
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	0c1a      	lsrs	r2, r3, #16
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3319      	adds	r3, #25
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	0a1a      	lsrs	r2, r3, #8
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	331a      	adds	r3, #26
 8009998:	b2d2      	uxtb	r2, r2
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a1a      	ldr	r2, [r3, #32]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	331b      	adds	r3, #27
 80099a4:	b2d2      	uxtb	r2, r2
 80099a6:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11a      	bne.n	80099e6 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b4:	0e1a      	lsrs	r2, r3, #24
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	331c      	adds	r3, #28
 80099ba:	b2d2      	uxtb	r2, r2
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c2:	0c1a      	lsrs	r2, r3, #16
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	331d      	adds	r3, #29
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d0:	0a1a      	lsrs	r2, r3, #8
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	331e      	adds	r3, #30
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	331f      	adds	r3, #31
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	701a      	strb	r2, [r3, #0]

    return( 0 );
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099f6:	2300      	movs	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	4b10      	ldr	r3, [pc, #64]	@ (8009a3c <HAL_MspInit+0x4c>)
 80099fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fe:	4a0f      	ldr	r2, [pc, #60]	@ (8009a3c <HAL_MspInit+0x4c>)
 8009a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <HAL_MspInit+0x4c>)
 8009a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a0e:	607b      	str	r3, [r7, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a12:	2300      	movs	r3, #0
 8009a14:	603b      	str	r3, [r7, #0]
 8009a16:	4b09      	ldr	r3, [pc, #36]	@ (8009a3c <HAL_MspInit+0x4c>)
 8009a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1a:	4a08      	ldr	r2, [pc, #32]	@ (8009a3c <HAL_MspInit+0x4c>)
 8009a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a22:	4b06      	ldr	r3, [pc, #24]	@ (8009a3c <HAL_MspInit+0x4c>)
 8009a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40023800 	.word	0x40023800

08009a40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8009a7c <HAL_CRC_MspInit+0x3c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d10d      	bne.n	8009a6e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	4b0a      	ldr	r3, [pc, #40]	@ (8009a80 <HAL_CRC_MspInit+0x40>)
 8009a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5a:	4a09      	ldr	r2, [pc, #36]	@ (8009a80 <HAL_CRC_MspInit+0x40>)
 8009a5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a62:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <HAL_CRC_MspInit+0x40>)
 8009a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8009a6e:	bf00      	nop
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40023000 	.word	0x40023000
 8009a80:	40023800 	.word	0x40023800

08009a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08a      	sub	sp, #40	@ 0x28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a8c:	f107 0314 	add.w	r3, r7, #20
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b18 <HAL_I2C_MspInit+0x94>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d134      	bne.n	8009b10 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	613b      	str	r3, [r7, #16]
 8009aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8009b1c <HAL_I2C_MspInit+0x98>)
 8009aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aae:	4a1b      	ldr	r2, [pc, #108]	@ (8009b1c <HAL_I2C_MspInit+0x98>)
 8009ab0:	f043 0302 	orr.w	r3, r3, #2
 8009ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ab6:	4b19      	ldr	r3, [pc, #100]	@ (8009b1c <HAL_I2C_MspInit+0x98>)
 8009ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	613b      	str	r3, [r7, #16]
 8009ac0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009ac2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ac8:	2312      	movs	r3, #18
 8009aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009ad4:	2304      	movs	r3, #4
 8009ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	4619      	mov	r1, r3
 8009ade:	4810      	ldr	r0, [pc, #64]	@ (8009b20 <HAL_I2C_MspInit+0x9c>)
 8009ae0:	f001 fe54 	bl	800b78c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8009b1c <HAL_I2C_MspInit+0x98>)
 8009aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aec:	4a0b      	ldr	r2, [pc, #44]	@ (8009b1c <HAL_I2C_MspInit+0x98>)
 8009aee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8009af4:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <HAL_I2C_MspInit+0x98>)
 8009af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8009b00:	2200      	movs	r2, #0
 8009b02:	2100      	movs	r1, #0
 8009b04:	2020      	movs	r0, #32
 8009b06:	f001 f872 	bl	800abee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009b0a:	2020      	movs	r0, #32
 8009b0c:	f001 f88b 	bl	800ac26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009b10:	bf00      	nop
 8009b12:	3728      	adds	r7, #40	@ 0x28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40005400 	.word	0x40005400
 8009b1c:	40023800 	.word	0x40023800
 8009b20:	40020400 	.word	0x40020400

08009b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b34:	d115      	bne.n	8009b62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b6c <HAL_TIM_Base_MspInit+0x48>)
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8009b6c <HAL_TIM_Base_MspInit+0x48>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b46:	4b09      	ldr	r3, [pc, #36]	@ (8009b6c <HAL_TIM_Base_MspInit+0x48>)
 8009b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	201c      	movs	r0, #28
 8009b58:	f001 f849 	bl	800abee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009b5c:	201c      	movs	r0, #28
 8009b5e:	f001 f862 	bl	800ac26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	40023800 	.word	0x40023800

08009b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08a      	sub	sp, #40	@ 0x28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b78:	f107 0314 	add.w	r3, r7, #20
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	605a      	str	r2, [r3, #4]
 8009b82:	609a      	str	r2, [r3, #8]
 8009b84:	60da      	str	r2, [r3, #12]
 8009b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c04 <HAL_UART_MspInit+0x94>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d133      	bne.n	8009bfa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009b92:	2300      	movs	r3, #0
 8009b94:	613b      	str	r3, [r7, #16]
 8009b96:	4b1c      	ldr	r3, [pc, #112]	@ (8009c08 <HAL_UART_MspInit+0x98>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c08 <HAL_UART_MspInit+0x98>)
 8009b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8009ba2:	4b19      	ldr	r3, [pc, #100]	@ (8009c08 <HAL_UART_MspInit+0x98>)
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009baa:	613b      	str	r3, [r7, #16]
 8009bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	4b15      	ldr	r3, [pc, #84]	@ (8009c08 <HAL_UART_MspInit+0x98>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb6:	4a14      	ldr	r2, [pc, #80]	@ (8009c08 <HAL_UART_MspInit+0x98>)
 8009bb8:	f043 0301 	orr.w	r3, r3, #1
 8009bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bbe:	4b12      	ldr	r3, [pc, #72]	@ (8009c08 <HAL_UART_MspInit+0x98>)
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009bca:	230c      	movs	r3, #12
 8009bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009bda:	2307      	movs	r3, #7
 8009bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bde:	f107 0314 	add.w	r3, r7, #20
 8009be2:	4619      	mov	r1, r3
 8009be4:	4809      	ldr	r0, [pc, #36]	@ (8009c0c <HAL_UART_MspInit+0x9c>)
 8009be6:	f001 fdd1 	bl	800b78c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009bea:	2200      	movs	r2, #0
 8009bec:	2100      	movs	r1, #0
 8009bee:	2026      	movs	r0, #38	@ 0x26
 8009bf0:	f000 fffd 	bl	800abee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009bf4:	2026      	movs	r0, #38	@ 0x26
 8009bf6:	f001 f816 	bl	800ac26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8009bfa:	bf00      	nop
 8009bfc:	3728      	adds	r7, #40	@ 0x28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	40004400 	.word	0x40004400
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	40020000 	.word	0x40020000

08009c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <NMI_Handler+0x4>

08009c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c1c:	bf00      	nop
 8009c1e:	e7fd      	b.n	8009c1c <HardFault_Handler+0x4>

08009c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <MemManage_Handler+0x4>

08009c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c2c:	bf00      	nop
 8009c2e:	e7fd      	b.n	8009c2c <BusFault_Handler+0x4>

08009c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <UsageFault_Handler+0x4>

08009c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c3c:	bf00      	nop
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c46:	b480      	push	{r7}
 8009c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c4a:	bf00      	nop
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c66:	f000 fea3 	bl	800a9b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c6a:	bf00      	nop
 8009c6c:	bd80      	pop	{r7, pc}
	...

08009c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009c74:	4802      	ldr	r0, [pc, #8]	@ (8009c80 <TIM2_IRQHandler+0x10>)
 8009c76:	f005 fabb 	bl	800f1f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009c7a:	bf00      	nop
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000638 	.word	0x20000638

08009c84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009c88:	4802      	ldr	r0, [pc, #8]	@ (8009c94 <I2C1_EV_IRQHandler+0x10>)
 8009c8a:	f002 fd11 	bl	800c6b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009c8e:	bf00      	nop
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200005e4 	.word	0x200005e4

08009c98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009c9c:	4802      	ldr	r0, [pc, #8]	@ (8009ca8 <I2C1_ER_IRQHandler+0x10>)
 8009c9e:	f002 fe5a 	bl	800c956 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009ca2:	bf00      	nop
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	200005e4 	.word	0x200005e4

08009cac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009cb0:	4802      	ldr	r0, [pc, #8]	@ (8009cbc <USART2_IRQHandler+0x10>)
 8009cb2:	f005 ff91 	bl	800fbd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009cb6:	bf00      	nop
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	20000680 	.word	0x20000680

08009cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009cc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009cc8:	f001 ff16 	bl	800baf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009ccc:	bf00      	nop
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	e00a      	b.n	8009cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009ce2:	f3af 8000 	nop.w
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	60ba      	str	r2, [r7, #8]
 8009cee:	b2ca      	uxtb	r2, r1
 8009cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	dbf0      	blt.n	8009ce2 <_read+0x12>
  }

  return len;
 8009d00:	687b      	ldr	r3, [r7, #4]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b086      	sub	sp, #24
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e009      	b.n	8009d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	60ba      	str	r2, [r7, #8]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fa f8eb 	bl	8003f00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	dbf1      	blt.n	8009d1c <_write+0x12>
  }
  return len;
 8009d38:	687b      	ldr	r3, [r7, #4]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <_close>:

int _close(int file)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <_isatty>:

int _isatty(int file)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009d82:	2301      	movs	r3, #1
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
	...

08009dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009db4:	4a14      	ldr	r2, [pc, #80]	@ (8009e08 <_sbrk+0x5c>)
 8009db6:	4b15      	ldr	r3, [pc, #84]	@ (8009e0c <_sbrk+0x60>)
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009dc0:	4b13      	ldr	r3, [pc, #76]	@ (8009e10 <_sbrk+0x64>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d102      	bne.n	8009dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009dc8:	4b11      	ldr	r3, [pc, #68]	@ (8009e10 <_sbrk+0x64>)
 8009dca:	4a12      	ldr	r2, [pc, #72]	@ (8009e14 <_sbrk+0x68>)
 8009dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009dce:	4b10      	ldr	r3, [pc, #64]	@ (8009e10 <_sbrk+0x64>)
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d207      	bcs.n	8009dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009ddc:	f007 f894 	bl	8010f08 <__errno>
 8009de0:	4603      	mov	r3, r0
 8009de2:	220c      	movs	r2, #12
 8009de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dea:	e009      	b.n	8009e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009dec:	4b08      	ldr	r3, [pc, #32]	@ (8009e10 <_sbrk+0x64>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009df2:	4b07      	ldr	r3, [pc, #28]	@ (8009e10 <_sbrk+0x64>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	4a05      	ldr	r2, [pc, #20]	@ (8009e10 <_sbrk+0x64>)
 8009dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20018000 	.word	0x20018000
 8009e0c:	00000400 	.word	0x00000400
 8009e10:	20000e28 	.word	0x20000e28
 8009e14:	200013a8 	.word	0x200013a8

08009e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e1c:	4b06      	ldr	r3, [pc, #24]	@ (8009e38 <SystemInit+0x20>)
 8009e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e22:	4a05      	ldr	r2, [pc, #20]	@ (8009e38 <SystemInit+0x20>)
 8009e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e2c:	bf00      	nop
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	e000ed00 	.word	0xe000ed00

08009e3c <receive_packet>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */

static HAL_StatusTypeDef receive_packet(uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
    uint16_t crc;
    uint32_t packetSize = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef status;
    uint8_t char1;

    *p_length = 0;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
    status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8009e52:	f107 0117 	add.w	r1, r7, #23
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	485e      	ldr	r0, [pc, #376]	@ (8009fd4 <receive_packet+0x198>)
 8009e5c:	f005 fe25 	bl	800faaa <HAL_UART_Receive>
 8009e60:	4603      	mov	r3, r0
 8009e62:	76fb      	strb	r3, [r7, #27]

    if (status != HAL_OK) {
 8009e64:	7efb      	ldrb	r3, [r7, #27]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <receive_packet+0x32>
        return status;
 8009e6a:	7efb      	ldrb	r3, [r7, #27]
 8009e6c:	e0ae      	b.n	8009fcc <receive_packet+0x190>
    }

    switch(char1) {
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	2b61      	cmp	r3, #97	@ 0x61
 8009e72:	d057      	beq.n	8009f24 <receive_packet+0xe8>
 8009e74:	2b61      	cmp	r3, #97	@ 0x61
 8009e76:	dc57      	bgt.n	8009f28 <receive_packet+0xec>
 8009e78:	2b18      	cmp	r3, #24
 8009e7a:	dc37      	bgt.n	8009eec <receive_packet+0xb0>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dd53      	ble.n	8009f28 <receive_packet+0xec>
 8009e80:	3b01      	subs	r3, #1
 8009e82:	2b17      	cmp	r3, #23
 8009e84:	d850      	bhi.n	8009f28 <receive_packet+0xec>
 8009e86:	a201      	add	r2, pc, #4	@ (adr r2, 8009e8c <receive_packet+0x50>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	08009ef3 	.word	0x08009ef3
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009f29 	.word	0x08009f29
 8009e98:	08009f2d 	.word	0x08009f2d
 8009e9c:	08009f29 	.word	0x08009f29
 8009ea0:	08009f29 	.word	0x08009f29
 8009ea4:	08009f29 	.word	0x08009f29
 8009ea8:	08009f29 	.word	0x08009f29
 8009eac:	08009f29 	.word	0x08009f29
 8009eb0:	08009f29 	.word	0x08009f29
 8009eb4:	08009f29 	.word	0x08009f29
 8009eb8:	08009f29 	.word	0x08009f29
 8009ebc:	08009f29 	.word	0x08009f29
 8009ec0:	08009f29 	.word	0x08009f29
 8009ec4:	08009f29 	.word	0x08009f29
 8009ec8:	08009f29 	.word	0x08009f29
 8009ecc:	08009f29 	.word	0x08009f29
 8009ed0:	08009f29 	.word	0x08009f29
 8009ed4:	08009f29 	.word	0x08009f29
 8009ed8:	08009f29 	.word	0x08009f29
 8009edc:	08009f29 	.word	0x08009f29
 8009ee0:	08009f29 	.word	0x08009f29
 8009ee4:	08009f29 	.word	0x08009f29
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	2b41      	cmp	r3, #65	@ 0x41
 8009eee:	d019      	beq.n	8009f24 <receive_packet+0xe8>
 8009ef0:	e01a      	b.n	8009f28 <receive_packet+0xec>
        case SOH:
            packetSize = PACKET_SIZE;
 8009ef2:	2380      	movs	r3, #128	@ 0x80
 8009ef4:	61fb      	str	r3, [r7, #28]
            break;
 8009ef6:	e01a      	b.n	8009f2e <receive_packet+0xf2>
        case STX:
            packetSize = PACKET_1K_SIZE;
 8009ef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009efc:	61fb      	str	r3, [r7, #28]
            break;
 8009efe:	e016      	b.n	8009f2e <receive_packet+0xf2>
        case EOT:
        	break;

        case CA:
            if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) != HAL_OK) || (char1 != CA)) {
 8009f00:	f107 0117 	add.w	r1, r7, #23
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	4832      	ldr	r0, [pc, #200]	@ (8009fd4 <receive_packet+0x198>)
 8009f0a:	f005 fdce 	bl	800faaa <HAL_UART_Receive>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <receive_packet+0xde>
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	2b18      	cmp	r3, #24
 8009f18:	d001      	beq.n	8009f1e <receive_packet+0xe2>
                return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e056      	b.n	8009fcc <receive_packet+0x190>
            }
            packetSize = 2;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	61fb      	str	r3, [r7, #28]
            break;
 8009f22:	e004      	b.n	8009f2e <receive_packet+0xf2>
        case ABORT1:
        case ABORT2:
            return HAL_BUSY;
 8009f24:	2302      	movs	r3, #2
 8009f26:	e051      	b.n	8009fcc <receive_packet+0x190>
        default:
            return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e04f      	b.n	8009fcc <receive_packet+0x190>
        	break;
 8009f2c:	bf00      	nop
    }

    *p_data = char1;
 8009f2e:	7dfa      	ldrb	r2, [r7, #23]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	701a      	strb	r2, [r3, #0]

    if (packetSize >= PACKET_SIZE) {
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f38:	d942      	bls.n	8009fc0 <receive_packet+0x184>
        status = HAL_UART_Receive(&UartHandle,
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	1c99      	adds	r1, r3, #2
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	3304      	adds	r3, #4
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4822      	ldr	r0, [pc, #136]	@ (8009fd4 <receive_packet+0x198>)
 8009f4a:	f005 fdae 	bl	800faaa <HAL_UART_Receive>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	76fb      	strb	r3, [r7, #27]
                                &p_data[PACKET_NUMBER_INDEX],
                                (packetSize + PACKET_OVERHEAD_SIZE),
                                timeout);

        if (status != HAL_OK) {
 8009f52:	7efb      	ldrb	r3, [r7, #27]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <receive_packet+0x126>
            *p_length = 0;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
            return status;
 8009f5e:	7efb      	ldrb	r3, [r7, #27]
 8009f60:	e034      	b.n	8009fcc <receive_packet+0x190>
        }

        /* Validate packet sequence numbers */
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3302      	adds	r3, #2
 8009f66:	781a      	ldrb	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3303      	adds	r3, #3
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	43db      	mvns	r3, r3
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d004      	beq.n	8009f80 <receive_packet+0x144>
            *p_length = 0;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]
            return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e025      	b.n	8009fcc <receive_packet+0x190>
        }

        /* Check CRC */
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	3304      	adds	r3, #4
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	021b      	lsls	r3, r3, #8
 8009f8c:	b21a      	sxth	r2, r3
               p_data[packetSize + PACKET_DATA_INDEX + 1];
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	3305      	adds	r3, #5
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	440b      	add	r3, r1
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	b21b      	sxth	r3, r3
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	b21b      	sxth	r3, r3
 8009f9e:	833b      	strh	r3, [r7, #24]

        if (calc_crc16(&p_data[PACKET_DATA_INDEX], packetSize) != crc )
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	69f9      	ldr	r1, [r7, #28]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f90a 	bl	800a1c0 <calc_crc16>
 8009fac:	4603      	mov	r3, r0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	8b3b      	ldrh	r3, [r7, #24]
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d006      	beq.n	8009fc4 <receive_packet+0x188>
                  {
                    packetSize = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
                    status = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	76fb      	strb	r3, [r7, #27]
 8009fbe:	e001      	b.n	8009fc4 <receive_packet+0x188>
                  }
    }
    else packetSize = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]

    *p_length = packetSize;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	69fa      	ldr	r2, [r7, #28]
 8009fc8:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000680 	.word	0x20000680

08009fd8 <prepare_initial_packet>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */

static void prepare_initial_packet(uint8_t* p_data, const uint8_t* p_file_name, uint32_t length) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08a      	sub	sp, #40	@ 0x28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
    uint32_t i = 0, j = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe8:	2300      	movs	r3, #0
 8009fea:	623b      	str	r3, [r7, #32]
    uint8_t aString[10];  // camelCase for non-pointers

    /* First three bytes are constant */
    p_data[PACKET_START_INDEX] = SOH;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_NUMBER_INDEX] = 0x00;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3302      	adds	r3, #2
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3303      	adds	r3, #3
 800a000:	22ff      	movs	r2, #255	@ 0xff
 800a002:	701a      	strb	r2, [r3, #0]

    /* Filename written */
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 800a004:	2300      	movs	r3, #0
 800a006:	627b      	str	r3, [r7, #36]	@ 0x24
 800a008:	e00b      	b.n	800a022 <prepare_initial_packet+0x4a>
        p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00e:	441a      	add	r2, r3
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	3304      	adds	r3, #4
 800a014:	68f9      	ldr	r1, [r7, #12]
 800a016:	440b      	add	r3, r1
 800a018:	7812      	ldrb	r2, [r2, #0]
 800a01a:	701a      	strb	r2, [r3, #0]
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01e:	3301      	adds	r3, #1
 800a020:	627b      	str	r3, [r7, #36]	@ 0x24
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	4413      	add	r3, r2
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <prepare_initial_packet+0x5c>
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	2b3f      	cmp	r3, #63	@ 0x3f
 800a032:	d9ea      	bls.n	800a00a <prepare_initial_packet+0x32>
    }
    p_data[i + PACKET_DATA_INDEX] = 0x00;
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	3304      	adds	r3, #4
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4413      	add	r3, r2
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]

    /* File size written */
    int_to_str(aString, length);  // Assuming `int_to_str` is your function
 800a040:	f107 0314 	add.w	r3, r7, #20
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4618      	mov	r0, r3
 800a048:	f7f6 fa9a 	bl	8000580 <int_to_str>
    i += 1 + PACKET_DATA_INDEX;
 800a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04e:	3305      	adds	r3, #5
 800a050:	627b      	str	r3, [r7, #36]	@ 0x24
    while (aString[j] != '\0') {
 800a052:	e00c      	b.n	800a06e <prepare_initial_packet+0x96>
        p_data[i++] = aString[j++];
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	623a      	str	r2, [r7, #32]
 800a05a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a05c:	1c51      	adds	r1, r2, #1
 800a05e:	6279      	str	r1, [r7, #36]	@ 0x24
 800a060:	68f9      	ldr	r1, [r7, #12]
 800a062:	440a      	add	r2, r1
 800a064:	3328      	adds	r3, #40	@ 0x28
 800a066:	443b      	add	r3, r7
 800a068:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800a06c:	7013      	strb	r3, [r2, #0]
    while (aString[j] != '\0') {
 800a06e:	f107 0214 	add.w	r2, r7, #20
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	4413      	add	r3, r2
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1eb      	bne.n	800a054 <prepare_initial_packet+0x7c>
    }

    /* Padding with zeros */
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	623b      	str	r3, [r7, #32]
 800a080:	e007      	b.n	800a092 <prepare_initial_packet+0xba>
        p_data[j] = 0;
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	4413      	add	r3, r2
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	3301      	adds	r3, #1
 800a090:	623b      	str	r3, [r7, #32]
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	2b83      	cmp	r3, #131	@ 0x83
 800a096:	d9f4      	bls.n	800a082 <prepare_initial_packet+0xaa>
    }
}
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
 800a09c:	3728      	adds	r7, #40	@ 0x28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <prepare_packet>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */

void prepare_packet(uint8_t* p_source, uint8_t* p_packet, uint8_t pktNr, uint32_t sizeBlk) {
 800a0a2:	b480      	push	{r7}
 800a0a4:	b089      	sub	sp, #36	@ 0x24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
    uint8_t* p_record;  // Pointer: p_ prefix + snake_case
    uint32_t i, size, packetSize;  // camelCase for non-pointers

    /* Determine packet size (1K or normal) */
    packetSize = (sizeBlk >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0b8:	d302      	bcc.n	800a0c0 <prepare_packet+0x1e>
 800a0ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0be:	e000      	b.n	800a0c2 <prepare_packet+0x20>
 800a0c0:	2380      	movs	r3, #128	@ 0x80
 800a0c2:	617b      	str	r3, [r7, #20]
    size = (sizeBlk < packetSize) ? sizeBlk : packetSize;
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bf28      	it	cs
 800a0cc:	4613      	movcs	r3, r2
 800a0ce:	613b      	str	r3, [r7, #16]

    /* Set packet header */
    p_packet[PACKET_START_INDEX] = (packetSize == PACKET_1K_SIZE) ? STX : SOH;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d6:	d101      	bne.n	800a0dc <prepare_packet+0x3a>
 800a0d8:	2202      	movs	r2, #2
 800a0da:	e000      	b.n	800a0de <prepare_packet+0x3c>
 800a0dc:	2201      	movs	r2, #1
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_NUMBER_INDEX] = pktNr;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	79fa      	ldrb	r2, [r7, #7]
 800a0ea:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_CNUMBER_INDEX] = ~pktNr;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	3303      	adds	r3, #3
 800a0f0:	79fa      	ldrb	r2, [r7, #7]
 800a0f2:	43d2      	mvns	r2, r2
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	701a      	strb	r2, [r3, #0]

    /* Copy data into packet */
    p_record = p_source;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	61fb      	str	r3, [r7, #28]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	61bb      	str	r3, [r7, #24]
 800a100:	e00a      	b.n	800a118 <prepare_packet+0x76>
        p_packet[i] = *p_record++;
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	61fa      	str	r2, [r7, #28]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	440a      	add	r2, r1
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	7013      	strb	r3, [r2, #0]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	3301      	adds	r3, #1
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3304      	adds	r3, #4
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d3ef      	bcc.n	800a102 <prepare_packet+0x60>
    }

    /* Pad remaining space with EOF (0x1A) */
    if (size <= packetSize) {
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	429a      	cmp	r2, r3
 800a128:	d810      	bhi.n	800a14c <prepare_packet+0xaa>
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	3304      	adds	r3, #4
 800a12e:	61bb      	str	r3, [r7, #24]
 800a130:	e007      	b.n	800a142 <prepare_packet+0xa0>
            p_packet[i] = 0x1A;  // EOF marker
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	4413      	add	r3, r2
 800a138:	221a      	movs	r2, #26
 800a13a:	701a      	strb	r2, [r3, #0]
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	3301      	adds	r3, #1
 800a140:	61bb      	str	r3, [r7, #24]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	3304      	adds	r3, #4
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d3f2      	bcc.n	800a132 <prepare_packet+0x90>
        }
    }
}
 800a14c:	bf00      	nop
 800a14e:	3724      	adds	r7, #36	@ 0x24
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <update_crc16>:
  * @brief  Update CRC16 for input byte
  * @param  crc_in input value
  * @param  input byte
  * @retval None
  */
uint16_t update_crc16(uint16_t crcIn, uint8_t byte) {
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	460a      	mov	r2, r1
 800a162:	80fb      	strh	r3, [r7, #6]
 800a164:	4613      	mov	r3, r2
 800a166:	717b      	strb	r3, [r7, #5]
    uint32_t crc = crcIn;
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	60fb      	str	r3, [r7, #12]
    uint32_t in = byte | 0x100;
 800a16c:	797b      	ldrb	r3, [r7, #5]
 800a16e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a172:	60bb      	str	r3, [r7, #8]

    do {
        crc <<= 1;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	60fb      	str	r3, [r7, #12]
        in <<= 1;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	60bb      	str	r3, [r7, #8]
        if (in & 0x100)
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <update_crc16+0x38>
            ++crc;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3301      	adds	r3, #1
 800a18e:	60fb      	str	r3, [r7, #12]
        if (crc & 0x10000)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <update_crc16+0x4e>
            crc ^= 0x1021;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800a1a0:	f083 0301 	eor.w	r3, r3, #1
 800a1a4:	60fb      	str	r3, [r7, #12]
    } while (!(in & 0x10000));
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d0e1      	beq.n	800a174 <update_crc16+0x1c>

    return crc & 0xFFFFu;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	b29b      	uxth	r3, r3
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <calc_crc16>:
  * @brief  Cal CRC16 for YModem Packet
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t calc_crc16(const uint8_t* p_data, uint32_t size) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
	uint32_t crc = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60fb      	str	r3, [r7, #12]
	const uint8_t* p_data_end = p_data + size;
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	60bb      	str	r3, [r7, #8]

	while (p_data < p_data_end)
 800a1d6:	e00a      	b.n	800a1ee <calc_crc16+0x2e>
		crc = update_crc16(crc, *p_data++);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	b298      	uxth	r0, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	607a      	str	r2, [r7, #4]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7ff ffb7 	bl	800a158 <update_crc16>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	60fb      	str	r3, [r7, #12]
	while (p_data < p_data_end)
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d3f0      	bcc.n	800a1d8 <calc_crc16+0x18>

	crc = update_crc16(crc, 0);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ffab 	bl	800a158 <update_crc16>
 800a202:	4603      	mov	r3, r0
 800a204:	60fb      	str	r3, [r7, #12]
	crc = update_crc16(crc, 0);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2100      	movs	r1, #0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff ffa3 	bl	800a158 <update_crc16>
 800a212:	4603      	mov	r3, r0
 800a214:	60fb      	str	r3, [r7, #12]

	return crc & 0xFFFFu;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	b29b      	uxth	r3, r3
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <ymodem_receive>:
/**
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef ymodem_receive(uint32_t* p_size) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b09a      	sub	sp, #104	@ 0x68
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	 	 	 HAL_FLASH_Unlock();
 800a22c:	f000 fe56 	bl	800aedc <HAL_FLASH_Unlock>
			 HAL_FLASH_OB_Unlock();
 800a230:	f000 fe86 	bl	800af40 <HAL_FLASH_OB_Unlock>
			  FLASH_OBProgramInitTypeDef config;
			  HAL_FLASHEx_OBGetConfig(&config);
 800a234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 f8dd 	bl	800b3f8 <HAL_FLASHEx_OBGetConfig>
			 config.OptionType = OPTIONBYTE_WRP;
 800a23e:	2301      	movs	r3, #1
 800a240:	627b      	str	r3, [r7, #36]	@ 0x24
			 config.WRPState= OB_WRPSTATE_DISABLE;
 800a242:	2300      	movs	r3, #0
 800a244:	62bb      	str	r3, [r7, #40]	@ 0x28
			 config.RDPLevel = OB_RDP_LEVEL0;
 800a246:	23aa      	movs	r3, #170	@ 0xaa
 800a248:	637b      	str	r3, [r7, #52]	@ 0x34
			  config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);
 800a24a:	23e0      	movs	r3, #224	@ 0xe0
 800a24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  if (HAL_FLASHEx_OBProgram(&config) == HAL_OK)
 800a24e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a252:	4618      	mov	r0, r3
 800a254:	f001 f862 	bl	800b31c <HAL_FLASHEx_OBProgram>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <ymodem_receive+0x3e>
			  {
			      HAL_FLASH_OB_Launch(); // This will cause a reset!
 800a25e:	f000 fe9b 	bl	800af98 <HAL_FLASH_OB_Launch>
			  }

			  HAL_FLASH_OB_Lock();
 800a262:	f000 fe89 	bl	800af78 <HAL_FLASH_OB_Lock>
			  HAL_FLASH_Lock();
 800a266:	f000 fe5b 	bl	800af20 <HAL_FLASH_Lock>

    uint32_t flashDestination, ramSource, fileSize;
    uint32_t i, packetLength, sessionDone = 0, fileDone, sessionBegin = 0, errors = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a26e:	2300      	movs	r3, #0
 800a270:	657b      	str	r3, [r7, #84]	@ 0x54
 800a272:	2300      	movs	r3, #0
 800a274:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t* p_filePtr;
    uint8_t p_fileSize[FILE_SIZE_LENGTH], tmp, packetsReceived;
    COM_StatusTypeDef result = COM_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

    flashDestination = APPLICATION_ADDRESS;
 800a27c:	4baf      	ldr	r3, [pc, #700]	@ (800a53c <ymodem_receive+0x318>)
 800a27e:	667b      	str	r3, [r7, #100]	@ 0x64

    while ((sessionDone == 0) && (result == COM_OK)) {
 800a280:	e125      	b.n	800a4ce <ymodem_receive+0x2aa>
        packetsReceived = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        fileDone = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	65bb      	str	r3, [r7, #88]	@ 0x58
        while ((fileDone == 0) && (result == COM_OK)) {
 800a28c:	e117      	b.n	800a4be <ymodem_receive+0x29a>
            switch (receive_packet(aPacketData, &packetLength, DOWNLOAD_TIMEOUT)) {
 800a28e:	f107 031c 	add.w	r3, r7, #28
 800a292:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a296:	4619      	mov	r1, r3
 800a298:	48a9      	ldr	r0, [pc, #676]	@ (800a540 <ymodem_receive+0x31c>)
 800a29a:	f7ff fdcf 	bl	8009e3c <receive_packet>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <ymodem_receive+0x88>
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	f000 80e9 	beq.w	800a47c <ymodem_receive+0x258>
 800a2aa:	e0f1      	b.n	800a490 <ymodem_receive+0x26c>
                case HAL_OK:
                    errors = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	653b      	str	r3, [r7, #80]	@ 0x50
                    switch (packetLength) {
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d008      	beq.n	800a2c8 <ymodem_receive+0xa4>
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d10c      	bne.n	800a2d4 <ymodem_receive+0xb0>
                        case 2:
                            serial_put_byte(ACK);
 800a2ba:	2006      	movs	r0, #6
 800a2bc:	f7f6 fabe 	bl	800083c <serial_put_byte>
                            result = COM_ABORT;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                            break;
 800a2c6:	e0d8      	b.n	800a47a <ymodem_receive+0x256>

                        case 0:
                            serial_put_byte(ACK);
 800a2c8:	2006      	movs	r0, #6
 800a2ca:	f7f6 fab7 	bl	800083c <serial_put_byte>
                            fileDone = 1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	65bb      	str	r3, [r7, #88]	@ 0x58
                            break;
 800a2d2:	e0d2      	b.n	800a47a <ymodem_receive+0x256>

                        default:
                            if (aPacketData[PACKET_NUMBER_INDEX] != (packetsReceived & 0xffU)) {
 800a2d4:	4b9a      	ldr	r3, [pc, #616]	@ (800a540 <ymodem_receive+0x31c>)
 800a2d6:	789b      	ldrb	r3, [r3, #2]
 800a2d8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d003      	beq.n	800a2e8 <ymodem_receive+0xc4>
                                serial_put_byte(NAK);
 800a2e0:	2015      	movs	r0, #21
 800a2e2:	f7f6 faab 	bl	800083c <serial_put_byte>
                                	}
                                }
                                packetsReceived++;
                                sessionBegin = 1;
                            }
                            break;
 800a2e6:	e0c7      	b.n	800a478 <ymodem_receive+0x254>
                                if (packetsReceived == 0) {
 800a2e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d17c      	bne.n	800a3ea <ymodem_receive+0x1c6>
                                    if (aPacketData[PACKET_DATA_INDEX] != 0) {
 800a2f0:	4b93      	ldr	r3, [pc, #588]	@ (800a540 <ymodem_receive+0x31c>)
 800a2f2:	791b      	ldrb	r3, [r3, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d070      	beq.n	800a3da <ymodem_receive+0x1b6>
                                        p_filePtr = aPacketData + PACKET_DATA_INDEX;
 800a2f8:	4b92      	ldr	r3, [pc, #584]	@ (800a544 <ymodem_receive+0x320>)
 800a2fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        i = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	663b      	str	r3, [r7, #96]	@ 0x60
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 800a300:	e008      	b.n	800a314 <ymodem_receive+0xf0>
                                            aFileName[i++] = *p_filePtr++;
 800a302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a304:	1c53      	adds	r3, r2, #1
 800a306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a30a:	1c59      	adds	r1, r3, #1
 800a30c:	6639      	str	r1, [r7, #96]	@ 0x60
 800a30e:	7811      	ldrb	r1, [r2, #0]
 800a310:	4a8d      	ldr	r2, [pc, #564]	@ (800a548 <ymodem_receive+0x324>)
 800a312:	54d1      	strb	r1, [r2, r3]
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 800a314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <ymodem_receive+0xfe>
 800a31c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a31e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a320:	d9ef      	bls.n	800a302 <ymodem_receive+0xde>
                                        aFileName[i++] = '\0';
 800a322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a324:	1c5a      	adds	r2, r3, #1
 800a326:	663a      	str	r2, [r7, #96]	@ 0x60
 800a328:	4a87      	ldr	r2, [pc, #540]	@ (800a548 <ymodem_receive+0x324>)
 800a32a:	2100      	movs	r1, #0
 800a32c:	54d1      	strb	r1, [r2, r3]
                                        i = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	663b      	str	r3, [r7, #96]	@ 0x60
                                        p_filePtr++;
 800a332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a334:	3301      	adds	r3, #1
 800a336:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 800a338:	e00a      	b.n	800a350 <ymodem_receive+0x12c>
                                            p_fileSize[i++] = *p_filePtr++;
 800a33a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a33c:	1c53      	adds	r3, r2, #1
 800a33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a342:	1c59      	adds	r1, r3, #1
 800a344:	6639      	str	r1, [r7, #96]	@ 0x60
 800a346:	7812      	ldrb	r2, [r2, #0]
 800a348:	3368      	adds	r3, #104	@ 0x68
 800a34a:	443b      	add	r3, r7
 800a34c:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 800a350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b20      	cmp	r3, #32
 800a356:	d002      	beq.n	800a35e <ymodem_receive+0x13a>
 800a358:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d9ed      	bls.n	800a33a <ymodem_receive+0x116>
                                        p_fileSize[i++] = '\0';
 800a35e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	663a      	str	r2, [r7, #96]	@ 0x60
 800a364:	3368      	adds	r3, #104	@ 0x68
 800a366:	443b      	add	r3, r7
 800a368:	2200      	movs	r2, #0
 800a36a:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        str_to_int(p_fileSize, &fileSize);
 800a36e:	f107 0220 	add.w	r2, r7, #32
 800a372:	f107 030c 	add.w	r3, r7, #12
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f6 f94f 	bl	800061c <str_to_int>
                                        if (fileSize > (USER_FLASH_SIZE + 1)) {
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	4a72      	ldr	r2, [pc, #456]	@ (800a54c <ymodem_receive+0x328>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d915      	bls.n	800a3b2 <ymodem_receive+0x18e>
                                            tmp = CA;
 800a386:	2318      	movs	r3, #24
 800a388:	72fb      	strb	r3, [r7, #11]
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 800a38a:	f107 010b 	add.w	r1, r7, #11
 800a38e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a392:	2201      	movs	r2, #1
 800a394:	486e      	ldr	r0, [pc, #440]	@ (800a550 <ymodem_receive+0x32c>)
 800a396:	f005 fafd 	bl	800f994 <HAL_UART_Transmit>
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 800a39a:	f107 010b 	add.w	r1, r7, #11
 800a39e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	486a      	ldr	r0, [pc, #424]	@ (800a550 <ymodem_receive+0x32c>)
 800a3a6:	f005 faf5 	bl	800f994 <HAL_UART_Transmit>
                                            result = COM_LIMIT;
 800a3aa:	2305      	movs	r3, #5
 800a3ac:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                                            break;
 800a3b0:	e063      	b.n	800a47a <ymodem_receive+0x256>
                                        FLASH_IF_disable_all_protection();
 800a3b2:	f7f6 fb01 	bl	80009b8 <FLASH_IF_disable_all_protection>
                                        if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 800a3b6:	4861      	ldr	r0, [pc, #388]	@ (800a53c <ymodem_receive+0x318>)
 800a3b8:	f7f6 fab4 	bl	8000924 <FLASH_IF_erase>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <ymodem_receive+0x1a2>
                                            return COM_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0d8      	b.n	800a578 <ymodem_receive+0x354>
                                        *p_size = fileSize;
 800a3c6:	6a3a      	ldr	r2, [r7, #32]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	601a      	str	r2, [r3, #0]
                                        serial_put_byte(ACK);
 800a3cc:	2006      	movs	r0, #6
 800a3ce:	f7f6 fa35 	bl	800083c <serial_put_byte>
                                        serial_put_byte(CRC16);
 800a3d2:	2043      	movs	r0, #67	@ 0x43
 800a3d4:	f7f6 fa32 	bl	800083c <serial_put_byte>
 800a3d8:	e047      	b.n	800a46a <ymodem_receive+0x246>
                                        serial_put_byte(ACK);
 800a3da:	2006      	movs	r0, #6
 800a3dc:	f7f6 fa2e 	bl	800083c <serial_put_byte>
                                        fileDone = 1;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	65bb      	str	r3, [r7, #88]	@ 0x58
                                        sessionDone = 1;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                        break;
 800a3e8:	e047      	b.n	800a47a <ymodem_receive+0x256>
                                	ramSource = (uint32_t)&aPacketData[PACKET_DATA_INDEX];
 800a3ea:	4b56      	ldr	r3, [pc, #344]	@ (800a544 <ymodem_receive+0x320>)
 800a3ec:	647b      	str	r3, [r7, #68]	@ 0x44
                                	if (ramSource == 0 || ramSource < 0x20000000 || ramSource > 0x2004FFFF) {
 800a3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <ymodem_receive+0x1e0>
 800a3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3fa:	d303      	bcc.n	800a404 <ymodem_receive+0x1e0>
 800a3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3fe:	4a55      	ldr	r2, [pc, #340]	@ (800a554 <ymodem_receive+0x330>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d909      	bls.n	800a418 <ymodem_receive+0x1f4>
                                	    serial_put_byte(CA);
 800a404:	2018      	movs	r0, #24
 800a406:	f7f6 fa19 	bl	800083c <serial_put_byte>
                                	    serial_put_byte(CA);
 800a40a:	2018      	movs	r0, #24
 800a40c:	f7f6 fa16 	bl	800083c <serial_put_byte>
                                	    result = FLASHIF_WRITING_ERROR;
 800a410:	2303      	movs	r3, #3
 800a412:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a416:	e028      	b.n	800a46a <ymodem_receive+0x246>
                                	    uint32_t stt = FLASH_IF_write(flashDestination, (uint32_t*)ramSource, packetLength / 4);
 800a418:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	089b      	lsrs	r3, r3, #2
 800a41e:	461a      	mov	r2, r3
 800a420:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a422:	f7f6 fafb 	bl	8000a1c <FLASH_IF_write>
 800a426:	6438      	str	r0, [r7, #64]	@ 0x40
                                	    if (stt == FLASHIF_WRITING_ERROR) {
 800a428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d109      	bne.n	800a442 <ymodem_receive+0x21e>
                                	        serial_put_byte(CA);
 800a42e:	2018      	movs	r0, #24
 800a430:	f7f6 fa04 	bl	800083c <serial_put_byte>
                                	        serial_put_byte(CA);
 800a434:	2018      	movs	r0, #24
 800a436:	f7f6 fa01 	bl	800083c <serial_put_byte>
                                	        result = FLASHIF_WRITING_ERROR;
 800a43a:	2303      	movs	r3, #3
 800a43c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a440:	e013      	b.n	800a46a <ymodem_receive+0x246>
                                	    else if (stt == FLASHIF_WRITINGCTRL_ERROR) {
 800a442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a444:	2b02      	cmp	r3, #2
 800a446:	d109      	bne.n	800a45c <ymodem_receive+0x238>
                                	        serial_put_byte(CA);
 800a448:	2018      	movs	r0, #24
 800a44a:	f7f6 f9f7 	bl	800083c <serial_put_byte>
                                	        serial_put_byte(CA);
 800a44e:	2018      	movs	r0, #24
 800a450:	f7f6 f9f4 	bl	800083c <serial_put_byte>
                                	        result = FLASHIF_WRITINGCTRL_ERROR;
 800a454:	2302      	movs	r3, #2
 800a456:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a45a:	e006      	b.n	800a46a <ymodem_receive+0x246>
                                	        flashDestination += packetLength;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a460:	4413      	add	r3, r2
 800a462:	667b      	str	r3, [r7, #100]	@ 0x64
                                	        serial_put_byte(ACK);
 800a464:	2006      	movs	r0, #6
 800a466:	f7f6 f9e9 	bl	800083c <serial_put_byte>
                                packetsReceived++;
 800a46a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a46e:	3301      	adds	r3, #1
 800a470:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                                sessionBegin = 1;
 800a474:	2301      	movs	r3, #1
 800a476:	657b      	str	r3, [r7, #84]	@ 0x54
                            break;
 800a478:	bf00      	nop
                    }
                    break;
 800a47a:	e020      	b.n	800a4be <ymodem_receive+0x29a>

                case HAL_BUSY:

                    serial_put_byte(CA);
 800a47c:	2018      	movs	r0, #24
 800a47e:	f7f6 f9dd 	bl	800083c <serial_put_byte>
                    serial_put_byte(CA);
 800a482:	2018      	movs	r0, #24
 800a484:	f7f6 f9da 	bl	800083c <serial_put_byte>
                    result = COM_ABORT;
 800a488:	2302      	movs	r3, #2
 800a48a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    break;
 800a48e:	e016      	b.n	800a4be <ymodem_receive+0x29a>

                default:
                    if (sessionBegin) {
 800a490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <ymodem_receive+0x278>
                        errors++;
 800a496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a498:	3301      	adds	r3, #1
 800a49a:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                    if (errors > MAX_ERRORS) {
 800a49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a49e:	2b05      	cmp	r3, #5
 800a4a0:	d909      	bls.n	800a4b6 <ymodem_receive+0x292>

                        serial_put_byte(CA);
 800a4a2:	2018      	movs	r0, #24
 800a4a4:	f7f6 f9ca 	bl	800083c <serial_put_byte>
                        serial_put_byte(CA);
 800a4a8:	2018      	movs	r0, #24
 800a4aa:	f7f6 f9c7 	bl	800083c <serial_put_byte>
                        result = COM_ABORT;
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    }
                    else {
                        serial_put_byte(CRC16);
                    }
                    break;
 800a4b4:	e002      	b.n	800a4bc <ymodem_receive+0x298>
                        serial_put_byte(CRC16);
 800a4b6:	2043      	movs	r0, #67	@ 0x43
 800a4b8:	f7f6 f9c0 	bl	800083c <serial_put_byte>
                    break;
 800a4bc:	bf00      	nop
        while ((fileDone == 0) && (result == COM_OK)) {
 800a4be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d104      	bne.n	800a4ce <ymodem_receive+0x2aa>
 800a4c4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f43f aee0 	beq.w	800a28e <ymodem_receive+0x6a>
    while ((sessionDone == 0) && (result == COM_OK)) {
 800a4ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d104      	bne.n	800a4de <ymodem_receive+0x2ba>
 800a4d4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f43f aed2 	beq.w	800a282 <ymodem_receive+0x5e>
            }
        }
    }
    HAL_Delay(3000);
 800a4de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800a4e2:	f000 fa85 	bl	800a9f0 <HAL_Delay>
    /* Final status report */
    if (result == COM_OK) {
 800a4e6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <ymodem_receive+0x2e2>
        serial_put_string((uint8_t*)"\r\nYMODEM Success: ");
 800a4ee:	481a      	ldr	r0, [pc, #104]	@ (800a558 <ymodem_receive+0x334>)
 800a4f0:	f7f6 f988 	bl	8000804 <serial_put_string>
        serial_put_string(aFileName);
 800a4f4:	4814      	ldr	r0, [pc, #80]	@ (800a548 <ymodem_receive+0x324>)
 800a4f6:	f7f6 f985 	bl	8000804 <serial_put_string>

        serial_put_string((uint8_t*)p_fileSize);
 800a4fa:	f107 030c 	add.w	r3, r7, #12
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f6 f980 	bl	8000804 <serial_put_string>
 800a504:	e036      	b.n	800a574 <ymodem_receive+0x350>
    }
    else {
        serial_put_string((uint8_t*)"\r\nYMODEM Failed: ");
 800a506:	4815      	ldr	r0, [pc, #84]	@ (800a55c <ymodem_receive+0x338>)
 800a508:	f7f6 f97c 	bl	8000804 <serial_put_string>
        switch(result) {
 800a50c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a510:	2b05      	cmp	r3, #5
 800a512:	d006      	beq.n	800a522 <ymodem_receive+0x2fe>
 800a514:	2b05      	cmp	r3, #5
 800a516:	dc29      	bgt.n	800a56c <ymodem_receive+0x348>
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d00a      	beq.n	800a532 <ymodem_receive+0x30e>
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	d004      	beq.n	800a52a <ymodem_receive+0x306>
 800a520:	e024      	b.n	800a56c <ymodem_receive+0x348>
            case COM_LIMIT:
                serial_put_string((uint8_t*)"File too large");
 800a522:	480f      	ldr	r0, [pc, #60]	@ (800a560 <ymodem_receive+0x33c>)
 800a524:	f7f6 f96e 	bl	8000804 <serial_put_string>
                break;
 800a528:	e024      	b.n	800a574 <ymodem_receive+0x350>
            case COM_DATA:
                serial_put_string((uint8_t*)"Flash write error");
 800a52a:	480e      	ldr	r0, [pc, #56]	@ (800a564 <ymodem_receive+0x340>)
 800a52c:	f7f6 f96a 	bl	8000804 <serial_put_string>
                break;
 800a530:	e020      	b.n	800a574 <ymodem_receive+0x350>

            case COM_ABORT:
                serial_put_string((uint8_t*)"Transfer aborted");
 800a532:	480d      	ldr	r0, [pc, #52]	@ (800a568 <ymodem_receive+0x344>)
 800a534:	f7f6 f966 	bl	8000804 <serial_put_string>
                break;
 800a538:	e01c      	b.n	800a574 <ymodem_receive+0x350>
 800a53a:	bf00      	nop
 800a53c:	08020000 	.word	0x08020000
 800a540:	20000e2c 	.word	0x20000e2c
 800a544:	20000e30 	.word	0x20000e30
 800a548:	200006d4 	.word	0x200006d4
 800a54c:	00060001 	.word	0x00060001
 800a550:	20000680 	.word	0x20000680
 800a554:	2004ffff 	.word	0x2004ffff
 800a558:	080134e4 	.word	0x080134e4
 800a55c:	080134f8 	.word	0x080134f8
 800a560:	0801350c 	.word	0x0801350c
 800a564:	0801351c 	.word	0x0801351c
 800a568:	08013530 	.word	0x08013530
            default:
                serial_put_string((uint8_t*)"Unknown error");\
 800a56c:	4804      	ldr	r0, [pc, #16]	@ (800a580 <ymodem_receive+0x35c>)
 800a56e:	f7f6 f949 	bl	8000804 <serial_put_string>
                break;
 800a572:	bf00      	nop
        }
    }

    return result;
 800a574:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3768      	adds	r7, #104	@ 0x68
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	08013544 	.word	0x08013544

0800a584 <ymodem_transmit>:
  * @param  p_buff: Address of the first byte
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef ymodem_transmit(uint8_t* p_buf, const uint8_t* p_file_name, uint32_t file_size) {
 800a584:	b580      	push	{r7, lr}
 800a586:	b08e      	sub	sp, #56	@ 0x38
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
    uint32_t errors = 0, ackRecpt = 0, size = 0, pktSize;
 800a590:	2300      	movs	r3, #0
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34
 800a594:	2300      	movs	r3, #0
 800a596:	633b      	str	r3, [r7, #48]	@ 0x30
 800a598:	2300      	movs	r3, #0
 800a59a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *p_buf_int;
    COM_StatusTypeDef result = COM_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t blkNumber = 1;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	623b      	str	r3, [r7, #32]
#else
    uint8_t tempChkSum;
#endif

    /* Prepare first block - header */
    prepare_initial_packet(aPacketData, p_file_name, file_size);
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	68b9      	ldr	r1, [r7, #8]
 800a5aa:	4899      	ldr	r0, [pc, #612]	@ (800a810 <ymodem_transmit+0x28c>)
 800a5ac:	f7ff fd14 	bl	8009fd8 <prepare_initial_packet>

    while ((!ackRecpt) && (result == COM_OK)) {
 800a5b0:	e054      	b.n	800a65c <ymodem_transmit+0xd8>
        /* Send Packet */
        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800a5b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a5b6:	2283      	movs	r2, #131	@ 0x83
 800a5b8:	4996      	ldr	r1, [pc, #600]	@ (800a814 <ymodem_transmit+0x290>)
 800a5ba:	4897      	ldr	r0, [pc, #604]	@ (800a818 <ymodem_transmit+0x294>)
 800a5bc:	f005 f9ea 	bl	800f994 <HAL_UART_Transmit>

        /* Send CRC or Checksum */
#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800a5c0:	2280      	movs	r2, #128	@ 0x80
 800a5c2:	4996      	ldr	r1, [pc, #600]	@ (800a81c <ymodem_transmit+0x298>)
 800a5c4:	4896      	ldr	r0, [pc, #600]	@ (800a820 <ymodem_transmit+0x29c>)
 800a5c6:	f000 fb64 	bl	800ac92 <HAL_CRC_Calculate>
 800a5ca:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	0a1b      	lsrs	r3, r3, #8
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7f6 f932 	bl	800083c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7f6 f92d 	bl	800083c <serial_put_byte>
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        /* Wait for response */
        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 800a5e2:	f107 0110 	add.w	r1, r7, #16
 800a5e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	488a      	ldr	r0, [pc, #552]	@ (800a818 <ymodem_transmit+0x294>)
 800a5ee:	f005 fa5c 	bl	800faaa <HAL_UART_Receive>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d128      	bne.n	800a64a <ymodem_transmit+0xc6>
            if (aRxCtrl[0] == ACK) {
 800a5f8:	7c3b      	ldrb	r3, [r7, #16]
 800a5fa:	2b06      	cmp	r3, #6
 800a5fc:	d10a      	bne.n	800a614 <ymodem_transmit+0x90>
                ackRecpt = 1;
 800a5fe:	2301      	movs	r3, #1
 800a600:	633b      	str	r3, [r7, #48]	@ 0x30
                HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT); // Wait for 'C'
 800a602:	f107 0110 	add.w	r1, r7, #16
 800a606:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a60a:	2201      	movs	r2, #1
 800a60c:	4882      	ldr	r0, [pc, #520]	@ (800a818 <ymodem_transmit+0x294>)
 800a60e:	f005 fa4c 	bl	800faaa <HAL_UART_Receive>
 800a612:	e01d      	b.n	800a650 <ymodem_transmit+0xcc>
            }
            else if (aRxCtrl[0] == CA) {
 800a614:	7c3b      	ldrb	r3, [r7, #16]
 800a616:	2b18      	cmp	r3, #24
 800a618:	d11a      	bne.n	800a650 <ymodem_transmit+0xcc>
                if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 800a61a:	f107 0110 	add.w	r1, r7, #16
 800a61e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a622:	2201      	movs	r2, #1
 800a624:	487c      	ldr	r0, [pc, #496]	@ (800a818 <ymodem_transmit+0x294>)
 800a626:	f005 fa40 	bl	800faaa <HAL_UART_Receive>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10f      	bne.n	800a650 <ymodem_transmit+0xcc>
 800a630:	7c3b      	ldrb	r3, [r7, #16]
 800a632:	2b18      	cmp	r3, #24
 800a634:	d10c      	bne.n	800a650 <ymodem_transmit+0xcc>
                    HAL_Delay(2);
 800a636:	2002      	movs	r0, #2
 800a638:	f000 f9da 	bl	800a9f0 <HAL_Delay>
                    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a63c:	4b76      	ldr	r3, [pc, #472]	@ (800a818 <ymodem_transmit+0x294>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
                    result = COM_ABORT;
 800a642:	2302      	movs	r3, #2
 800a644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a648:	e002      	b.n	800a650 <ymodem_transmit+0xcc>
                }
            }
        }
        else {
            errors++;
 800a64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64c:	3301      	adds	r3, #1
 800a64e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if (errors >= MAX_ERRORS) {
 800a650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a652:	2b04      	cmp	r3, #4
 800a654:	d902      	bls.n	800a65c <ymodem_transmit+0xd8>
            result = COM_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((!ackRecpt) && (result == COM_OK)) {
 800a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d103      	bne.n	800a66a <ymodem_transmit+0xe6>
 800a662:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0a3      	beq.n	800a5b2 <ymodem_transmit+0x2e>
        }
    }

    p_buf_int = p_buf;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	62bb      	str	r3, [r7, #40]	@ 0x28
    size = file_size;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Send data packets */
    while ((size) && (result == COM_OK)) {
 800a672:	e06e      	b.n	800a752 <ymodem_transmit+0x1ce>
        prepare_packet(p_buf_int, aPacketData, blkNumber, size);
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67a:	4965      	ldr	r1, [pc, #404]	@ (800a810 <ymodem_transmit+0x28c>)
 800a67c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a67e:	f7ff fd10 	bl	800a0a2 <prepare_packet>
        ackRecpt = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	637b      	str	r3, [r7, #52]	@ 0x34

        while ((!ackRecpt) && (result == COM_OK)) {
 800a68a:	e05b      	b.n	800a744 <ymodem_transmit+0x1c0>
            /* Determine packet size */
            pktSize = (size >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 800a68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a692:	d302      	bcc.n	800a69a <ymodem_transmit+0x116>
 800a694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a698:	e000      	b.n	800a69c <ymodem_transmit+0x118>
 800a69a:	2380      	movs	r3, #128	@ 0x80
 800a69c:	617b      	str	r3, [r7, #20]

            /* Send packet */
            HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pktSize + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	3303      	adds	r3, #3
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a6aa:	495a      	ldr	r1, [pc, #360]	@ (800a814 <ymodem_transmit+0x290>)
 800a6ac:	485a      	ldr	r0, [pc, #360]	@ (800a818 <ymodem_transmit+0x294>)
 800a6ae:	f005 f971 	bl	800f994 <HAL_UART_Transmit>

            /* Send CRC/Checksum */
#ifdef CRC16_F
            tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pktSize);
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4959      	ldr	r1, [pc, #356]	@ (800a81c <ymodem_transmit+0x298>)
 800a6b6:	485a      	ldr	r0, [pc, #360]	@ (800a820 <ymodem_transmit+0x29c>)
 800a6b8:	f000 faeb 	bl	800ac92 <HAL_CRC_Calculate>
 800a6bc:	61b8      	str	r0, [r7, #24]
            serial_put_byte(tempCrc >> 8);
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	0a1b      	lsrs	r3, r3, #8
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7f6 f8b9 	bl	800083c <serial_put_byte>
            serial_put_byte(tempCrc & 0xFF);
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7f6 f8b4 	bl	800083c <serial_put_byte>
            tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], pktSize);
            Serial_PutByte(tempChkSum);
#endif

            /* Wait for ACK */
            if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == ACK)) {
 800a6d4:	f107 0110 	add.w	r1, r7, #16
 800a6d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a6dc:	2201      	movs	r2, #1
 800a6de:	484e      	ldr	r0, [pc, #312]	@ (800a818 <ymodem_transmit+0x294>)
 800a6e0:	f005 f9e3 	bl	800faaa <HAL_UART_Receive>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d123      	bne.n	800a732 <ymodem_transmit+0x1ae>
 800a6ea:	7c3b      	ldrb	r3, [r7, #16]
 800a6ec:	2b06      	cmp	r3, #6
 800a6ee:	d120      	bne.n	800a732 <ymodem_transmit+0x1ae>
                ackRecpt = 1;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	633b      	str	r3, [r7, #48]	@ 0x30
                if (size > pktSize) {
 800a6f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d913      	bls.n	800a724 <ymodem_transmit+0x1a0>
                    p_buf_int += pktSize;
 800a6fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	4413      	add	r3, r2
 800a702:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size -= pktSize;
 800a704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if (blkNumber == (USER_FLASH_SIZE / PACKET_1K_SIZE)) {
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800a712:	d103      	bne.n	800a71c <ymodem_transmit+0x198>
                        result = COM_LIMIT;
 800a714:	2305      	movs	r3, #5
 800a716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if (size > pktSize) {
 800a71a:	e00d      	b.n	800a738 <ymodem_transmit+0x1b4>
                    } else {
                        blkNumber++;
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	3301      	adds	r3, #1
 800a720:	623b      	str	r3, [r7, #32]
                if (size > pktSize) {
 800a722:	e009      	b.n	800a738 <ymodem_transmit+0x1b4>
                    }
                }
                else {
                    p_buf_int += pktSize;
 800a724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	4413      	add	r3, r2
 800a72a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if (size > pktSize) {
 800a730:	e002      	b.n	800a738 <ymodem_transmit+0x1b4>
                }
            }
            else {
                errors++;
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a734:	3301      	adds	r3, #1
 800a736:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 800a738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d902      	bls.n	800a744 <ymodem_transmit+0x1c0>
                result = COM_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	2b00      	cmp	r3, #0
 800a748:	d103      	bne.n	800a752 <ymodem_transmit+0x1ce>
 800a74a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d09c      	beq.n	800a68c <ymodem_transmit+0x108>
    while ((size) && (result == COM_OK)) {
 800a752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d003      	beq.n	800a760 <ymodem_transmit+0x1dc>
 800a758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d089      	beq.n	800a674 <ymodem_transmit+0xf0>
            }
        }
    }

    /* Send EOT */
    if (result == COM_OK) {
 800a760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a764:	2b00      	cmp	r3, #0
 800a766:	d143      	bne.n	800a7f0 <ymodem_transmit+0x26c>
        ackRecpt = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	637b      	str	r3, [r7, #52]	@ 0x34
        while ((!ackRecpt) && (result == COM_OK)) {
 800a770:	e037      	b.n	800a7e2 <ymodem_transmit+0x25e>
            serial_put_byte(EOT);
 800a772:	2004      	movs	r0, #4
 800a774:	f7f6 f862 	bl	800083c <serial_put_byte>

            if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 800a778:	f107 0110 	add.w	r1, r7, #16
 800a77c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a780:	2201      	movs	r2, #1
 800a782:	4825      	ldr	r0, [pc, #148]	@ (800a818 <ymodem_transmit+0x294>)
 800a784:	f005 f991 	bl	800faaa <HAL_UART_Receive>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d120      	bne.n	800a7d0 <ymodem_transmit+0x24c>
                if (aRxCtrl[0] == ACK) {
 800a78e:	7c3b      	ldrb	r3, [r7, #16]
 800a790:	2b06      	cmp	r3, #6
 800a792:	d102      	bne.n	800a79a <ymodem_transmit+0x216>
                    ackRecpt = 1;
 800a794:	2301      	movs	r3, #1
 800a796:	633b      	str	r3, [r7, #48]	@ 0x30
 800a798:	e01d      	b.n	800a7d6 <ymodem_transmit+0x252>
                }
                else if (aRxCtrl[0] == CA) {
 800a79a:	7c3b      	ldrb	r3, [r7, #16]
 800a79c:	2b18      	cmp	r3, #24
 800a79e:	d11a      	bne.n	800a7d6 <ymodem_transmit+0x252>
                    if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 800a7a0:	f107 0110 	add.w	r1, r7, #16
 800a7a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	481b      	ldr	r0, [pc, #108]	@ (800a818 <ymodem_transmit+0x294>)
 800a7ac:	f005 f97d 	bl	800faaa <HAL_UART_Receive>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10f      	bne.n	800a7d6 <ymodem_transmit+0x252>
 800a7b6:	7c3b      	ldrb	r3, [r7, #16]
 800a7b8:	2b18      	cmp	r3, #24
 800a7ba:	d10c      	bne.n	800a7d6 <ymodem_transmit+0x252>
                        HAL_Delay(2);
 800a7bc:	2002      	movs	r0, #2
 800a7be:	f000 f917 	bl	800a9f0 <HAL_Delay>
                        __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a7c2:	4b15      	ldr	r3, [pc, #84]	@ (800a818 <ymodem_transmit+0x294>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
                        result = COM_ABORT;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a7ce:	e002      	b.n	800a7d6 <ymodem_transmit+0x252>
                    }
                }
            }
            else {
                errors++;
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d902      	bls.n	800a7e2 <ymodem_transmit+0x25e>
                result = COM_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <ymodem_transmit+0x26c>
 800a7e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0c0      	beq.n	800a772 <ymodem_transmit+0x1ee>
            }
        }
    }

    /* Send empty packet to close session */
    if (result == COM_OK) {
 800a7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d14e      	bne.n	800a896 <ymodem_transmit+0x312>
        aPacketData[PACKET_START_INDEX] = SOH;
 800a7f8:	4b05      	ldr	r3, [pc, #20]	@ (800a810 <ymodem_transmit+0x28c>)
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	705a      	strb	r2, [r3, #1]
        aPacketData[PACKET_NUMBER_INDEX] = 0;
 800a7fe:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <ymodem_transmit+0x28c>)
 800a800:	2200      	movs	r2, #0
 800a802:	709a      	strb	r2, [r3, #2]
        aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 800a804:	4b02      	ldr	r3, [pc, #8]	@ (800a810 <ymodem_transmit+0x28c>)
 800a806:	22ff      	movs	r2, #255	@ 0xff
 800a808:	70da      	strb	r2, [r3, #3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 800a80a:	2304      	movs	r3, #4
 800a80c:	77fb      	strb	r3, [r7, #31]
 800a80e:	e010      	b.n	800a832 <ymodem_transmit+0x2ae>
 800a810:	20000e2c 	.word	0x20000e2c
 800a814:	20000e2d 	.word	0x20000e2d
 800a818:	20000680 	.word	0x20000680
 800a81c:	20000e30 	.word	0x20000e30
 800a820:	200005dc 	.word	0x200005dc
            aPacketData[i] = 0x00;
 800a824:	7ffb      	ldrb	r3, [r7, #31]
 800a826:	4a1f      	ldr	r2, [pc, #124]	@ (800a8a4 <ymodem_transmit+0x320>)
 800a828:	2100      	movs	r1, #0
 800a82a:	54d1      	strb	r1, [r2, r3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 800a82c:	7ffb      	ldrb	r3, [r7, #31]
 800a82e:	3301      	adds	r3, #1
 800a830:	77fb      	strb	r3, [r7, #31]
 800a832:	7ffb      	ldrb	r3, [r7, #31]
 800a834:	2b83      	cmp	r3, #131	@ 0x83
 800a836:	d9f5      	bls.n	800a824 <ymodem_transmit+0x2a0>
        }

        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800a838:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a83c:	2283      	movs	r2, #131	@ 0x83
 800a83e:	491a      	ldr	r1, [pc, #104]	@ (800a8a8 <ymodem_transmit+0x324>)
 800a840:	481a      	ldr	r0, [pc, #104]	@ (800a8ac <ymodem_transmit+0x328>)
 800a842:	f005 f8a7 	bl	800f994 <HAL_UART_Transmit>

#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800a846:	2280      	movs	r2, #128	@ 0x80
 800a848:	4919      	ldr	r1, [pc, #100]	@ (800a8b0 <ymodem_transmit+0x32c>)
 800a84a:	481a      	ldr	r0, [pc, #104]	@ (800a8b4 <ymodem_transmit+0x330>)
 800a84c:	f000 fa21 	bl	800ac92 <HAL_CRC_Calculate>
 800a850:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	0a1b      	lsrs	r3, r3, #8
 800a856:	b2db      	uxtb	r3, r3
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f5 ffef 	bl	800083c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	4618      	mov	r0, r3
 800a864:	f7f5 ffea 	bl	800083c <serial_put_byte>
#else
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 800a868:	f107 0110 	add.w	r1, r7, #16
 800a86c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a870:	2201      	movs	r2, #1
 800a872:	480e      	ldr	r0, [pc, #56]	@ (800a8ac <ymodem_transmit+0x328>)
 800a874:	f005 f919 	bl	800faaa <HAL_UART_Receive>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <ymodem_transmit+0x312>
            if (aRxCtrl[0] == CA) {
 800a87e:	7c3b      	ldrb	r3, [r7, #16]
 800a880:	2b18      	cmp	r3, #24
 800a882:	d108      	bne.n	800a896 <ymodem_transmit+0x312>
                HAL_Delay(2);
 800a884:	2002      	movs	r0, #2
 800a886:	f000 f8b3 	bl	800a9f0 <HAL_Delay>
                __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a88a:	4b08      	ldr	r3, [pc, #32]	@ (800a8ac <ymodem_transmit+0x328>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
                result = COM_ABORT;
 800a890:	2302      	movs	r3, #2
 800a892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return result;
 800a896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3738      	adds	r7, #56	@ 0x38
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000e2c 	.word	0x20000e2c
 800a8a8:	20000e2d 	.word	0x20000e2d
 800a8ac:	20000680 	.word	0x20000680
 800a8b0:	20000e30 	.word	0x20000e30
 800a8b4:	200005dc 	.word	0x200005dc

0800a8b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a8b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a8f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a8bc:	f7ff faac 	bl	8009e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a8c0:	480c      	ldr	r0, [pc, #48]	@ (800a8f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a8c2:	490d      	ldr	r1, [pc, #52]	@ (800a8f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a8c4:	4a0d      	ldr	r2, [pc, #52]	@ (800a8fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a8c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a8c8:	e002      	b.n	800a8d0 <LoopCopyDataInit>

0800a8ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a8ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a8cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a8ce:	3304      	adds	r3, #4

0800a8d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a8d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a8d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a8d4:	d3f9      	bcc.n	800a8ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a8d6:	4a0a      	ldr	r2, [pc, #40]	@ (800a900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a8d8:	4c0a      	ldr	r4, [pc, #40]	@ (800a904 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a8da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a8dc:	e001      	b.n	800a8e2 <LoopFillZerobss>

0800a8de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a8de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a8e0:	3204      	adds	r2, #4

0800a8e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a8e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a8e4:	d3fb      	bcc.n	800a8de <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a8e6:	f006 fb15 	bl	8010f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a8ea:	f7f9 fb1b 	bl	8003f24 <main>
  bx  lr    
 800a8ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a8f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800a8f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a8f8:	200005c0 	.word	0x200005c0
  ldr r2, =_sidata
 800a8fc:	08013774 	.word	0x08013774
  ldr r2, =_sbss
 800a900:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 800a904:	200013a4 	.word	0x200013a4

0800a908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a908:	e7fe      	b.n	800a908 <ADC_IRQHandler>
	...

0800a90c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a910:	4b0e      	ldr	r3, [pc, #56]	@ (800a94c <HAL_Init+0x40>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a0d      	ldr	r2, [pc, #52]	@ (800a94c <HAL_Init+0x40>)
 800a916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a91a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a91c:	4b0b      	ldr	r3, [pc, #44]	@ (800a94c <HAL_Init+0x40>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a0a      	ldr	r2, [pc, #40]	@ (800a94c <HAL_Init+0x40>)
 800a922:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a928:	4b08      	ldr	r3, [pc, #32]	@ (800a94c <HAL_Init+0x40>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a07      	ldr	r2, [pc, #28]	@ (800a94c <HAL_Init+0x40>)
 800a92e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a934:	2003      	movs	r0, #3
 800a936:	f000 f94f 	bl	800abd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a93a:	2000      	movs	r0, #0
 800a93c:	f000 f808 	bl	800a950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a940:	f7ff f856 	bl	80099f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	40023c00 	.word	0x40023c00

0800a950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a958:	4b12      	ldr	r3, [pc, #72]	@ (800a9a4 <HAL_InitTick+0x54>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b12      	ldr	r3, [pc, #72]	@ (800a9a8 <HAL_InitTick+0x58>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	4619      	mov	r1, r3
 800a962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a966:	fbb3 f3f1 	udiv	r3, r3, r1
 800a96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f967 	bl	800ac42 <HAL_SYSTICK_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d001      	beq.n	800a97e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e00e      	b.n	800a99c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b0f      	cmp	r3, #15
 800a982:	d80a      	bhi.n	800a99a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a984:	2200      	movs	r2, #0
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a98c:	f000 f92f 	bl	800abee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a990:	4a06      	ldr	r2, [pc, #24]	@ (800a9ac <HAL_InitTick+0x5c>)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	e000      	b.n	800a99c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20000558 	.word	0x20000558
 800a9a8:	20000560 	.word	0x20000560
 800a9ac:	2000055c 	.word	0x2000055c

0800a9b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a9b4:	4b06      	ldr	r3, [pc, #24]	@ (800a9d0 <HAL_IncTick+0x20>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	4b06      	ldr	r3, [pc, #24]	@ (800a9d4 <HAL_IncTick+0x24>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4413      	add	r3, r2
 800a9c0:	4a04      	ldr	r2, [pc, #16]	@ (800a9d4 <HAL_IncTick+0x24>)
 800a9c2:	6013      	str	r3, [r2, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	20000560 	.word	0x20000560
 800a9d4:	20001234 	.word	0x20001234

0800a9d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  return uwTick;
 800a9dc:	4b03      	ldr	r3, [pc, #12]	@ (800a9ec <HAL_GetTick+0x14>)
 800a9de:	681b      	ldr	r3, [r3, #0]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20001234 	.word	0x20001234

0800a9f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a9f8:	f7ff ffee 	bl	800a9d8 <HAL_GetTick>
 800a9fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa08:	d005      	beq.n	800aa16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa0a:	4b0a      	ldr	r3, [pc, #40]	@ (800aa34 <HAL_Delay+0x44>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aa16:	bf00      	nop
 800aa18:	f7ff ffde 	bl	800a9d8 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d8f7      	bhi.n	800aa18 <HAL_Delay+0x28>
  {
  }
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000560 	.word	0x20000560

0800aa38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f003 0307 	and.w	r3, r3, #7
 800aa46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aa48:	4b0c      	ldr	r3, [pc, #48]	@ (800aa7c <__NVIC_SetPriorityGrouping+0x44>)
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aa54:	4013      	ands	r3, r2
 800aa56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aa60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800aa64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aa6a:	4a04      	ldr	r2, [pc, #16]	@ (800aa7c <__NVIC_SetPriorityGrouping+0x44>)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	60d3      	str	r3, [r2, #12]
}
 800aa70:	bf00      	nop
 800aa72:	3714      	adds	r7, #20
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	e000ed00 	.word	0xe000ed00

0800aa80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aa84:	4b04      	ldr	r3, [pc, #16]	@ (800aa98 <__NVIC_GetPriorityGrouping+0x18>)
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	0a1b      	lsrs	r3, r3, #8
 800aa8a:	f003 0307 	and.w	r3, r3, #7
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	e000ed00 	.word	0xe000ed00

0800aa9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aaa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	db0b      	blt.n	800aac6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	f003 021f 	and.w	r2, r3, #31
 800aab4:	4907      	ldr	r1, [pc, #28]	@ (800aad4 <__NVIC_EnableIRQ+0x38>)
 800aab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaba:	095b      	lsrs	r3, r3, #5
 800aabc:	2001      	movs	r0, #1
 800aabe:	fa00 f202 	lsl.w	r2, r0, r2
 800aac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	e000e100 	.word	0xe000e100

0800aad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db0a      	blt.n	800ab02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	490c      	ldr	r1, [pc, #48]	@ (800ab24 <__NVIC_SetPriority+0x4c>)
 800aaf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaf6:	0112      	lsls	r2, r2, #4
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	440b      	add	r3, r1
 800aafc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ab00:	e00a      	b.n	800ab18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	4908      	ldr	r1, [pc, #32]	@ (800ab28 <__NVIC_SetPriority+0x50>)
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	f003 030f 	and.w	r3, r3, #15
 800ab0e:	3b04      	subs	r3, #4
 800ab10:	0112      	lsls	r2, r2, #4
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	440b      	add	r3, r1
 800ab16:	761a      	strb	r2, [r3, #24]
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	e000e100 	.word	0xe000e100
 800ab28:	e000ed00 	.word	0xe000ed00

0800ab2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b089      	sub	sp, #36	@ 0x24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f003 0307 	and.w	r3, r3, #7
 800ab3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	f1c3 0307 	rsb	r3, r3, #7
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	bf28      	it	cs
 800ab4a:	2304      	movcs	r3, #4
 800ab4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	3304      	adds	r3, #4
 800ab52:	2b06      	cmp	r3, #6
 800ab54:	d902      	bls.n	800ab5c <NVIC_EncodePriority+0x30>
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	3b03      	subs	r3, #3
 800ab5a:	e000      	b.n	800ab5e <NVIC_EncodePriority+0x32>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6a:	43da      	mvns	r2, r3
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	401a      	ands	r2, r3
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7e:	43d9      	mvns	r1, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab84:	4313      	orrs	r3, r2
         );
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3724      	adds	r7, #36	@ 0x24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aba4:	d301      	bcc.n	800abaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aba6:	2301      	movs	r3, #1
 800aba8:	e00f      	b.n	800abca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800abaa:	4a0a      	ldr	r2, [pc, #40]	@ (800abd4 <SysTick_Config+0x40>)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3b01      	subs	r3, #1
 800abb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800abb2:	210f      	movs	r1, #15
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abb8:	f7ff ff8e 	bl	800aad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800abbc:	4b05      	ldr	r3, [pc, #20]	@ (800abd4 <SysTick_Config+0x40>)
 800abbe:	2200      	movs	r2, #0
 800abc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800abc2:	4b04      	ldr	r3, [pc, #16]	@ (800abd4 <SysTick_Config+0x40>)
 800abc4:	2207      	movs	r2, #7
 800abc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	e000e010 	.word	0xe000e010

0800abd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff ff29 	bl	800aa38 <__NVIC_SetPriorityGrouping>
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800abee:	b580      	push	{r7, lr}
 800abf0:	b086      	sub	sp, #24
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	4603      	mov	r3, r0
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
 800abfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ac00:	f7ff ff3e 	bl	800aa80 <__NVIC_GetPriorityGrouping>
 800ac04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	6978      	ldr	r0, [r7, #20]
 800ac0c:	f7ff ff8e 	bl	800ab2c <NVIC_EncodePriority>
 800ac10:	4602      	mov	r2, r0
 800ac12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff ff5d 	bl	800aad8 <__NVIC_SetPriority>
}
 800ac1e:	bf00      	nop
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff ff31 	bl	800aa9c <__NVIC_EnableIRQ>
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ffa2 	bl	800ab94 <SysTick_Config>
 800ac50:	4603      	mov	r3, r0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e00e      	b.n	800ac8a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	795b      	ldrb	r3, [r3, #5]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fe fedf 	bl	8009a40 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b087      	sub	sp, #28
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	60b9      	str	r1, [r7, #8]
 800ac9c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800ac9e:	2300      	movs	r3, #0
 800aca0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2202      	movs	r2, #2
 800aca6:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0201 	orr.w	r2, r2, #1
 800acb6:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e00a      	b.n	800acd4 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	441a      	add	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6812      	ldr	r2, [r2, #0]
 800accc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	3301      	adds	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d3f0      	bcc.n	800acbe <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800acea:	693b      	ldr	r3, [r7, #16]
}
 800acec:	4618      	mov	r0, r3
 800acee:	371c      	adds	r7, #28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ad06:	f7ff fe67 	bl	800a9d8 <HAL_GetTick>
 800ad0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d008      	beq.n	800ad2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2280      	movs	r2, #128	@ 0x80
 800ad1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e052      	b.n	800add0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0216 	bic.w	r2, r2, #22
 800ad38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	695a      	ldr	r2, [r3, #20]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d103      	bne.n	800ad5a <HAL_DMA_Abort+0x62>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d007      	beq.n	800ad6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0208 	bic.w	r2, r2, #8
 800ad68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0201 	bic.w	r2, r2, #1
 800ad78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad7a:	e013      	b.n	800ada4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad7c:	f7ff fe2c 	bl	800a9d8 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d90c      	bls.n	800ada4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2203      	movs	r2, #3
 800ad94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e015      	b.n	800add0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e4      	bne.n	800ad7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adb6:	223f      	movs	r2, #63	@ 0x3f
 800adb8:	409a      	lsls	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d004      	beq.n	800adf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2280      	movs	r2, #128	@ 0x80
 800adf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e00c      	b.n	800ae10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2205      	movs	r2, #5
 800adfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f022 0201 	bic.w	r2, r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ae2a:	b2db      	uxtb	r3, r3
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae46:	4b23      	ldr	r3, [pc, #140]	@ (800aed4 <HAL_FLASH_Program+0x9c>)
 800ae48:	7e1b      	ldrb	r3, [r3, #24]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d101      	bne.n	800ae52 <HAL_FLASH_Program+0x1a>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e03b      	b.n	800aeca <HAL_FLASH_Program+0x92>
 800ae52:	4b20      	ldr	r3, [pc, #128]	@ (800aed4 <HAL_FLASH_Program+0x9c>)
 800ae54:	2201      	movs	r2, #1
 800ae56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ae5c:	f000 f8b0 	bl	800afc0 <FLASH_WaitForLastOperation>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d12b      	bne.n	800aec2 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d105      	bne.n	800ae7c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ae70:	783b      	ldrb	r3, [r7, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	68b8      	ldr	r0, [r7, #8]
 800ae76:	f000 f95b 	bl	800b130 <FLASH_Program_Byte>
 800ae7a:	e016      	b.n	800aeaa <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d105      	bne.n	800ae8e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ae82:	883b      	ldrh	r3, [r7, #0]
 800ae84:	4619      	mov	r1, r3
 800ae86:	68b8      	ldr	r0, [r7, #8]
 800ae88:	f000 f92e 	bl	800b0e8 <FLASH_Program_HalfWord>
 800ae8c:	e00d      	b.n	800aeaa <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d105      	bne.n	800aea0 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	4619      	mov	r1, r3
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f000 f903 	bl	800b0a4 <FLASH_Program_Word>
 800ae9e:	e004      	b.n	800aeaa <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800aea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aea4:	68b8      	ldr	r0, [r7, #8]
 800aea6:	f000 f8cb 	bl	800b040 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aeaa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800aeae:	f000 f887 	bl	800afc0 <FLASH_WaitForLastOperation>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800aeb6:	4b08      	ldr	r3, [pc, #32]	@ (800aed8 <HAL_FLASH_Program+0xa0>)
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	4a07      	ldr	r2, [pc, #28]	@ (800aed8 <HAL_FLASH_Program+0xa0>)
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aec2:	4b04      	ldr	r3, [pc, #16]	@ (800aed4 <HAL_FLASH_Program+0x9c>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	761a      	strb	r2, [r3, #24]

  return status;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20001238 	.word	0x20001238
 800aed8:	40023c00 	.word	0x40023c00

0800aedc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800aee6:	4b0b      	ldr	r3, [pc, #44]	@ (800af14 <HAL_FLASH_Unlock+0x38>)
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da0b      	bge.n	800af06 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <HAL_FLASH_Unlock+0x38>)
 800aef0:	4a09      	ldr	r2, [pc, #36]	@ (800af18 <HAL_FLASH_Unlock+0x3c>)
 800aef2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800aef4:	4b07      	ldr	r3, [pc, #28]	@ (800af14 <HAL_FLASH_Unlock+0x38>)
 800aef6:	4a09      	ldr	r2, [pc, #36]	@ (800af1c <HAL_FLASH_Unlock+0x40>)
 800aef8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800aefa:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <HAL_FLASH_Unlock+0x38>)
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	da01      	bge.n	800af06 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800af06:	79fb      	ldrb	r3, [r7, #7]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	40023c00 	.word	0x40023c00
 800af18:	45670123 	.word	0x45670123
 800af1c:	cdef89ab 	.word	0xcdef89ab

0800af20 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800af20:	b480      	push	{r7}
 800af22:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <HAL_FLASH_Lock+0x1c>)
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	4a04      	ldr	r2, [pc, #16]	@ (800af3c <HAL_FLASH_Lock+0x1c>)
 800af2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af2e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	40023c00 	.word	0x40023c00

0800af40 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800af44:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <HAL_FLASH_OB_Unlock+0x2c>)
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800af50:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <HAL_FLASH_OB_Unlock+0x2c>)
 800af52:	4a07      	ldr	r2, [pc, #28]	@ (800af70 <HAL_FLASH_OB_Unlock+0x30>)
 800af54:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800af56:	4b05      	ldr	r3, [pc, #20]	@ (800af6c <HAL_FLASH_OB_Unlock+0x2c>)
 800af58:	4a06      	ldr	r2, [pc, #24]	@ (800af74 <HAL_FLASH_OB_Unlock+0x34>)
 800af5a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	e000      	b.n	800af62 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
}
 800af62:	4618      	mov	r0, r3
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	40023c00 	.word	0x40023c00
 800af70:	08192a3b 	.word	0x08192a3b
 800af74:	4c5d6e7f 	.word	0x4c5d6e7f

0800af78 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800af7c:	4b05      	ldr	r3, [pc, #20]	@ (800af94 <HAL_FLASH_OB_Lock+0x1c>)
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	4a04      	ldr	r2, [pc, #16]	@ (800af94 <HAL_FLASH_OB_Lock+0x1c>)
 800af82:	f043 0301 	orr.w	r3, r3, #1
 800af86:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr
 800af94:	40023c00 	.word	0x40023c00

0800af98 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800af9c:	4b07      	ldr	r3, [pc, #28]	@ (800afbc <HAL_FLASH_OB_Launch+0x24>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	4a06      	ldr	r2, [pc, #24]	@ (800afbc <HAL_FLASH_OB_Launch+0x24>)
 800afa4:	f043 0302 	orr.w	r3, r3, #2
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800afac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800afb0:	f000 f806 	bl	800afc0 <FLASH_WaitForLastOperation>
 800afb4:	4603      	mov	r3, r0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	40023c14 	.word	0x40023c14

0800afc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800afcc:	4b1a      	ldr	r3, [pc, #104]	@ (800b038 <FLASH_WaitForLastOperation+0x78>)
 800afce:	2200      	movs	r2, #0
 800afd0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800afd2:	f7ff fd01 	bl	800a9d8 <HAL_GetTick>
 800afd6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800afd8:	e010      	b.n	800affc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afe0:	d00c      	beq.n	800affc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <FLASH_WaitForLastOperation+0x38>
 800afe8:	f7ff fcf6 	bl	800a9d8 <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d201      	bcs.n	800affc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e019      	b.n	800b030 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800affc:	4b0f      	ldr	r3, [pc, #60]	@ (800b03c <FLASH_WaitForLastOperation+0x7c>)
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e8      	bne.n	800afda <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b008:	4b0c      	ldr	r3, [pc, #48]	@ (800b03c <FLASH_WaitForLastOperation+0x7c>)
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b014:	4b09      	ldr	r3, [pc, #36]	@ (800b03c <FLASH_WaitForLastOperation+0x7c>)
 800b016:	2201      	movs	r2, #1
 800b018:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800b01a:	4b08      	ldr	r3, [pc, #32]	@ (800b03c <FLASH_WaitForLastOperation+0x7c>)
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800b026:	f000 f8a5 	bl	800b174 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e000      	b.n	800b030 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800b02e:	2300      	movs	r3, #0

}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20001238 	.word	0x20001238
 800b03c:	40023c00 	.word	0x40023c00

0800b040 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b04c:	4b14      	ldr	r3, [pc, #80]	@ (800b0a0 <FLASH_Program_DoubleWord+0x60>)
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	4a13      	ldr	r2, [pc, #76]	@ (800b0a0 <FLASH_Program_DoubleWord+0x60>)
 800b052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b058:	4b11      	ldr	r3, [pc, #68]	@ (800b0a0 <FLASH_Program_DoubleWord+0x60>)
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	4a10      	ldr	r2, [pc, #64]	@ (800b0a0 <FLASH_Program_DoubleWord+0x60>)
 800b05e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b064:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a0 <FLASH_Program_DoubleWord+0x60>)
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	4a0d      	ldr	r2, [pc, #52]	@ (800b0a0 <FLASH_Program_DoubleWord+0x60>)
 800b06a:	f043 0301 	orr.w	r3, r3, #1
 800b06e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800b076:	f3bf 8f6f 	isb	sy
}
 800b07a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800b07c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b080:	f04f 0200 	mov.w	r2, #0
 800b084:	f04f 0300 	mov.w	r3, #0
 800b088:	000a      	movs	r2, r1
 800b08a:	2300      	movs	r3, #0
 800b08c:	68f9      	ldr	r1, [r7, #12]
 800b08e:	3104      	adds	r1, #4
 800b090:	4613      	mov	r3, r2
 800b092:	600b      	str	r3, [r1, #0]
}
 800b094:	bf00      	nop
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	40023c00 	.word	0x40023c00

0800b0a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e4 <FLASH_Program_Word+0x40>)
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b0e4 <FLASH_Program_Word+0x40>)
 800b0b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e4 <FLASH_Program_Word+0x40>)
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	4a09      	ldr	r2, [pc, #36]	@ (800b0e4 <FLASH_Program_Word+0x40>)
 800b0c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b0c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b0c6:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <FLASH_Program_Word+0x40>)
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	4a06      	ldr	r2, [pc, #24]	@ (800b0e4 <FLASH_Program_Word+0x40>)
 800b0cc:	f043 0301 	orr.w	r3, r3, #1
 800b0d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	601a      	str	r2, [r3, #0]
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	40023c00 	.word	0x40023c00

0800b0e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b0f4:	4b0d      	ldr	r3, [pc, #52]	@ (800b12c <FLASH_Program_HalfWord+0x44>)
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	4a0c      	ldr	r2, [pc, #48]	@ (800b12c <FLASH_Program_HalfWord+0x44>)
 800b0fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800b100:	4b0a      	ldr	r3, [pc, #40]	@ (800b12c <FLASH_Program_HalfWord+0x44>)
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	4a09      	ldr	r2, [pc, #36]	@ (800b12c <FLASH_Program_HalfWord+0x44>)
 800b106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b10a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b10c:	4b07      	ldr	r3, [pc, #28]	@ (800b12c <FLASH_Program_HalfWord+0x44>)
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	4a06      	ldr	r2, [pc, #24]	@ (800b12c <FLASH_Program_HalfWord+0x44>)
 800b112:	f043 0301 	orr.w	r3, r3, #1
 800b116:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	887a      	ldrh	r2, [r7, #2]
 800b11c:	801a      	strh	r2, [r3, #0]
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	40023c00 	.word	0x40023c00

0800b130 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b13c:	4b0c      	ldr	r3, [pc, #48]	@ (800b170 <FLASH_Program_Byte+0x40>)
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	4a0b      	ldr	r2, [pc, #44]	@ (800b170 <FLASH_Program_Byte+0x40>)
 800b142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800b148:	4b09      	ldr	r3, [pc, #36]	@ (800b170 <FLASH_Program_Byte+0x40>)
 800b14a:	4a09      	ldr	r2, [pc, #36]	@ (800b170 <FLASH_Program_Byte+0x40>)
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b150:	4b07      	ldr	r3, [pc, #28]	@ (800b170 <FLASH_Program_Byte+0x40>)
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	4a06      	ldr	r2, [pc, #24]	@ (800b170 <FLASH_Program_Byte+0x40>)
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	78fa      	ldrb	r2, [r7, #3]
 800b160:	701a      	strb	r2, [r3, #0]
}
 800b162:	bf00      	nop
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	40023c00 	.word	0x40023c00

0800b174 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800b178:	4b2f      	ldr	r3, [pc, #188]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f003 0310 	and.w	r3, r3, #16
 800b180:	2b00      	cmp	r3, #0
 800b182:	d008      	beq.n	800b196 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b184:	4b2d      	ldr	r3, [pc, #180]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	f043 0310 	orr.w	r3, r3, #16
 800b18c:	4a2b      	ldr	r2, [pc, #172]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b18e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800b190:	4b29      	ldr	r3, [pc, #164]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b192:	2210      	movs	r2, #16
 800b194:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800b196:	4b28      	ldr	r3, [pc, #160]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	f003 0320 	and.w	r3, r3, #32
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d008      	beq.n	800b1b4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b1a2:	4b26      	ldr	r3, [pc, #152]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	f043 0308 	orr.w	r3, r3, #8
 800b1aa:	4a24      	ldr	r2, [pc, #144]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1ac:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800b1ae:	4b22      	ldr	r3, [pc, #136]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800b1b4:	4b20      	ldr	r3, [pc, #128]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d008      	beq.n	800b1d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b1c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	f043 0304 	orr.w	r3, r3, #4
 800b1c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1ca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b1ce:	2240      	movs	r2, #64	@ 0x40
 800b1d0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800b1d2:	4b19      	ldr	r3, [pc, #100]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d008      	beq.n	800b1f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800b1de:	4b17      	ldr	r3, [pc, #92]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	f043 0302 	orr.w	r3, r3, #2
 800b1e6:	4a15      	ldr	r2, [pc, #84]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1e8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800b1ea:	4b13      	ldr	r3, [pc, #76]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b1ec:	2280      	movs	r2, #128	@ 0x80
 800b1ee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800b1f0:	4b11      	ldr	r3, [pc, #68]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d009      	beq.n	800b210 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b1fe:	69db      	ldr	r3, [r3, #28]
 800b200:	f043 0301 	orr.w	r3, r3, #1
 800b204:	4a0d      	ldr	r2, [pc, #52]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b206:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800b208:	4b0b      	ldr	r3, [pc, #44]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b20a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b20e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800b210:	4b09      	ldr	r3, [pc, #36]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	f003 0302 	and.w	r3, r3, #2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d008      	beq.n	800b22e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800b21c:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	f043 0320 	orr.w	r3, r3, #32
 800b224:	4a05      	ldr	r2, [pc, #20]	@ (800b23c <FLASH_SetErrorCode+0xc8>)
 800b226:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800b228:	4b03      	ldr	r3, [pc, #12]	@ (800b238 <FLASH_SetErrorCode+0xc4>)
 800b22a:	2202      	movs	r2, #2
 800b22c:	60da      	str	r2, [r3, #12]
  }
}
 800b22e:	bf00      	nop
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	40023c00 	.word	0x40023c00
 800b23c:	20001238 	.word	0x20001238

0800b240 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b24e:	4b31      	ldr	r3, [pc, #196]	@ (800b314 <HAL_FLASHEx_Erase+0xd4>)
 800b250:	7e1b      	ldrb	r3, [r3, #24]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d101      	bne.n	800b25a <HAL_FLASHEx_Erase+0x1a>
 800b256:	2302      	movs	r3, #2
 800b258:	e058      	b.n	800b30c <HAL_FLASHEx_Erase+0xcc>
 800b25a:	4b2e      	ldr	r3, [pc, #184]	@ (800b314 <HAL_FLASHEx_Erase+0xd4>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b260:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b264:	f7ff feac 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d148      	bne.n	800b304 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b278:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d115      	bne.n	800b2ae <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	b2da      	uxtb	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	4619      	mov	r1, r3
 800b28e:	4610      	mov	r0, r2
 800b290:	f000 f8d6 	bl	800b440 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b294:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b298:	f7ff fe92 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800b2a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b318 <HAL_FLASHEx_Erase+0xd8>)
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b318 <HAL_FLASHEx_Erase+0xd8>)
 800b2a6:	f023 0304 	bic.w	r3, r3, #4
 800b2aa:	6113      	str	r3, [r2, #16]
 800b2ac:	e028      	b.n	800b300 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60bb      	str	r3, [r7, #8]
 800b2b4:	e01c      	b.n	800b2f0 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	4619      	mov	r1, r3
 800b2be:	68b8      	ldr	r0, [r7, #8]
 800b2c0:	f000 f8e2 	bl	800b488 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b2c8:	f7ff fe7a 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800b2d0:	4b11      	ldr	r3, [pc, #68]	@ (800b318 <HAL_FLASHEx_Erase+0xd8>)
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	4a10      	ldr	r2, [pc, #64]	@ (800b318 <HAL_FLASHEx_Erase+0xd8>)
 800b2d6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800b2da:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	601a      	str	r2, [r3, #0]
          break;
 800b2e8:	e00a      	b.n	800b300 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	60bb      	str	r3, [r7, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68da      	ldr	r2, [r3, #12]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d3da      	bcc.n	800b2b6 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b300:	f000 f9fe 	bl	800b700 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b304:	4b03      	ldr	r3, [pc, #12]	@ (800b314 <HAL_FLASHEx_Erase+0xd4>)
 800b306:	2200      	movs	r2, #0
 800b308:	761a      	strb	r2, [r3, #24]

  return status;
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20001238 	.word	0x20001238
 800b318:	40023c00 	.word	0x40023c00

0800b31c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b328:	4b32      	ldr	r3, [pc, #200]	@ (800b3f4 <HAL_FLASHEx_OBProgram+0xd8>)
 800b32a:	7e1b      	ldrb	r3, [r3, #24]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d101      	bne.n	800b334 <HAL_FLASHEx_OBProgram+0x18>
 800b330:	2302      	movs	r3, #2
 800b332:	e05b      	b.n	800b3ec <HAL_FLASHEx_OBProgram+0xd0>
 800b334:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f4 <HAL_FLASHEx_OBProgram+0xd8>)
 800b336:	2201      	movs	r2, #1
 800b338:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d018      	beq.n	800b378 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d10a      	bne.n	800b364 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	689a      	ldr	r2, [r3, #8]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	4619      	mov	r1, r3
 800b358:	4610      	mov	r0, r2
 800b35a:	f000 f8dd 	bl	800b518 <FLASH_OB_EnableWRP>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]
 800b362:	e009      	b.n	800b378 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	4619      	mov	r1, r3
 800b36e:	4610      	mov	r0, r2
 800b370:	f000 f8f4 	bl	800b55c <FLASH_OB_DisableWRP>
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d007      	beq.n	800b394 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 f906 	bl	800b59c <FLASH_OB_RDP_LevelConfig>
 800b390:	4603      	mov	r3, r0
 800b392:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0304 	and.w	r3, r3, #4
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d013      	beq.n	800b3c8 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7e1b      	ldrb	r3, [r3, #24]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800b3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b2:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800b3b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f000 f906 	bl	800b5d0 <FLASH_OB_UserConfig>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0308 	and.w	r3, r3, #8
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d007      	beq.n	800b3e4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 f926 	bl	800b62c <FLASH_OB_BOR_LevelConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b3e4:	4b03      	ldr	r3, [pc, #12]	@ (800b3f4 <HAL_FLASHEx_OBProgram+0xd8>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	761a      	strb	r2, [r3, #24]

  return status;
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20001238 	.word	0x20001238

0800b3f8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	220f      	movs	r2, #15
 800b404:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800b406:	f000 f93f 	bl	800b688 <FLASH_OB_GetWRP>
 800b40a:	4603      	mov	r3, r0
 800b40c:	461a      	mov	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800b412:	f000 f945 	bl	800b6a0 <FLASH_OB_GetRDP>
 800b416:	4603      	mov	r3, r0
 800b418:	461a      	mov	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800b41e:	f000 f923 	bl	800b668 <FLASH_OB_GetUser>
 800b422:	4603      	mov	r3, r0
 800b424:	461a      	mov	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800b42a:	f000 f959 	bl	800b6e0 <FLASH_OB_GetBOR>
 800b42e:	4603      	mov	r3, r0
 800b430:	461a      	mov	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	615a      	str	r2, [r3, #20]
}
 800b436:	bf00      	nop
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	6039      	str	r1, [r7, #0]
 800b44a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b44c:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <FLASH_MassErase+0x44>)
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	4a0c      	ldr	r2, [pc, #48]	@ (800b484 <FLASH_MassErase+0x44>)
 800b452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800b458:	4b0a      	ldr	r3, [pc, #40]	@ (800b484 <FLASH_MassErase+0x44>)
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	4a09      	ldr	r2, [pc, #36]	@ (800b484 <FLASH_MassErase+0x44>)
 800b45e:	f043 0304 	orr.w	r3, r3, #4
 800b462:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800b464:	4b07      	ldr	r3, [pc, #28]	@ (800b484 <FLASH_MassErase+0x44>)
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	4313      	orrs	r3, r2
 800b46e:	4a05      	ldr	r2, [pc, #20]	@ (800b484 <FLASH_MassErase+0x44>)
 800b470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b474:	6113      	str	r3, [r2, #16]
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	40023c00 	.word	0x40023c00

0800b488 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	e010      	b.n	800b4c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d103      	bne.n	800b4b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b4aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e009      	b.n	800b4c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d103      	bne.n	800b4c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b4b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e002      	b.n	800b4c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b4c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b4c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b4c6:	4b13      	ldr	r3, [pc, #76]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	4a12      	ldr	r2, [pc, #72]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800b4d2:	4b10      	ldr	r3, [pc, #64]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4d4:	691a      	ldr	r2, [r3, #16]
 800b4d6:	490f      	ldr	r1, [pc, #60]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b4de:	4b0d      	ldr	r3, [pc, #52]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b4e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4ec:	691a      	ldr	r2, [r3, #16]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	00db      	lsls	r3, r3, #3
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	4a07      	ldr	r2, [pc, #28]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4f6:	f043 0302 	orr.w	r3, r3, #2
 800b4fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b4fc:	4b05      	ldr	r3, [pc, #20]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	4a04      	ldr	r2, [pc, #16]	@ (800b514 <FLASH_Erase_Sector+0x8c>)
 800b502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b506:	6113      	str	r3, [r2, #16]
}
 800b508:	bf00      	nop
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40023c00 	.word	0x40023c00

0800b518 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b526:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b52a:	f7ff fd49 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b532:	7bfb      	ldrb	r3, [r7, #15]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800b538:	4b07      	ldr	r3, [pc, #28]	@ (800b558 <FLASH_OB_EnableWRP+0x40>)
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	b29b      	uxth	r3, r3
 800b542:	43db      	mvns	r3, r3
 800b544:	b29b      	uxth	r3, r3
 800b546:	4904      	ldr	r1, [pc, #16]	@ (800b558 <FLASH_OB_EnableWRP+0x40>)
 800b548:	4013      	ands	r3, r2
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	40023c16 	.word	0x40023c16

0800b55c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b56a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b56e:	f7ff fd27 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d108      	bne.n	800b58e <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800b57c:	4b06      	ldr	r3, [pc, #24]	@ (800b598 <FLASH_OB_DisableWRP+0x3c>)
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	b29b      	uxth	r3, r3
 800b586:	4904      	ldr	r1, [pc, #16]	@ (800b598 <FLASH_OB_DisableWRP+0x3c>)
 800b588:	4313      	orrs	r3, r2
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800b58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	40023c16 	.word	0x40023c16

0800b59c <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b5aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b5ae:	f7ff fd07 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800b5bc:	4a03      	ldr	r2, [pc, #12]	@ (800b5cc <FLASH_OB_RDP_LevelConfig+0x30>)
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	40023c15 	.word	0x40023c15

0800b5d0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	71fb      	strb	r3, [r7, #7]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	71bb      	strb	r3, [r7, #6]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp;
  HAL_StatusTypeDef status = HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b5e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b5ea:	f7ff fce9 	bl	800afc0 <FLASH_WaitForLastOperation>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d111      	bne.n	800b61c <FLASH_OB_UserConfig+0x4c>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b628 <FLASH_OB_UserConfig+0x58>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 031f 	and.w	r3, r3, #31
 800b602:	73bb      	strb	r3, [r7, #14]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800b604:	79ba      	ldrb	r2, [r7, #6]
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	4313      	orrs	r3, r2
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	797b      	ldrb	r3, [r7, #5]
 800b60e:	4313      	orrs	r3, r2
 800b610:	b2da      	uxtb	r2, r3
 800b612:	4905      	ldr	r1, [pc, #20]	@ (800b628 <FLASH_OB_UserConfig+0x58>)
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	4313      	orrs	r3, r2
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	40023c14 	.word	0x40023c14

0800b62c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800b636:	4b0b      	ldr	r3, [pc, #44]	@ (800b664 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	4a09      	ldr	r2, [pc, #36]	@ (800b664 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b63e:	f023 030c 	bic.w	r3, r3, #12
 800b642:	b2db      	uxtb	r3, r3
 800b644:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800b646:	4b07      	ldr	r3, [pc, #28]	@ (800b664 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	4905      	ldr	r1, [pc, #20]	@ (800b664 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	4313      	orrs	r3, r2
 800b652:	b2db      	uxtb	r3, r3
 800b654:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800b656:	2300      	movs	r3, #0

}
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	40023c14 	.word	0x40023c14

0800b668 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800b66c:	4b05      	ldr	r3, [pc, #20]	@ (800b684 <FLASH_OB_GetUser+0x1c>)
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	f023 031f 	bic.w	r3, r3, #31
 800b676:	b2db      	uxtb	r3, r3
}
 800b678:	4618      	mov	r0, r3
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	40023c00 	.word	0x40023c00

0800b688 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800b688:	b480      	push	{r7}
 800b68a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800b68c:	4b03      	ldr	r3, [pc, #12]	@ (800b69c <FLASH_OB_GetWRP+0x14>)
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	b29b      	uxth	r3, r3
}
 800b692:	4618      	mov	r0, r3
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	40023c16 	.word	0x40023c16

0800b6a0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800b6a6:	23aa      	movs	r3, #170	@ 0xaa
 800b6a8:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800b6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b6dc <FLASH_OB_GetRDP+0x3c>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2bcc      	cmp	r3, #204	@ 0xcc
 800b6b2:	d102      	bne.n	800b6ba <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800b6b4:	23cc      	movs	r3, #204	@ 0xcc
 800b6b6:	71fb      	strb	r3, [r7, #7]
 800b6b8:	e009      	b.n	800b6ce <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800b6ba:	4b08      	ldr	r3, [pc, #32]	@ (800b6dc <FLASH_OB_GetRDP+0x3c>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2baa      	cmp	r3, #170	@ 0xaa
 800b6c2:	d102      	bne.n	800b6ca <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800b6c4:	23aa      	movs	r3, #170	@ 0xaa
 800b6c6:	71fb      	strb	r3, [r7, #7]
 800b6c8:	e001      	b.n	800b6ce <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800b6ca:	2355      	movs	r3, #85	@ 0x55
 800b6cc:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	40023c15 	.word	0x40023c15

0800b6e0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800b6e4:	4b05      	ldr	r3, [pc, #20]	@ (800b6fc <FLASH_OB_GetBOR+0x1c>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	f003 030c 	and.w	r3, r3, #12
 800b6ee:	b2db      	uxtb	r3, r3
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	40023c14 	.word	0x40023c14

0800b700 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b700:	b480      	push	{r7}
 800b702:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800b704:	4b20      	ldr	r3, [pc, #128]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d017      	beq.n	800b740 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b710:	4b1d      	ldr	r3, [pc, #116]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1c      	ldr	r2, [pc, #112]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b716:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b71a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b71c:	4b1a      	ldr	r3, [pc, #104]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a19      	ldr	r2, [pc, #100]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b722:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	4b17      	ldr	r3, [pc, #92]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a16      	ldr	r2, [pc, #88]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b72e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b732:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b734:	4b14      	ldr	r3, [pc, #80]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a13      	ldr	r2, [pc, #76]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b73a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b73e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b740:	4b11      	ldr	r3, [pc, #68]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d017      	beq.n	800b77c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b74c:	4b0e      	ldr	r3, [pc, #56]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a0d      	ldr	r2, [pc, #52]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b756:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b758:	4b0b      	ldr	r3, [pc, #44]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a0a      	ldr	r2, [pc, #40]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b75e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	4b08      	ldr	r3, [pc, #32]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a07      	ldr	r2, [pc, #28]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b76a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b76e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b770:	4b05      	ldr	r3, [pc, #20]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a04      	ldr	r2, [pc, #16]	@ (800b788 <FLASH_FlushCaches+0x88>)
 800b776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b77a:	6013      	str	r3, [r2, #0]
  }
}
 800b77c:	bf00      	nop
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	40023c00 	.word	0x40023c00

0800b78c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b089      	sub	sp, #36	@ 0x24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e159      	b.n	800ba5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b7bc:	693a      	ldr	r2, [r7, #16]
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	f040 8148 	bne.w	800ba56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d005      	beq.n	800b7de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d130      	bne.n	800b840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	2203      	movs	r2, #3
 800b7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ee:	43db      	mvns	r3, r3
 800b7f0:	69ba      	ldr	r2, [r7, #24]
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68da      	ldr	r2, [r3, #12]
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b802:	69ba      	ldr	r2, [r7, #24]
 800b804:	4313      	orrs	r3, r2
 800b806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b814:	2201      	movs	r2, #1
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	fa02 f303 	lsl.w	r3, r2, r3
 800b81c:	43db      	mvns	r3, r3
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	4013      	ands	r3, r2
 800b822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	091b      	lsrs	r3, r3, #4
 800b82a:	f003 0201 	and.w	r2, r3, #1
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	fa02 f303 	lsl.w	r3, r2, r3
 800b834:	69ba      	ldr	r2, [r7, #24]
 800b836:	4313      	orrs	r3, r2
 800b838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f003 0303 	and.w	r3, r3, #3
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d017      	beq.n	800b87c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	2203      	movs	r2, #3
 800b858:	fa02 f303 	lsl.w	r3, r2, r3
 800b85c:	43db      	mvns	r3, r3
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	4013      	ands	r3, r2
 800b862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	005b      	lsls	r3, r3, #1
 800b86c:	fa02 f303 	lsl.w	r3, r2, r3
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	4313      	orrs	r3, r2
 800b874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f003 0303 	and.w	r3, r3, #3
 800b884:	2b02      	cmp	r3, #2
 800b886:	d123      	bne.n	800b8d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	08da      	lsrs	r2, r3, #3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3208      	adds	r2, #8
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	f003 0307 	and.w	r3, r3, #7
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	220f      	movs	r2, #15
 800b8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a4:	43db      	mvns	r3, r3
 800b8a6:	69ba      	ldr	r2, [r7, #24]
 800b8a8:	4013      	ands	r3, r2
 800b8aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	08da      	lsrs	r2, r3, #3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3208      	adds	r2, #8
 800b8ca:	69b9      	ldr	r1, [r7, #24]
 800b8cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	2203      	movs	r2, #3
 800b8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	69ba      	ldr	r2, [r7, #24]
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	f003 0203 	and.w	r2, r3, #3
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 80a2 	beq.w	800ba56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b912:	2300      	movs	r3, #0
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	4b57      	ldr	r3, [pc, #348]	@ (800ba74 <HAL_GPIO_Init+0x2e8>)
 800b918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b91a:	4a56      	ldr	r2, [pc, #344]	@ (800ba74 <HAL_GPIO_Init+0x2e8>)
 800b91c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b920:	6453      	str	r3, [r2, #68]	@ 0x44
 800b922:	4b54      	ldr	r3, [pc, #336]	@ (800ba74 <HAL_GPIO_Init+0x2e8>)
 800b924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b92e:	4a52      	ldr	r2, [pc, #328]	@ (800ba78 <HAL_GPIO_Init+0x2ec>)
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	089b      	lsrs	r3, r3, #2
 800b934:	3302      	adds	r3, #2
 800b936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b93a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	f003 0303 	and.w	r3, r3, #3
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	220f      	movs	r2, #15
 800b946:	fa02 f303 	lsl.w	r3, r2, r3
 800b94a:	43db      	mvns	r3, r3
 800b94c:	69ba      	ldr	r2, [r7, #24]
 800b94e:	4013      	ands	r3, r2
 800b950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a49      	ldr	r2, [pc, #292]	@ (800ba7c <HAL_GPIO_Init+0x2f0>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d019      	beq.n	800b98e <HAL_GPIO_Init+0x202>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a48      	ldr	r2, [pc, #288]	@ (800ba80 <HAL_GPIO_Init+0x2f4>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d013      	beq.n	800b98a <HAL_GPIO_Init+0x1fe>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a47      	ldr	r2, [pc, #284]	@ (800ba84 <HAL_GPIO_Init+0x2f8>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d00d      	beq.n	800b986 <HAL_GPIO_Init+0x1fa>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a46      	ldr	r2, [pc, #280]	@ (800ba88 <HAL_GPIO_Init+0x2fc>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d007      	beq.n	800b982 <HAL_GPIO_Init+0x1f6>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a45      	ldr	r2, [pc, #276]	@ (800ba8c <HAL_GPIO_Init+0x300>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d101      	bne.n	800b97e <HAL_GPIO_Init+0x1f2>
 800b97a:	2304      	movs	r3, #4
 800b97c:	e008      	b.n	800b990 <HAL_GPIO_Init+0x204>
 800b97e:	2307      	movs	r3, #7
 800b980:	e006      	b.n	800b990 <HAL_GPIO_Init+0x204>
 800b982:	2303      	movs	r3, #3
 800b984:	e004      	b.n	800b990 <HAL_GPIO_Init+0x204>
 800b986:	2302      	movs	r3, #2
 800b988:	e002      	b.n	800b990 <HAL_GPIO_Init+0x204>
 800b98a:	2301      	movs	r3, #1
 800b98c:	e000      	b.n	800b990 <HAL_GPIO_Init+0x204>
 800b98e:	2300      	movs	r3, #0
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	f002 0203 	and.w	r2, r2, #3
 800b996:	0092      	lsls	r2, r2, #2
 800b998:	4093      	lsls	r3, r2
 800b99a:	69ba      	ldr	r2, [r7, #24]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9a0:	4935      	ldr	r1, [pc, #212]	@ (800ba78 <HAL_GPIO_Init+0x2ec>)
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	089b      	lsrs	r3, r3, #2
 800b9a6:	3302      	adds	r3, #2
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b9ae:	4b38      	ldr	r3, [pc, #224]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	43db      	mvns	r3, r3
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b9d2:	4a2f      	ldr	r2, [pc, #188]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b9d8:	4b2d      	ldr	r3, [pc, #180]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	43db      	mvns	r3, r3
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b9fc:	4a24      	ldr	r2, [pc, #144]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ba02:	4b23      	ldr	r3, [pc, #140]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	43db      	mvns	r3, r3
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	4013      	ands	r3, r2
 800ba10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ba26:	4a1a      	ldr	r2, [pc, #104]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ba2c:	4b18      	ldr	r3, [pc, #96]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	43db      	mvns	r3, r3
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	4013      	ands	r3, r2
 800ba3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ba48:	69ba      	ldr	r2, [r7, #24]
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ba50:	4a0f      	ldr	r2, [pc, #60]	@ (800ba90 <HAL_GPIO_Init+0x304>)
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	61fb      	str	r3, [r7, #28]
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	2b0f      	cmp	r3, #15
 800ba60:	f67f aea2 	bls.w	800b7a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop
 800ba68:	3724      	adds	r7, #36	@ 0x24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	40023800 	.word	0x40023800
 800ba78:	40013800 	.word	0x40013800
 800ba7c:	40020000 	.word	0x40020000
 800ba80:	40020400 	.word	0x40020400
 800ba84:	40020800 	.word	0x40020800
 800ba88:	40020c00 	.word	0x40020c00
 800ba8c:	40021000 	.word	0x40021000
 800ba90:	40013c00 	.word	0x40013c00

0800ba94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	691a      	ldr	r2, [r3, #16]
 800baa4:	887b      	ldrh	r3, [r7, #2]
 800baa6:	4013      	ands	r3, r2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
 800bab0:	e001      	b.n	800bab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bab2:	2300      	movs	r3, #0
 800bab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	807b      	strh	r3, [r7, #2]
 800bad0:	4613      	mov	r3, r2
 800bad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bad4:	787b      	ldrb	r3, [r7, #1]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bada:	887a      	ldrh	r2, [r7, #2]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bae0:	e003      	b.n	800baea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bae2:	887b      	ldrh	r3, [r7, #2]
 800bae4:	041a      	lsls	r2, r3, #16
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	619a      	str	r2, [r3, #24]
}
 800baea:	bf00      	nop
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
	...

0800baf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bb02:	4b08      	ldr	r3, [pc, #32]	@ (800bb24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb04:	695a      	ldr	r2, [r3, #20]
 800bb06:	88fb      	ldrh	r3, [r7, #6]
 800bb08:	4013      	ands	r3, r2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d006      	beq.n	800bb1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bb0e:	4a05      	ldr	r2, [pc, #20]	@ (800bb24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb10:	88fb      	ldrh	r3, [r7, #6]
 800bb12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bb14:	88fb      	ldrh	r3, [r7, #6]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 f806 	bl	800bb28 <HAL_GPIO_EXTI_Callback>
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	40013c00 	.word	0x40013c00

0800bb28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bb32:	bf00      	nop
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
	...

0800bb40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e12b      	b.n	800bdaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7fd ff8c 	bl	8009a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2224      	movs	r2, #36	@ 0x24
 800bb70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 0201 	bic.w	r2, r2, #1
 800bb82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bba4:	f003 fa4a 	bl	800f03c <HAL_RCC_GetPCLK1Freq>
 800bba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	4a81      	ldr	r2, [pc, #516]	@ (800bdb4 <HAL_I2C_Init+0x274>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d807      	bhi.n	800bbc4 <HAL_I2C_Init+0x84>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	4a80      	ldr	r2, [pc, #512]	@ (800bdb8 <HAL_I2C_Init+0x278>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	bf94      	ite	ls
 800bbbc:	2301      	movls	r3, #1
 800bbbe:	2300      	movhi	r3, #0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	e006      	b.n	800bbd2 <HAL_I2C_Init+0x92>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4a7d      	ldr	r2, [pc, #500]	@ (800bdbc <HAL_I2C_Init+0x27c>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	bf94      	ite	ls
 800bbcc:	2301      	movls	r3, #1
 800bbce:	2300      	movhi	r3, #0
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e0e7      	b.n	800bdaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	4a78      	ldr	r2, [pc, #480]	@ (800bdc0 <HAL_I2C_Init+0x280>)
 800bbde:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe2:	0c9b      	lsrs	r3, r3, #18
 800bbe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	430a      	orrs	r2, r1
 800bbf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6a1b      	ldr	r3, [r3, #32]
 800bc00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4a6a      	ldr	r2, [pc, #424]	@ (800bdb4 <HAL_I2C_Init+0x274>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d802      	bhi.n	800bc14 <HAL_I2C_Init+0xd4>
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	3301      	adds	r3, #1
 800bc12:	e009      	b.n	800bc28 <HAL_I2C_Init+0xe8>
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bc1a:	fb02 f303 	mul.w	r3, r2, r3
 800bc1e:	4a69      	ldr	r2, [pc, #420]	@ (800bdc4 <HAL_I2C_Init+0x284>)
 800bc20:	fba2 2303 	umull	r2, r3, r2, r3
 800bc24:	099b      	lsrs	r3, r3, #6
 800bc26:	3301      	adds	r3, #1
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	6812      	ldr	r2, [r2, #0]
 800bc2c:	430b      	orrs	r3, r1
 800bc2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800bc3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	495c      	ldr	r1, [pc, #368]	@ (800bdb4 <HAL_I2C_Init+0x274>)
 800bc44:	428b      	cmp	r3, r1
 800bc46:	d819      	bhi.n	800bc7c <HAL_I2C_Init+0x13c>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	1e59      	subs	r1, r3, #1
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc56:	1c59      	adds	r1, r3, #1
 800bc58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bc5c:	400b      	ands	r3, r1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00a      	beq.n	800bc78 <HAL_I2C_Init+0x138>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	1e59      	subs	r1, r3, #1
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc70:	3301      	adds	r3, #1
 800bc72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc76:	e051      	b.n	800bd1c <HAL_I2C_Init+0x1dc>
 800bc78:	2304      	movs	r3, #4
 800bc7a:	e04f      	b.n	800bd1c <HAL_I2C_Init+0x1dc>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d111      	bne.n	800bca8 <HAL_I2C_Init+0x168>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	1e58      	subs	r0, r3, #1
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6859      	ldr	r1, [r3, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	440b      	add	r3, r1
 800bc92:	fbb0 f3f3 	udiv	r3, r0, r3
 800bc96:	3301      	adds	r3, #1
 800bc98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bf0c      	ite	eq
 800bca0:	2301      	moveq	r3, #1
 800bca2:	2300      	movne	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	e012      	b.n	800bcce <HAL_I2C_Init+0x18e>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	1e58      	subs	r0, r3, #1
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6859      	ldr	r1, [r3, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	440b      	add	r3, r1
 800bcb6:	0099      	lsls	r1, r3, #2
 800bcb8:	440b      	add	r3, r1
 800bcba:	fbb0 f3f3 	udiv	r3, r0, r3
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	bf0c      	ite	eq
 800bcc8:	2301      	moveq	r3, #1
 800bcca:	2300      	movne	r3, #0
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <HAL_I2C_Init+0x196>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e022      	b.n	800bd1c <HAL_I2C_Init+0x1dc>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10e      	bne.n	800bcfc <HAL_I2C_Init+0x1bc>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1e58      	subs	r0, r3, #1
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6859      	ldr	r1, [r3, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	440b      	add	r3, r1
 800bcec:	fbb0 f3f3 	udiv	r3, r0, r3
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcfa:	e00f      	b.n	800bd1c <HAL_I2C_Init+0x1dc>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	1e58      	subs	r0, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6859      	ldr	r1, [r3, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	0099      	lsls	r1, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd12:	3301      	adds	r3, #1
 800bd14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	6809      	ldr	r1, [r1, #0]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	69da      	ldr	r2, [r3, #28]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	431a      	orrs	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800bd4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6911      	ldr	r1, [r2, #16]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	68d2      	ldr	r2, [r2, #12]
 800bd56:	4311      	orrs	r1, r2
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6812      	ldr	r2, [r2, #0]
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695a      	ldr	r2, [r3, #20]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	431a      	orrs	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f042 0201 	orr.w	r2, r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2220      	movs	r2, #32
 800bd96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	000186a0 	.word	0x000186a0
 800bdb8:	001e847f 	.word	0x001e847f
 800bdbc:	003d08ff 	.word	0x003d08ff
 800bdc0:	431bde83 	.word	0x431bde83
 800bdc4:	10624dd3 	.word	0x10624dd3

0800bdc8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	695b      	ldr	r3, [r3, #20]
 800bdd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdda:	2b80      	cmp	r3, #128	@ 0x80
 800bddc:	d103      	bne.n	800bde6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2200      	movs	r2, #0
 800bde4:	611a      	str	r2, [r3, #16]
  }
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	607a      	str	r2, [r7, #4]
 800bdfe:	461a      	mov	r2, r3
 800be00:	460b      	mov	r3, r1
 800be02:	817b      	strh	r3, [r7, #10]
 800be04:	4613      	mov	r3, r2
 800be06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800be08:	f7fe fde6 	bl	800a9d8 <HAL_GetTick>
 800be0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b20      	cmp	r3, #32
 800be18:	f040 80e0 	bne.w	800bfdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	2319      	movs	r3, #25
 800be22:	2201      	movs	r2, #1
 800be24:	4970      	ldr	r1, [pc, #448]	@ (800bfe8 <HAL_I2C_Master_Transmit+0x1f4>)
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f002 fa14 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800be32:	2302      	movs	r3, #2
 800be34:	e0d3      	b.n	800bfde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d101      	bne.n	800be44 <HAL_I2C_Master_Transmit+0x50>
 800be40:	2302      	movs	r3, #2
 800be42:	e0cc      	b.n	800bfde <HAL_I2C_Master_Transmit+0x1ea>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b01      	cmp	r3, #1
 800be58:	d007      	beq.n	800be6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f042 0201 	orr.w	r2, r2, #1
 800be68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2221      	movs	r2, #33	@ 0x21
 800be7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2210      	movs	r2, #16
 800be86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	893a      	ldrh	r2, [r7, #8]
 800be9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	4a50      	ldr	r2, [pc, #320]	@ (800bfec <HAL_I2C_Master_Transmit+0x1f8>)
 800beaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800beac:	8979      	ldrh	r1, [r7, #10]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	6a3a      	ldr	r2, [r7, #32]
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f001 ffd6 	bl	800de64 <I2C_MasterRequestWrite>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e08d      	b.n	800bfde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bec2:	2300      	movs	r3, #0
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	613b      	str	r3, [r7, #16]
 800bed6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bed8:	e066      	b.n	800bfa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	6a39      	ldr	r1, [r7, #32]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f002 fad2 	bl	800e488 <I2C_WaitOnTXEFlagUntilTimeout>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00d      	beq.n	800bf06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beee:	2b04      	cmp	r3, #4
 800bef0:	d107      	bne.n	800bf02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	e06b      	b.n	800bfde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	3b01      	subs	r3, #1
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d11b      	bne.n	800bf7c <HAL_I2C_Master_Transmit+0x188>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d017      	beq.n	800bf7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf50:	781a      	ldrb	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf5c:	1c5a      	adds	r2, r3, #1
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf74:	3b01      	subs	r3, #1
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	6a39      	ldr	r1, [r7, #32]
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f002 fac9 	bl	800e518 <I2C_WaitOnBTFFlagUntilTimeout>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00d      	beq.n	800bfa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d107      	bne.n	800bfa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e01a      	b.n	800bfde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d194      	bne.n	800beda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2220      	movs	r2, #32
 800bfc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e000      	b.n	800bfde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bfdc:	2302      	movs	r3, #2
  }
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	00100002 	.word	0x00100002
 800bfec:	ffff0000 	.word	0xffff0000

0800bff0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08c      	sub	sp, #48	@ 0x30
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	607a      	str	r2, [r7, #4]
 800bffa:	461a      	mov	r2, r3
 800bffc:	460b      	mov	r3, r1
 800bffe:	817b      	strh	r3, [r7, #10]
 800c000:	4613      	mov	r3, r2
 800c002:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c004:	f7fe fce8 	bl	800a9d8 <HAL_GetTick>
 800c008:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b20      	cmp	r3, #32
 800c014:	f040 8217 	bne.w	800c446 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2319      	movs	r3, #25
 800c01e:	2201      	movs	r2, #1
 800c020:	497c      	ldr	r1, [pc, #496]	@ (800c214 <HAL_I2C_Master_Receive+0x224>)
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f002 f916 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c02e:	2302      	movs	r3, #2
 800c030:	e20a      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_I2C_Master_Receive+0x50>
 800c03c:	2302      	movs	r3, #2
 800c03e:	e203      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b01      	cmp	r3, #1
 800c054:	d007      	beq.n	800c066 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f042 0201 	orr.w	r2, r2, #1
 800c064:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c074:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2222      	movs	r2, #34	@ 0x22
 800c07a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2210      	movs	r2, #16
 800c082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	893a      	ldrh	r2, [r7, #8]
 800c096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	4a5c      	ldr	r2, [pc, #368]	@ (800c218 <HAL_I2C_Master_Receive+0x228>)
 800c0a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c0a8:	8979      	ldrh	r1, [r7, #10]
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f001 ff5a 	bl	800df68 <I2C_MasterRequestRead>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e1c4      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d113      	bne.n	800c0ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	623b      	str	r3, [r7, #32]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	623b      	str	r3, [r7, #32]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	e198      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d11b      	bne.n	800c12e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c106:	2300      	movs	r3, #0
 800c108:	61fb      	str	r3, [r7, #28]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	61fb      	str	r3, [r7, #28]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	61fb      	str	r3, [r7, #28]
 800c11a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	e178      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c132:	2b02      	cmp	r3, #2
 800c134:	d11b      	bne.n	800c16e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c144:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c156:	2300      	movs	r3, #0
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	61bb      	str	r3, [r7, #24]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	61bb      	str	r3, [r7, #24]
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	e158      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c17c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c17e:	2300      	movs	r3, #0
 800c180:	617b      	str	r3, [r7, #20]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	617b      	str	r3, [r7, #20]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c194:	e144      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	f200 80f1 	bhi.w	800c382 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d123      	bne.n	800c1f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f002 fa2d 	bl	800e60c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e145      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	691a      	ldr	r2, [r3, #16]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c6:	b2d2      	uxtb	r2, r2
 800c1c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c1ee:	e117      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d14e      	bne.n	800c296 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fe:	2200      	movs	r2, #0
 800c200:	4906      	ldr	r1, [pc, #24]	@ (800c21c <HAL_I2C_Master_Receive+0x22c>)
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f002 f826 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d008      	beq.n	800c220 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e11a      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
 800c212:	bf00      	nop
 800c214:	00100002 	.word	0x00100002
 800c218:	ffff0000 	.word	0xffff0000
 800c21c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c22e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	691a      	ldr	r2, [r3, #16]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c24c:	3b01      	subs	r3, #1
 800c24e:	b29a      	uxth	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c258:	b29b      	uxth	r3, r3
 800c25a:	3b01      	subs	r3, #1
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26c:	b2d2      	uxtb	r2, r2
 800c26e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c274:	1c5a      	adds	r2, r3, #1
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c27e:	3b01      	subs	r3, #1
 800c280:	b29a      	uxth	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	3b01      	subs	r3, #1
 800c28e:	b29a      	uxth	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c294:	e0c4      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	2200      	movs	r2, #0
 800c29e:	496c      	ldr	r1, [pc, #432]	@ (800c450 <HAL_I2C_Master_Receive+0x460>)
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f001 ffd7 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e0cb      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	691a      	ldr	r2, [r3, #16]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ca:	b2d2      	uxtb	r2, r2
 800c2cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4955      	ldr	r1, [pc, #340]	@ (800c450 <HAL_I2C_Master_Receive+0x460>)
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f001 ffa9 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e09d      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c31a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	691a      	ldr	r2, [r3, #16]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32e:	1c5a      	adds	r2, r3, #1
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c338:	3b01      	subs	r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c344:	b29b      	uxth	r3, r3
 800c346:	3b01      	subs	r3, #1
 800c348:	b29a      	uxth	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	691a      	ldr	r2, [r3, #16]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c358:	b2d2      	uxtb	r2, r2
 800c35a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c360:	1c5a      	adds	r2, r3, #1
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c36a:	3b01      	subs	r3, #1
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c376:	b29b      	uxth	r3, r3
 800c378:	3b01      	subs	r3, #1
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c380:	e04e      	b.n	800c420 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c384:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f002 f940 	bl	800e60c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e058      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	691a      	ldr	r2, [r3, #16]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a0:	b2d2      	uxtb	r2, r2
 800c3a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	695b      	ldr	r3, [r3, #20]
 800c3ce:	f003 0304 	and.w	r3, r3, #4
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	d124      	bne.n	800c420 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d107      	bne.n	800c3ee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	691a      	ldr	r2, [r3, #16]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f8:	b2d2      	uxtb	r2, r2
 800c3fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c400:	1c5a      	adds	r2, r3, #1
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c40a:	3b01      	subs	r3, #1
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c416:	b29b      	uxth	r3, r3
 800c418:	3b01      	subs	r3, #1
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c424:	2b00      	cmp	r3, #0
 800c426:	f47f aeb6 	bne.w	800c196 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	e000      	b.n	800c448 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800c446:	2302      	movs	r3, #2
  }
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3728      	adds	r7, #40	@ 0x28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	00010004 	.word	0x00010004

0800c454 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08a      	sub	sp, #40	@ 0x28
 800c458:	af02      	add	r7, sp, #8
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	607a      	str	r2, [r7, #4]
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	460b      	mov	r3, r1
 800c462:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800c464:	f7fe fab8 	bl	800a9d8 <HAL_GetTick>
 800c468:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b20      	cmp	r3, #32
 800c478:	f040 8111 	bne.w	800c69e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	2319      	movs	r3, #25
 800c482:	2201      	movs	r2, #1
 800c484:	4988      	ldr	r1, [pc, #544]	@ (800c6a8 <HAL_I2C_IsDeviceReady+0x254>)
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f001 fee4 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800c492:	2302      	movs	r3, #2
 800c494:	e104      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d101      	bne.n	800c4a4 <HAL_I2C_IsDeviceReady+0x50>
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	e0fd      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d007      	beq.n	800c4ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f042 0201 	orr.w	r2, r2, #1
 800c4c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c4d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2224      	movs	r2, #36	@ 0x24
 800c4de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4a70      	ldr	r2, [pc, #448]	@ (800c6ac <HAL_I2C_IsDeviceReady+0x258>)
 800c4ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c4fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2200      	movs	r2, #0
 800c506:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f001 fea2 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00d      	beq.n	800c532 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c524:	d103      	bne.n	800c52e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c52c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800c52e:	2303      	movs	r3, #3
 800c530:	e0b6      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c532:	897b      	ldrh	r3, [r7, #10]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	461a      	mov	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c540:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800c542:	f7fe fa49 	bl	800a9d8 <HAL_GetTick>
 800c546:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	f003 0302 	and.w	r3, r3, #2
 800c552:	2b02      	cmp	r3, #2
 800c554:	bf0c      	ite	eq
 800c556:	2301      	moveq	r3, #1
 800c558:	2300      	movne	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c56c:	bf0c      	ite	eq
 800c56e:	2301      	moveq	r3, #1
 800c570:	2300      	movne	r3, #0
 800c572:	b2db      	uxtb	r3, r3
 800c574:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800c576:	e025      	b.n	800c5c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c578:	f7fe fa2e 	bl	800a9d8 <HAL_GetTick>
 800c57c:	4602      	mov	r2, r0
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d302      	bcc.n	800c58e <HAL_I2C_IsDeviceReady+0x13a>
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d103      	bne.n	800c596 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	22a0      	movs	r2, #160	@ 0xa0
 800c592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	bf0c      	ite	eq
 800c5a4:	2301      	moveq	r3, #1
 800c5a6:	2300      	movne	r3, #0
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5ba:	bf0c      	ite	eq
 800c5bc:	2301      	moveq	r3, #1
 800c5be:	2300      	movne	r3, #0
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2ba0      	cmp	r3, #160	@ 0xa0
 800c5ce:	d005      	beq.n	800c5dc <HAL_I2C_IsDeviceReady+0x188>
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d102      	bne.n	800c5dc <HAL_I2C_IsDeviceReady+0x188>
 800c5d6:	7dbb      	ldrb	r3, [r7, #22]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0cd      	beq.n	800c578 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	f003 0302 	and.w	r3, r3, #2
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d129      	bne.n	800c646 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c600:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c602:	2300      	movs	r3, #0
 800c604:	613b      	str	r3, [r7, #16]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	613b      	str	r3, [r7, #16]
 800c616:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	2319      	movs	r3, #25
 800c61e:	2201      	movs	r2, #1
 800c620:	4921      	ldr	r1, [pc, #132]	@ (800c6a8 <HAL_I2C_IsDeviceReady+0x254>)
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f001 fe16 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e036      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2220      	movs	r2, #32
 800c636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	e02c      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c654:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c65e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2319      	movs	r3, #25
 800c666:	2201      	movs	r2, #1
 800c668:	490f      	ldr	r1, [pc, #60]	@ (800c6a8 <HAL_I2C_IsDeviceReady+0x254>)
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f001 fdf2 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e012      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	3301      	adds	r3, #1
 800c67e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	429a      	cmp	r2, r3
 800c686:	f4ff af32 	bcc.w	800c4ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2220      	movs	r2, #32
 800c68e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e000      	b.n	800c6a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800c69e:	2302      	movs	r3, #2
  }
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	00100002 	.word	0x00100002
 800c6ac:	ffff0000 	.word	0xffff0000

0800c6b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c6d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
 800c6dc:	2b10      	cmp	r3, #16
 800c6de:	d003      	beq.n	800c6e8 <HAL_I2C_EV_IRQHandler+0x38>
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
 800c6e2:	2b40      	cmp	r3, #64	@ 0x40
 800c6e4:	f040 80b1 	bne.w	800c84a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10d      	bne.n	800c71e <HAL_I2C_EV_IRQHandler+0x6e>
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c708:	d003      	beq.n	800c712 <HAL_I2C_EV_IRQHandler+0x62>
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c710:	d101      	bne.n	800c716 <HAL_I2C_EV_IRQHandler+0x66>
 800c712:	2301      	movs	r3, #1
 800c714:	e000      	b.n	800c718 <HAL_I2C_EV_IRQHandler+0x68>
 800c716:	2300      	movs	r3, #0
 800c718:	2b01      	cmp	r3, #1
 800c71a:	f000 8114 	beq.w	800c946 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00b      	beq.n	800c740 <HAL_I2C_EV_IRQHandler+0x90>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d006      	beq.n	800c740 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f001 fff6 	bl	800e724 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fd76 	bl	800d22a <I2C_Master_SB>
 800c73e:	e083      	b.n	800c848 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	f003 0308 	and.w	r3, r3, #8
 800c746:	2b00      	cmp	r3, #0
 800c748:	d008      	beq.n	800c75c <HAL_I2C_EV_IRQHandler+0xac>
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c750:	2b00      	cmp	r3, #0
 800c752:	d003      	beq.n	800c75c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fdee 	bl	800d336 <I2C_Master_ADD10>
 800c75a:	e075      	b.n	800c848 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d008      	beq.n	800c778 <HAL_I2C_EV_IRQHandler+0xc8>
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fe0a 	bl	800d38a <I2C_Master_ADDR>
 800c776:	e067      	b.n	800c848 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	f003 0304 	and.w	r3, r3, #4
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d036      	beq.n	800c7f0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c78c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c790:	f000 80db 	beq.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00d      	beq.n	800c7ba <HAL_I2C_EV_IRQHandler+0x10a>
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d008      	beq.n	800c7ba <HAL_I2C_EV_IRQHandler+0x10a>
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f003 0304 	and.w	r3, r3, #4
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d103      	bne.n	800c7ba <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f9d6 	bl	800cb64 <I2C_MasterTransmit_TXE>
 800c7b8:	e046      	b.n	800c848 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 80c2 	beq.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 80bc 	beq.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	2b21      	cmp	r3, #33	@ 0x21
 800c7d6:	d103      	bne.n	800c7e0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fa5f 	bl	800cc9c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c7de:	e0b4      	b.n	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	2b40      	cmp	r3, #64	@ 0x40
 800c7e4:	f040 80b1 	bne.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 facd 	bl	800cd88 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c7ee:	e0ac      	b.n	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7fe:	f000 80a4 	beq.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00d      	beq.n	800c828 <HAL_I2C_EV_IRQHandler+0x178>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c812:	2b00      	cmp	r3, #0
 800c814:	d008      	beq.n	800c828 <HAL_I2C_EV_IRQHandler+0x178>
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d103      	bne.n	800c828 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 fb49 	bl	800ceb8 <I2C_MasterReceive_RXNE>
 800c826:	e00f      	b.n	800c848 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	f003 0304 	and.w	r3, r3, #4
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 808b 	beq.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 8085 	beq.w	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fc01 	bl	800d048 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c846:	e080      	b.n	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
 800c848:	e07f      	b.n	800c94a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d004      	beq.n	800c85c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	61fb      	str	r3, [r7, #28]
 800c85a:	e007      	b.n	800c86c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	f003 0302 	and.w	r3, r3, #2
 800c872:	2b00      	cmp	r3, #0
 800c874:	d011      	beq.n	800c89a <HAL_I2C_EV_IRQHandler+0x1ea>
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00c      	beq.n	800c89a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c890:	69b9      	ldr	r1, [r7, #24]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 ffc8 	bl	800d828 <I2C_Slave_ADDR>
 800c898:	e05a      	b.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	f003 0310 	and.w	r3, r3, #16
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d008      	beq.n	800c8b6 <HAL_I2C_EV_IRQHandler+0x206>
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f001 f802 	bl	800d8b8 <I2C_Slave_STOPF>
 800c8b4:	e04c      	b.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b21      	cmp	r3, #33	@ 0x21
 800c8ba:	d002      	beq.n	800c8c2 <HAL_I2C_EV_IRQHandler+0x212>
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	2b29      	cmp	r3, #41	@ 0x29
 800c8c0:	d120      	bne.n	800c904 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00d      	beq.n	800c8e8 <HAL_I2C_EV_IRQHandler+0x238>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d008      	beq.n	800c8e8 <HAL_I2C_EV_IRQHandler+0x238>
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d103      	bne.n	800c8e8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fee3 	bl	800d6ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c8e6:	e032      	b.n	800c94e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	f003 0304 	and.w	r3, r3, #4
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d02d      	beq.n	800c94e <HAL_I2C_EV_IRQHandler+0x29e>
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d028      	beq.n	800c94e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 ff12 	bl	800d726 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c902:	e024      	b.n	800c94e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00d      	beq.n	800c92a <HAL_I2C_EV_IRQHandler+0x27a>
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c914:	2b00      	cmp	r3, #0
 800c916:	d008      	beq.n	800c92a <HAL_I2C_EV_IRQHandler+0x27a>
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	f003 0304 	and.w	r3, r3, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d103      	bne.n	800c92a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 ff20 	bl	800d768 <I2C_SlaveReceive_RXNE>
 800c928:	e012      	b.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	f003 0304 	and.w	r3, r3, #4
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00d      	beq.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d008      	beq.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 ff50 	bl	800d7e4 <I2C_SlaveReceive_BTF>
 800c944:	e004      	b.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800c946:	bf00      	nop
 800c948:	e002      	b.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c94a:	bf00      	nop
 800c94c:	e000      	b.n	800c950 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c94e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c950:	3720      	adds	r7, #32
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b08a      	sub	sp, #40	@ 0x28
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c96e:	2300      	movs	r3, #0
 800c970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c978:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00d      	beq.n	800c9a0 <HAL_I2C_ER_IRQHandler+0x4a>
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d008      	beq.n	800c9a0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c990:	f043 0301 	orr.w	r3, r3, #1
 800c994:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c99e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00d      	beq.n	800c9c6 <HAL_I2C_ER_IRQHandler+0x70>
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d008      	beq.n	800c9c6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b6:	f043 0302 	orr.w	r3, r3, #2
 800c9ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800c9c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d03e      	beq.n	800ca4e <HAL_I2C_ER_IRQHandler+0xf8>
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d039      	beq.n	800ca4e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800c9da:	7efb      	ldrb	r3, [r7, #27]
 800c9dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c9f4:	7ebb      	ldrb	r3, [r7, #26]
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	d112      	bne.n	800ca20 <HAL_I2C_ER_IRQHandler+0xca>
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10f      	bne.n	800ca20 <HAL_I2C_ER_IRQHandler+0xca>
 800ca00:	7cfb      	ldrb	r3, [r7, #19]
 800ca02:	2b21      	cmp	r3, #33	@ 0x21
 800ca04:	d008      	beq.n	800ca18 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ca06:	7cfb      	ldrb	r3, [r7, #19]
 800ca08:	2b29      	cmp	r3, #41	@ 0x29
 800ca0a:	d005      	beq.n	800ca18 <HAL_I2C_ER_IRQHandler+0xc2>
 800ca0c:	7cfb      	ldrb	r3, [r7, #19]
 800ca0e:	2b28      	cmp	r3, #40	@ 0x28
 800ca10:	d106      	bne.n	800ca20 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b21      	cmp	r3, #33	@ 0x21
 800ca16:	d103      	bne.n	800ca20 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f001 f87d 	bl	800db18 <I2C_Slave_AF>
 800ca1e:	e016      	b.n	800ca4e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ca28:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2c:	f043 0304 	orr.w	r3, r3, #4
 800ca30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ca32:	7efb      	ldrb	r3, [r7, #27]
 800ca34:	2b10      	cmp	r3, #16
 800ca36:	d002      	beq.n	800ca3e <HAL_I2C_ER_IRQHandler+0xe8>
 800ca38:	7efb      	ldrb	r3, [r7, #27]
 800ca3a:	2b40      	cmp	r3, #64	@ 0x40
 800ca3c:	d107      	bne.n	800ca4e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca4c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00d      	beq.n	800ca74 <HAL_I2C_ER_IRQHandler+0x11e>
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d008      	beq.n	800ca74 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	f043 0308 	orr.w	r3, r3, #8
 800ca68:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800ca72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d008      	beq.n	800ca8c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca80:	431a      	orrs	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f001 f8ba 	bl	800dc00 <I2C_ITError>
  }
}
 800ca8c:	bf00      	nop
 800ca8e:	3728      	adds	r7, #40	@ 0x28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	70fb      	strb	r3, [r7, #3]
 800caf0:	4613      	mov	r3, r2
 800caf2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cb30:	bf00      	nop
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cb7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb80:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d150      	bne.n	800cc2c <I2C_MasterTransmit_TXE+0xc8>
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
 800cb8c:	2b21      	cmp	r3, #33	@ 0x21
 800cb8e:	d14d      	bne.n	800cc2c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b08      	cmp	r3, #8
 800cb94:	d01d      	beq.n	800cbd2 <I2C_MasterTransmit_TXE+0x6e>
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2b20      	cmp	r3, #32
 800cb9a:	d01a      	beq.n	800cbd2 <I2C_MasterTransmit_TXE+0x6e>
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cba2:	d016      	beq.n	800cbd2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cbb2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2211      	movs	r2, #17
 800cbb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2220      	movs	r2, #32
 800cbc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff ff62 	bl	800ca94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cbd0:	e060      	b.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cbe0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cbf0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2220      	movs	r2, #32
 800cbfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b40      	cmp	r3, #64	@ 0x40
 800cc0a:	d107      	bne.n	800cc1c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ff7d 	bl	800cb14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cc1a:	e03b      	b.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ff35 	bl	800ca94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cc2a:	e033      	b.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2b21      	cmp	r3, #33	@ 0x21
 800cc30:	d005      	beq.n	800cc3e <I2C_MasterTransmit_TXE+0xda>
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	2b40      	cmp	r3, #64	@ 0x40
 800cc36:	d12d      	bne.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	2b22      	cmp	r3, #34	@ 0x22
 800cc3c:	d12a      	bne.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d108      	bne.n	800cc5a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685a      	ldr	r2, [r3, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc56:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800cc58:	e01c      	b.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b40      	cmp	r3, #64	@ 0x40
 800cc64:	d103      	bne.n	800cc6e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f88e 	bl	800cd88 <I2C_MemoryTransmit_TXE_BTF>
}
 800cc6c:	e012      	b.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc72:	781a      	ldrb	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800cc92:	e7ff      	b.n	800cc94 <I2C_MasterTransmit_TXE+0x130>
 800cc94:	bf00      	nop
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cca8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b21      	cmp	r3, #33	@ 0x21
 800ccb4:	d164      	bne.n	800cd80 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d012      	beq.n	800cce6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccc4:	781a      	ldrb	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800cce4:	e04c      	b.n	800cd80 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b08      	cmp	r3, #8
 800ccea:	d01d      	beq.n	800cd28 <I2C_MasterTransmit_BTF+0x8c>
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	d01a      	beq.n	800cd28 <I2C_MasterTransmit_BTF+0x8c>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ccf8:	d016      	beq.n	800cd28 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cd08:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2211      	movs	r2, #17
 800cd0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f7ff feb7 	bl	800ca94 <HAL_I2C_MasterTxCpltCallback>
}
 800cd26:	e02b      	b.n	800cd80 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cd36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd46:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2220      	movs	r2, #32
 800cd52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	2b40      	cmp	r3, #64	@ 0x40
 800cd60:	d107      	bne.n	800cd72 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7ff fed2 	bl	800cb14 <HAL_I2C_MemTxCpltCallback>
}
 800cd70:	e006      	b.n	800cd80 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7ff fe8a 	bl	800ca94 <HAL_I2C_MasterTxCpltCallback>
}
 800cd80:	bf00      	nop
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d11d      	bne.n	800cddc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d10b      	bne.n	800cdc0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdb8:	1c9a      	adds	r2, r3, #2
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800cdbe:	e077      	b.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	121b      	asrs	r3, r3, #8
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800cdda:	e069      	b.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d10b      	bne.n	800cdfc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800cdfa:	e059      	b.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce00:	2b02      	cmp	r3, #2
 800ce02:	d152      	bne.n	800ceaa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
 800ce06:	2b22      	cmp	r3, #34	@ 0x22
 800ce08:	d10d      	bne.n	800ce26 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ce18:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ce24:	e044      	b.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d015      	beq.n	800ce5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
 800ce32:	2b21      	cmp	r3, #33	@ 0x21
 800ce34:	d112      	bne.n	800ce5c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3a:	781a      	ldrb	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ce5a:	e029      	b.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d124      	bne.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	2b21      	cmp	r3, #33	@ 0x21
 800ce6a:	d121      	bne.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ce7a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2220      	movs	r2, #32
 800ce96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7ff fe36 	bl	800cb14 <HAL_I2C_MemTxCpltCallback>
}
 800cea8:	e002      	b.n	800ceb0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7fe ff8c 	bl	800bdc8 <I2C_Flush_DR>
}
 800ceb0:	bf00      	nop
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b22      	cmp	r3, #34	@ 0x22
 800ceca:	f040 80b9 	bne.w	800d040 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d921      	bls.n	800cf26 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	691a      	ldr	r2, [r3, #16]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceec:	b2d2      	uxtb	r2, r2
 800ceee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef4:	1c5a      	adds	r2, r3, #1
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	3b01      	subs	r3, #1
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	2b03      	cmp	r3, #3
 800cf10:	f040 8096 	bne.w	800d040 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf22:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800cf24:	e08c      	b.n	800d040 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d07f      	beq.n	800d02e <I2C_MasterReceive_RXNE+0x176>
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d002      	beq.n	800cf3a <I2C_MasterReceive_RXNE+0x82>
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d179      	bne.n	800d02e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f001 fb34 	bl	800e5a8 <I2C_WaitOnSTOPRequestThroughIT>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d14c      	bne.n	800cfe0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf54:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cf64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	691a      	ldr	r2, [r3, #16]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf70:	b2d2      	uxtb	r2, r2
 800cf72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	3b01      	subs	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2220      	movs	r2, #32
 800cf90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b40      	cmp	r3, #64	@ 0x40
 800cf9e:	d10a      	bne.n	800cfb6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fdba 	bl	800cb28 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800cfb4:	e044      	b.n	800d040 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2b08      	cmp	r3, #8
 800cfc2:	d002      	beq.n	800cfca <I2C_MasterReceive_RXNE+0x112>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b20      	cmp	r3, #32
 800cfc8:	d103      	bne.n	800cfd2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	631a      	str	r2, [r3, #48]	@ 0x30
 800cfd0:	e002      	b.n	800cfd8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2212      	movs	r2, #18
 800cfd6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff fd65 	bl	800caa8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800cfde:	e02f      	b.n	800d040 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	685a      	ldr	r2, [r3, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cfee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	691a      	ldr	r2, [r3, #16]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffa:	b2d2      	uxtb	r2, r2
 800cffc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	3b01      	subs	r3, #1
 800d010:	b29a      	uxth	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2220      	movs	r2, #32
 800d01a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff fd88 	bl	800cb3c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d02c:	e008      	b.n	800d040 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d03c:	605a      	str	r2, [r3, #4]
}
 800d03e:	e7ff      	b.n	800d040 <I2C_MasterReceive_RXNE+0x188>
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d054:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	2b04      	cmp	r3, #4
 800d05e:	d11b      	bne.n	800d098 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	685a      	ldr	r2, [r3, #4]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d06e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	691a      	ldr	r2, [r3, #16]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	3b01      	subs	r3, #1
 800d090:	b29a      	uxth	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d096:	e0c4      	b.n	800d222 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d129      	bne.n	800d0f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d0b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d00a      	beq.n	800d0ce <I2C_MasterReceive_BTF+0x86>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d007      	beq.n	800d0ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d0cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	691a      	ldr	r2, [r3, #16]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d8:	b2d2      	uxtb	r2, r2
 800d0da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800d0f4:	e095      	b.n	800d222 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d17d      	bne.n	800d1fc <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d002      	beq.n	800d10c <I2C_MasterReceive_BTF+0xc4>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b10      	cmp	r3, #16
 800d10a:	d108      	bne.n	800d11e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	e016      	b.n	800d14c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2b04      	cmp	r3, #4
 800d122:	d002      	beq.n	800d12a <I2C_MasterReceive_BTF+0xe2>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b02      	cmp	r3, #2
 800d128:	d108      	bne.n	800d13c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	e007      	b.n	800d14c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d14a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	691a      	ldr	r2, [r3, #16]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d168:	b29b      	uxth	r3, r3
 800d16a:	3b01      	subs	r3, #1
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	691a      	ldr	r2, [r3, #16]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17c:	b2d2      	uxtb	r2, r2
 800d17e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d184:	1c5a      	adds	r2, r3, #1
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d18e:	b29b      	uxth	r3, r3
 800d190:	3b01      	subs	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d1a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	2b40      	cmp	r3, #64	@ 0x40
 800d1ba:	d10a      	bne.n	800d1d2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fcac 	bl	800cb28 <HAL_I2C_MemRxCpltCallback>
}
 800d1d0:	e027      	b.n	800d222 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b08      	cmp	r3, #8
 800d1de:	d002      	beq.n	800d1e6 <I2C_MasterReceive_BTF+0x19e>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	d103      	bne.n	800d1ee <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	631a      	str	r2, [r3, #48]	@ 0x30
 800d1ec:	e002      	b.n	800d1f4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2212      	movs	r2, #18
 800d1f2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fc57 	bl	800caa8 <HAL_I2C_MasterRxCpltCallback>
}
 800d1fa:	e012      	b.n	800d222 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	691a      	ldr	r2, [r3, #16]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800d222:	bf00      	nop
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b40      	cmp	r3, #64	@ 0x40
 800d23c:	d117      	bne.n	800d26e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d242:	2b00      	cmp	r3, #0
 800d244:	d109      	bne.n	800d25a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	461a      	mov	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d256:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d258:	e067      	b.n	800d32a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	f043 0301 	orr.w	r3, r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	611a      	str	r2, [r3, #16]
}
 800d26c:	e05d      	b.n	800d32a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d276:	d133      	bne.n	800d2e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b21      	cmp	r3, #33	@ 0x21
 800d282:	d109      	bne.n	800d298 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	461a      	mov	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d294:	611a      	str	r2, [r3, #16]
 800d296:	e008      	b.n	800d2aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f043 0301 	orr.w	r3, r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <I2C_Master_SB+0x92>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d108      	bne.n	800d2ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d032      	beq.n	800d32a <I2C_Master_SB+0x100>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d02d      	beq.n	800d32a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d2dc:	605a      	str	r2, [r3, #4]
}
 800d2de:	e024      	b.n	800d32a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10e      	bne.n	800d306 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	11db      	asrs	r3, r3, #7
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	f003 0306 	and.w	r3, r3, #6
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	f063 030f 	orn	r3, r3, #15
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	611a      	str	r2, [r3, #16]
}
 800d304:	e011      	b.n	800d32a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d10d      	bne.n	800d32a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d312:	b29b      	uxth	r3, r3
 800d314:	11db      	asrs	r3, r3, #7
 800d316:	b2db      	uxtb	r3, r3
 800d318:	f003 0306 	and.w	r3, r3, #6
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f063 030e 	orn	r3, r3, #14
 800d322:	b2da      	uxtb	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	611a      	str	r2, [r3, #16]
}
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d336:	b480      	push	{r7}
 800d338:	b083      	sub	sp, #12
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d342:	b2da      	uxtb	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d004      	beq.n	800d35c <I2C_Master_ADD10+0x26>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d108      	bne.n	800d36e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00c      	beq.n	800d37e <I2C_Master_ADD10+0x48>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d007      	beq.n	800d37e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d37c:	605a      	str	r2, [r3, #4]
  }
}
 800d37e:	bf00      	nop
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b091      	sub	sp, #68	@ 0x44
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d398:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b22      	cmp	r3, #34	@ 0x22
 800d3b2:	f040 8169 	bne.w	800d688 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10f      	bne.n	800d3de <I2C_Master_ADDR+0x54>
 800d3be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d3c2:	2b40      	cmp	r3, #64	@ 0x40
 800d3c4:	d10b      	bne.n	800d3de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	695b      	ldr	r3, [r3, #20]
 800d3d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3dc:	e160      	b.n	800d6a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d11d      	bne.n	800d422 <I2C_Master_ADDR+0x98>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d3ee:	d118      	bne.n	800d422 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	699b      	ldr	r3, [r3, #24]
 800d402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d414:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	651a      	str	r2, [r3, #80]	@ 0x50
 800d420:	e13e      	b.n	800d6a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d426:	b29b      	uxth	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d113      	bne.n	800d454 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d42c:	2300      	movs	r3, #0
 800d42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d440:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d450:	601a      	str	r2, [r3, #0]
 800d452:	e115      	b.n	800d680 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d458:	b29b      	uxth	r3, r3
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f040 808a 	bne.w	800d574 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d462:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d466:	d137      	bne.n	800d4d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d476:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d486:	d113      	bne.n	800d4b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d496:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d498:	2300      	movs	r3, #0
 800d49a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ae:	e0e7      	b.n	800d680 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	623b      	str	r3, [r7, #32]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	623b      	str	r3, [r7, #32]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	623b      	str	r3, [r7, #32]
 800d4c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	e0d3      	b.n	800d680 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4da:	2b08      	cmp	r3, #8
 800d4dc:	d02e      	beq.n	800d53c <I2C_Master_ADDR+0x1b2>
 800d4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e0:	2b20      	cmp	r3, #32
 800d4e2:	d02b      	beq.n	800d53c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800d4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e6:	2b12      	cmp	r3, #18
 800d4e8:	d102      	bne.n	800d4f0 <I2C_Master_ADDR+0x166>
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d125      	bne.n	800d53c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	d00e      	beq.n	800d514 <I2C_Master_ADDR+0x18a>
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d00b      	beq.n	800d514 <I2C_Master_ADDR+0x18a>
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fe:	2b10      	cmp	r3, #16
 800d500:	d008      	beq.n	800d514 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	e007      	b.n	800d524 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d522:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d524:	2300      	movs	r3, #0
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	61fb      	str	r3, [r7, #28]
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	e0a1      	b.n	800d680 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d54a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d54c:	2300      	movs	r3, #0
 800d54e:	61bb      	str	r3, [r7, #24]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	61bb      	str	r3, [r7, #24]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	61bb      	str	r3, [r7, #24]
 800d560:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d570:	601a      	str	r2, [r3, #0]
 800d572:	e085      	b.n	800d680 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d578:	b29b      	uxth	r3, r3
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d14d      	bne.n	800d61a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d580:	2b04      	cmp	r3, #4
 800d582:	d016      	beq.n	800d5b2 <I2C_Master_ADDR+0x228>
 800d584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d586:	2b02      	cmp	r3, #2
 800d588:	d013      	beq.n	800d5b2 <I2C_Master_ADDR+0x228>
 800d58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58c:	2b10      	cmp	r3, #16
 800d58e:	d010      	beq.n	800d5b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d59e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d5ae:	601a      	str	r2, [r3, #0]
 800d5b0:	e007      	b.n	800d5c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d5c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5d0:	d117      	bne.n	800d602 <I2C_Master_ADDR+0x278>
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d5d8:	d00b      	beq.n	800d5f2 <I2C_Master_ADDR+0x268>
 800d5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d008      	beq.n	800d5f2 <I2C_Master_ADDR+0x268>
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e2:	2b08      	cmp	r3, #8
 800d5e4:	d005      	beq.n	800d5f2 <I2C_Master_ADDR+0x268>
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e8:	2b10      	cmp	r3, #16
 800d5ea:	d002      	beq.n	800d5f2 <I2C_Master_ADDR+0x268>
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ee:	2b20      	cmp	r3, #32
 800d5f0:	d107      	bne.n	800d602 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d600:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d602:	2300      	movs	r3, #0
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	617b      	str	r3, [r7, #20]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	617b      	str	r3, [r7, #20]
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	e032      	b.n	800d680 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d628:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d638:	d117      	bne.n	800d66a <I2C_Master_ADDR+0x2e0>
 800d63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d640:	d00b      	beq.n	800d65a <I2C_Master_ADDR+0x2d0>
 800d642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d644:	2b01      	cmp	r3, #1
 800d646:	d008      	beq.n	800d65a <I2C_Master_ADDR+0x2d0>
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	2b08      	cmp	r3, #8
 800d64c:	d005      	beq.n	800d65a <I2C_Master_ADDR+0x2d0>
 800d64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d650:	2b10      	cmp	r3, #16
 800d652:	d002      	beq.n	800d65a <I2C_Master_ADDR+0x2d0>
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	2b20      	cmp	r3, #32
 800d658:	d107      	bne.n	800d66a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d668:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d66a:	2300      	movs	r3, #0
 800d66c:	613b      	str	r3, [r7, #16]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	613b      	str	r3, [r7, #16]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	613b      	str	r3, [r7, #16]
 800d67e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d686:	e00b      	b.n	800d6a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d688:	2300      	movs	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	699b      	ldr	r3, [r3, #24]
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	68fb      	ldr	r3, [r7, #12]
}
 800d69e:	e7ff      	b.n	800d6a0 <I2C_Master_ADDR+0x316>
 800d6a0:	bf00      	nop
 800d6a2:	3744      	adds	r7, #68	@ 0x44
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d02b      	beq.n	800d71e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ca:	781a      	ldrb	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d114      	bne.n	800d71e <I2C_SlaveTransmit_TXE+0x72>
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
 800d6f6:	2b29      	cmp	r3, #41	@ 0x29
 800d6f8:	d111      	bne.n	800d71e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d708:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2221      	movs	r2, #33	@ 0x21
 800d70e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2228      	movs	r2, #40	@ 0x28
 800d714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7ff f9cf 	bl	800cabc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d71e:	bf00      	nop
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d726:	b480      	push	{r7}
 800d728:	b083      	sub	sp, #12
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d732:	b29b      	uxth	r3, r3
 800d734:	2b00      	cmp	r3, #0
 800d736:	d011      	beq.n	800d75c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d73c:	781a      	ldrb	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d752:	b29b      	uxth	r3, r3
 800d754:	3b01      	subs	r3, #1
 800d756:	b29a      	uxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d02c      	beq.n	800d7dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	691a      	ldr	r2, [r3, #16]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d78c:	b2d2      	uxtb	r2, r2
 800d78e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d114      	bne.n	800d7dc <I2C_SlaveReceive_RXNE+0x74>
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b6:	d111      	bne.n	800d7dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2222      	movs	r2, #34	@ 0x22
 800d7cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2228      	movs	r2, #40	@ 0x28
 800d7d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff f97a 	bl	800cad0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d7dc:	bf00      	nop
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d012      	beq.n	800d81c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	691a      	ldr	r2, [r3, #16]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d800:	b2d2      	uxtb	r2, r2
 800d802:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d812:	b29b      	uxth	r3, r3
 800d814:	3b01      	subs	r3, #1
 800d816:	b29a      	uxth	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d832:	2300      	movs	r3, #0
 800d834:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d842:	2b28      	cmp	r3, #40	@ 0x28
 800d844:	d125      	bne.n	800d892 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d854:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	f003 0304 	and.w	r3, r3, #4
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d860:	2301      	movs	r3, #1
 800d862:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	81bb      	strh	r3, [r7, #12]
 800d874:	e002      	b.n	800d87c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d884:	89ba      	ldrh	r2, [r7, #12]
 800d886:	7bfb      	ldrb	r3, [r7, #15]
 800d888:	4619      	mov	r1, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff f92a 	bl	800cae4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d890:	e00e      	b.n	800d8b0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d892:	2300      	movs	r3, #0
 800d894:	60bb      	str	r3, [r7, #8]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	60bb      	str	r3, [r7, #8]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	60bb      	str	r3, [r7, #8]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d8d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d8d8:	2300      	movs	r3, #0
 800d8da:	60bb      	str	r3, [r7, #8]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	695b      	ldr	r3, [r3, #20]
 800d8e2:	60bb      	str	r3, [r7, #8]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f042 0201 	orr.w	r2, r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d904:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d914:	d172      	bne.n	800d9fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d916:	7bfb      	ldrb	r3, [r7, #15]
 800d918:	2b22      	cmp	r3, #34	@ 0x22
 800d91a:	d002      	beq.n	800d922 <I2C_Slave_STOPF+0x6a>
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d920:	d135      	bne.n	800d98e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d934:	b29b      	uxth	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d005      	beq.n	800d946 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d93e:	f043 0204 	orr.w	r2, r3, #4
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685a      	ldr	r2, [r3, #4]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d954:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fd fa5e 	bl	800ae1c <HAL_DMA_GetState>
 800d960:	4603      	mov	r3, r0
 800d962:	2b01      	cmp	r3, #1
 800d964:	d049      	beq.n	800d9fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d96a:	4a69      	ldr	r2, [pc, #420]	@ (800db10 <I2C_Slave_STOPF+0x258>)
 800d96c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d972:	4618      	mov	r0, r3
 800d974:	f7fd fa30 	bl	800add8 <HAL_DMA_Abort_IT>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d03d      	beq.n	800d9fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d98c:	e035      	b.n	800d9fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d005      	beq.n	800d9b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9aa:	f043 0204 	orr.w	r2, r3, #4
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	685a      	ldr	r2, [r3, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d9c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fd fa28 	bl	800ae1c <HAL_DMA_GetState>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d014      	beq.n	800d9fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9d6:	4a4e      	ldr	r2, [pc, #312]	@ (800db10 <I2C_Slave_STOPF+0x258>)
 800d9d8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fd f9fa 	bl	800add8 <HAL_DMA_Abort_IT>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d008      	beq.n	800d9fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	4798      	blx	r3
 800d9f8:	e000      	b.n	800d9fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d9fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da00:	b29b      	uxth	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d03e      	beq.n	800da84 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	f003 0304 	and.w	r3, r3, #4
 800da10:	2b04      	cmp	r3, #4
 800da12:	d112      	bne.n	800da3a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	691a      	ldr	r2, [r3, #16]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da30:	b29b      	uxth	r3, r3
 800da32:	3b01      	subs	r3, #1
 800da34:	b29a      	uxth	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da44:	2b40      	cmp	r3, #64	@ 0x40
 800da46:	d112      	bne.n	800da6e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da52:	b2d2      	uxtb	r2, r2
 800da54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da5a:	1c5a      	adds	r2, r3, #1
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da64:	b29b      	uxth	r3, r3
 800da66:	3b01      	subs	r3, #1
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da72:	b29b      	uxth	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da7c:	f043 0204 	orr.w	r2, r3, #4
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d003      	beq.n	800da94 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f8b7 	bl	800dc00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800da92:	e039      	b.n	800db08 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800da94:	7bfb      	ldrb	r3, [r7, #15]
 800da96:	2b2a      	cmp	r3, #42	@ 0x2a
 800da98:	d109      	bne.n	800daae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2228      	movs	r2, #40	@ 0x28
 800daa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff f811 	bl	800cad0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b28      	cmp	r3, #40	@ 0x28
 800dab8:	d111      	bne.n	800dade <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a15      	ldr	r2, [pc, #84]	@ (800db14 <I2C_Slave_STOPF+0x25c>)
 800dabe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2220      	movs	r2, #32
 800daca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff f812 	bl	800cb00 <HAL_I2C_ListenCpltCallback>
}
 800dadc:	e014      	b.n	800db08 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dae2:	2b22      	cmp	r3, #34	@ 0x22
 800dae4:	d002      	beq.n	800daec <I2C_Slave_STOPF+0x234>
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
 800dae8:	2b22      	cmp	r3, #34	@ 0x22
 800daea:	d10d      	bne.n	800db08 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2220      	movs	r2, #32
 800daf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fe ffe4 	bl	800cad0 <HAL_I2C_SlaveRxCpltCallback>
}
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	0800e105 	.word	0x0800e105
 800db14:	ffff0000 	.word	0xffff0000

0800db18 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db26:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db2c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	2b08      	cmp	r3, #8
 800db32:	d002      	beq.n	800db3a <I2C_Slave_AF+0x22>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b20      	cmp	r3, #32
 800db38:	d129      	bne.n	800db8e <I2C_Slave_AF+0x76>
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	2b28      	cmp	r3, #40	@ 0x28
 800db3e:	d126      	bne.n	800db8e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a2e      	ldr	r2, [pc, #184]	@ (800dbfc <I2C_Slave_AF+0xe4>)
 800db44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800db54:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800db5e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db6e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2220      	movs	r2, #32
 800db7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7fe ffba 	bl	800cb00 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800db8c:	e031      	b.n	800dbf2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
 800db90:	2b21      	cmp	r3, #33	@ 0x21
 800db92:	d129      	bne.n	800dbe8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a19      	ldr	r2, [pc, #100]	@ (800dbfc <I2C_Slave_AF+0xe4>)
 800db98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2221      	movs	r2, #33	@ 0x21
 800db9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2220      	movs	r2, #32
 800dba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	685a      	ldr	r2, [r3, #4]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dbbe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dbc8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbd8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7fe f8f4 	bl	800bdc8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7fe ff6b 	bl	800cabc <HAL_I2C_SlaveTxCpltCallback>
}
 800dbe6:	e004      	b.n	800dbf2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dbf0:	615a      	str	r2, [r3, #20]
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	ffff0000 	.word	0xffff0000

0800dc00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dc18:	7bbb      	ldrb	r3, [r7, #14]
 800dc1a:	2b10      	cmp	r3, #16
 800dc1c:	d002      	beq.n	800dc24 <I2C_ITError+0x24>
 800dc1e:	7bbb      	ldrb	r3, [r7, #14]
 800dc20:	2b40      	cmp	r3, #64	@ 0x40
 800dc22:	d10a      	bne.n	800dc3a <I2C_ITError+0x3a>
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	2b22      	cmp	r3, #34	@ 0x22
 800dc28:	d107      	bne.n	800dc3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800dc40:	2b28      	cmp	r3, #40	@ 0x28
 800dc42:	d107      	bne.n	800dc54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2228      	movs	r2, #40	@ 0x28
 800dc4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800dc52:	e015      	b.n	800dc80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc62:	d00a      	beq.n	800dc7a <I2C_ITError+0x7a>
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	2b60      	cmp	r3, #96	@ 0x60
 800dc68:	d007      	beq.n	800dc7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2220      	movs	r2, #32
 800dc6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc8e:	d162      	bne.n	800dd56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d020      	beq.n	800dcf0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb2:	4a6a      	ldr	r2, [pc, #424]	@ (800de5c <I2C_ITError+0x25c>)
 800dcb4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fd f88c 	bl	800add8 <HAL_DMA_Abort_IT>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f000 8089 	beq.w	800ddda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f022 0201 	bic.w	r2, r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2220      	movs	r2, #32
 800dcdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dcea:	4610      	mov	r0, r2
 800dcec:	4798      	blx	r3
 800dcee:	e074      	b.n	800ddda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcf4:	4a59      	ldr	r2, [pc, #356]	@ (800de5c <I2C_ITError+0x25c>)
 800dcf6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fd f86b 	bl	800add8 <HAL_DMA_Abort_IT>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d068      	beq.n	800ddda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	695b      	ldr	r3, [r3, #20]
 800dd0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd12:	2b40      	cmp	r3, #64	@ 0x40
 800dd14:	d10b      	bne.n	800dd2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	691a      	ldr	r2, [r3, #16]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd20:	b2d2      	uxtb	r2, r2
 800dd22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f022 0201 	bic.w	r2, r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2220      	movs	r2, #32
 800dd42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
 800dd54:	e041      	b.n	800ddda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b60      	cmp	r3, #96	@ 0x60
 800dd60:	d125      	bne.n	800ddae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2220      	movs	r2, #32
 800dd66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd7a:	2b40      	cmp	r3, #64	@ 0x40
 800dd7c:	d10b      	bne.n	800dd96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	691a      	ldr	r2, [r3, #16]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd88:	b2d2      	uxtb	r2, r2
 800dd8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 0201 	bic.w	r2, r2, #1
 800dda4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7fe fed2 	bl	800cb50 <HAL_I2C_AbortCpltCallback>
 800ddac:	e015      	b.n	800ddda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddb8:	2b40      	cmp	r3, #64	@ 0x40
 800ddba:	d10b      	bne.n	800ddd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	691a      	ldr	r2, [r3, #16]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddc6:	b2d2      	uxtb	r2, r2
 800ddc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7fe feb1 	bl	800cb3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10e      	bne.n	800de08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d109      	bne.n	800de08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d104      	bne.n	800de08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800de04:	2b00      	cmp	r3, #0
 800de06:	d007      	beq.n	800de18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b04      	cmp	r3, #4
 800de2a:	d113      	bne.n	800de54 <I2C_ITError+0x254>
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	2b28      	cmp	r3, #40	@ 0x28
 800de30:	d110      	bne.n	800de54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a0a      	ldr	r2, [pc, #40]	@ (800de60 <I2C_ITError+0x260>)
 800de36:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2220      	movs	r2, #32
 800de42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7fe fe56 	bl	800cb00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800de54:	bf00      	nop
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	0800e105 	.word	0x0800e105
 800de60:	ffff0000 	.word	0xffff0000

0800de64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af02      	add	r7, sp, #8
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	607a      	str	r2, [r7, #4]
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	460b      	mov	r3, r1
 800de72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2b08      	cmp	r3, #8
 800de7e:	d006      	beq.n	800de8e <I2C_MasterRequestWrite+0x2a>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d003      	beq.n	800de8e <I2C_MasterRequestWrite+0x2a>
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800de8c:	d108      	bne.n	800dea0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	e00b      	b.n	800deb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dea4:	2b12      	cmp	r3, #18
 800dea6:	d107      	bne.n	800deb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800deb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 f9c5 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00d      	beq.n	800deec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dede:	d103      	bne.n	800dee8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dee6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dee8:	2303      	movs	r3, #3
 800deea:	e035      	b.n	800df58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800def4:	d108      	bne.n	800df08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800def6:	897b      	ldrh	r3, [r7, #10]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	461a      	mov	r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800df04:	611a      	str	r2, [r3, #16]
 800df06:	e01b      	b.n	800df40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800df08:	897b      	ldrh	r3, [r7, #10]
 800df0a:	11db      	asrs	r3, r3, #7
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	f003 0306 	and.w	r3, r3, #6
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f063 030f 	orn	r3, r3, #15
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	490e      	ldr	r1, [pc, #56]	@ (800df60 <I2C_MasterRequestWrite+0xfc>)
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 fa0e 	bl	800e348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	e010      	b.n	800df58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800df36:	897b      	ldrh	r3, [r7, #10]
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	4907      	ldr	r1, [pc, #28]	@ (800df64 <I2C_MasterRequestWrite+0x100>)
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f000 f9fe 	bl	800e348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e000      	b.n	800df58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3718      	adds	r7, #24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	00010008 	.word	0x00010008
 800df64:	00010002 	.word	0x00010002

0800df68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	607a      	str	r2, [r7, #4]
 800df72:	603b      	str	r3, [r7, #0]
 800df74:	460b      	mov	r3, r1
 800df76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800df8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b08      	cmp	r3, #8
 800df92:	d006      	beq.n	800dfa2 <I2C_MasterRequestRead+0x3a>
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	2b01      	cmp	r3, #1
 800df98:	d003      	beq.n	800dfa2 <I2C_MasterRequestRead+0x3a>
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dfa0:	d108      	bne.n	800dfb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfb0:	601a      	str	r2, [r3, #0]
 800dfb2:	e00b      	b.n	800dfcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb8:	2b11      	cmp	r3, #17
 800dfba:	d107      	bne.n	800dfcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 f93b 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00d      	beq.n	800e000 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dff2:	d103      	bne.n	800dffc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dffa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dffc:	2303      	movs	r3, #3
 800dffe:	e079      	b.n	800e0f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e008:	d108      	bne.n	800e01c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e00a:	897b      	ldrh	r3, [r7, #10]
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	f043 0301 	orr.w	r3, r3, #1
 800e012:	b2da      	uxtb	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	611a      	str	r2, [r3, #16]
 800e01a:	e05f      	b.n	800e0dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e01c:	897b      	ldrh	r3, [r7, #10]
 800e01e:	11db      	asrs	r3, r3, #7
 800e020:	b2db      	uxtb	r3, r3
 800e022:	f003 0306 	and.w	r3, r3, #6
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f063 030f 	orn	r3, r3, #15
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	4930      	ldr	r1, [pc, #192]	@ (800e0fc <I2C_MasterRequestRead+0x194>)
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 f984 	bl	800e348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e054      	b.n	800e0f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e04a:	897b      	ldrh	r3, [r7, #10]
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	4929      	ldr	r1, [pc, #164]	@ (800e100 <I2C_MasterRequestRead+0x198>)
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f000 f974 	bl	800e348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	e044      	b.n	800e0f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e06a:	2300      	movs	r3, #0
 800e06c:	613b      	str	r3, [r7, #16]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	695b      	ldr	r3, [r3, #20]
 800e074:	613b      	str	r3, [r7, #16]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	613b      	str	r3, [r7, #16]
 800e07e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e08e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 f8d9 	bl	800e254 <I2C_WaitOnFlagUntilTimeout>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00d      	beq.n	800e0c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0b6:	d103      	bne.n	800e0c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0be:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e017      	b.n	800e0f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e0c4:	897b      	ldrh	r3, [r7, #10]
 800e0c6:	11db      	asrs	r3, r3, #7
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	f003 0306 	and.w	r3, r3, #6
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f063 030e 	orn	r3, r3, #14
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	4907      	ldr	r1, [pc, #28]	@ (800e100 <I2C_MasterRequestRead+0x198>)
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 f930 	bl	800e348 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e000      	b.n	800e0f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	00010008 	.word	0x00010008
 800e100:	00010002 	.word	0x00010002

0800e104 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e114:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e11c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e11e:	4b4b      	ldr	r3, [pc, #300]	@ (800e24c <I2C_DMAAbort+0x148>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	08db      	lsrs	r3, r3, #3
 800e124:	4a4a      	ldr	r2, [pc, #296]	@ (800e250 <I2C_DMAAbort+0x14c>)
 800e126:	fba2 2303 	umull	r2, r3, r2, r3
 800e12a:	0a1a      	lsrs	r2, r3, #8
 800e12c:	4613      	mov	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	00da      	lsls	r2, r3, #3
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d106      	bne.n	800e14c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e142:	f043 0220 	orr.w	r2, r3, #32
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800e14a:	e00a      	b.n	800e162 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	3b01      	subs	r3, #1
 800e150:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e160:	d0ea      	beq.n	800e138 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e166:	2b00      	cmp	r3, #0
 800e168:	d003      	beq.n	800e172 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e16e:	2200      	movs	r2, #0
 800e170:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e176:	2b00      	cmp	r3, #0
 800e178:	d003      	beq.n	800e182 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17e:	2200      	movs	r2, #0
 800e180:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e190:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	2200      	movs	r2, #0
 800e196:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d003      	beq.n	800e1a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d003      	beq.n	800e1b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f022 0201 	bic.w	r2, r2, #1
 800e1c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	2b60      	cmp	r3, #96	@ 0x60
 800e1d2:	d10e      	bne.n	800e1f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e1ea:	6978      	ldr	r0, [r7, #20]
 800e1ec:	f7fe fcb0 	bl	800cb50 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e1f0:	e027      	b.n	800e242 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e1f2:	7cfb      	ldrb	r3, [r7, #19]
 800e1f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e1f8:	2b28      	cmp	r3, #40	@ 0x28
 800e1fa:	d117      	bne.n	800e22c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f042 0201 	orr.w	r2, r2, #1
 800e20a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e21a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2200      	movs	r2, #0
 800e220:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2228      	movs	r2, #40	@ 0x28
 800e226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e22a:	e007      	b.n	800e23c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2220      	movs	r2, #32
 800e230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2200      	movs	r2, #0
 800e238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e23c:	6978      	ldr	r0, [r7, #20]
 800e23e:	f7fe fc7d 	bl	800cb3c <HAL_I2C_ErrorCallback>
}
 800e242:	bf00      	nop
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20000558 	.word	0x20000558
 800e250:	14f8b589 	.word	0x14f8b589

0800e254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	603b      	str	r3, [r7, #0]
 800e260:	4613      	mov	r3, r2
 800e262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e264:	e048      	b.n	800e2f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e26c:	d044      	beq.n	800e2f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e26e:	f7fc fbb3 	bl	800a9d8 <HAL_GetTick>
 800e272:	4602      	mov	r2, r0
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	1ad3      	subs	r3, r2, r3
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d302      	bcc.n	800e284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d139      	bne.n	800e2f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	0c1b      	lsrs	r3, r3, #16
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d10d      	bne.n	800e2aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	695b      	ldr	r3, [r3, #20]
 800e294:	43da      	mvns	r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	4013      	ands	r3, r2
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	bf0c      	ite	eq
 800e2a0:	2301      	moveq	r3, #1
 800e2a2:	2300      	movne	r3, #0
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	e00c      	b.n	800e2c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	699b      	ldr	r3, [r3, #24]
 800e2b0:	43da      	mvns	r2, r3
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	bf0c      	ite	eq
 800e2bc:	2301      	moveq	r3, #1
 800e2be:	2300      	movne	r3, #0
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	79fb      	ldrb	r3, [r7, #7]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d116      	bne.n	800e2f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2e4:	f043 0220 	orr.w	r2, r3, #32
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e023      	b.n	800e340 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	0c1b      	lsrs	r3, r3, #16
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d10d      	bne.n	800e31e <I2C_WaitOnFlagUntilTimeout+0xca>
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	695b      	ldr	r3, [r3, #20]
 800e308:	43da      	mvns	r2, r3
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	4013      	ands	r3, r2
 800e30e:	b29b      	uxth	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	bf0c      	ite	eq
 800e314:	2301      	moveq	r3, #1
 800e316:	2300      	movne	r3, #0
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	461a      	mov	r2, r3
 800e31c:	e00c      	b.n	800e338 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	43da      	mvns	r2, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4013      	ands	r3, r2
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bf0c      	ite	eq
 800e330:	2301      	moveq	r3, #1
 800e332:	2300      	movne	r3, #0
 800e334:	b2db      	uxtb	r3, r3
 800e336:	461a      	mov	r2, r3
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d093      	beq.n	800e266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
 800e354:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e356:	e071      	b.n	800e43c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	695b      	ldr	r3, [r3, #20]
 800e35e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e366:	d123      	bne.n	800e3b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e376:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2220      	movs	r2, #32
 800e38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e39c:	f043 0204 	orr.w	r2, r3, #4
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e067      	b.n	800e480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3b6:	d041      	beq.n	800e43c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3b8:	f7fc fb0e 	bl	800a9d8 <HAL_GetTick>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d302      	bcc.n	800e3ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d136      	bne.n	800e43c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	0c1b      	lsrs	r3, r3, #16
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d10c      	bne.n	800e3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	695b      	ldr	r3, [r3, #20]
 800e3de:	43da      	mvns	r2, r3
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	bf14      	ite	ne
 800e3ea:	2301      	movne	r3, #1
 800e3ec:	2300      	moveq	r3, #0
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	e00b      	b.n	800e40a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	43da      	mvns	r2, r3
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	bf14      	ite	ne
 800e404:	2301      	movne	r3, #1
 800e406:	2300      	moveq	r3, #0
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d016      	beq.n	800e43c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2220      	movs	r2, #32
 800e418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e428:	f043 0220 	orr.w	r2, r3, #32
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e438:	2301      	movs	r3, #1
 800e43a:	e021      	b.n	800e480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	0c1b      	lsrs	r3, r3, #16
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b01      	cmp	r3, #1
 800e444:	d10c      	bne.n	800e460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	695b      	ldr	r3, [r3, #20]
 800e44c:	43da      	mvns	r2, r3
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	4013      	ands	r3, r2
 800e452:	b29b      	uxth	r3, r3
 800e454:	2b00      	cmp	r3, #0
 800e456:	bf14      	ite	ne
 800e458:	2301      	movne	r3, #1
 800e45a:	2300      	moveq	r3, #0
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	e00b      	b.n	800e478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	43da      	mvns	r2, r3
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	4013      	ands	r3, r2
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	bf14      	ite	ne
 800e472:	2301      	movne	r3, #1
 800e474:	2300      	moveq	r3, #0
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f47f af6d 	bne.w	800e358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e47e:	2300      	movs	r3, #0
}
 800e480:	4618      	mov	r0, r3
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e494:	e034      	b.n	800e500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 f915 	bl	800e6c6 <I2C_IsAcknowledgeFailed>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e034      	b.n	800e510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4ac:	d028      	beq.n	800e500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4ae:	f7fc fa93 	bl	800a9d8 <HAL_GetTick>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d302      	bcc.n	800e4c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d11d      	bne.n	800e500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4ce:	2b80      	cmp	r3, #128	@ 0x80
 800e4d0:	d016      	beq.n	800e500 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2220      	movs	r2, #32
 800e4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ec:	f043 0220 	orr.w	r2, r3, #32
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e007      	b.n	800e510 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	695b      	ldr	r3, [r3, #20]
 800e506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e50a:	2b80      	cmp	r3, #128	@ 0x80
 800e50c:	d1c3      	bne.n	800e496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e524:	e034      	b.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 f8cd 	bl	800e6c6 <I2C_IsAcknowledgeFailed>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e034      	b.n	800e5a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e53c:	d028      	beq.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e53e:	f7fc fa4b 	bl	800a9d8 <HAL_GetTick>
 800e542:	4602      	mov	r2, r0
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d302      	bcc.n	800e554 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11d      	bne.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d016      	beq.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2220      	movs	r2, #32
 800e56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2200      	movs	r2, #0
 800e574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e57c:	f043 0220 	orr.w	r2, r3, #32
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	e007      	b.n	800e5a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	695b      	ldr	r3, [r3, #20]
 800e596:	f003 0304 	and.w	r3, r3, #4
 800e59a:	2b04      	cmp	r3, #4
 800e59c:	d1c3      	bne.n	800e526 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e5b4:	4b13      	ldr	r3, [pc, #76]	@ (800e604 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	08db      	lsrs	r3, r3, #3
 800e5ba:	4a13      	ldr	r2, [pc, #76]	@ (800e608 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c0:	0a1a      	lsrs	r2, r3, #8
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4413      	add	r3, r2
 800e5c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d107      	bne.n	800e5e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5da:	f043 0220 	orr.w	r2, r3, #32
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e008      	b.n	800e5f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e5f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5f4:	d0e9      	beq.n	800e5ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e5f6:	2300      	movs	r3, #0
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr
 800e604:	20000558 	.word	0x20000558
 800e608:	14f8b589 	.word	0x14f8b589

0800e60c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e618:	e049      	b.n	800e6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	695b      	ldr	r3, [r3, #20]
 800e620:	f003 0310 	and.w	r3, r3, #16
 800e624:	2b10      	cmp	r3, #16
 800e626:	d119      	bne.n	800e65c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f06f 0210 	mvn.w	r2, #16
 800e630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2220      	movs	r2, #32
 800e63c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2200      	movs	r2, #0
 800e654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	e030      	b.n	800e6be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e65c:	f7fc f9bc 	bl	800a9d8 <HAL_GetTick>
 800e660:	4602      	mov	r2, r0
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d302      	bcc.n	800e672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d11d      	bne.n	800e6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e67c:	2b40      	cmp	r3, #64	@ 0x40
 800e67e:	d016      	beq.n	800e6ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2220      	movs	r2, #32
 800e68a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e69a:	f043 0220 	orr.w	r2, r3, #32
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e007      	b.n	800e6be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ba:	d1ae      	bne.n	800e61a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b083      	sub	sp, #12
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	695b      	ldr	r3, [r3, #20]
 800e6d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6dc:	d11b      	bne.n	800e716 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e6e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2220      	movs	r2, #32
 800e6f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e702:	f043 0204 	orr.w	r2, r3, #4
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	e000      	b.n	800e718 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e730:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800e734:	d103      	bne.n	800e73e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2201      	movs	r2, #1
 800e73a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e73c:	e007      	b.n	800e74e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e742:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800e746:	d102      	bne.n	800e74e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2208      	movs	r2, #8
 800e74c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800e74e:	bf00      	nop
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
	...

0800e75c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d101      	bne.n	800e76e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	e267      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f003 0301 	and.w	r3, r3, #1
 800e776:	2b00      	cmp	r3, #0
 800e778:	d075      	beq.n	800e866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e77a:	4b88      	ldr	r3, [pc, #544]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	f003 030c 	and.w	r3, r3, #12
 800e782:	2b04      	cmp	r3, #4
 800e784:	d00c      	beq.n	800e7a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e786:	4b85      	ldr	r3, [pc, #532]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e78e:	2b08      	cmp	r3, #8
 800e790:	d112      	bne.n	800e7b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e792:	4b82      	ldr	r3, [pc, #520]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e79a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e79e:	d10b      	bne.n	800e7b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7a0:	4b7e      	ldr	r3, [pc, #504]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d05b      	beq.n	800e864 <HAL_RCC_OscConfig+0x108>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d157      	bne.n	800e864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e242      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7c0:	d106      	bne.n	800e7d0 <HAL_RCC_OscConfig+0x74>
 800e7c2:	4b76      	ldr	r3, [pc, #472]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a75      	ldr	r2, [pc, #468]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7cc:	6013      	str	r3, [r2, #0]
 800e7ce:	e01d      	b.n	800e80c <HAL_RCC_OscConfig+0xb0>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e7d8:	d10c      	bne.n	800e7f4 <HAL_RCC_OscConfig+0x98>
 800e7da:	4b70      	ldr	r3, [pc, #448]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a6f      	ldr	r2, [pc, #444]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e7e4:	6013      	str	r3, [r2, #0]
 800e7e6:	4b6d      	ldr	r3, [pc, #436]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a6c      	ldr	r2, [pc, #432]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	e00b      	b.n	800e80c <HAL_RCC_OscConfig+0xb0>
 800e7f4:	4b69      	ldr	r3, [pc, #420]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a68      	ldr	r2, [pc, #416]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e7fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	4b66      	ldr	r3, [pc, #408]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a65      	ldr	r2, [pc, #404]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e80a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d013      	beq.n	800e83c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e814:	f7fc f8e0 	bl	800a9d8 <HAL_GetTick>
 800e818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e81a:	e008      	b.n	800e82e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e81c:	f7fc f8dc 	bl	800a9d8 <HAL_GetTick>
 800e820:	4602      	mov	r2, r0
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	2b64      	cmp	r3, #100	@ 0x64
 800e828:	d901      	bls.n	800e82e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e207      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e82e:	4b5b      	ldr	r3, [pc, #364]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0f0      	beq.n	800e81c <HAL_RCC_OscConfig+0xc0>
 800e83a:	e014      	b.n	800e866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e83c:	f7fc f8cc 	bl	800a9d8 <HAL_GetTick>
 800e840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e842:	e008      	b.n	800e856 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e844:	f7fc f8c8 	bl	800a9d8 <HAL_GetTick>
 800e848:	4602      	mov	r2, r0
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	2b64      	cmp	r3, #100	@ 0x64
 800e850:	d901      	bls.n	800e856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e852:	2303      	movs	r3, #3
 800e854:	e1f3      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e856:	4b51      	ldr	r3, [pc, #324]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1f0      	bne.n	800e844 <HAL_RCC_OscConfig+0xe8>
 800e862:	e000      	b.n	800e866 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f003 0302 	and.w	r3, r3, #2
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d063      	beq.n	800e93a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e872:	4b4a      	ldr	r3, [pc, #296]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	f003 030c 	and.w	r3, r3, #12
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00b      	beq.n	800e896 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e87e:	4b47      	ldr	r3, [pc, #284]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e886:	2b08      	cmp	r3, #8
 800e888:	d11c      	bne.n	800e8c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e88a:	4b44      	ldr	r3, [pc, #272]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e892:	2b00      	cmp	r3, #0
 800e894:	d116      	bne.n	800e8c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e896:	4b41      	ldr	r3, [pc, #260]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f003 0302 	and.w	r3, r3, #2
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d005      	beq.n	800e8ae <HAL_RCC_OscConfig+0x152>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d001      	beq.n	800e8ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e1c7      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8ae:	4b3b      	ldr	r3, [pc, #236]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	4937      	ldr	r1, [pc, #220]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e8c2:	e03a      	b.n	800e93a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d020      	beq.n	800e90e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e8cc:	4b34      	ldr	r3, [pc, #208]	@ (800e9a0 <HAL_RCC_OscConfig+0x244>)
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8d2:	f7fc f881 	bl	800a9d8 <HAL_GetTick>
 800e8d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8d8:	e008      	b.n	800e8ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8da:	f7fc f87d 	bl	800a9d8 <HAL_GetTick>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	d901      	bls.n	800e8ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e1a8      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8ec:	4b2b      	ldr	r3, [pc, #172]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f003 0302 	and.w	r3, r3, #2
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d0f0      	beq.n	800e8da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8f8:	4b28      	ldr	r3, [pc, #160]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	4925      	ldr	r1, [pc, #148]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e908:	4313      	orrs	r3, r2
 800e90a:	600b      	str	r3, [r1, #0]
 800e90c:	e015      	b.n	800e93a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e90e:	4b24      	ldr	r3, [pc, #144]	@ (800e9a0 <HAL_RCC_OscConfig+0x244>)
 800e910:	2200      	movs	r2, #0
 800e912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e914:	f7fc f860 	bl	800a9d8 <HAL_GetTick>
 800e918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e91a:	e008      	b.n	800e92e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e91c:	f7fc f85c 	bl	800a9d8 <HAL_GetTick>
 800e920:	4602      	mov	r2, r0
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b02      	cmp	r3, #2
 800e928:	d901      	bls.n	800e92e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	e187      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e92e:	4b1b      	ldr	r3, [pc, #108]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f003 0302 	and.w	r3, r3, #2
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1f0      	bne.n	800e91c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 0308 	and.w	r3, r3, #8
 800e942:	2b00      	cmp	r3, #0
 800e944:	d036      	beq.n	800e9b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d016      	beq.n	800e97c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e94e:	4b15      	ldr	r3, [pc, #84]	@ (800e9a4 <HAL_RCC_OscConfig+0x248>)
 800e950:	2201      	movs	r2, #1
 800e952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e954:	f7fc f840 	bl	800a9d8 <HAL_GetTick>
 800e958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e95a:	e008      	b.n	800e96e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e95c:	f7fc f83c 	bl	800a9d8 <HAL_GetTick>
 800e960:	4602      	mov	r2, r0
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	2b02      	cmp	r3, #2
 800e968:	d901      	bls.n	800e96e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e96a:	2303      	movs	r3, #3
 800e96c:	e167      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e96e:	4b0b      	ldr	r3, [pc, #44]	@ (800e99c <HAL_RCC_OscConfig+0x240>)
 800e970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	2b00      	cmp	r3, #0
 800e978:	d0f0      	beq.n	800e95c <HAL_RCC_OscConfig+0x200>
 800e97a:	e01b      	b.n	800e9b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e97c:	4b09      	ldr	r3, [pc, #36]	@ (800e9a4 <HAL_RCC_OscConfig+0x248>)
 800e97e:	2200      	movs	r2, #0
 800e980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e982:	f7fc f829 	bl	800a9d8 <HAL_GetTick>
 800e986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e988:	e00e      	b.n	800e9a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e98a:	f7fc f825 	bl	800a9d8 <HAL_GetTick>
 800e98e:	4602      	mov	r2, r0
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	2b02      	cmp	r3, #2
 800e996:	d907      	bls.n	800e9a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e998:	2303      	movs	r3, #3
 800e99a:	e150      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
 800e99c:	40023800 	.word	0x40023800
 800e9a0:	42470000 	.word	0x42470000
 800e9a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9a8:	4b88      	ldr	r3, [pc, #544]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800e9aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9ac:	f003 0302 	and.w	r3, r3, #2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1ea      	bne.n	800e98a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 8097 	beq.w	800eaf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e9c6:	4b81      	ldr	r3, [pc, #516]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800e9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d10f      	bne.n	800e9f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	60bb      	str	r3, [r7, #8]
 800e9d6:	4b7d      	ldr	r3, [pc, #500]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9da:	4a7c      	ldr	r2, [pc, #496]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800e9dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9e0:	6413      	str	r3, [r2, #64]	@ 0x40
 800e9e2:	4b7a      	ldr	r3, [pc, #488]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800e9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9ea:	60bb      	str	r3, [r7, #8]
 800e9ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e9f2:	4b77      	ldr	r3, [pc, #476]	@ (800ebd0 <HAL_RCC_OscConfig+0x474>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d118      	bne.n	800ea30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e9fe:	4b74      	ldr	r3, [pc, #464]	@ (800ebd0 <HAL_RCC_OscConfig+0x474>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a73      	ldr	r2, [pc, #460]	@ (800ebd0 <HAL_RCC_OscConfig+0x474>)
 800ea04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ea0a:	f7fb ffe5 	bl	800a9d8 <HAL_GetTick>
 800ea0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea10:	e008      	b.n	800ea24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea12:	f7fb ffe1 	bl	800a9d8 <HAL_GetTick>
 800ea16:	4602      	mov	r2, r0
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d901      	bls.n	800ea24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ea20:	2303      	movs	r3, #3
 800ea22:	e10c      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea24:	4b6a      	ldr	r3, [pc, #424]	@ (800ebd0 <HAL_RCC_OscConfig+0x474>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d0f0      	beq.n	800ea12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d106      	bne.n	800ea46 <HAL_RCC_OscConfig+0x2ea>
 800ea38:	4b64      	ldr	r3, [pc, #400]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea3c:	4a63      	ldr	r2, [pc, #396]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea3e:	f043 0301 	orr.w	r3, r3, #1
 800ea42:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea44:	e01c      	b.n	800ea80 <HAL_RCC_OscConfig+0x324>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	2b05      	cmp	r3, #5
 800ea4c:	d10c      	bne.n	800ea68 <HAL_RCC_OscConfig+0x30c>
 800ea4e:	4b5f      	ldr	r3, [pc, #380]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea52:	4a5e      	ldr	r2, [pc, #376]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea54:	f043 0304 	orr.w	r3, r3, #4
 800ea58:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea5a:	4b5c      	ldr	r3, [pc, #368]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea5e:	4a5b      	ldr	r2, [pc, #364]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea60:	f043 0301 	orr.w	r3, r3, #1
 800ea64:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea66:	e00b      	b.n	800ea80 <HAL_RCC_OscConfig+0x324>
 800ea68:	4b58      	ldr	r3, [pc, #352]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6c:	4a57      	ldr	r2, [pc, #348]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea6e:	f023 0301 	bic.w	r3, r3, #1
 800ea72:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea74:	4b55      	ldr	r3, [pc, #340]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea78:	4a54      	ldr	r2, [pc, #336]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ea7a:	f023 0304 	bic.w	r3, r3, #4
 800ea7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d015      	beq.n	800eab4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea88:	f7fb ffa6 	bl	800a9d8 <HAL_GetTick>
 800ea8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ea8e:	e00a      	b.n	800eaa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea90:	f7fb ffa2 	bl	800a9d8 <HAL_GetTick>
 800ea94:	4602      	mov	r2, r0
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d901      	bls.n	800eaa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	e0cb      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eaa6:	4b49      	ldr	r3, [pc, #292]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eaa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaaa:	f003 0302 	and.w	r3, r3, #2
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d0ee      	beq.n	800ea90 <HAL_RCC_OscConfig+0x334>
 800eab2:	e014      	b.n	800eade <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eab4:	f7fb ff90 	bl	800a9d8 <HAL_GetTick>
 800eab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eaba:	e00a      	b.n	800ead2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eabc:	f7fb ff8c 	bl	800a9d8 <HAL_GetTick>
 800eac0:	4602      	mov	r2, r0
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d901      	bls.n	800ead2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800eace:	2303      	movs	r3, #3
 800ead0:	e0b5      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ead2:	4b3e      	ldr	r3, [pc, #248]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ead4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ead6:	f003 0302 	and.w	r3, r3, #2
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1ee      	bne.n	800eabc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800eade:	7dfb      	ldrb	r3, [r7, #23]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d105      	bne.n	800eaf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eae4:	4b39      	ldr	r3, [pc, #228]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eae8:	4a38      	ldr	r2, [pc, #224]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eaea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eaee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 80a1 	beq.w	800ec3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eafa:	4b34      	ldr	r3, [pc, #208]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	f003 030c 	and.w	r3, r3, #12
 800eb02:	2b08      	cmp	r3, #8
 800eb04:	d05c      	beq.n	800ebc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d141      	bne.n	800eb92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb0e:	4b31      	ldr	r3, [pc, #196]	@ (800ebd4 <HAL_RCC_OscConfig+0x478>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb14:	f7fb ff60 	bl	800a9d8 <HAL_GetTick>
 800eb18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb1a:	e008      	b.n	800eb2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb1c:	f7fb ff5c 	bl	800a9d8 <HAL_GetTick>
 800eb20:	4602      	mov	r2, r0
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d901      	bls.n	800eb2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	e087      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb2e:	4b27      	ldr	r3, [pc, #156]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1f0      	bne.n	800eb1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	69da      	ldr	r2, [r3, #28]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	431a      	orrs	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb48:	019b      	lsls	r3, r3, #6
 800eb4a:	431a      	orrs	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb50:	085b      	lsrs	r3, r3, #1
 800eb52:	3b01      	subs	r3, #1
 800eb54:	041b      	lsls	r3, r3, #16
 800eb56:	431a      	orrs	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5c:	061b      	lsls	r3, r3, #24
 800eb5e:	491b      	ldr	r1, [pc, #108]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eb60:	4313      	orrs	r3, r2
 800eb62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eb64:	4b1b      	ldr	r3, [pc, #108]	@ (800ebd4 <HAL_RCC_OscConfig+0x478>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb6a:	f7fb ff35 	bl	800a9d8 <HAL_GetTick>
 800eb6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb70:	e008      	b.n	800eb84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb72:	f7fb ff31 	bl	800a9d8 <HAL_GetTick>
 800eb76:	4602      	mov	r2, r0
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	1ad3      	subs	r3, r2, r3
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d901      	bls.n	800eb84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eb80:	2303      	movs	r3, #3
 800eb82:	e05c      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb84:	4b11      	ldr	r3, [pc, #68]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d0f0      	beq.n	800eb72 <HAL_RCC_OscConfig+0x416>
 800eb90:	e054      	b.n	800ec3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb92:	4b10      	ldr	r3, [pc, #64]	@ (800ebd4 <HAL_RCC_OscConfig+0x478>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb98:	f7fb ff1e 	bl	800a9d8 <HAL_GetTick>
 800eb9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb9e:	e008      	b.n	800ebb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eba0:	f7fb ff1a 	bl	800a9d8 <HAL_GetTick>
 800eba4:	4602      	mov	r2, r0
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d901      	bls.n	800ebb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	e045      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebb2:	4b06      	ldr	r3, [pc, #24]	@ (800ebcc <HAL_RCC_OscConfig+0x470>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1f0      	bne.n	800eba0 <HAL_RCC_OscConfig+0x444>
 800ebbe:	e03d      	b.n	800ec3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d107      	bne.n	800ebd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e038      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
 800ebcc:	40023800 	.word	0x40023800
 800ebd0:	40007000 	.word	0x40007000
 800ebd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ebd8:	4b1b      	ldr	r3, [pc, #108]	@ (800ec48 <HAL_RCC_OscConfig+0x4ec>)
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d028      	beq.n	800ec38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d121      	bne.n	800ec38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d11a      	bne.n	800ec38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ec08:	4013      	ands	r3, r2
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ec0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d111      	bne.n	800ec38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec1e:	085b      	lsrs	r3, r3, #1
 800ec20:	3b01      	subs	r3, #1
 800ec22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d107      	bne.n	800ec38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d001      	beq.n	800ec3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e000      	b.n	800ec3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	40023800 	.word	0x40023800

0800ec4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e0cc      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec60:	4b68      	ldr	r3, [pc, #416]	@ (800ee04 <HAL_RCC_ClockConfig+0x1b8>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f003 0307 	and.w	r3, r3, #7
 800ec68:	683a      	ldr	r2, [r7, #0]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d90c      	bls.n	800ec88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec6e:	4b65      	ldr	r3, [pc, #404]	@ (800ee04 <HAL_RCC_ClockConfig+0x1b8>)
 800ec70:	683a      	ldr	r2, [r7, #0]
 800ec72:	b2d2      	uxtb	r2, r2
 800ec74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec76:	4b63      	ldr	r3, [pc, #396]	@ (800ee04 <HAL_RCC_ClockConfig+0x1b8>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 0307 	and.w	r3, r3, #7
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d001      	beq.n	800ec88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e0b8      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d020      	beq.n	800ecd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 0304 	and.w	r3, r3, #4
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d005      	beq.n	800ecac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eca0:	4b59      	ldr	r3, [pc, #356]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	4a58      	ldr	r2, [pc, #352]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800eca6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ecaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f003 0308 	and.w	r3, r3, #8
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d005      	beq.n	800ecc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ecb8:	4b53      	ldr	r3, [pc, #332]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ecba:	689b      	ldr	r3, [r3, #8]
 800ecbc:	4a52      	ldr	r2, [pc, #328]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ecbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ecc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ecc4:	4b50      	ldr	r3, [pc, #320]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	494d      	ldr	r1, [pc, #308]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f003 0301 	and.w	r3, r3, #1
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d044      	beq.n	800ed6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d107      	bne.n	800ecfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecea:	4b47      	ldr	r3, [pc, #284]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d119      	bne.n	800ed2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e07f      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d003      	beq.n	800ed0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d107      	bne.n	800ed1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed0a:	4b3f      	ldr	r3, [pc, #252]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d109      	bne.n	800ed2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed16:	2301      	movs	r3, #1
 800ed18:	e06f      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed1a:	4b3b      	ldr	r3, [pc, #236]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f003 0302 	and.w	r3, r3, #2
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e067      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed2a:	4b37      	ldr	r3, [pc, #220]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	f023 0203 	bic.w	r2, r3, #3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	4934      	ldr	r1, [pc, #208]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ed3c:	f7fb fe4c 	bl	800a9d8 <HAL_GetTick>
 800ed40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed42:	e00a      	b.n	800ed5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed44:	f7fb fe48 	bl	800a9d8 <HAL_GetTick>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d901      	bls.n	800ed5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ed56:	2303      	movs	r3, #3
 800ed58:	e04f      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed5a:	4b2b      	ldr	r3, [pc, #172]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f003 020c 	and.w	r2, r3, #12
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d1eb      	bne.n	800ed44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed6c:	4b25      	ldr	r3, [pc, #148]	@ (800ee04 <HAL_RCC_ClockConfig+0x1b8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f003 0307 	and.w	r3, r3, #7
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d20c      	bcs.n	800ed94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed7a:	4b22      	ldr	r3, [pc, #136]	@ (800ee04 <HAL_RCC_ClockConfig+0x1b8>)
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	b2d2      	uxtb	r2, r2
 800ed80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed82:	4b20      	ldr	r3, [pc, #128]	@ (800ee04 <HAL_RCC_ClockConfig+0x1b8>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f003 0307 	and.w	r3, r3, #7
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d001      	beq.n	800ed94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ed90:	2301      	movs	r3, #1
 800ed92:	e032      	b.n	800edfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f003 0304 	and.w	r3, r3, #4
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d008      	beq.n	800edb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eda0:	4b19      	ldr	r3, [pc, #100]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	4916      	ldr	r1, [pc, #88]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800edae:	4313      	orrs	r3, r2
 800edb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f003 0308 	and.w	r3, r3, #8
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d009      	beq.n	800edd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800edbe:	4b12      	ldr	r3, [pc, #72]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	691b      	ldr	r3, [r3, #16]
 800edca:	00db      	lsls	r3, r3, #3
 800edcc:	490e      	ldr	r1, [pc, #56]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800edce:	4313      	orrs	r3, r2
 800edd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800edd2:	f000 f821 	bl	800ee18 <HAL_RCC_GetSysClockFreq>
 800edd6:	4602      	mov	r2, r0
 800edd8:	4b0b      	ldr	r3, [pc, #44]	@ (800ee08 <HAL_RCC_ClockConfig+0x1bc>)
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	091b      	lsrs	r3, r3, #4
 800edde:	f003 030f 	and.w	r3, r3, #15
 800ede2:	490a      	ldr	r1, [pc, #40]	@ (800ee0c <HAL_RCC_ClockConfig+0x1c0>)
 800ede4:	5ccb      	ldrb	r3, [r1, r3]
 800ede6:	fa22 f303 	lsr.w	r3, r2, r3
 800edea:	4a09      	ldr	r2, [pc, #36]	@ (800ee10 <HAL_RCC_ClockConfig+0x1c4>)
 800edec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800edee:	4b09      	ldr	r3, [pc, #36]	@ (800ee14 <HAL_RCC_ClockConfig+0x1c8>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fb fdac 	bl	800a950 <HAL_InitTick>

  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	40023c00 	.word	0x40023c00
 800ee08:	40023800 	.word	0x40023800
 800ee0c:	08013718 	.word	0x08013718
 800ee10:	20000558 	.word	0x20000558
 800ee14:	2000055c 	.word	0x2000055c

0800ee18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ee18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee1c:	b094      	sub	sp, #80	@ 0x50
 800ee1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ee20:	2300      	movs	r3, #0
 800ee22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800ee24:	2300      	movs	r3, #0
 800ee26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee30:	4b79      	ldr	r3, [pc, #484]	@ (800f018 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	f003 030c 	and.w	r3, r3, #12
 800ee38:	2b08      	cmp	r3, #8
 800ee3a:	d00d      	beq.n	800ee58 <HAL_RCC_GetSysClockFreq+0x40>
 800ee3c:	2b08      	cmp	r3, #8
 800ee3e:	f200 80e1 	bhi.w	800f004 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d002      	beq.n	800ee4c <HAL_RCC_GetSysClockFreq+0x34>
 800ee46:	2b04      	cmp	r3, #4
 800ee48:	d003      	beq.n	800ee52 <HAL_RCC_GetSysClockFreq+0x3a>
 800ee4a:	e0db      	b.n	800f004 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ee4c:	4b73      	ldr	r3, [pc, #460]	@ (800f01c <HAL_RCC_GetSysClockFreq+0x204>)
 800ee4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ee50:	e0db      	b.n	800f00a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ee52:	4b73      	ldr	r3, [pc, #460]	@ (800f020 <HAL_RCC_GetSysClockFreq+0x208>)
 800ee54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ee56:	e0d8      	b.n	800f00a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ee58:	4b6f      	ldr	r3, [pc, #444]	@ (800f018 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ee62:	4b6d      	ldr	r3, [pc, #436]	@ (800f018 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d063      	beq.n	800ef36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee6e:	4b6a      	ldr	r3, [pc, #424]	@ (800f018 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	099b      	lsrs	r3, r3, #6
 800ee74:	2200      	movs	r2, #0
 800ee76:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ee7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee80:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee82:	2300      	movs	r3, #0
 800ee84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ee8a:	4622      	mov	r2, r4
 800ee8c:	462b      	mov	r3, r5
 800ee8e:	f04f 0000 	mov.w	r0, #0
 800ee92:	f04f 0100 	mov.w	r1, #0
 800ee96:	0159      	lsls	r1, r3, #5
 800ee98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee9c:	0150      	lsls	r0, r2, #5
 800ee9e:	4602      	mov	r2, r0
 800eea0:	460b      	mov	r3, r1
 800eea2:	4621      	mov	r1, r4
 800eea4:	1a51      	subs	r1, r2, r1
 800eea6:	6139      	str	r1, [r7, #16]
 800eea8:	4629      	mov	r1, r5
 800eeaa:	eb63 0301 	sbc.w	r3, r3, r1
 800eeae:	617b      	str	r3, [r7, #20]
 800eeb0:	f04f 0200 	mov.w	r2, #0
 800eeb4:	f04f 0300 	mov.w	r3, #0
 800eeb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800eebc:	4659      	mov	r1, fp
 800eebe:	018b      	lsls	r3, r1, #6
 800eec0:	4651      	mov	r1, sl
 800eec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eec6:	4651      	mov	r1, sl
 800eec8:	018a      	lsls	r2, r1, #6
 800eeca:	4651      	mov	r1, sl
 800eecc:	ebb2 0801 	subs.w	r8, r2, r1
 800eed0:	4659      	mov	r1, fp
 800eed2:	eb63 0901 	sbc.w	r9, r3, r1
 800eed6:	f04f 0200 	mov.w	r2, #0
 800eeda:	f04f 0300 	mov.w	r3, #0
 800eede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eeea:	4690      	mov	r8, r2
 800eeec:	4699      	mov	r9, r3
 800eeee:	4623      	mov	r3, r4
 800eef0:	eb18 0303 	adds.w	r3, r8, r3
 800eef4:	60bb      	str	r3, [r7, #8]
 800eef6:	462b      	mov	r3, r5
 800eef8:	eb49 0303 	adc.w	r3, r9, r3
 800eefc:	60fb      	str	r3, [r7, #12]
 800eefe:	f04f 0200 	mov.w	r2, #0
 800ef02:	f04f 0300 	mov.w	r3, #0
 800ef06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	024b      	lsls	r3, r1, #9
 800ef0e:	4621      	mov	r1, r4
 800ef10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ef14:	4621      	mov	r1, r4
 800ef16:	024a      	lsls	r2, r1, #9
 800ef18:	4610      	mov	r0, r2
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef1e:	2200      	movs	r2, #0
 800ef20:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ef28:	f7f1 f9b2 	bl	8000290 <__aeabi_uldivmod>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4613      	mov	r3, r2
 800ef32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef34:	e058      	b.n	800efe8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef36:	4b38      	ldr	r3, [pc, #224]	@ (800f018 <HAL_RCC_GetSysClockFreq+0x200>)
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	099b      	lsrs	r3, r3, #6
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	4618      	mov	r0, r3
 800ef40:	4611      	mov	r1, r2
 800ef42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ef46:	623b      	str	r3, [r7, #32]
 800ef48:	2300      	movs	r3, #0
 800ef4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ef50:	4642      	mov	r2, r8
 800ef52:	464b      	mov	r3, r9
 800ef54:	f04f 0000 	mov.w	r0, #0
 800ef58:	f04f 0100 	mov.w	r1, #0
 800ef5c:	0159      	lsls	r1, r3, #5
 800ef5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ef62:	0150      	lsls	r0, r2, #5
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4641      	mov	r1, r8
 800ef6a:	ebb2 0a01 	subs.w	sl, r2, r1
 800ef6e:	4649      	mov	r1, r9
 800ef70:	eb63 0b01 	sbc.w	fp, r3, r1
 800ef74:	f04f 0200 	mov.w	r2, #0
 800ef78:	f04f 0300 	mov.w	r3, #0
 800ef7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ef80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ef84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ef88:	ebb2 040a 	subs.w	r4, r2, sl
 800ef8c:	eb63 050b 	sbc.w	r5, r3, fp
 800ef90:	f04f 0200 	mov.w	r2, #0
 800ef94:	f04f 0300 	mov.w	r3, #0
 800ef98:	00eb      	lsls	r3, r5, #3
 800ef9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ef9e:	00e2      	lsls	r2, r4, #3
 800efa0:	4614      	mov	r4, r2
 800efa2:	461d      	mov	r5, r3
 800efa4:	4643      	mov	r3, r8
 800efa6:	18e3      	adds	r3, r4, r3
 800efa8:	603b      	str	r3, [r7, #0]
 800efaa:	464b      	mov	r3, r9
 800efac:	eb45 0303 	adc.w	r3, r5, r3
 800efb0:	607b      	str	r3, [r7, #4]
 800efb2:	f04f 0200 	mov.w	r2, #0
 800efb6:	f04f 0300 	mov.w	r3, #0
 800efba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800efbe:	4629      	mov	r1, r5
 800efc0:	028b      	lsls	r3, r1, #10
 800efc2:	4621      	mov	r1, r4
 800efc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800efc8:	4621      	mov	r1, r4
 800efca:	028a      	lsls	r2, r1, #10
 800efcc:	4610      	mov	r0, r2
 800efce:	4619      	mov	r1, r3
 800efd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efd2:	2200      	movs	r2, #0
 800efd4:	61bb      	str	r3, [r7, #24]
 800efd6:	61fa      	str	r2, [r7, #28]
 800efd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800efdc:	f7f1 f958 	bl	8000290 <__aeabi_uldivmod>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4613      	mov	r3, r2
 800efe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800efe8:	4b0b      	ldr	r3, [pc, #44]	@ (800f018 <HAL_RCC_GetSysClockFreq+0x200>)
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	0c1b      	lsrs	r3, r3, #16
 800efee:	f003 0303 	and.w	r3, r3, #3
 800eff2:	3301      	adds	r3, #1
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800eff8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800effa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800effc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f000:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f002:	e002      	b.n	800f00a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f004:	4b05      	ldr	r3, [pc, #20]	@ (800f01c <HAL_RCC_GetSysClockFreq+0x204>)
 800f006:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f00a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3750      	adds	r7, #80	@ 0x50
 800f010:	46bd      	mov	sp, r7
 800f012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f016:	bf00      	nop
 800f018:	40023800 	.word	0x40023800
 800f01c:	00f42400 	.word	0x00f42400
 800f020:	007a1200 	.word	0x007a1200

0800f024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f024:	b480      	push	{r7}
 800f026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f028:	4b03      	ldr	r3, [pc, #12]	@ (800f038 <HAL_RCC_GetHCLKFreq+0x14>)
 800f02a:	681b      	ldr	r3, [r3, #0]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	20000558 	.word	0x20000558

0800f03c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f040:	f7ff fff0 	bl	800f024 <HAL_RCC_GetHCLKFreq>
 800f044:	4602      	mov	r2, r0
 800f046:	4b05      	ldr	r3, [pc, #20]	@ (800f05c <HAL_RCC_GetPCLK1Freq+0x20>)
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	0a9b      	lsrs	r3, r3, #10
 800f04c:	f003 0307 	and.w	r3, r3, #7
 800f050:	4903      	ldr	r1, [pc, #12]	@ (800f060 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f052:	5ccb      	ldrb	r3, [r1, r3]
 800f054:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f058:	4618      	mov	r0, r3
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	40023800 	.word	0x40023800
 800f060:	08013728 	.word	0x08013728

0800f064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f068:	f7ff ffdc 	bl	800f024 <HAL_RCC_GetHCLKFreq>
 800f06c:	4602      	mov	r2, r0
 800f06e:	4b05      	ldr	r3, [pc, #20]	@ (800f084 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	0b5b      	lsrs	r3, r3, #13
 800f074:	f003 0307 	and.w	r3, r3, #7
 800f078:	4903      	ldr	r1, [pc, #12]	@ (800f088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f07a:	5ccb      	ldrb	r3, [r1, r3]
 800f07c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f080:	4618      	mov	r0, r3
 800f082:	bd80      	pop	{r7, pc}
 800f084:	40023800 	.word	0x40023800
 800f088:	08013728 	.word	0x08013728

0800f08c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d101      	bne.n	800f09e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	e041      	b.n	800f122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7fa fd36 	bl	8009b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	4610      	mov	r0, r2
 800f0cc:	f000 fa70 	bl	800f5b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
	...

0800f12c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d001      	beq.n	800f144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	e044      	b.n	800f1ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2202      	movs	r2, #2
 800f148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68da      	ldr	r2, [r3, #12]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f042 0201 	orr.w	r2, r2, #1
 800f15a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a1e      	ldr	r2, [pc, #120]	@ (800f1dc <HAL_TIM_Base_Start_IT+0xb0>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d018      	beq.n	800f198 <HAL_TIM_Base_Start_IT+0x6c>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f16e:	d013      	beq.n	800f198 <HAL_TIM_Base_Start_IT+0x6c>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4a1a      	ldr	r2, [pc, #104]	@ (800f1e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d00e      	beq.n	800f198 <HAL_TIM_Base_Start_IT+0x6c>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a19      	ldr	r2, [pc, #100]	@ (800f1e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d009      	beq.n	800f198 <HAL_TIM_Base_Start_IT+0x6c>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a17      	ldr	r2, [pc, #92]	@ (800f1e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d004      	beq.n	800f198 <HAL_TIM_Base_Start_IT+0x6c>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a16      	ldr	r2, [pc, #88]	@ (800f1ec <HAL_TIM_Base_Start_IT+0xc0>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d111      	bne.n	800f1bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	f003 0307 	and.w	r3, r3, #7
 800f1a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b06      	cmp	r3, #6
 800f1a8:	d010      	beq.n	800f1cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f042 0201 	orr.w	r2, r2, #1
 800f1b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1ba:	e007      	b.n	800f1cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f042 0201 	orr.w	r2, r2, #1
 800f1ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3714      	adds	r7, #20
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	40010000 	.word	0x40010000
 800f1e0:	40000400 	.word	0x40000400
 800f1e4:	40000800 	.word	0x40000800
 800f1e8:	40000c00 	.word	0x40000c00
 800f1ec:	40014000 	.word	0x40014000

0800f1f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d020      	beq.n	800f254 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f003 0302 	and.w	r3, r3, #2
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d01b      	beq.n	800f254 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f06f 0202 	mvn.w	r2, #2
 800f224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2201      	movs	r2, #1
 800f22a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	f003 0303 	and.w	r3, r3, #3
 800f236:	2b00      	cmp	r3, #0
 800f238:	d003      	beq.n	800f242 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f999 	bl	800f572 <HAL_TIM_IC_CaptureCallback>
 800f240:	e005      	b.n	800f24e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 f98b 	bl	800f55e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f99c 	bl	800f586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	f003 0304 	and.w	r3, r3, #4
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d020      	beq.n	800f2a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f003 0304 	and.w	r3, r3, #4
 800f264:	2b00      	cmp	r3, #0
 800f266:	d01b      	beq.n	800f2a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f06f 0204 	mvn.w	r2, #4
 800f270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2202      	movs	r2, #2
 800f276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	699b      	ldr	r3, [r3, #24]
 800f27e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f973 	bl	800f572 <HAL_TIM_IC_CaptureCallback>
 800f28c:	e005      	b.n	800f29a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f965 	bl	800f55e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 f976 	bl	800f586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f003 0308 	and.w	r3, r3, #8
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d020      	beq.n	800f2ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f003 0308 	and.w	r3, r3, #8
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d01b      	beq.n	800f2ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f06f 0208 	mvn.w	r2, #8
 800f2bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2204      	movs	r2, #4
 800f2c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	69db      	ldr	r3, [r3, #28]
 800f2ca:	f003 0303 	and.w	r3, r3, #3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d003      	beq.n	800f2da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f94d 	bl	800f572 <HAL_TIM_IC_CaptureCallback>
 800f2d8:	e005      	b.n	800f2e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f93f 	bl	800f55e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 f950 	bl	800f586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	f003 0310 	and.w	r3, r3, #16
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d020      	beq.n	800f338 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f003 0310 	and.w	r3, r3, #16
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01b      	beq.n	800f338 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f06f 0210 	mvn.w	r2, #16
 800f308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2208      	movs	r2, #8
 800f30e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	69db      	ldr	r3, [r3, #28]
 800f316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 f927 	bl	800f572 <HAL_TIM_IC_CaptureCallback>
 800f324:	e005      	b.n	800f332 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f919 	bl	800f55e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 f92a 	bl	800f586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2200      	movs	r2, #0
 800f336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00c      	beq.n	800f35c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f003 0301 	and.w	r3, r3, #1
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d007      	beq.n	800f35c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f06f 0201 	mvn.w	r2, #1
 800f354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7f5 f9da 	bl	8004710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00c      	beq.n	800f380 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d007      	beq.n	800f380 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fab0 	bl	800f8e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f386:	2b00      	cmp	r3, #0
 800f388:	d00c      	beq.n	800f3a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f390:	2b00      	cmp	r3, #0
 800f392:	d007      	beq.n	800f3a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f39c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 f8fb 	bl	800f59a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	f003 0320 	and.w	r3, r3, #32
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00c      	beq.n	800f3c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f003 0320 	and.w	r3, r3, #32
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d007      	beq.n	800f3c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f06f 0220 	mvn.w	r2, #32
 800f3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fa82 	bl	800f8cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3c8:	bf00      	nop
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d101      	bne.n	800f3ec <HAL_TIM_ConfigClockSource+0x1c>
 800f3e8:	2302      	movs	r3, #2
 800f3ea:	e0b4      	b.n	800f556 <HAL_TIM_ConfigClockSource+0x186>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2202      	movs	r2, #2
 800f3f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f40a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f424:	d03e      	beq.n	800f4a4 <HAL_TIM_ConfigClockSource+0xd4>
 800f426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f42a:	f200 8087 	bhi.w	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f42e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f432:	f000 8086 	beq.w	800f542 <HAL_TIM_ConfigClockSource+0x172>
 800f436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f43a:	d87f      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f43c:	2b70      	cmp	r3, #112	@ 0x70
 800f43e:	d01a      	beq.n	800f476 <HAL_TIM_ConfigClockSource+0xa6>
 800f440:	2b70      	cmp	r3, #112	@ 0x70
 800f442:	d87b      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f444:	2b60      	cmp	r3, #96	@ 0x60
 800f446:	d050      	beq.n	800f4ea <HAL_TIM_ConfigClockSource+0x11a>
 800f448:	2b60      	cmp	r3, #96	@ 0x60
 800f44a:	d877      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f44c:	2b50      	cmp	r3, #80	@ 0x50
 800f44e:	d03c      	beq.n	800f4ca <HAL_TIM_ConfigClockSource+0xfa>
 800f450:	2b50      	cmp	r3, #80	@ 0x50
 800f452:	d873      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f454:	2b40      	cmp	r3, #64	@ 0x40
 800f456:	d058      	beq.n	800f50a <HAL_TIM_ConfigClockSource+0x13a>
 800f458:	2b40      	cmp	r3, #64	@ 0x40
 800f45a:	d86f      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f45c:	2b30      	cmp	r3, #48	@ 0x30
 800f45e:	d064      	beq.n	800f52a <HAL_TIM_ConfigClockSource+0x15a>
 800f460:	2b30      	cmp	r3, #48	@ 0x30
 800f462:	d86b      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f464:	2b20      	cmp	r3, #32
 800f466:	d060      	beq.n	800f52a <HAL_TIM_ConfigClockSource+0x15a>
 800f468:	2b20      	cmp	r3, #32
 800f46a:	d867      	bhi.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d05c      	beq.n	800f52a <HAL_TIM_ConfigClockSource+0x15a>
 800f470:	2b10      	cmp	r3, #16
 800f472:	d05a      	beq.n	800f52a <HAL_TIM_ConfigClockSource+0x15a>
 800f474:	e062      	b.n	800f53c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f486:	f000 f993 	bl	800f7b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	609a      	str	r2, [r3, #8]
      break;
 800f4a2:	e04f      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f4b4:	f000 f97c 	bl	800f7b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	689a      	ldr	r2, [r3, #8]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f4c6:	609a      	str	r2, [r3, #8]
      break;
 800f4c8:	e03c      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	f000 f8f0 	bl	800f6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2150      	movs	r1, #80	@ 0x50
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 f949 	bl	800f77a <TIM_ITRx_SetConfig>
      break;
 800f4e8:	e02c      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	f000 f90f 	bl	800f71a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2160      	movs	r1, #96	@ 0x60
 800f502:	4618      	mov	r0, r3
 800f504:	f000 f939 	bl	800f77a <TIM_ITRx_SetConfig>
      break;
 800f508:	e01c      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f516:	461a      	mov	r2, r3
 800f518:	f000 f8d0 	bl	800f6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2140      	movs	r1, #64	@ 0x40
 800f522:	4618      	mov	r0, r3
 800f524:	f000 f929 	bl	800f77a <TIM_ITRx_SetConfig>
      break;
 800f528:	e00c      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4619      	mov	r1, r3
 800f534:	4610      	mov	r0, r2
 800f536:	f000 f920 	bl	800f77a <TIM_ITRx_SetConfig>
      break;
 800f53a:	e003      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f53c:	2301      	movs	r3, #1
 800f53e:	73fb      	strb	r3, [r7, #15]
      break;
 800f540:	e000      	b.n	800f544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2201      	movs	r2, #1
 800f548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f554:	7bfb      	ldrb	r3, [r7, #15]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f55e:	b480      	push	{r7}
 800f560:	b083      	sub	sp, #12
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f566:	bf00      	nop
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f572:	b480      	push	{r7}
 800f574:	b083      	sub	sp, #12
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f57a:	bf00      	nop
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f586:	b480      	push	{r7}
 800f588:	b083      	sub	sp, #12
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f58e:	bf00      	nop
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f5a2:	bf00      	nop
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
	...

0800f5b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a37      	ldr	r2, [pc, #220]	@ (800f6a0 <TIM_Base_SetConfig+0xf0>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d00f      	beq.n	800f5e8 <TIM_Base_SetConfig+0x38>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ce:	d00b      	beq.n	800f5e8 <TIM_Base_SetConfig+0x38>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a34      	ldr	r2, [pc, #208]	@ (800f6a4 <TIM_Base_SetConfig+0xf4>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d007      	beq.n	800f5e8 <TIM_Base_SetConfig+0x38>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a33      	ldr	r2, [pc, #204]	@ (800f6a8 <TIM_Base_SetConfig+0xf8>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d003      	beq.n	800f5e8 <TIM_Base_SetConfig+0x38>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a32      	ldr	r2, [pc, #200]	@ (800f6ac <TIM_Base_SetConfig+0xfc>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d108      	bne.n	800f5fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a28      	ldr	r2, [pc, #160]	@ (800f6a0 <TIM_Base_SetConfig+0xf0>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d01b      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f608:	d017      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a25      	ldr	r2, [pc, #148]	@ (800f6a4 <TIM_Base_SetConfig+0xf4>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d013      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a24      	ldr	r2, [pc, #144]	@ (800f6a8 <TIM_Base_SetConfig+0xf8>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d00f      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a23      	ldr	r2, [pc, #140]	@ (800f6ac <TIM_Base_SetConfig+0xfc>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d00b      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a22      	ldr	r2, [pc, #136]	@ (800f6b0 <TIM_Base_SetConfig+0x100>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d007      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a21      	ldr	r2, [pc, #132]	@ (800f6b4 <TIM_Base_SetConfig+0x104>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d003      	beq.n	800f63a <TIM_Base_SetConfig+0x8a>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a20      	ldr	r2, [pc, #128]	@ (800f6b8 <TIM_Base_SetConfig+0x108>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d108      	bne.n	800f64c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	4313      	orrs	r3, r2
 800f64a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	4313      	orrs	r3, r2
 800f658:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	689a      	ldr	r2, [r3, #8]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4a0c      	ldr	r2, [pc, #48]	@ (800f6a0 <TIM_Base_SetConfig+0xf0>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d103      	bne.n	800f67a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	691a      	ldr	r2, [r3, #16]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f043 0204 	orr.w	r2, r3, #4
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	68fa      	ldr	r2, [r7, #12]
 800f690:	601a      	str	r2, [r3, #0]
}
 800f692:	bf00      	nop
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	40010000 	.word	0x40010000
 800f6a4:	40000400 	.word	0x40000400
 800f6a8:	40000800 	.word	0x40000800
 800f6ac:	40000c00 	.word	0x40000c00
 800f6b0:	40014000 	.word	0x40014000
 800f6b4:	40014400 	.word	0x40014400
 800f6b8:	40014800 	.word	0x40014800

0800f6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	f023 0201 	bic.w	r2, r3, #1
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	699b      	ldr	r3, [r3, #24]
 800f6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f023 030a 	bic.w	r3, r3, #10
 800f6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	621a      	str	r2, [r3, #32]
}
 800f70e:	bf00      	nop
 800f710:	371c      	adds	r7, #28
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b087      	sub	sp, #28
 800f71e:	af00      	add	r7, sp, #0
 800f720:	60f8      	str	r0, [r7, #12]
 800f722:	60b9      	str	r1, [r7, #8]
 800f724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6a1b      	ldr	r3, [r3, #32]
 800f730:	f023 0210 	bic.w	r2, r3, #16
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	031b      	lsls	r3, r3, #12
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f756:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	011b      	lsls	r3, r3, #4
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	4313      	orrs	r3, r2
 800f760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	693a      	ldr	r2, [r7, #16]
 800f766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	621a      	str	r2, [r3, #32]
}
 800f76e:	bf00      	nop
 800f770:	371c      	adds	r7, #28
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr

0800f77a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f77a:	b480      	push	{r7}
 800f77c:	b085      	sub	sp, #20
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
 800f782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f792:	683a      	ldr	r2, [r7, #0]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	4313      	orrs	r3, r2
 800f798:	f043 0307 	orr.w	r3, r3, #7
 800f79c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	609a      	str	r2, [r3, #8]
}
 800f7a4:	bf00      	nop
 800f7a6:	3714      	adds	r7, #20
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b087      	sub	sp, #28
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f7ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	021a      	lsls	r2, r3, #8
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	431a      	orrs	r2, r3
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	697a      	ldr	r2, [r7, #20]
 800f7e2:	609a      	str	r2, [r3, #8]
}
 800f7e4:	bf00      	nop
 800f7e6:	371c      	adds	r7, #28
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f800:	2b01      	cmp	r3, #1
 800f802:	d101      	bne.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f804:	2302      	movs	r3, #2
 800f806:	e050      	b.n	800f8aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2202      	movs	r2, #2
 800f814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f82e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	4313      	orrs	r3, r2
 800f838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	68fa      	ldr	r2, [r7, #12]
 800f840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a1c      	ldr	r2, [pc, #112]	@ (800f8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d018      	beq.n	800f87e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f854:	d013      	beq.n	800f87e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a18      	ldr	r2, [pc, #96]	@ (800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d00e      	beq.n	800f87e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a16      	ldr	r2, [pc, #88]	@ (800f8c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d009      	beq.n	800f87e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a15      	ldr	r2, [pc, #84]	@ (800f8c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d004      	beq.n	800f87e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a13      	ldr	r2, [pc, #76]	@ (800f8c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d10c      	bne.n	800f898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	4313      	orrs	r3, r2
 800f88e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2201      	movs	r2, #1
 800f89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	40010000 	.word	0x40010000
 800f8bc:	40000400 	.word	0x40000400
 800f8c0:	40000800 	.word	0x40000800
 800f8c4:	40000c00 	.word	0x40000c00
 800f8c8:	40014000 	.word	0x40014000

0800f8cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d101      	bne.n	800f906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f902:	2301      	movs	r3, #1
 800f904:	e042      	b.n	800f98c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d106      	bne.n	800f920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7fa f928 	bl	8009b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2224      	movs	r2, #36	@ 0x24
 800f924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68da      	ldr	r2, [r3, #12]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fe15 	bl	8010568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	691a      	ldr	r2, [r3, #16]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f94c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	695a      	ldr	r2, [r3, #20]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f95c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68da      	ldr	r2, [r3, #12]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f96c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2220      	movs	r2, #32
 800f978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2220      	movs	r2, #32
 800f980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b08a      	sub	sp, #40	@ 0x28
 800f998:	af02      	add	r7, sp, #8
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	603b      	str	r3, [r7, #0]
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b20      	cmp	r3, #32
 800f9b2:	d175      	bne.n	800faa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d002      	beq.n	800f9c0 <HAL_UART_Transmit+0x2c>
 800f9ba:	88fb      	ldrh	r3, [r7, #6]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d101      	bne.n	800f9c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e06e      	b.n	800faa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2221      	movs	r2, #33	@ 0x21
 800f9ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f9d2:	f7fb f801 	bl	800a9d8 <HAL_GetTick>
 800f9d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	88fa      	ldrh	r2, [r7, #6]
 800f9dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	88fa      	ldrh	r2, [r7, #6]
 800f9e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	689b      	ldr	r3, [r3, #8]
 800f9e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f9ec:	d108      	bne.n	800fa00 <HAL_UART_Transmit+0x6c>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d104      	bne.n	800fa00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	61bb      	str	r3, [r7, #24]
 800f9fe:	e003      	b.n	800fa08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa04:	2300      	movs	r3, #0
 800fa06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fa08:	e02e      	b.n	800fa68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	9300      	str	r3, [sp, #0]
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	2200      	movs	r2, #0
 800fa12:	2180      	movs	r1, #128	@ 0x80
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f000 fbb3 	bl	8010180 <UART_WaitOnFlagUntilTimeout>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d005      	beq.n	800fa2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2220      	movs	r2, #32
 800fa24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800fa28:	2303      	movs	r3, #3
 800fa2a:	e03a      	b.n	800faa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10b      	bne.n	800fa4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	3302      	adds	r3, #2
 800fa46:	61bb      	str	r3, [r7, #24]
 800fa48:	e007      	b.n	800fa5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	781a      	ldrb	r2, [r3, #0]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	3301      	adds	r3, #1
 800fa58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	3b01      	subs	r3, #1
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1cb      	bne.n	800fa0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	2140      	movs	r1, #64	@ 0x40
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f000 fb7f 	bl	8010180 <UART_WaitOnFlagUntilTimeout>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d005      	beq.n	800fa94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2220      	movs	r2, #32
 800fa8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800fa90:	2303      	movs	r3, #3
 800fa92:	e006      	b.n	800faa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2220      	movs	r2, #32
 800fa98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	e000      	b.n	800faa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800faa0:	2302      	movs	r3, #2
  }
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3720      	adds	r7, #32
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b08a      	sub	sp, #40	@ 0x28
 800faae:	af02      	add	r7, sp, #8
 800fab0:	60f8      	str	r0, [r7, #12]
 800fab2:	60b9      	str	r1, [r7, #8]
 800fab4:	603b      	str	r3, [r7, #0]
 800fab6:	4613      	mov	r3, r2
 800fab8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800faba:	2300      	movs	r3, #0
 800fabc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	2b20      	cmp	r3, #32
 800fac8:	f040 8081 	bne.w	800fbce <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <HAL_UART_Receive+0x2e>
 800fad2:	88fb      	ldrh	r3, [r7, #6]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d101      	bne.n	800fadc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800fad8:	2301      	movs	r3, #1
 800fada:	e079      	b.n	800fbd0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2200      	movs	r2, #0
 800fae0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2222      	movs	r2, #34	@ 0x22
 800fae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800faf0:	f7fa ff72 	bl	800a9d8 <HAL_GetTick>
 800faf4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	88fa      	ldrh	r2, [r7, #6]
 800fafa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	88fa      	ldrh	r2, [r7, #6]
 800fb00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb0a:	d108      	bne.n	800fb1e <HAL_UART_Receive+0x74>
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	691b      	ldr	r3, [r3, #16]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d104      	bne.n	800fb1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800fb14:	2300      	movs	r3, #0
 800fb16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	e003      	b.n	800fb26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800fb26:	e047      	b.n	800fbb8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	2120      	movs	r1, #32
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f000 fb24 	bl	8010180 <UART_WaitOnFlagUntilTimeout>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d005      	beq.n	800fb4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2220      	movs	r2, #32
 800fb42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800fb46:	2303      	movs	r3, #3
 800fb48:	e042      	b.n	800fbd0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10c      	bne.n	800fb6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	3302      	adds	r3, #2
 800fb66:	61bb      	str	r3, [r7, #24]
 800fb68:	e01f      	b.n	800fbaa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb72:	d007      	beq.n	800fb84 <HAL_UART_Receive+0xda>
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d10a      	bne.n	800fb92 <HAL_UART_Receive+0xe8>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d106      	bne.n	800fb92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	b2da      	uxtb	r2, r3
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	701a      	strb	r2, [r3, #0]
 800fb90:	e008      	b.n	800fba4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb9e:	b2da      	uxtb	r2, r3
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	3301      	adds	r3, #1
 800fba8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d1b2      	bne.n	800fb28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2220      	movs	r2, #32
 800fbc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e000      	b.n	800fbd0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800fbce:	2302      	movs	r3, #2
  }
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3720      	adds	r7, #32
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b0ba      	sub	sp, #232	@ 0xe8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	695b      	ldr	r3, [r3, #20]
 800fbfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800fc04:	2300      	movs	r3, #0
 800fc06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc0e:	f003 030f 	and.w	r3, r3, #15
 800fc12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800fc16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d10f      	bne.n	800fc3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc22:	f003 0320 	and.w	r3, r3, #32
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d009      	beq.n	800fc3e <HAL_UART_IRQHandler+0x66>
 800fc2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc2e:	f003 0320 	and.w	r3, r3, #32
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d003      	beq.n	800fc3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 fbd7 	bl	80103ea <UART_Receive_IT>
      return;
 800fc3c:	e273      	b.n	8010126 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fc3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 80de 	beq.w	800fe04 <HAL_UART_IRQHandler+0x22c>
 800fc48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc4c:	f003 0301 	and.w	r3, r3, #1
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d106      	bne.n	800fc62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 80d1 	beq.w	800fe04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00b      	beq.n	800fc86 <HAL_UART_IRQHandler+0xae>
 800fc6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d005      	beq.n	800fc86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc7e:	f043 0201 	orr.w	r2, r3, #1
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fc86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc8a:	f003 0304 	and.w	r3, r3, #4
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d00b      	beq.n	800fcaa <HAL_UART_IRQHandler+0xd2>
 800fc92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc96:	f003 0301 	and.w	r3, r3, #1
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d005      	beq.n	800fcaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fca2:	f043 0202 	orr.w	r2, r3, #2
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcae:	f003 0302 	and.w	r3, r3, #2
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00b      	beq.n	800fcce <HAL_UART_IRQHandler+0xf6>
 800fcb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d005      	beq.n	800fcce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcc6:	f043 0204 	orr.w	r2, r3, #4
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fcce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcd2:	f003 0308 	and.w	r3, r3, #8
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d011      	beq.n	800fcfe <HAL_UART_IRQHandler+0x126>
 800fcda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcde:	f003 0320 	and.w	r3, r3, #32
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d105      	bne.n	800fcf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d005      	beq.n	800fcfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcf6:	f043 0208 	orr.w	r2, r3, #8
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f000 820a 	beq.w	801011c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fd08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd0c:	f003 0320 	and.w	r3, r3, #32
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d008      	beq.n	800fd26 <HAL_UART_IRQHandler+0x14e>
 800fd14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd18:	f003 0320 	and.w	r3, r3, #32
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fb62 	bl	80103ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd30:	2b40      	cmp	r3, #64	@ 0x40
 800fd32:	bf0c      	ite	eq
 800fd34:	2301      	moveq	r3, #1
 800fd36:	2300      	movne	r3, #0
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd42:	f003 0308 	and.w	r3, r3, #8
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d103      	bne.n	800fd52 <HAL_UART_IRQHandler+0x17a>
 800fd4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d04f      	beq.n	800fdf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 fa6d 	bl	8010232 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	695b      	ldr	r3, [r3, #20]
 800fd5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd62:	2b40      	cmp	r3, #64	@ 0x40
 800fd64:	d141      	bne.n	800fdea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3314      	adds	r3, #20
 800fd6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fd74:	e853 3f00 	ldrex	r3, [r3]
 800fd78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fd7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	3314      	adds	r3, #20
 800fd8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fd92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fd96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fd9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fda2:	e841 2300 	strex	r3, r2, [r1]
 800fda6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fdaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d1d9      	bne.n	800fd66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d013      	beq.n	800fde2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdbe:	4a8a      	ldr	r2, [pc, #552]	@ (800ffe8 <HAL_UART_IRQHandler+0x410>)
 800fdc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fb f806 	bl	800add8 <HAL_DMA_Abort_IT>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d016      	beq.n	800fe00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fddc:	4610      	mov	r0, r2
 800fdde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fde0:	e00e      	b.n	800fe00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f9b6 	bl	8010154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fde8:	e00a      	b.n	800fe00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f9b2 	bl	8010154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdf0:	e006      	b.n	800fe00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f9ae 	bl	8010154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800fdfe:	e18d      	b.n	801011c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe00:	bf00      	nop
    return;
 800fe02:	e18b      	b.n	801011c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	f040 8167 	bne.w	80100dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fe0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe12:	f003 0310 	and.w	r3, r3, #16
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f000 8160 	beq.w	80100dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800fe1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe20:	f003 0310 	and.w	r3, r3, #16
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 8159 	beq.w	80100dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	60bb      	str	r3, [r7, #8]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	60bb      	str	r3, [r7, #8]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	60bb      	str	r3, [r7, #8]
 800fe3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	695b      	ldr	r3, [r3, #20]
 800fe46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe4a:	2b40      	cmp	r3, #64	@ 0x40
 800fe4c:	f040 80ce 	bne.w	800ffec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fe5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 80a9 	beq.w	800ffb8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fe6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	f080 80a2 	bcs.w	800ffb8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe80:	69db      	ldr	r3, [r3, #28]
 800fe82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe86:	f000 8088 	beq.w	800ff9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	330c      	adds	r3, #12
 800fe90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fe98:	e853 3f00 	ldrex	r3, [r3]
 800fe9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	330c      	adds	r3, #12
 800feb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800feb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800feba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800febe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fec6:	e841 2300 	strex	r3, r2, [r1]
 800feca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d1d9      	bne.n	800fe8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	3314      	adds	r3, #20
 800fedc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fee0:	e853 3f00 	ldrex	r3, [r3]
 800fee4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fee8:	f023 0301 	bic.w	r3, r3, #1
 800feec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	3314      	adds	r3, #20
 800fef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fefa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fefe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff06:	e841 2300 	strex	r3, r2, [r1]
 800ff0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d1e1      	bne.n	800fed6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3314      	adds	r3, #20
 800ff18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff1c:	e853 3f00 	ldrex	r3, [r3]
 800ff20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ff22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	3314      	adds	r3, #20
 800ff32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ff36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ff38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ff3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ff3e:	e841 2300 	strex	r3, r2, [r1]
 800ff42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ff44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1e3      	bne.n	800ff12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2220      	movs	r2, #32
 800ff4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff62:	e853 3f00 	ldrex	r3, [r3]
 800ff66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ff68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff6a:	f023 0310 	bic.w	r3, r3, #16
 800ff6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	330c      	adds	r3, #12
 800ff78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ff7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ff7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ff82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff84:	e841 2300 	strex	r3, r2, [r1]
 800ff88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ff8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e3      	bne.n	800ff58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fa feaf 	bl	800acf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	4619      	mov	r1, r3
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f8d9 	bl	8010168 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ffb6:	e0b3      	b.n	8010120 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ffbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	f040 80ad 	bne.w	8010120 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffca:	69db      	ldr	r3, [r3, #28]
 800ffcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ffd0:	f040 80a6 	bne.w	8010120 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ffde:	4619      	mov	r1, r3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 f8c1 	bl	8010168 <HAL_UARTEx_RxEventCallback>
      return;
 800ffe6:	e09b      	b.n	8010120 <HAL_UART_IRQHandler+0x548>
 800ffe8:	080102f9 	.word	0x080102f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010000:	b29b      	uxth	r3, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	f000 808e 	beq.w	8010124 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8010008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801000c:	2b00      	cmp	r3, #0
 801000e:	f000 8089 	beq.w	8010124 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	330c      	adds	r3, #12
 8010018:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801001a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801001c:	e853 3f00 	ldrex	r3, [r3]
 8010020:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	330c      	adds	r3, #12
 8010032:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010036:	647a      	str	r2, [r7, #68]	@ 0x44
 8010038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801003c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801003e:	e841 2300 	strex	r3, r2, [r1]
 8010042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1e3      	bne.n	8010012 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	3314      	adds	r3, #20
 8010050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010054:	e853 3f00 	ldrex	r3, [r3]
 8010058:	623b      	str	r3, [r7, #32]
   return(result);
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	f023 0301 	bic.w	r3, r3, #1
 8010060:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	3314      	adds	r3, #20
 801006a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801006e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010076:	e841 2300 	strex	r3, r2, [r1]
 801007a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801007c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1e3      	bne.n	801004a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2220      	movs	r2, #32
 8010086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2200      	movs	r2, #0
 801008e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	330c      	adds	r3, #12
 8010096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	e853 3f00 	ldrex	r3, [r3]
 801009e:	60fb      	str	r3, [r7, #12]
   return(result);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f023 0310 	bic.w	r3, r3, #16
 80100a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	330c      	adds	r3, #12
 80100b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80100b4:	61fa      	str	r2, [r7, #28]
 80100b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b8:	69b9      	ldr	r1, [r7, #24]
 80100ba:	69fa      	ldr	r2, [r7, #28]
 80100bc:	e841 2300 	strex	r3, r2, [r1]
 80100c0:	617b      	str	r3, [r7, #20]
   return(result);
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d1e3      	bne.n	8010090 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2202      	movs	r2, #2
 80100cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80100ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80100d2:	4619      	mov	r1, r3
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f847 	bl	8010168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80100da:	e023      	b.n	8010124 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80100dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d009      	beq.n	80100fc <HAL_UART_IRQHandler+0x524>
 80100e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d003      	beq.n	80100fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f910 	bl	801031a <UART_Transmit_IT>
    return;
 80100fa:	e014      	b.n	8010126 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80100fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00e      	beq.n	8010126 <HAL_UART_IRQHandler+0x54e>
 8010108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801010c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010110:	2b00      	cmp	r3, #0
 8010112:	d008      	beq.n	8010126 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 f950 	bl	80103ba <UART_EndTransmit_IT>
    return;
 801011a:	e004      	b.n	8010126 <HAL_UART_IRQHandler+0x54e>
    return;
 801011c:	bf00      	nop
 801011e:	e002      	b.n	8010126 <HAL_UART_IRQHandler+0x54e>
      return;
 8010120:	bf00      	nop
 8010122:	e000      	b.n	8010126 <HAL_UART_IRQHandler+0x54e>
      return;
 8010124:	bf00      	nop
  }
}
 8010126:	37e8      	adds	r7, #232	@ 0xe8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010134:	bf00      	nop
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010148:	bf00      	nop
 801014a:	370c      	adds	r7, #12
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr

08010154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801015c:	bf00      	nop
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	460b      	mov	r3, r1
 8010172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010174:	bf00      	nop
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b086      	sub	sp, #24
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	603b      	str	r3, [r7, #0]
 801018c:	4613      	mov	r3, r2
 801018e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010190:	e03b      	b.n	801020a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010192:	6a3b      	ldr	r3, [r7, #32]
 8010194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010198:	d037      	beq.n	801020a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801019a:	f7fa fc1d 	bl	800a9d8 <HAL_GetTick>
 801019e:	4602      	mov	r2, r0
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	6a3a      	ldr	r2, [r7, #32]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d302      	bcc.n	80101b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d101      	bne.n	80101b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80101b0:	2303      	movs	r3, #3
 80101b2:	e03a      	b.n	801022a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	f003 0304 	and.w	r3, r3, #4
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d023      	beq.n	801020a <UART_WaitOnFlagUntilTimeout+0x8a>
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	2b80      	cmp	r3, #128	@ 0x80
 80101c6:	d020      	beq.n	801020a <UART_WaitOnFlagUntilTimeout+0x8a>
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	2b40      	cmp	r3, #64	@ 0x40
 80101cc:	d01d      	beq.n	801020a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f003 0308 	and.w	r3, r3, #8
 80101d8:	2b08      	cmp	r3, #8
 80101da:	d116      	bne.n	801020a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80101dc:	2300      	movs	r3, #0
 80101de:	617b      	str	r3, [r7, #20]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	617b      	str	r3, [r7, #20]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	617b      	str	r3, [r7, #20]
 80101f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f000 f81d 	bl	8010232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2208      	movs	r2, #8
 80101fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2200      	movs	r2, #0
 8010202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e00f      	b.n	801022a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	4013      	ands	r3, r2
 8010214:	68ba      	ldr	r2, [r7, #8]
 8010216:	429a      	cmp	r2, r3
 8010218:	bf0c      	ite	eq
 801021a:	2301      	moveq	r3, #1
 801021c:	2300      	movne	r3, #0
 801021e:	b2db      	uxtb	r3, r3
 8010220:	461a      	mov	r2, r3
 8010222:	79fb      	ldrb	r3, [r7, #7]
 8010224:	429a      	cmp	r2, r3
 8010226:	d0b4      	beq.n	8010192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3718      	adds	r7, #24
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010232:	b480      	push	{r7}
 8010234:	b095      	sub	sp, #84	@ 0x54
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	330c      	adds	r3, #12
 8010240:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010244:	e853 3f00 	ldrex	r3, [r3]
 8010248:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801024a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801024c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	330c      	adds	r3, #12
 8010258:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801025a:	643a      	str	r2, [r7, #64]	@ 0x40
 801025c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801025e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010260:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010262:	e841 2300 	strex	r3, r2, [r1]
 8010266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026a:	2b00      	cmp	r3, #0
 801026c:	d1e5      	bne.n	801023a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3314      	adds	r3, #20
 8010274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010276:	6a3b      	ldr	r3, [r7, #32]
 8010278:	e853 3f00 	ldrex	r3, [r3]
 801027c:	61fb      	str	r3, [r7, #28]
   return(result);
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	f023 0301 	bic.w	r3, r3, #1
 8010284:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	3314      	adds	r3, #20
 801028c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801028e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010290:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010296:	e841 2300 	strex	r3, r2, [r1]
 801029a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1e5      	bne.n	801026e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d119      	bne.n	80102de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	330c      	adds	r3, #12
 80102b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	e853 3f00 	ldrex	r3, [r3]
 80102b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	f023 0310 	bic.w	r3, r3, #16
 80102c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	330c      	adds	r3, #12
 80102c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102ca:	61ba      	str	r2, [r7, #24]
 80102cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ce:	6979      	ldr	r1, [r7, #20]
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	e841 2300 	strex	r3, r2, [r1]
 80102d6:	613b      	str	r3, [r7, #16]
   return(result);
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1e5      	bne.n	80102aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2220      	movs	r2, #32
 80102e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80102ec:	bf00      	nop
 80102ee:	3754      	adds	r7, #84	@ 0x54
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2200      	movs	r2, #0
 801030a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f7ff ff21 	bl	8010154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010312:	bf00      	nop
 8010314:	3710      	adds	r7, #16
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801031a:	b480      	push	{r7}
 801031c:	b085      	sub	sp, #20
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010328:	b2db      	uxtb	r3, r3
 801032a:	2b21      	cmp	r3, #33	@ 0x21
 801032c:	d13e      	bne.n	80103ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010336:	d114      	bne.n	8010362 <UART_Transmit_IT+0x48>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d110      	bne.n	8010362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6a1b      	ldr	r3, [r3, #32]
 8010344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a1b      	ldr	r3, [r3, #32]
 801035a:	1c9a      	adds	r2, r3, #2
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	621a      	str	r2, [r3, #32]
 8010360:	e008      	b.n	8010374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a1b      	ldr	r3, [r3, #32]
 8010366:	1c59      	adds	r1, r3, #1
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	6211      	str	r1, [r2, #32]
 801036c:	781a      	ldrb	r2, [r3, #0]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010378:	b29b      	uxth	r3, r3
 801037a:	3b01      	subs	r3, #1
 801037c:	b29b      	uxth	r3, r3
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	4619      	mov	r1, r3
 8010382:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10f      	bne.n	80103a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68da      	ldr	r2, [r3, #12]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	68da      	ldr	r2, [r3, #12]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80103a8:	2300      	movs	r3, #0
 80103aa:	e000      	b.n	80103ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80103ac:	2302      	movs	r3, #2
  }
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3714      	adds	r7, #20
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr

080103ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	68da      	ldr	r2, [r3, #12]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80103d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2220      	movs	r2, #32
 80103d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7ff fea6 	bl	801012c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b08c      	sub	sp, #48	@ 0x30
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80103f6:	2300      	movs	r3, #0
 80103f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b22      	cmp	r3, #34	@ 0x22
 8010404:	f040 80aa 	bne.w	801055c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010410:	d115      	bne.n	801043e <UART_Receive_IT+0x54>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d111      	bne.n	801043e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801041e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	b29b      	uxth	r3, r3
 8010428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801042c:	b29a      	uxth	r2, r3
 801042e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010436:	1c9a      	adds	r2, r3, #2
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	629a      	str	r2, [r3, #40]	@ 0x28
 801043c:	e024      	b.n	8010488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010442:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	689b      	ldr	r3, [r3, #8]
 8010448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801044c:	d007      	beq.n	801045e <UART_Receive_IT+0x74>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d10a      	bne.n	801046c <UART_Receive_IT+0x82>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d106      	bne.n	801046c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	b2da      	uxtb	r2, r3
 8010466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010468:	701a      	strb	r2, [r3, #0]
 801046a:	e008      	b.n	801047e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	b2db      	uxtb	r3, r3
 8010474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010478:	b2da      	uxtb	r2, r3
 801047a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801047c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801048c:	b29b      	uxth	r3, r3
 801048e:	3b01      	subs	r3, #1
 8010490:	b29b      	uxth	r3, r3
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	4619      	mov	r1, r3
 8010496:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8010498:	2b00      	cmp	r3, #0
 801049a:	d15d      	bne.n	8010558 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68da      	ldr	r2, [r3, #12]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	f022 0220 	bic.w	r2, r2, #32
 80104aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68da      	ldr	r2, [r3, #12]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80104ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	695a      	ldr	r2, [r3, #20]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f022 0201 	bic.w	r2, r2, #1
 80104ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2220      	movs	r2, #32
 80104d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d135      	bne.n	801054e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	330c      	adds	r3, #12
 80104ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	e853 3f00 	ldrex	r3, [r3]
 80104f6:	613b      	str	r3, [r7, #16]
   return(result);
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	f023 0310 	bic.w	r3, r3, #16
 80104fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	330c      	adds	r3, #12
 8010506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010508:	623a      	str	r2, [r7, #32]
 801050a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801050c:	69f9      	ldr	r1, [r7, #28]
 801050e:	6a3a      	ldr	r2, [r7, #32]
 8010510:	e841 2300 	strex	r3, r2, [r1]
 8010514:	61bb      	str	r3, [r7, #24]
   return(result);
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1e5      	bne.n	80104e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f003 0310 	and.w	r3, r3, #16
 8010526:	2b10      	cmp	r3, #16
 8010528:	d10a      	bne.n	8010540 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010544:	4619      	mov	r1, r3
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7ff fe0e 	bl	8010168 <HAL_UARTEx_RxEventCallback>
 801054c:	e002      	b.n	8010554 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7ff fdf6 	bl	8010140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010554:	2300      	movs	r3, #0
 8010556:	e002      	b.n	801055e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8010558:	2300      	movs	r3, #0
 801055a:	e000      	b.n	801055e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801055c:	2302      	movs	r3, #2
  }
}
 801055e:	4618      	mov	r0, r3
 8010560:	3730      	adds	r7, #48	@ 0x30
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
	...

08010568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801056c:	b0c0      	sub	sp, #256	@ 0x100
 801056e:	af00      	add	r7, sp, #0
 8010570:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010584:	68d9      	ldr	r1, [r3, #12]
 8010586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	ea40 0301 	orr.w	r3, r0, r1
 8010590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010596:	689a      	ldr	r2, [r3, #8]
 8010598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801059c:	691b      	ldr	r3, [r3, #16]
 801059e:	431a      	orrs	r2, r3
 80105a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105a4:	695b      	ldr	r3, [r3, #20]
 80105a6:	431a      	orrs	r2, r3
 80105a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105ac:	69db      	ldr	r3, [r3, #28]
 80105ae:	4313      	orrs	r3, r2
 80105b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80105b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80105c0:	f021 010c 	bic.w	r1, r1, #12
 80105c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80105ce:	430b      	orrs	r3, r1
 80105d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80105d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	695b      	ldr	r3, [r3, #20]
 80105da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80105de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105e2:	6999      	ldr	r1, [r3, #24]
 80105e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	ea40 0301 	orr.w	r3, r0, r1
 80105ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80105f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	4b8f      	ldr	r3, [pc, #572]	@ (8010834 <UART_SetConfig+0x2cc>)
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d005      	beq.n	8010608 <UART_SetConfig+0xa0>
 80105fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	4b8d      	ldr	r3, [pc, #564]	@ (8010838 <UART_SetConfig+0x2d0>)
 8010604:	429a      	cmp	r2, r3
 8010606:	d104      	bne.n	8010612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010608:	f7fe fd2c 	bl	800f064 <HAL_RCC_GetPCLK2Freq>
 801060c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010610:	e003      	b.n	801061a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010612:	f7fe fd13 	bl	800f03c <HAL_RCC_GetPCLK1Freq>
 8010616:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801061a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801061e:	69db      	ldr	r3, [r3, #28]
 8010620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010624:	f040 810c 	bne.w	8010840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801062c:	2200      	movs	r2, #0
 801062e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010632:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801063a:	4622      	mov	r2, r4
 801063c:	462b      	mov	r3, r5
 801063e:	1891      	adds	r1, r2, r2
 8010640:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010642:	415b      	adcs	r3, r3
 8010644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801064a:	4621      	mov	r1, r4
 801064c:	eb12 0801 	adds.w	r8, r2, r1
 8010650:	4629      	mov	r1, r5
 8010652:	eb43 0901 	adc.w	r9, r3, r1
 8010656:	f04f 0200 	mov.w	r2, #0
 801065a:	f04f 0300 	mov.w	r3, #0
 801065e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801066a:	4690      	mov	r8, r2
 801066c:	4699      	mov	r9, r3
 801066e:	4623      	mov	r3, r4
 8010670:	eb18 0303 	adds.w	r3, r8, r3
 8010674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010678:	462b      	mov	r3, r5
 801067a:	eb49 0303 	adc.w	r3, r9, r3
 801067e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801068e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010696:	460b      	mov	r3, r1
 8010698:	18db      	adds	r3, r3, r3
 801069a:	653b      	str	r3, [r7, #80]	@ 0x50
 801069c:	4613      	mov	r3, r2
 801069e:	eb42 0303 	adc.w	r3, r2, r3
 80106a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80106a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80106a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80106ac:	f7ef fdf0 	bl	8000290 <__aeabi_uldivmod>
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	4b61      	ldr	r3, [pc, #388]	@ (801083c <UART_SetConfig+0x2d4>)
 80106b6:	fba3 2302 	umull	r2, r3, r3, r2
 80106ba:	095b      	lsrs	r3, r3, #5
 80106bc:	011c      	lsls	r4, r3, #4
 80106be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106c2:	2200      	movs	r2, #0
 80106c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80106c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80106cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80106d0:	4642      	mov	r2, r8
 80106d2:	464b      	mov	r3, r9
 80106d4:	1891      	adds	r1, r2, r2
 80106d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80106d8:	415b      	adcs	r3, r3
 80106da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80106e0:	4641      	mov	r1, r8
 80106e2:	eb12 0a01 	adds.w	sl, r2, r1
 80106e6:	4649      	mov	r1, r9
 80106e8:	eb43 0b01 	adc.w	fp, r3, r1
 80106ec:	f04f 0200 	mov.w	r2, #0
 80106f0:	f04f 0300 	mov.w	r3, #0
 80106f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80106f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80106fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010700:	4692      	mov	sl, r2
 8010702:	469b      	mov	fp, r3
 8010704:	4643      	mov	r3, r8
 8010706:	eb1a 0303 	adds.w	r3, sl, r3
 801070a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801070e:	464b      	mov	r3, r9
 8010710:	eb4b 0303 	adc.w	r3, fp, r3
 8010714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010724:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801072c:	460b      	mov	r3, r1
 801072e:	18db      	adds	r3, r3, r3
 8010730:	643b      	str	r3, [r7, #64]	@ 0x40
 8010732:	4613      	mov	r3, r2
 8010734:	eb42 0303 	adc.w	r3, r2, r3
 8010738:	647b      	str	r3, [r7, #68]	@ 0x44
 801073a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801073e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010742:	f7ef fda5 	bl	8000290 <__aeabi_uldivmod>
 8010746:	4602      	mov	r2, r0
 8010748:	460b      	mov	r3, r1
 801074a:	4611      	mov	r1, r2
 801074c:	4b3b      	ldr	r3, [pc, #236]	@ (801083c <UART_SetConfig+0x2d4>)
 801074e:	fba3 2301 	umull	r2, r3, r3, r1
 8010752:	095b      	lsrs	r3, r3, #5
 8010754:	2264      	movs	r2, #100	@ 0x64
 8010756:	fb02 f303 	mul.w	r3, r2, r3
 801075a:	1acb      	subs	r3, r1, r3
 801075c:	00db      	lsls	r3, r3, #3
 801075e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010762:	4b36      	ldr	r3, [pc, #216]	@ (801083c <UART_SetConfig+0x2d4>)
 8010764:	fba3 2302 	umull	r2, r3, r3, r2
 8010768:	095b      	lsrs	r3, r3, #5
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010770:	441c      	add	r4, r3
 8010772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010776:	2200      	movs	r2, #0
 8010778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801077c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010784:	4642      	mov	r2, r8
 8010786:	464b      	mov	r3, r9
 8010788:	1891      	adds	r1, r2, r2
 801078a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801078c:	415b      	adcs	r3, r3
 801078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010794:	4641      	mov	r1, r8
 8010796:	1851      	adds	r1, r2, r1
 8010798:	6339      	str	r1, [r7, #48]	@ 0x30
 801079a:	4649      	mov	r1, r9
 801079c:	414b      	adcs	r3, r1
 801079e:	637b      	str	r3, [r7, #52]	@ 0x34
 80107a0:	f04f 0200 	mov.w	r2, #0
 80107a4:	f04f 0300 	mov.w	r3, #0
 80107a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80107ac:	4659      	mov	r1, fp
 80107ae:	00cb      	lsls	r3, r1, #3
 80107b0:	4651      	mov	r1, sl
 80107b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80107b6:	4651      	mov	r1, sl
 80107b8:	00ca      	lsls	r2, r1, #3
 80107ba:	4610      	mov	r0, r2
 80107bc:	4619      	mov	r1, r3
 80107be:	4603      	mov	r3, r0
 80107c0:	4642      	mov	r2, r8
 80107c2:	189b      	adds	r3, r3, r2
 80107c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80107c8:	464b      	mov	r3, r9
 80107ca:	460a      	mov	r2, r1
 80107cc:	eb42 0303 	adc.w	r3, r2, r3
 80107d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80107d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80107e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80107e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80107e8:	460b      	mov	r3, r1
 80107ea:	18db      	adds	r3, r3, r3
 80107ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107ee:	4613      	mov	r3, r2
 80107f0:	eb42 0303 	adc.w	r3, r2, r3
 80107f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80107f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80107fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80107fe:	f7ef fd47 	bl	8000290 <__aeabi_uldivmod>
 8010802:	4602      	mov	r2, r0
 8010804:	460b      	mov	r3, r1
 8010806:	4b0d      	ldr	r3, [pc, #52]	@ (801083c <UART_SetConfig+0x2d4>)
 8010808:	fba3 1302 	umull	r1, r3, r3, r2
 801080c:	095b      	lsrs	r3, r3, #5
 801080e:	2164      	movs	r1, #100	@ 0x64
 8010810:	fb01 f303 	mul.w	r3, r1, r3
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	3332      	adds	r3, #50	@ 0x32
 801081a:	4a08      	ldr	r2, [pc, #32]	@ (801083c <UART_SetConfig+0x2d4>)
 801081c:	fba2 2303 	umull	r2, r3, r2, r3
 8010820:	095b      	lsrs	r3, r3, #5
 8010822:	f003 0207 	and.w	r2, r3, #7
 8010826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4422      	add	r2, r4
 801082e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010830:	e106      	b.n	8010a40 <UART_SetConfig+0x4d8>
 8010832:	bf00      	nop
 8010834:	40011000 	.word	0x40011000
 8010838:	40011400 	.word	0x40011400
 801083c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010844:	2200      	movs	r2, #0
 8010846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801084a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801084e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010852:	4642      	mov	r2, r8
 8010854:	464b      	mov	r3, r9
 8010856:	1891      	adds	r1, r2, r2
 8010858:	6239      	str	r1, [r7, #32]
 801085a:	415b      	adcs	r3, r3
 801085c:	627b      	str	r3, [r7, #36]	@ 0x24
 801085e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010862:	4641      	mov	r1, r8
 8010864:	1854      	adds	r4, r2, r1
 8010866:	4649      	mov	r1, r9
 8010868:	eb43 0501 	adc.w	r5, r3, r1
 801086c:	f04f 0200 	mov.w	r2, #0
 8010870:	f04f 0300 	mov.w	r3, #0
 8010874:	00eb      	lsls	r3, r5, #3
 8010876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801087a:	00e2      	lsls	r2, r4, #3
 801087c:	4614      	mov	r4, r2
 801087e:	461d      	mov	r5, r3
 8010880:	4643      	mov	r3, r8
 8010882:	18e3      	adds	r3, r4, r3
 8010884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010888:	464b      	mov	r3, r9
 801088a:	eb45 0303 	adc.w	r3, r5, r3
 801088e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801089e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80108a2:	f04f 0200 	mov.w	r2, #0
 80108a6:	f04f 0300 	mov.w	r3, #0
 80108aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80108ae:	4629      	mov	r1, r5
 80108b0:	008b      	lsls	r3, r1, #2
 80108b2:	4621      	mov	r1, r4
 80108b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80108b8:	4621      	mov	r1, r4
 80108ba:	008a      	lsls	r2, r1, #2
 80108bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80108c0:	f7ef fce6 	bl	8000290 <__aeabi_uldivmod>
 80108c4:	4602      	mov	r2, r0
 80108c6:	460b      	mov	r3, r1
 80108c8:	4b60      	ldr	r3, [pc, #384]	@ (8010a4c <UART_SetConfig+0x4e4>)
 80108ca:	fba3 2302 	umull	r2, r3, r3, r2
 80108ce:	095b      	lsrs	r3, r3, #5
 80108d0:	011c      	lsls	r4, r3, #4
 80108d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80108d6:	2200      	movs	r2, #0
 80108d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80108dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80108e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80108e4:	4642      	mov	r2, r8
 80108e6:	464b      	mov	r3, r9
 80108e8:	1891      	adds	r1, r2, r2
 80108ea:	61b9      	str	r1, [r7, #24]
 80108ec:	415b      	adcs	r3, r3
 80108ee:	61fb      	str	r3, [r7, #28]
 80108f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80108f4:	4641      	mov	r1, r8
 80108f6:	1851      	adds	r1, r2, r1
 80108f8:	6139      	str	r1, [r7, #16]
 80108fa:	4649      	mov	r1, r9
 80108fc:	414b      	adcs	r3, r1
 80108fe:	617b      	str	r3, [r7, #20]
 8010900:	f04f 0200 	mov.w	r2, #0
 8010904:	f04f 0300 	mov.w	r3, #0
 8010908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801090c:	4659      	mov	r1, fp
 801090e:	00cb      	lsls	r3, r1, #3
 8010910:	4651      	mov	r1, sl
 8010912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010916:	4651      	mov	r1, sl
 8010918:	00ca      	lsls	r2, r1, #3
 801091a:	4610      	mov	r0, r2
 801091c:	4619      	mov	r1, r3
 801091e:	4603      	mov	r3, r0
 8010920:	4642      	mov	r2, r8
 8010922:	189b      	adds	r3, r3, r2
 8010924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010928:	464b      	mov	r3, r9
 801092a:	460a      	mov	r2, r1
 801092c:	eb42 0303 	adc.w	r3, r2, r3
 8010930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801093e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010940:	f04f 0200 	mov.w	r2, #0
 8010944:	f04f 0300 	mov.w	r3, #0
 8010948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801094c:	4649      	mov	r1, r9
 801094e:	008b      	lsls	r3, r1, #2
 8010950:	4641      	mov	r1, r8
 8010952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010956:	4641      	mov	r1, r8
 8010958:	008a      	lsls	r2, r1, #2
 801095a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801095e:	f7ef fc97 	bl	8000290 <__aeabi_uldivmod>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4611      	mov	r1, r2
 8010968:	4b38      	ldr	r3, [pc, #224]	@ (8010a4c <UART_SetConfig+0x4e4>)
 801096a:	fba3 2301 	umull	r2, r3, r3, r1
 801096e:	095b      	lsrs	r3, r3, #5
 8010970:	2264      	movs	r2, #100	@ 0x64
 8010972:	fb02 f303 	mul.w	r3, r2, r3
 8010976:	1acb      	subs	r3, r1, r3
 8010978:	011b      	lsls	r3, r3, #4
 801097a:	3332      	adds	r3, #50	@ 0x32
 801097c:	4a33      	ldr	r2, [pc, #204]	@ (8010a4c <UART_SetConfig+0x4e4>)
 801097e:	fba2 2303 	umull	r2, r3, r2, r3
 8010982:	095b      	lsrs	r3, r3, #5
 8010984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010988:	441c      	add	r4, r3
 801098a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801098e:	2200      	movs	r2, #0
 8010990:	673b      	str	r3, [r7, #112]	@ 0x70
 8010992:	677a      	str	r2, [r7, #116]	@ 0x74
 8010994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010998:	4642      	mov	r2, r8
 801099a:	464b      	mov	r3, r9
 801099c:	1891      	adds	r1, r2, r2
 801099e:	60b9      	str	r1, [r7, #8]
 80109a0:	415b      	adcs	r3, r3
 80109a2:	60fb      	str	r3, [r7, #12]
 80109a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80109a8:	4641      	mov	r1, r8
 80109aa:	1851      	adds	r1, r2, r1
 80109ac:	6039      	str	r1, [r7, #0]
 80109ae:	4649      	mov	r1, r9
 80109b0:	414b      	adcs	r3, r1
 80109b2:	607b      	str	r3, [r7, #4]
 80109b4:	f04f 0200 	mov.w	r2, #0
 80109b8:	f04f 0300 	mov.w	r3, #0
 80109bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80109c0:	4659      	mov	r1, fp
 80109c2:	00cb      	lsls	r3, r1, #3
 80109c4:	4651      	mov	r1, sl
 80109c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80109ca:	4651      	mov	r1, sl
 80109cc:	00ca      	lsls	r2, r1, #3
 80109ce:	4610      	mov	r0, r2
 80109d0:	4619      	mov	r1, r3
 80109d2:	4603      	mov	r3, r0
 80109d4:	4642      	mov	r2, r8
 80109d6:	189b      	adds	r3, r3, r2
 80109d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109da:	464b      	mov	r3, r9
 80109dc:	460a      	mov	r2, r1
 80109de:	eb42 0303 	adc.w	r3, r2, r3
 80109e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80109e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	2200      	movs	r2, #0
 80109ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80109ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80109f0:	f04f 0200 	mov.w	r2, #0
 80109f4:	f04f 0300 	mov.w	r3, #0
 80109f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80109fc:	4649      	mov	r1, r9
 80109fe:	008b      	lsls	r3, r1, #2
 8010a00:	4641      	mov	r1, r8
 8010a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010a06:	4641      	mov	r1, r8
 8010a08:	008a      	lsls	r2, r1, #2
 8010a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010a0e:	f7ef fc3f 	bl	8000290 <__aeabi_uldivmod>
 8010a12:	4602      	mov	r2, r0
 8010a14:	460b      	mov	r3, r1
 8010a16:	4b0d      	ldr	r3, [pc, #52]	@ (8010a4c <UART_SetConfig+0x4e4>)
 8010a18:	fba3 1302 	umull	r1, r3, r3, r2
 8010a1c:	095b      	lsrs	r3, r3, #5
 8010a1e:	2164      	movs	r1, #100	@ 0x64
 8010a20:	fb01 f303 	mul.w	r3, r1, r3
 8010a24:	1ad3      	subs	r3, r2, r3
 8010a26:	011b      	lsls	r3, r3, #4
 8010a28:	3332      	adds	r3, #50	@ 0x32
 8010a2a:	4a08      	ldr	r2, [pc, #32]	@ (8010a4c <UART_SetConfig+0x4e4>)
 8010a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a30:	095b      	lsrs	r3, r3, #5
 8010a32:	f003 020f 	and.w	r2, r3, #15
 8010a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4422      	add	r2, r4
 8010a3e:	609a      	str	r2, [r3, #8]
}
 8010a40:	bf00      	nop
 8010a42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010a46:	46bd      	mov	sp, r7
 8010a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a4c:	51eb851f 	.word	0x51eb851f

08010a50 <calloc>:
 8010a50:	4b02      	ldr	r3, [pc, #8]	@ (8010a5c <calloc+0xc>)
 8010a52:	460a      	mov	r2, r1
 8010a54:	4601      	mov	r1, r0
 8010a56:	6818      	ldr	r0, [r3, #0]
 8010a58:	f000 b802 	b.w	8010a60 <_calloc_r>
 8010a5c:	20000570 	.word	0x20000570

08010a60 <_calloc_r>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	fba1 5402 	umull	r5, r4, r1, r2
 8010a66:	b93c      	cbnz	r4, 8010a78 <_calloc_r+0x18>
 8010a68:	4629      	mov	r1, r5
 8010a6a:	f000 f837 	bl	8010adc <_malloc_r>
 8010a6e:	4606      	mov	r6, r0
 8010a70:	b928      	cbnz	r0, 8010a7e <_calloc_r+0x1e>
 8010a72:	2600      	movs	r6, #0
 8010a74:	4630      	mov	r0, r6
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	220c      	movs	r2, #12
 8010a7a:	6002      	str	r2, [r0, #0]
 8010a7c:	e7f9      	b.n	8010a72 <_calloc_r+0x12>
 8010a7e:	462a      	mov	r2, r5
 8010a80:	4621      	mov	r1, r4
 8010a82:	f000 fa28 	bl	8010ed6 <memset>
 8010a86:	e7f5      	b.n	8010a74 <_calloc_r+0x14>

08010a88 <free>:
 8010a88:	4b02      	ldr	r3, [pc, #8]	@ (8010a94 <free+0xc>)
 8010a8a:	4601      	mov	r1, r0
 8010a8c:	6818      	ldr	r0, [r3, #0]
 8010a8e:	f000 ba77 	b.w	8010f80 <_free_r>
 8010a92:	bf00      	nop
 8010a94:	20000570 	.word	0x20000570

08010a98 <sbrk_aligned>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8010ad8 <sbrk_aligned+0x40>)
 8010a9c:	460c      	mov	r4, r1
 8010a9e:	6831      	ldr	r1, [r6, #0]
 8010aa0:	4605      	mov	r5, r0
 8010aa2:	b911      	cbnz	r1, 8010aaa <sbrk_aligned+0x12>
 8010aa4:	f000 fa20 	bl	8010ee8 <_sbrk_r>
 8010aa8:	6030      	str	r0, [r6, #0]
 8010aaa:	4621      	mov	r1, r4
 8010aac:	4628      	mov	r0, r5
 8010aae:	f000 fa1b 	bl	8010ee8 <_sbrk_r>
 8010ab2:	1c43      	adds	r3, r0, #1
 8010ab4:	d103      	bne.n	8010abe <sbrk_aligned+0x26>
 8010ab6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010aba:	4620      	mov	r0, r4
 8010abc:	bd70      	pop	{r4, r5, r6, pc}
 8010abe:	1cc4      	adds	r4, r0, #3
 8010ac0:	f024 0403 	bic.w	r4, r4, #3
 8010ac4:	42a0      	cmp	r0, r4
 8010ac6:	d0f8      	beq.n	8010aba <sbrk_aligned+0x22>
 8010ac8:	1a21      	subs	r1, r4, r0
 8010aca:	4628      	mov	r0, r5
 8010acc:	f000 fa0c 	bl	8010ee8 <_sbrk_r>
 8010ad0:	3001      	adds	r0, #1
 8010ad2:	d1f2      	bne.n	8010aba <sbrk_aligned+0x22>
 8010ad4:	e7ef      	b.n	8010ab6 <sbrk_aligned+0x1e>
 8010ad6:	bf00      	nop
 8010ad8:	20001258 	.word	0x20001258

08010adc <_malloc_r>:
 8010adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae0:	1ccd      	adds	r5, r1, #3
 8010ae2:	f025 0503 	bic.w	r5, r5, #3
 8010ae6:	3508      	adds	r5, #8
 8010ae8:	2d0c      	cmp	r5, #12
 8010aea:	bf38      	it	cc
 8010aec:	250c      	movcc	r5, #12
 8010aee:	2d00      	cmp	r5, #0
 8010af0:	4606      	mov	r6, r0
 8010af2:	db01      	blt.n	8010af8 <_malloc_r+0x1c>
 8010af4:	42a9      	cmp	r1, r5
 8010af6:	d904      	bls.n	8010b02 <_malloc_r+0x26>
 8010af8:	230c      	movs	r3, #12
 8010afa:	6033      	str	r3, [r6, #0]
 8010afc:	2000      	movs	r0, #0
 8010afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010bd8 <_malloc_r+0xfc>
 8010b06:	f000 f869 	bl	8010bdc <__malloc_lock>
 8010b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8010b0e:	461c      	mov	r4, r3
 8010b10:	bb44      	cbnz	r4, 8010b64 <_malloc_r+0x88>
 8010b12:	4629      	mov	r1, r5
 8010b14:	4630      	mov	r0, r6
 8010b16:	f7ff ffbf 	bl	8010a98 <sbrk_aligned>
 8010b1a:	1c43      	adds	r3, r0, #1
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	d158      	bne.n	8010bd2 <_malloc_r+0xf6>
 8010b20:	f8d8 4000 	ldr.w	r4, [r8]
 8010b24:	4627      	mov	r7, r4
 8010b26:	2f00      	cmp	r7, #0
 8010b28:	d143      	bne.n	8010bb2 <_malloc_r+0xd6>
 8010b2a:	2c00      	cmp	r4, #0
 8010b2c:	d04b      	beq.n	8010bc6 <_malloc_r+0xea>
 8010b2e:	6823      	ldr	r3, [r4, #0]
 8010b30:	4639      	mov	r1, r7
 8010b32:	4630      	mov	r0, r6
 8010b34:	eb04 0903 	add.w	r9, r4, r3
 8010b38:	f000 f9d6 	bl	8010ee8 <_sbrk_r>
 8010b3c:	4581      	cmp	r9, r0
 8010b3e:	d142      	bne.n	8010bc6 <_malloc_r+0xea>
 8010b40:	6821      	ldr	r1, [r4, #0]
 8010b42:	1a6d      	subs	r5, r5, r1
 8010b44:	4629      	mov	r1, r5
 8010b46:	4630      	mov	r0, r6
 8010b48:	f7ff ffa6 	bl	8010a98 <sbrk_aligned>
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	d03a      	beq.n	8010bc6 <_malloc_r+0xea>
 8010b50:	6823      	ldr	r3, [r4, #0]
 8010b52:	442b      	add	r3, r5
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	f8d8 3000 	ldr.w	r3, [r8]
 8010b5a:	685a      	ldr	r2, [r3, #4]
 8010b5c:	bb62      	cbnz	r2, 8010bb8 <_malloc_r+0xdc>
 8010b5e:	f8c8 7000 	str.w	r7, [r8]
 8010b62:	e00f      	b.n	8010b84 <_malloc_r+0xa8>
 8010b64:	6822      	ldr	r2, [r4, #0]
 8010b66:	1b52      	subs	r2, r2, r5
 8010b68:	d420      	bmi.n	8010bac <_malloc_r+0xd0>
 8010b6a:	2a0b      	cmp	r2, #11
 8010b6c:	d917      	bls.n	8010b9e <_malloc_r+0xc2>
 8010b6e:	1961      	adds	r1, r4, r5
 8010b70:	42a3      	cmp	r3, r4
 8010b72:	6025      	str	r5, [r4, #0]
 8010b74:	bf18      	it	ne
 8010b76:	6059      	strne	r1, [r3, #4]
 8010b78:	6863      	ldr	r3, [r4, #4]
 8010b7a:	bf08      	it	eq
 8010b7c:	f8c8 1000 	streq.w	r1, [r8]
 8010b80:	5162      	str	r2, [r4, r5]
 8010b82:	604b      	str	r3, [r1, #4]
 8010b84:	4630      	mov	r0, r6
 8010b86:	f000 f82f 	bl	8010be8 <__malloc_unlock>
 8010b8a:	f104 000b 	add.w	r0, r4, #11
 8010b8e:	1d23      	adds	r3, r4, #4
 8010b90:	f020 0007 	bic.w	r0, r0, #7
 8010b94:	1ac2      	subs	r2, r0, r3
 8010b96:	bf1c      	itt	ne
 8010b98:	1a1b      	subne	r3, r3, r0
 8010b9a:	50a3      	strne	r3, [r4, r2]
 8010b9c:	e7af      	b.n	8010afe <_malloc_r+0x22>
 8010b9e:	6862      	ldr	r2, [r4, #4]
 8010ba0:	42a3      	cmp	r3, r4
 8010ba2:	bf0c      	ite	eq
 8010ba4:	f8c8 2000 	streq.w	r2, [r8]
 8010ba8:	605a      	strne	r2, [r3, #4]
 8010baa:	e7eb      	b.n	8010b84 <_malloc_r+0xa8>
 8010bac:	4623      	mov	r3, r4
 8010bae:	6864      	ldr	r4, [r4, #4]
 8010bb0:	e7ae      	b.n	8010b10 <_malloc_r+0x34>
 8010bb2:	463c      	mov	r4, r7
 8010bb4:	687f      	ldr	r7, [r7, #4]
 8010bb6:	e7b6      	b.n	8010b26 <_malloc_r+0x4a>
 8010bb8:	461a      	mov	r2, r3
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	42a3      	cmp	r3, r4
 8010bbe:	d1fb      	bne.n	8010bb8 <_malloc_r+0xdc>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	6053      	str	r3, [r2, #4]
 8010bc4:	e7de      	b.n	8010b84 <_malloc_r+0xa8>
 8010bc6:	230c      	movs	r3, #12
 8010bc8:	6033      	str	r3, [r6, #0]
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f000 f80c 	bl	8010be8 <__malloc_unlock>
 8010bd0:	e794      	b.n	8010afc <_malloc_r+0x20>
 8010bd2:	6005      	str	r5, [r0, #0]
 8010bd4:	e7d6      	b.n	8010b84 <_malloc_r+0xa8>
 8010bd6:	bf00      	nop
 8010bd8:	2000125c 	.word	0x2000125c

08010bdc <__malloc_lock>:
 8010bdc:	4801      	ldr	r0, [pc, #4]	@ (8010be4 <__malloc_lock+0x8>)
 8010bde:	f000 b9be 	b.w	8010f5e <__retarget_lock_acquire_recursive>
 8010be2:	bf00      	nop
 8010be4:	2000139c 	.word	0x2000139c

08010be8 <__malloc_unlock>:
 8010be8:	4801      	ldr	r0, [pc, #4]	@ (8010bf0 <__malloc_unlock+0x8>)
 8010bea:	f000 b9b9 	b.w	8010f60 <__retarget_lock_release_recursive>
 8010bee:	bf00      	nop
 8010bf0:	2000139c 	.word	0x2000139c

08010bf4 <siprintf>:
 8010bf4:	b40e      	push	{r1, r2, r3}
 8010bf6:	b500      	push	{lr}
 8010bf8:	b09c      	sub	sp, #112	@ 0x70
 8010bfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8010bfc:	9002      	str	r0, [sp, #8]
 8010bfe:	9006      	str	r0, [sp, #24]
 8010c00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010c04:	4809      	ldr	r0, [pc, #36]	@ (8010c2c <siprintf+0x38>)
 8010c06:	9107      	str	r1, [sp, #28]
 8010c08:	9104      	str	r1, [sp, #16]
 8010c0a:	4909      	ldr	r1, [pc, #36]	@ (8010c30 <siprintf+0x3c>)
 8010c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c10:	9105      	str	r1, [sp, #20]
 8010c12:	6800      	ldr	r0, [r0, #0]
 8010c14:	9301      	str	r3, [sp, #4]
 8010c16:	a902      	add	r1, sp, #8
 8010c18:	f000 fa58 	bl	80110cc <_svfiprintf_r>
 8010c1c:	9b02      	ldr	r3, [sp, #8]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	701a      	strb	r2, [r3, #0]
 8010c22:	b01c      	add	sp, #112	@ 0x70
 8010c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c28:	b003      	add	sp, #12
 8010c2a:	4770      	bx	lr
 8010c2c:	20000570 	.word	0x20000570
 8010c30:	ffff0208 	.word	0xffff0208

08010c34 <std>:
 8010c34:	2300      	movs	r3, #0
 8010c36:	b510      	push	{r4, lr}
 8010c38:	4604      	mov	r4, r0
 8010c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8010c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c42:	6083      	str	r3, [r0, #8]
 8010c44:	8181      	strh	r1, [r0, #12]
 8010c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c48:	81c2      	strh	r2, [r0, #14]
 8010c4a:	6183      	str	r3, [r0, #24]
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	2208      	movs	r2, #8
 8010c50:	305c      	adds	r0, #92	@ 0x5c
 8010c52:	f000 f940 	bl	8010ed6 <memset>
 8010c56:	4b0d      	ldr	r3, [pc, #52]	@ (8010c8c <std+0x58>)
 8010c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c90 <std+0x5c>)
 8010c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c94 <std+0x60>)
 8010c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c62:	4b0d      	ldr	r3, [pc, #52]	@ (8010c98 <std+0x64>)
 8010c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c66:	4b0d      	ldr	r3, [pc, #52]	@ (8010c9c <std+0x68>)
 8010c68:	6224      	str	r4, [r4, #32]
 8010c6a:	429c      	cmp	r4, r3
 8010c6c:	d006      	beq.n	8010c7c <std+0x48>
 8010c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c72:	4294      	cmp	r4, r2
 8010c74:	d002      	beq.n	8010c7c <std+0x48>
 8010c76:	33d0      	adds	r3, #208	@ 0xd0
 8010c78:	429c      	cmp	r4, r3
 8010c7a:	d105      	bne.n	8010c88 <std+0x54>
 8010c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c84:	f000 b96a 	b.w	8010f5c <__retarget_lock_init_recursive>
 8010c88:	bd10      	pop	{r4, pc}
 8010c8a:	bf00      	nop
 8010c8c:	080119bd 	.word	0x080119bd
 8010c90:	080119df 	.word	0x080119df
 8010c94:	08011a17 	.word	0x08011a17
 8010c98:	08011a3b 	.word	0x08011a3b
 8010c9c:	20001260 	.word	0x20001260

08010ca0 <stdio_exit_handler>:
 8010ca0:	4a02      	ldr	r2, [pc, #8]	@ (8010cac <stdio_exit_handler+0xc>)
 8010ca2:	4903      	ldr	r1, [pc, #12]	@ (8010cb0 <stdio_exit_handler+0x10>)
 8010ca4:	4803      	ldr	r0, [pc, #12]	@ (8010cb4 <stdio_exit_handler+0x14>)
 8010ca6:	f000 b869 	b.w	8010d7c <_fwalk_sglue>
 8010caa:	bf00      	nop
 8010cac:	20000564 	.word	0x20000564
 8010cb0:	0801196d 	.word	0x0801196d
 8010cb4:	20000574 	.word	0x20000574

08010cb8 <cleanup_stdio>:
 8010cb8:	6841      	ldr	r1, [r0, #4]
 8010cba:	4b0c      	ldr	r3, [pc, #48]	@ (8010cec <cleanup_stdio+0x34>)
 8010cbc:	4299      	cmp	r1, r3
 8010cbe:	b510      	push	{r4, lr}
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	d001      	beq.n	8010cc8 <cleanup_stdio+0x10>
 8010cc4:	f000 fe52 	bl	801196c <_fflush_r>
 8010cc8:	68a1      	ldr	r1, [r4, #8]
 8010cca:	4b09      	ldr	r3, [pc, #36]	@ (8010cf0 <cleanup_stdio+0x38>)
 8010ccc:	4299      	cmp	r1, r3
 8010cce:	d002      	beq.n	8010cd6 <cleanup_stdio+0x1e>
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f000 fe4b 	bl	801196c <_fflush_r>
 8010cd6:	68e1      	ldr	r1, [r4, #12]
 8010cd8:	4b06      	ldr	r3, [pc, #24]	@ (8010cf4 <cleanup_stdio+0x3c>)
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	d004      	beq.n	8010ce8 <cleanup_stdio+0x30>
 8010cde:	4620      	mov	r0, r4
 8010ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ce4:	f000 be42 	b.w	801196c <_fflush_r>
 8010ce8:	bd10      	pop	{r4, pc}
 8010cea:	bf00      	nop
 8010cec:	20001260 	.word	0x20001260
 8010cf0:	200012c8 	.word	0x200012c8
 8010cf4:	20001330 	.word	0x20001330

08010cf8 <global_stdio_init.part.0>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8010d28 <global_stdio_init.part.0+0x30>)
 8010cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8010d2c <global_stdio_init.part.0+0x34>)
 8010cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8010d30 <global_stdio_init.part.0+0x38>)
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	4620      	mov	r0, r4
 8010d04:	2200      	movs	r2, #0
 8010d06:	2104      	movs	r1, #4
 8010d08:	f7ff ff94 	bl	8010c34 <std>
 8010d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d10:	2201      	movs	r2, #1
 8010d12:	2109      	movs	r1, #9
 8010d14:	f7ff ff8e 	bl	8010c34 <std>
 8010d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d1c:	2202      	movs	r2, #2
 8010d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d22:	2112      	movs	r1, #18
 8010d24:	f7ff bf86 	b.w	8010c34 <std>
 8010d28:	20001398 	.word	0x20001398
 8010d2c:	20001260 	.word	0x20001260
 8010d30:	08010ca1 	.word	0x08010ca1

08010d34 <__sfp_lock_acquire>:
 8010d34:	4801      	ldr	r0, [pc, #4]	@ (8010d3c <__sfp_lock_acquire+0x8>)
 8010d36:	f000 b912 	b.w	8010f5e <__retarget_lock_acquire_recursive>
 8010d3a:	bf00      	nop
 8010d3c:	2000139d 	.word	0x2000139d

08010d40 <__sfp_lock_release>:
 8010d40:	4801      	ldr	r0, [pc, #4]	@ (8010d48 <__sfp_lock_release+0x8>)
 8010d42:	f000 b90d 	b.w	8010f60 <__retarget_lock_release_recursive>
 8010d46:	bf00      	nop
 8010d48:	2000139d 	.word	0x2000139d

08010d4c <__sinit>:
 8010d4c:	b510      	push	{r4, lr}
 8010d4e:	4604      	mov	r4, r0
 8010d50:	f7ff fff0 	bl	8010d34 <__sfp_lock_acquire>
 8010d54:	6a23      	ldr	r3, [r4, #32]
 8010d56:	b11b      	cbz	r3, 8010d60 <__sinit+0x14>
 8010d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d5c:	f7ff bff0 	b.w	8010d40 <__sfp_lock_release>
 8010d60:	4b04      	ldr	r3, [pc, #16]	@ (8010d74 <__sinit+0x28>)
 8010d62:	6223      	str	r3, [r4, #32]
 8010d64:	4b04      	ldr	r3, [pc, #16]	@ (8010d78 <__sinit+0x2c>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d1f5      	bne.n	8010d58 <__sinit+0xc>
 8010d6c:	f7ff ffc4 	bl	8010cf8 <global_stdio_init.part.0>
 8010d70:	e7f2      	b.n	8010d58 <__sinit+0xc>
 8010d72:	bf00      	nop
 8010d74:	08010cb9 	.word	0x08010cb9
 8010d78:	20001398 	.word	0x20001398

08010d7c <_fwalk_sglue>:
 8010d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d80:	4607      	mov	r7, r0
 8010d82:	4688      	mov	r8, r1
 8010d84:	4614      	mov	r4, r2
 8010d86:	2600      	movs	r6, #0
 8010d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8010d90:	d505      	bpl.n	8010d9e <_fwalk_sglue+0x22>
 8010d92:	6824      	ldr	r4, [r4, #0]
 8010d94:	2c00      	cmp	r4, #0
 8010d96:	d1f7      	bne.n	8010d88 <_fwalk_sglue+0xc>
 8010d98:	4630      	mov	r0, r6
 8010d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d9e:	89ab      	ldrh	r3, [r5, #12]
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d907      	bls.n	8010db4 <_fwalk_sglue+0x38>
 8010da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010da8:	3301      	adds	r3, #1
 8010daa:	d003      	beq.n	8010db4 <_fwalk_sglue+0x38>
 8010dac:	4629      	mov	r1, r5
 8010dae:	4638      	mov	r0, r7
 8010db0:	47c0      	blx	r8
 8010db2:	4306      	orrs	r6, r0
 8010db4:	3568      	adds	r5, #104	@ 0x68
 8010db6:	e7e9      	b.n	8010d8c <_fwalk_sglue+0x10>

08010db8 <iprintf>:
 8010db8:	b40f      	push	{r0, r1, r2, r3}
 8010dba:	b507      	push	{r0, r1, r2, lr}
 8010dbc:	4906      	ldr	r1, [pc, #24]	@ (8010dd8 <iprintf+0x20>)
 8010dbe:	ab04      	add	r3, sp, #16
 8010dc0:	6808      	ldr	r0, [r1, #0]
 8010dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dc6:	6881      	ldr	r1, [r0, #8]
 8010dc8:	9301      	str	r3, [sp, #4]
 8010dca:	f000 faa5 	bl	8011318 <_vfiprintf_r>
 8010dce:	b003      	add	sp, #12
 8010dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010dd4:	b004      	add	sp, #16
 8010dd6:	4770      	bx	lr
 8010dd8:	20000570 	.word	0x20000570

08010ddc <_puts_r>:
 8010ddc:	6a03      	ldr	r3, [r0, #32]
 8010dde:	b570      	push	{r4, r5, r6, lr}
 8010de0:	6884      	ldr	r4, [r0, #8]
 8010de2:	4605      	mov	r5, r0
 8010de4:	460e      	mov	r6, r1
 8010de6:	b90b      	cbnz	r3, 8010dec <_puts_r+0x10>
 8010de8:	f7ff ffb0 	bl	8010d4c <__sinit>
 8010dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010dee:	07db      	lsls	r3, r3, #31
 8010df0:	d405      	bmi.n	8010dfe <_puts_r+0x22>
 8010df2:	89a3      	ldrh	r3, [r4, #12]
 8010df4:	0598      	lsls	r0, r3, #22
 8010df6:	d402      	bmi.n	8010dfe <_puts_r+0x22>
 8010df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dfa:	f000 f8b0 	bl	8010f5e <__retarget_lock_acquire_recursive>
 8010dfe:	89a3      	ldrh	r3, [r4, #12]
 8010e00:	0719      	lsls	r1, r3, #28
 8010e02:	d502      	bpl.n	8010e0a <_puts_r+0x2e>
 8010e04:	6923      	ldr	r3, [r4, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d135      	bne.n	8010e76 <_puts_r+0x9a>
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f000 fe85 	bl	8011b1c <__swsetup_r>
 8010e12:	b380      	cbz	r0, 8010e76 <_puts_r+0x9a>
 8010e14:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e1a:	07da      	lsls	r2, r3, #31
 8010e1c:	d405      	bmi.n	8010e2a <_puts_r+0x4e>
 8010e1e:	89a3      	ldrh	r3, [r4, #12]
 8010e20:	059b      	lsls	r3, r3, #22
 8010e22:	d402      	bmi.n	8010e2a <_puts_r+0x4e>
 8010e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e26:	f000 f89b 	bl	8010f60 <__retarget_lock_release_recursive>
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	bd70      	pop	{r4, r5, r6, pc}
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	da04      	bge.n	8010e3c <_puts_r+0x60>
 8010e32:	69a2      	ldr	r2, [r4, #24]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	dc17      	bgt.n	8010e68 <_puts_r+0x8c>
 8010e38:	290a      	cmp	r1, #10
 8010e3a:	d015      	beq.n	8010e68 <_puts_r+0x8c>
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	1c5a      	adds	r2, r3, #1
 8010e40:	6022      	str	r2, [r4, #0]
 8010e42:	7019      	strb	r1, [r3, #0]
 8010e44:	68a3      	ldr	r3, [r4, #8]
 8010e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e4a:	3b01      	subs	r3, #1
 8010e4c:	60a3      	str	r3, [r4, #8]
 8010e4e:	2900      	cmp	r1, #0
 8010e50:	d1ed      	bne.n	8010e2e <_puts_r+0x52>
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	da11      	bge.n	8010e7a <_puts_r+0x9e>
 8010e56:	4622      	mov	r2, r4
 8010e58:	210a      	movs	r1, #10
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	f000 fe1f 	bl	8011a9e <__swbuf_r>
 8010e60:	3001      	adds	r0, #1
 8010e62:	d0d7      	beq.n	8010e14 <_puts_r+0x38>
 8010e64:	250a      	movs	r5, #10
 8010e66:	e7d7      	b.n	8010e18 <_puts_r+0x3c>
 8010e68:	4622      	mov	r2, r4
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f000 fe17 	bl	8011a9e <__swbuf_r>
 8010e70:	3001      	adds	r0, #1
 8010e72:	d1e7      	bne.n	8010e44 <_puts_r+0x68>
 8010e74:	e7ce      	b.n	8010e14 <_puts_r+0x38>
 8010e76:	3e01      	subs	r6, #1
 8010e78:	e7e4      	b.n	8010e44 <_puts_r+0x68>
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	1c5a      	adds	r2, r3, #1
 8010e7e:	6022      	str	r2, [r4, #0]
 8010e80:	220a      	movs	r2, #10
 8010e82:	701a      	strb	r2, [r3, #0]
 8010e84:	e7ee      	b.n	8010e64 <_puts_r+0x88>
	...

08010e88 <puts>:
 8010e88:	4b02      	ldr	r3, [pc, #8]	@ (8010e94 <puts+0xc>)
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	6818      	ldr	r0, [r3, #0]
 8010e8e:	f7ff bfa5 	b.w	8010ddc <_puts_r>
 8010e92:	bf00      	nop
 8010e94:	20000570 	.word	0x20000570

08010e98 <strcat>:
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	7814      	ldrb	r4, [r2, #0]
 8010e9e:	4613      	mov	r3, r2
 8010ea0:	3201      	adds	r2, #1
 8010ea2:	2c00      	cmp	r4, #0
 8010ea4:	d1fa      	bne.n	8010e9c <strcat+0x4>
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010eac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010eb0:	2a00      	cmp	r2, #0
 8010eb2:	d1f9      	bne.n	8010ea8 <strcat+0x10>
 8010eb4:	bd10      	pop	{r4, pc}

08010eb6 <memcmp>:
 8010eb6:	b510      	push	{r4, lr}
 8010eb8:	3901      	subs	r1, #1
 8010eba:	4402      	add	r2, r0
 8010ebc:	4290      	cmp	r0, r2
 8010ebe:	d101      	bne.n	8010ec4 <memcmp+0xe>
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	e005      	b.n	8010ed0 <memcmp+0x1a>
 8010ec4:	7803      	ldrb	r3, [r0, #0]
 8010ec6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010eca:	42a3      	cmp	r3, r4
 8010ecc:	d001      	beq.n	8010ed2 <memcmp+0x1c>
 8010ece:	1b18      	subs	r0, r3, r4
 8010ed0:	bd10      	pop	{r4, pc}
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	e7f2      	b.n	8010ebc <memcmp+0x6>

08010ed6 <memset>:
 8010ed6:	4402      	add	r2, r0
 8010ed8:	4603      	mov	r3, r0
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d100      	bne.n	8010ee0 <memset+0xa>
 8010ede:	4770      	bx	lr
 8010ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8010ee4:	e7f9      	b.n	8010eda <memset+0x4>
	...

08010ee8 <_sbrk_r>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	4d06      	ldr	r5, [pc, #24]	@ (8010f04 <_sbrk_r+0x1c>)
 8010eec:	2300      	movs	r3, #0
 8010eee:	4604      	mov	r4, r0
 8010ef0:	4608      	mov	r0, r1
 8010ef2:	602b      	str	r3, [r5, #0]
 8010ef4:	f7f8 ff5a 	bl	8009dac <_sbrk>
 8010ef8:	1c43      	adds	r3, r0, #1
 8010efa:	d102      	bne.n	8010f02 <_sbrk_r+0x1a>
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	b103      	cbz	r3, 8010f02 <_sbrk_r+0x1a>
 8010f00:	6023      	str	r3, [r4, #0]
 8010f02:	bd38      	pop	{r3, r4, r5, pc}
 8010f04:	200013a0 	.word	0x200013a0

08010f08 <__errno>:
 8010f08:	4b01      	ldr	r3, [pc, #4]	@ (8010f10 <__errno+0x8>)
 8010f0a:	6818      	ldr	r0, [r3, #0]
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	20000570 	.word	0x20000570

08010f14 <__libc_init_array>:
 8010f14:	b570      	push	{r4, r5, r6, lr}
 8010f16:	4d0d      	ldr	r5, [pc, #52]	@ (8010f4c <__libc_init_array+0x38>)
 8010f18:	4c0d      	ldr	r4, [pc, #52]	@ (8010f50 <__libc_init_array+0x3c>)
 8010f1a:	1b64      	subs	r4, r4, r5
 8010f1c:	10a4      	asrs	r4, r4, #2
 8010f1e:	2600      	movs	r6, #0
 8010f20:	42a6      	cmp	r6, r4
 8010f22:	d109      	bne.n	8010f38 <__libc_init_array+0x24>
 8010f24:	4d0b      	ldr	r5, [pc, #44]	@ (8010f54 <__libc_init_array+0x40>)
 8010f26:	4c0c      	ldr	r4, [pc, #48]	@ (8010f58 <__libc_init_array+0x44>)
 8010f28:	f000 ff3a 	bl	8011da0 <_init>
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	10a4      	asrs	r4, r4, #2
 8010f30:	2600      	movs	r6, #0
 8010f32:	42a6      	cmp	r6, r4
 8010f34:	d105      	bne.n	8010f42 <__libc_init_array+0x2e>
 8010f36:	bd70      	pop	{r4, r5, r6, pc}
 8010f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f3c:	4798      	blx	r3
 8010f3e:	3601      	adds	r6, #1
 8010f40:	e7ee      	b.n	8010f20 <__libc_init_array+0xc>
 8010f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f46:	4798      	blx	r3
 8010f48:	3601      	adds	r6, #1
 8010f4a:	e7f2      	b.n	8010f32 <__libc_init_array+0x1e>
 8010f4c:	0801376c 	.word	0x0801376c
 8010f50:	0801376c 	.word	0x0801376c
 8010f54:	0801376c 	.word	0x0801376c
 8010f58:	08013770 	.word	0x08013770

08010f5c <__retarget_lock_init_recursive>:
 8010f5c:	4770      	bx	lr

08010f5e <__retarget_lock_acquire_recursive>:
 8010f5e:	4770      	bx	lr

08010f60 <__retarget_lock_release_recursive>:
 8010f60:	4770      	bx	lr

08010f62 <memcpy>:
 8010f62:	440a      	add	r2, r1
 8010f64:	4291      	cmp	r1, r2
 8010f66:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010f6a:	d100      	bne.n	8010f6e <memcpy+0xc>
 8010f6c:	4770      	bx	lr
 8010f6e:	b510      	push	{r4, lr}
 8010f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f78:	4291      	cmp	r1, r2
 8010f7a:	d1f9      	bne.n	8010f70 <memcpy+0xe>
 8010f7c:	bd10      	pop	{r4, pc}
	...

08010f80 <_free_r>:
 8010f80:	b538      	push	{r3, r4, r5, lr}
 8010f82:	4605      	mov	r5, r0
 8010f84:	2900      	cmp	r1, #0
 8010f86:	d041      	beq.n	801100c <_free_r+0x8c>
 8010f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f8c:	1f0c      	subs	r4, r1, #4
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	bfb8      	it	lt
 8010f92:	18e4      	addlt	r4, r4, r3
 8010f94:	f7ff fe22 	bl	8010bdc <__malloc_lock>
 8010f98:	4a1d      	ldr	r2, [pc, #116]	@ (8011010 <_free_r+0x90>)
 8010f9a:	6813      	ldr	r3, [r2, #0]
 8010f9c:	b933      	cbnz	r3, 8010fac <_free_r+0x2c>
 8010f9e:	6063      	str	r3, [r4, #4]
 8010fa0:	6014      	str	r4, [r2, #0]
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fa8:	f7ff be1e 	b.w	8010be8 <__malloc_unlock>
 8010fac:	42a3      	cmp	r3, r4
 8010fae:	d908      	bls.n	8010fc2 <_free_r+0x42>
 8010fb0:	6820      	ldr	r0, [r4, #0]
 8010fb2:	1821      	adds	r1, r4, r0
 8010fb4:	428b      	cmp	r3, r1
 8010fb6:	bf01      	itttt	eq
 8010fb8:	6819      	ldreq	r1, [r3, #0]
 8010fba:	685b      	ldreq	r3, [r3, #4]
 8010fbc:	1809      	addeq	r1, r1, r0
 8010fbe:	6021      	streq	r1, [r4, #0]
 8010fc0:	e7ed      	b.n	8010f9e <_free_r+0x1e>
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	b10b      	cbz	r3, 8010fcc <_free_r+0x4c>
 8010fc8:	42a3      	cmp	r3, r4
 8010fca:	d9fa      	bls.n	8010fc2 <_free_r+0x42>
 8010fcc:	6811      	ldr	r1, [r2, #0]
 8010fce:	1850      	adds	r0, r2, r1
 8010fd0:	42a0      	cmp	r0, r4
 8010fd2:	d10b      	bne.n	8010fec <_free_r+0x6c>
 8010fd4:	6820      	ldr	r0, [r4, #0]
 8010fd6:	4401      	add	r1, r0
 8010fd8:	1850      	adds	r0, r2, r1
 8010fda:	4283      	cmp	r3, r0
 8010fdc:	6011      	str	r1, [r2, #0]
 8010fde:	d1e0      	bne.n	8010fa2 <_free_r+0x22>
 8010fe0:	6818      	ldr	r0, [r3, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	6053      	str	r3, [r2, #4]
 8010fe6:	4408      	add	r0, r1
 8010fe8:	6010      	str	r0, [r2, #0]
 8010fea:	e7da      	b.n	8010fa2 <_free_r+0x22>
 8010fec:	d902      	bls.n	8010ff4 <_free_r+0x74>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	e7d6      	b.n	8010fa2 <_free_r+0x22>
 8010ff4:	6820      	ldr	r0, [r4, #0]
 8010ff6:	1821      	adds	r1, r4, r0
 8010ff8:	428b      	cmp	r3, r1
 8010ffa:	bf04      	itt	eq
 8010ffc:	6819      	ldreq	r1, [r3, #0]
 8010ffe:	685b      	ldreq	r3, [r3, #4]
 8011000:	6063      	str	r3, [r4, #4]
 8011002:	bf04      	itt	eq
 8011004:	1809      	addeq	r1, r1, r0
 8011006:	6021      	streq	r1, [r4, #0]
 8011008:	6054      	str	r4, [r2, #4]
 801100a:	e7ca      	b.n	8010fa2 <_free_r+0x22>
 801100c:	bd38      	pop	{r3, r4, r5, pc}
 801100e:	bf00      	nop
 8011010:	2000125c 	.word	0x2000125c

08011014 <__ssputs_r>:
 8011014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011018:	688e      	ldr	r6, [r1, #8]
 801101a:	461f      	mov	r7, r3
 801101c:	42be      	cmp	r6, r7
 801101e:	680b      	ldr	r3, [r1, #0]
 8011020:	4682      	mov	sl, r0
 8011022:	460c      	mov	r4, r1
 8011024:	4690      	mov	r8, r2
 8011026:	d82d      	bhi.n	8011084 <__ssputs_r+0x70>
 8011028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801102c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011030:	d026      	beq.n	8011080 <__ssputs_r+0x6c>
 8011032:	6965      	ldr	r5, [r4, #20]
 8011034:	6909      	ldr	r1, [r1, #16]
 8011036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801103a:	eba3 0901 	sub.w	r9, r3, r1
 801103e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011042:	1c7b      	adds	r3, r7, #1
 8011044:	444b      	add	r3, r9
 8011046:	106d      	asrs	r5, r5, #1
 8011048:	429d      	cmp	r5, r3
 801104a:	bf38      	it	cc
 801104c:	461d      	movcc	r5, r3
 801104e:	0553      	lsls	r3, r2, #21
 8011050:	d527      	bpl.n	80110a2 <__ssputs_r+0x8e>
 8011052:	4629      	mov	r1, r5
 8011054:	f7ff fd42 	bl	8010adc <_malloc_r>
 8011058:	4606      	mov	r6, r0
 801105a:	b360      	cbz	r0, 80110b6 <__ssputs_r+0xa2>
 801105c:	6921      	ldr	r1, [r4, #16]
 801105e:	464a      	mov	r2, r9
 8011060:	f7ff ff7f 	bl	8010f62 <memcpy>
 8011064:	89a3      	ldrh	r3, [r4, #12]
 8011066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801106a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801106e:	81a3      	strh	r3, [r4, #12]
 8011070:	6126      	str	r6, [r4, #16]
 8011072:	6165      	str	r5, [r4, #20]
 8011074:	444e      	add	r6, r9
 8011076:	eba5 0509 	sub.w	r5, r5, r9
 801107a:	6026      	str	r6, [r4, #0]
 801107c:	60a5      	str	r5, [r4, #8]
 801107e:	463e      	mov	r6, r7
 8011080:	42be      	cmp	r6, r7
 8011082:	d900      	bls.n	8011086 <__ssputs_r+0x72>
 8011084:	463e      	mov	r6, r7
 8011086:	6820      	ldr	r0, [r4, #0]
 8011088:	4632      	mov	r2, r6
 801108a:	4641      	mov	r1, r8
 801108c:	f000 fdfe 	bl	8011c8c <memmove>
 8011090:	68a3      	ldr	r3, [r4, #8]
 8011092:	1b9b      	subs	r3, r3, r6
 8011094:	60a3      	str	r3, [r4, #8]
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	4433      	add	r3, r6
 801109a:	6023      	str	r3, [r4, #0]
 801109c:	2000      	movs	r0, #0
 801109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110a2:	462a      	mov	r2, r5
 80110a4:	f000 fccd 	bl	8011a42 <_realloc_r>
 80110a8:	4606      	mov	r6, r0
 80110aa:	2800      	cmp	r0, #0
 80110ac:	d1e0      	bne.n	8011070 <__ssputs_r+0x5c>
 80110ae:	6921      	ldr	r1, [r4, #16]
 80110b0:	4650      	mov	r0, sl
 80110b2:	f7ff ff65 	bl	8010f80 <_free_r>
 80110b6:	230c      	movs	r3, #12
 80110b8:	f8ca 3000 	str.w	r3, [sl]
 80110bc:	89a3      	ldrh	r3, [r4, #12]
 80110be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110c2:	81a3      	strh	r3, [r4, #12]
 80110c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110c8:	e7e9      	b.n	801109e <__ssputs_r+0x8a>
	...

080110cc <_svfiprintf_r>:
 80110cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d0:	4698      	mov	r8, r3
 80110d2:	898b      	ldrh	r3, [r1, #12]
 80110d4:	061b      	lsls	r3, r3, #24
 80110d6:	b09d      	sub	sp, #116	@ 0x74
 80110d8:	4607      	mov	r7, r0
 80110da:	460d      	mov	r5, r1
 80110dc:	4614      	mov	r4, r2
 80110de:	d510      	bpl.n	8011102 <_svfiprintf_r+0x36>
 80110e0:	690b      	ldr	r3, [r1, #16]
 80110e2:	b973      	cbnz	r3, 8011102 <_svfiprintf_r+0x36>
 80110e4:	2140      	movs	r1, #64	@ 0x40
 80110e6:	f7ff fcf9 	bl	8010adc <_malloc_r>
 80110ea:	6028      	str	r0, [r5, #0]
 80110ec:	6128      	str	r0, [r5, #16]
 80110ee:	b930      	cbnz	r0, 80110fe <_svfiprintf_r+0x32>
 80110f0:	230c      	movs	r3, #12
 80110f2:	603b      	str	r3, [r7, #0]
 80110f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110f8:	b01d      	add	sp, #116	@ 0x74
 80110fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fe:	2340      	movs	r3, #64	@ 0x40
 8011100:	616b      	str	r3, [r5, #20]
 8011102:	2300      	movs	r3, #0
 8011104:	9309      	str	r3, [sp, #36]	@ 0x24
 8011106:	2320      	movs	r3, #32
 8011108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801110c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011110:	2330      	movs	r3, #48	@ 0x30
 8011112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80112b0 <_svfiprintf_r+0x1e4>
 8011116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801111a:	f04f 0901 	mov.w	r9, #1
 801111e:	4623      	mov	r3, r4
 8011120:	469a      	mov	sl, r3
 8011122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011126:	b10a      	cbz	r2, 801112c <_svfiprintf_r+0x60>
 8011128:	2a25      	cmp	r2, #37	@ 0x25
 801112a:	d1f9      	bne.n	8011120 <_svfiprintf_r+0x54>
 801112c:	ebba 0b04 	subs.w	fp, sl, r4
 8011130:	d00b      	beq.n	801114a <_svfiprintf_r+0x7e>
 8011132:	465b      	mov	r3, fp
 8011134:	4622      	mov	r2, r4
 8011136:	4629      	mov	r1, r5
 8011138:	4638      	mov	r0, r7
 801113a:	f7ff ff6b 	bl	8011014 <__ssputs_r>
 801113e:	3001      	adds	r0, #1
 8011140:	f000 80a7 	beq.w	8011292 <_svfiprintf_r+0x1c6>
 8011144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011146:	445a      	add	r2, fp
 8011148:	9209      	str	r2, [sp, #36]	@ 0x24
 801114a:	f89a 3000 	ldrb.w	r3, [sl]
 801114e:	2b00      	cmp	r3, #0
 8011150:	f000 809f 	beq.w	8011292 <_svfiprintf_r+0x1c6>
 8011154:	2300      	movs	r3, #0
 8011156:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801115a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801115e:	f10a 0a01 	add.w	sl, sl, #1
 8011162:	9304      	str	r3, [sp, #16]
 8011164:	9307      	str	r3, [sp, #28]
 8011166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801116a:	931a      	str	r3, [sp, #104]	@ 0x68
 801116c:	4654      	mov	r4, sl
 801116e:	2205      	movs	r2, #5
 8011170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011174:	484e      	ldr	r0, [pc, #312]	@ (80112b0 <_svfiprintf_r+0x1e4>)
 8011176:	f7ef f83b 	bl	80001f0 <memchr>
 801117a:	9a04      	ldr	r2, [sp, #16]
 801117c:	b9d8      	cbnz	r0, 80111b6 <_svfiprintf_r+0xea>
 801117e:	06d0      	lsls	r0, r2, #27
 8011180:	bf44      	itt	mi
 8011182:	2320      	movmi	r3, #32
 8011184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011188:	0711      	lsls	r1, r2, #28
 801118a:	bf44      	itt	mi
 801118c:	232b      	movmi	r3, #43	@ 0x2b
 801118e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011192:	f89a 3000 	ldrb.w	r3, [sl]
 8011196:	2b2a      	cmp	r3, #42	@ 0x2a
 8011198:	d015      	beq.n	80111c6 <_svfiprintf_r+0xfa>
 801119a:	9a07      	ldr	r2, [sp, #28]
 801119c:	4654      	mov	r4, sl
 801119e:	2000      	movs	r0, #0
 80111a0:	f04f 0c0a 	mov.w	ip, #10
 80111a4:	4621      	mov	r1, r4
 80111a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111aa:	3b30      	subs	r3, #48	@ 0x30
 80111ac:	2b09      	cmp	r3, #9
 80111ae:	d94b      	bls.n	8011248 <_svfiprintf_r+0x17c>
 80111b0:	b1b0      	cbz	r0, 80111e0 <_svfiprintf_r+0x114>
 80111b2:	9207      	str	r2, [sp, #28]
 80111b4:	e014      	b.n	80111e0 <_svfiprintf_r+0x114>
 80111b6:	eba0 0308 	sub.w	r3, r0, r8
 80111ba:	fa09 f303 	lsl.w	r3, r9, r3
 80111be:	4313      	orrs	r3, r2
 80111c0:	9304      	str	r3, [sp, #16]
 80111c2:	46a2      	mov	sl, r4
 80111c4:	e7d2      	b.n	801116c <_svfiprintf_r+0xa0>
 80111c6:	9b03      	ldr	r3, [sp, #12]
 80111c8:	1d19      	adds	r1, r3, #4
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	9103      	str	r1, [sp, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	bfbb      	ittet	lt
 80111d2:	425b      	neglt	r3, r3
 80111d4:	f042 0202 	orrlt.w	r2, r2, #2
 80111d8:	9307      	strge	r3, [sp, #28]
 80111da:	9307      	strlt	r3, [sp, #28]
 80111dc:	bfb8      	it	lt
 80111de:	9204      	strlt	r2, [sp, #16]
 80111e0:	7823      	ldrb	r3, [r4, #0]
 80111e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80111e4:	d10a      	bne.n	80111fc <_svfiprintf_r+0x130>
 80111e6:	7863      	ldrb	r3, [r4, #1]
 80111e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80111ea:	d132      	bne.n	8011252 <_svfiprintf_r+0x186>
 80111ec:	9b03      	ldr	r3, [sp, #12]
 80111ee:	1d1a      	adds	r2, r3, #4
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	9203      	str	r2, [sp, #12]
 80111f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111f8:	3402      	adds	r4, #2
 80111fa:	9305      	str	r3, [sp, #20]
 80111fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80112c0 <_svfiprintf_r+0x1f4>
 8011200:	7821      	ldrb	r1, [r4, #0]
 8011202:	2203      	movs	r2, #3
 8011204:	4650      	mov	r0, sl
 8011206:	f7ee fff3 	bl	80001f0 <memchr>
 801120a:	b138      	cbz	r0, 801121c <_svfiprintf_r+0x150>
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	eba0 000a 	sub.w	r0, r0, sl
 8011212:	2240      	movs	r2, #64	@ 0x40
 8011214:	4082      	lsls	r2, r0
 8011216:	4313      	orrs	r3, r2
 8011218:	3401      	adds	r4, #1
 801121a:	9304      	str	r3, [sp, #16]
 801121c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011220:	4824      	ldr	r0, [pc, #144]	@ (80112b4 <_svfiprintf_r+0x1e8>)
 8011222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011226:	2206      	movs	r2, #6
 8011228:	f7ee ffe2 	bl	80001f0 <memchr>
 801122c:	2800      	cmp	r0, #0
 801122e:	d036      	beq.n	801129e <_svfiprintf_r+0x1d2>
 8011230:	4b21      	ldr	r3, [pc, #132]	@ (80112b8 <_svfiprintf_r+0x1ec>)
 8011232:	bb1b      	cbnz	r3, 801127c <_svfiprintf_r+0x1b0>
 8011234:	9b03      	ldr	r3, [sp, #12]
 8011236:	3307      	adds	r3, #7
 8011238:	f023 0307 	bic.w	r3, r3, #7
 801123c:	3308      	adds	r3, #8
 801123e:	9303      	str	r3, [sp, #12]
 8011240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011242:	4433      	add	r3, r6
 8011244:	9309      	str	r3, [sp, #36]	@ 0x24
 8011246:	e76a      	b.n	801111e <_svfiprintf_r+0x52>
 8011248:	fb0c 3202 	mla	r2, ip, r2, r3
 801124c:	460c      	mov	r4, r1
 801124e:	2001      	movs	r0, #1
 8011250:	e7a8      	b.n	80111a4 <_svfiprintf_r+0xd8>
 8011252:	2300      	movs	r3, #0
 8011254:	3401      	adds	r4, #1
 8011256:	9305      	str	r3, [sp, #20]
 8011258:	4619      	mov	r1, r3
 801125a:	f04f 0c0a 	mov.w	ip, #10
 801125e:	4620      	mov	r0, r4
 8011260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011264:	3a30      	subs	r2, #48	@ 0x30
 8011266:	2a09      	cmp	r2, #9
 8011268:	d903      	bls.n	8011272 <_svfiprintf_r+0x1a6>
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0c6      	beq.n	80111fc <_svfiprintf_r+0x130>
 801126e:	9105      	str	r1, [sp, #20]
 8011270:	e7c4      	b.n	80111fc <_svfiprintf_r+0x130>
 8011272:	fb0c 2101 	mla	r1, ip, r1, r2
 8011276:	4604      	mov	r4, r0
 8011278:	2301      	movs	r3, #1
 801127a:	e7f0      	b.n	801125e <_svfiprintf_r+0x192>
 801127c:	ab03      	add	r3, sp, #12
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	462a      	mov	r2, r5
 8011282:	4b0e      	ldr	r3, [pc, #56]	@ (80112bc <_svfiprintf_r+0x1f0>)
 8011284:	a904      	add	r1, sp, #16
 8011286:	4638      	mov	r0, r7
 8011288:	f3af 8000 	nop.w
 801128c:	1c42      	adds	r2, r0, #1
 801128e:	4606      	mov	r6, r0
 8011290:	d1d6      	bne.n	8011240 <_svfiprintf_r+0x174>
 8011292:	89ab      	ldrh	r3, [r5, #12]
 8011294:	065b      	lsls	r3, r3, #25
 8011296:	f53f af2d 	bmi.w	80110f4 <_svfiprintf_r+0x28>
 801129a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801129c:	e72c      	b.n	80110f8 <_svfiprintf_r+0x2c>
 801129e:	ab03      	add	r3, sp, #12
 80112a0:	9300      	str	r3, [sp, #0]
 80112a2:	462a      	mov	r2, r5
 80112a4:	4b05      	ldr	r3, [pc, #20]	@ (80112bc <_svfiprintf_r+0x1f0>)
 80112a6:	a904      	add	r1, sp, #16
 80112a8:	4638      	mov	r0, r7
 80112aa:	f000 f9bb 	bl	8011624 <_printf_i>
 80112ae:	e7ed      	b.n	801128c <_svfiprintf_r+0x1c0>
 80112b0:	08013730 	.word	0x08013730
 80112b4:	0801373a 	.word	0x0801373a
 80112b8:	00000000 	.word	0x00000000
 80112bc:	08011015 	.word	0x08011015
 80112c0:	08013736 	.word	0x08013736

080112c4 <__sfputc_r>:
 80112c4:	6893      	ldr	r3, [r2, #8]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	b410      	push	{r4}
 80112cc:	6093      	str	r3, [r2, #8]
 80112ce:	da08      	bge.n	80112e2 <__sfputc_r+0x1e>
 80112d0:	6994      	ldr	r4, [r2, #24]
 80112d2:	42a3      	cmp	r3, r4
 80112d4:	db01      	blt.n	80112da <__sfputc_r+0x16>
 80112d6:	290a      	cmp	r1, #10
 80112d8:	d103      	bne.n	80112e2 <__sfputc_r+0x1e>
 80112da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112de:	f000 bbde 	b.w	8011a9e <__swbuf_r>
 80112e2:	6813      	ldr	r3, [r2, #0]
 80112e4:	1c58      	adds	r0, r3, #1
 80112e6:	6010      	str	r0, [r2, #0]
 80112e8:	7019      	strb	r1, [r3, #0]
 80112ea:	4608      	mov	r0, r1
 80112ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <__sfputs_r>:
 80112f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f4:	4606      	mov	r6, r0
 80112f6:	460f      	mov	r7, r1
 80112f8:	4614      	mov	r4, r2
 80112fa:	18d5      	adds	r5, r2, r3
 80112fc:	42ac      	cmp	r4, r5
 80112fe:	d101      	bne.n	8011304 <__sfputs_r+0x12>
 8011300:	2000      	movs	r0, #0
 8011302:	e007      	b.n	8011314 <__sfputs_r+0x22>
 8011304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011308:	463a      	mov	r2, r7
 801130a:	4630      	mov	r0, r6
 801130c:	f7ff ffda 	bl	80112c4 <__sfputc_r>
 8011310:	1c43      	adds	r3, r0, #1
 8011312:	d1f3      	bne.n	80112fc <__sfputs_r+0xa>
 8011314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011318 <_vfiprintf_r>:
 8011318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801131c:	460d      	mov	r5, r1
 801131e:	b09d      	sub	sp, #116	@ 0x74
 8011320:	4614      	mov	r4, r2
 8011322:	4698      	mov	r8, r3
 8011324:	4606      	mov	r6, r0
 8011326:	b118      	cbz	r0, 8011330 <_vfiprintf_r+0x18>
 8011328:	6a03      	ldr	r3, [r0, #32]
 801132a:	b90b      	cbnz	r3, 8011330 <_vfiprintf_r+0x18>
 801132c:	f7ff fd0e 	bl	8010d4c <__sinit>
 8011330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011332:	07d9      	lsls	r1, r3, #31
 8011334:	d405      	bmi.n	8011342 <_vfiprintf_r+0x2a>
 8011336:	89ab      	ldrh	r3, [r5, #12]
 8011338:	059a      	lsls	r2, r3, #22
 801133a:	d402      	bmi.n	8011342 <_vfiprintf_r+0x2a>
 801133c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801133e:	f7ff fe0e 	bl	8010f5e <__retarget_lock_acquire_recursive>
 8011342:	89ab      	ldrh	r3, [r5, #12]
 8011344:	071b      	lsls	r3, r3, #28
 8011346:	d501      	bpl.n	801134c <_vfiprintf_r+0x34>
 8011348:	692b      	ldr	r3, [r5, #16]
 801134a:	b99b      	cbnz	r3, 8011374 <_vfiprintf_r+0x5c>
 801134c:	4629      	mov	r1, r5
 801134e:	4630      	mov	r0, r6
 8011350:	f000 fbe4 	bl	8011b1c <__swsetup_r>
 8011354:	b170      	cbz	r0, 8011374 <_vfiprintf_r+0x5c>
 8011356:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011358:	07dc      	lsls	r4, r3, #31
 801135a:	d504      	bpl.n	8011366 <_vfiprintf_r+0x4e>
 801135c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011360:	b01d      	add	sp, #116	@ 0x74
 8011362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011366:	89ab      	ldrh	r3, [r5, #12]
 8011368:	0598      	lsls	r0, r3, #22
 801136a:	d4f7      	bmi.n	801135c <_vfiprintf_r+0x44>
 801136c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801136e:	f7ff fdf7 	bl	8010f60 <__retarget_lock_release_recursive>
 8011372:	e7f3      	b.n	801135c <_vfiprintf_r+0x44>
 8011374:	2300      	movs	r3, #0
 8011376:	9309      	str	r3, [sp, #36]	@ 0x24
 8011378:	2320      	movs	r3, #32
 801137a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801137e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011382:	2330      	movs	r3, #48	@ 0x30
 8011384:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011534 <_vfiprintf_r+0x21c>
 8011388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801138c:	f04f 0901 	mov.w	r9, #1
 8011390:	4623      	mov	r3, r4
 8011392:	469a      	mov	sl, r3
 8011394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011398:	b10a      	cbz	r2, 801139e <_vfiprintf_r+0x86>
 801139a:	2a25      	cmp	r2, #37	@ 0x25
 801139c:	d1f9      	bne.n	8011392 <_vfiprintf_r+0x7a>
 801139e:	ebba 0b04 	subs.w	fp, sl, r4
 80113a2:	d00b      	beq.n	80113bc <_vfiprintf_r+0xa4>
 80113a4:	465b      	mov	r3, fp
 80113a6:	4622      	mov	r2, r4
 80113a8:	4629      	mov	r1, r5
 80113aa:	4630      	mov	r0, r6
 80113ac:	f7ff ffa1 	bl	80112f2 <__sfputs_r>
 80113b0:	3001      	adds	r0, #1
 80113b2:	f000 80a7 	beq.w	8011504 <_vfiprintf_r+0x1ec>
 80113b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113b8:	445a      	add	r2, fp
 80113ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80113bc:	f89a 3000 	ldrb.w	r3, [sl]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 809f 	beq.w	8011504 <_vfiprintf_r+0x1ec>
 80113c6:	2300      	movs	r3, #0
 80113c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80113cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113d0:	f10a 0a01 	add.w	sl, sl, #1
 80113d4:	9304      	str	r3, [sp, #16]
 80113d6:	9307      	str	r3, [sp, #28]
 80113d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80113de:	4654      	mov	r4, sl
 80113e0:	2205      	movs	r2, #5
 80113e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113e6:	4853      	ldr	r0, [pc, #332]	@ (8011534 <_vfiprintf_r+0x21c>)
 80113e8:	f7ee ff02 	bl	80001f0 <memchr>
 80113ec:	9a04      	ldr	r2, [sp, #16]
 80113ee:	b9d8      	cbnz	r0, 8011428 <_vfiprintf_r+0x110>
 80113f0:	06d1      	lsls	r1, r2, #27
 80113f2:	bf44      	itt	mi
 80113f4:	2320      	movmi	r3, #32
 80113f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80113fa:	0713      	lsls	r3, r2, #28
 80113fc:	bf44      	itt	mi
 80113fe:	232b      	movmi	r3, #43	@ 0x2b
 8011400:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011404:	f89a 3000 	ldrb.w	r3, [sl]
 8011408:	2b2a      	cmp	r3, #42	@ 0x2a
 801140a:	d015      	beq.n	8011438 <_vfiprintf_r+0x120>
 801140c:	9a07      	ldr	r2, [sp, #28]
 801140e:	4654      	mov	r4, sl
 8011410:	2000      	movs	r0, #0
 8011412:	f04f 0c0a 	mov.w	ip, #10
 8011416:	4621      	mov	r1, r4
 8011418:	f811 3b01 	ldrb.w	r3, [r1], #1
 801141c:	3b30      	subs	r3, #48	@ 0x30
 801141e:	2b09      	cmp	r3, #9
 8011420:	d94b      	bls.n	80114ba <_vfiprintf_r+0x1a2>
 8011422:	b1b0      	cbz	r0, 8011452 <_vfiprintf_r+0x13a>
 8011424:	9207      	str	r2, [sp, #28]
 8011426:	e014      	b.n	8011452 <_vfiprintf_r+0x13a>
 8011428:	eba0 0308 	sub.w	r3, r0, r8
 801142c:	fa09 f303 	lsl.w	r3, r9, r3
 8011430:	4313      	orrs	r3, r2
 8011432:	9304      	str	r3, [sp, #16]
 8011434:	46a2      	mov	sl, r4
 8011436:	e7d2      	b.n	80113de <_vfiprintf_r+0xc6>
 8011438:	9b03      	ldr	r3, [sp, #12]
 801143a:	1d19      	adds	r1, r3, #4
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	9103      	str	r1, [sp, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	bfbb      	ittet	lt
 8011444:	425b      	neglt	r3, r3
 8011446:	f042 0202 	orrlt.w	r2, r2, #2
 801144a:	9307      	strge	r3, [sp, #28]
 801144c:	9307      	strlt	r3, [sp, #28]
 801144e:	bfb8      	it	lt
 8011450:	9204      	strlt	r2, [sp, #16]
 8011452:	7823      	ldrb	r3, [r4, #0]
 8011454:	2b2e      	cmp	r3, #46	@ 0x2e
 8011456:	d10a      	bne.n	801146e <_vfiprintf_r+0x156>
 8011458:	7863      	ldrb	r3, [r4, #1]
 801145a:	2b2a      	cmp	r3, #42	@ 0x2a
 801145c:	d132      	bne.n	80114c4 <_vfiprintf_r+0x1ac>
 801145e:	9b03      	ldr	r3, [sp, #12]
 8011460:	1d1a      	adds	r2, r3, #4
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	9203      	str	r2, [sp, #12]
 8011466:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801146a:	3402      	adds	r4, #2
 801146c:	9305      	str	r3, [sp, #20]
 801146e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011544 <_vfiprintf_r+0x22c>
 8011472:	7821      	ldrb	r1, [r4, #0]
 8011474:	2203      	movs	r2, #3
 8011476:	4650      	mov	r0, sl
 8011478:	f7ee feba 	bl	80001f0 <memchr>
 801147c:	b138      	cbz	r0, 801148e <_vfiprintf_r+0x176>
 801147e:	9b04      	ldr	r3, [sp, #16]
 8011480:	eba0 000a 	sub.w	r0, r0, sl
 8011484:	2240      	movs	r2, #64	@ 0x40
 8011486:	4082      	lsls	r2, r0
 8011488:	4313      	orrs	r3, r2
 801148a:	3401      	adds	r4, #1
 801148c:	9304      	str	r3, [sp, #16]
 801148e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011492:	4829      	ldr	r0, [pc, #164]	@ (8011538 <_vfiprintf_r+0x220>)
 8011494:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011498:	2206      	movs	r2, #6
 801149a:	f7ee fea9 	bl	80001f0 <memchr>
 801149e:	2800      	cmp	r0, #0
 80114a0:	d03f      	beq.n	8011522 <_vfiprintf_r+0x20a>
 80114a2:	4b26      	ldr	r3, [pc, #152]	@ (801153c <_vfiprintf_r+0x224>)
 80114a4:	bb1b      	cbnz	r3, 80114ee <_vfiprintf_r+0x1d6>
 80114a6:	9b03      	ldr	r3, [sp, #12]
 80114a8:	3307      	adds	r3, #7
 80114aa:	f023 0307 	bic.w	r3, r3, #7
 80114ae:	3308      	adds	r3, #8
 80114b0:	9303      	str	r3, [sp, #12]
 80114b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114b4:	443b      	add	r3, r7
 80114b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80114b8:	e76a      	b.n	8011390 <_vfiprintf_r+0x78>
 80114ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80114be:	460c      	mov	r4, r1
 80114c0:	2001      	movs	r0, #1
 80114c2:	e7a8      	b.n	8011416 <_vfiprintf_r+0xfe>
 80114c4:	2300      	movs	r3, #0
 80114c6:	3401      	adds	r4, #1
 80114c8:	9305      	str	r3, [sp, #20]
 80114ca:	4619      	mov	r1, r3
 80114cc:	f04f 0c0a 	mov.w	ip, #10
 80114d0:	4620      	mov	r0, r4
 80114d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114d6:	3a30      	subs	r2, #48	@ 0x30
 80114d8:	2a09      	cmp	r2, #9
 80114da:	d903      	bls.n	80114e4 <_vfiprintf_r+0x1cc>
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0c6      	beq.n	801146e <_vfiprintf_r+0x156>
 80114e0:	9105      	str	r1, [sp, #20]
 80114e2:	e7c4      	b.n	801146e <_vfiprintf_r+0x156>
 80114e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80114e8:	4604      	mov	r4, r0
 80114ea:	2301      	movs	r3, #1
 80114ec:	e7f0      	b.n	80114d0 <_vfiprintf_r+0x1b8>
 80114ee:	ab03      	add	r3, sp, #12
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	462a      	mov	r2, r5
 80114f4:	4b12      	ldr	r3, [pc, #72]	@ (8011540 <_vfiprintf_r+0x228>)
 80114f6:	a904      	add	r1, sp, #16
 80114f8:	4630      	mov	r0, r6
 80114fa:	f3af 8000 	nop.w
 80114fe:	4607      	mov	r7, r0
 8011500:	1c78      	adds	r0, r7, #1
 8011502:	d1d6      	bne.n	80114b2 <_vfiprintf_r+0x19a>
 8011504:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011506:	07d9      	lsls	r1, r3, #31
 8011508:	d405      	bmi.n	8011516 <_vfiprintf_r+0x1fe>
 801150a:	89ab      	ldrh	r3, [r5, #12]
 801150c:	059a      	lsls	r2, r3, #22
 801150e:	d402      	bmi.n	8011516 <_vfiprintf_r+0x1fe>
 8011510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011512:	f7ff fd25 	bl	8010f60 <__retarget_lock_release_recursive>
 8011516:	89ab      	ldrh	r3, [r5, #12]
 8011518:	065b      	lsls	r3, r3, #25
 801151a:	f53f af1f 	bmi.w	801135c <_vfiprintf_r+0x44>
 801151e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011520:	e71e      	b.n	8011360 <_vfiprintf_r+0x48>
 8011522:	ab03      	add	r3, sp, #12
 8011524:	9300      	str	r3, [sp, #0]
 8011526:	462a      	mov	r2, r5
 8011528:	4b05      	ldr	r3, [pc, #20]	@ (8011540 <_vfiprintf_r+0x228>)
 801152a:	a904      	add	r1, sp, #16
 801152c:	4630      	mov	r0, r6
 801152e:	f000 f879 	bl	8011624 <_printf_i>
 8011532:	e7e4      	b.n	80114fe <_vfiprintf_r+0x1e6>
 8011534:	08013730 	.word	0x08013730
 8011538:	0801373a 	.word	0x0801373a
 801153c:	00000000 	.word	0x00000000
 8011540:	080112f3 	.word	0x080112f3
 8011544:	08013736 	.word	0x08013736

08011548 <_printf_common>:
 8011548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801154c:	4616      	mov	r6, r2
 801154e:	4698      	mov	r8, r3
 8011550:	688a      	ldr	r2, [r1, #8]
 8011552:	690b      	ldr	r3, [r1, #16]
 8011554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011558:	4293      	cmp	r3, r2
 801155a:	bfb8      	it	lt
 801155c:	4613      	movlt	r3, r2
 801155e:	6033      	str	r3, [r6, #0]
 8011560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011564:	4607      	mov	r7, r0
 8011566:	460c      	mov	r4, r1
 8011568:	b10a      	cbz	r2, 801156e <_printf_common+0x26>
 801156a:	3301      	adds	r3, #1
 801156c:	6033      	str	r3, [r6, #0]
 801156e:	6823      	ldr	r3, [r4, #0]
 8011570:	0699      	lsls	r1, r3, #26
 8011572:	bf42      	ittt	mi
 8011574:	6833      	ldrmi	r3, [r6, #0]
 8011576:	3302      	addmi	r3, #2
 8011578:	6033      	strmi	r3, [r6, #0]
 801157a:	6825      	ldr	r5, [r4, #0]
 801157c:	f015 0506 	ands.w	r5, r5, #6
 8011580:	d106      	bne.n	8011590 <_printf_common+0x48>
 8011582:	f104 0a19 	add.w	sl, r4, #25
 8011586:	68e3      	ldr	r3, [r4, #12]
 8011588:	6832      	ldr	r2, [r6, #0]
 801158a:	1a9b      	subs	r3, r3, r2
 801158c:	42ab      	cmp	r3, r5
 801158e:	dc26      	bgt.n	80115de <_printf_common+0x96>
 8011590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011594:	6822      	ldr	r2, [r4, #0]
 8011596:	3b00      	subs	r3, #0
 8011598:	bf18      	it	ne
 801159a:	2301      	movne	r3, #1
 801159c:	0692      	lsls	r2, r2, #26
 801159e:	d42b      	bmi.n	80115f8 <_printf_common+0xb0>
 80115a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115a4:	4641      	mov	r1, r8
 80115a6:	4638      	mov	r0, r7
 80115a8:	47c8      	blx	r9
 80115aa:	3001      	adds	r0, #1
 80115ac:	d01e      	beq.n	80115ec <_printf_common+0xa4>
 80115ae:	6823      	ldr	r3, [r4, #0]
 80115b0:	6922      	ldr	r2, [r4, #16]
 80115b2:	f003 0306 	and.w	r3, r3, #6
 80115b6:	2b04      	cmp	r3, #4
 80115b8:	bf02      	ittt	eq
 80115ba:	68e5      	ldreq	r5, [r4, #12]
 80115bc:	6833      	ldreq	r3, [r6, #0]
 80115be:	1aed      	subeq	r5, r5, r3
 80115c0:	68a3      	ldr	r3, [r4, #8]
 80115c2:	bf0c      	ite	eq
 80115c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115c8:	2500      	movne	r5, #0
 80115ca:	4293      	cmp	r3, r2
 80115cc:	bfc4      	itt	gt
 80115ce:	1a9b      	subgt	r3, r3, r2
 80115d0:	18ed      	addgt	r5, r5, r3
 80115d2:	2600      	movs	r6, #0
 80115d4:	341a      	adds	r4, #26
 80115d6:	42b5      	cmp	r5, r6
 80115d8:	d11a      	bne.n	8011610 <_printf_common+0xc8>
 80115da:	2000      	movs	r0, #0
 80115dc:	e008      	b.n	80115f0 <_printf_common+0xa8>
 80115de:	2301      	movs	r3, #1
 80115e0:	4652      	mov	r2, sl
 80115e2:	4641      	mov	r1, r8
 80115e4:	4638      	mov	r0, r7
 80115e6:	47c8      	blx	r9
 80115e8:	3001      	adds	r0, #1
 80115ea:	d103      	bne.n	80115f4 <_printf_common+0xac>
 80115ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115f4:	3501      	adds	r5, #1
 80115f6:	e7c6      	b.n	8011586 <_printf_common+0x3e>
 80115f8:	18e1      	adds	r1, r4, r3
 80115fa:	1c5a      	adds	r2, r3, #1
 80115fc:	2030      	movs	r0, #48	@ 0x30
 80115fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011602:	4422      	add	r2, r4
 8011604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801160c:	3302      	adds	r3, #2
 801160e:	e7c7      	b.n	80115a0 <_printf_common+0x58>
 8011610:	2301      	movs	r3, #1
 8011612:	4622      	mov	r2, r4
 8011614:	4641      	mov	r1, r8
 8011616:	4638      	mov	r0, r7
 8011618:	47c8      	blx	r9
 801161a:	3001      	adds	r0, #1
 801161c:	d0e6      	beq.n	80115ec <_printf_common+0xa4>
 801161e:	3601      	adds	r6, #1
 8011620:	e7d9      	b.n	80115d6 <_printf_common+0x8e>
	...

08011624 <_printf_i>:
 8011624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011628:	7e0f      	ldrb	r7, [r1, #24]
 801162a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801162c:	2f78      	cmp	r7, #120	@ 0x78
 801162e:	4691      	mov	r9, r2
 8011630:	4680      	mov	r8, r0
 8011632:	460c      	mov	r4, r1
 8011634:	469a      	mov	sl, r3
 8011636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801163a:	d807      	bhi.n	801164c <_printf_i+0x28>
 801163c:	2f62      	cmp	r7, #98	@ 0x62
 801163e:	d80a      	bhi.n	8011656 <_printf_i+0x32>
 8011640:	2f00      	cmp	r7, #0
 8011642:	f000 80d2 	beq.w	80117ea <_printf_i+0x1c6>
 8011646:	2f58      	cmp	r7, #88	@ 0x58
 8011648:	f000 80b9 	beq.w	80117be <_printf_i+0x19a>
 801164c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011654:	e03a      	b.n	80116cc <_printf_i+0xa8>
 8011656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801165a:	2b15      	cmp	r3, #21
 801165c:	d8f6      	bhi.n	801164c <_printf_i+0x28>
 801165e:	a101      	add	r1, pc, #4	@ (adr r1, 8011664 <_printf_i+0x40>)
 8011660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011664:	080116bd 	.word	0x080116bd
 8011668:	080116d1 	.word	0x080116d1
 801166c:	0801164d 	.word	0x0801164d
 8011670:	0801164d 	.word	0x0801164d
 8011674:	0801164d 	.word	0x0801164d
 8011678:	0801164d 	.word	0x0801164d
 801167c:	080116d1 	.word	0x080116d1
 8011680:	0801164d 	.word	0x0801164d
 8011684:	0801164d 	.word	0x0801164d
 8011688:	0801164d 	.word	0x0801164d
 801168c:	0801164d 	.word	0x0801164d
 8011690:	080117d1 	.word	0x080117d1
 8011694:	080116fb 	.word	0x080116fb
 8011698:	0801178b 	.word	0x0801178b
 801169c:	0801164d 	.word	0x0801164d
 80116a0:	0801164d 	.word	0x0801164d
 80116a4:	080117f3 	.word	0x080117f3
 80116a8:	0801164d 	.word	0x0801164d
 80116ac:	080116fb 	.word	0x080116fb
 80116b0:	0801164d 	.word	0x0801164d
 80116b4:	0801164d 	.word	0x0801164d
 80116b8:	08011793 	.word	0x08011793
 80116bc:	6833      	ldr	r3, [r6, #0]
 80116be:	1d1a      	adds	r2, r3, #4
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	6032      	str	r2, [r6, #0]
 80116c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116cc:	2301      	movs	r3, #1
 80116ce:	e09d      	b.n	801180c <_printf_i+0x1e8>
 80116d0:	6833      	ldr	r3, [r6, #0]
 80116d2:	6820      	ldr	r0, [r4, #0]
 80116d4:	1d19      	adds	r1, r3, #4
 80116d6:	6031      	str	r1, [r6, #0]
 80116d8:	0606      	lsls	r6, r0, #24
 80116da:	d501      	bpl.n	80116e0 <_printf_i+0xbc>
 80116dc:	681d      	ldr	r5, [r3, #0]
 80116de:	e003      	b.n	80116e8 <_printf_i+0xc4>
 80116e0:	0645      	lsls	r5, r0, #25
 80116e2:	d5fb      	bpl.n	80116dc <_printf_i+0xb8>
 80116e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116e8:	2d00      	cmp	r5, #0
 80116ea:	da03      	bge.n	80116f4 <_printf_i+0xd0>
 80116ec:	232d      	movs	r3, #45	@ 0x2d
 80116ee:	426d      	negs	r5, r5
 80116f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116f4:	4859      	ldr	r0, [pc, #356]	@ (801185c <_printf_i+0x238>)
 80116f6:	230a      	movs	r3, #10
 80116f8:	e011      	b.n	801171e <_printf_i+0xfa>
 80116fa:	6821      	ldr	r1, [r4, #0]
 80116fc:	6833      	ldr	r3, [r6, #0]
 80116fe:	0608      	lsls	r0, r1, #24
 8011700:	f853 5b04 	ldr.w	r5, [r3], #4
 8011704:	d402      	bmi.n	801170c <_printf_i+0xe8>
 8011706:	0649      	lsls	r1, r1, #25
 8011708:	bf48      	it	mi
 801170a:	b2ad      	uxthmi	r5, r5
 801170c:	2f6f      	cmp	r7, #111	@ 0x6f
 801170e:	4853      	ldr	r0, [pc, #332]	@ (801185c <_printf_i+0x238>)
 8011710:	6033      	str	r3, [r6, #0]
 8011712:	bf14      	ite	ne
 8011714:	230a      	movne	r3, #10
 8011716:	2308      	moveq	r3, #8
 8011718:	2100      	movs	r1, #0
 801171a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801171e:	6866      	ldr	r6, [r4, #4]
 8011720:	60a6      	str	r6, [r4, #8]
 8011722:	2e00      	cmp	r6, #0
 8011724:	bfa2      	ittt	ge
 8011726:	6821      	ldrge	r1, [r4, #0]
 8011728:	f021 0104 	bicge.w	r1, r1, #4
 801172c:	6021      	strge	r1, [r4, #0]
 801172e:	b90d      	cbnz	r5, 8011734 <_printf_i+0x110>
 8011730:	2e00      	cmp	r6, #0
 8011732:	d04b      	beq.n	80117cc <_printf_i+0x1a8>
 8011734:	4616      	mov	r6, r2
 8011736:	fbb5 f1f3 	udiv	r1, r5, r3
 801173a:	fb03 5711 	mls	r7, r3, r1, r5
 801173e:	5dc7      	ldrb	r7, [r0, r7]
 8011740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011744:	462f      	mov	r7, r5
 8011746:	42bb      	cmp	r3, r7
 8011748:	460d      	mov	r5, r1
 801174a:	d9f4      	bls.n	8011736 <_printf_i+0x112>
 801174c:	2b08      	cmp	r3, #8
 801174e:	d10b      	bne.n	8011768 <_printf_i+0x144>
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	07df      	lsls	r7, r3, #31
 8011754:	d508      	bpl.n	8011768 <_printf_i+0x144>
 8011756:	6923      	ldr	r3, [r4, #16]
 8011758:	6861      	ldr	r1, [r4, #4]
 801175a:	4299      	cmp	r1, r3
 801175c:	bfde      	ittt	le
 801175e:	2330      	movle	r3, #48	@ 0x30
 8011760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011764:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011768:	1b92      	subs	r2, r2, r6
 801176a:	6122      	str	r2, [r4, #16]
 801176c:	f8cd a000 	str.w	sl, [sp]
 8011770:	464b      	mov	r3, r9
 8011772:	aa03      	add	r2, sp, #12
 8011774:	4621      	mov	r1, r4
 8011776:	4640      	mov	r0, r8
 8011778:	f7ff fee6 	bl	8011548 <_printf_common>
 801177c:	3001      	adds	r0, #1
 801177e:	d14a      	bne.n	8011816 <_printf_i+0x1f2>
 8011780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011784:	b004      	add	sp, #16
 8011786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	f043 0320 	orr.w	r3, r3, #32
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	4833      	ldr	r0, [pc, #204]	@ (8011860 <_printf_i+0x23c>)
 8011794:	2778      	movs	r7, #120	@ 0x78
 8011796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801179a:	6823      	ldr	r3, [r4, #0]
 801179c:	6831      	ldr	r1, [r6, #0]
 801179e:	061f      	lsls	r7, r3, #24
 80117a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80117a4:	d402      	bmi.n	80117ac <_printf_i+0x188>
 80117a6:	065f      	lsls	r7, r3, #25
 80117a8:	bf48      	it	mi
 80117aa:	b2ad      	uxthmi	r5, r5
 80117ac:	6031      	str	r1, [r6, #0]
 80117ae:	07d9      	lsls	r1, r3, #31
 80117b0:	bf44      	itt	mi
 80117b2:	f043 0320 	orrmi.w	r3, r3, #32
 80117b6:	6023      	strmi	r3, [r4, #0]
 80117b8:	b11d      	cbz	r5, 80117c2 <_printf_i+0x19e>
 80117ba:	2310      	movs	r3, #16
 80117bc:	e7ac      	b.n	8011718 <_printf_i+0xf4>
 80117be:	4827      	ldr	r0, [pc, #156]	@ (801185c <_printf_i+0x238>)
 80117c0:	e7e9      	b.n	8011796 <_printf_i+0x172>
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	f023 0320 	bic.w	r3, r3, #32
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	e7f6      	b.n	80117ba <_printf_i+0x196>
 80117cc:	4616      	mov	r6, r2
 80117ce:	e7bd      	b.n	801174c <_printf_i+0x128>
 80117d0:	6833      	ldr	r3, [r6, #0]
 80117d2:	6825      	ldr	r5, [r4, #0]
 80117d4:	6961      	ldr	r1, [r4, #20]
 80117d6:	1d18      	adds	r0, r3, #4
 80117d8:	6030      	str	r0, [r6, #0]
 80117da:	062e      	lsls	r6, r5, #24
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	d501      	bpl.n	80117e4 <_printf_i+0x1c0>
 80117e0:	6019      	str	r1, [r3, #0]
 80117e2:	e002      	b.n	80117ea <_printf_i+0x1c6>
 80117e4:	0668      	lsls	r0, r5, #25
 80117e6:	d5fb      	bpl.n	80117e0 <_printf_i+0x1bc>
 80117e8:	8019      	strh	r1, [r3, #0]
 80117ea:	2300      	movs	r3, #0
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	4616      	mov	r6, r2
 80117f0:	e7bc      	b.n	801176c <_printf_i+0x148>
 80117f2:	6833      	ldr	r3, [r6, #0]
 80117f4:	1d1a      	adds	r2, r3, #4
 80117f6:	6032      	str	r2, [r6, #0]
 80117f8:	681e      	ldr	r6, [r3, #0]
 80117fa:	6862      	ldr	r2, [r4, #4]
 80117fc:	2100      	movs	r1, #0
 80117fe:	4630      	mov	r0, r6
 8011800:	f7ee fcf6 	bl	80001f0 <memchr>
 8011804:	b108      	cbz	r0, 801180a <_printf_i+0x1e6>
 8011806:	1b80      	subs	r0, r0, r6
 8011808:	6060      	str	r0, [r4, #4]
 801180a:	6863      	ldr	r3, [r4, #4]
 801180c:	6123      	str	r3, [r4, #16]
 801180e:	2300      	movs	r3, #0
 8011810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011814:	e7aa      	b.n	801176c <_printf_i+0x148>
 8011816:	6923      	ldr	r3, [r4, #16]
 8011818:	4632      	mov	r2, r6
 801181a:	4649      	mov	r1, r9
 801181c:	4640      	mov	r0, r8
 801181e:	47d0      	blx	sl
 8011820:	3001      	adds	r0, #1
 8011822:	d0ad      	beq.n	8011780 <_printf_i+0x15c>
 8011824:	6823      	ldr	r3, [r4, #0]
 8011826:	079b      	lsls	r3, r3, #30
 8011828:	d413      	bmi.n	8011852 <_printf_i+0x22e>
 801182a:	68e0      	ldr	r0, [r4, #12]
 801182c:	9b03      	ldr	r3, [sp, #12]
 801182e:	4298      	cmp	r0, r3
 8011830:	bfb8      	it	lt
 8011832:	4618      	movlt	r0, r3
 8011834:	e7a6      	b.n	8011784 <_printf_i+0x160>
 8011836:	2301      	movs	r3, #1
 8011838:	4632      	mov	r2, r6
 801183a:	4649      	mov	r1, r9
 801183c:	4640      	mov	r0, r8
 801183e:	47d0      	blx	sl
 8011840:	3001      	adds	r0, #1
 8011842:	d09d      	beq.n	8011780 <_printf_i+0x15c>
 8011844:	3501      	adds	r5, #1
 8011846:	68e3      	ldr	r3, [r4, #12]
 8011848:	9903      	ldr	r1, [sp, #12]
 801184a:	1a5b      	subs	r3, r3, r1
 801184c:	42ab      	cmp	r3, r5
 801184e:	dcf2      	bgt.n	8011836 <_printf_i+0x212>
 8011850:	e7eb      	b.n	801182a <_printf_i+0x206>
 8011852:	2500      	movs	r5, #0
 8011854:	f104 0619 	add.w	r6, r4, #25
 8011858:	e7f5      	b.n	8011846 <_printf_i+0x222>
 801185a:	bf00      	nop
 801185c:	08013741 	.word	0x08013741
 8011860:	08013752 	.word	0x08013752

08011864 <__sflush_r>:
 8011864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801186c:	0716      	lsls	r6, r2, #28
 801186e:	4605      	mov	r5, r0
 8011870:	460c      	mov	r4, r1
 8011872:	d454      	bmi.n	801191e <__sflush_r+0xba>
 8011874:	684b      	ldr	r3, [r1, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	dc02      	bgt.n	8011880 <__sflush_r+0x1c>
 801187a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801187c:	2b00      	cmp	r3, #0
 801187e:	dd48      	ble.n	8011912 <__sflush_r+0xae>
 8011880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011882:	2e00      	cmp	r6, #0
 8011884:	d045      	beq.n	8011912 <__sflush_r+0xae>
 8011886:	2300      	movs	r3, #0
 8011888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801188c:	682f      	ldr	r7, [r5, #0]
 801188e:	6a21      	ldr	r1, [r4, #32]
 8011890:	602b      	str	r3, [r5, #0]
 8011892:	d030      	beq.n	80118f6 <__sflush_r+0x92>
 8011894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011896:	89a3      	ldrh	r3, [r4, #12]
 8011898:	0759      	lsls	r1, r3, #29
 801189a:	d505      	bpl.n	80118a8 <__sflush_r+0x44>
 801189c:	6863      	ldr	r3, [r4, #4]
 801189e:	1ad2      	subs	r2, r2, r3
 80118a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118a2:	b10b      	cbz	r3, 80118a8 <__sflush_r+0x44>
 80118a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80118a6:	1ad2      	subs	r2, r2, r3
 80118a8:	2300      	movs	r3, #0
 80118aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118ac:	6a21      	ldr	r1, [r4, #32]
 80118ae:	4628      	mov	r0, r5
 80118b0:	47b0      	blx	r6
 80118b2:	1c43      	adds	r3, r0, #1
 80118b4:	89a3      	ldrh	r3, [r4, #12]
 80118b6:	d106      	bne.n	80118c6 <__sflush_r+0x62>
 80118b8:	6829      	ldr	r1, [r5, #0]
 80118ba:	291d      	cmp	r1, #29
 80118bc:	d82b      	bhi.n	8011916 <__sflush_r+0xb2>
 80118be:	4a2a      	ldr	r2, [pc, #168]	@ (8011968 <__sflush_r+0x104>)
 80118c0:	410a      	asrs	r2, r1
 80118c2:	07d6      	lsls	r6, r2, #31
 80118c4:	d427      	bmi.n	8011916 <__sflush_r+0xb2>
 80118c6:	2200      	movs	r2, #0
 80118c8:	6062      	str	r2, [r4, #4]
 80118ca:	04d9      	lsls	r1, r3, #19
 80118cc:	6922      	ldr	r2, [r4, #16]
 80118ce:	6022      	str	r2, [r4, #0]
 80118d0:	d504      	bpl.n	80118dc <__sflush_r+0x78>
 80118d2:	1c42      	adds	r2, r0, #1
 80118d4:	d101      	bne.n	80118da <__sflush_r+0x76>
 80118d6:	682b      	ldr	r3, [r5, #0]
 80118d8:	b903      	cbnz	r3, 80118dc <__sflush_r+0x78>
 80118da:	6560      	str	r0, [r4, #84]	@ 0x54
 80118dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118de:	602f      	str	r7, [r5, #0]
 80118e0:	b1b9      	cbz	r1, 8011912 <__sflush_r+0xae>
 80118e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118e6:	4299      	cmp	r1, r3
 80118e8:	d002      	beq.n	80118f0 <__sflush_r+0x8c>
 80118ea:	4628      	mov	r0, r5
 80118ec:	f7ff fb48 	bl	8010f80 <_free_r>
 80118f0:	2300      	movs	r3, #0
 80118f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80118f4:	e00d      	b.n	8011912 <__sflush_r+0xae>
 80118f6:	2301      	movs	r3, #1
 80118f8:	4628      	mov	r0, r5
 80118fa:	47b0      	blx	r6
 80118fc:	4602      	mov	r2, r0
 80118fe:	1c50      	adds	r0, r2, #1
 8011900:	d1c9      	bne.n	8011896 <__sflush_r+0x32>
 8011902:	682b      	ldr	r3, [r5, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d0c6      	beq.n	8011896 <__sflush_r+0x32>
 8011908:	2b1d      	cmp	r3, #29
 801190a:	d001      	beq.n	8011910 <__sflush_r+0xac>
 801190c:	2b16      	cmp	r3, #22
 801190e:	d11e      	bne.n	801194e <__sflush_r+0xea>
 8011910:	602f      	str	r7, [r5, #0]
 8011912:	2000      	movs	r0, #0
 8011914:	e022      	b.n	801195c <__sflush_r+0xf8>
 8011916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801191a:	b21b      	sxth	r3, r3
 801191c:	e01b      	b.n	8011956 <__sflush_r+0xf2>
 801191e:	690f      	ldr	r7, [r1, #16]
 8011920:	2f00      	cmp	r7, #0
 8011922:	d0f6      	beq.n	8011912 <__sflush_r+0xae>
 8011924:	0793      	lsls	r3, r2, #30
 8011926:	680e      	ldr	r6, [r1, #0]
 8011928:	bf08      	it	eq
 801192a:	694b      	ldreq	r3, [r1, #20]
 801192c:	600f      	str	r7, [r1, #0]
 801192e:	bf18      	it	ne
 8011930:	2300      	movne	r3, #0
 8011932:	eba6 0807 	sub.w	r8, r6, r7
 8011936:	608b      	str	r3, [r1, #8]
 8011938:	f1b8 0f00 	cmp.w	r8, #0
 801193c:	dde9      	ble.n	8011912 <__sflush_r+0xae>
 801193e:	6a21      	ldr	r1, [r4, #32]
 8011940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011942:	4643      	mov	r3, r8
 8011944:	463a      	mov	r2, r7
 8011946:	4628      	mov	r0, r5
 8011948:	47b0      	blx	r6
 801194a:	2800      	cmp	r0, #0
 801194c:	dc08      	bgt.n	8011960 <__sflush_r+0xfc>
 801194e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011956:	81a3      	strh	r3, [r4, #12]
 8011958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011960:	4407      	add	r7, r0
 8011962:	eba8 0800 	sub.w	r8, r8, r0
 8011966:	e7e7      	b.n	8011938 <__sflush_r+0xd4>
 8011968:	dfbffffe 	.word	0xdfbffffe

0801196c <_fflush_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	690b      	ldr	r3, [r1, #16]
 8011970:	4605      	mov	r5, r0
 8011972:	460c      	mov	r4, r1
 8011974:	b913      	cbnz	r3, 801197c <_fflush_r+0x10>
 8011976:	2500      	movs	r5, #0
 8011978:	4628      	mov	r0, r5
 801197a:	bd38      	pop	{r3, r4, r5, pc}
 801197c:	b118      	cbz	r0, 8011986 <_fflush_r+0x1a>
 801197e:	6a03      	ldr	r3, [r0, #32]
 8011980:	b90b      	cbnz	r3, 8011986 <_fflush_r+0x1a>
 8011982:	f7ff f9e3 	bl	8010d4c <__sinit>
 8011986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d0f3      	beq.n	8011976 <_fflush_r+0xa>
 801198e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011990:	07d0      	lsls	r0, r2, #31
 8011992:	d404      	bmi.n	801199e <_fflush_r+0x32>
 8011994:	0599      	lsls	r1, r3, #22
 8011996:	d402      	bmi.n	801199e <_fflush_r+0x32>
 8011998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801199a:	f7ff fae0 	bl	8010f5e <__retarget_lock_acquire_recursive>
 801199e:	4628      	mov	r0, r5
 80119a0:	4621      	mov	r1, r4
 80119a2:	f7ff ff5f 	bl	8011864 <__sflush_r>
 80119a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119a8:	07da      	lsls	r2, r3, #31
 80119aa:	4605      	mov	r5, r0
 80119ac:	d4e4      	bmi.n	8011978 <_fflush_r+0xc>
 80119ae:	89a3      	ldrh	r3, [r4, #12]
 80119b0:	059b      	lsls	r3, r3, #22
 80119b2:	d4e1      	bmi.n	8011978 <_fflush_r+0xc>
 80119b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119b6:	f7ff fad3 	bl	8010f60 <__retarget_lock_release_recursive>
 80119ba:	e7dd      	b.n	8011978 <_fflush_r+0xc>

080119bc <__sread>:
 80119bc:	b510      	push	{r4, lr}
 80119be:	460c      	mov	r4, r1
 80119c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119c4:	f000 f9c0 	bl	8011d48 <_read_r>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	bfab      	itete	ge
 80119cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80119ce:	89a3      	ldrhlt	r3, [r4, #12]
 80119d0:	181b      	addge	r3, r3, r0
 80119d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80119d6:	bfac      	ite	ge
 80119d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80119da:	81a3      	strhlt	r3, [r4, #12]
 80119dc:	bd10      	pop	{r4, pc}

080119de <__swrite>:
 80119de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e2:	461f      	mov	r7, r3
 80119e4:	898b      	ldrh	r3, [r1, #12]
 80119e6:	05db      	lsls	r3, r3, #23
 80119e8:	4605      	mov	r5, r0
 80119ea:	460c      	mov	r4, r1
 80119ec:	4616      	mov	r6, r2
 80119ee:	d505      	bpl.n	80119fc <__swrite+0x1e>
 80119f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119f4:	2302      	movs	r3, #2
 80119f6:	2200      	movs	r2, #0
 80119f8:	f000 f994 	bl	8011d24 <_lseek_r>
 80119fc:	89a3      	ldrh	r3, [r4, #12]
 80119fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a06:	81a3      	strh	r3, [r4, #12]
 8011a08:	4632      	mov	r2, r6
 8011a0a:	463b      	mov	r3, r7
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a12:	f000 b9ab 	b.w	8011d6c <_write_r>

08011a16 <__sseek>:
 8011a16:	b510      	push	{r4, lr}
 8011a18:	460c      	mov	r4, r1
 8011a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a1e:	f000 f981 	bl	8011d24 <_lseek_r>
 8011a22:	1c43      	adds	r3, r0, #1
 8011a24:	89a3      	ldrh	r3, [r4, #12]
 8011a26:	bf15      	itete	ne
 8011a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011a32:	81a3      	strheq	r3, [r4, #12]
 8011a34:	bf18      	it	ne
 8011a36:	81a3      	strhne	r3, [r4, #12]
 8011a38:	bd10      	pop	{r4, pc}

08011a3a <__sclose>:
 8011a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3e:	f000 b93f 	b.w	8011cc0 <_close_r>

08011a42 <_realloc_r>:
 8011a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a46:	4680      	mov	r8, r0
 8011a48:	4615      	mov	r5, r2
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	b921      	cbnz	r1, 8011a58 <_realloc_r+0x16>
 8011a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a52:	4611      	mov	r1, r2
 8011a54:	f7ff b842 	b.w	8010adc <_malloc_r>
 8011a58:	b92a      	cbnz	r2, 8011a66 <_realloc_r+0x24>
 8011a5a:	f7ff fa91 	bl	8010f80 <_free_r>
 8011a5e:	2400      	movs	r4, #0
 8011a60:	4620      	mov	r0, r4
 8011a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a66:	f000 f993 	bl	8011d90 <_malloc_usable_size_r>
 8011a6a:	4285      	cmp	r5, r0
 8011a6c:	4606      	mov	r6, r0
 8011a6e:	d802      	bhi.n	8011a76 <_realloc_r+0x34>
 8011a70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011a74:	d8f4      	bhi.n	8011a60 <_realloc_r+0x1e>
 8011a76:	4629      	mov	r1, r5
 8011a78:	4640      	mov	r0, r8
 8011a7a:	f7ff f82f 	bl	8010adc <_malloc_r>
 8011a7e:	4607      	mov	r7, r0
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d0ec      	beq.n	8011a5e <_realloc_r+0x1c>
 8011a84:	42b5      	cmp	r5, r6
 8011a86:	462a      	mov	r2, r5
 8011a88:	4621      	mov	r1, r4
 8011a8a:	bf28      	it	cs
 8011a8c:	4632      	movcs	r2, r6
 8011a8e:	f7ff fa68 	bl	8010f62 <memcpy>
 8011a92:	4621      	mov	r1, r4
 8011a94:	4640      	mov	r0, r8
 8011a96:	f7ff fa73 	bl	8010f80 <_free_r>
 8011a9a:	463c      	mov	r4, r7
 8011a9c:	e7e0      	b.n	8011a60 <_realloc_r+0x1e>

08011a9e <__swbuf_r>:
 8011a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa0:	460e      	mov	r6, r1
 8011aa2:	4614      	mov	r4, r2
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	b118      	cbz	r0, 8011ab0 <__swbuf_r+0x12>
 8011aa8:	6a03      	ldr	r3, [r0, #32]
 8011aaa:	b90b      	cbnz	r3, 8011ab0 <__swbuf_r+0x12>
 8011aac:	f7ff f94e 	bl	8010d4c <__sinit>
 8011ab0:	69a3      	ldr	r3, [r4, #24]
 8011ab2:	60a3      	str	r3, [r4, #8]
 8011ab4:	89a3      	ldrh	r3, [r4, #12]
 8011ab6:	071a      	lsls	r2, r3, #28
 8011ab8:	d501      	bpl.n	8011abe <__swbuf_r+0x20>
 8011aba:	6923      	ldr	r3, [r4, #16]
 8011abc:	b943      	cbnz	r3, 8011ad0 <__swbuf_r+0x32>
 8011abe:	4621      	mov	r1, r4
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	f000 f82b 	bl	8011b1c <__swsetup_r>
 8011ac6:	b118      	cbz	r0, 8011ad0 <__swbuf_r+0x32>
 8011ac8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011acc:	4638      	mov	r0, r7
 8011ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	6922      	ldr	r2, [r4, #16]
 8011ad4:	1a98      	subs	r0, r3, r2
 8011ad6:	6963      	ldr	r3, [r4, #20]
 8011ad8:	b2f6      	uxtb	r6, r6
 8011ada:	4283      	cmp	r3, r0
 8011adc:	4637      	mov	r7, r6
 8011ade:	dc05      	bgt.n	8011aec <__swbuf_r+0x4e>
 8011ae0:	4621      	mov	r1, r4
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f7ff ff42 	bl	801196c <_fflush_r>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	d1ed      	bne.n	8011ac8 <__swbuf_r+0x2a>
 8011aec:	68a3      	ldr	r3, [r4, #8]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	60a3      	str	r3, [r4, #8]
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	1c5a      	adds	r2, r3, #1
 8011af6:	6022      	str	r2, [r4, #0]
 8011af8:	701e      	strb	r6, [r3, #0]
 8011afa:	6962      	ldr	r2, [r4, #20]
 8011afc:	1c43      	adds	r3, r0, #1
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d004      	beq.n	8011b0c <__swbuf_r+0x6e>
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	07db      	lsls	r3, r3, #31
 8011b06:	d5e1      	bpl.n	8011acc <__swbuf_r+0x2e>
 8011b08:	2e0a      	cmp	r6, #10
 8011b0a:	d1df      	bne.n	8011acc <__swbuf_r+0x2e>
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f7ff ff2c 	bl	801196c <_fflush_r>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d0d9      	beq.n	8011acc <__swbuf_r+0x2e>
 8011b18:	e7d6      	b.n	8011ac8 <__swbuf_r+0x2a>
	...

08011b1c <__swsetup_r>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	4b29      	ldr	r3, [pc, #164]	@ (8011bc4 <__swsetup_r+0xa8>)
 8011b20:	4605      	mov	r5, r0
 8011b22:	6818      	ldr	r0, [r3, #0]
 8011b24:	460c      	mov	r4, r1
 8011b26:	b118      	cbz	r0, 8011b30 <__swsetup_r+0x14>
 8011b28:	6a03      	ldr	r3, [r0, #32]
 8011b2a:	b90b      	cbnz	r3, 8011b30 <__swsetup_r+0x14>
 8011b2c:	f7ff f90e 	bl	8010d4c <__sinit>
 8011b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b34:	0719      	lsls	r1, r3, #28
 8011b36:	d422      	bmi.n	8011b7e <__swsetup_r+0x62>
 8011b38:	06da      	lsls	r2, r3, #27
 8011b3a:	d407      	bmi.n	8011b4c <__swsetup_r+0x30>
 8011b3c:	2209      	movs	r2, #9
 8011b3e:	602a      	str	r2, [r5, #0]
 8011b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b44:	81a3      	strh	r3, [r4, #12]
 8011b46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b4a:	e033      	b.n	8011bb4 <__swsetup_r+0x98>
 8011b4c:	0758      	lsls	r0, r3, #29
 8011b4e:	d512      	bpl.n	8011b76 <__swsetup_r+0x5a>
 8011b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b52:	b141      	cbz	r1, 8011b66 <__swsetup_r+0x4a>
 8011b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b58:	4299      	cmp	r1, r3
 8011b5a:	d002      	beq.n	8011b62 <__swsetup_r+0x46>
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	f7ff fa0f 	bl	8010f80 <_free_r>
 8011b62:	2300      	movs	r3, #0
 8011b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b66:	89a3      	ldrh	r3, [r4, #12]
 8011b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011b6c:	81a3      	strh	r3, [r4, #12]
 8011b6e:	2300      	movs	r3, #0
 8011b70:	6063      	str	r3, [r4, #4]
 8011b72:	6923      	ldr	r3, [r4, #16]
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	89a3      	ldrh	r3, [r4, #12]
 8011b78:	f043 0308 	orr.w	r3, r3, #8
 8011b7c:	81a3      	strh	r3, [r4, #12]
 8011b7e:	6923      	ldr	r3, [r4, #16]
 8011b80:	b94b      	cbnz	r3, 8011b96 <__swsetup_r+0x7a>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b8c:	d003      	beq.n	8011b96 <__swsetup_r+0x7a>
 8011b8e:	4621      	mov	r1, r4
 8011b90:	4628      	mov	r0, r5
 8011b92:	f000 f83f 	bl	8011c14 <__smakebuf_r>
 8011b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b9a:	f013 0201 	ands.w	r2, r3, #1
 8011b9e:	d00a      	beq.n	8011bb6 <__swsetup_r+0x9a>
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	60a2      	str	r2, [r4, #8]
 8011ba4:	6962      	ldr	r2, [r4, #20]
 8011ba6:	4252      	negs	r2, r2
 8011ba8:	61a2      	str	r2, [r4, #24]
 8011baa:	6922      	ldr	r2, [r4, #16]
 8011bac:	b942      	cbnz	r2, 8011bc0 <__swsetup_r+0xa4>
 8011bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011bb2:	d1c5      	bne.n	8011b40 <__swsetup_r+0x24>
 8011bb4:	bd38      	pop	{r3, r4, r5, pc}
 8011bb6:	0799      	lsls	r1, r3, #30
 8011bb8:	bf58      	it	pl
 8011bba:	6962      	ldrpl	r2, [r4, #20]
 8011bbc:	60a2      	str	r2, [r4, #8]
 8011bbe:	e7f4      	b.n	8011baa <__swsetup_r+0x8e>
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	e7f7      	b.n	8011bb4 <__swsetup_r+0x98>
 8011bc4:	20000570 	.word	0x20000570

08011bc8 <__swhatbuf_r>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	460c      	mov	r4, r1
 8011bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bd0:	2900      	cmp	r1, #0
 8011bd2:	b096      	sub	sp, #88	@ 0x58
 8011bd4:	4615      	mov	r5, r2
 8011bd6:	461e      	mov	r6, r3
 8011bd8:	da0d      	bge.n	8011bf6 <__swhatbuf_r+0x2e>
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011be0:	f04f 0100 	mov.w	r1, #0
 8011be4:	bf14      	ite	ne
 8011be6:	2340      	movne	r3, #64	@ 0x40
 8011be8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011bec:	2000      	movs	r0, #0
 8011bee:	6031      	str	r1, [r6, #0]
 8011bf0:	602b      	str	r3, [r5, #0]
 8011bf2:	b016      	add	sp, #88	@ 0x58
 8011bf4:	bd70      	pop	{r4, r5, r6, pc}
 8011bf6:	466a      	mov	r2, sp
 8011bf8:	f000 f872 	bl	8011ce0 <_fstat_r>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	dbec      	blt.n	8011bda <__swhatbuf_r+0x12>
 8011c00:	9901      	ldr	r1, [sp, #4]
 8011c02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c0a:	4259      	negs	r1, r3
 8011c0c:	4159      	adcs	r1, r3
 8011c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c12:	e7eb      	b.n	8011bec <__swhatbuf_r+0x24>

08011c14 <__smakebuf_r>:
 8011c14:	898b      	ldrh	r3, [r1, #12]
 8011c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c18:	079d      	lsls	r5, r3, #30
 8011c1a:	4606      	mov	r6, r0
 8011c1c:	460c      	mov	r4, r1
 8011c1e:	d507      	bpl.n	8011c30 <__smakebuf_r+0x1c>
 8011c20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	6123      	str	r3, [r4, #16]
 8011c28:	2301      	movs	r3, #1
 8011c2a:	6163      	str	r3, [r4, #20]
 8011c2c:	b003      	add	sp, #12
 8011c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c30:	ab01      	add	r3, sp, #4
 8011c32:	466a      	mov	r2, sp
 8011c34:	f7ff ffc8 	bl	8011bc8 <__swhatbuf_r>
 8011c38:	9f00      	ldr	r7, [sp, #0]
 8011c3a:	4605      	mov	r5, r0
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f7fe ff4c 	bl	8010adc <_malloc_r>
 8011c44:	b948      	cbnz	r0, 8011c5a <__smakebuf_r+0x46>
 8011c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c4a:	059a      	lsls	r2, r3, #22
 8011c4c:	d4ee      	bmi.n	8011c2c <__smakebuf_r+0x18>
 8011c4e:	f023 0303 	bic.w	r3, r3, #3
 8011c52:	f043 0302 	orr.w	r3, r3, #2
 8011c56:	81a3      	strh	r3, [r4, #12]
 8011c58:	e7e2      	b.n	8011c20 <__smakebuf_r+0xc>
 8011c5a:	89a3      	ldrh	r3, [r4, #12]
 8011c5c:	6020      	str	r0, [r4, #0]
 8011c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c62:	81a3      	strh	r3, [r4, #12]
 8011c64:	9b01      	ldr	r3, [sp, #4]
 8011c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c6a:	b15b      	cbz	r3, 8011c84 <__smakebuf_r+0x70>
 8011c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c70:	4630      	mov	r0, r6
 8011c72:	f000 f847 	bl	8011d04 <_isatty_r>
 8011c76:	b128      	cbz	r0, 8011c84 <__smakebuf_r+0x70>
 8011c78:	89a3      	ldrh	r3, [r4, #12]
 8011c7a:	f023 0303 	bic.w	r3, r3, #3
 8011c7e:	f043 0301 	orr.w	r3, r3, #1
 8011c82:	81a3      	strh	r3, [r4, #12]
 8011c84:	89a3      	ldrh	r3, [r4, #12]
 8011c86:	431d      	orrs	r5, r3
 8011c88:	81a5      	strh	r5, [r4, #12]
 8011c8a:	e7cf      	b.n	8011c2c <__smakebuf_r+0x18>

08011c8c <memmove>:
 8011c8c:	4288      	cmp	r0, r1
 8011c8e:	b510      	push	{r4, lr}
 8011c90:	eb01 0402 	add.w	r4, r1, r2
 8011c94:	d902      	bls.n	8011c9c <memmove+0x10>
 8011c96:	4284      	cmp	r4, r0
 8011c98:	4623      	mov	r3, r4
 8011c9a:	d807      	bhi.n	8011cac <memmove+0x20>
 8011c9c:	1e43      	subs	r3, r0, #1
 8011c9e:	42a1      	cmp	r1, r4
 8011ca0:	d008      	beq.n	8011cb4 <memmove+0x28>
 8011ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011caa:	e7f8      	b.n	8011c9e <memmove+0x12>
 8011cac:	4402      	add	r2, r0
 8011cae:	4601      	mov	r1, r0
 8011cb0:	428a      	cmp	r2, r1
 8011cb2:	d100      	bne.n	8011cb6 <memmove+0x2a>
 8011cb4:	bd10      	pop	{r4, pc}
 8011cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011cbe:	e7f7      	b.n	8011cb0 <memmove+0x24>

08011cc0 <_close_r>:
 8011cc0:	b538      	push	{r3, r4, r5, lr}
 8011cc2:	4d06      	ldr	r5, [pc, #24]	@ (8011cdc <_close_r+0x1c>)
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	4608      	mov	r0, r1
 8011cca:	602b      	str	r3, [r5, #0]
 8011ccc:	f7f8 f839 	bl	8009d42 <_close>
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	d102      	bne.n	8011cda <_close_r+0x1a>
 8011cd4:	682b      	ldr	r3, [r5, #0]
 8011cd6:	b103      	cbz	r3, 8011cda <_close_r+0x1a>
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	bd38      	pop	{r3, r4, r5, pc}
 8011cdc:	200013a0 	.word	0x200013a0

08011ce0 <_fstat_r>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	4d07      	ldr	r5, [pc, #28]	@ (8011d00 <_fstat_r+0x20>)
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	4608      	mov	r0, r1
 8011cea:	4611      	mov	r1, r2
 8011cec:	602b      	str	r3, [r5, #0]
 8011cee:	f7f8 f834 	bl	8009d5a <_fstat>
 8011cf2:	1c43      	adds	r3, r0, #1
 8011cf4:	d102      	bne.n	8011cfc <_fstat_r+0x1c>
 8011cf6:	682b      	ldr	r3, [r5, #0]
 8011cf8:	b103      	cbz	r3, 8011cfc <_fstat_r+0x1c>
 8011cfa:	6023      	str	r3, [r4, #0]
 8011cfc:	bd38      	pop	{r3, r4, r5, pc}
 8011cfe:	bf00      	nop
 8011d00:	200013a0 	.word	0x200013a0

08011d04 <_isatty_r>:
 8011d04:	b538      	push	{r3, r4, r5, lr}
 8011d06:	4d06      	ldr	r5, [pc, #24]	@ (8011d20 <_isatty_r+0x1c>)
 8011d08:	2300      	movs	r3, #0
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	4608      	mov	r0, r1
 8011d0e:	602b      	str	r3, [r5, #0]
 8011d10:	f7f8 f833 	bl	8009d7a <_isatty>
 8011d14:	1c43      	adds	r3, r0, #1
 8011d16:	d102      	bne.n	8011d1e <_isatty_r+0x1a>
 8011d18:	682b      	ldr	r3, [r5, #0]
 8011d1a:	b103      	cbz	r3, 8011d1e <_isatty_r+0x1a>
 8011d1c:	6023      	str	r3, [r4, #0]
 8011d1e:	bd38      	pop	{r3, r4, r5, pc}
 8011d20:	200013a0 	.word	0x200013a0

08011d24 <_lseek_r>:
 8011d24:	b538      	push	{r3, r4, r5, lr}
 8011d26:	4d07      	ldr	r5, [pc, #28]	@ (8011d44 <_lseek_r+0x20>)
 8011d28:	4604      	mov	r4, r0
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	2200      	movs	r2, #0
 8011d30:	602a      	str	r2, [r5, #0]
 8011d32:	461a      	mov	r2, r3
 8011d34:	f7f8 f82c 	bl	8009d90 <_lseek>
 8011d38:	1c43      	adds	r3, r0, #1
 8011d3a:	d102      	bne.n	8011d42 <_lseek_r+0x1e>
 8011d3c:	682b      	ldr	r3, [r5, #0]
 8011d3e:	b103      	cbz	r3, 8011d42 <_lseek_r+0x1e>
 8011d40:	6023      	str	r3, [r4, #0]
 8011d42:	bd38      	pop	{r3, r4, r5, pc}
 8011d44:	200013a0 	.word	0x200013a0

08011d48 <_read_r>:
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	4d07      	ldr	r5, [pc, #28]	@ (8011d68 <_read_r+0x20>)
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	4608      	mov	r0, r1
 8011d50:	4611      	mov	r1, r2
 8011d52:	2200      	movs	r2, #0
 8011d54:	602a      	str	r2, [r5, #0]
 8011d56:	461a      	mov	r2, r3
 8011d58:	f7f7 ffba 	bl	8009cd0 <_read>
 8011d5c:	1c43      	adds	r3, r0, #1
 8011d5e:	d102      	bne.n	8011d66 <_read_r+0x1e>
 8011d60:	682b      	ldr	r3, [r5, #0]
 8011d62:	b103      	cbz	r3, 8011d66 <_read_r+0x1e>
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	bd38      	pop	{r3, r4, r5, pc}
 8011d68:	200013a0 	.word	0x200013a0

08011d6c <_write_r>:
 8011d6c:	b538      	push	{r3, r4, r5, lr}
 8011d6e:	4d07      	ldr	r5, [pc, #28]	@ (8011d8c <_write_r+0x20>)
 8011d70:	4604      	mov	r4, r0
 8011d72:	4608      	mov	r0, r1
 8011d74:	4611      	mov	r1, r2
 8011d76:	2200      	movs	r2, #0
 8011d78:	602a      	str	r2, [r5, #0]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	f7f7 ffc5 	bl	8009d0a <_write>
 8011d80:	1c43      	adds	r3, r0, #1
 8011d82:	d102      	bne.n	8011d8a <_write_r+0x1e>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	b103      	cbz	r3, 8011d8a <_write_r+0x1e>
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	bd38      	pop	{r3, r4, r5, pc}
 8011d8c:	200013a0 	.word	0x200013a0

08011d90 <_malloc_usable_size_r>:
 8011d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d94:	1f18      	subs	r0, r3, #4
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	bfbc      	itt	lt
 8011d9a:	580b      	ldrlt	r3, [r1, r0]
 8011d9c:	18c0      	addlt	r0, r0, r3
 8011d9e:	4770      	bx	lr

08011da0 <_init>:
 8011da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011da2:	bf00      	nop
 8011da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011da6:	bc08      	pop	{r3}
 8011da8:	469e      	mov	lr, r3
 8011daa:	4770      	bx	lr

08011dac <_fini>:
 8011dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dae:	bf00      	nop
 8011db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011db2:	bc08      	pop	{r3}
 8011db4:	469e      	mov	lr, r3
 8011db6:	4770      	bx	lr
