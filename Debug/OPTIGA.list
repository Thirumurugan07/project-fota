
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f940  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800fae0  0800fae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010068  08010068  000125bc  2**0
                  CONTENTS
  4 .ARM          00000008  08010068  08010068  00011068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010070  08010070  000125bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010070  08010070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010074  08010074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005bc  20000000  08010078  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  200005bc  08010634  000125bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001390  08010634  00013390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000125bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e64d  00000000  00000000  000125ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fc0  00000000  00000000  00030c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000144d  00000000  00000000  00037670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0d0  00000000  00000000  00038abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e10  00000000  00000000  00054b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1e7  00000000  00000000  0007899d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007470  00000000  00000000  00115bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005bc 	.word	0x200005bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fac8 	.word	0x0800fac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c0 	.word	0x200005c0
 80001dc:	0800fac8 	.word	0x0800fac8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 800057a:	481f      	ldr	r0, [pc, #124]	@ (80005f8 <etx_ota_download_and_flash+0x88>)
 800057c:	f00e fc9c 	bl	800eeb8 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <etx_ota_download_and_flash+0x8c>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <etx_ota_download_and_flash+0x90>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <etx_ota_download_and_flash+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <etx_ota_download_and_flash+0x98>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000598:	f240 4209 	movw	r2, #1033	@ 0x409
 800059c:	2100      	movs	r1, #0
 800059e:	481b      	ldr	r0, [pc, #108]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005a0:	f00e fca2 	bl	800eee8 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 80005a4:	f240 4109 	movw	r1, #1033	@ 0x409
 80005a8:	4818      	ldr	r0, [pc, #96]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005aa:	f000 f905 	bl	80007b8 <etx_receive_chunk>
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005b8:	88bb      	ldrh	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4813      	ldr	r0, [pc, #76]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005be:	f000 f829 	bl	8000614 <etx_process_data>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e001      	b.n	80005cc <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 80005d2:	480f      	ldr	r0, [pc, #60]	@ (8000610 <etx_ota_download_and_flash+0xa0>)
 80005d4:	f00e fc70 	bl	800eeb8 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f9a9 	bl	8000930 <etx_ota_send_resp>
      break;
 80005de:	e006      	b.n	80005ee <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f9a5 	bl	8000930 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <etx_ota_download_and_flash+0x98>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1d4      	bne.n	8000598 <etx_ota_download_and_flash+0x28>

  return ret;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800fae0 	.word	0x0800fae0
 80005fc:	200009e4 	.word	0x200009e4
 8000600:	200009ec 	.word	0x200009ec
 8000604:	200009e8 	.word	0x200009e8
 8000608:	200009e1 	.word	0x200009e1
 800060c:	200005d8 	.word	0x200005d8
 8000610:	0800fb00 	.word	0x0800fb00

08000614 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000620:	2301      	movs	r3, #1
 8000622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f000 80ad 	beq.w	8000788 <etx_process_data+0x174>
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80a9 	beq.w	8000788 <etx_process_data+0x174>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	2b02      	cmp	r3, #2
 8000648:	f000 8095 	beq.w	8000776 <etx_process_data+0x162>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 800064c:	4b51      	ldr	r3, [pc, #324]	@ (8000794 <etx_process_data+0x180>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b04      	cmp	r3, #4
 8000652:	f200 808c 	bhi.w	800076e <etx_process_data+0x15a>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <etx_process_data+0x48>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	08000671 	.word	0x08000671
 8000660:	0800067f 	.word	0x0800067f
 8000664:	080006a7 	.word	0x080006a7
 8000668:	080006dd 	.word	0x080006dd
 800066c:	08000747 	.word	0x08000747
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <etx_process_data+0x184>)
 8000672:	f00e fc21 	bl	800eeb8 <puts>
        ret = ETX_OTA_EX_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800067c:	e084      	b.n	8000788 <etx_process_data+0x174>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d177      	bne.n	800077a <etx_process_data+0x166>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d173      	bne.n	800077a <etx_process_data+0x166>
          {
            printf("Received OTA START Command\r\n");
 8000692:	4842      	ldr	r0, [pc, #264]	@ (800079c <etx_process_data+0x188>)
 8000694:	f00e fc10 	bl	800eeb8 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000698:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <etx_process_data+0x180>)
 800069a:	2202      	movs	r2, #2
 800069c:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 80006a4:	e069      	b.n	800077a <etx_process_data+0x166>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d165      	bne.n	800077e <etx_process_data+0x16a>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4a3a      	ldr	r2, [pc, #232]	@ (80007a0 <etx_process_data+0x18c>)
 80006b8:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	4a39      	ldr	r2, [pc, #228]	@ (80007a4 <etx_process_data+0x190>)
 80006c0:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 80006c2:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <etx_process_data+0x18c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4837      	ldr	r0, [pc, #220]	@ (80007a8 <etx_process_data+0x194>)
 80006ca:	f00e fb85 	bl	800edd8 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 80006ce:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <etx_process_data+0x180>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 80006da:	e050      	b.n	800077e <etx_process_data+0x16a>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	789a      	ldrb	r2, [r3, #2]
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4313      	orrs	r3, r2
 80006ea:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d146      	bne.n	8000782 <etx_process_data+0x16e>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1d18      	adds	r0, r3, #4
 80006f8:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <etx_process_data+0x198>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2da      	uxtb	r2, r3
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	4619      	mov	r1, r3
 800070a:	f000 f937 	bl	800097c <write_data_to_flash_app>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000712:	7d7b      	ldrb	r3, [r7, #21]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d134      	bne.n	8000782 <etx_process_data+0x16e>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <etx_process_data+0x198>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	0a99      	lsrs	r1, r3, #10
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <etx_process_data+0x18c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0a9b      	lsrs	r3, r3, #10
 8000724:	461a      	mov	r2, r3
 8000726:	4822      	ldr	r0, [pc, #136]	@ (80007b0 <etx_process_data+0x19c>)
 8000728:	f00e fb56 	bl	800edd8 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <etx_process_data+0x198>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <etx_process_data+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d302      	bcc.n	800073e <etx_process_data+0x12a>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <etx_process_data+0x180>)
 800073a:	2204      	movs	r2, #4
 800073c:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8000744:	e01d      	b.n	8000782 <etx_process_data+0x16e>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d119      	bne.n	8000786 <etx_process_data+0x172>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d115      	bne.n	8000786 <etx_process_data+0x172>
          {
            printf("Received OTA END Command\r\n");
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <etx_process_data+0x1a0>)
 800075c:	f00e fbac 	bl	800eeb8 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <etx_process_data+0x180>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 800076c:	e00b      	b.n	8000786 <etx_process_data+0x172>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000774:	e008      	b.n	8000788 <etx_process_data+0x174>
        break;
 8000776:	bf00      	nop
 8000778:	e006      	b.n	8000788 <etx_process_data+0x174>
      break;
 800077a:	bf00      	nop
 800077c:	e004      	b.n	8000788 <etx_process_data+0x174>
      break;
 800077e:	bf00      	nop
 8000780:	e002      	b.n	8000788 <etx_process_data+0x174>
      break;
 8000782:	bf00      	nop
 8000784:	e000      	b.n	8000788 <etx_process_data+0x174>
      break;
 8000786:	bf00      	nop
    };
  }while( false );

  return ret;
 8000788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800078c:	4618      	mov	r0, r3
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200009e1 	.word	0x200009e1
 8000798:	0800fb10 	.word	0x0800fb10
 800079c:	0800fb28 	.word	0x0800fb28
 80007a0:	200009e4 	.word	0x200009e4
 80007a4:	200009e8 	.word	0x200009e8
 80007a8:	0800fb44 	.word	0x0800fb44
 80007ac:	200009ec 	.word	0x200009ec
 80007b0:	0800fb6c 	.word	0x0800fb6c
 80007b4:	0800fb78 	.word	0x0800fb78

080007b8 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 80007c4:	2300      	movs	r3, #0
 80007c6:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	18d1      	adds	r1, r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	2201      	movs	r2, #1
 80007d4:	4854      	ldr	r0, [pc, #336]	@ (8000928 <etx_receive_chunk+0x170>)
 80007d6:	f00d f998 	bl	800db0a <HAL_UART_Receive>
 80007da:	4603      	mov	r3, r0
 80007dc:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80007de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d17f      	bne.n	80008e6 <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	81ba      	strh	r2, [r7, #12]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2baa      	cmp	r3, #170	@ 0xaa
 80007f6:	d002      	beq.n	80007fe <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	81fb      	strh	r3, [r7, #14]
      break;
 80007fc:	e07c      	b.n	80008f8 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	81ba      	strh	r2, [r7, #12]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1899      	adds	r1, r3, r2
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080e:	2201      	movs	r2, #1
 8000810:	4845      	ldr	r0, [pc, #276]	@ (8000928 <etx_receive_chunk+0x170>)
 8000812:	f00d f97a 	bl	800db0a <HAL_UART_Receive>
 8000816:	4603      	mov	r3, r0
 8000818:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800081a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d163      	bne.n	80008ea <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000822:	89bb      	ldrh	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	18d1      	adds	r1, r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082c:	2202      	movs	r2, #2
 800082e:	483e      	ldr	r0, [pc, #248]	@ (8000928 <etx_receive_chunk+0x170>)
 8000830:	f00d f96b 	bl	800db0a <HAL_UART_Receive>
 8000834:	4603      	mov	r3, r0
 8000836:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d156      	bne.n	80008ee <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	813b      	strh	r3, [r7, #8]
    index += 2u;
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	3302      	adds	r3, #2
 800084e:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000850:	2300      	movs	r3, #0
 8000852:	817b      	strh	r3, [r7, #10]
 8000854:	e014      	b.n	8000880 <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	81ba      	strh	r2, [r7, #12]
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1899      	adds	r1, r3, r2
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	2201      	movs	r2, #1
 8000868:	482f      	ldr	r0, [pc, #188]	@ (8000928 <etx_receive_chunk+0x170>)
 800086a:	f00d f94e 	bl	800db0a <HAL_UART_Receive>
 800086e:	4603      	mov	r3, r0
 8000870:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 8000872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d107      	bne.n	800088a <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 800087a:	897b      	ldrh	r3, [r7, #10]
 800087c:	3301      	adds	r3, #1
 800087e:	817b      	strh	r3, [r7, #10]
 8000880:	897a      	ldrh	r2, [r7, #10]
 8000882:	893b      	ldrh	r3, [r7, #8]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3e6      	bcc.n	8000856 <etx_receive_chunk+0x9e>
 8000888:	e000      	b.n	800088c <etx_receive_chunk+0xd4>
      {
        break;
 800088a:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	18d1      	adds	r1, r2, r3
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2204      	movs	r2, #4
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <etx_receive_chunk+0x170>)
 800089a:	f00d f936 	bl	800db0a <HAL_UART_Receive>
 800089e:	4603      	mov	r3, r0
 80008a0:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d123      	bne.n	80008f2 <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80008b0:	89bb      	ldrh	r3, [r7, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	18d1      	adds	r1, r2, r3
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ba:	2201      	movs	r2, #1
 80008bc:	481a      	ldr	r0, [pc, #104]	@ (8000928 <etx_receive_chunk+0x170>)
 80008be:	f00d f924 	bl	800db0a <HAL_UART_Receive>
 80008c2:	4603      	mov	r3, r0
 80008c4:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d113      	bne.n	80008f6 <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 80008ce:	89bb      	ldrh	r3, [r7, #12]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	81ba      	strh	r2, [r7, #12]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2bbb      	cmp	r3, #187	@ 0xbb
 80008de:	d00b      	beq.n	80008f8 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	81fb      	strh	r3, [r7, #14]
      break;
 80008e4:	e008      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008e6:	bf00      	nop
 80008e8:	e006      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008ea:	bf00      	nop
 80008ec:	e004      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008ee:	bf00      	nop
 80008f0:	e002      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008f6:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 80008f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 8000900:	2300      	movs	r3, #0
 8000902:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800090c:	887b      	ldrh	r3, [r7, #2]
 800090e:	89ba      	ldrh	r2, [r7, #12]
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <etx_receive_chunk+0x174>)
 8000914:	f00e fa60 	bl	800edd8 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000918:	2300      	movs	r3, #0
 800091a:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 800091c:	89bb      	ldrh	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000acc 	.word	0x20000acc
 800092c:	0800fb94 	.word	0x0800fb94

08000930 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 800093a:	23aa      	movs	r3, #170	@ 0xaa
 800093c:	733b      	strb	r3, [r7, #12]
 800093e:	2303      	movs	r3, #3
 8000940:	737b      	strb	r3, [r7, #13]
 8000942:	2301      	movs	r3, #1
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	743b      	strb	r3, [r7, #16]
 800094a:	2300      	movs	r3, #0
 800094c:	747b      	strb	r3, [r7, #17]
 800094e:	2300      	movs	r3, #0
 8000950:	74bb      	strb	r3, [r7, #18]
 8000952:	2300      	movs	r3, #0
 8000954:	74fb      	strb	r3, [r7, #19]
 8000956:	2300      	movs	r3, #0
 8000958:	753b      	strb	r3, [r7, #20]
 800095a:	23bb      	movs	r3, #187	@ 0xbb
 800095c:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 800095e:	f107 010c 	add.w	r1, r7, #12
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	220a      	movs	r2, #10
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <etx_ota_send_resp+0x48>)
 800096a:	f00d f843 	bl	800d9f4 <HAL_UART_Transmit>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000acc 	.word	0x20000acc

0800097c <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 800098c:	f008 fbb4 	bl	80090f8 <HAL_FLASH_Unlock>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800099a:	2b00      	cmp	r3, #0
 800099c:	d157      	bne.n	8000a4e <write_data_to_flash_app+0xd2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 800099e:	787b      	ldrb	r3, [r7, #1]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d019      	beq.n	80009d8 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 80009a4:	482f      	ldr	r0, [pc, #188]	@ (8000a64 <write_data_to_flash_app+0xe8>)
 80009a6:	f00e fa87 	bl	800eeb8 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80009ae:	2305      	movs	r3, #5
 80009b0:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80009ba:	f107 0208 	add.w	r2, r7, #8
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 fd09 	bl	80093dc <HAL_FLASHEx_Erase>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80009d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13c      	bne.n	8000a52 <write_data_to_flash_app+0xd6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	e026      	b.n	8000a2c <write_data_to_flash_app+0xb0>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <write_data_to_flash_app+0xec>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 80009e6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[i]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	461c      	mov	r4, r3
 80009f8:	4615      	mov	r5, r2
 80009fa:	4622      	mov	r2, r4
 80009fc:	462b      	mov	r3, r5
 80009fe:	2000      	movs	r0, #0
 8000a00:	f008 fb28 	bl	8009054 <HAL_FLASH_Program>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                             );
      if( ret == HAL_OK )
 8000a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <write_data_to_flash_app+0xa2>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <write_data_to_flash_app+0xec>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <write_data_to_flash_app+0xec>)
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e003      	b.n	8000a26 <write_data_to_flash_app+0xaa>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a1e:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <write_data_to_flash_app+0xf0>)
 8000a20:	f00e fa4a 	bl	800eeb8 <puts>
        break;
 8000a24:	e006      	b.n	8000a34 <write_data_to_flash_app+0xb8>
    for(int i = 0; i < data_len; i++ )
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
 8000a2c:	887b      	ldrh	r3, [r7, #2]
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbd4      	blt.n	80009de <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10c      	bne.n	8000a56 <write_data_to_flash_app+0xda>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a3c:	f008 fb7e 	bl	800913c <HAL_FLASH_Lock>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	e004      	b.n	8000a58 <write_data_to_flash_app+0xdc>
      break;
 8000a4e:	bf00      	nop
 8000a50:	e002      	b.n	8000a58 <write_data_to_flash_app+0xdc>
        break;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <write_data_to_flash_app+0xdc>
      break;
 8000a56:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	0800fbd8 	.word	0x0800fbd8
 8000a68:	200009ec 	.word	0x200009ec
 8000a6c:	0800fbf8 	.word	0x0800fbf8

08000a70 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000a78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a7c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d027      	beq.n	8000ad8 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d818      	bhi.n	8000ad6 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	22b1      	movs	r2, #177	@ 0xb1
 8000aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f8f5 	bl	8000cac <ifx_i2c_init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8000ad4:	e000      	b.n	8000ad8 <ifx_i2c_open+0x68>
                break;
 8000ad6:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b088      	sub	sp, #32
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4613      	mov	r3, r2
 8000af0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000af2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000af6:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d122      	bne.n	8000b48 <ifx_i2c_transceive+0x66>
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d01d      	beq.n	8000b48 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a3a      	ldr	r2, [r7, #32]
 8000b18:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000b1c:	88fa      	ldrh	r2, [r7, #6]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f001 fb00 	bl	800212c <ifx_i2c_prl_transceive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000b30:	8afb      	ldrh	r3, [r7, #22]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d108      	bne.n	8000b48 <ifx_i2c_transceive+0x66>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2203      	movs	r2, #3
 8000b44:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000b48:	8afb      	ldrh	r3, [r7, #22]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000b5c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000b60:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d02a      	beq.n	8000bc2 <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000b76:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000b82:	4912      	ldr	r1, [pc, #72]	@ (8000bcc <ifx_i2c_close+0x78>)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f001 fa8f 	bl	80020a8 <ifx_i2c_prl_close>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000b94:	d115      	bne.n	8000bc2 <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 fb60 	bl	8006262 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 fafa 	bl	80061a2 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 faf4 	bl	80061a2 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	08000c39 	.word	0x08000c39

08000bd0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	460b      	mov	r3, r1
 8000bde:	817b      	strh	r3, [r7, #10]
 8000be0:	4613      	mov	r3, r2
 8000be2:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d008      	beq.n	8000c00 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000bfa:	8979      	ldrh	r1, [r7, #10]
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	897a      	ldrh	r2, [r7, #10]
 8000c04:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d107      	bne.n	8000c2a <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000c1a:	897b      	ldrh	r3, [r7, #10]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d106      	bne.n	8000c2e <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2202      	movs	r2, #2
 8000c24:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000c28:	e001      	b.n	8000c2e <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8000c2a:	bf00      	nop
 8000c2c:	e000      	b.n	8000c30 <ifx_i2c_tl_event_handler+0x60>
            break;
 8000c2e:	bf00      	nop
    }
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	461a      	mov	r2, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	817b      	strh	r3, [r7, #10]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d112      	bne.n	8000c84 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 fafc 	bl	8006262 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fa96 	bl	80061a2 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fa90 	bl	80061a2 <pal_gpio_set_low>
            break;
 8000c82:	e000      	b.n	8000c86 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000c84:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000c9c:	8979      	ldrh	r1, [r7, #10]
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4798      	blx	r3
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8000cb4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000cb8:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d004      	beq.n	8000cce <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d156      	bne.n	8000d7c <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000cd4:	2bb3      	cmp	r3, #179	@ 0xb3
 8000cd6:	d048      	beq.n	8000d6a <ifx_i2c_init+0xbe>
 8000cd8:	2bb3      	cmp	r3, #179	@ 0xb3
 8000cda:	dc4d      	bgt.n	8000d78 <ifx_i2c_init+0xcc>
 8000cdc:	2bb1      	cmp	r3, #177	@ 0xb1
 8000cde:	d002      	beq.n	8000ce6 <ifx_i2c_init+0x3a>
 8000ce0:	2bb2      	cmp	r3, #178	@ 0xb2
 8000ce2:	d021      	beq.n	8000d28 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 8000ce4:	e048      	b.n	8000d78 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 fa53 	bl	80061a2 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 fa4d 	bl	80061a2 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	22b2      	movs	r2, #178	@ 0xb2
 8000d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000d16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4923      	ldr	r1, [pc, #140]	@ (8000dac <ifx_i2c_init+0x100>)
 8000d1e:	f005 fc79 	bl	8006614 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	81fb      	strh	r3, [r7, #14]
                break;
 8000d26:	e028      	b.n	8000d7a <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fa22 	bl	8006182 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fa1c 	bl	8006182 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	22b3      	movs	r2, #179	@ 0xb3
 8000d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000d58:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4913      	ldr	r1, [pc, #76]	@ (8000dac <ifx_i2c_init+0x100>)
 8000d60:	f005 fc58 	bl	8006614 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000d64:	2300      	movs	r3, #0
 8000d66:	81fb      	strh	r3, [r7, #14]
                break;
 8000d68:	e007      	b.n	8000d7a <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000d6a:	4911      	ldr	r1, [pc, #68]	@ (8000db0 <ifx_i2c_init+0x104>)
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f001 f953 	bl	8002018 <ifx_i2c_prl_init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	81fb      	strh	r3, [r7, #14]
                break;
 8000d76:	e000      	b.n	8000d7a <ifx_i2c_init+0xce>
                break;
 8000d78:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8000d7a:	e009      	b.n	8000d90 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000d84:	490a      	ldr	r1, [pc, #40]	@ (8000db0 <ifx_i2c_init+0x104>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f001 f946 	bl	8002018 <ifx_i2c_prl_init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000d96:	89f9      	ldrh	r1, [r7, #14]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff17 	bl	8000bd0 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000da2:	89fb      	ldrh	r3, [r7, #14]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	08000cad 	.word	0x08000cad
 8000db0:	08000bd1 	.word	0x08000bd1

08000db4 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000dc6:	4919      	ldr	r1, [pc, #100]	@ (8000e2c <ifx_i2c_dl_init+0x78>)
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fc37 	bl	800163c <ifx_i2c_pl_init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000dd4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000dd8:	e024      	b.n	8000e24 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	080011d1 	.word	0x080011d1

08000e30 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d102      	bne.n	8000e4c <ifx_i2c_dl_send_frame+0x1c>
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000e4c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000e50:	e01a      	b.n	8000e88 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2202      	movs	r2, #2
 8000e56:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	220a      	movs	r2, #10
 8000e76:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000e7a:	8879      	ldrh	r1, [r7, #2]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 f88a 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d002      	beq.n	8000ea8 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000ea2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000ea6:	e019      	b.n	8000edc <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000ec0:	f005 fc53 	bl	800676a <pal_os_timer_get_time_in_milliseconds>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <ifx_i2c_dl_receive_frame+0x54>)
 8000ed0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fc2a 	bl	800172e <ifx_i2c_pl_receive_frame>
 8000eda:	4603      	mov	r3, r0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0002bf20 	.word	0x0002bf20

08000ee8 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4053      	eors	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	4053      	eors	r3, r2
 8000f18:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000f20:	897b      	ldrh	r3, [r7, #10]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	893b      	ldrh	r3, [r7, #8]
 8000f28:	4053      	eors	r3, r2
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	89bb      	ldrh	r3, [r7, #12]
 8000f32:	4053      	eors	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	893b      	ldrh	r3, [r7, #8]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4053      	eors	r3, r2
 8000f48:	b29b      	uxth	r3, r3
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
 8000f6a:	e00d      	b.n	8000f88 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffb5 	bl	8000ee8 <ifx_i2c_dl_calc_crc_byte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	89fa      	ldrh	r2, [r7, #14]
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ed      	bcc.n	8000f6c <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000f90:	89bb      	ldrh	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	460b      	mov	r3, r1
 8000fae:	707b      	strb	r3, [r7, #1]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000fba:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d107      	bne.n	8000fd2 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000fd8:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000fda:	787b      	ldrb	r3, [r7, #1]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d105      	bne.n	8000fec <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000fea:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <ifx_i2c_dl_send_frame_internal+0x6a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d103      	bne.n	8001004 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001002:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	015b      	lsls	r3, r3, #5
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8001024:	783b      	ldrb	r3, [r7, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <ifx_i2c_dl_send_frame_internal+0x9a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00a      	beq.n	800104a <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800103a:	3301      	adds	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b2da      	uxtb	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8001068:	e006      	b.n	8001078 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001072:	b2da      	uxtb	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	3301      	adds	r3, #1
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	3302      	adds	r3, #2
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	3303      	adds	r3, #3
 8001094:	b29b      	uxth	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	6938      	ldr	r0, [r7, #16]
 800109a:	f7ff ff5c 	bl	8000f56 <ifx_i2c_dl_calc_crc>
 800109e:	4603      	mov	r3, r0
 80010a0:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	3303      	adds	r3, #3
 80010ac:	4619      	mov	r1, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	440b      	add	r3, r1
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	3304      	adds	r3, #4
 80010ba:	461a      	mov	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	3305      	adds	r3, #5
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fb03 	bl	80016dc <ifx_i2c_pl_send_frame>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2205      	movs	r2, #5
 8001104:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8001108:	2300      	movs	r3, #0
 800110a:	2202      	movs	r2, #2
 800110c:	2100      	movs	r1, #0
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff43 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
 8001114:	4603      	mov	r3, r0
 8001116:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8001118:	89fb      	ldrh	r3, [r7, #14]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8001130:	f005 fb1b 	bl	800676a <pal_os_timer_get_time_in_milliseconds>
 8001134:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	429a      	cmp	r2, r3
 800114c:	d205      	bcs.n	800115a <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <ifx_i2c_dl_resend_frame+0xa8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d82c      	bhi.n	80011bc <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001168:	2b03      	cmp	r3, #3
 800116a:	d109      	bne.n	8001180 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffb3 	bl	80010e0 <ifx_i2c_dl_resync>
 800117a:	4603      	mov	r3, r0
 800117c:	82fb      	strh	r3, [r7, #22]
 800117e:	e015      	b.n	80011ac <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2202      	movs	r2, #2
 8001194:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	2301      	movs	r3, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fef9 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
 80011a8:	4603      	mov	r3, r0
 80011aa:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2206      	movs	r2, #6
 80011b6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 80011ba:	e003      	b.n	80011c4 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2208      	movs	r2, #8
 80011c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0002bf1f 	.word	0x0002bf1f

080011d0 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	817b      	strh	r3, [r7, #10]
 80011e0:	4613      	mov	r3, r2
 80011e2:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800120e:	d108      	bne.n	8001222 <ifx_i2c_pl_event_handler+0x52>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001216:	2b01      	cmp	r3, #1
 8001218:	d003      	beq.n	8001222 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2208      	movs	r2, #8
 800121e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001228:	3b01      	subs	r3, #1
 800122a:	2b0a      	cmp	r3, #10
 800122c:	f200 81ed 	bhi.w	800160a <ifx_i2c_pl_event_handler+0x43a>
 8001230:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <ifx_i2c_pl_event_handler+0x68>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	08001265 	.word	0x08001265
 800123c:	0800128b 	.word	0x0800128b
 8001240:	080012cd 	.word	0x080012cd
 8001244:	0800151f 	.word	0x0800151f
 8001248:	080015a1 	.word	0x080015a1
 800124c:	08001587 	.word	0x08001587
 8001250:	0800160b 	.word	0x0800160b
 8001254:	080015b9 	.word	0x080015b9
 8001258:	0800150b 	.word	0x0800150b
 800125c:	08001379 	.word	0x08001379
 8001260:	08001449 	.word	0x08001449
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <ifx_i2c_pl_event_handler+0x9e>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <ifx_i2c_pl_event_handler+0xa0>
 800126e:	2302      	movs	r3, #2
 8001270:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8001272:	2300      	movs	r3, #0
 8001274:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	b299      	uxth	r1, r3
 8001280:	2300      	movs	r3, #0
 8001282:	2200      	movs	r2, #0
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	47a0      	blx	r4
            }
            break;
 8001288:	e1cf      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001290:	d104      	bne.n	800129c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2205      	movs	r2, #5
 8001296:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800129a:	e1c6      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800129c:	f005 fa65 	bl	800676a <pal_os_timer_get_time_in_milliseconds>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2203      	movs	r2, #3
 80012ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 fa3c 	bl	800172e <ifx_i2c_pl_receive_frame>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2206      	movs	r2, #6
 80012c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 80012c4:	e1b1      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	773b      	strb	r3, [r7, #28]
            break;
 80012ca:	e1ae      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80012d2:	d104      	bne.n	80012de <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2205      	movs	r2, #5
 80012d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80012dc:	e1a5      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 80012de:	893b      	ldrh	r3, [r7, #8]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d804      	bhi.n	80012ee <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2206      	movs	r2, #6
 80012e8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80012ec:	e19d      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	115b      	asrs	r3, r3, #5
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8001306:	7d7b      	ldrb	r3, [r7, #21]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 800130e:	7d7b      	ldrb	r3, [r7, #21]
 8001310:	109b      	asrs	r3, r3, #2
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3302      	adds	r3, #2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8001332:	893b      	ldrh	r3, [r7, #8]
 8001334:	3b02      	subs	r3, #2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	893b      	ldrh	r3, [r7, #8]
 8001342:	3b01      	subs	r3, #1
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	440b      	add	r3, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8001352:	893b      	ldrh	r3, [r7, #8]
 8001354:	3b02      	subs	r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fdfb 	bl	8000f56 <ifx_i2c_dl_calc_crc>
 8001360:	4603      	mov	r3, r0
 8001362:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8001364:	7d3b      	ldrb	r3, [r7, #20]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <ifx_i2c_pl_event_handler+0x19e>
 800136a:	220b      	movs	r2, #11
 800136c:	e000      	b.n	8001370 <ifx_i2c_pl_event_handler+0x1a0>
 800136e:	220a      	movs	r2, #10
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8001376:	e158      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001378:	8b3a      	ldrh	r2, [r7, #24]
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	429a      	cmp	r2, r3
 800137e:	d10d      	bne.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
 8001380:	8b7b      	ldrh	r3, [r7, #26]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00a      	beq.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001386:	893a      	ldrh	r2, [r7, #8]
 8001388:	8b7b      	ldrh	r3, [r7, #26]
 800138a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d105      	bne.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001390:	7f7b      	ldrb	r3, [r7, #29]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d002      	beq.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
 8001396:	7f7b      	ldrb	r3, [r7, #29]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d104      	bne.n	80013a6 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2206      	movs	r2, #6
 80013a0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013a4:	e141      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 80013a6:	7ffa      	ldrb	r2, [r7, #31]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80013ae:	3301      	adds	r3, #1
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d00c      	beq.n	80013d2 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2209      	movs	r2, #9
 80013bc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 80013c4:	2300      	movs	r3, #0
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fde5 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
                    break;
 80013d0:	e12b      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80013d8:	7fba      	ldrb	r2, [r7, #30]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2209      	movs	r2, #9
 80013e2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013e6:	e120      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80013e8:	7f7b      	ldrb	r3, [r7, #29]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d104      	bne.n	80013f8 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013f6:	e118      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80013fe:	3301      	adds	r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001414:	893a      	ldrh	r2, [r7, #8]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	f00d fdaa 	bl	800ef72 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	893a      	ldrh	r2, [r7, #8]
 8001422:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2204      	movs	r2, #4
 8001432:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001436:	2300      	movs	r3, #0
 8001438:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fdaa 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001446:	e0f0      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800144e:	461a      	mov	r2, r3
 8001450:	7f7b      	ldrb	r3, [r7, #29]
 8001452:	2b02      	cmp	r3, #2
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	429a      	cmp	r2, r3
 800145e:	d004      	beq.n	800146a <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2209      	movs	r2, #9
 8001464:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001468:	e0df      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 800146a:	8b3a      	ldrh	r2, [r7, #24]
 800146c:	8afb      	ldrh	r3, [r7, #22]
 800146e:	429a      	cmp	r2, r3
 8001470:	d004      	beq.n	800147c <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2205      	movs	r2, #5
 8001476:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800147a:	e0d6      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d802      	bhi.n	8001488 <ifx_i2c_pl_event_handler+0x2b8>
 8001482:	8b7b      	ldrh	r3, [r7, #26]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2209      	movs	r2, #9
 800148c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001490:	e0cb      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8001492:	7f7b      	ldrb	r3, [r7, #29]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d110      	bne.n	80014ba <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2209      	movs	r2, #9
 800149c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2203      	movs	r2, #3
 80014ac:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 80014b8:	e0b7      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <ifx_i2c_pl_event_handler+0x302>
 80014c0:	7f7b      	ldrb	r3, [r7, #29]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d005      	beq.n	80014d2 <ifx_i2c_pl_event_handler+0x302>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80014cc:	7fba      	ldrb	r2, [r7, #30]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d004      	beq.n	80014dc <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2209      	movs	r2, #9
 80014d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80014da:	e0a6      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80014dc:	7f7b      	ldrb	r3, [r7, #29]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d104      	bne.n	80014ec <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2205      	movs	r2, #5
 80014e6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80014ea:	e09e      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80014fe:	2300      	movs	r3, #0
 8001500:	2200      	movs	r2, #0
 8001502:	2102      	movs	r1, #2
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	47a0      	blx	r4
            }
            break;
 8001508:	e08f      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001512:	2300      	movs	r3, #0
 8001514:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 f909 	bl	800172e <ifx_i2c_pl_receive_frame>
            }
            break;
 800151c:	e085      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800151e:	897b      	ldrh	r3, [r7, #10]
 8001520:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001524:	d104      	bne.n	8001530 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800152e:	e07c      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001538:	2300      	movs	r3, #0
 800153a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00f      	beq.n	8001566 <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001552:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800155a:	3b05      	subs	r3, #5
 800155c:	b29b      	uxth	r3, r3
 800155e:	2104      	movs	r1, #4
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001564:	e061      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001572:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800157a:	3b05      	subs	r3, #5
 800157c:	b29b      	uxth	r3, r3
 800157e:	2106      	movs	r1, #6
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	47a0      	blx	r4
            break;
 8001584:	e051      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800158e:	2300      	movs	r3, #0
 8001590:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001592:	2300      	movs	r3, #0
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fcfe 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800159e:	e044      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 80015a0:	2100      	movs	r1, #0
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff fdbe 	bl	8001124 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d03a      	beq.n	8001628 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 80015b6:	e037      	b.n	8001628 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80015e2:	2300      	movs	r3, #0
 80015e4:	2200      	movs	r2, #0
 80015e6:	2101      	movs	r1, #1
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	47a0      	blx	r4
 80015ec:	e00a      	b.n	8001604 <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff fd76 	bl	80010e0 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2208      	movs	r2, #8
 80015f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 8001604:	2300      	movs	r3, #0
 8001606:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001608:	e00f      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	2101      	movs	r1, #1
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	47a0      	blx	r4
                continue_state_machine = FALSE;
 8001622:	2300      	movs	r3, #0
 8001624:	773b      	strb	r3, [r7, #28]
                break;
 8001626:	e000      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            break;
 8001628:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 800162a:	7f3b      	ldrb	r3, [r7, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	f43f adeb 	beq.w	8001208 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	@ 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}

0800163c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	22bb      	movs	r2, #187	@ 0xbb
 800165a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800166a:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001672:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <ifx_i2c_pl_init+0x9c>)
 8001674:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	22c8      	movs	r2, #200	@ 0xc8
 800167a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10b      	bne.n	80016a0 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fddc 	bl	800624c <pal_i2c_init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800169a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800169e:	e016      	b.n	80016ce <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2299      	movs	r2, #153	@ 0x99
 80016ae:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80016ba:	e003      	b.n	80016c4 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80016c4:	2100      	movs	r1, #0
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fa84 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08001ebd 	.word	0x08001ebd

080016dc <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <ifx_i2c_pl_send_frame+0x28>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d002      	beq.n	8001704 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80016fe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001702:	e010      	b.n	8001726 <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800171c:	2100      	movs	r1, #0
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fa58 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800173c:	2b01      	cmp	r3, #1
 800173e:	d007      	beq.n	8001750 <ifx_i2c_pl_receive_frame+0x22>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001746:	2b02      	cmp	r3, #2
 8001748:	d002      	beq.n	8001750 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800174a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800174e:	e008      	b.n	8001762 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa3a 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
 8001776:	4613      	mov	r3, r2
 8001778:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	883a      	ldrh	r2, [r7, #0]
 800178e:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	22c8      	movs	r2, #200	@ 0xc8
 800179e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80017bc:	461a      	mov	r2, r3
 80017be:	f004 fd5b 	bl	8006278 <pal_i2c_write>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	72fb      	strb	r3, [r7, #11]
 80017d8:	4613      	mov	r3, r2
 80017da:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	7afa      	ldrb	r2, [r7, #11]
 80017e0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80017ea:	3301      	adds	r3, #1
 80017ec:	893a      	ldrh	r2, [r7, #8]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fbbe 	bl	800ef72 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80017f6:	893b      	ldrh	r3, [r7, #8]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	22c8      	movs	r2, #200	@ 0xc8
 800180e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800182c:	461a      	mov	r2, r3
 800182e:	f004 fd23 	bl	8006278 <pal_i2c_write>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001842:	2204      	movs	r2, #4
 8001844:	2182      	movs	r1, #130	@ 0x82
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff8f 	bl	800176a <ifx_i2c_pl_read_register>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f004 fd76 	bl	8006370 <pal_i2c_set_bitrate>
 8001884:	4603      	mov	r3, r0
 8001886:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d019      	beq.n	80018cc <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	b291      	uxth	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4908      	ldr	r1, [pc, #32]	@ (80018dc <ifx_i2c_pl_set_bit_rate+0x88>)
 80018ba:	f004 feab 	bl	8006614 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 80018be:	2301      	movs	r3, #1
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	e005      	b.n	80018d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 80018c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	e001      	b.n	80018d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 80018cc:	2300      	movs	r3, #0
 80018ce:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 80018d0:	89fb      	ldrh	r3, [r7, #14]

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	080018e1 	.word	0x080018e1

080018e0 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08b      	sub	sp, #44	@ 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80018e8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	733b      	strb	r3, [r7, #12]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001906:	b2db      	uxtb	r3, r3
 8001908:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800191e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001920:	d031      	beq.n	8001986 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001922:	2bbb      	cmp	r3, #187	@ 0xbb
 8001924:	f300 8145 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001928:	2baa      	cmp	r3, #170	@ 0xaa
 800192a:	f000 812d 	beq.w	8001b88 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 800192e:	2baa      	cmp	r3, #170	@ 0xaa
 8001930:	f300 813f 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001934:	2b88      	cmp	r3, #136	@ 0x88
 8001936:	f000 8103 	beq.w	8001b40 <ifx_i2c_pl_negotiation_event_handler+0x260>
 800193a:	2b88      	cmp	r3, #136	@ 0x88
 800193c:	f300 8139 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001940:	2b77      	cmp	r3, #119	@ 0x77
 8001942:	f000 80c6 	beq.w	8001ad2 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001946:	2b77      	cmp	r3, #119	@ 0x77
 8001948:	f300 8133 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800194c:	2b66      	cmp	r3, #102	@ 0x66
 800194e:	f000 809d 	beq.w	8001a8c <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001952:	2b66      	cmp	r3, #102	@ 0x66
 8001954:	f300 812d 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001958:	2b55      	cmp	r3, #85	@ 0x55
 800195a:	f000 808d 	beq.w	8001a78 <ifx_i2c_pl_negotiation_event_handler+0x198>
 800195e:	2b55      	cmp	r3, #85	@ 0x55
 8001960:	f300 8127 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001964:	2b44      	cmp	r3, #68	@ 0x44
 8001966:	d040      	beq.n	80019ea <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001968:	2b44      	cmp	r3, #68	@ 0x44
 800196a:	f300 8122 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800196e:	2b33      	cmp	r3, #51	@ 0x33
 8001970:	d031      	beq.n	80019d6 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001972:	2b33      	cmp	r3, #51	@ 0x33
 8001974:	f300 811d 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001978:	2b11      	cmp	r3, #17
 800197a:	f000 80cb 	beq.w	8001b14 <ifx_i2c_pl_negotiation_event_handler+0x234>
 800197e:	2b22      	cmp	r3, #34	@ 0x22
 8001980:	f000 80d4 	beq.w	8001b2c <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001984:	e115      	b.n	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001986:	2164      	movs	r1, #100	@ 0x64
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff63 	bl	8001854 <ifx_i2c_pl_set_bit_rate>
 800198e:	4603      	mov	r3, r0
 8001990:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001992:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2233      	movs	r2, #51	@ 0x33
 800199c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80019a6:	e106      	b.n	8001bb6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 80019a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019aa:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019ae:	f040 8102 	bne.w	8001bb6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	22aa      	movs	r2, #170	@ 0xaa
 80019b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80019c8:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4980      	ldr	r1, [pc, #512]	@ (8001bd0 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 80019d0:	f004 fe20 	bl	8006614 <pal_os_event_register_callback_oneshot>
            break;
 80019d4:	e0ef      	b.n	8001bb6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2244      	movs	r2, #68	@ 0x44
 80019da:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80019de:	2204      	movs	r2, #4
 80019e0:	2184      	movs	r1, #132	@ 0x84
 80019e2:	69b8      	ldr	r0, [r7, #24]
 80019e4:	f7ff fec1 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 80019e8:	e0e8      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001a0c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a10:	d911      	bls.n	8001a36 <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001a12:	8abb      	ldrh	r3, [r7, #20]
 8001a14:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a18:	d80d      	bhi.n	8001a36 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2255      	movs	r2, #85	@ 0x55
 8001a22:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	2189      	movs	r1, #137	@ 0x89
 8001a2e:	69b8      	ldr	r0, [r7, #24]
 8001a30:	f7ff fecb 	bl	80017ca <ifx_i2c_pl_write_register>
 8001a34:	e01f      	b.n	8001a76 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001a3c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a40:	d811      	bhi.n	8001a66 <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001a42:	8abb      	ldrh	r3, [r7, #20]
 8001a44:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a48:	d90d      	bls.n	8001a66 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2255      	movs	r2, #85	@ 0x55
 8001a52:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	2189      	movs	r1, #137	@ 0x89
 8001a5e:	69b8      	ldr	r0, [r7, #24]
 8001a60:	f7ff feb3 	bl	80017ca <ifx_i2c_pl_write_register>
 8001a64:	e007      	b.n	8001a76 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2266      	movs	r2, #102	@ 0x66
 8001a6a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001a74:	e0a2      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001a76:	e0a1      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2266      	movs	r2, #102	@ 0x66
 8001a7c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001a80:	2204      	movs	r2, #4
 8001a82:	2184      	movs	r1, #132	@ 0x84
 8001a84:	69b8      	ldr	r0, [r7, #24]
 8001a86:	f7ff fe70 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 8001a8a:	e097      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001aaa:	8aba      	ldrh	r2, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d208      	bcs.n	8001ac2 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	22aa      	movs	r2, #170	@ 0xaa
 8001abc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001ac0:	e003      	b.n	8001aca <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2277      	movs	r2, #119	@ 0x77
 8001ac6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001ad0:	e074      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff feba 	bl	8001854 <ifx_i2c_pl_set_bit_rate>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001ae4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d107      	bne.n	8001afa <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2211      	movs	r2, #17
 8001aee:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001af8:	e05f      	b.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001afa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001afc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001b00:	d15b      	bne.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	22aa      	movs	r2, #170	@ 0xaa
 8001b06:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001b12:	e052      	b.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2222      	movs	r2, #34	@ 0x22
 8001b18:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2202      	movs	r2, #2
 8001b22:	2181      	movs	r1, #129	@ 0x81
 8001b24:	69b8      	ldr	r0, [r7, #24]
 8001b26:	f7ff fe50 	bl	80017ca <ifx_i2c_pl_write_register>
            break;
 8001b2a:	e047      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2288      	movs	r2, #136	@ 0x88
 8001b30:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001b34:	2202      	movs	r2, #2
 8001b36:	2181      	movs	r1, #129	@ 0x81
 8001b38:	69b8      	ldr	r0, [r7, #24]
 8001b3a:	f7ff fe16 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 8001b3e:	e03d      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	22aa      	movs	r2, #170	@ 0xaa
 8001b44:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001b66:	8afa      	ldrh	r2, [r7, #22]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d805      	bhi.n	8001b78 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	8afa      	ldrh	r2, [r7, #22]
 8001b70:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001b74:	2300      	movs	r3, #0
 8001b76:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001b86:	e019      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001b88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001b96:	e003      	b.n	8001ba0 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001ba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ba8:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	69b8      	ldr	r0, [r7, #24]
 8001bae:	47a0      	blx	r4
            break;
 8001bb0:	e004      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 8001bb2:	bf00      	nop
 8001bb4:	e002      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001bba:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001bbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aea6 	bne.w	8001912 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	372c      	adds	r7, #44	@ 0x2c
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	080018e1 	.word	0x080018e1

08001bd4 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001bf4:	8879      	ldrh	r1, [r7, #2]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001bfe:	e0f0      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001c06:	3b01      	subs	r3, #1
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	f200 80dc 	bhi.w	8001dc6 <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c31 	.word	0x08001c31
 8001c18:	08001c39 	.word	0x08001c39
 8001c1c:	08001c57 	.word	0x08001c57
 8001c20:	08001da5 	.word	0x08001da5
 8001c24:	08001c29 	.word	0x08001c29
                ifx_i2c_pl_soft_reset(p_ctx);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f983 	bl	8001f34 <ifx_i2c_pl_soft_reset>
            break;
 8001c2e:	e0d8      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fe55 	bl	80018e0 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001c36:	e0d4      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d105      	bne.n	8001c56 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	2182      	movs	r1, #130	@ 0x82
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd8b 	bl	800176a <ifx_i2c_pl_read_register>
                    break;
 8001c54:	e0c5      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d159      	bne.n	8001d14 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d052      	beq.n	8001d14 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001c86:	8a7b      	ldrh	r3, [r7, #18]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <ifx_i2c_pl_frame_event_handler+0xda>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001c92:	8a7a      	ldrh	r2, [r7, #18]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d80a      	bhi.n	8001cae <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001ca0:	8a7b      	ldrh	r3, [r7, #18]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2180      	movs	r1, #128	@ 0x80
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fd5f 	bl	800176a <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001cac:	e079      	b.n	8001da2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001cae:	f004 fd5c 	bl	800676a <pal_os_timer_get_time_in_milliseconds>
 8001cb2:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d205      	bcs.n	8001cd8 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d209      	bcs.n	8001cf8 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001cea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	493e      	ldr	r1, [pc, #248]	@ (8001dec <ifx_i2c_pl_frame_event_handler+0x218>)
 8001cf2:	f004 fc8f 	bl	8006614 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001cf6:	e054      	b.n	8001da2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d06:	2300      	movs	r3, #0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001d12:	e046      	b.n	8001da2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10e      	bne.n	8001d3c <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fd48 	bl	80017ca <ifx_i2c_pl_write_register>
            break;
 8001d3a:	e052      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001d3c:	f004 fd15 	bl	800676a <pal_os_timer_get_time_in_milliseconds>
 8001d40:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d205      	bcs.n	8001d66 <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d209      	bcs.n	8001d86 <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001d78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <ifx_i2c_pl_frame_event_handler+0x218>)
 8001d80:	f004 fc48 	bl	8006614 <pal_os_event_register_callback_oneshot>
            break;
 8001d84:	e02d      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d94:	2300      	movs	r3, #0
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	47a0      	blx	r4
            break;
 8001da0:	e01f      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
 8001da2:	e01e      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	47a0      	blx	r4
            break;
 8001dc4:	e00d      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	47a0      	blx	r4
            break;
 8001de0:	bf00      	nop
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0800183b 	.word	0x0800183b

08001df0 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10c      	bne.n	8001e20 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f004 fa2d 	bl	8006278 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8001e1e:	e010      	b.n	8001e42 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d10b      	bne.n	8001e42 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f004 fa59 	bl	80062f4 <pal_i2c_read>
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d11f      	bne.n	8001ea0 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d110      	bne.n	8001e8c <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001e84:	461a      	mov	r2, r3
 8001e86:	f004 fa35 	bl	80062f4 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8001e8a:	e012      	b.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d10d      	bne.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001e96:	2100      	movs	r1, #0
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fe9b 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
}
 8001e9e:	e008      	b.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d103      	bne.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe91 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60fb      	str	r3, [r7, #12]
    switch (event)
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <ifx_i2c_pl_pal_event_handler+0x54>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db25      	blt.n	8001f22 <ifx_i2c_pl_pal_event_handler+0x66>
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d822      	bhi.n	8001f22 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	b291      	uxth	r1, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	490b      	ldr	r1, [pc, #44]	@ (8001f2c <ifx_i2c_pl_pal_event_handler+0x70>)
 8001efe:	f004 fb89 	bl	8006614 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001f02:	e00f      	b.n	8001f24 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001f04:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff fe63 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001f0e:	e009      	b.n	8001f24 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001f16:	2332      	movs	r3, #50	@ 0x32
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4905      	ldr	r1, [pc, #20]	@ (8001f30 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001f1c:	f004 fb7a 	bl	8006614 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001f20:	e000      	b.n	8001f24 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001f22:	bf00      	nop
    }
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	08001df1 	.word	0x08001df1
 8001f30:	08001e4b 	.word	0x08001e4b

08001f34 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001f46:	3b99      	subs	r3, #153	@ 0x99
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d85e      	bhi.n	800200a <ifx_i2c_pl_soft_reset+0xd6>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <ifx_i2c_pl_soft_reset+0x20>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	0800200b 	.word	0x0800200b
 8001f5c:	0800200b 	.word	0x0800200b
 8001f60:	0800200b 	.word	0x0800200b
 8001f64:	0800200b 	.word	0x0800200b
 8001f68:	0800200b 	.word	0x0800200b
 8001f6c:	0800200b 	.word	0x0800200b
 8001f70:	0800200b 	.word	0x0800200b
 8001f74:	08001ff9 	.word	0x08001ff9
 8001f78:	08001f95 	.word	0x08001f95
 8001f7c:	08001fdd 	.word	0x08001fdd
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	22a2      	movs	r2, #162	@ 0xa2
 8001f84:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001f88:	2204      	movs	r2, #4
 8001f8a:	2182      	movs	r1, #130	@ 0x82
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fbec 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 8001f92:	e03b      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d10b      	bne.n	8001fc8 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	22a3      	movs	r2, #163	@ 0xa3
 8001fb4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	2188      	movs	r1, #136	@ 0x88
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fc02 	bl	80017ca <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001fc6:	e021      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001fd0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fdfd 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001fda:	e017      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	22a1      	movs	r2, #161	@ 0xa1
 8001fe0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001fea:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4908      	ldr	r1, [pc, #32]	@ (8002014 <ifx_i2c_pl_soft_reset+0xe0>)
 8001ff2:	f004 fb0f 	bl	8006614 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001ff6:	e009      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8002000:	2100      	movs	r1, #0
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fde6 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
            break;
 8002008:	e000      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 800200a:	bf00      	nop
    }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	08001f35 	.word	0x08001f35

08002018 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002022:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002026:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8002030:	491c      	ldr	r1, [pc, #112]	@ (80020a4 <ifx_i2c_prl_init+0x8c>)
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 faa0 	bl	8003578 <ifx_i2c_tl_init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12b      	bne.n	8002096 <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800204a:	2b11      	cmp	r3, #17
 800204c:	d104      	bne.n	8002058 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8002056:	e003      	b.n	8002060 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2211      	movs	r2, #17
 8002084:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2211      	movs	r2, #17
 800208c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8002090:	2300      	movs	r3, #0
 8002092:	81fb      	strh	r3, [r7, #14]
 8002094:	e000      	b.n	8002098 <ifx_i2c_prl_init+0x80>
            break;
 8002096:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8002098:	89fb      	ldrh	r3, [r7, #14]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	08002c21 	.word	0x08002c21

080020a8 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80020b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80020b6:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d12e      	bne.n	8002120 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80020ce:	2b33      	cmp	r3, #51	@ 0x33
 80020d0:	d109      	bne.n	80020e6 <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80020d6:	2300      	movs	r3, #0
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 80020e0:	2300      	movs	r3, #0
 80020e2:	81fb      	strh	r3, [r7, #14]
            break;
 80020e4:	e01d      	b.n	8002122 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d118      	bne.n	8002122 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80020f6:	2b22      	cmp	r3, #34	@ 0x22
 80020f8:	d113      	bne.n	8002122 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2208      	movs	r2, #8
 80020fe:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8002110:	2301      	movs	r3, #1
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fd83 	bl	8002c20 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 800211a:	2300      	movs	r3, #0
 800211c:	81fb      	strh	r3, [r7, #14]
            break;
 800211e:	e000      	b.n	8002122 <ifx_i2c_prl_close+0x7a>
            break;
 8002120:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8002122:	89fb      	ldrh	r3, [r7, #14]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}

0800212c <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800213c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002140:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d05a      	beq.n	80021fe <ifx_i2c_prl_transceive+0xd2>
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d057      	beq.n	80021fe <ifx_i2c_prl_transceive+0xd2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002154:	2b01      	cmp	r3, #1
 8002156:	d152      	bne.n	80021fe <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800215e:	2b11      	cmp	r3, #17
 8002160:	d10d      	bne.n	800217e <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8002168:	2b00      	cmp	r3, #0
 800216a:	d108      	bne.n	800217e <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2208      	movs	r2, #8
 8002170:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 800217c:	e003      	b.n	8002186 <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d006      	beq.n	80021b0 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80021a8:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d103      	bne.n	80021b8 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80021b6:	e003      	b.n	80021c0 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	1d1a      	adds	r2, r3, #4
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a3a      	ldr	r2, [r7, #32]
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2211      	movs	r2, #17
 80021ea:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	2100      	movs	r1, #0
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fd13 	bl	8002c20 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 80021fa:	2300      	movs	r3, #0
 80021fc:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 80021fe:	8afb      	ldrh	r3, [r7, #22]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b09e      	sub	sp, #120	@ 0x78
 800220c:	af06      	add	r7, sp, #24
 800220e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002210:	f240 1307 	movw	r3, #263	@ 0x107
 8002214:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <ifx_i2c_prl_prf+0xa4>)
 800221a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800221e:	461d      	mov	r5, r3
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	f107 020a 	add.w	r2, r7, #10
 8002234:	f107 010c 	add.w	r1, r7, #12
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f925 	bl	8006488 <pal_os_datastore_read>
 800223e:	4603      	mov	r3, r0
 8002240:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8002244:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 800224c:	f240 1307 	movw	r3, #263	@ 0x107
 8002250:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8002254:	e024      	b.n	80022a0 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002256:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002260:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002264:	f107 010c 	add.w	r1, r7, #12
 8002268:	2528      	movs	r5, #40	@ 0x28
 800226a:	9504      	str	r5, [sp, #16]
 800226c:	9203      	str	r2, [sp, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	9202      	str	r2, [sp, #8]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2310      	movs	r3, #16
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4623      	mov	r3, r4
 800227a:	4602      	mov	r2, r0
 800227c:	2000      	movs	r0, #0
 800227e:	f003 ff18 	bl	80060b2 <pal_crypt_tls_prf_sha256>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002288:	f240 1307 	movw	r3, #263	@ 0x107
 800228c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	461a      	mov	r2, r3
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f00c fe24 	bl	800eee8 <memset>

    } while (FALSE);
    return (return_status);
 80022a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3760      	adds	r7, #96	@ 0x60
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}
 80022ac:	0800fc0c 	.word	0x0800fc0c

080022b0 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	4613      	mov	r3, r2
 80022c2:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	7a7a      	ldrb	r2, [r7, #9]
 80022c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	33a1      	adds	r3, #161	@ 0xa1
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fd53 	bl	8005d7e <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	33a6      	adds	r3, #166	@ 0xa6
 80022e8:	897a      	ldrh	r2, [r7, #10]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fd2f 	bl	8005d50 <optiga_common_set_uint16>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b08e      	sub	sp, #56	@ 0x38
 80022fe:	af06      	add	r7, sp, #24
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800230a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800230e:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8002310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002314:	88f9      	ldrh	r1, [r7, #6]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff ffc9 	bl	80022b0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3378      	adds	r3, #120	@ 0x78
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	3304      	adds	r3, #4
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fd25 	bl	8005d7e <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 800233e:	88f9      	ldrh	r1, [r7, #6]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	9205      	str	r2, [sp, #20]
 8002344:	2208      	movs	r2, #8
 8002346:	9204      	str	r2, [sp, #16]
 8002348:	2208      	movs	r2, #8
 800234a:	9203      	str	r2, [sp, #12]
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2308      	movs	r3, #8
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4603      	mov	r3, r0
 800235a:	460a      	mov	r2, r1
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	2000      	movs	r0, #0
 8002360:	f003 fecd 	bl	80060fe <pal_crypt_encrypt_aes128_ccm>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 800236a:	2300      	movs	r3, #0
 800236c:	83fb      	strh	r3, [r7, #30]
 800236e:	e000      	b.n	8002372 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8002370:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002372:	8bfb      	ldrh	r3, [r7, #30]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af06      	add	r7, sp, #24
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800238c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002390:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8002392:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002396:	88f9      	ldrh	r1, [r7, #6]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ff88 	bl	80022b0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80023a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023a4:	3358      	adds	r3, #88	@ 0x58
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	3304      	adds	r3, #4
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fce1 	bl	8005d7e <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	3308      	adds	r3, #8
 80023c0:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80023c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023c6:	3358      	adds	r3, #88	@ 0x58
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80023d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d2:	9205      	str	r2, [sp, #20]
 80023d4:	2208      	movs	r2, #8
 80023d6:	9204      	str	r2, [sp, #16]
 80023d8:	2208      	movs	r2, #8
 80023da:	9203      	str	r2, [sp, #12]
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	2308      	movs	r3, #8
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4603      	mov	r3, r0
 80023ea:	460a      	mov	r2, r1
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	2000      	movs	r0, #0
 80023f0:	f003 fea6 	bl	8006140 <pal_crypt_decrypt_aes128_ccm>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 80023fa:	2300      	movs	r3, #0
 80023fc:	83fb      	strh	r3, [r7, #30]
 80023fe:	e000      	b.n	8002402 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8002400:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002402:	8bfb      	ldrh	r3, [r7, #30]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8002414:	2300      	movs	r3, #0
 8002416:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002426:	2b04      	cmp	r3, #4
 8002428:	d134      	bne.n	8002494 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002430:	3301      	adds	r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002454:	b2da      	uxtb	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3354      	adds	r3, #84	@ 0x54
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	2201      	movs	r2, #1
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f001 f8a9 	bl	80035d4 <ifx_i2c_tl_transceive>
 8002482:	4603      	mov	r3, r0
 8002484:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e00d      	b.n	80024b0 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800249a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	22ff      	movs	r2, #255	@ 0xff
 80024aa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 80024ae:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 80024b0:	89fb      	ldrh	r3, [r7, #14]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08a      	sub	sp, #40	@ 0x28
 80024be:	af04      	add	r7, sp, #16
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80024c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80024c8:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80024d4:	2b55      	cmp	r3, #85	@ 0x55
 80024d6:	f000 8178 	beq.w	80027ca <ifx_i2c_prl_do_handshake+0x310>
 80024da:	2b55      	cmp	r3, #85	@ 0x55
 80024dc:	f300 817f 	bgt.w	80027de <ifx_i2c_prl_do_handshake+0x324>
 80024e0:	2b44      	cmp	r3, #68	@ 0x44
 80024e2:	f000 8100 	beq.w	80026e6 <ifx_i2c_prl_do_handshake+0x22c>
 80024e6:	2b44      	cmp	r3, #68	@ 0x44
 80024e8:	f300 8179 	bgt.w	80027de <ifx_i2c_prl_do_handshake+0x324>
 80024ec:	2b33      	cmp	r3, #51	@ 0x33
 80024ee:	f000 8095 	beq.w	800261c <ifx_i2c_prl_do_handshake+0x162>
 80024f2:	2b33      	cmp	r3, #51	@ 0x33
 80024f4:	f300 8173 	bgt.w	80027de <ifx_i2c_prl_do_handshake+0x324>
 80024f8:	2b11      	cmp	r3, #17
 80024fa:	d002      	beq.n	8002502 <ifx_i2c_prl_do_handshake+0x48>
 80024fc:	2b22      	cmp	r3, #34	@ 0x22
 80024fe:	d034      	beq.n	800256a <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 8002500:	e16d      	b.n	80027de <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2226      	movs	r2, #38	@ 0x26
 8002526:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3354      	adds	r3, #84	@ 0x54
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	2202      	movs	r2, #2
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 f847 	bl	80035d4 <ifx_i2c_tl_transceive>
 8002546:	4603      	mov	r3, r0
 8002548:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800254a:	8afb      	ldrh	r3, [r7, #22]
 800254c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002550:	d106      	bne.n	8002560 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2255      	movs	r2, #85	@ 0x55
 8002556:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800255a:	2301      	movs	r3, #1
 800255c:	613b      	str	r3, [r7, #16]
                    break;
 800255e:	e13f      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2222      	movs	r2, #34	@ 0x22
 8002564:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002568:	e13a      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800256a:	2301      	movs	r3, #1
 800256c:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00e      	beq.n	80025a4 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800258c:	2b01      	cmp	r3, #1
 800258e:	d109      	bne.n	80025a4 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002590:	f240 1307 	movw	r3, #263	@ 0x107
 8002594:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	22ff      	movs	r2, #255	@ 0xff
 800259a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
                    break;
 80025a2:	e11d      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025aa:	2b26      	cmp	r3, #38	@ 0x26
 80025ac:	d108      	bne.n	80025c0 <ifx_i2c_prl_do_handshake+0x106>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d004      	beq.n	80025ca <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2255      	movs	r2, #85	@ 0x55
 80025c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80025c8:	e10a      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3322      	adds	r3, #34	@ 0x22
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 fbf6 	bl	8005dc0 <optiga_common_get_uint32>
 80025d4:	4602      	mov	r2, r0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3302      	adds	r3, #2
 80025ec:	2220      	movs	r2, #32
 80025ee:	4619      	mov	r1, r3
 80025f0:	f00c fcbf 	bl	800ef72 <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fe07 	bl	8002208 <ifx_i2c_prl_prf>
 80025fa:	4603      	mov	r3, r0
 80025fc:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80025fe:	8afb      	ldrh	r3, [r7, #22]
 8002600:	f240 1207 	movw	r2, #263	@ 0x107
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2255      	movs	r2, #85	@ 0x55
 800260c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002610:	e0e6      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2233      	movs	r2, #51	@ 0x33
 8002616:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800261a:	e0e1      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2208      	movs	r2, #8
 8002620:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3380      	adds	r3, #128	@ 0x80
 8002632:	2220      	movs	r2, #32
 8002634:	4619      	mov	r1, r3
 8002636:	f00c fc9c 	bl	800ef72 <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f003 fb99 	bl	8005d7e <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	2224      	movs	r2, #36	@ 0x24
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe49 	bl	80022fa <ifx_i2c_prl_encrypt_msg>
 8002668:	4603      	mov	r3, r0
 800266a:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800266c:	8afb      	ldrh	r3, [r7, #22]
 800266e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002672:	d106      	bne.n	8002682 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2255      	movs	r2, #85	@ 0x55
 8002678:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
                    break;
 8002680:	e0ae      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f003 fb6f 	bl	8005d7e <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2231      	movs	r2, #49	@ 0x31
 80026a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3354      	adds	r3, #84	@ 0x54
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	2231      	movs	r2, #49	@ 0x31
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 ff88 	bl	80035d4 <ifx_i2c_tl_transceive>
 80026c4:	4603      	mov	r3, r0
 80026c6:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80026c8:	8afb      	ldrh	r3, [r7, #22]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2255      	movs	r2, #85	@ 0x55
 80026d2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
                    break;
 80026da:	e081      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2244      	movs	r2, #68	@ 0x44
 80026e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80026e4:	e07c      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d104      	bne.n	80026f8 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80026f4:	2b31      	cmp	r3, #49	@ 0x31
 80026f6:	d006      	beq.n	8002706 <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2255      	movs	r2, #85	@ 0x55
 80026fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
                    break;
 8002704:	e06c      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fb58 	bl	8005dc0 <optiga_common_get_uint32>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	1d59      	adds	r1, r3, #5
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002728:	9203      	str	r2, [sp, #12]
 800272a:	2224      	movs	r2, #36	@ 0x24
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	2210      	movs	r2, #16
 8002730:	9201      	str	r2, [sp, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4603      	mov	r3, r0
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fe1f 	bl	800237c <ifx_i2c_prl_decrypt_msg>
 800273e:	4603      	mov	r3, r0
 8002740:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002748:	d106      	bne.n	8002758 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2255      	movs	r2, #85	@ 0x55
 800274e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002752:	2301      	movs	r3, #1
 8002754:	613b      	str	r3, [r7, #16]
                    break;
 8002756:	e043      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fb0b 	bl	8005d7e <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	33a8      	adds	r3, #168	@ 0xa8
 8002772:	2220      	movs	r2, #32
 8002774:	4619      	mov	r1, r3
 8002776:	f00c fba7 	bl	800eec8 <memcmp>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002780:	f240 1307 	movw	r3, #263	@ 0x107
 8002784:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2255      	movs	r2, #85	@ 0x55
 800278a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800278e:	2301      	movs	r3, #1
 8002790:	613b      	str	r3, [r7, #16]
                    break;
 8002792:	e025      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2204      	movs	r2, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00c fb91 	bl	800eec8 <memcmp>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80027ac:	f240 1307 	movw	r3, #263	@ 0x107
 80027b0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2255      	movs	r2, #85	@ 0x55
 80027b6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
                    break;
 80027be:	e00f      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80027c8:	e00a      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80027ca:	f240 1307 	movw	r3, #263	@ 0x107
 80027ce:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
            break;
 80027dc:	e000      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80027de:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f43f ae73 	beq.w	80024ce <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80027e8:	8afb      	ldrh	r3, [r7, #22]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b094      	sub	sp, #80	@ 0x50
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002802:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002806:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002810:	2b01      	cmp	r3, #1
 8002812:	d003      	beq.n	800281c <ifx_i2c_prl_do_manage_context+0x2a>
 8002814:	2b02      	cmp	r3, #2
 8002816:	f000 80eb 	beq.w	80029f0 <ifx_i2c_prl_do_manage_context+0x1fe>
 800281a:	e1df      	b.n	8002bdc <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002822:	b25b      	sxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	da07      	bge.n	8002838 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002830:	2300      	movs	r3, #0
 8002832:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002836:	e1ed      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800283e:	2b22      	cmp	r3, #34	@ 0x22
 8002840:	d10c      	bne.n	800285c <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2260      	movs	r2, #96	@ 0x60
 8002846:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800285a:	e0a6      	b.n	80029aa <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002862:	2b11      	cmp	r3, #17
 8002864:	f040 8093 	bne.w	800298e <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800286e:	885b      	ldrh	r3, [r3, #2]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d033      	beq.n	80028dc <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2234      	movs	r2, #52	@ 0x34
 8002878:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002882:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002884:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3354      	adds	r3, #84	@ 0x54
 800288a:	461a      	mov	r2, r3
 800288c:	f003 fdfc 	bl	8006488 <pal_os_datastore_read>
 8002890:	4603      	mov	r3, r0
 8002892:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800289a:	2b01      	cmp	r3, #1
 800289c:	f000 81b7 	beq.w	8002c0e <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d130      	bne.n	8002918 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80028da:	e19b      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d112      	bne.n	800290c <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002904:	2300      	movs	r3, #0
 8002906:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 800290a:	e183      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2268      	movs	r2, #104	@ 0x68
 800291c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f003 fa26 	bl	8005d7e <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2205      	movs	r2, #5
 8002936:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2205      	movs	r2, #5
 8002944:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002956:	885b      	ldrh	r3, [r3, #2]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d026      	beq.n	80029aa <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	2234      	movs	r2, #52	@ 0x34
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f00c fabf 	bl	800eee8 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002970:	885b      	ldrh	r3, [r3, #2]
 8002972:	f107 0110 	add.w	r1, r7, #16
 8002976:	2234      	movs	r2, #52	@ 0x34
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fd07 	bl	800638c <pal_os_datastore_write>
 800297e:	4603      	mov	r3, r0
 8002980:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002984:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10e      	bne.n	80029aa <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 800298c:	e142      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	22ff      	movs	r2, #255	@ 0xff
 8002992:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2207      	movs	r2, #7
 800299a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80029a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 80029a8:	e134      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3354      	adds	r3, #84	@ 0x54
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4603      	mov	r3, r0
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fe05 	bl	80035d4 <ifx_i2c_tl_transceive>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80029d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 811c 	bne.w	8002c12 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
        }
        break;
 80029ee:	e111      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002a02:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002a06:	2b6c      	cmp	r3, #108	@ 0x6c
 8002a08:	d133      	bne.n	8002a72 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002a10:	2b11      	cmp	r3, #17
 8002a12:	d12e      	bne.n	8002a72 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d12b      	bne.n	8002a72 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3308      	adds	r3, #8
 8002a24:	2228      	movs	r2, #40	@ 0x28
 8002a26:	4619      	mov	r1, r3
 8002a28:	f00c faa3 	bl	800ef72 <memcpy>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002a70:	e0ac      	b.n	8002bcc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002a72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	f040 808b 	bne.w	8002b92 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002a82:	2b22      	cmp	r3, #34	@ 0x22
 8002a84:	f040 8085 	bne.w	8002b92 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f040 8081 	bne.w	8002b92 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f103 0008 	add.w	r0, r3, #8
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3358      	adds	r3, #88	@ 0x58
 8002aa2:	2228      	movs	r2, #40	@ 0x28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f00c fa64 	bl	800ef72 <memcpy>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ae4:	885b      	ldrh	r3, [r3, #2]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02e      	beq.n	8002b48 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2234      	movs	r2, #52	@ 0x34
 8002aee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002af8:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002afa:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b02:	461a      	mov	r2, r3
 8002b04:	f003 fc42 	bl	800638c <pal_os_datastore_write>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002b0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22ff      	movs	r2, #255	@ 0xff
 8002b1a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2207      	movs	r2, #7
 8002b22:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002b34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
                        break;
 8002b46:	e065      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3358      	adds	r3, #88	@ 0x58
 8002b4c:	2228      	movs	r2, #40	@ 0x28
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00c f9c9 	bl	800eee8 <memset>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b90:	e01c      	b.n	8002bcc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2234      	movs	r2, #52	@ 0x34
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00c f9a5 	bl	800eee8 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ba4:	885b      	ldrh	r3, [r3, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002bb0:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002bb2:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002bb4:	2234      	movs	r2, #52	@ 0x34
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fbe8 	bl	800638c <pal_os_datastore_write>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8002bc2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002bc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002bca:	e023      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002bda:	e01b      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	22ff      	movs	r2, #255	@ 0xff
 8002be0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2207      	movs	r2, #7
 8002be8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002c0c:	e002      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002c12:	bf00      	nop
    }
  return (return_status);
 8002c14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3748      	adds	r7, #72	@ 0x48
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b097      	sub	sp, #92	@ 0x5c
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002c3a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002c3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002c42:	897b      	ldrh	r3, [r7, #10]
 8002c44:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <ifx_i2c_prl_event_handler+0x36>
 8002c4c:	897b      	ldrh	r3, [r7, #10]
 8002c4e:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d029      	beq.n	8002caa <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	@ 0xff
 8002c5a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d105      	bne.n	8002c74 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f240 1207 	movw	r2, #263	@ 0x107
 8002c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c72:	e016      	b.n	8002ca2 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10d      	bne.n	8002c9a <ifx_i2c_prl_event_handler+0x7a>
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c84:	d009      	beq.n	8002c9a <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c98:	e003      	b.n	8002ca2 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	897a      	ldrh	r2, [r7, #10]
 8002c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	f200 8445 	bhi.w	8003542 <ifx_i2c_prl_event_handler+0x922>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <ifx_i2c_prl_event_handler+0xa0>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002ce1 	.word	0x08002ce1
 8002cc4:	08002d4f 	.word	0x08002d4f
 8002cc8:	08003161 	.word	0x08003161
 8002ccc:	08002e8f 	.word	0x08002e8f
 8002cd0:	08002d93 	.word	0x08002d93
 8002cd4:	080033f9 	.word	0x080033f9
 8002cd8:	08003513 	.word	0x08003513
 8002cdc:	08002cfd 	.word	0x08002cfd
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002cea:	2300      	movs	r3, #0
 8002cec:	2200      	movs	r2, #0
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	47a0      	blx	r4
                exit_machine = FALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002cf8:	f000 bc34 	b.w	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002cfc:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002d00:	893a      	ldrh	r2, [r7, #8]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff fd74 	bl	80027f2 <ifx_i2c_prl_do_manage_context>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8424 	beq.w	8003562 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22ff      	movs	r2, #255	@ 0xff
 8002d1e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2207      	movs	r2, #7
 8002d26:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002d4a:	f000 bc0a 	b.w	8003562 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db09      	blt.n	8002d6e <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2205      	movs	r2, #5
 8002d72:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2211      	movs	r2, #17
 8002d7a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002d86:	e3ed      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002d90:	e3e8      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3308      	adds	r3, #8
 8002d96:	2228      	movs	r2, #40	@ 0x28
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00c f8a4 	bl	800eee8 <memset>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	2234      	movs	r2, #52	@ 0x34
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c f887 	bl	800eee8 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002de0:	885b      	ldrh	r3, [r3, #2]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002dec:	885b      	ldrh	r3, [r3, #2]
 8002dee:	f107 0110 	add.w	r1, r7, #16
 8002df2:	2234      	movs	r2, #52	@ 0x34
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fac9 	bl	800638c <pal_os_datastore_write>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01d      	beq.n	8002e44 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	@ 0xff
 8002e0c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2207      	movs	r2, #7
 8002e14:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f240 1207 	movw	r2, #263	@ 0x107
 8002e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002e42:	e38f      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fb37 	bl	80024ba <ifx_i2c_prl_do_handshake>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002e52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e56:	f240 1207 	movw	r2, #263	@ 0x107
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d109      	bne.n	8002e72 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002e64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002e70:	e378      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d104      	bne.n	8002e86 <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002e84:	e36e      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002e8c:	e36a      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f043 0320 	orr.w	r3, r3, #32
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d006      	beq.n	8002ec6 <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002ebe:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d122      	bne.n	8002f0c <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f113 0f10 	cmn.w	r3, #16
 8002ed0:	d914      	bls.n	8002efc <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2211      	movs	r2, #17
 8002ef6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002efa:	e333      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	320d      	adds	r2, #13
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f2c:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	f040 80c2 	bne.w	80030ba <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f113 0f10 	cmn.w	r3, #16
 8002f40:	d914      	bls.n	8002f6c <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2211      	movs	r2, #17
 8002f66:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002f6a:	e2fb      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d13f      	bne.n	8002ff6 <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f8a:	3305      	adds	r3, #5
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002f92:	9203      	str	r2, [sp, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	9202      	str	r2, [sp, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	9201      	str	r2, [sp, #4]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff f9ea 	bl	800237c <ifx_i2c_prl_decrypt_msg>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002fae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fb2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002fb6:	d118      	bne.n	8002fea <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	22ff      	movs	r2, #255	@ 0xff
 8002fbc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002fe8:	e2bc      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002ff4:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2205      	movs	r2, #5
 8003004:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f002 feb2 	bl	8005d7e <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800301e:	1d59      	adds	r1, r3, #5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4603      	mov	r3, r0
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff f960 	bl	80022fa <ifx_i2c_prl_encrypt_msg>
 800303a:	4603      	mov	r3, r0
 800303c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003040:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003044:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003048:	d118      	bne.n	800307c <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	@ 0xff
 800304e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2207      	movs	r2, #7
 8003056:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 800307a:	e273      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8003086:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8003098:	4413      	add	r3, r2
 800309a:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 800309c:	3308      	adds	r3, #8
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa91 	bl	80035d4 <ifx_i2c_tl_transceive>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80030b8:	e021      	b.n	80030fe <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	3304      	adds	r3, #4
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80030ce:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80030d4:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80030e2:	4413      	add	r3, r2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4603      	mov	r3, r0
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa6e 	bl	80035d4 <ifx_i2c_tl_transceive>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 80030fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003102:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003106:	d11d      	bne.n	8003144 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	22ff      	movs	r2, #255	@ 0xff
 800310c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2207      	movs	r2, #7
 8003114:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003126:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800313e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8003142:	e20f      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2203      	movs	r2, #3
 8003154:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 800315e:	e201      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	3301      	adds	r3, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f002 fe2a 	bl	8005dc0 <optiga_common_get_uint32>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8003172:	893b      	ldrh	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d118      	bne.n	80031aa <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	22ff      	movs	r2, #255	@ 0xff
 800317c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2207      	movs	r2, #7
 8003184:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003196:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 80031a8:	e1dc      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d040      	beq.n	8003238 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b40      	cmp	r3, #64	@ 0x40
 80031bc:	d003      	beq.n	80031c6 <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80031c2:	2b44      	cmp	r3, #68	@ 0x44
 80031c4:	d10c      	bne.n	80031e0 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d004      	beq.n	80031d6 <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d004      	beq.n	80031e0 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d109      	bne.n	80031f4 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80031e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80031f2:	e018      	b.n	8003226 <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d10e      	bne.n	800321c <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8003204:	2b11      	cmp	r3, #17
 8003206:	d109      	bne.n	800321c <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800321a:	e004      	b.n	8003226 <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003222:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2206      	movs	r2, #6
 800322a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003236:	e195      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003242:	429a      	cmp	r2, r3
 8003244:	d018      	beq.n	8003278 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	22ff      	movs	r2, #255	@ 0xff
 800324a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2207      	movs	r2, #7
 8003252:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8003276:	e175      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d006      	beq.n	8003292 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 800328c:	2b03      	cmp	r3, #3
 800328e:	f040 8082 	bne.w	8003396 <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8003292:	893b      	ldrh	r3, [r7, #8]
 8003294:	2b0d      	cmp	r3, #13
 8003296:	d818      	bhi.n	80032ca <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	22ff      	movs	r2, #255	@ 0xff
 800329c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2207      	movs	r2, #7
 80032a4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80032b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80032c8:	e14c      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	3303      	adds	r3, #3
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d805      	bhi.n	80032e4 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d818      	bhi.n	8003316 <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	22ff      	movs	r2, #255	@ 0xff
 80032e8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2207      	movs	r2, #7
 80032f0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003302:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003314:	e126      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003328:	3a0d      	subs	r2, #13
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003332:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003338:	8818      	ldrh	r0, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003342:	3305      	adds	r3, #5
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 800334a:	9203      	str	r2, [sp, #12]
 800334c:	2224      	movs	r2, #36	@ 0x24
 800334e:	9202      	str	r2, [sp, #8]
 8003350:	2210      	movs	r2, #16
 8003352:	9201      	str	r2, [sp, #4]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4623      	mov	r3, r4
 8003358:	4602      	mov	r2, r0
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff f80e 	bl	800237c <ifx_i2c_prl_decrypt_msg>
 8003360:	4603      	mov	r3, r0
 8003362:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800336a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800336e:	d108      	bne.n	8003382 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2206      	movs	r2, #6
 8003374:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2204      	movs	r2, #4
 800337c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8003380:	e0f0      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003392:	bf00      	nop
            break;
 8003394:	e0e6      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 8003396:	893b      	ldrh	r3, [r7, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d81c      	bhi.n	80033d6 <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2207      	movs	r2, #7
 80033a0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	@ 0xff
 80033a8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80033bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 80033c0:	e0d0      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80033d4:	e0c6      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	3a01      	subs	r2, #1
 80033e2:	b292      	uxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80033f6:	e0b5      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b44      	cmp	r3, #68	@ 0x44
 80033fe:	d166      	bne.n	80034ce <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d104      	bne.n	8003410 <ifx_i2c_prl_event_handler+0x7f0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 800340c:	2b02      	cmp	r3, #2
 800340e:	d918      	bls.n	8003442 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2207      	movs	r2, #7
 800341c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800342e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003440:	e090      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d004      	beq.n	8003456 <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	d136      	bne.n	80034c4 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003474:	2b03      	cmp	r3, #3
 8003476:	d91c      	bls.n	80034b2 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22ff      	movs	r2, #255	@ 0xff
 800347c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2207      	movs	r2, #7
 8003484:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003496:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 80034b0:	e058      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2204      	movs	r2, #4
 80034b6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2204      	movs	r2, #4
 80034be:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 80034c2:	e04f      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2207      	movs	r2, #7
 80034c8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80034cc:	e04a      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d117      	bne.n	8003508 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22ff      	movs	r2, #255	@ 0xff
 80034dc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2207      	movs	r2, #7
 80034e4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80034f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2207      	movs	r2, #7
 800350c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003510:	e028      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003518:	2bff      	cmp	r3, #255	@ 0xff
 800351a:	d00d      	beq.n	8003538 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7fe ff75 	bl	800240c <ifx_i2c_prl_send_alert>
 8003522:	4603      	mov	r3, r0
 8003524:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	22ff      	movs	r2, #255	@ 0xff
 800352c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003536:	e015      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003540:	e010      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800354e:	2300      	movs	r3, #0
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	47a0      	blx	r4
                exit_machine = FALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003560:	e000      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003562:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003564:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003568:	2b01      	cmp	r3, #1
 800356a:	f43f ab9e 	beq.w	8002caa <ifx_i2c_prl_event_handler+0x8a>
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	374c      	adds	r7, #76	@ 0x4c
 8003574:	46bd      	mov	sp, r7
 8003576:	bd90      	pop	{r4, r7, pc}

08003578 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800358a:	4911      	ldr	r1, [pc, #68]	@ (80035d0 <ifx_i2c_tl_init+0x58>)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fc11 	bl	8000db4 <ifx_i2c_dl_init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003598:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800359c:	e014      	b.n	80035c8 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80035bc:	3b06      	subs	r3, #6
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	080038b9 	.word	0x080038b9

080035d4 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80035e4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80035e8:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d041      	beq.n	8003674 <ifx_i2c_tl_transceive+0xa0>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03e      	beq.n	8003674 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d138      	bne.n	8003672 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003608:	f003 f8af 	bl	800676a <pal_os_timer_get_time_in_milliseconds>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003662:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f866 	bl	8003738 <ifx_i2c_tl_send_next_fragment>
 800366c:	4603      	mov	r3, r0
 800366e:	82fb      	strh	r3, [r7, #22]
 8003670:	e000      	b.n	8003674 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003672:	bf00      	nop
    } while (FALSE);
    return (status);
 8003674:	8afb      	ldrh	r3, [r7, #22]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003690:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003694:	e00f      	b.n	80036b6 <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f842 	bl	8003738 <ifx_i2c_tl_send_next_fragment>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80036cc:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <ifx_i2c_tl_calculate_pctr+0x38>
 80036e8:	897a      	ldrh	r2, [r7, #10]
 80036ea:	89bb      	ldrh	r3, [r7, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d802      	bhi.n	80036f6 <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e019      	b.n	800372a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <ifx_i2c_tl_calculate_pctr+0x50>
 8003700:	897a      	ldrh	r2, [r7, #10]
 8003702:	89bb      	ldrh	r3, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d902      	bls.n	800370e <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e00d      	b.n	800372a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <ifx_i2c_tl_calculate_pctr+0x68>
 8003718:	897a      	ldrh	r2, [r7, #10]
 800371a:	89bb      	ldrh	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d902      	bls.n	8003726 <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003720:	2302      	movs	r3, #2
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e001      	b.n	800372a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8003726:	2304      	movs	r3, #4
 8003728:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003746:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ffb8 	bl	80036be <ifx_i2c_tl_calculate_pctr>
 800374e:	4603      	mov	r3, r0
 8003750:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	429a      	cmp	r2, r3
 8003766:	da07      	bge.n	8003778 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003778:	7b7b      	ldrb	r3, [r7, #13]
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	b2da      	uxtb	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 800378c:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800379a:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800379c:	89fa      	ldrh	r2, [r7, #14]
 800379e:	4619      	mov	r1, r3
 80037a0:	f00b fbe7 	bl	800ef72 <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	4413      	add	r3, r2
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80037b6:	89fb      	ldrh	r3, [r7, #14]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fb36 	bl	8000e30 <ifx_i2c_dl_send_frame>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2207      	movs	r2, #7
 80037de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fb1e 	bl	8000e30 <ifx_i2c_dl_send_frame>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	460a      	mov	r2, r1
 800380a:	71fb      	strb	r3, [r7, #7]
 800380c:	4613      	mov	r3, r2
 800380e:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003810:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003814:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2b07      	cmp	r3, #7
 800381a:	d00b      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d005      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d002      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d110      	bne.n	8003856 <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003838:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800383c:	79ba      	ldrb	r2, [r7, #6]
 800383e:	429a      	cmp	r2, r3
 8003840:	d007      	beq.n	8003852 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4a07      	ldr	r2, [pc, #28]	@ (8003864 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800384c:	79ba      	ldrb	r2, [r7, #6]
 800384e:	429a      	cmp	r2, r3
 8003850:	d101      	bne.n	8003856 <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003852:	2300      	movs	r3, #0
 8003854:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003856:	89fb      	ldrh	r3, [r7, #14]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	0800fefc 	.word	0x0800fefc

08003868 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003874:	2300      	movs	r3, #0
 8003876:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <presence_bit_check+0x42>
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d002      	beq.n	80038aa <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 80038a4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80038a8:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 80038aa:	89fb      	ldrh	r3, [r7, #14]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	461a      	mov	r2, r3
 80038c4:	460b      	mov	r3, r1
 80038c6:	817b      	strh	r3, [r7, #10]
 80038c8:	4613      	mov	r3, r2
 80038ca:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2206      	movs	r2, #6
 80038fa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003904:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003908:	893b      	ldrh	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	4619      	mov	r1, r3
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff ffa8 	bl	8003868 <presence_bit_check>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2206      	movs	r2, #6
 8003922:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800392c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800393e:	3b01      	subs	r3, #1
 8003940:	2b07      	cmp	r3, #7
 8003942:	f200 81d0 	bhi.w	8003ce6 <ifx_i2c_dl_event_handler+0x42e>
 8003946:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <ifx_i2c_dl_event_handler+0x94>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800396d 	.word	0x0800396d
 8003950:	08003983 	.word	0x08003983
 8003954:	08003ce7 	.word	0x08003ce7
 8003958:	08003a19 	.word	0x08003a19
 800395c:	08003b5f 	.word	0x08003b5f
 8003960:	08003cb5 	.word	0x08003cb5
 8003964:	08003c73 	.word	0x08003c73
 8003968:	08003c17 	.word	0x08003c17
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003976:	2300      	movs	r3, #0
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	47a0      	blx	r4
            }
            break;
 8003980:	e1c3      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d040      	beq.n	8003a0e <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003998:	429a      	cmp	r2, r3
 800399a:	d215      	bcs.n	80039c8 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800399c:	7dbb      	ldrb	r3, [r7, #22]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d104      	bne.n	80039ac <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80039aa:	e1ae      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 80039ac:	893b      	ldrh	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2206      	movs	r2, #6
 80039b6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80039ba:	e1a6      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff feb9 	bl	8003738 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 80039c6:	e19f      	b.n	8003d08 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2204      	movs	r2, #4
 80039cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 818a 	bne.w	8003d08 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7fd fa4b 	bl	8000e90 <ifx_i2c_dl_receive_frame>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2206      	movs	r2, #6
 8003a04:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	757b      	strb	r3, [r7, #21]
            break;
 8003a0c:	e17c      	b.n	8003d08 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2206      	movs	r2, #6
 8003a12:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003a16:	e178      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8098 	beq.w	8003b54 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2206      	movs	r2, #6
 8003a2e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003a32:	e16a      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3e:	d114      	bne.n	8003a6a <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003a40:	7dbb      	ldrb	r3, [r7, #22]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d005      	beq.n	8003a52 <ifx_i2c_dl_event_handler+0x19a>
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7fd fa22 	bl	8000e90 <ifx_i2c_dl_receive_frame>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2206      	movs	r2, #6
 8003a56:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003a5a:	e156      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	757b      	strb	r3, [r7, #21]
                        break;
 8003a68:	e14f      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003a70:	7dbb      	ldrb	r3, [r7, #22]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fec3 	bl	8003800 <ifx_i2c_tl_check_chaining_error>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2208      	movs	r2, #8
 8003a84:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003a88:	e13f      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003a8a:	7dbb      	ldrb	r3, [r7, #22]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003aa6:	e130      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003aa8:	7dbb      	ldrb	r3, [r7, #22]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <ifx_i2c_dl_event_handler+0x1fc>
 8003aae:	7dbb      	ldrb	r3, [r7, #22]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d14a      	bne.n	8003b4a <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003aba:	461a      	mov	r2, r3
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003ac8:	8812      	ldrh	r2, [r2, #0]
 8003aca:	4293      	cmp	r3, r2
 8003acc:	dd09      	ble.n	8003ae2 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ad4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2206      	movs	r2, #6
 8003adc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003ae0:	e113      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003af2:	1898      	adds	r0, r3, r2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1c59      	adds	r1, r3, #1
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	f00b fa38 	bl	800ef72 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003b2c:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003b48:	e0df      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2205      	movs	r2, #5
 8003b4e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003b52:	e0da      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2206      	movs	r2, #6
 8003b58:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003b5c:	e0d5      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003b5e:	893a      	ldrh	r2, [r7, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003b66:	3301      	adds	r3, #1
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d004      	beq.n	8003b76 <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2207      	movs	r2, #7
 8003b70:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003b74:	e0c9      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	893b      	ldrh	r3, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	3b01      	subs	r3, #1
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003b8a:	8812      	ldrh	r2, [r2, #0]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	dd09      	ble.n	8003ba4 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b96:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003ba2:	e0b2      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2206      	movs	r2, #6
 8003bae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003bb2:	e0aa      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003bc0:	1898      	adds	r0, r3, r2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	893b      	ldrh	r3, [r7, #8]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f00b f9d1 	bl	800ef72 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003bd6:	893b      	ldrh	r3, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7fd f947 	bl	8000e90 <ifx_i2c_dl_receive_frame>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2206      	movs	r2, #6
 8003c0c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003c14:	e079      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d909      	bls.n	8003c30 <ifx_i2c_dl_event_handler+0x378>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d104      	bne.n	8003c30 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2207      	movs	r2, #7
 8003c2a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003c2e:	e06c      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	b2d1      	uxtb	r1, r2
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fd16 	bl	800367e <ifx_i2c_tl_resend_packets>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2206      	movs	r2, #6
 8003c5c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003c60:	e053      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	757b      	strb	r3, [r7, #21]
            break;
 8003c66:	e050      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2206      	movs	r2, #6
 8003c6c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003c70:	e04b      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	b2d1      	uxtb	r1, r2
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fd9d 	bl	80037ce <ifx_i2c_tl_send_chaining_error>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2206      	movs	r2, #6
 8003c9e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003ca2:	e032      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	757b      	strb	r3, [r7, #21]
            break;
 8003ca8:	e02f      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2206      	movs	r2, #6
 8003cae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003cb2:	e02a      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <ifx_i2c_dl_event_handler+0x410>
 8003cc2:	893b      	ldrh	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	47a0      	blx	r4
            }
            break;
 8003ce4:	e011      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2200      	movs	r2, #0
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	47a0      	blx	r4
            }
            break;
 8003d06:	e000      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            break;
 8003d08:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003d0a:	7d7b      	ldrb	r3, [r7, #21]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f43f ade3 	beq.w	80038d8 <ifx_i2c_dl_event_handler+0x20>
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd90      	pop	{r4, r7, pc}

08003d1c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003d24:	1d39      	adds	r1, r7, #4
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4803      	ldr	r0, [pc, #12]	@ (8003d3c <__io_putchar+0x20>)
 8003d2e:	f009 fe61 	bl	800d9f4 <HAL_UART_Transmit>
    return ch;
 8003d32:	687b      	ldr	r3, [r7, #4]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000acc 	.word	0x20000acc

08003d40 <optiga_util_callback>:
extern pal_i2c_t optiga_pal_i2c_context_0;
static volatile optiga_lib_status_t optiga_lib_status = OPTIGA_LIB_SUCCESS;

// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 8003d4c:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <optiga_util_callback+0x20>)
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	8013      	strh	r3, [r2, #0]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000b14 	.word	0x20000b14

08003d64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8003d76:	f002 fc9b 	bl	80066b0 <pal_os_event_timer_tick>
    }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <verify_bootloader_hash>:

bool verify_bootloader_hash(optiga_util_t * util)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0a2      	sub	sp, #136	@ 0x88
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
    mbedtls_sha256_context ctx;
    mbedtls_sha256_init(&ctx);
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 fcfc 	bl	800678e <mbedtls_sha256_init>

    memset(expected_hash, 0, sizeof(expected_hash));
 8003d96:	2220      	movs	r2, #32
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4842      	ldr	r0, [pc, #264]	@ (8003ea4 <verify_bootloader_hash+0x120>)
 8003d9c:	f00b f8a4 	bl	800eee8 <memset>
    memset(calc_hash, 0, sizeof(calc_hash));
 8003da0:	2220      	movs	r2, #32
 8003da2:	2100      	movs	r1, #0
 8003da4:	4840      	ldr	r0, [pc, #256]	@ (8003ea8 <verify_bootloader_hash+0x124>)
 8003da6:	f00b f89f 	bl	800eee8 <memset>

    uint8_t * ptr = (uint8_t *)BOOTLOADER_START_ADDR;
 8003daa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003dae:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (mbedtls_sha256_starts_ret(&ctx, 0) != 0 ||
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 fcf6 	bl	80067a8 <mbedtls_sha256_starts_ret>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d113      	bne.n	8003dea <verify_bootloader_hash+0x66>
        mbedtls_sha256_update_ret(&ctx, ptr, BOOTLOADER_SIZE) != 0 ||
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f004 fa9f 	bl	8008310 <mbedtls_sha256_update_ret>
 8003dd2:	4603      	mov	r3, r0
    if (mbedtls_sha256_starts_ret(&ctx, 0) != 0 ||
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <verify_bootloader_hash+0x66>
        mbedtls_sha256_finish_ret(&ctx, calc_hash) != 0) {
 8003dd8:	f107 030c 	add.w	r3, r7, #12
 8003ddc:	4932      	ldr	r1, [pc, #200]	@ (8003ea8 <verify_bootloader_hash+0x124>)
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 fb0b 	bl	80083fa <mbedtls_sha256_finish_ret>
 8003de4:	4603      	mov	r3, r0
        mbedtls_sha256_update_ret(&ctx, ptr, BOOTLOADER_SIZE) != 0 ||
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <verify_bootloader_hash+0x70>
        printf("SHA256 computation failed!\n");
 8003dea:	4830      	ldr	r0, [pc, #192]	@ (8003eac <verify_bootloader_hash+0x128>)
 8003dec:	f00b f864 	bl	800eeb8 <puts>
        return false;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e053      	b.n	8003e9c <verify_bootloader_hash+0x118>
    }

    optiga_lib_status = OPTIGA_LIB_BUSY;
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <verify_bootloader_hash+0x12c>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	801a      	strh	r2, [r3, #0]
    hash_len = sizeof(expected_hash); // Important: reset length before read
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <verify_bootloader_hash+0x130>)
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	801a      	strh	r2, [r3, #0]
    optiga_util_read_data(util, HASH_OID, 0, expected_hash, &hash_len);
 8003e00:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <verify_bootloader_hash+0x130>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <verify_bootloader_hash+0x120>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f002 f8d5 	bl	8005fbc <optiga_util_read_data>

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003e12:	e001      	b.n	8003e18 <verify_bootloader_hash+0x94>
        pal_os_event_trigger_registered_callback();
 8003e14:	f002 fc2a 	bl	800666c <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003e18:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <verify_bootloader_hash+0x12c>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d0f8      	beq.n	8003e14 <verify_bootloader_hash+0x90>

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS || hash_len != 32) {
 8003e22:	4b23      	ldr	r3, [pc, #140]	@ (8003eb0 <verify_bootloader_hash+0x12c>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <verify_bootloader_hash+0xb0>
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <verify_bootloader_hash+0x130>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d00b      	beq.n	8003e4c <verify_bootloader_hash+0xc8>
        printf("OPTIGA read error! 0x%04X len=%u\n", optiga_lib_status, hash_len);
 8003e34:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <verify_bootloader_hash+0x12c>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <verify_bootloader_hash+0x130>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	481d      	ldr	r0, [pc, #116]	@ (8003eb8 <verify_bootloader_hash+0x134>)
 8003e44:	f00a ffc8 	bl	800edd8 <iprintf>
        return false;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e027      	b.n	8003e9c <verify_bootloader_hash+0x118>
    }

    printf("Calculated Hash: ");
 8003e4c:	481b      	ldr	r0, [pc, #108]	@ (8003ebc <verify_bootloader_hash+0x138>)
 8003e4e:	f00a ffc3 	bl	800edd8 <iprintf>
    for (int i = 0; i < 32; i++) {
 8003e52:	2300      	movs	r3, #0
 8003e54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e56:	e00a      	b.n	8003e6e <verify_bootloader_hash+0xea>
        printf("%02X", calc_hash[i]);
 8003e58:	4a13      	ldr	r2, [pc, #76]	@ (8003ea8 <verify_bootloader_hash+0x124>)
 8003e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	4619      	mov	r1, r3
 8003e62:	4817      	ldr	r0, [pc, #92]	@ (8003ec0 <verify_bootloader_hash+0x13c>)
 8003e64:	f00a ffb8 	bl	800edd8 <iprintf>
    for (int i = 0; i < 32; i++) {
 8003e68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e70:	2b1f      	cmp	r3, #31
 8003e72:	ddf1      	ble.n	8003e58 <verify_bootloader_hash+0xd4>
    }
    printf("\n");
 8003e74:	200a      	movs	r0, #10
 8003e76:	f00a ffc1 	bl	800edfc <putchar>

    if (memcmp(calc_hash, expected_hash, 32) != 0) {
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	4909      	ldr	r1, [pc, #36]	@ (8003ea4 <verify_bootloader_hash+0x120>)
 8003e7e:	480a      	ldr	r0, [pc, #40]	@ (8003ea8 <verify_bootloader_hash+0x124>)
 8003e80:	f00b f822 	bl	800eec8 <memcmp>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <verify_bootloader_hash+0x110>
        printf("Hash mismatch!\n");
 8003e8a:	480e      	ldr	r0, [pc, #56]	@ (8003ec4 <verify_bootloader_hash+0x140>)
 8003e8c:	f00b f814 	bl	800eeb8 <puts>
        return false;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e003      	b.n	8003e9c <verify_bootloader_hash+0x118>
    }

    printf("Bootloader hash verified.\n");
 8003e94:	480c      	ldr	r0, [pc, #48]	@ (8003ec8 <verify_bootloader_hash+0x144>)
 8003e96:	f00b f80f 	bl	800eeb8 <puts>
    return true;
 8003e9a:	2301      	movs	r3, #1
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3780      	adds	r7, #128	@ 0x80
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200009f0 	.word	0x200009f0
 8003ea8:	20000a10 	.word	0x20000a10
 8003eac:	0800fc20 	.word	0x0800fc20
 8003eb0:	20000b14 	.word	0x20000b14
 8003eb4:	200004cc 	.word	0x200004cc
 8003eb8:	0800fc3c 	.word	0x0800fc3c
 8003ebc:	0800fc60 	.word	0x0800fc60
 8003ec0:	0800fc74 	.word	0x0800fc74
 8003ec4:	0800fc7c 	.word	0x0800fc7c
 8003ec8:	0800fc8c 	.word	0x0800fc8c

08003ecc <optiga_main_logic>:
void optiga_main_logic(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 8003ed6:	f240 3302 	movw	r3, #770	@ 0x302
 8003eda:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003edc:	2200      	movs	r2, #0
 8003ede:	492d      	ldr	r1, [pc, #180]	@ (8003f94 <optiga_main_logic+0xc8>)
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f001 ffcf 	bl	8005e84 <optiga_util_create>
 8003ee6:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8003eee:	482a      	ldr	r0, [pc, #168]	@ (8003f98 <optiga_main_logic+0xcc>)
 8003ef0:	f00a ffe2 	bl	800eeb8 <puts>
        return;
 8003ef4:	e04b      	b.n	8003f8e <optiga_main_logic+0xc2>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003ef6:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <optiga_main_logic+0xd0>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 8003efc:	2100      	movs	r1, #0
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f002 f802 	bl	8005f08 <optiga_util_open_application>
 8003f04:	4603      	mov	r3, r0
 8003f06:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 8003f0e:	4824      	ldr	r0, [pc, #144]	@ (8003fa0 <optiga_main_logic+0xd4>)
 8003f10:	f00a ffd2 	bl	800eeb8 <puts>
            continue;
 8003f14:	e02d      	b.n	8003f72 <optiga_main_logic+0xa6>
        }
        HAL_Delay(100);
 8003f16:	2064      	movs	r0, #100	@ 0x64
 8003f18:	f004 feac 	bl	8008c74 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003f1c:	e001      	b.n	8003f22 <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8003f1e:	f002 fba5 	bl	800666c <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <optiga_main_logic+0xd0>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d0f8      	beq.n	8003f1e <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 8003f2c:	2064      	movs	r0, #100	@ 0x64
 8003f2e:	f004 fea1 	bl	8008c74 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 8003f32:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <optiga_main_logic+0xd0>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <optiga_main_logic+0x90>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8003f3c:	4819      	ldr	r0, [pc, #100]	@ (8003fa4 <optiga_main_logic+0xd8>)
 8003f3e:	f00a ffbb 	bl	800eeb8 <puts>
            break;
 8003f42:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Turn ON LED if you want
 8003f44:	2201      	movs	r2, #1
 8003f46:	2120      	movs	r1, #32
 8003f48:	4817      	ldr	r0, [pc, #92]	@ (8003fa8 <optiga_main_logic+0xdc>)
 8003f4a:	f005 fd03 	bl	8009954 <HAL_GPIO_WritePin>

    if (verify_bootloader_hash(me_util)) {
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ff18 	bl	8003d84 <verify_bootloader_hash>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00f      	beq.n	8003f7a <optiga_main_logic+0xae>
 8003f5a:	e00b      	b.n	8003f74 <optiga_main_logic+0xa8>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <optiga_main_logic+0xd0>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	4619      	mov	r1, r3
 8003f64:	4811      	ldr	r0, [pc, #68]	@ (8003fac <optiga_main_logic+0xe0>)
 8003f66:	f00a ff37 	bl	800edd8 <iprintf>
            HAL_Delay(2000);
 8003f6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003f6e:	f004 fe81 	bl	8008c74 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003f72:	e7c0      	b.n	8003ef6 <optiga_main_logic+0x2a>
             goto_application();
 8003f74:	f000 fa74 	bl	8004460 <goto_application>
 8003f78:	e009      	b.n	8003f8e <optiga_main_logic+0xc2>
         } else {
             while (1) {
                 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // blink red LED
 8003f7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f7e:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <optiga_main_logic+0xe4>)
 8003f80:	f005 fd01 	bl	8009986 <HAL_GPIO_TogglePin>
                 HAL_Delay(500);
 8003f84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f88:	f004 fe74 	bl	8008c74 <HAL_Delay>
                 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // blink red LED
 8003f8c:	e7f5      	b.n	8003f7a <optiga_main_logic+0xae>
             }
         }
}
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	08003d41 	.word	0x08003d41
 8003f98:	0800fca8 	.word	0x0800fca8
 8003f9c:	20000b14 	.word	0x20000b14
 8003fa0:	0800fcd0 	.word	0x0800fcd0
 8003fa4:	0800fd10 	.word	0x0800fd10
 8003fa8:	40020000 	.word	0x40020000
 8003fac:	0800fd3c 	.word	0x0800fd3c
 8003fb0:	40020400 	.word	0x40020400

08003fb4 <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8003fbc:	4811      	ldr	r0, [pc, #68]	@ (8004004 <I2C_Scan+0x50>)
 8003fbe:	f00a ff7b 	bl	800eeb8 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	e013      	b.n	8003ff0 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	230a      	movs	r3, #10
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f006 f99f 	bl	800a318 <HAL_I2C_IsDeviceReady>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4808      	ldr	r0, [pc, #32]	@ (8004008 <I2C_Scan+0x54>)
 8003fe6:	f00a fef7 	bl	800edd8 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	3301      	adds	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dae7      	bge.n	8003fc8 <I2C_Scan+0x14>
        }
    }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	0800fd6c 	.word	0x0800fd6c
 8004008:	0800fd80 	.word	0x0800fd80

0800400c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004012:	f004 fd87 	bl	8008b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004016:	f000 f88f 	bl	8004138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800401a:	f000 f9a9 	bl	8004370 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800401e:	f000 f97d 	bl	800431c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004022:	f000 f901 	bl	8004228 <MX_I2C1_Init>
  MX_TIM2_Init();
 8004026:	f000 f92d 	bl	8004284 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800402a:	f000 f8f1 	bl	8004210 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800402e:	4834      	ldr	r0, [pc, #208]	@ (8004100 <main+0xf4>)
 8004030:	f009 f8ac 	bl	800d18c <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	201c      	movs	r0, #28
 800403a:	f004 ff30 	bl	8008e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800403e:	201c      	movs	r0, #28
 8004040:	f004 ff49 	bl	8008ed6 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8004044:	2201      	movs	r2, #1
 8004046:	2120      	movs	r1, #32
 8004048:	482e      	ldr	r0, [pc, #184]	@ (8004104 <main+0xf8>)
 800404a:	f005 fc83 	bl	8009954 <HAL_GPIO_WritePin>

  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 800404e:	2301      	movs	r3, #1
 8004050:	2203      	movs	r2, #3
 8004052:	4619      	mov	r1, r3
 8004054:	482c      	ldr	r0, [pc, #176]	@ (8004108 <main+0xfc>)
 8004056:	f00a febf 	bl	800edd8 <iprintf>
  GPIO_PinState OTA_Pin_state;
       uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 800405a:	f004 fdff 	bl	8008c5c <HAL_GetTick>
 800405e:	4603      	mov	r3, r0
 8004060:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8004064:	60fb      	str	r3, [r7, #12]

       printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8004066:	4829      	ldr	r0, [pc, #164]	@ (800410c <main+0x100>)
 8004068:	f00a ff26 	bl	800eeb8 <puts>
       do
       {
         OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 800406c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004070:	4827      	ldr	r0, [pc, #156]	@ (8004110 <main+0x104>)
 8004072:	f005 fc57 	bl	8009924 <HAL_GPIO_ReadPin>
 8004076:	4603      	mov	r3, r0
 8004078:	72fb      	strb	r3, [r7, #11]
         uint32_t current_tick = HAL_GetTick();
 800407a:	f004 fdef 	bl	8008c5c <HAL_GetTick>
 800407e:	6078      	str	r0, [r7, #4]

         /* Check the button is pressed or not for 3seconds */
         if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8004080:	7afb      	ldrb	r3, [r7, #11]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d104      	bne.n	8004090 <main+0x84>
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	429a      	cmp	r2, r3
 800408c:	d800      	bhi.n	8004090 <main+0x84>
       {
 800408e:	e7ed      	b.n	800406c <main+0x60>
           break;
         }
       }while( 1 );

       /*Start the Firmware or Application update */
       if( OTA_Pin_state == GPIO_PIN_RESET )
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d111      	bne.n	80040ba <main+0xae>
       {
         printf("Starting Firmware Download!!!\r\n");
 8004096:	481f      	ldr	r0, [pc, #124]	@ (8004114 <main+0x108>)
 8004098:	f00a ff0e 	bl	800eeb8 <puts>
         /* OTA Request. Receive the data from the UART4 and flash */
         if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 800409c:	f7fc fa68 	bl	8000570 <etx_ota_download_and_flash>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <main+0xa4>
         {
           /* Error. Don't process. */
           printf("OTA Update : ERROR!!! HALT!!!\r\n");
 80040a6:	481c      	ldr	r0, [pc, #112]	@ (8004118 <main+0x10c>)
 80040a8:	f00a ff06 	bl	800eeb8 <puts>
           while( 1 );
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <main+0xa0>
         }
         else
         {
           /* Reset to load the new application */
           printf("Firmware update is done!!! Rebooting...\r\n");
 80040b0:	481a      	ldr	r0, [pc, #104]	@ (800411c <main+0x110>)
 80040b2:	f00a ff01 	bl	800eeb8 <puts>
           HAL_NVIC_SystemReset();
 80040b6:	f004 ff1c 	bl	8008ef2 <HAL_NVIC_SystemReset>
       }




      printf("Powering ON OPTIGA Trust M...\r\n");
 80040ba:	4819      	ldr	r0, [pc, #100]	@ (8004120 <main+0x114>)
 80040bc:	f00a fefc 	bl	800eeb8 <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 80040c0:	4818      	ldr	r0, [pc, #96]	@ (8004124 <main+0x118>)
 80040c2:	f002 f85e 	bl	8006182 <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 80040c6:	4818      	ldr	r0, [pc, #96]	@ (8004128 <main+0x11c>)
 80040c8:	f00a fef6 	bl	800eeb8 <puts>
      pal_gpio_set_low(&optiga_reset_0);
 80040cc:	4817      	ldr	r0, [pc, #92]	@ (800412c <main+0x120>)
 80040ce:	f002 f868 	bl	80061a2 <pal_gpio_set_low>
      HAL_Delay(10);
 80040d2:	200a      	movs	r0, #10
 80040d4:	f004 fdce 	bl	8008c74 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 80040d8:	4814      	ldr	r0, [pc, #80]	@ (800412c <main+0x120>)
 80040da:	f002 f852 	bl	8006182 <pal_gpio_set_high>
      HAL_Delay(10);
 80040de:	200a      	movs	r0, #10
 80040e0:	f004 fdc8 	bl	8008c74 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 80040e4:	4812      	ldr	r0, [pc, #72]	@ (8004130 <main+0x124>)
 80040e6:	f7ff ff65 	bl	8003fb4 <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 80040ea:	4812      	ldr	r0, [pc, #72]	@ (8004134 <main+0x128>)
 80040ec:	f00a fee4 	bl	800eeb8 <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 80040f0:	2064      	movs	r0, #100	@ 0x64
 80040f2:	f004 fdbf 	bl	8008c74 <HAL_Delay>
      optiga_main_logic();
 80040f6:	f7ff fee9 	bl	8003ecc <optiga_main_logic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040fa:	bf00      	nop
 80040fc:	e7fd      	b.n	80040fa <main+0xee>
 80040fe:	bf00      	nop
 8004100:	20000a84 	.word	0x20000a84
 8004104:	40020000 	.word	0x40020000
 8004108:	0800fd9c 	.word	0x0800fd9c
 800410c:	0800fdbc 	.word	0x0800fdbc
 8004110:	40020800 	.word	0x40020800
 8004114:	0800fdf4 	.word	0x0800fdf4
 8004118:	0800fe14 	.word	0x0800fe14
 800411c:	0800fe34 	.word	0x0800fe34
 8004120:	0800fe60 	.word	0x0800fe60
 8004124:	20000500 	.word	0x20000500
 8004128:	0800fe80 	.word	0x0800fe80
 800412c:	20000508 	.word	0x20000508
 8004130:	20000a30 	.word	0x20000a30
 8004134:	0800fe98 	.word	0x0800fe98

08004138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b094      	sub	sp, #80	@ 0x50
 800413c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800413e:	f107 0320 	add.w	r3, r7, #32
 8004142:	2230      	movs	r2, #48	@ 0x30
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f00a fece 	bl	800eee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800414c:	f107 030c 	add.w	r3, r7, #12
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <SystemClock_Config+0xd0>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	4a28      	ldr	r2, [pc, #160]	@ (8004208 <SystemClock_Config+0xd0>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	6413      	str	r3, [r2, #64]	@ 0x40
 800416c:	4b26      	ldr	r3, [pc, #152]	@ (8004208 <SystemClock_Config+0xd0>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004178:	2300      	movs	r3, #0
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	4b23      	ldr	r3, [pc, #140]	@ (800420c <SystemClock_Config+0xd4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004184:	4a21      	ldr	r2, [pc, #132]	@ (800420c <SystemClock_Config+0xd4>)
 8004186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b1f      	ldr	r3, [pc, #124]	@ (800420c <SystemClock_Config+0xd4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004198:	2302      	movs	r3, #2
 800419a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800419c:	2301      	movs	r3, #1
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041a0:	2310      	movs	r3, #16
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041a4:	2302      	movs	r3, #2
 80041a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80041ac:	2310      	movs	r3, #16
 80041ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80041b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80041b6:	2304      	movs	r3, #4
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80041ba:	2307      	movs	r3, #7
 80041bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041be:	f107 0320 	add.w	r3, r7, #32
 80041c2:	4618      	mov	r0, r3
 80041c4:	f008 fa2c 	bl	800c620 <HAL_RCC_OscConfig>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80041ce:	f000 f985 	bl	80044dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041d2:	230f      	movs	r3, #15
 80041d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041d6:	2302      	movs	r3, #2
 80041d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041e8:	f107 030c 	add.w	r3, r7, #12
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f008 fc8e 	bl	800cb10 <HAL_RCC_ClockConfig>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80041fa:	f000 f96f 	bl	80044dc <Error_Handler>
  }
}
 80041fe:	bf00      	nop
 8004200:	3750      	adds	r7, #80	@ 0x50
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	40007000 	.word	0x40007000

08004210 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004214:	2200      	movs	r2, #0
 8004216:	2100      	movs	r1, #0
 8004218:	201f      	movs	r0, #31
 800421a:	f004 fe40 	bl	8008e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800421e:	201f      	movs	r0, #31
 8004220:	f004 fe59 	bl	8008ed6 <HAL_NVIC_EnableIRQ>
}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}

08004228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <MX_I2C1_Init+0x50>)
 800422e:	4a13      	ldr	r2, [pc, #76]	@ (800427c <MX_I2C1_Init+0x54>)
 8004230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004232:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <MX_I2C1_Init+0x50>)
 8004234:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <MX_I2C1_Init+0x58>)
 8004236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <MX_I2C1_Init+0x50>)
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <MX_I2C1_Init+0x50>)
 8004240:	2200      	movs	r2, #0
 8004242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <MX_I2C1_Init+0x50>)
 8004246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800424a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <MX_I2C1_Init+0x50>)
 800424e:	2200      	movs	r2, #0
 8004250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004252:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <MX_I2C1_Init+0x50>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004258:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <MX_I2C1_Init+0x50>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <MX_I2C1_Init+0x50>)
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004264:	4804      	ldr	r0, [pc, #16]	@ (8004278 <MX_I2C1_Init+0x50>)
 8004266:	f005 fbcd 	bl	8009a04 <HAL_I2C_Init>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004270:	f000 f934 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004274:	bf00      	nop
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000a30 	.word	0x20000a30
 800427c:	40005400 	.word	0x40005400
 8004280:	00061a80 	.word	0x00061a80

08004284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004298:	463b      	mov	r3, r7
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042aa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80042ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b0:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80042b6:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042b8:	2209      	movs	r2, #9
 80042ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042bc:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c2:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042c8:	4813      	ldr	r0, [pc, #76]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042ca:	f008 ff0f 	bl	800d0ec <HAL_TIM_Base_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80042d4:	f000 f902 	bl	80044dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4619      	mov	r1, r3
 80042e4:	480c      	ldr	r0, [pc, #48]	@ (8004318 <MX_TIM2_Init+0x94>)
 80042e6:	f009 f8a3 	bl	800d430 <HAL_TIM_ConfigClockSource>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80042f0:	f000 f8f4 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042fc:	463b      	mov	r3, r7
 80042fe:	4619      	mov	r1, r3
 8004300:	4805      	ldr	r0, [pc, #20]	@ (8004318 <MX_TIM2_Init+0x94>)
 8004302:	f009 faa5 	bl	800d850 <HAL_TIMEx_MasterConfigSynchronization>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800430c:	f000 f8e6 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000a84 	.word	0x20000a84

0800431c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004320:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004322:	4a12      	ldr	r2, [pc, #72]	@ (800436c <MX_USART2_UART_Init+0x50>)
 8004324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800432c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800432e:	4b0e      	ldr	r3, [pc, #56]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004334:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004336:	2200      	movs	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800433a:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 800433c:	2200      	movs	r2, #0
 800433e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004342:	220c      	movs	r2, #12
 8004344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004346:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004348:	2200      	movs	r2, #0
 800434a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 800434e:	2200      	movs	r2, #0
 8004350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004352:	4805      	ldr	r0, [pc, #20]	@ (8004368 <MX_USART2_UART_Init+0x4c>)
 8004354:	f009 fafe 	bl	800d954 <HAL_UART_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800435e:	f000 f8bd 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000acc 	.word	0x20000acc
 800436c:	40004400 	.word	0x40004400

08004370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	@ 0x28
 8004374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004376:	f107 0314 	add.w	r3, r7, #20
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	60da      	str	r2, [r3, #12]
 8004384:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	4b32      	ldr	r3, [pc, #200]	@ (8004454 <MX_GPIO_Init+0xe4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	4a31      	ldr	r2, [pc, #196]	@ (8004454 <MX_GPIO_Init+0xe4>)
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	6313      	str	r3, [r2, #48]	@ 0x30
 8004396:	4b2f      	ldr	r3, [pc, #188]	@ (8004454 <MX_GPIO_Init+0xe4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b2:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	4b24      	ldr	r3, [pc, #144]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a23      	ldr	r2, [pc, #140]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b21      	ldr	r3, [pc, #132]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <MX_GPIO_Init+0xe4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80043f6:	2200      	movs	r2, #0
 80043f8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80043fc:	4816      	ldr	r0, [pc, #88]	@ (8004458 <MX_GPIO_Init+0xe8>)
 80043fe:	f005 faa9 	bl	8009954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004402:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004408:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800440c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4810      	ldr	r0, [pc, #64]	@ (800445c <MX_GPIO_Init+0xec>)
 800441a:	f005 f8ff 	bl	800961c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 800441e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004424:	2301      	movs	r3, #1
 8004426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	4619      	mov	r1, r3
 8004436:	4808      	ldr	r0, [pc, #32]	@ (8004458 <MX_GPIO_Init+0xe8>)
 8004438:	f005 f8f0 	bl	800961c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800443c:	2200      	movs	r2, #0
 800443e:	2100      	movs	r1, #0
 8004440:	2028      	movs	r0, #40	@ 0x28
 8004442:	f004 fd2c 	bl	8008e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004446:	2028      	movs	r0, #40	@ 0x28
 8004448:	f004 fd45 	bl	8008ed6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800444c:	bf00      	nop
 800444e:	3728      	adds	r7, #40	@ 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	40020000 	.word	0x40020000
 800445c:	40020800 	.word	0x40020800

08004460 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
    printf("Jumping to application...\r\n");
 8004466:	4817      	ldr	r0, [pc, #92]	@ (80044c4 <goto_application+0x64>)
 8004468:	f00a fd26 	bl	800eeb8 <puts>
    HAL_Delay(1000);
 800446c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004470:	f004 fc00 	bl	8008c74 <HAL_Delay>

    uint32_t app_stack = *(volatile uint32_t*)ETX_APP_FLASH_ADDR;
 8004474:	4b14      	ldr	r3, [pc, #80]	@ (80044c8 <goto_application+0x68>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
    uint32_t app_reset_handler = *(volatile uint32_t*)(ETX_APP_FLASH_ADDR + 4);
 800447a:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <goto_application+0x6c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60bb      	str	r3, [r7, #8]

    // Check if the app address is valid (optional safety check)
    if ((app_stack & 0x2FFE0000) != 0x20000000) {
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <goto_application+0x70>)
 8004484:	4013      	ands	r3, r2
 8004486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448a:	d003      	beq.n	8004494 <goto_application+0x34>
        printf("Invalid application stack pointer.\r\n");
 800448c:	4811      	ldr	r0, [pc, #68]	@ (80044d4 <goto_application+0x74>)
 800448e:	f00a fd13 	bl	800eeb8 <puts>
        return;
 8004492:	e014      	b.n	80044be <goto_application+0x5e>
    }

    // Deinit all HAL and peripherals
    HAL_RCC_DeInit();
 8004494:	f008 fd5c 	bl	800cf50 <HAL_RCC_DeInit>
    HAL_DeInit();
 8004498:	f004 fb66 	bl	8008b68 <HAL_DeInit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800449c:	b672      	cpsid	i
}
 800449e:	bf00      	nop
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f383 8808 	msr	MSP, r3
}
 80044aa:	bf00      	nop

    // Set main stack pointer
    __set_MSP(app_stack);

    // Set vector table location (important for interrupts to work correctly)
    SCB->VTOR = ETX_APP_FLASH_ADDR;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <goto_application+0x78>)
 80044ae:	4a06      	ldr	r2, [pc, #24]	@ (80044c8 <goto_application+0x68>)
 80044b0:	609a      	str	r2, [r3, #8]

    // Jump to application reset handler
    void (*app_entry)(void) = (void (*)(void))app_reset_handler;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	607b      	str	r3, [r7, #4]
    app_entry();
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4798      	blx	r3

    // Should never return here
    while(1);
 80044ba:	bf00      	nop
 80044bc:	e7fd      	b.n	80044ba <goto_application+0x5a>
}
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	0800febc 	.word	0x0800febc
 80044c8:	08020000 	.word	0x08020000
 80044cc:	08020004 	.word	0x08020004
 80044d0:	2ffe0000 	.word	0x2ffe0000
 80044d4:	0800fed8 	.word	0x0800fed8
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80044e0:	b672      	cpsid	i
}
 80044e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <Error_Handler+0x8>

080044e8 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
 80044f4:	4613      	mov	r3, r2
 80044f6:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 80044f8:	78bb      	ldrb	r3, [r7, #2]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d00e      	beq.n	800451c <optiga_cmd_set_shielded_connection_option+0x34>
 80044fe:	2b02      	cmp	r3, #2
 8004500:	dc10      	bgt.n	8004524 <optiga_cmd_set_shielded_connection_option+0x3c>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <optiga_cmd_set_shielded_connection_option+0x24>
 8004506:	2b01      	cmp	r3, #1
 8004508:	d004      	beq.n	8004514 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 800450a:	e00b      	b.n	8004524 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	769a      	strb	r2, [r3, #26]
        break;
 8004512:	e008      	b.n	8004526 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	76da      	strb	r2, [r3, #27]
        break;
 800451a:	e004      	b.n	8004526 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	771a      	strb	r2, [r3, #28]
        break;
 8004522:	e000      	b.n	8004526 <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8004524:	bf00      	nop
    }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
 800453e:	460b      	mov	r3, r1
 8004540:	71bb      	strb	r3, [r7, #6]
 8004542:	4613      	mov	r3, r2
 8004544:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	79fa      	ldrb	r2, [r7, #7]
 800454a:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	79ba      	ldrb	r2, [r7, #6]
 8004552:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004554:	88bb      	ldrh	r3, [r7, #4]
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	b29a      	uxth	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	3302      	adds	r3, #2
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3303      	adds	r3, #3
 8004566:	88ba      	ldrh	r2, [r7, #4]
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8004580:	2100      	movs	r1, #0
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 ff46 	bl	8005414 <optiga_cmd_execute_handler>
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	461a      	mov	r2, r3
 800459c:	460b      	mov	r3, r1
 800459e:	72fb      	strb	r3, [r7, #11]
 80045a0:	4613      	mov	r3, r2
 80045a2:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	7aba      	ldrb	r2, [r7, #10]
 80045ae:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	7e3a      	ldrb	r2, [r7, #24]
 80045b4:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	7afa      	ldrb	r2, [r7, #11]
 80045c6:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8c3a      	ldrh	r2, [r7, #32]
 80045cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80045ce:	2100      	movs	r1, #0
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 ff1f 	bl	8005414 <optiga_cmd_execute_handler>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3308      	adds	r3, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fbe8 	bl	8005dc0 <optiga_common_get_uint32>
 80045f0:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 80045f8:	d201      	bcs.n	80045fe <optiga_cmd_session_available+0x20>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <optiga_cmd_session_available+0x22>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8a9b      	ldrh	r3, [r3, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11d      	bne.n	800465c <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004620:	2300      	movs	r3, #0
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e017      	b.n	8004656 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b10      	cmp	r3, #16
 8004630:	d00e      	beq.n	8004650 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	b21a      	sxth	r2, r3
 8004636:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <optiga_cmd_session_assign+0x60>)
 8004638:	4313      	orrs	r3, r2
 800463a:	b21b      	sxth	r3, r3
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4413      	add	r3, r2
 8004648:	2210      	movs	r2, #16
 800464a:	701a      	strb	r2, [r3, #0]
                break;
 800464c:	bf00      	nop
            }
        }
    }
}
 800464e:	e005      	b.n	800465c <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	3301      	adds	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d9e4      	bls.n	8004626 <optiga_cmd_session_assign+0x1e>
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	ffffe100 	.word	0xffffe100

0800466c <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3308      	adds	r3, #8
 800467a:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8a9b      	ldrh	r3, [r3, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8a9b      	ldrh	r3, [r3, #20]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
    }
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	70fb      	strb	r3, [r7, #3]
 80046b8:	4613      	mov	r3, r2
 80046ba:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
 80046c8:	e027      	b.n	800471a <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d002      	beq.n	80046d6 <optiga_cmd_queue_get_count_of+0x2a>
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	d00c      	beq.n	80046ee <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 80046d4:	e017      	b.n	8004706 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	737b      	strb	r3, [r7, #13]
            break;
 80046ec:	e00b      	b.n	8004706 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	737b      	strb	r3, [r7, #13]
            break;
 8004704:	bf00      	nop
        }
        if (state_to_check == slot_value)
 8004706:	78ba      	ldrb	r2, [r7, #2]
 8004708:	7b7b      	ldrb	r3, [r7, #13]
 800470a:	429a      	cmp	r2, r3
 800470c:	d102      	bne.n	8004714 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 800470e:	7bbb      	ldrb	r3, [r7, #14]
 8004710:	3301      	adds	r3, #1
 8004712:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	3301      	adds	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b05      	cmp	r3, #5
 800471e:	d9d4      	bls.n	80046ca <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8004720:	7bbb      	ldrb	r3, [r7, #14]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	e01f      	b.n	800477e <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	7bfa      	ldrb	r2, [r7, #15]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10f      	bne.n	8004778 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
           break;
 8004776:	e006      	b.n	8004786 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	3301      	adds	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d9dc      	bls.n	800473e <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047a0:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 80047a2:	23ff      	movs	r3, #255	@ 0xff
 80047a4:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80047b4:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 80047b6:	2202      	movs	r2, #2
 80047b8:	2109      	movs	r1, #9
 80047ba:	6978      	ldr	r0, [r7, #20]
 80047bc:	f7ff ff76 	bl	80046ac <optiga_cmd_queue_get_count_of>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 80047c6:	2208      	movs	r2, #8
 80047c8:	2109      	movs	r1, #9
 80047ca:	6978      	ldr	r0, [r7, #20]
 80047cc:	f7ff ff6e 	bl	80046ac <optiga_cmd_queue_get_count_of>
 80047d0:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00f      	beq.n	80047f6 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80047d6:	2204      	movs	r2, #4
 80047d8:	2109      	movs	r1, #9
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff ff66 	bl	80046ac <optiga_cmd_queue_get_count_of>
 80047e0:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10f      	bne.n	8004806 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 80047e6:	2223      	movs	r2, #35	@ 0x23
 80047e8:	2108      	movs	r1, #8
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7ff ff5e 	bl	80046ac <optiga_cmd_queue_get_count_of>
 80047f0:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80047f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	496d      	ldr	r1, [pc, #436]	@ (80049b4 <optiga_cmd_queue_scheduler+0x220>)
 80047fe:	6938      	ldr	r0, [r7, #16]
 8004800:	f001 ff08 	bl	8006614 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8004804:	e0d2      	b.n	80049ac <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 8004806:	6938      	ldr	r0, [r7, #16]
 8004808:	f001 fede 	bl	80065c8 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 800480c:	7e7b      	ldrb	r3, [r7, #25]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800481e:	2300      	movs	r3, #0
 8004820:	76fb      	strb	r3, [r7, #27]
 8004822:	e05b      	b.n	80048dc <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8004824:	7efa      	ldrb	r2, [r7, #27]
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004838:	2208      	movs	r2, #8
 800483a:	2109      	movs	r1, #9
 800483c:	6978      	ldr	r0, [r7, #20]
 800483e:	f7ff ff35 	bl	80046ac <optiga_cmd_queue_get_count_of>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10d      	bne.n	8004864 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	7a5b      	ldrb	r3, [r3, #9]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d142      	bne.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004854:	2b23      	cmp	r3, #35	@ 0x23
 8004856:	d13e      	bne.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 800485e:	7efb      	ldrb	r3, [r7, #27]
 8004860:	76bb      	strb	r3, [r7, #26]
 8004862:	e038      	b.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	7a5b      	ldrb	r3, [r3, #9]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d134      	bne.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004876:	429a      	cmp	r2, r3
 8004878:	d201      	bcs.n	800487e <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	429a      	cmp	r2, r3
 8004886:	d326      	bcc.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004892:	429a      	cmp	r2, r3
 8004894:	d31f      	bcc.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800489a:	2b22      	cmp	r3, #34	@ 0x22
 800489c:	d105      	bne.n	80048aa <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f7ff fe9d 	bl	80045de <optiga_cmd_session_available>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d010      	beq.n	80048cc <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80048ae:	2b22      	cmp	r3, #34	@ 0x22
 80048b0:	d104      	bne.n	80048bc <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	8a9b      	ldrh	r3, [r3, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d107      	bne.n	80048cc <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80048c0:	2b21      	cmp	r3, #33	@ 0x21
 80048c2:	d003      	beq.n	80048cc <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 80048c8:	2b23      	cmp	r3, #35	@ 0x23
 80048ca:	d104      	bne.n	80048d6 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 80048d2:	7efb      	ldrb	r3, [r7, #27]
 80048d4:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80048d6:	7efb      	ldrb	r3, [r7, #27]
 80048d8:	3301      	adds	r3, #1
 80048da:	76fb      	strb	r3, [r7, #27]
 80048dc:	7efb      	ldrb	r3, [r7, #27]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d9a0      	bls.n	8004824 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 80048e2:	7ebb      	ldrb	r3, [r7, #26]
 80048e4:	2bff      	cmp	r3, #255	@ 0xff
 80048e6:	d102      	bne.n	80048ee <optiga_cmd_queue_scheduler+0x15a>
 80048e8:	7e7b      	ldrb	r3, [r7, #25]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d08e      	beq.n	800480c <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 80048ee:	7ebb      	ldrb	r3, [r7, #26]
 80048f0:	2bff      	cmp	r3, #255	@ 0xff
 80048f2:	d054      	beq.n	800499e <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 80048f4:	7eba      	ldrb	r2, [r7, #26]
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4413      	add	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004908:	7eba      	ldrb	r2, [r7, #26]
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b22      	cmp	r3, #34	@ 0x22
 800491e:	d111      	bne.n	8004944 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 800492a:	7eba      	ldrb	r2, [r7, #26]
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fe62 	bl	8004608 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8004944:	7eba      	ldrb	r2, [r7, #26]
 8004946:	6979      	ldr	r1, [r7, #20]
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800495e:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8004960:	7eba      	ldrb	r2, [r7, #26]
 8004962:	6979      	ldr	r1, [r7, #20]
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2332      	movs	r3, #50	@ 0x32
 8004976:	4910      	ldr	r1, [pc, #64]	@ (80049b8 <optiga_cmd_queue_scheduler+0x224>)
 8004978:	6938      	ldr	r0, [r7, #16]
 800497a:	f001 fe4b 	bl	8006614 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 800497e:	7eba      	ldrb	r2, [r7, #26]
 8004980:	6979      	ldr	r1, [r7, #20]
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004990:	2204      	movs	r2, #4
 8004992:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 800499c:	e006      	b.n	80049ac <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 800499e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4903      	ldr	r1, [pc, #12]	@ (80049b4 <optiga_cmd_queue_scheduler+0x220>)
 80049a6:	6938      	ldr	r0, [r7, #16]
 80049a8:	f001 fe34 	bl	8006614 <pal_os_event_register_callback_oneshot>
}
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	08004795 	.word	0x08004795
 80049b8:	08004579 	.word	0x08004579

080049bc <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 80049bc:	b5b0      	push	{r4, r5, r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	7f9b      	ldrb	r3, [r3, #30]
 80049d0:	4619      	mov	r1, r3
 80049d2:	460b      	mov	r3, r1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	440b      	add	r3, r1
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b23      	cmp	r3, #35	@ 0x23
 80049e4:	d111      	bne.n	8004a0a <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	7f9b      	ldrb	r3, [r3, #30]
 80049ee:	4619      	mov	r1, r3
 80049f0:	460b      	mov	r3, r1
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	440b      	add	r3, r1
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80049fe:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004a00:	2b23      	cmp	r3, #35	@ 0x23
 8004a02:	d112      	bne.n	8004a2a <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b23      	cmp	r3, #35	@ 0x23
 8004a08:	d00f      	beq.n	8004a2a <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681c      	ldr	r4, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7f9b      	ldrb	r3, [r3, #30]
 8004a12:	461d      	mov	r5, r3
 8004a14:	f001 feb0 	bl	8006778 <pal_os_timer_get_time_in_microseconds>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	442b      	add	r3, r5
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4423      	add	r3, r4
 8004a24:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004a28:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7f9b      	ldrb	r3, [r3, #30]
 8004a32:	4619      	mov	r1, r3
 8004a34:	460b      	mov	r3, r1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7f9b      	ldrb	r3, [r3, #30]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	460b      	mov	r3, r1
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	440b      	add	r3, r1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b23      	cmp	r3, #35	@ 0x23
 8004a62:	d111      	bne.n	8004a88 <optiga_cmd_queue_update_slot+0xcc>
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b23      	cmp	r3, #35	@ 0x23
 8004a68:	d10e      	bne.n	8004a88 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7f9b      	ldrb	r3, [r3, #30]
 8004a72:	4619      	mov	r1, r3
 8004a74:	460b      	mov	r3, r1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	440b      	add	r3, r1
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004a82:	2208      	movs	r2, #8
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e00d      	b.n	8004aa4 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7f9b      	ldrb	r3, [r3, #30]
 8004a90:	4619      	mov	r1, r3
 8004a92:	460b      	mov	r3, r1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	440b      	add	r3, r1
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7f9b      	ldrb	r3, [r3, #30]
 8004aac:	4619      	mov	r1, r3
 8004aae:	460b      	mov	r3, r1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	440b      	add	r3, r1
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	701a      	strb	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bdb0      	pop	{r4, r5, r7, pc}

08004ac8 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7f9b      	ldrb	r3, [r3, #30]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	460b      	mov	r3, r1
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	440b      	add	r3, r1
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004ae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004aec:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7f9b      	ldrb	r3, [r3, #30]
 8004af6:	4619      	mov	r1, r3
 8004af8:	460b      	mov	r3, r1
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	440b      	add	r3, r1
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	7f9b      	ldrb	r3, [r3, #30]
 8004b12:	4619      	mov	r1, r3
 8004b14:	460b      	mov	r3, r1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	440b      	add	r3, r1
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7f9b      	ldrb	r3, [r3, #30]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	460b      	mov	r3, r1
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	440b      	add	r3, r1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4903      	ldr	r1, [pc, #12]	@ (8004b60 <optiga_cmd_queue_reset_slot+0x98>)
 8004b52:	f001 fd21 	bl	8006598 <pal_os_event_start>
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	08004795 	.word	0x08004795

08004b64 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7f9b      	ldrb	r3, [r3, #30]
 8004b74:	4619      	mov	r1, r3
 8004b76:	460b      	mov	r3, r1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	440b      	add	r3, r1
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7f9b      	ldrb	r3, [r3, #30]
 8004b90:	4619      	mov	r1, r3
 8004b92:	460b      	mov	r3, r1
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	440b      	add	r3, r1
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004bb8:	2122      	movs	r1, #34	@ 0x22
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fefe 	bl	80049bc <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fd4a 	bl	800466c <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff fee2 	bl	80049bc <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff ff5c 	bl	8004ac8 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8004c22:	f240 2302 	movw	r3, #514	@ 0x202
 8004c26:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d011      	beq.n	8004c54 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8004c30:	2308      	movs	r3, #8
 8004c32:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004c40:	f107 020c 	add.w	r2, r7, #12
 8004c44:	4619      	mov	r1, r3
 8004c46:	f001 fc1f 	bl	8006488 <pal_os_datastore_read>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d11a      	bne.n	8004c8a <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f8af 	bl	8005dc0 <optiga_common_get_uint32>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f8a5 	bl	8005dc0 <optiga_common_get_uint32>
 8004c76:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8004c7c:	f240 2302 	movw	r3, #514	@ 0x202
 8004c80:	81fb      	strh	r3, [r7, #14]
            break;
 8004c82:	e003      	b.n	8004c8c <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8004c84:	2300      	movs	r3, #0
 8004c86:	81fb      	strh	r3, [r7, #14]
 8004c88:	e000      	b.n	8004c8c <optiga_cmd_restore_context+0x72>
                break;
 8004c8a:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8004c8c:	89fb      	ldrh	r3, [r7, #14]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	7e5b      	ldrb	r3, [r3, #25]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d029      	beq.n	8004cfe <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004cae:	2b22      	cmp	r3, #34	@ 0x22
 8004cb0:	d125      	bne.n	8004cfe <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004cba:	2208      	movs	r2, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fd42 	bl	8006748 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004cc8:	2b33      	cmp	r3, #51	@ 0x33
 8004cca:	d118      	bne.n	8004cfe <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d014      	beq.n	8004cfe <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f001 fb52 	bl	800638c <pal_os_datastore_write>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8c1b      	ldrh	r3, [r3, #32]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7ddb      	ldrb	r3, [r3, #23]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d05f      	beq.n	8004de0 <optiga_cmd_execute_comms_open+0xd8>
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	dc6d      	bgt.n	8004e00 <optiga_cmd_execute_comms_open+0xf8>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <optiga_cmd_execute_comms_open+0x26>
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d01b      	beq.n	8004d64 <optiga_cmd_execute_comms_open+0x5c>
 8004d2c:	e068      	b.n	8004e00 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004d2e:	2121      	movs	r1, #33	@ 0x21
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ff56 	bl	8004be2 <optiga_cmd_request_lock>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8c1b      	ldrh	r3, [r3, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	759a      	strb	r2, [r3, #22]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f240 2202 	movw	r2, #514	@ 0x202
 8004d52:	841a      	strh	r2, [r3, #32]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
                    break;
 8004d5a:	e05c      	b.n	8004e16 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	75da      	strb	r2, [r3, #23]
                break;
 8004d62:	e058      	b.n	8004e16 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	7e92      	ldrb	r2, [r2, #26]
 8004d6e:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	7ed2      	ldrb	r2, [r2, #27]
 8004d7a:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	7f12      	ldrb	r2, [r2, #28]
 8004d86:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004d96:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fee5 	bl	8005b70 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 feef 	bl	8005b90 <optiga_comms_open>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8c1b      	ldrh	r3, [r3, #32]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	759a      	strb	r2, [r3, #22]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f240 2202 	movw	r2, #514	@ 0x202
 8004dce:	841a      	strh	r2, [r3, #32]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
                    break;
 8004dd6:	e01e      	b.n	8004e16 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	75da      	strb	r2, [r3, #23]
                break;
 8004dde:	e01a      	b.n	8004e16 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004de8:	2332      	movs	r3, #50	@ 0x32
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4910      	ldr	r1, [pc, #64]	@ (8004e30 <optiga_cmd_execute_comms_open+0x128>)
 8004dee:	f001 fc11 	bl	8006614 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2209      	movs	r2, #9
 8004dfc:	75da      	strb	r2, [r3, #23]
                break;
 8004dfe:	e00a      	b.n	8004e16 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2204      	movs	r2, #4
 8004e04:	759a      	strb	r2, [r3, #22]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f240 2202 	movw	r2, #514	@ 0x202
 8004e0c:	841a      	strh	r2, [r3, #32]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
            break;
 8004e14:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d104      	bne.n	8004e28 <optiga_cmd_execute_comms_open+0x120>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7d9b      	ldrb	r3, [r3, #22]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f43f af75 	beq.w	8004d12 <optiga_cmd_execute_comms_open+0xa>
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	08004579 	.word	0x08004579

08004e34 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7ddb      	ldrb	r3, [r3, #23]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d002      	beq.n	8004e52 <optiga_cmd_execute_comms_close+0x1e>
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d068      	beq.n	8004f22 <optiga_cmd_execute_comms_close+0xee>
 8004e50:	e07a      	b.n	8004f48 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7f1b      	ldrb	r3, [r3, #28]
 8004e56:	2b22      	cmp	r3, #34	@ 0x22
 8004e58:	d002      	beq.n	8004e60 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	7e92      	ldrb	r2, [r2, #26]
 8004e6a:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	7ed2      	ldrb	r2, [r2, #27]
 8004e76:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	7f12      	ldrb	r2, [r2, #28]
 8004e8e:	751a      	strb	r2, [r3, #20]
 8004e90:	e004      	b.n	8004e9c <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2233      	movs	r2, #51	@ 0x33
 8004e9a:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004eba:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fe53 	bl	8005b70 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fedb 	bl	8005c8c <optiga_comms_close>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8c1b      	ldrh	r3, [r3, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	759a      	strb	r2, [r3, #22]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f240 2202 	movw	r2, #514	@ 0x202
 8004ef2:	841a      	strh	r2, [r3, #32]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
                    break;
 8004efa:	e031      	b.n	8004f60 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	7f1b      	ldrb	r3, [r3, #28]
 8004f00:	2b22      	cmp	r3, #34	@ 0x22
 8004f02:	d106      	bne.n	8004f12 <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2204      	movs	r2, #4
 8004f08:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004f10:	e026      	b.n	8004f60 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe75 	bl	8004c02 <optiga_cmd_release_lock>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	841a      	strh	r2, [r3, #32]
                break;
 8004f20:	e01e      	b.n	8004f60 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7f1b      	ldrb	r3, [r3, #28]
 8004f34:	2b22      	cmp	r3, #34	@ 0x22
 8004f36:	d112      	bne.n	8004f5e <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fe62 	bl	8004c02 <optiga_cmd_release_lock>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004f46:	e00a      	b.n	8004f5e <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	759a      	strb	r2, [r3, #22]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f240 2202 	movw	r2, #514	@ 0x202
 8004f54:	841a      	strh	r2, [r3, #32]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
            break;
 8004f5c:	e000      	b.n	8004f60 <optiga_cmd_execute_comms_close+0x12c>
                break;
 8004f5e:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <optiga_cmd_execute_comms_close+0x13e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7d9b      	ldrb	r3, [r3, #22]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f43f af66 	beq.w	8004e3e <optiga_cmd_execute_comms_close+0xa>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7ddb      	ldrb	r3, [r3, #23]
 8004f90:	3b05      	subs	r3, #5
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	f200 80d6 	bhi.w	8005144 <optiga_cmd_execute_prepare_command+0x1c8>
 8004f98:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <optiga_cmd_execute_prepare_command+0x24>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb5 	.word	0x08004fb5
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08005009 	.word	0x08005009
 8004fac:	0800501d 	.word	0x0800501d
 8004fb0:	08005059 	.word	0x08005059
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7ddb      	ldrb	r3, [r3, #23]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d107      	bne.n	8004fd2 <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fdf4 	bl	8004bb0 <optiga_cmd_request_session>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	841a      	strh	r2, [r3, #32]
 8004fd0:	e007      	b.n	8004fe2 <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004fd2:	2121      	movs	r1, #33	@ 0x21
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fe04 	bl	8004be2 <optiga_cmd_request_lock>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8c1b      	ldrh	r3, [r3, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	759a      	strb	r2, [r3, #22]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f240 2202 	movw	r2, #514	@ 0x202
 8004ff6:	841a      	strh	r2, [r3, #32]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
                    break;
 8004ffe:	e0ac      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2209      	movs	r2, #9
 8005004:	75da      	strb	r2, [r3, #23]
                break;
 8005006:	e0a8      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff fdab 	bl	8004b64 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2208      	movs	r2, #8
 8005012:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
                break;
 800501a:	e09e      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 800501c:	2123      	movs	r1, #35	@ 0x23
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fddf 	bl	8004be2 <optiga_cmd_request_lock>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8c1b      	ldrh	r3, [r3, #32]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2204      	movs	r2, #4
 8005038:	759a      	strb	r2, [r3, #22]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f240 2202 	movw	r2, #514	@ 0x202
 8005040:	841a      	strh	r2, [r3, #32]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
                    break;
 8005048:	e087      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2209      	movs	r2, #9
 800504e:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
                break;
 8005056:	e080      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8c1b      	ldrh	r3, [r3, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d006      	beq.n	8005082 <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
                    break;
 8005080:	e06b      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f240 6222 	movw	r2, #1570	@ 0x622
 800508a:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	7e92      	ldrb	r2, [r2, #26]
 8005096:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	7ed2      	ldrb	r2, [r2, #27]
 80050a2:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7e9a      	ldrb	r2, [r3, #26]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fd53 	bl	8005b70 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80050dc:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80050ea:	3306      	adds	r3, #6
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	4623      	mov	r3, r4
 80050f0:	f000 fd86 	bl	8005c00 <optiga_comms_transceive>
 80050f4:	4603      	mov	r3, r0
 80050f6:	461a      	mov	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8c1b      	ldrh	r3, [r3, #32]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2204      	movs	r2, #4
 8005108:	759a      	strb	r2, [r3, #22]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f240 2202 	movw	r2, #514	@ 0x202
 8005110:	841a      	strh	r2, [r3, #32]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	701a      	strb	r2, [r3, #0]
                    break;
 8005118:	e01f      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2203      	movs	r2, #3
 800511e:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	220a      	movs	r2, #10
 8005124:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7f5b      	ldrb	r3, [r3, #29]
 800512a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512e:	b2da      	uxtb	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	775a      	strb	r2, [r3, #29]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7f5b      	ldrb	r3, [r3, #29]
 8005138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800513c:	b2da      	uxtb	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	775a      	strb	r2, [r3, #29]
                break;
 8005142:	e00a      	b.n	800515a <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	759a      	strb	r2, [r3, #22]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f240 2202 	movw	r2, #514	@ 0x202
 8005150:	841a      	strh	r2, [r3, #32]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
            break;
 8005158:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <optiga_cmd_execute_prepare_command+0x1f0>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7d9b      	ldrb	r3, [r3, #22]
 8005166:	2b02      	cmp	r3, #2
 8005168:	f43f af10 	beq.w	8004f8c <optiga_cmd_execute_prepare_command+0x10>
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bd90      	pop	{r4, r7, pc}

08005174 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fa17 	bl	80055b8 <optiga_cmd_get_error_code_handler>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8c1b      	ldrh	r3, [r3, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <optiga_cmd_execute_get_device_error+0x30>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8c1b      	ldrh	r3, [r3, #32]
 800519e:	b21b      	sxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	da0a      	bge.n	80051ba <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 80051a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ac:	d10c      	bne.n	80051c8 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7f5b      	ldrb	r3, [r3, #29]
 80051b2:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d106      	bne.n	80051c8 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
            break;
 80051c6:	bf00      	nop
        }
    } while (FALSE);
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7f5b      	ldrb	r3, [r3, #29]
 80051ea:	b25b      	sxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	da0b      	bge.n	8005208 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4798      	blx	r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8c1b      	ldrh	r3, [r3, #32]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d14e      	bne.n	80052a4 <optiga_cmd_execute_process_optiga_response+0xd4>
 8005206:	e006      	b.n	8005216 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
            break;
 8005214:	e06f      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2bf1      	cmp	r3, #241	@ 0xf1
 800521e:	d113      	bne.n	8005248 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4934      	ldr	r1, [pc, #208]	@ (8005300 <optiga_cmd_execute_process_optiga_response+0x130>)
 8005230:	f001 f9f0 	bl	8006614 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2203      	movs	r2, #3
 8005244:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8005246:	e056      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7e1b      	ldrb	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10e      	bne.n	800526e <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	7ddb      	ldrb	r3, [r3, #23]
 8005254:	2b0e      	cmp	r3, #14
 8005256:	d006      	beq.n	8005266 <optiga_cmd_execute_process_optiga_response+0x96>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7ddb      	ldrb	r3, [r3, #23]
 800525c:	2b0d      	cmp	r3, #13
 800525e:	d002      	beq.n	8005266 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	220c      	movs	r2, #12
 8005264:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
                    break;
 800526c:	e043      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4920      	ldr	r1, [pc, #128]	@ (8005300 <optiga_cmd_execute_process_optiga_response+0x130>)
 800527e:	f001 f9c9 	bl	8006614 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7e9b      	ldrb	r3, [r3, #26]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2209      	movs	r2, #9
 80052a0:	75da      	strb	r2, [r3, #23]
}
 80052a2:	e028      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8c1b      	ldrh	r3, [r3, #32]
 80052a8:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 80052ac:	d106      	bne.n	80052bc <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	220c      	movs	r2, #12
 80052b2:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
                break;
 80052ba:	e01c      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7ddb      	ldrb	r3, [r3, #23]
 80052c0:	2b0d      	cmp	r3, #13
 80052c2:	d103      	bne.n	80052cc <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
}
 80052ca:	e014      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	220b      	movs	r2, #11
 80052d0:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7f5b      	ldrb	r3, [r3, #29]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	775a      	strb	r2, [r3, #29]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7f5b      	ldrb	r3, [r3, #29]
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
}
 80052f4:	e7ff      	b.n	80052f6 <optiga_cmd_execute_process_optiga_response+0x126>
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	08004579 	.word	0x08004579

08005304 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	7ddb      	ldrb	r3, [r3, #23]
 8005312:	3b0a      	subs	r3, #10
 8005314:	2b04      	cmp	r3, #4
 8005316:	d84d      	bhi.n	80053b4 <optiga_cmd_execute_process_response+0xb0>
 8005318:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <optiga_cmd_execute_process_response+0x1c>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005335 	.word	0x08005335
 8005324:	0800533f 	.word	0x0800533f
 8005328:	08005389 	.word	0x08005389
 800532c:	08005349 	.word	0x08005349
 8005330:	0800539d 	.word	0x0800539d
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ff4a 	bl	80051d0 <optiga_cmd_execute_process_optiga_response>
                break;
 800533c:	e045      	b.n	80053ca <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ff17 	bl	8005174 <optiga_cmd_execute_get_device_error>
                break;
 8005346:	e040      	b.n	80053ca <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fc3e 	bl	8004bca <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8c1b      	ldrh	r3, [r3, #32]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	220c      	movs	r2, #12
 800535a:	75da      	strb	r2, [r3, #23]
 800535c:	e010      	b.n	8005380 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	220b      	movs	r2, #11
 8005362:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7f5b      	ldrb	r3, [r3, #29]
 8005368:	f023 0303 	bic.w	r3, r3, #3
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	775a      	strb	r2, [r3, #29]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	7f5b      	ldrb	r3, [r3, #29]
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
                break;
 8005386:	e020      	b.n	80053ca <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff fc3a 	bl	8004c02 <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	220e      	movs	r2, #14
 8005392:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
                break;
 800539a:	e016      	b.n	80053ca <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68d0      	ldr	r0, [r2, #12]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	8c12      	ldrh	r2, [r2, #32]
 80053a8:	4611      	mov	r1, r2
 80053aa:	4798      	blx	r3
                *exit_loop = TRUE;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
                break;
 80053b2:	e00a      	b.n	80053ca <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2204      	movs	r2, #4
 80053b8:	759a      	strb	r2, [r3, #22]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f240 2202 	movw	r2, #514	@ 0x202
 80053c0:	841a      	strh	r2, [r3, #32]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
            break;
 80053c8:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <optiga_cmd_execute_process_response+0xd6>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	7d9b      	ldrb	r3, [r3, #22]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d099      	beq.n	800530e <optiga_cmd_execute_process_response+0xa>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop

080053e4 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff fc07 	bl	8004c02 <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68d0      	ldr	r0, [r2, #12]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	8c12      	ldrh	r2, [r2, #32]
 8005400:	4611      	mov	r1, r2
 8005402:	4798      	blx	r3
        *exit_loop = TRUE;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fc31 	bl	8004c96 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2204      	movs	r2, #4
 8005438:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	887a      	ldrh	r2, [r7, #2]
 800543e:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	7d9b      	ldrb	r3, [r3, #22]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d830      	bhi.n	80054aa <optiga_cmd_execute_handler+0x96>
 8005448:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <optiga_cmd_execute_handler+0x3c>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005465 	.word	0x08005465
 8005454:	08005473 	.word	0x08005473
 8005458:	08005481 	.word	0x08005481
 800545c:	0800548f 	.word	0x0800548f
 8005460:	0800549d 	.word	0x0800549d
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8005464:	f107 030b 	add.w	r3, r7, #11
 8005468:	4619      	mov	r1, r3
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff fc4c 	bl	8004d08 <optiga_cmd_execute_comms_open>
                break;
 8005470:	e01c      	b.n	80054ac <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8005472:	f107 030b 	add.w	r3, r7, #11
 8005476:	4619      	mov	r1, r3
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff fcdb 	bl	8004e34 <optiga_cmd_execute_comms_close>
                break;
 800547e:	e015      	b.n	80054ac <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8005480:	f107 030b 	add.w	r3, r7, #11
 8005484:	4619      	mov	r1, r3
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fd78 	bl	8004f7c <optiga_cmd_execute_prepare_command>
                break;
 800548c:	e00e      	b.n	80054ac <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 800548e:	f107 030b 	add.w	r3, r7, #11
 8005492:	4619      	mov	r1, r3
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f7ff ff35 	bl	8005304 <optiga_cmd_execute_process_response>
                break;
 800549a:	e007      	b.n	80054ac <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 800549c:	f107 030b 	add.w	r3, r7, #11
 80054a0:	4619      	mov	r1, r3
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff9e 	bl	80053e4 <optiga_cmd_execute_error_handler>
                break;
 80054a8:	e000      	b.n	80054ac <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 80054aa:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0c6      	beq.n	8005440 <optiga_cmd_execute_handler+0x2c>
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 80054ce:	f001 f905 	bl	80066dc <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d15b      	bne.n	8005590 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	4a33      	ldr	r2, [pc, #204]	@ (80055a8 <optiga_cmd_create+0xec>)
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2109      	movs	r1, #9
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff f8e1 	bl	80046ac <optiga_cmd_queue_get_count_of>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d051      	beq.n	8005594 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 80054f0:	2128      	movs	r1, #40	@ 0x28
 80054f2:	2001      	movs	r0, #1
 80054f4:	f001 f900 	bl	80066f8 <pal_os_calloc>
 80054f8:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d04b      	beq.n	8005598 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	4a26      	ldr	r2, [pc, #152]	@ (80055a8 <optiga_cmd_create+0xec>)
 8005510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	4a24      	ldr	r2, [pc, #144]	@ (80055ac <optiga_cmd_create+0xf0>)
 800551c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	7b1b      	ldrb	r3, [r3, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d129      	bne.n	8005582 <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	4611      	mov	r1, r2
 8005538:	481d      	ldr	r0, [pc, #116]	@ (80055b0 <optiga_cmd_create+0xf4>)
 800553a:	f001 f853 	bl	80065e4 <pal_os_event_create>
 800553e:	4603      	mov	r3, r0
 8005540:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681c      	ldr	r4, [r3, #0]
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	481a      	ldr	r0, [pc, #104]	@ (80055b4 <optiga_cmd_create+0xf8>)
 800554c:	f000 faea 	bl	8005b24 <optiga_comms_create>
 8005550:	4603      	mov	r3, r0
 8005552:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f001 f8d8 	bl	8006714 <pal_os_free>
                me = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
                break;
 8005568:	e017      	b.n	800559a <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005580:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	331e      	adds	r3, #30
 8005586:	4619      	mov	r1, r3
 8005588:	6978      	ldr	r0, [r7, #20]
 800558a:	f7ff f8d0 	bl	800472e <optiga_cmd_queue_assign_slot>
 800558e:	e004      	b.n	800559a <optiga_cmd_create+0xde>
            break;
 8005590:	bf00      	nop
 8005592:	e002      	b.n	800559a <optiga_cmd_create+0xde>
            break;
 8005594:	bf00      	nop
 8005596:	e000      	b.n	800559a <optiga_cmd_create+0xde>
            break;
 8005598:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 800559a:	f001 f8a6 	bl	80066ea <pal_os_lock_exit_critical_section>
    return (me);
 800559e:	697b      	ldr	r3, [r7, #20]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd90      	pop	{r4, r7, pc}
 80055a8:	200004d0 	.word	0x200004d0
 80055ac:	200004d4 	.word	0x200004d4
 80055b0:	08004795 	.word	0x08004795
 80055b4:	08005415 	.word	0x08005415

080055b8 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 80055c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c4:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80055c6:	2309      	movs	r3, #9
 80055c8:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	7f5b      	ldrb	r3, [r3, #29]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b03      	cmp	r3, #3
 80055da:	f000 8099 	beq.w	8005710 <optiga_cmd_get_error_code_handler+0x158>
 80055de:	2b03      	cmp	r3, #3
 80055e0:	f300 80b6 	bgt.w	8005750 <optiga_cmd_get_error_code_handler+0x198>
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d002      	beq.n	80055ee <optiga_cmd_get_error_code_handler+0x36>
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d052      	beq.n	8005692 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 80055ec:	e0b0      	b.n	8005750 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f103 020d 	add.w	r2, r3, #13
 80055f6:	89bb      	ldrh	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fba6 	bl	8005d50 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005604:	89bb      	ldrh	r3, [r7, #12]
 8005606:	3302      	adds	r3, #2
 8005608:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f103 020d 	add.w	r2, r3, #13
 8005612:	89bb      	ldrh	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fb99 	bl	8005d50 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800561e:	89bb      	ldrh	r3, [r7, #12]
 8005620:	3302      	adds	r3, #2
 8005622:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f103 020d 	add.w	r2, r3, #13
 800562c:	89bb      	ldrh	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	2101      	movs	r1, #1
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fb8c 	bl	8005d50 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005638:	89bb      	ldrh	r3, [r7, #12]
 800563a:	3302      	adds	r3, #2
 800563c:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800563e:	89bb      	ldrh	r3, [r7, #12]
 8005640:	3b09      	subs	r3, #9
 8005642:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800564a:	3305      	adds	r3, #5
 800564c:	2100      	movs	r1, #0
 800564e:	2001      	movs	r0, #1
 8005650:	f7fe ff6f 	bl	8004532 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	89ba      	ldrh	r2, [r7, #12]
 800565a:	3a05      	subs	r2, #5
 800565c:	b292      	uxth	r2, r2
 800565e:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7f5b      	ldrb	r3, [r3, #29]
 8005664:	f023 0303 	bic.w	r3, r3, #3
 8005668:	b2da      	uxtb	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	775a      	strb	r2, [r3, #29]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7f5b      	ldrb	r3, [r3, #29]
 8005672:	f043 0302 	orr.w	r3, r3, #2
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005684:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4935      	ldr	r1, [pc, #212]	@ (8005760 <optiga_cmd_get_error_code_handler+0x1a8>)
 800568c:	f000 ffc2 	bl	8006614 <pal_os_event_register_callback_oneshot>
        break;
 8005690:	e061      	b.n	8005756 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f240 6222 	movw	r2, #1570	@ 0x622
 800569a:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	7e92      	ldrb	r2, [r2, #26]
 80056a6:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	7ed2      	ldrb	r2, [r2, #27]
 80056b2:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fa58 	bl	8005b70 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3306      	adds	r3, #6
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4623      	mov	r3, r4
 80056dc:	f000 fa90 	bl	8005c00 <optiga_comms_transceive>
 80056e0:	4603      	mov	r3, r0
 80056e2:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 80056ea:	f240 2302 	movw	r3, #514	@ 0x202
 80056ee:	81fb      	strh	r3, [r7, #14]
                break;
 80056f0:	e031      	b.n	8005756 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	7f5b      	ldrb	r3, [r3, #29]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	775a      	strb	r2, [r3, #29]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7f5b      	ldrb	r3, [r3, #29]
 8005704:	f043 0303 	orr.w	r3, r3, #3
 8005708:	b2da      	uxtb	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	775a      	strb	r2, [r3, #29]
        break;
 800570e:	e022      	b.n	8005756 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	7c9b      	ldrb	r3, [r3, #18]
 8005716:	2bff      	cmp	r3, #255	@ 0xff
 8005718:	d01c      	beq.n	8005754 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	7d9b      	ldrb	r3, [r3, #22]
 8005720:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572c:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2203      	movs	r2, #3
 8005732:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	220a      	movs	r2, #10
 8005738:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4905      	ldr	r1, [pc, #20]	@ (8005760 <optiga_cmd_get_error_code_handler+0x1a8>)
 800574a:	f000 ff63 	bl	8006614 <pal_os_event_register_callback_oneshot>
        break;
 800574e:	e002      	b.n	8005756 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005754:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005756:	89fb      	ldrh	r3, [r7, #14]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}
 8005760:	08004579 	.word	0x08004579

08005764 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800576c:	f240 2302 	movw	r3, #514	@ 0x202
 8005770:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7d9b      	ldrb	r3, [r3, #22]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d002      	beq.n	8005780 <optiga_cmd_open_application_handler+0x1c>
 800577a:	2b03      	cmp	r3, #3
 800577c:	d075      	beq.n	800586a <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 800577e:	e08e      	b.n	800589e <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8005780:	2314      	movs	r3, #20
 8005782:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7e5b      	ldrb	r3, [r3, #25]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <optiga_cmd_open_application_handler+0x2c>
 800578c:	2200      	movs	r2, #0
 800578e:	e000      	b.n	8005792 <optiga_cmd_open_application_handler+0x2e>
 8005790:	2208      	movs	r2, #8
 8005792:	89bb      	ldrh	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005798:	89bb      	ldrh	r3, [r7, #12]
 800579a:	f240 6215 	movw	r2, #1557	@ 0x615
 800579e:	4293      	cmp	r3, r2
 80057a0:	d903      	bls.n	80057aa <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80057a2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80057a6:	81fb      	strh	r3, [r7, #14]
                break;
 80057a8:	e079      	b.n	800589e <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7e5b      	ldrb	r3, [r3, #25]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fa31 	bl	8004c1a <optiga_cmd_restore_context>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d16e      	bne.n	800589c <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <optiga_cmd_open_application_handler+0x6a>
 80057ca:	2210      	movs	r2, #16
 80057cc:	e000      	b.n	80057d0 <optiga_cmd_open_application_handler+0x6c>
 80057ce:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80057d6:	3305      	adds	r3, #5
 80057d8:	20f0      	movs	r0, #240	@ 0xf0
 80057da:	f7fe feaa 	bl	8004532 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330d      	adds	r3, #13
 80057e4:	3309      	adds	r3, #9
 80057e6:	2210      	movs	r2, #16
 80057e8:	492f      	ldr	r1, [pc, #188]	@ (80058a8 <optiga_cmd_open_application_handler+0x144>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 ff9d 	bl	800672a <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7e5b      	ldrb	r3, [r3, #25]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005808:	2208      	movs	r2, #8
 800580a:	4619      	mov	r1, r3
 800580c:	f000 ff8d 	bl	800672a <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <optiga_cmd_open_application_handler+0xb8>
 8005818:	2214      	movs	r2, #20
 800581a:	e000      	b.n	800581e <optiga_cmd_open_application_handler+0xba>
 800581c:	221c      	movs	r2, #28
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800582c:	2208      	movs	r2, #8
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f000 ff89 	bl	8006748 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800583a:	2b00      	cmp	r3, #0
 800583c:	d012      	beq.n	8005864 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800584a:	2208      	movs	r2, #8
 800584c:	4619      	mov	r1, r3
 800584e:	f000 fd9d 	bl	800638c <pal_os_datastore_write>
 8005852:	4603      	mov	r3, r0
 8005854:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005856:	89fb      	ldrh	r3, [r7, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 800585c:	f240 2302 	movw	r3, #514	@ 0x202
 8005860:	81fb      	strh	r3, [r7, #14]
                    break;
 8005862:	e01c      	b.n	800589e <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 8005864:	2300      	movs	r3, #0
 8005866:	81fb      	strh	r3, [r7, #14]
        break;
 8005868:	e019      	b.n	800589e <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	7c9b      	ldrb	r3, [r3, #18]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	7f5b      	ldrb	r3, [r3, #29]
 8005878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800587c:	b2da      	uxtb	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	775a      	strb	r2, [r3, #29]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	7f5a      	ldrb	r2, [r3, #29]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	775a      	strb	r2, [r3, #29]
                break;
 800588a:	e008      	b.n	800589e <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2233      	movs	r2, #51	@ 0x33
 8005894:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 8005896:	2300      	movs	r3, #0
 8005898:	81fb      	strh	r3, [r7, #14]
        break;
 800589a:	e000      	b.n	800589e <optiga_cmd_open_application_handler+0x13a>
                    break;
 800589c:	bf00      	nop
    }

    return (return_status);
 800589e:	89fb      	ldrh	r3, [r7, #14]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	0800ff0c 	.word	0x0800ff0c

080058ac <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af04      	add	r7, sp, #16
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	460b      	mov	r3, r1
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 80058ba:	7af9      	ldrb	r1, [r7, #11]
 80058bc:	23f0      	movs	r3, #240	@ 0xf0
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	4a04      	ldr	r2, [pc, #16]	@ (80058dc <optiga_cmd_open_application+0x30>)
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7fe fe5f 	bl	8004590 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08005765 	.word	0x08005765

080058e0 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80058ee:	f240 2302 	movw	r3, #514	@ 0x202
 80058f2:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80058f4:	2309      	movs	r3, #9
 80058f6:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 80058f8:	2381      	movs	r3, #129	@ 0x81
 80058fa:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7d9b      	ldrb	r3, [r3, #22]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d002      	beq.n	800590a <optiga_cmd_get_data_object_handler+0x2a>
 8005904:	2b03      	cmp	r3, #3
 8005906:	d06e      	beq.n	80059e6 <optiga_cmd_get_data_object_handler+0x106>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005908:	e0ec      	b.n	8005ae4 <optiga_cmd_get_data_object_handler+0x204>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800590a:	230a      	movs	r3, #10
 800590c:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800590e:	8a3b      	ldrh	r3, [r7, #16]
 8005910:	f240 6215 	movw	r2, #1557	@ 0x615
 8005914:	4293      	cmp	r3, r2
 8005916:	d907      	bls.n	8005928 <optiga_cmd_get_data_object_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005918:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800591c:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2200      	movs	r2, #0
 8005924:	801a      	strh	r2, [r3, #0]
                break;
 8005926:	e0dd      	b.n	8005ae4 <optiga_cmd_get_data_object_handler+0x204>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	8bbb      	ldrh	r3, [r7, #28]
 800592e:	3308      	adds	r3, #8
 8005930:	4413      	add	r3, r2
 8005932:	1d5a      	adds	r2, r3, #5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	891b      	ldrh	r3, [r3, #8]
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fa08 	bl	8005d50 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005940:	8bbb      	ldrh	r3, [r7, #28]
 8005942:	3302      	adds	r3, #2
 8005944:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	899b      	ldrh	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	89db      	ldrh	r3, [r3, #14]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f240 6211 	movw	r2, #1553	@ 0x611
 8005956:	4293      	cmp	r3, r2
 8005958:	bfa8      	it	ge
 800595a:	4613      	movge	r3, r2
 800595c:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	7c9b      	ldrb	r3, [r3, #18]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11f      	bne.n	80059a6 <optiga_cmd_get_data_object_handler+0xc6>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	8bbb      	ldrh	r3, [r7, #28]
 800596c:	3308      	adds	r3, #8
 800596e:	4413      	add	r3, r2
 8005970:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	895a      	ldrh	r2, [r3, #10]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800597a:	4413      	add	r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	4619      	mov	r1, r3
 8005980:	f000 f9e6 	bl	8005d50 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005984:	8bbb      	ldrh	r3, [r7, #28]
 8005986:	3302      	adds	r3, #2
 8005988:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	8bbb      	ldrh	r3, [r7, #28]
 8005990:	3308      	adds	r3, #8
 8005992:	4413      	add	r3, r2
 8005994:	3305      	adds	r3, #5
 8005996:	89fa      	ldrh	r2, [r7, #14]
 8005998:	4611      	mov	r1, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f9d8 	bl	8005d50 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80059a0:	8bbb      	ldrh	r3, [r7, #28]
 80059a2:	3302      	adds	r3, #2
 80059a4:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	891b      	ldrh	r3, [r3, #8]
 80059aa:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <optiga_cmd_get_data_object_handler+0xd6>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7e59      	ldrb	r1, [r3, #25]
 80059ba:	8bbb      	ldrh	r3, [r7, #28]
 80059bc:	3b09      	subs	r3, #9
 80059be:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 80059c6:	3305      	adds	r3, #5
 80059c8:	7ef8      	ldrb	r0, [r7, #27]
 80059ca:	f7fe fdb2 	bl	8004532 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	8bba      	ldrh	r2, [r7, #28]
 80059d4:	3a05      	subs	r2, #5
 80059d6:	b292      	uxth	r2, r2
 80059d8:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	89fa      	ldrh	r2, [r7, #14]
 80059de:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 80059e0:	2300      	movs	r3, #0
 80059e2:	83fb      	strh	r3, [r7, #30]
        break;
 80059e4:	e07e      	b.n	8005ae4 <optiga_cmd_get_data_object_handler+0x204>
            me->chaining_ongoing = FALSE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	7c9b      	ldrb	r3, [r3, #18]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d025      	beq.n	8005a42 <optiga_cmd_get_data_object_handler+0x162>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	89db      	ldrh	r3, [r3, #14]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <optiga_cmd_get_data_object_handler+0x13c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	7f5b      	ldrb	r3, [r3, #29]
 8005a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	775a      	strb	r2, [r3, #29]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7f5b      	ldrb	r3, [r3, #29]
 8005a10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	775a      	strb	r2, [r3, #29]
 8005a1a:	e00e      	b.n	8005a3a <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	7f5b      	ldrb	r3, [r3, #29]
 8005a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	775a      	strb	r2, [r3, #29]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7f5a      	ldrb	r2, [r3, #29]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 8005a3a:	f240 2302 	movw	r3, #514	@ 0x202
 8005a3e:	83fb      	strh	r3, [r7, #30]
        break;
 8005a40:	e04f      	b.n	8005ae2 <optiga_cmd_get_data_object_handler+0x202>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8c1b      	ldrh	r3, [r3, #32]
 8005a46:	f248 0208 	movw	r2, #32776	@ 0x8008
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d107      	bne.n	8005a5e <optiga_cmd_get_data_object_handler+0x17e>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	89d2      	ldrh	r2, [r2, #14]
 8005a56:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	83fb      	strh	r3, [r7, #30]
        break;
 8005a5c:	e041      	b.n	8005ae2 <optiga_cmd_get_data_object_handler+0x202>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	88db      	ldrh	r3, [r3, #6]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	899b      	ldrh	r3, [r3, #12]
 8005a6c:	8a7a      	ldrh	r2, [r7, #18]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d907      	bls.n	8005a82 <optiga_cmd_get_data_object_handler+0x1a2>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005a72:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005a76:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]
                    break;
 8005a80:	e030      	b.n	8005ae4 <optiga_cmd_get_data_object_handler+0x204>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	89d2      	ldrh	r2, [r2, #14]
 8005a8a:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005a92:	3309      	adds	r3, #9
 8005a94:	8a7a      	ldrh	r2, [r7, #18]
 8005a96:	4619      	mov	r1, r3
 8005a98:	f000 fe47 	bl	800672a <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	89da      	ldrh	r2, [r3, #14]
 8005aa0:	8a7b      	ldrh	r3, [r7, #18]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	8a1b      	ldrh	r3, [r3, #16]
 8005aae:	8a7a      	ldrh	r2, [r7, #18]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d305      	bcc.n	8005ac0 <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	89da      	ldrh	r2, [r3, #14]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d10b      	bne.n	8005ad8 <optiga_cmd_get_data_object_handler+0x1f8>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	89d2      	ldrh	r2, [r2, #14]
 8005ac8:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2200      	movs	r2, #0
 8005ace:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	821a      	strh	r2, [r3, #16]
 8005ad6:	e002      	b.n	8005ade <optiga_cmd_get_data_object_handler+0x1fe>
                    me->chaining_ongoing = TRUE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	761a      	strb	r2, [r3, #24]
                return_status = OPTIGA_LIB_SUCCESS;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	83fb      	strh	r3, [r7, #30]
        break;
 8005ae2:	bf00      	nop
    }

    return (return_status);
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af04      	add	r7, sp, #16
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	460b      	mov	r3, r1
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005afe:	7af9      	ldrb	r1, [r7, #11]
 8005b00:	2381      	movs	r3, #129	@ 0x81
 8005b02:	9302      	str	r3, [sp, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	2306      	movs	r3, #6
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	4a04      	ldr	r2, [pc, #16]	@ (8005b20 <optiga_cmd_get_data_object+0x30>)
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7fe fd3d 	bl	8004590 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	080058e1 	.word	0x080058e1

08005b24 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 8005b32:	4b0e      	ldr	r3, [pc, #56]	@ (8005b6c <optiga_comms_create+0x48>)
 8005b34:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	7c1b      	ldrb	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d110      	bne.n	8005b60 <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8005b3e:	f000 fab0 	bl	80060a2 <pal_init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
                break;
 8005b4c:	e008      	b.n	8005b60 <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	200004d8 	.word	0x200004d8

08005b70 <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	609a      	str	r2, [r3, #8]
    return (0);
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005b98:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005b9c:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8a6 	bl	8005cf0 <check_optiga_comms_state>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d122      	bne.n	8005bf0 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a10      	ldr	r2, [pc, #64]	@ (8005bfc <optiga_comms_open+0x6c>)
 8005bba:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	7d12      	ldrb	r2, [r2, #20]
 8005bc6:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fa ff48 	bl	8000a70 <ifx_i2c_open>
 8005be0:	4603      	mov	r3, r0
 8005be2:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005be4:	89fb      	ldrh	r3, [r7, #14]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005bf0:	89fb      	ldrh	r3, [r7, #14]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08005d25 	.word	0x08005d25

08005c00 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c10:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c14:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f86a 	bl	8005cf0 <check_optiga_comms_state>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d12c      	bne.n	8005c7c <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <optiga_comms_transceive+0x88>)
 8005c32:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	7c92      	ldrb	r2, [r2, #18]
 8005c3e:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	7cd2      	ldrb	r2, [r2, #19]
 8005c4a:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	7d12      	ldrb	r2, [r2, #20]
 8005c56:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6858      	ldr	r0, [r3, #4]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	f7fa ff3b 	bl	8000ae2 <ifx_i2c_transceive>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c70:	8afb      	ldrh	r3, [r7, #22]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c7c:	8afb      	ldrh	r3, [r7, #22]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	08005d25 	.word	0x08005d25

08005c8c <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c94:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c98:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f828 	bl	8005cf0 <check_optiga_comms_state>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11c      	bne.n	8005ce0 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <optiga_comms_close+0x60>)
 8005cb6:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	7d12      	ldrb	r2, [r2, #20]
 8005cc2:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa ff42 	bl	8000b54 <ifx_i2c_close>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	08005d25 	.word	0x08005d25

08005cf0 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005cf8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005cfc:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <check_optiga_comms_state+0x26>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7c5b      	ldrb	r3, [r3, #17]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d004      	beq.n	8005d16 <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005d12:	2300      	movs	r3, #0
 8005d14:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005d16:	89fb      	ldrh	r3, [r7, #14]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	887a      	ldrh	r2, [r7, #2]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	745a      	strb	r2, [r3, #17]
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	887a      	ldrh	r2, [r7, #2]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	0e1b      	lsrs	r3, r3, #24
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	0c1a      	lsrs	r2, r3, #16
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	0a1a      	lsrs	r2, r3, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3302      	adds	r3, #2
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3303      	adds	r3, #3
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	061a      	lsls	r2, r3, #24
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3302      	adds	r3, #2
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005dde:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	3103      	adds	r1, #3
 8005de4:	7809      	ldrb	r1, [r1, #0]
 8005de6:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	6992      	ldr	r2, [r2, #24]
 8005e18:	8879      	ldrh	r1, [r7, #2]
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4798      	blx	r3
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8005e34:	2200      	movs	r2, #0
 8005e36:	2101      	movs	r1, #1
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f804 	bl	8005e46 <optiga_util_set_comms_params>
    }
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
 8005e52:	4613      	mov	r3, r2
 8005e54:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d002      	beq.n	8005e62 <optiga_util_set_comms_params+0x1c>
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d005      	beq.n	8005e6c <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005e60:	e009      	b.n	8005e76 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	78ba      	ldrb	r2, [r7, #2]
 8005e66:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8005e6a:	e004      	b.n	8005e76 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	78ba      	ldrb	r2, [r7, #2]
 8005e70:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 8005e74:	bf00      	nop
        }
    }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d02b      	beq.n	8005ef4 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8005e9c:	2124      	movs	r1, #36	@ 0x24
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f000 fc2a 	bl	80066f8 <pal_os_calloc>
 8005ea4:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d025      	beq.n	8005ef8 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	490c      	ldr	r1, [pc, #48]	@ (8005f04 <optiga_util_create+0x80>)
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff faf1 	bl	80054bc <optiga_cmd_create>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d108      	bne.n	8005efa <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8005ee8:	6978      	ldr	r0, [r7, #20]
 8005eea:	f000 fc13 	bl	8006714 <pal_os_free>
            me = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e002      	b.n	8005efa <optiga_util_create+0x76>
            break;
 8005ef4:	bf00      	nop
 8005ef6:	e000      	b.n	8005efa <optiga_util_create+0x76>
            break;
 8005ef8:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 8005efa:	697b      	ldr	r3, [r7, #20]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08005dfb 	.word	0x08005dfb

08005f08 <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005f14:	f240 3302 	movw	r3, #770	@ 0x302
 8005f18:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <optiga_util_open_application+0x20>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005f28:	f240 3303 	movw	r3, #771	@ 0x303
 8005f2c:	81fb      	strh	r3, [r7, #14]
            break;
 8005f2e:	e03d      	b.n	8005fac <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8c1b      	ldrh	r3, [r3, #32]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d103      	bne.n	8005f40 <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005f38:	f240 3305 	movw	r3, #773	@ 0x305
 8005f3c:	81fb      	strh	r3, [r7, #14]
            break;
 8005f3e:	e035      	b.n	8005fac <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6958      	ldr	r0, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005f50:	2200      	movs	r2, #0
 8005f52:	4619      	mov	r1, r3
 8005f54:	f7fe fac8 	bl	80044e8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6958      	ldr	r0, [r3, #20]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005f62:	2201      	movs	r2, #1
 8005f64:	4619      	mov	r1, r3
 8005f66:	f7fe fabf 	bl	80044e8 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	2202      	movs	r2, #2
 8005f76:	2133      	movs	r1, #51	@ 0x33
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe fab5 	bl	80044e8 <optiga_cmd_set_shielded_connection_option>
 8005f7e:	e006      	b.n	8005f8e <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	2202      	movs	r2, #2
 8005f86:	2111      	movs	r1, #17
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe faad 	bl	80044e8 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	78f9      	ldrb	r1, [r7, #3]
 8005f94:	2200      	movs	r2, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fc88 	bl	80058ac <optiga_cmd_open_application>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff ff3a 	bl	8005e26 <optiga_util_reset_protection_level>

    return (return_value);
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	817b      	strh	r3, [r7, #10]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005fce:	f240 3302 	movw	r3, #770	@ 0x302
 8005fd2:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <optiga_util_read_data+0x32>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <optiga_util_read_data+0x32>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005fee:	f240 3303 	movw	r3, #771	@ 0x303
 8005ff2:	82fb      	strh	r3, [r7, #22]
            break;
 8005ff4:	e04d      	b.n	8006092 <optiga_util_read_data+0xd6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8c1b      	ldrh	r3, [r3, #32]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d103      	bne.n	8006006 <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005ffe:	f240 3305 	movw	r3, #773	@ 0x305
 8006002:	82fb      	strh	r3, [r7, #22]
            break;
 8006004:	e045      	b.n	8006092 <optiga_util_read_data+0xd6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2214      	movs	r2, #20
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fb96 	bl	8006748 <pal_os_memset>

        p_params->oid = optiga_oid;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	897a      	ldrh	r2, [r7, #10]
 8006020:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	893a      	ldrh	r2, [r7, #8]
 8006026:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2200      	movs	r2, #0
 800602c:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2200      	movs	r2, #0
 8006046:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2200      	movs	r2, #0
 800604c:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6958      	ldr	r0, [r3, #20]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006058:	2200      	movs	r2, #0
 800605a:	4619      	mov	r1, r3
 800605c:	f7fe fa44 	bl	80044e8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6958      	ldr	r0, [r3, #20]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800606a:	2201      	movs	r2, #1
 800606c:	4619      	mov	r1, r3
 800606e:	f7fe fa3b 	bl	80044e8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6958      	ldr	r0, [r3, #20]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	7c9b      	ldrb	r3, [r3, #18]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4619      	mov	r1, r3
 800607e:	f7ff fd37 	bl	8005af0 <optiga_cmd_get_data_object>
 8006082:	4603      	mov	r3, r0
 8006084:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006086:	8afb      	ldrh	r3, [r7, #22]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <optiga_util_read_data+0xd6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff fec7 	bl	8005e26 <optiga_util_reset_protection_level>

    return (return_value);
 8006098:	8afb      	ldrh	r3, [r7, #22]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 80060a2:	b480      	push	{r7}
 80060a4:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b087      	sub	sp, #28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	461a      	mov	r2, r3
 80060be:	460b      	mov	r3, r1
 80060c0:	817b      	strh	r3, [r7, #10]
 80060c2:	4613      	mov	r3, r2
 80060c4:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d012      	beq.n	80060f2 <pal_crypt_tls_prf_sha256+0x40>
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	82fb      	strh	r3, [r7, #22]
 80060d6:	e007      	b.n	80060e8 <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 80060d8:	8afb      	ldrh	r3, [r7, #22]
 80060da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060dc:	4413      	add	r3, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 80060e2:	8afb      	ldrh	r3, [r7, #22]
 80060e4:	3301      	adds	r3, #1
 80060e6:	82fb      	strh	r3, [r7, #22]
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	8afa      	ldrh	r2, [r7, #22]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d3f2      	bcc.n	80060d8 <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 80060fe:	b480      	push	{r7}
 8006100:	b087      	sub	sp, #28
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	82fb      	strh	r3, [r7, #22]
 8006112:	e00a      	b.n	800612a <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 8006114:	8afb      	ldrh	r3, [r7, #22]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	441a      	add	r2, r3
 800611a:	8afb      	ldrh	r3, [r7, #22]
 800611c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800611e:	440b      	add	r3, r1
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8006124:	8afb      	ldrh	r3, [r7, #22]
 8006126:	3301      	adds	r3, #1
 8006128:	82fb      	strh	r3, [r7, #22]
 800612a:	8afa      	ldrh	r2, [r7, #22]
 800612c:	8c3b      	ldrh	r3, [r7, #32]
 800612e:	429a      	cmp	r2, r3
 8006130:	d3f0      	bcc.n	8006114 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	82fb      	strh	r3, [r7, #22]
 8006154:	e00a      	b.n	800616c <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 8006156:	8afb      	ldrh	r3, [r7, #22]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	441a      	add	r2, r3
 800615c:	8afb      	ldrh	r3, [r7, #22]
 800615e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006160:	440b      	add	r3, r1
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8006166:	8afb      	ldrh	r3, [r7, #22]
 8006168:	3301      	adds	r3, #1
 800616a:	82fb      	strh	r3, [r7, #22]
 800616c:	8afa      	ldrh	r2, [r7, #22]
 800616e:	8c3b      	ldrh	r3, [r7, #32]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3f0      	bcc.n	8006156 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006192:	2201      	movs	r2, #1
 8006194:	4619      	mov	r1, r3
 8006196:	f003 fbdd 	bl	8009954 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80061b2:	2200      	movs	r2, #0
 80061b4:	4619      	mov	r1, r3
 80061b6:	f003 fbcd 	bl	8009954 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 80061cc:	4b08      	ldr	r3, [pc, #32]	@ (80061f0 <pal_i2c_acquire+0x2c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <pal_i2c_acquire+0x2c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3301      	adds	r3, #1
 80061da:	4a05      	ldr	r2, [pc, #20]	@ (80061f0 <pal_i2c_acquire+0x2c>)
 80061dc:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 80061e2:	2301      	movs	r3, #1
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	200011a4 	.word	0x200011a4

080061f4 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 80061fc:	4b04      	ldr	r3, [pc, #16]	@ (8006210 <pal_i2c_release+0x1c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	200011a4 	.word	0x200011a4

08006214 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8006214:	b590      	push	{r4, r7, lr}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006232:	887a      	ldrh	r2, [r7, #2]
 8006234:	4611      	mov	r1, r2
 8006236:	4618      	mov	r0, r3
 8006238:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff ffd8 	bl	80061f4 <pal_i2c_release>
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bd90      	pop	{r4, r7, pc}

0800624c <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af02      	add	r7, sp, #8
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006286:	2301      	movs	r3, #1
 8006288:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff ff9a 	bl	80061c4 <pal_i2c_acquire>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d120      	bne.n	80062d8 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006296:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <pal_i2c_write+0x78>)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	b299      	uxth	r1, r3
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062ae:	9200      	str	r2, [sp, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	f003 fd01 	bl	8009cb8 <HAL_I2C_Master_Transmit>
 80062b6:	4603      	mov	r3, r0
 80062b8:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 80062ba:	7d7b      	ldrb	r3, [r7, #21]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 80062c0:	2100      	movs	r1, #0
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7ff ffa6 	bl	8006214 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 80062c8:	2300      	movs	r3, #0
 80062ca:	82fb      	strh	r3, [r7, #22]
 80062cc:	e00a      	b.n	80062e4 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 80062ce:	2101      	movs	r1, #1
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff ff9f 	bl	8006214 <invoke_upper_layer_callback>
 80062d6:	e005      	b.n	80062e4 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80062d8:	2302      	movs	r3, #2
 80062da:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 80062dc:	2102      	movs	r1, #2
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff ff98 	bl	8006214 <invoke_upper_layer_callback>
    }

    return status;
 80062e4:	8afb      	ldrh	r3, [r7, #22]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200011a8 	.word	0x200011a8

080062f4 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006302:	2301      	movs	r3, #1
 8006304:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff ff5c 	bl	80061c4 <pal_i2c_acquire>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d120      	bne.n	8006354 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006312:	4a16      	ldr	r2, [pc, #88]	@ (800636c <pal_i2c_read+0x78>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	b299      	uxth	r1, r3
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800632a:	9200      	str	r2, [sp, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	f003 fdc1 	bl	8009eb4 <HAL_I2C_Master_Receive>
 8006332:	4603      	mov	r3, r0
 8006334:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006336:	7d7b      	ldrb	r3, [r7, #21]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 800633c:	2100      	movs	r1, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff68 	bl	8006214 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006344:	2300      	movs	r3, #0
 8006346:	82fb      	strh	r3, [r7, #22]
 8006348:	e00a      	b.n	8006360 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 800634a:	2101      	movs	r1, #1
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff ff61 	bl	8006214 <invoke_upper_layer_callback>
 8006352:	e005      	b.n	8006360 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006354:	2302      	movs	r3, #2
 8006356:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006358:	2102      	movs	r1, #2
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff ff5a 	bl	8006214 <invoke_upper_layer_callback>
    }

    return status;
 8006360:	8afb      	ldrh	r3, [r7, #22]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200011a8 	.word	0x200011a8

08006370 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	80fb      	strh	r3, [r7, #6]
 8006398:	4613      	mov	r3, r2
 800639a:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 800639c:	2301      	movs	r3, #1
 800639e:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 80063a4:	88fb      	ldrh	r3, [r7, #6]
 80063a6:	2b33      	cmp	r3, #51	@ 0x33
 80063a8:	d043      	beq.n	8006432 <pal_os_datastore_write+0xa6>
 80063aa:	2b33      	cmp	r3, #51	@ 0x33
 80063ac:	dc5e      	bgt.n	800646c <pal_os_datastore_write+0xe0>
 80063ae:	2b11      	cmp	r3, #17
 80063b0:	d002      	beq.n	80063b8 <pal_os_datastore_write+0x2c>
 80063b2:	2b22      	cmp	r3, #34	@ 0x22
 80063b4:	d020      	beq.n	80063f8 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 80063b6:	e059      	b.n	800646c <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80063b8:	88bb      	ldrh	r3, [r7, #4]
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d858      	bhi.n	8006470 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b299      	uxth	r1, r3
 80063c4:	7b7b      	ldrb	r3, [r7, #13]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	737a      	strb	r2, [r7, #13]
 80063ca:	461a      	mov	r2, r3
 80063cc:	b2c9      	uxtb	r1, r1
 80063ce:	4b2b      	ldr	r3, [pc, #172]	@ (800647c <pal_os_datastore_write+0xf0>)
 80063d0:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 80063d2:	7b7b      	ldrb	r3, [r7, #13]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	737a      	strb	r2, [r7, #13]
 80063d8:	461a      	mov	r2, r3
 80063da:	88bb      	ldrh	r3, [r7, #4]
 80063dc:	b2d9      	uxtb	r1, r3
 80063de:	4b27      	ldr	r3, [pc, #156]	@ (800647c <pal_os_datastore_write+0xf0>)
 80063e0:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 80063e2:	7b7b      	ldrb	r3, [r7, #13]
 80063e4:	4a25      	ldr	r2, [pc, #148]	@ (800647c <pal_os_datastore_write+0xf0>)
 80063e6:	4413      	add	r3, r2
 80063e8:	88ba      	ldrh	r2, [r7, #4]
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f008 fdc0 	bl	800ef72 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 80063f2:	2300      	movs	r3, #0
 80063f4:	81fb      	strh	r3, [r7, #14]
            break;
 80063f6:	e03b      	b.n	8006470 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 80063f8:	88bb      	ldrh	r3, [r7, #4]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	b299      	uxth	r1, r3
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	737a      	strb	r2, [r7, #13]
 8006404:	461a      	mov	r2, r3
 8006406:	b2c9      	uxtb	r1, r1
 8006408:	4b1d      	ldr	r3, [pc, #116]	@ (8006480 <pal_os_datastore_write+0xf4>)
 800640a:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 800640c:	7b7b      	ldrb	r3, [r7, #13]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	737a      	strb	r2, [r7, #13]
 8006412:	461a      	mov	r2, r3
 8006414:	88bb      	ldrh	r3, [r7, #4]
 8006416:	b2d9      	uxtb	r1, r3
 8006418:	4b19      	ldr	r3, [pc, #100]	@ (8006480 <pal_os_datastore_write+0xf4>)
 800641a:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 800641c:	7b7b      	ldrb	r3, [r7, #13]
 800641e:	4a18      	ldr	r2, [pc, #96]	@ (8006480 <pal_os_datastore_write+0xf4>)
 8006420:	4413      	add	r3, r2
 8006422:	88ba      	ldrh	r2, [r7, #4]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f008 fda3 	bl	800ef72 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 800642c:	2300      	movs	r3, #0
 800642e:	81fb      	strh	r3, [r7, #14]
            break;
 8006430:	e01f      	b.n	8006472 <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8006432:	88bb      	ldrh	r3, [r7, #4]
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	b299      	uxth	r1, r3
 8006438:	7b7b      	ldrb	r3, [r7, #13]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	737a      	strb	r2, [r7, #13]
 800643e:	461a      	mov	r2, r3
 8006440:	b2c9      	uxtb	r1, r1
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <pal_os_datastore_write+0xf8>)
 8006444:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8006446:	7b7b      	ldrb	r3, [r7, #13]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	737a      	strb	r2, [r7, #13]
 800644c:	461a      	mov	r2, r3
 800644e:	88bb      	ldrh	r3, [r7, #4]
 8006450:	b2d9      	uxtb	r1, r3
 8006452:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <pal_os_datastore_write+0xf8>)
 8006454:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8006456:	7b7b      	ldrb	r3, [r7, #13]
 8006458:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <pal_os_datastore_write+0xf8>)
 800645a:	4413      	add	r3, r2
 800645c:	88ba      	ldrh	r2, [r7, #4]
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f008 fd86 	bl	800ef72 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8006466:	2300      	movs	r3, #0
 8006468:	81fb      	strh	r3, [r7, #14]
            break;
 800646a:	e002      	b.n	8006472 <pal_os_datastore_write+0xe6>
            break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <pal_os_datastore_write+0xe6>
            break;
 8006470:	bf00      	nop
        }
    }
    return return_status;
 8006472:	89fb      	ldrh	r3, [r7, #14]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000510 	.word	0x20000510
 8006480:	200011ac 	.word	0x200011ac
 8006484:	200011f0 	.word	0x200011f0

08006488 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006496:	2301      	movs	r3, #1
 8006498:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 800649e:	89fb      	ldrh	r3, [r7, #14]
 80064a0:	2b33      	cmp	r3, #51	@ 0x33
 80064a2:	d049      	beq.n	8006538 <pal_os_datastore_read+0xb0>
 80064a4:	2b33      	cmp	r3, #51	@ 0x33
 80064a6:	dc67      	bgt.n	8006578 <pal_os_datastore_read+0xf0>
 80064a8:	2b11      	cmp	r3, #17
 80064aa:	d002      	beq.n	80064b2 <pal_os_datastore_read+0x2a>
 80064ac:	2b22      	cmp	r3, #34	@ 0x22
 80064ae:	d023      	beq.n	80064f8 <pal_os_datastore_read+0x70>
 80064b0:	e062      	b.n	8006578 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 80064b2:	7d7b      	ldrb	r3, [r7, #21]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	757a      	strb	r2, [r7, #21]
 80064b8:	461a      	mov	r2, r3
 80064ba:	4b34      	ldr	r3, [pc, #208]	@ (800658c <pal_os_datastore_read+0x104>)
 80064bc:	5c9b      	ldrb	r3, [r3, r2]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 80064c2:	7d7b      	ldrb	r3, [r7, #21]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	757a      	strb	r2, [r7, #21]
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b30      	ldr	r3, [pc, #192]	@ (800658c <pal_os_datastore_read+0x104>)
 80064cc:	5c9b      	ldrb	r3, [r3, r2]
 80064ce:	461a      	mov	r2, r3
 80064d0:	8a7b      	ldrh	r3, [r7, #18]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80064d6:	8a7b      	ldrh	r3, [r7, #18]
 80064d8:	2b40      	cmp	r3, #64	@ 0x40
 80064da:	d851      	bhi.n	8006580 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 80064dc:	7d7b      	ldrb	r3, [r7, #21]
 80064de:	4a2b      	ldr	r2, [pc, #172]	@ (800658c <pal_os_datastore_read+0x104>)
 80064e0:	4413      	add	r3, r2
 80064e2:	8a7a      	ldrh	r2, [r7, #18]
 80064e4:	4619      	mov	r1, r3
 80064e6:	68b8      	ldr	r0, [r7, #8]
 80064e8:	f008 fd43 	bl	800ef72 <memcpy>
                *p_buffer_length = data_length;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8a7a      	ldrh	r2, [r7, #18]
 80064f0:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 80064f2:	2300      	movs	r3, #0
 80064f4:	82fb      	strh	r3, [r7, #22]
            }
            break;
 80064f6:	e043      	b.n	8006580 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 80064f8:	7d7b      	ldrb	r3, [r7, #21]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	757a      	strb	r2, [r7, #21]
 80064fe:	461a      	mov	r2, r3
 8006500:	4b23      	ldr	r3, [pc, #140]	@ (8006590 <pal_os_datastore_read+0x108>)
 8006502:	5c9b      	ldrb	r3, [r3, r2]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006508:	7d7b      	ldrb	r3, [r7, #21]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	757a      	strb	r2, [r7, #21]
 800650e:	461a      	mov	r2, r3
 8006510:	4b1f      	ldr	r3, [pc, #124]	@ (8006590 <pal_os_datastore_read+0x108>)
 8006512:	5c9b      	ldrb	r3, [r3, r2]
 8006514:	461a      	mov	r2, r3
 8006516:	8a7b      	ldrh	r3, [r7, #18]
 8006518:	4313      	orrs	r3, r2
 800651a:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 800651c:	7d7b      	ldrb	r3, [r7, #21]
 800651e:	4a1c      	ldr	r2, [pc, #112]	@ (8006590 <pal_os_datastore_read+0x108>)
 8006520:	4413      	add	r3, r2
 8006522:	8a7a      	ldrh	r2, [r7, #18]
 8006524:	4619      	mov	r1, r3
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f008 fd23 	bl	800ef72 <memcpy>
            *p_buffer_length = data_length;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8a7a      	ldrh	r2, [r7, #18]
 8006530:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006532:	2300      	movs	r3, #0
 8006534:	82fb      	strh	r3, [r7, #22]
            break;
 8006536:	e024      	b.n	8006582 <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8006538:	7d7b      	ldrb	r3, [r7, #21]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	757a      	strb	r2, [r7, #21]
 800653e:	461a      	mov	r2, r3
 8006540:	4b14      	ldr	r3, [pc, #80]	@ (8006594 <pal_os_datastore_read+0x10c>)
 8006542:	5c9b      	ldrb	r3, [r3, r2]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8006548:	7d7b      	ldrb	r3, [r7, #21]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	757a      	strb	r2, [r7, #21]
 800654e:	461a      	mov	r2, r3
 8006550:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <pal_os_datastore_read+0x10c>)
 8006552:	5c9b      	ldrb	r3, [r3, r2]
 8006554:	461a      	mov	r2, r3
 8006556:	8a7b      	ldrh	r3, [r7, #18]
 8006558:	4313      	orrs	r3, r2
 800655a:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 800655c:	7d7b      	ldrb	r3, [r7, #21]
 800655e:	4a0d      	ldr	r2, [pc, #52]	@ (8006594 <pal_os_datastore_read+0x10c>)
 8006560:	4413      	add	r3, r2
 8006562:	8a7a      	ldrh	r2, [r7, #18]
 8006564:	4619      	mov	r1, r3
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f008 fd03 	bl	800ef72 <memcpy>
            *p_buffer_length = data_length;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8a7a      	ldrh	r2, [r7, #18]
 8006570:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006572:	2300      	movs	r3, #0
 8006574:	82fb      	strh	r3, [r7, #22]
            break;
 8006576:	e004      	b.n	8006582 <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	801a      	strh	r2, [r3, #0]
            break;
 800657e:	e000      	b.n	8006582 <pal_os_datastore_read+0xfa>
            break;
 8006580:	bf00      	nop
        }
    }

    return return_status;
 8006582:	8afb      	ldrh	r3, [r7, #22]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000510 	.word	0x20000510
 8006590:	200011ac 	.word	0x200011ac
 8006594:	200011f0 	.word	0x200011f0

08006598 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	7a1b      	ldrb	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 80065b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f82a 	bl	8006614 <pal_os_event_register_callback_oneshot>
    }
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	721a      	strb	r2, [r3, #8]
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <pal_os_event_create+0x20>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4804      	ldr	r0, [pc, #16]	@ (8006610 <pal_os_event_create+0x2c>)
 8006600:	f7ff ffca 	bl	8006598 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006604:	4b02      	ldr	r3, [pc, #8]	@ (8006610 <pal_os_event_create+0x2c>)
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200011fc 	.word	0x200011fc

08006614 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	4a0d      	ldr	r2, [pc, #52]	@ (800665c <pal_os_event_register_callback_oneshot+0x48>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 800663a:	f002 fb0f 	bl	8008c5c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4413      	add	r3, r2
 8006644:	4a06      	ldr	r2, [pc, #24]	@ (8006660 <pal_os_event_register_callback_oneshot+0x4c>)
 8006646:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8006648:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <pal_os_event_register_callback_oneshot+0x50>)
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 800664e:	4806      	ldr	r0, [pc, #24]	@ (8006668 <pal_os_event_register_callback_oneshot+0x54>)
 8006650:	f006 fd9c 	bl	800d18c <HAL_TIM_Base_Start_IT>
}
 8006654:	bf00      	nop
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	10624dd3 	.word	0x10624dd3
 8006660:	20001214 	.word	0x20001214
 8006664:	20001218 	.word	0x20001218
 8006668:	20000a84 	.word	0x20000a84

0800666c <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <pal_os_event_trigger_registered_callback+0x3c>)
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d011      	beq.n	800669e <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 800667a:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <pal_os_event_trigger_registered_callback+0x3c>)
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8006680:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <pal_os_event_trigger_registered_callback+0x3c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8006686:	4b08      	ldr	r3, [pc, #32]	@ (80066a8 <pal_os_event_trigger_registered_callback+0x3c>)
 8006688:	2200      	movs	r2, #0
 800668a:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <pal_os_event_trigger_registered_callback+0x3c>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 8006692:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <pal_os_event_trigger_registered_callback+0x40>)
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6838      	ldr	r0, [r7, #0]
 800669c:	4798      	blx	r3
    }
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200011fc 	.word	0x200011fc
 80066ac:	20001218 	.word	0x20001218

080066b0 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 80066b4:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <pal_os_event_timer_tick+0x24>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <pal_os_event_timer_tick+0x1e>
 80066bc:	f002 face 	bl	8008c5c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <pal_os_event_timer_tick+0x28>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d301      	bcc.n	80066ce <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 80066ca:	f7ff ffcf 	bl	800666c <pal_os_event_trigger_registered_callback>
    }
}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20001218 	.word	0x20001218
 80066d8:	20001214 	.word	0x20001214

080066dc <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 80066e0:	bf00      	nop
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 80066ea:	b480      	push	{r7}
 80066ec:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f008 f9d3 	bl	800eab0 <calloc>
 800670a:	4603      	mov	r3, r0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <pal_os_free>:

void pal_os_free(void * block)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
    free(block);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f008 f9e3 	bl	800eae8 <free>
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f008 fc19 	bl	800ef72 <memcpy>
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4619      	mov	r1, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f008 fbc3 	bl	800eee8 <memset>
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 800676e:	f002 fa75 	bl	8008c5c <HAL_GetTick>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}

08006778 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 800677c:	f002 fa6e 	bl	8008c5c <HAL_GetTick>
 8006780:	4603      	mov	r3, r0
 8006782:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006786:	fb02 f303 	mul.w	r3, r2, r3
}
 800678a:	4618      	mov	r0, r3
 800678c:	bd80      	pop	{r7, pc}

0800678e <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006796:	226c      	movs	r2, #108	@ 0x6c
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f008 fba4 	bl	800eee8 <memset>
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d118      	bne.n	80067f6 <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1d      	ldr	r2, [pc, #116]	@ (800683c <mbedtls_sha256_starts_ret+0x94>)
 80067c8:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006840 <mbedtls_sha256_starts_ret+0x98>)
 80067ce:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <mbedtls_sha256_starts_ret+0x9c>)
 80067d4:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <mbedtls_sha256_starts_ret+0xa0>)
 80067da:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <mbedtls_sha256_starts_ret+0xa4>)
 80067e0:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006850 <mbedtls_sha256_starts_ret+0xa8>)
 80067e6:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006854 <mbedtls_sha256_starts_ret+0xac>)
 80067ec:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a19      	ldr	r2, [pc, #100]	@ (8006858 <mbedtls_sha256_starts_ret+0xb0>)
 80067f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80067f4:	e017      	b.n	8006826 <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a18      	ldr	r2, [pc, #96]	@ (800685c <mbedtls_sha256_starts_ret+0xb4>)
 80067fa:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <mbedtls_sha256_starts_ret+0xb8>)
 8006800:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a17      	ldr	r2, [pc, #92]	@ (8006864 <mbedtls_sha256_starts_ret+0xbc>)
 8006806:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <mbedtls_sha256_starts_ret+0xc0>)
 800680c:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a16      	ldr	r2, [pc, #88]	@ (800686c <mbedtls_sha256_starts_ret+0xc4>)
 8006812:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a16      	ldr	r2, [pc, #88]	@ (8006870 <mbedtls_sha256_starts_ret+0xc8>)
 8006818:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a15      	ldr	r2, [pc, #84]	@ (8006874 <mbedtls_sha256_starts_ret+0xcc>)
 800681e:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <mbedtls_sha256_starts_ret+0xd0>)
 8006824:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	6a09e667 	.word	0x6a09e667
 8006840:	bb67ae85 	.word	0xbb67ae85
 8006844:	3c6ef372 	.word	0x3c6ef372
 8006848:	a54ff53a 	.word	0xa54ff53a
 800684c:	510e527f 	.word	0x510e527f
 8006850:	9b05688c 	.word	0x9b05688c
 8006854:	1f83d9ab 	.word	0x1f83d9ab
 8006858:	5be0cd19 	.word	0x5be0cd19
 800685c:	c1059ed8 	.word	0xc1059ed8
 8006860:	367cd507 	.word	0x367cd507
 8006864:	3070dd17 	.word	0x3070dd17
 8006868:	f70e5939 	.word	0xf70e5939
 800686c:	ffc00b31 	.word	0xffc00b31
 8006870:	68581511 	.word	0x68581511
 8006874:	64f98fa7 	.word	0x64f98fa7
 8006878:	befa4fa4 	.word	0xbefa4fa4

0800687c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800687c:	b490      	push	{r4, r7}
 800687e:	b0ce      	sub	sp, #312	@ 0x138
 8006880:	af00      	add	r7, sp, #0
 8006882:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006886:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800688a:	6018      	str	r0, [r3, #0]
 800688c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006890:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006894:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8006896:	2300      	movs	r3, #0
 8006898:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800689c:	e016      	b.n	80068cc <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 800689e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80068a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80068ac:	3202      	adds	r2, #2
 80068ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80068b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80068ba:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80068c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80068c6:	3301      	adds	r3, #1
 80068c8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80068cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80068d0:	2b07      	cmp	r3, #7
 80068d2:	d9e4      	bls.n	800689e <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80068d4:	2300      	movs	r3, #0
 80068d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80068da:	e03e      	b.n	800695a <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 80068dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80068e6:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	061a      	lsls	r2, r3, #24
 80068f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	3301      	adds	r3, #1
 80068fa:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80068fe:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006902:	6809      	ldr	r1, [r1, #0]
 8006904:	440b      	add	r3, r1
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	431a      	orrs	r2, r3
 800690c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	3302      	adds	r3, #2
 8006914:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006918:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800691c:	6809      	ldr	r1, [r1, #0]
 800691e:	440b      	add	r3, r1
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	4313      	orrs	r3, r2
 8006926:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800692a:	0092      	lsls	r2, r2, #2
 800692c:	3203      	adds	r2, #3
 800692e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006932:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006936:	6809      	ldr	r1, [r1, #0]
 8006938:	440a      	add	r2, r1
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	ea43 0102 	orr.w	r1, r3, r2
 8006940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006944:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006948:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800694c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8006950:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800695a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d9bc      	bls.n	80068dc <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8006962:	2300      	movs	r3, #0
 8006964:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006968:	f000 bcba 	b.w	80072e0 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800696c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006970:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800697a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006992:	4059      	eors	r1, r3
 8006994:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006998:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80069a2:	404b      	eors	r3, r1
 80069a4:	441a      	add	r2, r3
 80069a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80069ae:	6999      	ldr	r1, [r3, #24]
 80069b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80069b8:	6918      	ldr	r0, [r3, #16]
 80069ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80069c2:	695c      	ldr	r4, [r3, #20]
 80069c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	4063      	eors	r3, r4
 80069d0:	4003      	ands	r3, r0
 80069d2:	404b      	eors	r3, r1
 80069d4:	441a      	add	r2, r3
 80069d6:	49e0      	ldr	r1, [pc, #896]	@ (8006d58 <mbedtls_internal_sha256_process+0x4dc>)
 80069d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80069dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069e0:	441a      	add	r2, r3
 80069e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80069ea:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80069ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069f2:	4413      	add	r3, r2
 80069f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80069f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006a06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006a14:	405a      	eors	r2, r3
 8006a16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006a24:	405a      	eors	r2, r3
 8006a26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	4019      	ands	r1, r3
 8006a3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a44:	6898      	ldr	r0, [r3, #8]
 8006a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a4e:	681c      	ldr	r4, [r3, #0]
 8006a50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4323      	orrs	r3, r4
 8006a5c:	4003      	ands	r3, r0
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	4413      	add	r3, r2
 8006a62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006a66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006a74:	441a      	add	r2, r3
 8006a76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a7e:	60da      	str	r2, [r3, #12]
 8006a80:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a88:	441a      	add	r2, r3
 8006a8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a92:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8006a94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006aa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006aac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ab0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006aba:	4059      	eors	r1, r3
 8006abc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ac0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006aca:	404b      	eors	r3, r1
 8006acc:	441a      	add	r2, r3
 8006ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ad6:	6959      	ldr	r1, [r3, #20]
 8006ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ae0:	68d8      	ldr	r0, [r3, #12]
 8006ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ae6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006aea:	691c      	ldr	r4, [r3, #16]
 8006aec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006af0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	4063      	eors	r3, r4
 8006af8:	4003      	ands	r3, r0
 8006afa:	404b      	eors	r3, r1
 8006afc:	441a      	add	r2, r3
 8006afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b02:	3301      	adds	r3, #1
 8006b04:	4994      	ldr	r1, [pc, #592]	@ (8006d58 <mbedtls_internal_sha256_process+0x4dc>)
 8006b06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b0a:	441a      	add	r2, r3
 8006b0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006b1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006b24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006b32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006b40:	405a      	eors	r2, r3
 8006b42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006b50:	405a      	eors	r2, r3
 8006b52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4019      	ands	r1, r3
 8006b68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b70:	6858      	ldr	r0, [r3, #4]
 8006b72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b7a:	69dc      	ldr	r4, [r3, #28]
 8006b7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4323      	orrs	r3, r4
 8006b88:	4003      	ands	r3, r0
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ba0:	441a      	add	r2, r3
 8006ba2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ba6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006bb4:	441a      	add	r2, r3
 8006bb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006bbe:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8006bc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006be6:	4059      	eors	r1, r3
 8006be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006bf6:	404b      	eors	r3, r1
 8006bf8:	441a      	add	r2, r3
 8006bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c02:	6919      	ldr	r1, [r3, #16]
 8006c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c0c:	6898      	ldr	r0, [r3, #8]
 8006c0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c16:	68dc      	ldr	r4, [r3, #12]
 8006c18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	4063      	eors	r3, r4
 8006c24:	4003      	ands	r3, r0
 8006c26:	404b      	eors	r3, r1
 8006c28:	441a      	add	r2, r3
 8006c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c2e:	3302      	adds	r3, #2
 8006c30:	4949      	ldr	r1, [pc, #292]	@ (8006d58 <mbedtls_internal_sha256_process+0x4dc>)
 8006c32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c36:	441a      	add	r2, r3
 8006c38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c3c:	1c99      	adds	r1, r3, #2
 8006c3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006c46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006c50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006c5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006c6c:	405a      	eors	r2, r3
 8006c6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006c7c:	405a      	eors	r2, r3
 8006c7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c86:	6999      	ldr	r1, [r3, #24]
 8006c88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4019      	ands	r1, r3
 8006c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ca6:	699c      	ldr	r4, [r3, #24]
 8006ca8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	4323      	orrs	r3, r4
 8006cb4:	4003      	ands	r3, r0
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	4413      	add	r3, r2
 8006cba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ccc:	441a      	add	r2, r3
 8006cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cd6:	605a      	str	r2, [r3, #4]
 8006cd8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ce0:	441a      	add	r2, r3
 8006ce2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cea:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8006cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006d04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006d12:	4059      	eors	r1, r3
 8006d14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006d22:	404b      	eors	r3, r1
 8006d24:	441a      	add	r2, r3
 8006d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d2e:	68d9      	ldr	r1, [r3, #12]
 8006d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d38:	6858      	ldr	r0, [r3, #4]
 8006d3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d42:	689c      	ldr	r4, [r3, #8]
 8006d44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	4063      	eors	r3, r4
 8006d50:	4003      	ands	r3, r0
 8006d52:	404b      	eors	r3, r1
 8006d54:	441a      	add	r2, r3
 8006d56:	e001      	b.n	8006d5c <mbedtls_internal_sha256_process+0x4e0>
 8006d58:	0800ff1c 	.word	0x0800ff1c
 8006d5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006d60:	3303      	adds	r3, #3
 8006d62:	49e0      	ldr	r1, [pc, #896]	@ (80070e4 <mbedtls_internal_sha256_process+0x868>)
 8006d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d68:	441a      	add	r2, r3
 8006d6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006d6e:	1cd9      	adds	r1, r3, #3
 8006d70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006d82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006d90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006d9e:	405a      	eors	r2, r3
 8006da0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006da4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006dae:	405a      	eors	r2, r3
 8006db0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006db4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006db8:	6959      	ldr	r1, [r3, #20]
 8006dba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	4019      	ands	r1, r3
 8006dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dce:	69d8      	ldr	r0, [r3, #28]
 8006dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dd8:	695c      	ldr	r4, [r3, #20]
 8006dda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	4323      	orrs	r3, r4
 8006de6:	4003      	ands	r3, r0
 8006de8:	430b      	orrs	r3, r1
 8006dea:	4413      	add	r3, r2
 8006dec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006dfe:	441a      	add	r2, r3
 8006e00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e12:	441a      	add	r2, r3
 8006e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e1c:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8006e1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006e36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006e44:	4059      	eors	r1, r3
 8006e46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006e54:	404b      	eors	r3, r1
 8006e56:	441a      	add	r2, r3
 8006e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e60:	6899      	ldr	r1, [r3, #8]
 8006e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e74:	685c      	ldr	r4, [r3, #4]
 8006e76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4063      	eors	r3, r4
 8006e82:	4003      	ands	r3, r0
 8006e84:	404b      	eors	r3, r1
 8006e86:	441a      	add	r2, r3
 8006e88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4995      	ldr	r1, [pc, #596]	@ (80070e4 <mbedtls_internal_sha256_process+0x868>)
 8006e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006e94:	441a      	add	r2, r3
 8006e96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006e9a:	1d19      	adds	r1, r3, #4
 8006e9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ea0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ea4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006eae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006ebc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006eca:	405a      	eors	r2, r3
 8006ecc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ed0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006eda:	405a      	eors	r2, r3
 8006edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ee0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ee4:	6919      	ldr	r1, [r3, #16]
 8006ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	4019      	ands	r1, r3
 8006ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006efa:	6998      	ldr	r0, [r3, #24]
 8006efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f04:	691c      	ldr	r4, [r3, #16]
 8006f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	4323      	orrs	r3, r4
 8006f12:	4003      	ands	r3, r0
 8006f14:	430b      	orrs	r3, r1
 8006f16:	4413      	add	r3, r2
 8006f18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f2a:	441a      	add	r2, r3
 8006f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f34:	61da      	str	r2, [r3, #28]
 8006f36:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f3e:	441a      	add	r2, r3
 8006f40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f48:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8006f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006f62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006f70:	4059      	eors	r1, r3
 8006f72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006f80:	404b      	eors	r3, r1
 8006f82:	441a      	add	r2, r3
 8006f84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f8c:	6859      	ldr	r1, [r3, #4]
 8006f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f96:	69d8      	ldr	r0, [r3, #28]
 8006f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fa0:	681c      	ldr	r4, [r3, #0]
 8006fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	4063      	eors	r3, r4
 8006fae:	4003      	ands	r3, r0
 8006fb0:	404b      	eors	r3, r1
 8006fb2:	441a      	add	r2, r3
 8006fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fb8:	3305      	adds	r3, #5
 8006fba:	494a      	ldr	r1, [pc, #296]	@ (80070e4 <mbedtls_internal_sha256_process+0x868>)
 8006fbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fc6:	1d59      	adds	r1, r3, #5
 8006fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006fda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006fe8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006ff6:	405a      	eors	r2, r3
 8006ff8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ffc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007006:	405a      	eors	r2, r3
 8007008:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800700c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007010:	68d9      	ldr	r1, [r3, #12]
 8007012:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007016:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4019      	ands	r1, r3
 800701e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007026:	6958      	ldr	r0, [r3, #20]
 8007028:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800702c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007030:	68dc      	ldr	r4, [r3, #12]
 8007032:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007036:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	4323      	orrs	r3, r4
 800703e:	4003      	ands	r3, r0
 8007040:	430b      	orrs	r3, r1
 8007042:	4413      	add	r3, r2
 8007044:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800704c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007056:	441a      	add	r2, r3
 8007058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800705c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007060:	619a      	str	r2, [r3, #24]
 8007062:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007066:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800706a:	441a      	add	r2, r3
 800706c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007070:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007074:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8007076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800707a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800708e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007092:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800709c:	4059      	eors	r1, r3
 800709e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80070ac:	404b      	eors	r3, r1
 80070ae:	441a      	add	r2, r3
 80070b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070b8:	6819      	ldr	r1, [r3, #0]
 80070ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070c2:	6998      	ldr	r0, [r3, #24]
 80070c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070cc:	69dc      	ldr	r4, [r3, #28]
 80070ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4063      	eors	r3, r4
 80070da:	4003      	ands	r3, r0
 80070dc:	404b      	eors	r3, r1
 80070de:	441a      	add	r2, r3
 80070e0:	e002      	b.n	80070e8 <mbedtls_internal_sha256_process+0x86c>
 80070e2:	bf00      	nop
 80070e4:	0800ff1c 	.word	0x0800ff1c
 80070e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070ec:	3306      	adds	r3, #6
 80070ee:	4981      	ldr	r1, [pc, #516]	@ (80072f4 <mbedtls_internal_sha256_process+0xa78>)
 80070f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80070f4:	441a      	add	r2, r3
 80070f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070fa:	1d99      	adds	r1, r3, #6
 80070fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007100:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007104:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007108:	4413      	add	r3, r2
 800710a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800710e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007112:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800711c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007120:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	ea4f 3373 	mov.w	r3, r3, ror #13
 800712a:	405a      	eors	r2, r3
 800712c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007130:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800713a:	405a      	eors	r2, r3
 800713c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007144:	6899      	ldr	r1, [r3, #8]
 8007146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800714a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4019      	ands	r1, r3
 8007152:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800715a:	6918      	ldr	r0, [r3, #16]
 800715c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007160:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007164:	689c      	ldr	r4, [r3, #8]
 8007166:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800716a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4323      	orrs	r3, r4
 8007172:	4003      	ands	r3, r0
 8007174:	430b      	orrs	r3, r1
 8007176:	4413      	add	r3, r2
 8007178:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800717c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007180:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800718a:	441a      	add	r2, r3
 800718c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007194:	615a      	str	r2, [r3, #20]
 8007196:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800719a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800719e:	441a      	add	r2, r3
 80071a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071a8:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80071aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80071c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80071d0:	4059      	eors	r1, r3
 80071d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80071e0:	404b      	eors	r3, r1
 80071e2:	441a      	add	r2, r3
 80071e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ec:	69d9      	ldr	r1, [r3, #28]
 80071ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071f6:	6958      	ldr	r0, [r3, #20]
 80071f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007200:	699c      	ldr	r4, [r3, #24]
 8007202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007206:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	4063      	eors	r3, r4
 800720e:	4003      	ands	r3, r0
 8007210:	404b      	eors	r3, r1
 8007212:	441a      	add	r2, r3
 8007214:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007218:	3307      	adds	r3, #7
 800721a:	4936      	ldr	r1, [pc, #216]	@ (80072f4 <mbedtls_internal_sha256_process+0xa78>)
 800721c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007220:	441a      	add	r2, r3
 8007222:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007226:	1dd9      	adds	r1, r3, #7
 8007228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800722c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007234:	4413      	add	r3, r2
 8007236:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800723a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800723e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007248:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800724c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007256:	405a      	eors	r2, r3
 8007258:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800725c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007266:	405a      	eors	r2, r3
 8007268:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800726c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007270:	6859      	ldr	r1, [r3, #4]
 8007272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007276:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4019      	ands	r1, r3
 800727e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007282:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007286:	68d8      	ldr	r0, [r3, #12]
 8007288:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800728c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007290:	685c      	ldr	r4, [r3, #4]
 8007292:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007296:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4323      	orrs	r3, r4
 800729e:	4003      	ands	r3, r0
 80072a0:	430b      	orrs	r3, r1
 80072a2:	4413      	add	r3, r2
 80072a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80072a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072b6:	441a      	add	r2, r3
 80072b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072c0:	611a      	str	r2, [r3, #16]
 80072c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80072c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072ca:	441a      	add	r2, r3
 80072cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072d4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 80072d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80072da:	3308      	adds	r3, #8
 80072dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80072e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80072e4:	2b0f      	cmp	r3, #15
 80072e6:	f67f ab41 	bls.w	800696c <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 80072ea:	2310      	movs	r3, #16
 80072ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80072f0:	f000 bfd5 	b.w	800829e <mbedtls_internal_sha256_process+0x1a22>
 80072f4:	0800ff1c 	.word	0x0800ff1c
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80072f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007300:	69da      	ldr	r2, [r3, #28]
 8007302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007314:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800731e:	4059      	eors	r1, r3
 8007320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800732e:	404b      	eors	r3, r1
 8007330:	441a      	add	r2, r3
 8007332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007336:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800733a:	6999      	ldr	r1, [r3, #24]
 800733c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007344:	6918      	ldr	r0, [r3, #16]
 8007346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800734a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800734e:	695c      	ldr	r4, [r3, #20]
 8007350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	4063      	eors	r3, r4
 800735c:	4003      	ands	r3, r0
 800735e:	404b      	eors	r3, r1
 8007360:	441a      	add	r2, r3
 8007362:	49ec      	ldr	r1, [pc, #944]	@ (8007714 <mbedtls_internal_sha256_process+0xe98>)
 8007364:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800736c:	441a      	add	r2, r3
 800736e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007372:	1e99      	subs	r1, r3, #2
 8007374:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007378:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800737c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007380:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007384:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007388:	1e98      	subs	r0, r3, #2
 800738a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800738e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007392:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007396:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800739a:	4059      	eors	r1, r3
 800739c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80073a0:	1e98      	subs	r0, r3, #2
 80073a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80073aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80073ae:	0a9b      	lsrs	r3, r3, #10
 80073b0:	4059      	eors	r1, r3
 80073b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80073b6:	1fd8      	subs	r0, r3, #7
 80073b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80073c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80073c4:	4419      	add	r1, r3
 80073c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80073ca:	f1a3 000f 	sub.w	r0, r3, #15
 80073ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80073d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80073da:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80073de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80073e2:	f1a3 040f 	sub.w	r4, r3, #15
 80073e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80073ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80073f2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80073f6:	4058      	eors	r0, r3
 80073f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80073fc:	f1a3 040f 	sub.w	r4, r3, #15
 8007400:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007404:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007408:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800740c:	08db      	lsrs	r3, r3, #3
 800740e:	4043      	eors	r3, r0
 8007410:	4419      	add	r1, r3
 8007412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007416:	f1a3 0010 	sub.w	r0, r3, #16
 800741a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800741e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007422:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007426:	18c8      	adds	r0, r1, r3
 8007428:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800742c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007430:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007434:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8007438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800743c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007440:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007448:	4413      	add	r3, r2
 800744a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800744e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007452:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800745c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007460:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	ea4f 3373 	mov.w	r3, r3, ror #13
 800746a:	405a      	eors	r2, r3
 800746c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007470:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800747a:	405a      	eors	r2, r3
 800747c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007480:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007484:	6819      	ldr	r1, [r3, #0]
 8007486:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800748a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4019      	ands	r1, r3
 8007492:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007496:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800749a:	6898      	ldr	r0, [r3, #8]
 800749c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074a4:	681c      	ldr	r4, [r3, #0]
 80074a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	4323      	orrs	r3, r4
 80074b2:	4003      	ands	r3, r0
 80074b4:	430b      	orrs	r3, r1
 80074b6:	4413      	add	r3, r2
 80074b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80074bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074ca:	441a      	add	r2, r3
 80074cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80074da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074de:	441a      	add	r2, r3
 80074e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074e8:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80074ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007502:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007506:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007510:	4059      	eors	r1, r3
 8007512:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007520:	404b      	eors	r3, r1
 8007522:	441a      	add	r2, r3
 8007524:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007528:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800752c:	6959      	ldr	r1, [r3, #20]
 800752e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007536:	68d8      	ldr	r0, [r3, #12]
 8007538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800753c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007540:	691c      	ldr	r4, [r3, #16]
 8007542:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007546:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	4063      	eors	r3, r4
 800754e:	4003      	ands	r3, r0
 8007550:	404b      	eors	r3, r1
 8007552:	441a      	add	r2, r3
 8007554:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007558:	3301      	adds	r3, #1
 800755a:	496e      	ldr	r1, [pc, #440]	@ (8007714 <mbedtls_internal_sha256_process+0xe98>)
 800755c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007560:	441a      	add	r2, r3
 8007562:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007566:	1e59      	subs	r1, r3, #1
 8007568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800756c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007574:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007578:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800757c:	1e58      	subs	r0, r3, #1
 800757e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007586:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800758a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800758e:	4059      	eors	r1, r3
 8007590:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007594:	1e58      	subs	r0, r3, #1
 8007596:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800759a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800759e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075a2:	0a9b      	lsrs	r3, r3, #10
 80075a4:	4059      	eors	r1, r3
 80075a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075aa:	1f98      	subs	r0, r3, #6
 80075ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80075b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075b8:	4419      	add	r1, r3
 80075ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075be:	f1a3 000e 	sub.w	r0, r3, #14
 80075c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80075ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80075ce:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80075d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075d6:	f1a3 040e 	sub.w	r4, r3, #14
 80075da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80075e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80075e6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80075ea:	4058      	eors	r0, r3
 80075ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075f0:	f1a3 040e 	sub.w	r4, r3, #14
 80075f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80075fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007600:	08db      	lsrs	r3, r3, #3
 8007602:	4043      	eors	r3, r0
 8007604:	18c8      	adds	r0, r1, r3
 8007606:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800760a:	f1a3 010f 	sub.w	r1, r3, #15
 800760e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007616:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800761a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800761e:	3301      	adds	r3, #1
 8007620:	4408      	add	r0, r1
 8007622:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007626:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800762a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800762e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007632:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007636:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800763a:	4413      	add	r3, r2
 800763c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007640:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007644:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800764e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007652:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	ea4f 3373 	mov.w	r3, r3, ror #13
 800765c:	405a      	eors	r2, r3
 800765e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007662:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800766c:	405a      	eors	r2, r3
 800766e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007672:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800767c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4019      	ands	r1, r3
 8007684:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007688:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800768c:	6858      	ldr	r0, [r3, #4]
 800768e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007692:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007696:	69dc      	ldr	r4, [r3, #28]
 8007698:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800769c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4323      	orrs	r3, r4
 80076a4:	4003      	ands	r3, r0
 80076a6:	430b      	orrs	r3, r1
 80076a8:	4413      	add	r3, r2
 80076aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80076ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076bc:	441a      	add	r2, r3
 80076be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076c6:	609a      	str	r2, [r3, #8]
 80076c8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80076cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80076d0:	441a      	add	r2, r3
 80076d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076da:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80076dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076e4:	695a      	ldr	r2, [r3, #20]
 80076e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80076f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007702:	4059      	eors	r1, r3
 8007704:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007708:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007712:	e001      	b.n	8007718 <mbedtls_internal_sha256_process+0xe9c>
 8007714:	0800ff1c 	.word	0x0800ff1c
 8007718:	404b      	eors	r3, r1
 800771a:	441a      	add	r2, r3
 800771c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007720:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007724:	6919      	ldr	r1, [r3, #16]
 8007726:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800772a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800772e:	6898      	ldr	r0, [r3, #8]
 8007730:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007734:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007738:	68dc      	ldr	r4, [r3, #12]
 800773a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800773e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	4063      	eors	r3, r4
 8007746:	4003      	ands	r3, r0
 8007748:	404b      	eors	r3, r1
 800774a:	441a      	add	r2, r3
 800774c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007750:	3302      	adds	r3, #2
 8007752:	49ec      	ldr	r1, [pc, #944]	@ (8007b04 <mbedtls_internal_sha256_process+0x1288>)
 8007754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007758:	441a      	add	r2, r3
 800775a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800775e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007762:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007766:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800776a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800776e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007772:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007776:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800777a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800777e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007782:	4059      	eors	r1, r3
 8007784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007788:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800778c:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007790:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007794:	0a9b      	lsrs	r3, r3, #10
 8007796:	4059      	eors	r1, r3
 8007798:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800779c:	1f58      	subs	r0, r3, #5
 800779e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80077a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80077aa:	4419      	add	r1, r3
 80077ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077b0:	f1a3 000d 	sub.w	r0, r3, #13
 80077b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80077bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80077c0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80077c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077c8:	f1a3 040d 	sub.w	r4, r3, #13
 80077cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80077d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80077d8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80077dc:	4058      	eors	r0, r3
 80077de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077e2:	f1a3 040d 	sub.w	r4, r3, #13
 80077e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80077ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	4043      	eors	r3, r0
 80077f6:	18c8      	adds	r0, r1, r3
 80077f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077fc:	f1a3 010e 	sub.w	r1, r3, #14
 8007800:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007804:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007808:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800780c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007810:	3302      	adds	r3, #2
 8007812:	4408      	add	r0, r1
 8007814:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007818:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800781c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007820:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007824:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800782c:	4413      	add	r3, r2
 800782e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007832:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007836:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007840:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800784e:	405a      	eors	r2, r3
 8007850:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007854:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800785e:	405a      	eors	r2, r3
 8007860:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007864:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007868:	6999      	ldr	r1, [r3, #24]
 800786a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800786e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	4019      	ands	r1, r3
 8007876:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800787a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007884:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007888:	699c      	ldr	r4, [r3, #24]
 800788a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800788e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	4323      	orrs	r3, r4
 8007896:	4003      	ands	r3, r0
 8007898:	430b      	orrs	r3, r1
 800789a:	4413      	add	r3, r2
 800789c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80078a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80078ae:	441a      	add	r2, r3
 80078b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80078be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80078c2:	441a      	add	r2, r3
 80078c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078cc:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80078ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80078e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80078f4:	4059      	eors	r1, r3
 80078f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007904:	404b      	eors	r3, r1
 8007906:	441a      	add	r2, r3
 8007908:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800790c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007910:	68d9      	ldr	r1, [r3, #12]
 8007912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800791a:	6858      	ldr	r0, [r3, #4]
 800791c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007920:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007924:	689c      	ldr	r4, [r3, #8]
 8007926:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800792a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4063      	eors	r3, r4
 8007932:	4003      	ands	r3, r0
 8007934:	404b      	eors	r3, r1
 8007936:	441a      	add	r2, r3
 8007938:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800793c:	3303      	adds	r3, #3
 800793e:	4971      	ldr	r1, [pc, #452]	@ (8007b04 <mbedtls_internal_sha256_process+0x1288>)
 8007940:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007944:	441a      	add	r2, r3
 8007946:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007950:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007954:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007958:	ea4f 4173 	mov.w	r1, r3, ror #17
 800795c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007960:	1c58      	adds	r0, r3, #1
 8007962:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007966:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800796a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800796e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007972:	4059      	eors	r1, r3
 8007974:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007978:	1c58      	adds	r0, r3, #1
 800797a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800797e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007982:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007986:	0a9b      	lsrs	r3, r3, #10
 8007988:	4059      	eors	r1, r3
 800798a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800798e:	1f18      	subs	r0, r3, #4
 8007990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007994:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007998:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800799c:	4419      	add	r1, r3
 800799e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80079a2:	f1a3 000c 	sub.w	r0, r3, #12
 80079a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80079ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80079b2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80079b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80079ba:	f1a3 040c 	sub.w	r4, r3, #12
 80079be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80079c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80079ca:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80079ce:	4058      	eors	r0, r3
 80079d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80079d4:	f1a3 040c 	sub.w	r4, r3, #12
 80079d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80079e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80079e4:	08db      	lsrs	r3, r3, #3
 80079e6:	4043      	eors	r3, r0
 80079e8:	18c8      	adds	r0, r1, r3
 80079ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80079ee:	f1a3 010d 	sub.w	r1, r3, #13
 80079f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80079fa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80079fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a02:	3303      	adds	r3, #3
 8007a04:	4408      	add	r0, r1
 8007a06:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007a0a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007a0e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007a12:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007a16:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007a1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007a24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007a32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007a40:	405a      	eors	r2, r3
 8007a42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007a50:	405a      	eors	r2, r3
 8007a52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a5a:	6959      	ldr	r1, [r3, #20]
 8007a5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	4019      	ands	r1, r3
 8007a68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a70:	69d8      	ldr	r0, [r3, #28]
 8007a72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a7a:	695c      	ldr	r4, [r3, #20]
 8007a7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	4323      	orrs	r3, r4
 8007a88:	4003      	ands	r3, r0
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007a92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007aa0:	441a      	add	r2, r3
 8007aa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ab4:	441a      	add	r2, r3
 8007ab6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007abe:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8007ac0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ac4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ace:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007ae6:	4059      	eors	r1, r3
 8007ae8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007af6:	404b      	eors	r3, r1
 8007af8:	441a      	add	r2, r3
 8007afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b02:	e001      	b.n	8007b08 <mbedtls_internal_sha256_process+0x128c>
 8007b04:	0800ff1c 	.word	0x0800ff1c
 8007b08:	6899      	ldr	r1, [r3, #8]
 8007b0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b1c:	685c      	ldr	r4, [r3, #4]
 8007b1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4063      	eors	r3, r4
 8007b2a:	4003      	ands	r3, r0
 8007b2c:	404b      	eors	r3, r1
 8007b2e:	441a      	add	r2, r3
 8007b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b34:	3304      	adds	r3, #4
 8007b36:	49ec      	ldr	r1, [pc, #944]	@ (8007ee8 <mbedtls_internal_sha256_process+0x166c>)
 8007b38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007b3c:	441a      	add	r2, r3
 8007b3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b42:	1c99      	adds	r1, r3, #2
 8007b44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007b4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b50:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b58:	1c98      	adds	r0, r3, #2
 8007b5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007b62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007b66:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007b6a:	4059      	eors	r1, r3
 8007b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b70:	1c98      	adds	r0, r3, #2
 8007b72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007b7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007b7e:	0a9b      	lsrs	r3, r3, #10
 8007b80:	4059      	eors	r1, r3
 8007b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b86:	1ed8      	subs	r0, r3, #3
 8007b88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007b90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007b94:	4419      	add	r1, r3
 8007b96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b9a:	f1a3 000b 	sub.w	r0, r3, #11
 8007b9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ba2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ba6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007baa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007bae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bb2:	f1a3 040b 	sub.w	r4, r3, #11
 8007bb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007bc2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007bc6:	4058      	eors	r0, r3
 8007bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bcc:	f1a3 040b 	sub.w	r4, r3, #11
 8007bd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bd4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bd8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	4043      	eors	r3, r0
 8007be0:	18c8      	adds	r0, r1, r3
 8007be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007be6:	f1a3 010c 	sub.w	r1, r3, #12
 8007bea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bf2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4408      	add	r0, r1
 8007bfe:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c02:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007c06:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007c0a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c0e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007c12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c16:	4413      	add	r3, r2
 8007c18:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007c1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007c38:	405a      	eors	r2, r3
 8007c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007c48:	405a      	eors	r2, r3
 8007c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c52:	6919      	ldr	r1, [r3, #16]
 8007c54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	4019      	ands	r1, r3
 8007c60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c68:	6998      	ldr	r0, [r3, #24]
 8007c6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c72:	691c      	ldr	r4, [r3, #16]
 8007c74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	4323      	orrs	r3, r4
 8007c80:	4003      	ands	r3, r0
 8007c82:	430b      	orrs	r3, r1
 8007c84:	4413      	add	r3, r2
 8007c86:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007c98:	441a      	add	r2, r3
 8007c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ca2:	61da      	str	r2, [r3, #28]
 8007ca4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cac:	441a      	add	r2, r3
 8007cae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cb6:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8007cb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007cde:	4059      	eors	r1, r3
 8007ce0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ce4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007cee:	404b      	eors	r3, r1
 8007cf0:	441a      	add	r2, r3
 8007cf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cfa:	6859      	ldr	r1, [r3, #4]
 8007cfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d04:	69d8      	ldr	r0, [r3, #28]
 8007d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d0e:	681c      	ldr	r4, [r3, #0]
 8007d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4063      	eors	r3, r4
 8007d1c:	4003      	ands	r3, r0
 8007d1e:	404b      	eors	r3, r1
 8007d20:	441a      	add	r2, r3
 8007d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d26:	3305      	adds	r3, #5
 8007d28:	496f      	ldr	r1, [pc, #444]	@ (8007ee8 <mbedtls_internal_sha256_process+0x166c>)
 8007d2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d2e:	441a      	add	r2, r3
 8007d30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d34:	1cd9      	adds	r1, r3, #3
 8007d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d42:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d4a:	1cd8      	adds	r0, r3, #3
 8007d4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d58:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007d5c:	4059      	eors	r1, r3
 8007d5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d62:	1cd8      	adds	r0, r3, #3
 8007d64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d70:	0a9b      	lsrs	r3, r3, #10
 8007d72:	4059      	eors	r1, r3
 8007d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d78:	1e98      	subs	r0, r3, #2
 8007d7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d86:	4419      	add	r1, r3
 8007d88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d8c:	f1a3 000a 	sub.w	r0, r3, #10
 8007d90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007d9c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007da4:	f1a3 040a 	sub.w	r4, r3, #10
 8007da8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007db0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007db4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007db8:	4058      	eors	r0, r3
 8007dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dbe:	f1a3 040a 	sub.w	r4, r3, #10
 8007dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007dce:	08db      	lsrs	r3, r3, #3
 8007dd0:	4043      	eors	r3, r0
 8007dd2:	18c8      	adds	r0, r1, r3
 8007dd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dd8:	f1a3 010b 	sub.w	r1, r3, #11
 8007ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007de4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dec:	3305      	adds	r3, #5
 8007dee:	4408      	add	r0, r1
 8007df0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007df4:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007df8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007dfc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007e00:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007e1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007e2a:	405a      	eors	r2, r3
 8007e2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007e3a:	405a      	eors	r2, r3
 8007e3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e44:	68d9      	ldr	r1, [r3, #12]
 8007e46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	4019      	ands	r1, r3
 8007e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e5a:	6958      	ldr	r0, [r3, #20]
 8007e5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e64:	68dc      	ldr	r4, [r3, #12]
 8007e66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	4323      	orrs	r3, r4
 8007e72:	4003      	ands	r3, r0
 8007e74:	430b      	orrs	r3, r1
 8007e76:	4413      	add	r3, r2
 8007e78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007e7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007e8a:	441a      	add	r2, r3
 8007e8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e94:	619a      	str	r2, [r3, #24]
 8007e96:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007e9e:	441a      	add	r2, r3
 8007ea0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ea4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ea8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8007eaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007ed0:	4059      	eors	r1, r3
 8007ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007ee0:	404b      	eors	r3, r1
 8007ee2:	441a      	add	r2, r3
 8007ee4:	e002      	b.n	8007eec <mbedtls_internal_sha256_process+0x1670>
 8007ee6:	bf00      	nop
 8007ee8:	0800ff1c 	.word	0x0800ff1c
 8007eec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ef0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ef4:	6819      	ldr	r1, [r3, #0]
 8007ef6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007efa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007efe:	6998      	ldr	r0, [r3, #24]
 8007f00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f08:	69dc      	ldr	r4, [r3, #28]
 8007f0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4063      	eors	r3, r4
 8007f16:	4003      	ands	r3, r0
 8007f18:	404b      	eors	r3, r1
 8007f1a:	441a      	add	r2, r3
 8007f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f20:	3306      	adds	r3, #6
 8007f22:	49e3      	ldr	r1, [pc, #908]	@ (80082b0 <mbedtls_internal_sha256_process+0x1a34>)
 8007f24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f28:	441a      	add	r2, r3
 8007f2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f2e:	1d19      	adds	r1, r3, #4
 8007f30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f3c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007f40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f44:	1d18      	adds	r0, r3, #4
 8007f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f52:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007f56:	4059      	eors	r1, r3
 8007f58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f5c:	1d18      	adds	r0, r3, #4
 8007f5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f6a:	0a9b      	lsrs	r3, r3, #10
 8007f6c:	4059      	eors	r1, r3
 8007f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f72:	1e58      	subs	r0, r3, #1
 8007f74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f7c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f80:	4419      	add	r1, r3
 8007f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f86:	f1a3 0009 	sub.w	r0, r3, #9
 8007f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f96:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f9e:	f1a3 0409 	sub.w	r4, r3, #9
 8007fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007faa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007fae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007fb2:	4058      	eors	r0, r3
 8007fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fb8:	f1a3 0409 	sub.w	r4, r3, #9
 8007fbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fc4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007fc8:	08db      	lsrs	r3, r3, #3
 8007fca:	4043      	eors	r3, r0
 8007fcc:	18c8      	adds	r0, r1, r3
 8007fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fd2:	f1a3 010a 	sub.w	r1, r3, #10
 8007fd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fde:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007fe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fe6:	3306      	adds	r3, #6
 8007fe8:	4408      	add	r0, r1
 8007fea:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007fee:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ff2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007ff6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007ffa:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ffe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008002:	4413      	add	r3, r2
 8008004:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008008:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800800c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008016:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800801a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008024:	405a      	eors	r2, r3
 8008026:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800802a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008034:	405a      	eors	r2, r3
 8008036:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800803a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800803e:	6899      	ldr	r1, [r3, #8]
 8008040:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008044:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	4019      	ands	r1, r3
 800804c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008050:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008054:	6918      	ldr	r0, [r3, #16]
 8008056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800805a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800805e:	689c      	ldr	r4, [r3, #8]
 8008060:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008064:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	4323      	orrs	r3, r4
 800806c:	4003      	ands	r3, r0
 800806e:	430b      	orrs	r3, r1
 8008070:	4413      	add	r3, r2
 8008072:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800807a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800807e:	695a      	ldr	r2, [r3, #20]
 8008080:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008084:	441a      	add	r2, r3
 8008086:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800808a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800808e:	615a      	str	r2, [r3, #20]
 8008090:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008094:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008098:	441a      	add	r2, r3
 800809a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800809e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080a2:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80080a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80080bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80080ca:	4059      	eors	r1, r3
 80080cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80080da:	404b      	eors	r3, r1
 80080dc:	441a      	add	r2, r3
 80080de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080e6:	69d9      	ldr	r1, [r3, #28]
 80080e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080f0:	6958      	ldr	r0, [r3, #20]
 80080f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080fa:	699c      	ldr	r4, [r3, #24]
 80080fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008100:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	4063      	eors	r3, r4
 8008108:	4003      	ands	r3, r0
 800810a:	404b      	eors	r3, r1
 800810c:	441a      	add	r2, r3
 800810e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008112:	3307      	adds	r3, #7
 8008114:	4966      	ldr	r1, [pc, #408]	@ (80082b0 <mbedtls_internal_sha256_process+0x1a34>)
 8008116:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800811a:	441a      	add	r2, r3
 800811c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008120:	1d59      	adds	r1, r3, #5
 8008122:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008126:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800812a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800812e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008132:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008136:	1d58      	adds	r0, r3, #5
 8008138:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800813c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008140:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008144:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008148:	4059      	eors	r1, r3
 800814a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800814e:	1d58      	adds	r0, r3, #5
 8008150:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008154:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008158:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800815c:	0a9b      	lsrs	r3, r3, #10
 800815e:	4059      	eors	r1, r3
 8008160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008164:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008168:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800816c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008170:	4419      	add	r1, r3
 8008172:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008176:	f1a3 0008 	sub.w	r0, r3, #8
 800817a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800817e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008182:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008186:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800818a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800818e:	f1a3 0408 	sub.w	r4, r3, #8
 8008192:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008196:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800819a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800819e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80081a2:	4058      	eors	r0, r3
 80081a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081a8:	f1a3 0408 	sub.w	r4, r3, #8
 80081ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80081b8:	08db      	lsrs	r3, r3, #3
 80081ba:	4043      	eors	r3, r0
 80081bc:	18c8      	adds	r0, r1, r3
 80081be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081c2:	f1a3 0109 	sub.w	r1, r3, #9
 80081c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081ce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80081d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081d6:	3307      	adds	r3, #7
 80081d8:	4408      	add	r0, r1
 80081da:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80081de:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80081e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80081e6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80081ea:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80081ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081f2:	4413      	add	r3, r2
 80081f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80081f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008206:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800820a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008214:	405a      	eors	r2, r3
 8008216:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800821a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008224:	405a      	eors	r2, r3
 8008226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800822a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800822e:	6859      	ldr	r1, [r3, #4]
 8008230:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008234:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	4019      	ands	r1, r3
 800823c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008244:	68d8      	ldr	r0, [r3, #12]
 8008246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800824a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800824e:	685c      	ldr	r4, [r3, #4]
 8008250:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008254:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	4323      	orrs	r3, r4
 800825c:	4003      	ands	r3, r0
 800825e:	430b      	orrs	r3, r1
 8008260:	4413      	add	r3, r2
 8008262:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800826a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008274:	441a      	add	r2, r3
 8008276:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800827a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800827e:	611a      	str	r2, [r3, #16]
 8008280:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008288:	441a      	add	r2, r3
 800828a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800828e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008292:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8008294:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008298:	3308      	adds	r3, #8
 800829a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800829e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80082a4:	f67f a828 	bls.w	80072f8 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80082a8:	2300      	movs	r3, #0
 80082aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80082ae:	e023      	b.n	80082f8 <mbedtls_internal_sha256_process+0x1a7c>
 80082b0:	0800ff1c 	.word	0x0800ff1c
        ctx->state[i] += A[i];
 80082b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80082c2:	3202      	adds	r2, #2
 80082c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082d0:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80082d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082d8:	18d1      	adds	r1, r2, r3
 80082da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80082e8:	3202      	adds	r2, #2
 80082ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80082ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082f2:	3301      	adds	r3, #1
 80082f4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80082f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082fc:	2b07      	cmp	r3, #7
 80082fe:	d9d9      	bls.n	80082b4 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008308:	46bd      	mov	sp, r7
 800830a:	bc90      	pop	{r4, r7}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8008322:	2300      	movs	r3, #0
 8008324:	e065      	b.n	80083f2 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800832e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008336:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	441a      	add	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d904      	bls.n	8008360 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d034      	beq.n	80083d0 <mbedtls_sha256_update_ret+0xc0>
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	429a      	cmp	r2, r3
 800836c:	d330      	bcc.n	80083d0 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	4618      	mov	r0, r3
 800837e:	f006 fdf8 	bl	800ef72 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3328      	adds	r3, #40	@ 0x28
 8008386:	4619      	mov	r1, r3
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7fe fa77 	bl	800687c <mbedtls_internal_sha256_process>
 800838e:	6178      	str	r0, [r7, #20]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	e02b      	b.n	80083f2 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	4413      	add	r3, r2
 80083a0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	607b      	str	r3, [r7, #4]
        left = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 80083ae:	e00f      	b.n	80083d0 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7fe fa62 	bl	800687c <mbedtls_internal_sha256_process>
 80083b8:	6178      	str	r0, [r7, #20]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	e016      	b.n	80083f2 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3340      	adds	r3, #64	@ 0x40
 80083c8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3b40      	subs	r3, #64	@ 0x40
 80083ce:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80083d4:	d8ec      	bhi.n	80083b0 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f006 fdc1 	bl	800ef72 <memcpy>

    return( 0 );
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3720      	adds	r7, #32
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800840c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	617a      	str	r2, [r7, #20]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4413      	add	r3, r2
 8008418:	2280      	movs	r2, #128	@ 0x80
 800841a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b38      	cmp	r3, #56	@ 0x38
 8008422:	d80c      	bhi.n	800843e <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	18d0      	adds	r0, r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008434:	461a      	mov	r2, r3
 8008436:	2100      	movs	r1, #0
 8008438:	f006 fd56 	bl	800eee8 <memset>
 800843c:	e01e      	b.n	800847c <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	18d0      	adds	r0, r2, r3
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800844e:	461a      	mov	r2, r3
 8008450:	2100      	movs	r1, #0
 8008452:	f006 fd49 	bl	800eee8 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3328      	adds	r3, #40	@ 0x28
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fe fa0d 	bl	800687c <mbedtls_internal_sha256_process>
 8008462:	6138      	str	r0, [r7, #16]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	e128      	b.n	80086c0 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3328      	adds	r3, #40	@ 0x28
 8008472:	2238      	movs	r2, #56	@ 0x38
 8008474:	2100      	movs	r1, #0
 8008476:	4618      	mov	r0, r3
 8008478:	f006 fd36 	bl	800eee8 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	0e1b      	lsrs	r3, r3, #24
 8008498:	b2da      	uxtb	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	0e1b      	lsrs	r3, r3, #24
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	0a1b      	lsrs	r3, r3, #8
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3328      	adds	r3, #40	@ 0x28
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fe f9c0 	bl	800687c <mbedtls_internal_sha256_process>
 80084fc:	6138      	str	r0, [r7, #16]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	e0db      	b.n	80086c0 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	b2da      	uxtb	r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	0c1a      	lsrs	r2, r3, #16
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	3301      	adds	r3, #1
 800851e:	b2d2      	uxtb	r2, r2
 8008520:	701a      	strb	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	0a1a      	lsrs	r2, r3, #8
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	3302      	adds	r3, #2
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3303      	adds	r3, #3
 8008538:	b2d2      	uxtb	r2, r2
 800853a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	0e1a      	lsrs	r2, r3, #24
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	3304      	adds	r3, #4
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	0c1a      	lsrs	r2, r3, #16
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	3305      	adds	r3, #5
 8008554:	b2d2      	uxtb	r2, r2
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	0a1a      	lsrs	r2, r3, #8
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	3306      	adds	r3, #6
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	3307      	adds	r3, #7
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	0e1a      	lsrs	r2, r3, #24
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	0c1a      	lsrs	r2, r3, #16
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	3309      	adds	r3, #9
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	0a1a      	lsrs	r2, r3, #8
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	330a      	adds	r3, #10
 8008598:	b2d2      	uxtb	r2, r2
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	330b      	adds	r3, #11
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	0e1a      	lsrs	r2, r3, #24
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	330c      	adds	r3, #12
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	0c1a      	lsrs	r2, r3, #16
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	330d      	adds	r3, #13
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	0a1a      	lsrs	r2, r3, #8
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	330e      	adds	r3, #14
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	330f      	adds	r3, #15
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	0e1a      	lsrs	r2, r3, #24
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	3310      	adds	r3, #16
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	0c1a      	lsrs	r2, r3, #16
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	3311      	adds	r3, #17
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	0a1a      	lsrs	r2, r3, #8
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	3312      	adds	r3, #18
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	699a      	ldr	r2, [r3, #24]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	3313      	adds	r3, #19
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	0e1a      	lsrs	r2, r3, #24
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	3314      	adds	r3, #20
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	0c1a      	lsrs	r2, r3, #16
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	3315      	adds	r3, #21
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	0a1a      	lsrs	r2, r3, #8
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	3316      	adds	r3, #22
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69da      	ldr	r2, [r3, #28]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	3317      	adds	r3, #23
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	0e1a      	lsrs	r2, r3, #24
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	3318      	adds	r3, #24
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	0c1a      	lsrs	r2, r3, #16
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3319      	adds	r3, #25
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	0a1a      	lsrs	r2, r3, #8
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	331a      	adds	r3, #26
 8008670:	b2d2      	uxtb	r2, r2
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1a      	ldr	r2, [r3, #32]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	331b      	adds	r3, #27
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11a      	bne.n	80086be <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	0e1a      	lsrs	r2, r3, #24
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	331c      	adds	r3, #28
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	0c1a      	lsrs	r2, r3, #16
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	331d      	adds	r3, #29
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	0a1a      	lsrs	r2, r3, #8
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	331e      	adds	r3, #30
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	331f      	adds	r3, #31
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]

    return( 0 );
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	4b10      	ldr	r3, [pc, #64]	@ (8008714 <HAL_MspInit+0x4c>)
 80086d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008714 <HAL_MspInit+0x4c>)
 80086d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80086de:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <HAL_MspInit+0x4c>)
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e6:	607b      	str	r3, [r7, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <HAL_MspInit+0x4c>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	4a08      	ldr	r2, [pc, #32]	@ (8008714 <HAL_MspInit+0x4c>)
 80086f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80086fa:	4b06      	ldr	r3, [pc, #24]	@ (8008714 <HAL_MspInit+0x4c>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800

08008718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	@ 0x28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a1d      	ldr	r2, [pc, #116]	@ (80087ac <HAL_I2C_MspInit+0x94>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d134      	bne.n	80087a4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800873a:	2300      	movs	r3, #0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	4b1c      	ldr	r3, [pc, #112]	@ (80087b0 <HAL_I2C_MspInit+0x98>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008742:	4a1b      	ldr	r2, [pc, #108]	@ (80087b0 <HAL_I2C_MspInit+0x98>)
 8008744:	f043 0302 	orr.w	r3, r3, #2
 8008748:	6313      	str	r3, [r2, #48]	@ 0x30
 800874a:	4b19      	ldr	r3, [pc, #100]	@ (80087b0 <HAL_I2C_MspInit+0x98>)
 800874c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008756:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800875a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800875c:	2312      	movs	r3, #18
 800875e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008764:	2303      	movs	r3, #3
 8008766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008768:	2304      	movs	r3, #4
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4619      	mov	r1, r3
 8008772:	4810      	ldr	r0, [pc, #64]	@ (80087b4 <HAL_I2C_MspInit+0x9c>)
 8008774:	f000 ff52 	bl	800961c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <HAL_I2C_MspInit+0x98>)
 800877e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008780:	4a0b      	ldr	r2, [pc, #44]	@ (80087b0 <HAL_I2C_MspInit+0x98>)
 8008782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008786:	6413      	str	r3, [r2, #64]	@ 0x40
 8008788:	4b09      	ldr	r3, [pc, #36]	@ (80087b0 <HAL_I2C_MspInit+0x98>)
 800878a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	2020      	movs	r0, #32
 800879a:	f000 fb80 	bl	8008e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800879e:	2020      	movs	r0, #32
 80087a0:	f000 fb99 	bl	8008ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80087a4:	bf00      	nop
 80087a6:	3728      	adds	r7, #40	@ 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	40005400 	.word	0x40005400
 80087b0:	40023800 	.word	0x40023800
 80087b4:	40020400 	.word	0x40020400

080087b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c8:	d115      	bne.n	80087f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008800 <HAL_TIM_Base_MspInit+0x48>)
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008800 <HAL_TIM_Base_MspInit+0x48>)
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80087da:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <HAL_TIM_Base_MspInit+0x48>)
 80087dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	201c      	movs	r0, #28
 80087ec:	f000 fb57 	bl	8008e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80087f0:	201c      	movs	r0, #28
 80087f2:	f000 fb70 	bl	8008ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	40023800 	.word	0x40023800

08008804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	@ 0x28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800880c:	f107 0314 	add.w	r3, r7, #20
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	605a      	str	r2, [r3, #4]
 8008816:	609a      	str	r2, [r3, #8]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1d      	ldr	r2, [pc, #116]	@ (8008898 <HAL_UART_MspInit+0x94>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d133      	bne.n	800888e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	4b1c      	ldr	r3, [pc, #112]	@ (800889c <HAL_UART_MspInit+0x98>)
 800882c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882e:	4a1b      	ldr	r2, [pc, #108]	@ (800889c <HAL_UART_MspInit+0x98>)
 8008830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008834:	6413      	str	r3, [r2, #64]	@ 0x40
 8008836:	4b19      	ldr	r3, [pc, #100]	@ (800889c <HAL_UART_MspInit+0x98>)
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800883e:	613b      	str	r3, [r7, #16]
 8008840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	4b15      	ldr	r3, [pc, #84]	@ (800889c <HAL_UART_MspInit+0x98>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884a:	4a14      	ldr	r2, [pc, #80]	@ (800889c <HAL_UART_MspInit+0x98>)
 800884c:	f043 0301 	orr.w	r3, r3, #1
 8008850:	6313      	str	r3, [r2, #48]	@ 0x30
 8008852:	4b12      	ldr	r3, [pc, #72]	@ (800889c <HAL_UART_MspInit+0x98>)
 8008854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800885e:	230c      	movs	r3, #12
 8008860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008862:	2302      	movs	r3, #2
 8008864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008866:	2300      	movs	r3, #0
 8008868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800886a:	2300      	movs	r3, #0
 800886c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800886e:	2307      	movs	r3, #7
 8008870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008872:	f107 0314 	add.w	r3, r7, #20
 8008876:	4619      	mov	r1, r3
 8008878:	4809      	ldr	r0, [pc, #36]	@ (80088a0 <HAL_UART_MspInit+0x9c>)
 800887a:	f000 fecf 	bl	800961c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800887e:	2200      	movs	r2, #0
 8008880:	2100      	movs	r1, #0
 8008882:	2026      	movs	r0, #38	@ 0x26
 8008884:	f000 fb0b 	bl	8008e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008888:	2026      	movs	r0, #38	@ 0x26
 800888a:	f000 fb24 	bl	8008ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800888e:	bf00      	nop
 8008890:	3728      	adds	r7, #40	@ 0x28
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	40004400 	.word	0x40004400
 800889c:	40023800 	.word	0x40023800
 80088a0:	40020000 	.word	0x40020000

080088a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <NMI_Handler+0x4>

080088ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <HardFault_Handler+0x4>

080088b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <MemManage_Handler+0x4>

080088bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <BusFault_Handler+0x4>

080088c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <UsageFault_Handler+0x4>

080088cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088d0:	bf00      	nop
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088da:	b480      	push	{r7}
 80088dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088de:	bf00      	nop
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088ec:	bf00      	nop
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088fa:	f000 f99b 	bl	8008c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088fe:	bf00      	nop
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008908:	4802      	ldr	r0, [pc, #8]	@ (8008914 <TIM2_IRQHandler+0x10>)
 800890a:	f004 fca1 	bl	800d250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800890e:	bf00      	nop
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000a84 	.word	0x20000a84

08008918 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800891c:	4802      	ldr	r0, [pc, #8]	@ (8008928 <I2C1_EV_IRQHandler+0x10>)
 800891e:	f001 fe29 	bl	800a574 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008922:	bf00      	nop
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000a30 	.word	0x20000a30

0800892c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008930:	4802      	ldr	r0, [pc, #8]	@ (800893c <I2C1_ER_IRQHandler+0x10>)
 8008932:	f001 ff72 	bl	800a81a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008936:	bf00      	nop
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000a30 	.word	0x20000a30

08008940 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008944:	4802      	ldr	r0, [pc, #8]	@ (8008950 <USART2_IRQHandler+0x10>)
 8008946:	f005 f977 	bl	800dc38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800894a:	bf00      	nop
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20000acc 	.word	0x20000acc

08008954 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008958:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800895c:	f001 f82e 	bl	80099bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008960:	bf00      	nop
 8008962:	bd80      	pop	{r7, pc}

08008964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	e00a      	b.n	800898c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008976:	f3af 8000 	nop.w
 800897a:	4601      	mov	r1, r0
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	60ba      	str	r2, [r7, #8]
 8008982:	b2ca      	uxtb	r2, r1
 8008984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	3301      	adds	r3, #1
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	dbf0      	blt.n	8008976 <_read+0x12>
  }

  return len;
 8008994:	687b      	ldr	r3, [r7, #4]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e009      	b.n	80089c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	60ba      	str	r2, [r7, #8]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fb f9af 	bl	8003d1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	3301      	adds	r3, #1
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	dbf1      	blt.n	80089b0 <_write+0x12>
  }
  return len;
 80089cc:	687b      	ldr	r3, [r7, #4]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <_close>:

int _close(int file)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80089fe:	605a      	str	r2, [r3, #4]
  return 0;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <_isatty>:

int _isatty(int file)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008a16:	2301      	movs	r3, #1
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a48:	4a14      	ldr	r2, [pc, #80]	@ (8008a9c <_sbrk+0x5c>)
 8008a4a:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <_sbrk+0x60>)
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a54:	4b13      	ldr	r3, [pc, #76]	@ (8008aa4 <_sbrk+0x64>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a5c:	4b11      	ldr	r3, [pc, #68]	@ (8008aa4 <_sbrk+0x64>)
 8008a5e:	4a12      	ldr	r2, [pc, #72]	@ (8008aa8 <_sbrk+0x68>)
 8008a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a62:	4b10      	ldr	r3, [pc, #64]	@ (8008aa4 <_sbrk+0x64>)
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4413      	add	r3, r2
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d207      	bcs.n	8008a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a70:	f006 fa52 	bl	800ef18 <__errno>
 8008a74:	4603      	mov	r3, r0
 8008a76:	220c      	movs	r2, #12
 8008a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a7e:	e009      	b.n	8008a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008a80:	4b08      	ldr	r3, [pc, #32]	@ (8008aa4 <_sbrk+0x64>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008a86:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <_sbrk+0x64>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	4a05      	ldr	r2, [pc, #20]	@ (8008aa4 <_sbrk+0x64>)
 8008a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20018000 	.word	0x20018000
 8008aa0:	00000400 	.word	0x00000400
 8008aa4:	2000121c 	.word	0x2000121c
 8008aa8:	20001390 	.word	0x20001390

08008aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <SystemInit+0x20>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab6:	4a05      	ldr	r2, [pc, #20]	@ (8008acc <SystemInit+0x20>)
 8008ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ac0:	bf00      	nop
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	e000ed00 	.word	0xe000ed00

08008ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008b08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008ad4:	f7ff ffea 	bl	8008aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008ad8:	480c      	ldr	r0, [pc, #48]	@ (8008b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008ada:	490d      	ldr	r1, [pc, #52]	@ (8008b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008adc:	4a0d      	ldr	r2, [pc, #52]	@ (8008b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ae0:	e002      	b.n	8008ae8 <LoopCopyDataInit>

08008ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ae6:	3304      	adds	r3, #4

08008ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008aec:	d3f9      	bcc.n	8008ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008aee:	4a0a      	ldr	r2, [pc, #40]	@ (8008b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008af0:	4c0a      	ldr	r4, [pc, #40]	@ (8008b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008af4:	e001      	b.n	8008afa <LoopFillZerobss>

08008af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008af8:	3204      	adds	r2, #4

08008afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008afc:	d3fb      	bcc.n	8008af6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8008afe:	f006 fa11 	bl	800ef24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b02:	f7fb fa83 	bl	800400c <main>
  bx  lr    
 8008b06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008b08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b10:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8008b14:	08010078 	.word	0x08010078
  ldr r2, =_sbss
 8008b18:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 8008b1c:	20001390 	.word	0x20001390

08008b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b20:	e7fe      	b.n	8008b20 <ADC_IRQHandler>
	...

08008b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b28:	4b0e      	ldr	r3, [pc, #56]	@ (8008b64 <HAL_Init+0x40>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b64 <HAL_Init+0x40>)
 8008b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b34:	4b0b      	ldr	r3, [pc, #44]	@ (8008b64 <HAL_Init+0x40>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a0a      	ldr	r2, [pc, #40]	@ (8008b64 <HAL_Init+0x40>)
 8008b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b40:	4b08      	ldr	r3, [pc, #32]	@ (8008b64 <HAL_Init+0x40>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a07      	ldr	r2, [pc, #28]	@ (8008b64 <HAL_Init+0x40>)
 8008b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f000 f99b 	bl	8008e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b52:	2000      	movs	r0, #0
 8008b54:	f000 f83e 	bl	8008bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008b58:	f7ff fdb6 	bl	80086c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40023c00 	.word	0x40023c00

08008b68 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8008b6c:	4b11      	ldr	r3, [pc, #68]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b6e:	4a12      	ldr	r2, [pc, #72]	@ (8008bb8 <HAL_DeInit+0x50>)
 8008b70:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008b72:	4b10      	ldr	r3, [pc, #64]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8008b78:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b7a:	4a10      	ldr	r2, [pc, #64]	@ (8008bbc <HAL_DeInit+0x54>)
 8008b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8008b84:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b86:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc0 <HAL_DeInit+0x58>)
 8008b88:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8008b90:	4b08      	ldr	r3, [pc, #32]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b92:	2280      	movs	r2, #128	@ 0x80
 8008b94:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8008b96:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8008b9c:	4b05      	ldr	r3, [pc, #20]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ba2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8008ba4:	4b03      	ldr	r3, [pc, #12]	@ (8008bb4 <HAL_DeInit+0x4c>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8008baa:	f000 f80b 	bl	8008bc4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	10e2c80f 	.word	0x10e2c80f
 8008bbc:	00077931 	.word	0x00077931
 8008bc0:	0060109f 	.word	0x0060109f

08008bc4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8008bc8:	bf00      	nop
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008bdc:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <HAL_InitTick+0x54>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4b12      	ldr	r3, [pc, #72]	@ (8008c2c <HAL_InitTick+0x58>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f981 	bl	8008efa <HAL_SYSTICK_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e00e      	b.n	8008c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b0f      	cmp	r3, #15
 8008c06:	d80a      	bhi.n	8008c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c08:	2200      	movs	r2, #0
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c10:	f000 f945 	bl	8008e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c14:	4a06      	ldr	r2, [pc, #24]	@ (8008c30 <HAL_InitTick+0x5c>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e000      	b.n	8008c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20000554 	.word	0x20000554
 8008c2c:	2000055c 	.word	0x2000055c
 8008c30:	20000558 	.word	0x20000558

08008c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c38:	4b06      	ldr	r3, [pc, #24]	@ (8008c54 <HAL_IncTick+0x20>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <HAL_IncTick+0x24>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4413      	add	r3, r2
 8008c44:	4a04      	ldr	r2, [pc, #16]	@ (8008c58 <HAL_IncTick+0x24>)
 8008c46:	6013      	str	r3, [r2, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	2000055c 	.word	0x2000055c
 8008c58:	20001220 	.word	0x20001220

08008c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c60:	4b03      	ldr	r3, [pc, #12]	@ (8008c70 <HAL_GetTick+0x14>)
 8008c62:	681b      	ldr	r3, [r3, #0]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20001220 	.word	0x20001220

08008c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c7c:	f7ff ffee 	bl	8008c5c <HAL_GetTick>
 8008c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c8c:	d005      	beq.n	8008c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb8 <HAL_Delay+0x44>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c9a:	bf00      	nop
 8008c9c:	f7ff ffde 	bl	8008c5c <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d8f7      	bhi.n	8008c9c <HAL_Delay+0x28>
  {
  }
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	2000055c 	.word	0x2000055c

08008cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <__NVIC_SetPriorityGrouping+0x44>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008cd8:	4013      	ands	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cee:	4a04      	ldr	r2, [pc, #16]	@ (8008d00 <__NVIC_SetPriorityGrouping+0x44>)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	60d3      	str	r3, [r2, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	e000ed00 	.word	0xe000ed00

08008d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d08:	4b04      	ldr	r3, [pc, #16]	@ (8008d1c <__NVIC_GetPriorityGrouping+0x18>)
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	0a1b      	lsrs	r3, r3, #8
 8008d0e:	f003 0307 	and.w	r3, r3, #7
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	e000ed00 	.word	0xe000ed00

08008d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	db0b      	blt.n	8008d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	f003 021f 	and.w	r2, r3, #31
 8008d38:	4907      	ldr	r1, [pc, #28]	@ (8008d58 <__NVIC_EnableIRQ+0x38>)
 8008d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	2001      	movs	r0, #1
 8008d42:	fa00 f202 	lsl.w	r2, r0, r2
 8008d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	e000e100 	.word	0xe000e100

08008d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	db0a      	blt.n	8008d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	490c      	ldr	r1, [pc, #48]	@ (8008da8 <__NVIC_SetPriority+0x4c>)
 8008d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7a:	0112      	lsls	r2, r2, #4
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	440b      	add	r3, r1
 8008d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d84:	e00a      	b.n	8008d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	4908      	ldr	r1, [pc, #32]	@ (8008dac <__NVIC_SetPriority+0x50>)
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	3b04      	subs	r3, #4
 8008d94:	0112      	lsls	r2, r2, #4
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	440b      	add	r3, r1
 8008d9a:	761a      	strb	r2, [r3, #24]
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	e000e100 	.word	0xe000e100
 8008dac:	e000ed00 	.word	0xe000ed00

08008db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b089      	sub	sp, #36	@ 0x24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f1c3 0307 	rsb	r3, r3, #7
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	bf28      	it	cs
 8008dce:	2304      	movcs	r3, #4
 8008dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	2b06      	cmp	r3, #6
 8008dd8:	d902      	bls.n	8008de0 <NVIC_EncodePriority+0x30>
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	3b03      	subs	r3, #3
 8008dde:	e000      	b.n	8008de2 <NVIC_EncodePriority+0x32>
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	fa02 f303 	lsl.w	r3, r2, r3
 8008dee:	43da      	mvns	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	401a      	ands	r2, r3
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008df8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008e02:	43d9      	mvns	r1, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e08:	4313      	orrs	r3, r2
         );
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3724      	adds	r7, #36	@ 0x24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
	...

08008e18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008e1c:	f3bf 8f4f 	dsb	sy
}
 8008e20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008e22:	4b06      	ldr	r3, [pc, #24]	@ (8008e3c <__NVIC_SystemReset+0x24>)
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008e2a:	4904      	ldr	r1, [pc, #16]	@ (8008e3c <__NVIC_SystemReset+0x24>)
 8008e2c:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <__NVIC_SystemReset+0x28>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e32:	f3bf 8f4f 	dsb	sy
}
 8008e36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008e38:	bf00      	nop
 8008e3a:	e7fd      	b.n	8008e38 <__NVIC_SystemReset+0x20>
 8008e3c:	e000ed00 	.word	0xe000ed00
 8008e40:	05fa0004 	.word	0x05fa0004

08008e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e54:	d301      	bcc.n	8008e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e56:	2301      	movs	r3, #1
 8008e58:	e00f      	b.n	8008e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e84 <SysTick_Config+0x40>)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e62:	210f      	movs	r1, #15
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e68:	f7ff ff78 	bl	8008d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e6c:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <SysTick_Config+0x40>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e72:	4b04      	ldr	r3, [pc, #16]	@ (8008e84 <SysTick_Config+0x40>)
 8008e74:	2207      	movs	r2, #7
 8008e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	e000e010 	.word	0xe000e010

08008e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff ff13 	bl	8008cbc <__NVIC_SetPriorityGrouping>
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008eb0:	f7ff ff28 	bl	8008d04 <__NVIC_GetPriorityGrouping>
 8008eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	68b9      	ldr	r1, [r7, #8]
 8008eba:	6978      	ldr	r0, [r7, #20]
 8008ebc:	f7ff ff78 	bl	8008db0 <NVIC_EncodePriority>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ff47 	bl	8008d5c <__NVIC_SetPriority>
}
 8008ece:	bf00      	nop
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	4603      	mov	r3, r0
 8008ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ff1b 	bl	8008d20 <__NVIC_EnableIRQ>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008ef6:	f7ff ff8f 	bl	8008e18 <__NVIC_SystemReset>

08008efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff ff9e 	bl	8008e44 <SysTick_Config>
 8008f08:	4603      	mov	r3, r0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008f20:	f7ff fe9c 	bl	8008c5c <HAL_GetTick>
 8008f24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d008      	beq.n	8008f44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2280      	movs	r2, #128	@ 0x80
 8008f36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e052      	b.n	8008fea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 0216 	bic.w	r2, r2, #22
 8008f52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	695a      	ldr	r2, [r3, #20]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <HAL_DMA_Abort+0x62>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0208 	bic.w	r2, r2, #8
 8008f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0201 	bic.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008f94:	e013      	b.n	8008fbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008f96:	f7ff fe61 	bl	8008c5c <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b05      	cmp	r3, #5
 8008fa2:	d90c      	bls.n	8008fbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2203      	movs	r2, #3
 8008fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e015      	b.n	8008fea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e4      	bne.n	8008f96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fd0:	223f      	movs	r2, #63	@ 0x3f
 8008fd2:	409a      	lsls	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d004      	beq.n	8009010 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2280      	movs	r2, #128	@ 0x80
 800900a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e00c      	b.n	800902a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2205      	movs	r2, #5
 8009014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009044:	b2db      	uxtb	r3, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009062:	4b23      	ldr	r3, [pc, #140]	@ (80090f0 <HAL_FLASH_Program+0x9c>)
 8009064:	7e1b      	ldrb	r3, [r3, #24]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_FLASH_Program+0x1a>
 800906a:	2302      	movs	r3, #2
 800906c:	e03b      	b.n	80090e6 <HAL_FLASH_Program+0x92>
 800906e:	4b20      	ldr	r3, [pc, #128]	@ (80090f0 <HAL_FLASH_Program+0x9c>)
 8009070:	2201      	movs	r2, #1
 8009072:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009074:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009078:	f000 f870 	bl	800915c <FLASH_WaitForLastOperation>
 800907c:	4603      	mov	r3, r0
 800907e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d12b      	bne.n	80090de <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d105      	bne.n	8009098 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800908c:	783b      	ldrb	r3, [r7, #0]
 800908e:	4619      	mov	r1, r3
 8009090:	68b8      	ldr	r0, [r7, #8]
 8009092:	f000 f91b 	bl	80092cc <FLASH_Program_Byte>
 8009096:	e016      	b.n	80090c6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d105      	bne.n	80090aa <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800909e:	883b      	ldrh	r3, [r7, #0]
 80090a0:	4619      	mov	r1, r3
 80090a2:	68b8      	ldr	r0, [r7, #8]
 80090a4:	f000 f8ee 	bl	8009284 <FLASH_Program_HalfWord>
 80090a8:	e00d      	b.n	80090c6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d105      	bne.n	80090bc <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	4619      	mov	r1, r3
 80090b4:	68b8      	ldr	r0, [r7, #8]
 80090b6:	f000 f8c3 	bl	8009240 <FLASH_Program_Word>
 80090ba:	e004      	b.n	80090c6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80090bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090c0:	68b8      	ldr	r0, [r7, #8]
 80090c2:	f000 f88b 	bl	80091dc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80090ca:	f000 f847 	bl	800915c <FLASH_WaitForLastOperation>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80090d2:	4b08      	ldr	r3, [pc, #32]	@ (80090f4 <HAL_FLASH_Program+0xa0>)
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	4a07      	ldr	r2, [pc, #28]	@ (80090f4 <HAL_FLASH_Program+0xa0>)
 80090d8:	f023 0301 	bic.w	r3, r3, #1
 80090dc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80090de:	4b04      	ldr	r3, [pc, #16]	@ (80090f0 <HAL_FLASH_Program+0x9c>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	761a      	strb	r2, [r3, #24]

  return status;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20001224 	.word	0x20001224
 80090f4:	40023c00 	.word	0x40023c00

080090f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009102:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <HAL_FLASH_Unlock+0x38>)
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	da0b      	bge.n	8009122 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800910a:	4b09      	ldr	r3, [pc, #36]	@ (8009130 <HAL_FLASH_Unlock+0x38>)
 800910c:	4a09      	ldr	r2, [pc, #36]	@ (8009134 <HAL_FLASH_Unlock+0x3c>)
 800910e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009110:	4b07      	ldr	r3, [pc, #28]	@ (8009130 <HAL_FLASH_Unlock+0x38>)
 8009112:	4a09      	ldr	r2, [pc, #36]	@ (8009138 <HAL_FLASH_Unlock+0x40>)
 8009114:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009116:	4b06      	ldr	r3, [pc, #24]	@ (8009130 <HAL_FLASH_Unlock+0x38>)
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da01      	bge.n	8009122 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009122:	79fb      	ldrb	r3, [r7, #7]
}
 8009124:	4618      	mov	r0, r3
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	40023c00 	.word	0x40023c00
 8009134:	45670123 	.word	0x45670123
 8009138:	cdef89ab 	.word	0xcdef89ab

0800913c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009140:	4b05      	ldr	r3, [pc, #20]	@ (8009158 <HAL_FLASH_Lock+0x1c>)
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	4a04      	ldr	r2, [pc, #16]	@ (8009158 <HAL_FLASH_Lock+0x1c>)
 8009146:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800914a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	40023c00 	.word	0x40023c00

0800915c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009168:	4b1a      	ldr	r3, [pc, #104]	@ (80091d4 <FLASH_WaitForLastOperation+0x78>)
 800916a:	2200      	movs	r2, #0
 800916c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800916e:	f7ff fd75 	bl	8008c5c <HAL_GetTick>
 8009172:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8009174:	e010      	b.n	8009198 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800917c:	d00c      	beq.n	8009198 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d007      	beq.n	8009194 <FLASH_WaitForLastOperation+0x38>
 8009184:	f7ff fd6a 	bl	8008c5c <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d201      	bcs.n	8009198 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e019      	b.n	80091cc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8009198:	4b0f      	ldr	r3, [pc, #60]	@ (80091d8 <FLASH_WaitForLastOperation+0x7c>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e8      	bne.n	8009176 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80091a4:	4b0c      	ldr	r3, [pc, #48]	@ (80091d8 <FLASH_WaitForLastOperation+0x7c>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80091b0:	4b09      	ldr	r3, [pc, #36]	@ (80091d8 <FLASH_WaitForLastOperation+0x7c>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80091b6:	4b08      	ldr	r3, [pc, #32]	@ (80091d8 <FLASH_WaitForLastOperation+0x7c>)
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80091c2:	f000 f8a5 	bl	8009310 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e000      	b.n	80091cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80091ca:	2300      	movs	r3, #0

}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20001224 	.word	0x20001224
 80091d8:	40023c00 	.word	0x40023c00

080091dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80091e8:	4b14      	ldr	r3, [pc, #80]	@ (800923c <FLASH_Program_DoubleWord+0x60>)
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	4a13      	ldr	r2, [pc, #76]	@ (800923c <FLASH_Program_DoubleWord+0x60>)
 80091ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80091f4:	4b11      	ldr	r3, [pc, #68]	@ (800923c <FLASH_Program_DoubleWord+0x60>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a10      	ldr	r2, [pc, #64]	@ (800923c <FLASH_Program_DoubleWord+0x60>)
 80091fa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80091fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009200:	4b0e      	ldr	r3, [pc, #56]	@ (800923c <FLASH_Program_DoubleWord+0x60>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4a0d      	ldr	r2, [pc, #52]	@ (800923c <FLASH_Program_DoubleWord+0x60>)
 8009206:	f043 0301 	orr.w	r3, r3, #1
 800920a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009212:	f3bf 8f6f 	isb	sy
}
 8009216:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8009218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	000a      	movs	r2, r1
 8009226:	2300      	movs	r3, #0
 8009228:	68f9      	ldr	r1, [r7, #12]
 800922a:	3104      	adds	r1, #4
 800922c:	4613      	mov	r3, r2
 800922e:	600b      	str	r3, [r1, #0]
}
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	40023c00 	.word	0x40023c00

08009240 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800924a:	4b0d      	ldr	r3, [pc, #52]	@ (8009280 <FLASH_Program_Word+0x40>)
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	4a0c      	ldr	r2, [pc, #48]	@ (8009280 <FLASH_Program_Word+0x40>)
 8009250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009254:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009256:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <FLASH_Program_Word+0x40>)
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	4a09      	ldr	r2, [pc, #36]	@ (8009280 <FLASH_Program_Word+0x40>)
 800925c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009260:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009262:	4b07      	ldr	r3, [pc, #28]	@ (8009280 <FLASH_Program_Word+0x40>)
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	4a06      	ldr	r2, [pc, #24]	@ (8009280 <FLASH_Program_Word+0x40>)
 8009268:	f043 0301 	orr.w	r3, r3, #1
 800926c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	40023c00 	.word	0x40023c00

08009284 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009290:	4b0d      	ldr	r3, [pc, #52]	@ (80092c8 <FLASH_Program_HalfWord+0x44>)
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	4a0c      	ldr	r2, [pc, #48]	@ (80092c8 <FLASH_Program_HalfWord+0x44>)
 8009296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800929a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <FLASH_Program_HalfWord+0x44>)
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	4a09      	ldr	r2, [pc, #36]	@ (80092c8 <FLASH_Program_HalfWord+0x44>)
 80092a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <FLASH_Program_HalfWord+0x44>)
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	4a06      	ldr	r2, [pc, #24]	@ (80092c8 <FLASH_Program_HalfWord+0x44>)
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	887a      	ldrh	r2, [r7, #2]
 80092b8:	801a      	strh	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40023c00 	.word	0x40023c00

080092cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092d8:	4b0c      	ldr	r3, [pc, #48]	@ (800930c <FLASH_Program_Byte+0x40>)
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	4a0b      	ldr	r2, [pc, #44]	@ (800930c <FLASH_Program_Byte+0x40>)
 80092de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80092e4:	4b09      	ldr	r3, [pc, #36]	@ (800930c <FLASH_Program_Byte+0x40>)
 80092e6:	4a09      	ldr	r2, [pc, #36]	@ (800930c <FLASH_Program_Byte+0x40>)
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80092ec:	4b07      	ldr	r3, [pc, #28]	@ (800930c <FLASH_Program_Byte+0x40>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	4a06      	ldr	r2, [pc, #24]	@ (800930c <FLASH_Program_Byte+0x40>)
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	701a      	strb	r2, [r3, #0]
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40023c00 	.word	0x40023c00

08009310 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8009310:	b480      	push	{r7}
 8009312:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009314:	4b2f      	ldr	r3, [pc, #188]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009320:	4b2d      	ldr	r3, [pc, #180]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f043 0310 	orr.w	r3, r3, #16
 8009328:	4a2b      	ldr	r2, [pc, #172]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 800932a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800932c:	4b29      	ldr	r3, [pc, #164]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 800932e:	2210      	movs	r2, #16
 8009330:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009332:	4b28      	ldr	r3, [pc, #160]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d008      	beq.n	8009350 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800933e:	4b26      	ldr	r3, [pc, #152]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f043 0308 	orr.w	r3, r3, #8
 8009346:	4a24      	ldr	r2, [pc, #144]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 8009348:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800934a:	4b22      	ldr	r3, [pc, #136]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 800934c:	2220      	movs	r2, #32
 800934e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009350:	4b20      	ldr	r3, [pc, #128]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	d008      	beq.n	800936e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800935c:	4b1e      	ldr	r3, [pc, #120]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	f043 0304 	orr.w	r3, r3, #4
 8009364:	4a1c      	ldr	r2, [pc, #112]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 8009366:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009368:	4b1a      	ldr	r3, [pc, #104]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 800936a:	2240      	movs	r2, #64	@ 0x40
 800936c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800936e:	4b19      	ldr	r3, [pc, #100]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009376:	2b00      	cmp	r3, #0
 8009378:	d008      	beq.n	800938c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800937a:	4b17      	ldr	r3, [pc, #92]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	f043 0302 	orr.w	r3, r3, #2
 8009382:	4a15      	ldr	r2, [pc, #84]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 8009384:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009386:	4b13      	ldr	r3, [pc, #76]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 8009388:	2280      	movs	r2, #128	@ 0x80
 800938a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800938c:	4b11      	ldr	r3, [pc, #68]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8009398:	4b0f      	ldr	r3, [pc, #60]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 80093a2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80093a4:	4b0b      	ldr	r3, [pc, #44]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 80093a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80093aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80093ac:	4b09      	ldr	r3, [pc, #36]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d008      	beq.n	80093ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80093b8:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	f043 0320 	orr.w	r3, r3, #32
 80093c0:	4a05      	ldr	r2, [pc, #20]	@ (80093d8 <FLASH_SetErrorCode+0xc8>)
 80093c2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80093c4:	4b03      	ldr	r3, [pc, #12]	@ (80093d4 <FLASH_SetErrorCode+0xc4>)
 80093c6:	2202      	movs	r2, #2
 80093c8:	60da      	str	r2, [r3, #12]
  }
}
 80093ca:	bf00      	nop
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	40023c00 	.word	0x40023c00
 80093d8:	20001224 	.word	0x20001224

080093dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80093ea:	4b31      	ldr	r3, [pc, #196]	@ (80094b0 <HAL_FLASHEx_Erase+0xd4>)
 80093ec:	7e1b      	ldrb	r3, [r3, #24]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_FLASHEx_Erase+0x1a>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e058      	b.n	80094a8 <HAL_FLASHEx_Erase+0xcc>
 80093f6:	4b2e      	ldr	r3, [pc, #184]	@ (80094b0 <HAL_FLASHEx_Erase+0xd4>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009400:	f7ff feac 	bl	800915c <FLASH_WaitForLastOperation>
 8009404:	4603      	mov	r3, r0
 8009406:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d148      	bne.n	80094a0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009414:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d115      	bne.n	800944a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	b2da      	uxtb	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f000 f844 	bl	80094b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009430:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009434:	f7ff fe92 	bl	800915c <FLASH_WaitForLastOperation>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800943c:	4b1d      	ldr	r3, [pc, #116]	@ (80094b4 <HAL_FLASHEx_Erase+0xd8>)
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	4a1c      	ldr	r2, [pc, #112]	@ (80094b4 <HAL_FLASHEx_Erase+0xd8>)
 8009442:	f023 0304 	bic.w	r3, r3, #4
 8009446:	6113      	str	r3, [r2, #16]
 8009448:	e028      	b.n	800949c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	60bb      	str	r3, [r7, #8]
 8009450:	e01c      	b.n	800948c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4619      	mov	r1, r3
 800945a:	68b8      	ldr	r0, [r7, #8]
 800945c:	f000 f850 	bl	8009500 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009460:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009464:	f7ff fe7a 	bl	800915c <FLASH_WaitForLastOperation>
 8009468:	4603      	mov	r3, r0
 800946a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800946c:	4b11      	ldr	r3, [pc, #68]	@ (80094b4 <HAL_FLASHEx_Erase+0xd8>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	4a10      	ldr	r2, [pc, #64]	@ (80094b4 <HAL_FLASHEx_Erase+0xd8>)
 8009472:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8009476:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	601a      	str	r2, [r3, #0]
          break;
 8009484:	e00a      	b.n	800949c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3301      	adds	r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	4413      	add	r3, r2
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	d3da      	bcc.n	8009452 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800949c:	f000 f878 	bl	8009590 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80094a0:	4b03      	ldr	r3, [pc, #12]	@ (80094b0 <HAL_FLASHEx_Erase+0xd4>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	761a      	strb	r2, [r3, #24]

  return status;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20001224 	.word	0x20001224
 80094b4:	40023c00 	.word	0x40023c00

080094b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80094c4:	4b0d      	ldr	r3, [pc, #52]	@ (80094fc <FLASH_MassErase+0x44>)
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	4a0c      	ldr	r2, [pc, #48]	@ (80094fc <FLASH_MassErase+0x44>)
 80094ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80094d0:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <FLASH_MassErase+0x44>)
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	4a09      	ldr	r2, [pc, #36]	@ (80094fc <FLASH_MassErase+0x44>)
 80094d6:	f043 0304 	orr.w	r3, r3, #4
 80094da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80094dc:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <FLASH_MassErase+0x44>)
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	4313      	orrs	r3, r2
 80094e6:	4a05      	ldr	r2, [pc, #20]	@ (80094fc <FLASH_MassErase+0x44>)
 80094e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ec:	6113      	str	r3, [r2, #16]
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40023c00 	.word	0x40023c00

08009500 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	e010      	b.n	800953e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d103      	bne.n	800952a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009522:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	e009      	b.n	800953e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d103      	bne.n	8009538 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e002      	b.n	800953e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009538:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800953c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800953e:	4b13      	ldr	r3, [pc, #76]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	4a12      	ldr	r2, [pc, #72]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 8009544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009548:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800954a:	4b10      	ldr	r3, [pc, #64]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 800954c:	691a      	ldr	r2, [r3, #16]
 800954e:	490f      	ldr	r1, [pc, #60]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	4a0c      	ldr	r2, [pc, #48]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 800955c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009560:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009562:	4b0a      	ldr	r3, [pc, #40]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 8009564:	691a      	ldr	r2, [r3, #16]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4313      	orrs	r3, r2
 800956c:	4a07      	ldr	r2, [pc, #28]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 800956e:	f043 0302 	orr.w	r3, r3, #2
 8009572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009574:	4b05      	ldr	r3, [pc, #20]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	4a04      	ldr	r2, [pc, #16]	@ (800958c <FLASH_Erase_Sector+0x8c>)
 800957a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800957e:	6113      	str	r3, [r2, #16]
}
 8009580:	bf00      	nop
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	40023c00 	.word	0x40023c00

08009590 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009594:	4b20      	ldr	r3, [pc, #128]	@ (8009618 <FLASH_FlushCaches+0x88>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800959c:	2b00      	cmp	r3, #0
 800959e:	d017      	beq.n	80095d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80095a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095a6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80095ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a19      	ldr	r2, [pc, #100]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a16      	ldr	r2, [pc, #88]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80095c4:	4b14      	ldr	r3, [pc, #80]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a13      	ldr	r2, [pc, #76]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80095ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80095d0:	4b11      	ldr	r3, [pc, #68]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d017      	beq.n	800960c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80095dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80095e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	4b08      	ldr	r3, [pc, #32]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a07      	ldr	r2, [pc, #28]	@ (8009618 <FLASH_FlushCaches+0x88>)
 80095fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009600:	4b05      	ldr	r3, [pc, #20]	@ (8009618 <FLASH_FlushCaches+0x88>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a04      	ldr	r2, [pc, #16]	@ (8009618 <FLASH_FlushCaches+0x88>)
 8009606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800960a:	6013      	str	r3, [r2, #0]
  }
}
 800960c:	bf00      	nop
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	40023c00 	.word	0x40023c00

0800961c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800961c:	b480      	push	{r7}
 800961e:	b089      	sub	sp, #36	@ 0x24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009626:	2300      	movs	r3, #0
 8009628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800962a:	2300      	movs	r3, #0
 800962c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	e159      	b.n	80098ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009638:	2201      	movs	r2, #1
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	fa02 f303 	lsl.w	r3, r2, r3
 8009640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	4013      	ands	r3, r2
 800964a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	429a      	cmp	r2, r3
 8009652:	f040 8148 	bne.w	80098e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	2b01      	cmp	r3, #1
 8009660:	d005      	beq.n	800966e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800966a:	2b02      	cmp	r3, #2
 800966c:	d130      	bne.n	80096d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	2203      	movs	r2, #3
 800967a:	fa02 f303 	lsl.w	r3, r2, r3
 800967e:	43db      	mvns	r3, r3
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	4013      	ands	r3, r2
 8009684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	4313      	orrs	r3, r2
 8009696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096a4:	2201      	movs	r2, #1
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ac:	43db      	mvns	r3, r3
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	4013      	ands	r3, r2
 80096b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	091b      	lsrs	r3, r3, #4
 80096ba:	f003 0201 	and.w	r2, r3, #1
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	fa02 f303 	lsl.w	r3, r2, r3
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f003 0303 	and.w	r3, r3, #3
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d017      	beq.n	800970c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	2203      	movs	r2, #3
 80096e8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ec:	43db      	mvns	r3, r3
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	4013      	ands	r3, r2
 80096f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	4313      	orrs	r3, r2
 8009704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	2b02      	cmp	r3, #2
 8009716:	d123      	bne.n	8009760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	08da      	lsrs	r2, r3, #3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3208      	adds	r2, #8
 8009720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	220f      	movs	r2, #15
 8009730:	fa02 f303 	lsl.w	r3, r2, r3
 8009734:	43db      	mvns	r3, r3
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	4013      	ands	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	08da      	lsrs	r2, r3, #3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3208      	adds	r2, #8
 800975a:	69b9      	ldr	r1, [r7, #24]
 800975c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	2203      	movs	r2, #3
 800976c:	fa02 f303 	lsl.w	r3, r2, r3
 8009770:	43db      	mvns	r3, r3
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	4013      	ands	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f003 0203 	and.w	r2, r3, #3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	fa02 f303 	lsl.w	r3, r2, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	4313      	orrs	r3, r2
 800978c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80a2 	beq.w	80098e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097a2:	2300      	movs	r3, #0
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	4b57      	ldr	r3, [pc, #348]	@ (8009904 <HAL_GPIO_Init+0x2e8>)
 80097a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097aa:	4a56      	ldr	r2, [pc, #344]	@ (8009904 <HAL_GPIO_Init+0x2e8>)
 80097ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80097b2:	4b54      	ldr	r3, [pc, #336]	@ (8009904 <HAL_GPIO_Init+0x2e8>)
 80097b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097be:	4a52      	ldr	r2, [pc, #328]	@ (8009908 <HAL_GPIO_Init+0x2ec>)
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	089b      	lsrs	r3, r3, #2
 80097c4:	3302      	adds	r3, #2
 80097c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	220f      	movs	r2, #15
 80097d6:	fa02 f303 	lsl.w	r3, r2, r3
 80097da:	43db      	mvns	r3, r3
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	4013      	ands	r3, r2
 80097e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a49      	ldr	r2, [pc, #292]	@ (800990c <HAL_GPIO_Init+0x2f0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d019      	beq.n	800981e <HAL_GPIO_Init+0x202>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a48      	ldr	r2, [pc, #288]	@ (8009910 <HAL_GPIO_Init+0x2f4>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d013      	beq.n	800981a <HAL_GPIO_Init+0x1fe>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a47      	ldr	r2, [pc, #284]	@ (8009914 <HAL_GPIO_Init+0x2f8>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00d      	beq.n	8009816 <HAL_GPIO_Init+0x1fa>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a46      	ldr	r2, [pc, #280]	@ (8009918 <HAL_GPIO_Init+0x2fc>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d007      	beq.n	8009812 <HAL_GPIO_Init+0x1f6>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a45      	ldr	r2, [pc, #276]	@ (800991c <HAL_GPIO_Init+0x300>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d101      	bne.n	800980e <HAL_GPIO_Init+0x1f2>
 800980a:	2304      	movs	r3, #4
 800980c:	e008      	b.n	8009820 <HAL_GPIO_Init+0x204>
 800980e:	2307      	movs	r3, #7
 8009810:	e006      	b.n	8009820 <HAL_GPIO_Init+0x204>
 8009812:	2303      	movs	r3, #3
 8009814:	e004      	b.n	8009820 <HAL_GPIO_Init+0x204>
 8009816:	2302      	movs	r3, #2
 8009818:	e002      	b.n	8009820 <HAL_GPIO_Init+0x204>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <HAL_GPIO_Init+0x204>
 800981e:	2300      	movs	r3, #0
 8009820:	69fa      	ldr	r2, [r7, #28]
 8009822:	f002 0203 	and.w	r2, r2, #3
 8009826:	0092      	lsls	r2, r2, #2
 8009828:	4093      	lsls	r3, r2
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	4313      	orrs	r3, r2
 800982e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009830:	4935      	ldr	r1, [pc, #212]	@ (8009908 <HAL_GPIO_Init+0x2ec>)
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	089b      	lsrs	r3, r3, #2
 8009836:	3302      	adds	r3, #2
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800983e:	4b38      	ldr	r3, [pc, #224]	@ (8009920 <HAL_GPIO_Init+0x304>)
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	43db      	mvns	r3, r3
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	4013      	ands	r3, r2
 800984c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	4313      	orrs	r3, r2
 8009860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009862:	4a2f      	ldr	r2, [pc, #188]	@ (8009920 <HAL_GPIO_Init+0x304>)
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009868:	4b2d      	ldr	r3, [pc, #180]	@ (8009920 <HAL_GPIO_Init+0x304>)
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	43db      	mvns	r3, r3
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	4013      	ands	r3, r2
 8009876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	4313      	orrs	r3, r2
 800988a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800988c:	4a24      	ldr	r2, [pc, #144]	@ (8009920 <HAL_GPIO_Init+0x304>)
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009892:	4b23      	ldr	r3, [pc, #140]	@ (8009920 <HAL_GPIO_Init+0x304>)
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	43db      	mvns	r3, r3
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	4013      	ands	r3, r2
 80098a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80098b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009920 <HAL_GPIO_Init+0x304>)
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098bc:	4b18      	ldr	r3, [pc, #96]	@ (8009920 <HAL_GPIO_Init+0x304>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	43db      	mvns	r3, r3
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	4013      	ands	r3, r2
 80098ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80098e0:	4a0f      	ldr	r2, [pc, #60]	@ (8009920 <HAL_GPIO_Init+0x304>)
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	3301      	adds	r3, #1
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	2b0f      	cmp	r3, #15
 80098f0:	f67f aea2 	bls.w	8009638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	3724      	adds	r7, #36	@ 0x24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	40023800 	.word	0x40023800
 8009908:	40013800 	.word	0x40013800
 800990c:	40020000 	.word	0x40020000
 8009910:	40020400 	.word	0x40020400
 8009914:	40020800 	.word	0x40020800
 8009918:	40020c00 	.word	0x40020c00
 800991c:	40021000 	.word	0x40021000
 8009920:	40013c00 	.word	0x40013c00

08009924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691a      	ldr	r2, [r3, #16]
 8009934:	887b      	ldrh	r3, [r7, #2]
 8009936:	4013      	ands	r3, r2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800993c:	2301      	movs	r3, #1
 800993e:	73fb      	strb	r3, [r7, #15]
 8009940:	e001      	b.n	8009946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	807b      	strh	r3, [r7, #2]
 8009960:	4613      	mov	r3, r2
 8009962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009964:	787b      	ldrb	r3, [r7, #1]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800996a:	887a      	ldrh	r2, [r7, #2]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009970:	e003      	b.n	800997a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009972:	887b      	ldrh	r3, [r7, #2]
 8009974:	041a      	lsls	r2, r3, #16
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	619a      	str	r2, [r3, #24]
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009998:	887a      	ldrh	r2, [r7, #2]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4013      	ands	r3, r2
 800999e:	041a      	lsls	r2, r3, #16
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	43d9      	mvns	r1, r3
 80099a4:	887b      	ldrh	r3, [r7, #2]
 80099a6:	400b      	ands	r3, r1
 80099a8:	431a      	orrs	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	619a      	str	r2, [r3, #24]
}
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
	...

080099bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80099c6:	4b08      	ldr	r3, [pc, #32]	@ (80099e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099c8:	695a      	ldr	r2, [r3, #20]
 80099ca:	88fb      	ldrh	r3, [r7, #6]
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d006      	beq.n	80099e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099d2:	4a05      	ldr	r2, [pc, #20]	@ (80099e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099d4:	88fb      	ldrh	r3, [r7, #6]
 80099d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f806 	bl	80099ec <HAL_GPIO_EXTI_Callback>
  }
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	40013c00 	.word	0x40013c00

080099ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e12b      	b.n	8009c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7fe fe74 	bl	8008718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2224      	movs	r2, #36	@ 0x24
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009a68:	f003 fa4a 	bl	800cf00 <HAL_RCC_GetPCLK1Freq>
 8009a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4a81      	ldr	r2, [pc, #516]	@ (8009c78 <HAL_I2C_Init+0x274>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d807      	bhi.n	8009a88 <HAL_I2C_Init+0x84>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4a80      	ldr	r2, [pc, #512]	@ (8009c7c <HAL_I2C_Init+0x278>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	bf94      	ite	ls
 8009a80:	2301      	movls	r3, #1
 8009a82:	2300      	movhi	r3, #0
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	e006      	b.n	8009a96 <HAL_I2C_Init+0x92>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8009c80 <HAL_I2C_Init+0x27c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	bf94      	ite	ls
 8009a90:	2301      	movls	r3, #1
 8009a92:	2300      	movhi	r3, #0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e0e7      	b.n	8009c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	4a78      	ldr	r2, [pc, #480]	@ (8009c84 <HAL_I2C_Init+0x280>)
 8009aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa6:	0c9b      	lsrs	r3, r3, #18
 8009aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	430a      	orrs	r2, r1
 8009abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	4a6a      	ldr	r2, [pc, #424]	@ (8009c78 <HAL_I2C_Init+0x274>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d802      	bhi.n	8009ad8 <HAL_I2C_Init+0xd4>
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	e009      	b.n	8009aec <HAL_I2C_Init+0xe8>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009ade:	fb02 f303 	mul.w	r3, r2, r3
 8009ae2:	4a69      	ldr	r2, [pc, #420]	@ (8009c88 <HAL_I2C_Init+0x284>)
 8009ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae8:	099b      	lsrs	r3, r3, #6
 8009aea:	3301      	adds	r3, #1
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009afe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	495c      	ldr	r1, [pc, #368]	@ (8009c78 <HAL_I2C_Init+0x274>)
 8009b08:	428b      	cmp	r3, r1
 8009b0a:	d819      	bhi.n	8009b40 <HAL_I2C_Init+0x13c>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	1e59      	subs	r1, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b1a:	1c59      	adds	r1, r3, #1
 8009b1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009b20:	400b      	ands	r3, r1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <HAL_I2C_Init+0x138>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	1e59      	subs	r1, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b34:	3301      	adds	r3, #1
 8009b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b3a:	e051      	b.n	8009be0 <HAL_I2C_Init+0x1dc>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	e04f      	b.n	8009be0 <HAL_I2C_Init+0x1dc>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d111      	bne.n	8009b6c <HAL_I2C_Init+0x168>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	1e58      	subs	r0, r3, #1
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6859      	ldr	r1, [r3, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	440b      	add	r3, r1
 8009b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bf0c      	ite	eq
 8009b64:	2301      	moveq	r3, #1
 8009b66:	2300      	movne	r3, #0
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	e012      	b.n	8009b92 <HAL_I2C_Init+0x18e>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	1e58      	subs	r0, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6859      	ldr	r1, [r3, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	440b      	add	r3, r1
 8009b7a:	0099      	lsls	r1, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009b82:	3301      	adds	r3, #1
 8009b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bf0c      	ite	eq
 8009b8c:	2301      	moveq	r3, #1
 8009b8e:	2300      	movne	r3, #0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <HAL_I2C_Init+0x196>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e022      	b.n	8009be0 <HAL_I2C_Init+0x1dc>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10e      	bne.n	8009bc0 <HAL_I2C_Init+0x1bc>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	1e58      	subs	r0, r3, #1
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6859      	ldr	r1, [r3, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	440b      	add	r3, r1
 8009bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bbe:	e00f      	b.n	8009be0 <HAL_I2C_Init+0x1dc>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1e58      	subs	r0, r3, #1
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6859      	ldr	r1, [r3, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	440b      	add	r3, r1
 8009bce:	0099      	lsls	r1, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	6809      	ldr	r1, [r1, #0]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	69da      	ldr	r2, [r3, #28]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009c0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	6911      	ldr	r1, [r2, #16]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68d2      	ldr	r2, [r2, #12]
 8009c1a:	4311      	orrs	r1, r2
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	430b      	orrs	r3, r1
 8009c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	695a      	ldr	r2, [r3, #20]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	431a      	orrs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f042 0201 	orr.w	r2, r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	000186a0 	.word	0x000186a0
 8009c7c:	001e847f 	.word	0x001e847f
 8009c80:	003d08ff 	.word	0x003d08ff
 8009c84:	431bde83 	.word	0x431bde83
 8009c88:	10624dd3 	.word	0x10624dd3

08009c8c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9e:	2b80      	cmp	r3, #128	@ 0x80
 8009ca0:	d103      	bne.n	8009caa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	611a      	str	r2, [r3, #16]
  }
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
	...

08009cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	607a      	str	r2, [r7, #4]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	817b      	strh	r3, [r7, #10]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ccc:	f7fe ffc6 	bl	8008c5c <HAL_GetTick>
 8009cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	f040 80e0 	bne.w	8009ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2319      	movs	r3, #25
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4970      	ldr	r1, [pc, #448]	@ (8009eac <HAL_I2C_Master_Transmit+0x1f4>)
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f002 fa14 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e0d3      	b.n	8009ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d101      	bne.n	8009d08 <HAL_I2C_Master_Transmit+0x50>
 8009d04:	2302      	movs	r3, #2
 8009d06:	e0cc      	b.n	8009ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d007      	beq.n	8009d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f042 0201 	orr.w	r2, r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2221      	movs	r2, #33	@ 0x21
 8009d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2210      	movs	r2, #16
 8009d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	893a      	ldrh	r2, [r7, #8]
 8009d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4a50      	ldr	r2, [pc, #320]	@ (8009eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8009d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009d70:	8979      	ldrh	r1, [r7, #10]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	6a3a      	ldr	r2, [r7, #32]
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f001 ffd6 	bl	800bd28 <I2C_MasterRequestWrite>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e08d      	b.n	8009ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d86:	2300      	movs	r3, #0
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	613b      	str	r3, [r7, #16]
 8009d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009d9c:	e066      	b.n	8009e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	6a39      	ldr	r1, [r7, #32]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f002 fad2 	bl	800c34c <I2C_WaitOnTXEFlagUntilTimeout>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00d      	beq.n	8009dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d107      	bne.n	8009dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e06b      	b.n	8009ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3b01      	subs	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009df2:	3b01      	subs	r3, #1
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d11b      	bne.n	8009e40 <HAL_I2C_Master_Transmit+0x188>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d017      	beq.n	8009e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e14:	781a      	ldrb	r2, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	6a39      	ldr	r1, [r7, #32]
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f002 fac9 	bl	800c3dc <I2C_WaitOnBTFFlagUntilTimeout>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00d      	beq.n	8009e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d107      	bne.n	8009e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e01a      	b.n	8009ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d194      	bne.n	8009d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e000      	b.n	8009ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	00100002 	.word	0x00100002
 8009eb0:	ffff0000 	.word	0xffff0000

08009eb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08c      	sub	sp, #48	@ 0x30
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	607a      	str	r2, [r7, #4]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	817b      	strh	r3, [r7, #10]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ec8:	f7fe fec8 	bl	8008c5c <HAL_GetTick>
 8009ecc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	f040 8217 	bne.w	800a30a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	2319      	movs	r3, #25
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	497c      	ldr	r1, [pc, #496]	@ (800a0d8 <HAL_I2C_Master_Receive+0x224>)
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f002 f916 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	e20a      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <HAL_I2C_Master_Receive+0x50>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e203      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d007      	beq.n	8009f2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f042 0201 	orr.w	r2, r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2222      	movs	r2, #34	@ 0x22
 8009f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2210      	movs	r2, #16
 8009f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	893a      	ldrh	r2, [r7, #8]
 8009f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4a5c      	ldr	r2, [pc, #368]	@ (800a0dc <HAL_I2C_Master_Receive+0x228>)
 8009f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009f6c:	8979      	ldrh	r1, [r7, #10]
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f001 ff5a 	bl	800be2c <I2C_MasterRequestRead>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e1c4      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d113      	bne.n	8009fb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	623b      	str	r3, [r7, #32]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	623b      	str	r3, [r7, #32]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	623b      	str	r3, [r7, #32]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	e198      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d11b      	bne.n	8009ff2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e178      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d11b      	bne.n	800a032 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a008:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a01a:	2300      	movs	r3, #0
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	61bb      	str	r3, [r7, #24]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	e158      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a058:	e144      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a05e:	2b03      	cmp	r3, #3
 800a060:	f200 80f1 	bhi.w	800a246 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d123      	bne.n	800a0b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a06c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a06e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f002 fa2d 	bl	800c4d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e145      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	691a      	ldr	r2, [r3, #16]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08a:	b2d2      	uxtb	r2, r2
 800a08c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a09c:	3b01      	subs	r3, #1
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a0b2:	e117      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d14e      	bne.n	800a15a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4906      	ldr	r1, [pc, #24]	@ (800a0e0 <HAL_I2C_Master_Receive+0x22c>)
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f002 f826 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e11a      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
 800a0d6:	bf00      	nop
 800a0d8:	00100002 	.word	0x00100002
 800a0dc:	ffff0000 	.word	0xffff0000
 800a0e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691a      	ldr	r2, [r3, #16]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fe:	b2d2      	uxtb	r2, r2
 800a100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3b01      	subs	r3, #1
 800a120:	b29a      	uxth	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a130:	b2d2      	uxtb	r2, r2
 800a132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a158:	e0c4      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	2200      	movs	r2, #0
 800a162:	496c      	ldr	r1, [pc, #432]	@ (800a314 <HAL_I2C_Master_Receive+0x460>)
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f001 ffd7 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e0cb      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691a      	ldr	r2, [r3, #16]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4955      	ldr	r1, [pc, #340]	@ (800a314 <HAL_I2C_Master_Receive+0x460>)
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f001 ffa9 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e09d      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691a      	ldr	r2, [r3, #16]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a22e:	3b01      	subs	r3, #1
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	3b01      	subs	r3, #1
 800a23e:	b29a      	uxth	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a244:	e04e      	b.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a248:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f002 f940 	bl	800c4d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e058      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	691a      	ldr	r2, [r3, #16]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a264:	b2d2      	uxtb	r2, r2
 800a266:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a276:	3b01      	subs	r3, #1
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	3b01      	subs	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b04      	cmp	r3, #4
 800a298:	d124      	bne.n	800a2e4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d107      	bne.n	800a2b2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691a      	ldr	r2, [r3, #16]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2bc:	b2d2      	uxtb	r2, r2
 800a2be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f47f aeb6 	bne.w	800a05a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	e000      	b.n	800a30c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a30a:	2302      	movs	r3, #2
  }
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3728      	adds	r7, #40	@ 0x28
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	00010004 	.word	0x00010004

0800a318 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	@ 0x28
 800a31c:	af02      	add	r7, sp, #8
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	460b      	mov	r3, r1
 800a326:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a328:	f7fe fc98 	bl	8008c5c <HAL_GetTick>
 800a32c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	f040 8111 	bne.w	800a562 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	2319      	movs	r3, #25
 800a346:	2201      	movs	r2, #1
 800a348:	4988      	ldr	r1, [pc, #544]	@ (800a56c <HAL_I2C_IsDeviceReady+0x254>)
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f001 fee4 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a356:	2302      	movs	r3, #2
 800a358:	e104      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a360:	2b01      	cmp	r3, #1
 800a362:	d101      	bne.n	800a368 <HAL_I2C_IsDeviceReady+0x50>
 800a364:	2302      	movs	r3, #2
 800a366:	e0fd      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d007      	beq.n	800a38e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f042 0201 	orr.w	r2, r2, #1
 800a38c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a39c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2224      	movs	r2, #36	@ 0x24
 800a3a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4a70      	ldr	r2, [pc, #448]	@ (800a570 <HAL_I2C_IsDeviceReady+0x258>)
 800a3b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f001 fea2 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00d      	beq.n	800a3f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3e8:	d103      	bne.n	800a3f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e0b6      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3f6:	897b      	ldrh	r3, [r7, #10]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a404:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a406:	f7fe fc29 	bl	8008c5c <HAL_GetTick>
 800a40a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f003 0302 	and.w	r3, r3, #2
 800a416:	2b02      	cmp	r3, #2
 800a418:	bf0c      	ite	eq
 800a41a:	2301      	moveq	r3, #1
 800a41c:	2300      	movne	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a42c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a430:	bf0c      	ite	eq
 800a432:	2301      	moveq	r3, #1
 800a434:	2300      	movne	r3, #0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a43a:	e025      	b.n	800a488 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a43c:	f7fe fc0e 	bl	8008c5c <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d302      	bcc.n	800a452 <HAL_I2C_IsDeviceReady+0x13a>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	22a0      	movs	r2, #160	@ 0xa0
 800a456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b02      	cmp	r3, #2
 800a466:	bf0c      	ite	eq
 800a468:	2301      	moveq	r3, #1
 800a46a:	2300      	movne	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a47a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a47e:	bf0c      	ite	eq
 800a480:	2301      	moveq	r3, #1
 800a482:	2300      	movne	r3, #0
 800a484:	b2db      	uxtb	r3, r3
 800a486:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	2ba0      	cmp	r3, #160	@ 0xa0
 800a492:	d005      	beq.n	800a4a0 <HAL_I2C_IsDeviceReady+0x188>
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <HAL_I2C_IsDeviceReady+0x188>
 800a49a:	7dbb      	ldrb	r3, [r7, #22]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d0cd      	beq.n	800a43c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d129      	bne.n	800a50a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	613b      	str	r3, [r7, #16]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	613b      	str	r3, [r7, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	613b      	str	r3, [r7, #16]
 800a4da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	2319      	movs	r3, #25
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	4921      	ldr	r1, [pc, #132]	@ (800a56c <HAL_I2C_IsDeviceReady+0x254>)
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f001 fe16 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e036      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	e02c      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a518:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a522:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	2319      	movs	r3, #25
 800a52a:	2201      	movs	r2, #1
 800a52c:	490f      	ldr	r1, [pc, #60]	@ (800a56c <HAL_I2C_IsDeviceReady+0x254>)
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f001 fdf2 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e012      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	3301      	adds	r3, #1
 800a542:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	429a      	cmp	r2, r3
 800a54a:	f4ff af32 	bcc.w	800a3b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a562:	2302      	movs	r3, #2
  }
}
 800a564:	4618      	mov	r0, r3
 800a566:	3720      	adds	r7, #32
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	00100002 	.word	0x00100002
 800a570:	ffff0000 	.word	0xffff0000

0800a574 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a594:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a59c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
 800a5a0:	2b10      	cmp	r3, #16
 800a5a2:	d003      	beq.n	800a5ac <HAL_I2C_EV_IRQHandler+0x38>
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	2b40      	cmp	r3, #64	@ 0x40
 800a5a8:	f040 80b1 	bne.w	800a70e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10d      	bne.n	800a5e2 <HAL_I2C_EV_IRQHandler+0x6e>
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a5cc:	d003      	beq.n	800a5d6 <HAL_I2C_EV_IRQHandler+0x62>
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a5d4:	d101      	bne.n	800a5da <HAL_I2C_EV_IRQHandler+0x66>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e000      	b.n	800a5dc <HAL_I2C_EV_IRQHandler+0x68>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	f000 8114 	beq.w	800a80a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00b      	beq.n	800a604 <HAL_I2C_EV_IRQHandler+0x90>
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d006      	beq.n	800a604 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fff6 	bl	800c5e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fd76 	bl	800b0ee <I2C_Master_SB>
 800a602:	e083      	b.n	800a70c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d008      	beq.n	800a620 <HAL_I2C_EV_IRQHandler+0xac>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a614:	2b00      	cmp	r3, #0
 800a616:	d003      	beq.n	800a620 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fdee 	bl	800b1fa <I2C_Master_ADD10>
 800a61e:	e075      	b.n	800a70c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d008      	beq.n	800a63c <HAL_I2C_EV_IRQHandler+0xc8>
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fe0a 	bl	800b24e <I2C_Master_ADDR>
 800a63a:	e067      	b.n	800a70c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b00      	cmp	r3, #0
 800a644:	d036      	beq.n	800a6b4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a654:	f000 80db 	beq.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00d      	beq.n	800a67e <HAL_I2C_EV_IRQHandler+0x10a>
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d008      	beq.n	800a67e <HAL_I2C_EV_IRQHandler+0x10a>
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	f003 0304 	and.w	r3, r3, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f9d6 	bl	800aa28 <I2C_MasterTransmit_TXE>
 800a67c:	e046      	b.n	800a70c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80c2 	beq.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 80bc 	beq.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b21      	cmp	r3, #33	@ 0x21
 800a69a:	d103      	bne.n	800a6a4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fa5f 	bl	800ab60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6a2:	e0b4      	b.n	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	2b40      	cmp	r3, #64	@ 0x40
 800a6a8:	f040 80b1 	bne.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 facd 	bl	800ac4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6b2:	e0ac      	b.n	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6c2:	f000 80a4 	beq.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00d      	beq.n	800a6ec <HAL_I2C_EV_IRQHandler+0x178>
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <HAL_I2C_EV_IRQHandler+0x178>
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d103      	bne.n	800a6ec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fb49 	bl	800ad7c <I2C_MasterReceive_RXNE>
 800a6ea:	e00f      	b.n	800a70c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 808b 	beq.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 8085 	beq.w	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fc01 	bl	800af0c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a70a:	e080      	b.n	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
 800a70c:	e07f      	b.n	800a80e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d004      	beq.n	800a720 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	61fb      	str	r3, [r7, #28]
 800a71e:	e007      	b.n	800a730 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d011      	beq.n	800a75e <HAL_I2C_EV_IRQHandler+0x1ea>
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00c      	beq.n	800a75e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a754:	69b9      	ldr	r1, [r7, #24]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 ffc8 	bl	800b6ec <I2C_Slave_ADDR>
 800a75c:	e05a      	b.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	f003 0310 	and.w	r3, r3, #16
 800a764:	2b00      	cmp	r3, #0
 800a766:	d008      	beq.n	800a77a <HAL_I2C_EV_IRQHandler+0x206>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 f802 	bl	800b77c <I2C_Slave_STOPF>
 800a778:	e04c      	b.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a77a:	7bbb      	ldrb	r3, [r7, #14]
 800a77c:	2b21      	cmp	r3, #33	@ 0x21
 800a77e:	d002      	beq.n	800a786 <HAL_I2C_EV_IRQHandler+0x212>
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	2b29      	cmp	r3, #41	@ 0x29
 800a784:	d120      	bne.n	800a7c8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00d      	beq.n	800a7ac <HAL_I2C_EV_IRQHandler+0x238>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a796:	2b00      	cmp	r3, #0
 800a798:	d008      	beq.n	800a7ac <HAL_I2C_EV_IRQHandler+0x238>
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fee3 	bl	800b570 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7aa:	e032      	b.n	800a812 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f003 0304 	and.w	r3, r3, #4
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d02d      	beq.n	800a812 <HAL_I2C_EV_IRQHandler+0x29e>
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d028      	beq.n	800a812 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 ff12 	bl	800b5ea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7c6:	e024      	b.n	800a812 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00d      	beq.n	800a7ee <HAL_I2C_EV_IRQHandler+0x27a>
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d008      	beq.n	800a7ee <HAL_I2C_EV_IRQHandler+0x27a>
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d103      	bne.n	800a7ee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 ff20 	bl	800b62c <I2C_SlaveReceive_RXNE>
 800a7ec:	e012      	b.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00d      	beq.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d008      	beq.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 ff50 	bl	800b6a8 <I2C_SlaveReceive_BTF>
 800a808:	e004      	b.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a80a:	bf00      	nop
 800a80c:	e002      	b.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a80e:	bf00      	nop
 800a810:	e000      	b.n	800a814 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a812:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b08a      	sub	sp, #40	@ 0x28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a832:	2300      	movs	r3, #0
 800a834:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a83c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a83e:	6a3b      	ldr	r3, [r7, #32]
 800a840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00d      	beq.n	800a864 <HAL_I2C_ER_IRQHandler+0x4a>
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d008      	beq.n	800a864 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a854:	f043 0301 	orr.w	r3, r3, #1
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a862:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00d      	beq.n	800a88a <HAL_I2C_ER_IRQHandler+0x70>
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a874:	2b00      	cmp	r3, #0
 800a876:	d008      	beq.n	800a88a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	f043 0302 	orr.w	r3, r3, #2
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800a888:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a88a:	6a3b      	ldr	r3, [r7, #32]
 800a88c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a890:	2b00      	cmp	r3, #0
 800a892:	d03e      	beq.n	800a912 <HAL_I2C_ER_IRQHandler+0xf8>
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d039      	beq.n	800a912 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800a89e:	7efb      	ldrb	r3, [r7, #27]
 800a8a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a8b8:	7ebb      	ldrb	r3, [r7, #26]
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d112      	bne.n	800a8e4 <HAL_I2C_ER_IRQHandler+0xca>
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10f      	bne.n	800a8e4 <HAL_I2C_ER_IRQHandler+0xca>
 800a8c4:	7cfb      	ldrb	r3, [r7, #19]
 800a8c6:	2b21      	cmp	r3, #33	@ 0x21
 800a8c8:	d008      	beq.n	800a8dc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a8ca:	7cfb      	ldrb	r3, [r7, #19]
 800a8cc:	2b29      	cmp	r3, #41	@ 0x29
 800a8ce:	d005      	beq.n	800a8dc <HAL_I2C_ER_IRQHandler+0xc2>
 800a8d0:	7cfb      	ldrb	r3, [r7, #19]
 800a8d2:	2b28      	cmp	r3, #40	@ 0x28
 800a8d4:	d106      	bne.n	800a8e4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b21      	cmp	r3, #33	@ 0x21
 800a8da:	d103      	bne.n	800a8e4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 f87d 	bl	800b9dc <I2C_Slave_AF>
 800a8e2:	e016      	b.n	800a912 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a8ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	f043 0304 	orr.w	r3, r3, #4
 800a8f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a8f6:	7efb      	ldrb	r3, [r7, #27]
 800a8f8:	2b10      	cmp	r3, #16
 800a8fa:	d002      	beq.n	800a902 <HAL_I2C_ER_IRQHandler+0xe8>
 800a8fc:	7efb      	ldrb	r3, [r7, #27]
 800a8fe:	2b40      	cmp	r3, #64	@ 0x40
 800a900:	d107      	bne.n	800a912 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a910:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00d      	beq.n	800a938 <HAL_I2C_ER_IRQHandler+0x11e>
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a922:	2b00      	cmp	r3, #0
 800a924:	d008      	beq.n	800a938 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	f043 0308 	orr.w	r3, r3, #8
 800a92c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800a936:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d008      	beq.n	800a950 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a944:	431a      	orrs	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f001 f8ba 	bl	800bac4 <I2C_ITError>
  }
}
 800a950:	bf00      	nop
 800a952:	3728      	adds	r7, #40	@ 0x28
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d150      	bne.n	800aaf0 <I2C_MasterTransmit_TXE+0xc8>
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	2b21      	cmp	r3, #33	@ 0x21
 800aa52:	d14d      	bne.n	800aaf0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b08      	cmp	r3, #8
 800aa58:	d01d      	beq.n	800aa96 <I2C_MasterTransmit_TXE+0x6e>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b20      	cmp	r3, #32
 800aa5e:	d01a      	beq.n	800aa96 <I2C_MasterTransmit_TXE+0x6e>
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aa66:	d016      	beq.n	800aa96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2211      	movs	r2, #17
 800aa7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff ff62 	bl	800a958 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aa94:	e060      	b.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aaa4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aab4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2220      	movs	r2, #32
 800aac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b40      	cmp	r3, #64	@ 0x40
 800aace:	d107      	bne.n	800aae0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff ff7d 	bl	800a9d8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aade:	e03b      	b.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff ff35 	bl	800a958 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800aaee:	e033      	b.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b21      	cmp	r3, #33	@ 0x21
 800aaf4:	d005      	beq.n	800ab02 <I2C_MasterTransmit_TXE+0xda>
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	2b40      	cmp	r3, #64	@ 0x40
 800aafa:	d12d      	bne.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	2b22      	cmp	r3, #34	@ 0x22
 800ab00:	d12a      	bne.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d108      	bne.n	800ab1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ab1c:	e01c      	b.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b40      	cmp	r3, #64	@ 0x40
 800ab28:	d103      	bne.n	800ab32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f88e 	bl	800ac4c <I2C_MemoryTransmit_TXE_BTF>
}
 800ab30:	e012      	b.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ab56:	e7ff      	b.n	800ab58 <I2C_MasterTransmit_TXE+0x130>
 800ab58:	bf00      	nop
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b21      	cmp	r3, #33	@ 0x21
 800ab78:	d164      	bne.n	800ac44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d012      	beq.n	800abaa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab88:	781a      	ldrb	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	3b01      	subs	r3, #1
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800aba8:	e04c      	b.n	800ac44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b08      	cmp	r3, #8
 800abae:	d01d      	beq.n	800abec <I2C_MasterTransmit_BTF+0x8c>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	d01a      	beq.n	800abec <I2C_MasterTransmit_BTF+0x8c>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800abbc:	d016      	beq.n	800abec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800abcc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2211      	movs	r2, #17
 800abd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2220      	movs	r2, #32
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff feb7 	bl	800a958 <HAL_I2C_MasterTxCpltCallback>
}
 800abea:	e02b      	b.n	800ac44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800abfa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b40      	cmp	r3, #64	@ 0x40
 800ac24:	d107      	bne.n	800ac36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fed2 	bl	800a9d8 <HAL_I2C_MemTxCpltCallback>
}
 800ac34:	e006      	b.n	800ac44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff fe8a 	bl	800a958 <HAL_I2C_MasterTxCpltCallback>
}
 800ac44:	bf00      	nop
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d11d      	bne.n	800aca0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d10b      	bne.n	800ac84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7c:	1c9a      	adds	r2, r3, #2
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800ac82:	e077      	b.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	121b      	asrs	r3, r3, #8
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ac9e:	e069      	b.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d10b      	bne.n	800acc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acac:	b2da      	uxtb	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800acbe:	e059      	b.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d152      	bne.n	800ad6e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	2b22      	cmp	r3, #34	@ 0x22
 800accc:	d10d      	bne.n	800acea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acdc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ace8:	e044      	b.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acee:	b29b      	uxth	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d015      	beq.n	800ad20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	2b21      	cmp	r3, #33	@ 0x21
 800acf8:	d112      	bne.n	800ad20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	3b01      	subs	r3, #1
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ad1e:	e029      	b.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d124      	bne.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b21      	cmp	r3, #33	@ 0x21
 800ad2e:	d121      	bne.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ad3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fe36 	bl	800a9d8 <HAL_I2C_MemTxCpltCallback>
}
 800ad6c:	e002      	b.n	800ad74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fe ff8c 	bl	8009c8c <I2C_Flush_DR>
}
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b22      	cmp	r3, #34	@ 0x22
 800ad8e:	f040 80b9 	bne.w	800af04 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad96:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d921      	bls.n	800adea <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	3b01      	subs	r3, #1
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800add0:	b29b      	uxth	r3, r3
 800add2:	2b03      	cmp	r3, #3
 800add4:	f040 8096 	bne.w	800af04 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ade6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800ade8:	e08c      	b.n	800af04 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d07f      	beq.n	800aef2 <I2C_MasterReceive_RXNE+0x176>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d002      	beq.n	800adfe <I2C_MasterReceive_RXNE+0x82>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d179      	bne.n	800aef2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f001 fb34 	bl	800c46c <I2C_WaitOnSTOPRequestThroughIT>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d14c      	bne.n	800aea4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ae28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	691a      	ldr	r2, [r3, #16]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae34:	b2d2      	uxtb	r2, r2
 800ae36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae3c:	1c5a      	adds	r2, r3, #1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b40      	cmp	r3, #64	@ 0x40
 800ae62:	d10a      	bne.n	800ae7a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fdba 	bl	800a9ec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ae78:	e044      	b.n	800af04 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d002      	beq.n	800ae8e <I2C_MasterReceive_RXNE+0x112>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d103      	bne.n	800ae96 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae94:	e002      	b.n	800ae9c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2212      	movs	r2, #18
 800ae9a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff fd65 	bl	800a96c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aea2:	e02f      	b.n	800af04 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aeb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	691a      	ldr	r2, [r3, #16]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	3b01      	subs	r3, #1
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fd88 	bl	800aa00 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aef0:	e008      	b.n	800af04 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af00:	605a      	str	r2, [r3, #4]
}
 800af02:	e7ff      	b.n	800af04 <I2C_MasterReceive_RXNE+0x188>
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af18:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af1e:	b29b      	uxth	r3, r3
 800af20:	2b04      	cmp	r3, #4
 800af22:	d11b      	bne.n	800af5c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	691a      	ldr	r2, [r3, #16]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af50:	b29b      	uxth	r3, r3
 800af52:	3b01      	subs	r3, #1
 800af54:	b29a      	uxth	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800af5a:	e0c4      	b.n	800b0e6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af60:	b29b      	uxth	r3, r3
 800af62:	2b03      	cmp	r3, #3
 800af64:	d129      	bne.n	800afba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af74:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d00a      	beq.n	800af92 <I2C_MasterReceive_BTF+0x86>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d007      	beq.n	800af92 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	691a      	ldr	r2, [r3, #16]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afae:	b29b      	uxth	r3, r3
 800afb0:	3b01      	subs	r3, #1
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800afb8:	e095      	b.n	800b0e6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d17d      	bne.n	800b0c0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d002      	beq.n	800afd0 <I2C_MasterReceive_BTF+0xc4>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b10      	cmp	r3, #16
 800afce:	d108      	bne.n	800afe2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e016      	b.n	800b010 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	d002      	beq.n	800afee <I2C_MasterReceive_BTF+0xe2>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d108      	bne.n	800b000 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	e007      	b.n	800b010 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b00e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	691a      	ldr	r2, [r3, #16]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01a:	b2d2      	uxtb	r2, r2
 800b01c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	3b01      	subs	r3, #1
 800b030:	b29a      	uxth	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	691a      	ldr	r2, [r3, #16]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b052:	b29b      	uxth	r3, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b06a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2220      	movs	r2, #32
 800b070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b40      	cmp	r3, #64	@ 0x40
 800b07e:	d10a      	bne.n	800b096 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fcac 	bl	800a9ec <HAL_I2C_MemRxCpltCallback>
}
 800b094:	e027      	b.n	800b0e6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d002      	beq.n	800b0aa <I2C_MasterReceive_BTF+0x19e>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	d103      	bne.n	800b0b2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0b0:	e002      	b.n	800b0b8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2212      	movs	r2, #18
 800b0b6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fc57 	bl	800a96c <HAL_I2C_MasterRxCpltCallback>
}
 800b0be:	e012      	b.n	800b0e6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	691a      	ldr	r2, [r3, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b0e6:	bf00      	nop
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b083      	sub	sp, #12
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b40      	cmp	r3, #64	@ 0x40
 800b100:	d117      	bne.n	800b132 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b106:	2b00      	cmp	r3, #0
 800b108:	d109      	bne.n	800b11e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	461a      	mov	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b11a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b11c:	e067      	b.n	800b1ee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b122:	b2db      	uxtb	r3, r3
 800b124:	f043 0301 	orr.w	r3, r3, #1
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	611a      	str	r2, [r3, #16]
}
 800b130:	e05d      	b.n	800b1ee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b13a:	d133      	bne.n	800b1a4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b21      	cmp	r3, #33	@ 0x21
 800b146:	d109      	bne.n	800b15c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	461a      	mov	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b158:	611a      	str	r2, [r3, #16]
 800b15a:	e008      	b.n	800b16e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b160:	b2db      	uxtb	r3, r3
 800b162:	f043 0301 	orr.w	r3, r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b172:	2b00      	cmp	r3, #0
 800b174:	d004      	beq.n	800b180 <I2C_Master_SB+0x92>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d108      	bne.n	800b192 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	d032      	beq.n	800b1ee <I2C_Master_SB+0x100>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d02d      	beq.n	800b1ee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1a0:	605a      	str	r2, [r3, #4]
}
 800b1a2:	e024      	b.n	800b1ee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10e      	bne.n	800b1ca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	11db      	asrs	r3, r3, #7
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	f003 0306 	and.w	r3, r3, #6
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f063 030f 	orn	r3, r3, #15
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	611a      	str	r2, [r3, #16]
}
 800b1c8:	e011      	b.n	800b1ee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d10d      	bne.n	800b1ee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	11db      	asrs	r3, r3, #7
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	f003 0306 	and.w	r3, r3, #6
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	f063 030e 	orn	r3, r3, #14
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	611a      	str	r2, [r3, #16]
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b206:	b2da      	uxtb	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b212:	2b00      	cmp	r3, #0
 800b214:	d004      	beq.n	800b220 <I2C_Master_ADD10+0x26>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b21a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d108      	bne.n	800b232 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00c      	beq.n	800b242 <I2C_Master_ADD10+0x48>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d007      	beq.n	800b242 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b240:	605a      	str	r2, [r3, #4]
  }
}
 800b242:	bf00      	nop
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b24e:	b480      	push	{r7}
 800b250:	b091      	sub	sp, #68	@ 0x44
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b25c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b264:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b22      	cmp	r3, #34	@ 0x22
 800b276:	f040 8169 	bne.w	800b54c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10f      	bne.n	800b2a2 <I2C_Master_ADDR+0x54>
 800b282:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b286:	2b40      	cmp	r3, #64	@ 0x40
 800b288:	d10b      	bne.n	800b2a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b28a:	2300      	movs	r3, #0
 800b28c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	633b      	str	r3, [r7, #48]	@ 0x30
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a0:	e160      	b.n	800b564 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d11d      	bne.n	800b2e6 <I2C_Master_ADDR+0x98>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2b2:	d118      	bne.n	800b2e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	651a      	str	r2, [r3, #80]	@ 0x50
 800b2e4:	e13e      	b.n	800b564 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d113      	bne.n	800b318 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	e115      	b.n	800b544 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2b01      	cmp	r3, #1
 800b320:	f040 808a 	bne.w	800b438 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b32a:	d137      	bne.n	800b39c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b33a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b34a:	d113      	bne.n	800b374 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b35a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b35c:	2300      	movs	r3, #0
 800b35e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	627b      	str	r3, [r7, #36]	@ 0x24
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	e0e7      	b.n	800b544 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b374:	2300      	movs	r3, #0
 800b376:	623b      	str	r3, [r7, #32]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	623b      	str	r3, [r7, #32]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	623b      	str	r3, [r7, #32]
 800b388:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	e0d3      	b.n	800b544 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39e:	2b08      	cmp	r3, #8
 800b3a0:	d02e      	beq.n	800b400 <I2C_Master_ADDR+0x1b2>
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	2b20      	cmp	r3, #32
 800b3a6:	d02b      	beq.n	800b400 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3aa:	2b12      	cmp	r3, #18
 800b3ac:	d102      	bne.n	800b3b4 <I2C_Master_ADDR+0x166>
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d125      	bne.n	800b400 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b6:	2b04      	cmp	r3, #4
 800b3b8:	d00e      	beq.n	800b3d8 <I2C_Master_ADDR+0x18a>
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d00b      	beq.n	800b3d8 <I2C_Master_ADDR+0x18a>
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c2:	2b10      	cmp	r3, #16
 800b3c4:	d008      	beq.n	800b3d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e007      	b.n	800b3e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b3e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61fb      	str	r3, [r7, #28]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	61fb      	str	r3, [r7, #28]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	61fb      	str	r3, [r7, #28]
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	e0a1      	b.n	800b544 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b40e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b410:	2300      	movs	r3, #0
 800b412:	61bb      	str	r3, [r7, #24]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	61bb      	str	r3, [r7, #24]
 800b424:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	e085      	b.n	800b544 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d14d      	bne.n	800b4de <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	2b04      	cmp	r3, #4
 800b446:	d016      	beq.n	800b476 <I2C_Master_ADDR+0x228>
 800b448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d013      	beq.n	800b476 <I2C_Master_ADDR+0x228>
 800b44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b450:	2b10      	cmp	r3, #16
 800b452:	d010      	beq.n	800b476 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b462:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	e007      	b.n	800b486 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b484:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b494:	d117      	bne.n	800b4c6 <I2C_Master_ADDR+0x278>
 800b496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b498:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b49c:	d00b      	beq.n	800b4b6 <I2C_Master_ADDR+0x268>
 800b49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d008      	beq.n	800b4b6 <I2C_Master_ADDR+0x268>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	2b08      	cmp	r3, #8
 800b4a8:	d005      	beq.n	800b4b6 <I2C_Master_ADDR+0x268>
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ac:	2b10      	cmp	r3, #16
 800b4ae:	d002      	beq.n	800b4b6 <I2C_Master_ADDR+0x268>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	d107      	bne.n	800b4c6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	617b      	str	r3, [r7, #20]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	e032      	b.n	800b544 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b4ec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4fc:	d117      	bne.n	800b52e <I2C_Master_ADDR+0x2e0>
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b500:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b504:	d00b      	beq.n	800b51e <I2C_Master_ADDR+0x2d0>
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d008      	beq.n	800b51e <I2C_Master_ADDR+0x2d0>
 800b50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50e:	2b08      	cmp	r3, #8
 800b510:	d005      	beq.n	800b51e <I2C_Master_ADDR+0x2d0>
 800b512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b514:	2b10      	cmp	r3, #16
 800b516:	d002      	beq.n	800b51e <I2C_Master_ADDR+0x2d0>
 800b518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d107      	bne.n	800b52e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b52c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b52e:	2300      	movs	r3, #0
 800b530:	613b      	str	r3, [r7, #16]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	613b      	str	r3, [r7, #16]
 800b542:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b54a:	e00b      	b.n	800b564 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	e7ff      	b.n	800b564 <I2C_Master_ADDR+0x316>
 800b564:	bf00      	nop
 800b566:	3744      	adds	r7, #68	@ 0x44
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b57e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b584:	b29b      	uxth	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d02b      	beq.n	800b5e2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58e:	781a      	ldrb	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59a:	1c5a      	adds	r2, r3, #1
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d114      	bne.n	800b5e2 <I2C_SlaveTransmit_TXE+0x72>
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	2b29      	cmp	r3, #41	@ 0x29
 800b5bc:	d111      	bne.n	800b5e2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2221      	movs	r2, #33	@ 0x21
 800b5d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2228      	movs	r2, #40	@ 0x28
 800b5d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff f9cf 	bl	800a980 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d011      	beq.n	800b620 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b600:	781a      	ldrb	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b616:	b29b      	uxth	r3, r3
 800b618:	3b01      	subs	r3, #1
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b63a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b640:	b29b      	uxth	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d02c      	beq.n	800b6a0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	691a      	ldr	r2, [r3, #16]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b662:	b29b      	uxth	r3, r3
 800b664:	3b01      	subs	r3, #1
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b670:	b29b      	uxth	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d114      	bne.n	800b6a0 <I2C_SlaveReceive_RXNE+0x74>
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	2b2a      	cmp	r3, #42	@ 0x2a
 800b67a:	d111      	bne.n	800b6a0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b68a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2222      	movs	r2, #34	@ 0x22
 800b690:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2228      	movs	r2, #40	@ 0x28
 800b696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff f97a 	bl	800a994 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d012      	beq.n	800b6e0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b700:	b2db      	uxtb	r3, r3
 800b702:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b706:	2b28      	cmp	r3, #40	@ 0x28
 800b708:	d125      	bne.n	800b756 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	685a      	ldr	r2, [r3, #4]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b718:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b724:	2301      	movs	r3, #1
 800b726:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d103      	bne.n	800b73a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	81bb      	strh	r3, [r7, #12]
 800b738:	e002      	b.n	800b740 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b748:	89ba      	ldrh	r2, [r7, #12]
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff f92a 	bl	800a9a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b754:	e00e      	b.n	800b774 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	60bb      	str	r3, [r7, #8]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	60bb      	str	r3, [r7, #8]
 800b76a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b774:	bf00      	nop
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b78a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b79a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b79c:	2300      	movs	r3, #0
 800b79e:	60bb      	str	r3, [r7, #8]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	60bb      	str	r3, [r7, #8]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f042 0201 	orr.w	r2, r2, #1
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7d8:	d172      	bne.n	800b8c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	2b22      	cmp	r3, #34	@ 0x22
 800b7de:	d002      	beq.n	800b7e6 <I2C_Slave_STOPF+0x6a>
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e4:	d135      	bne.n	800b852 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b802:	f043 0204 	orr.w	r2, r3, #4
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b818:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fc09 	bl	8009036 <HAL_DMA_GetState>
 800b824:	4603      	mov	r3, r0
 800b826:	2b01      	cmp	r3, #1
 800b828:	d049      	beq.n	800b8be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b82e:	4a69      	ldr	r2, [pc, #420]	@ (800b9d4 <I2C_Slave_STOPF+0x258>)
 800b830:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b836:	4618      	mov	r0, r3
 800b838:	f7fd fbdb 	bl	8008ff2 <HAL_DMA_Abort_IT>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d03d      	beq.n	800b8be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b84c:	4610      	mov	r0, r2
 800b84e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b850:	e035      	b.n	800b8be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b864:	b29b      	uxth	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b86e:	f043 0204 	orr.w	r2, r3, #4
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b884:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd fbd3 	bl	8009036 <HAL_DMA_GetState>
 800b890:	4603      	mov	r3, r0
 800b892:	2b01      	cmp	r3, #1
 800b894:	d014      	beq.n	800b8c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b89a:	4a4e      	ldr	r2, [pc, #312]	@ (800b9d4 <I2C_Slave_STOPF+0x258>)
 800b89c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd fba5 	bl	8008ff2 <HAL_DMA_Abort_IT>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d008      	beq.n	800b8c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
 800b8bc:	e000      	b.n	800b8c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d03e      	beq.n	800b948 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b04      	cmp	r3, #4
 800b8d6:	d112      	bne.n	800b8fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691a      	ldr	r2, [r3, #16]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b908:	2b40      	cmp	r3, #64	@ 0x40
 800b90a:	d112      	bne.n	800b932 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691a      	ldr	r2, [r3, #16]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b928:	b29b      	uxth	r3, r3
 800b92a:	3b01      	subs	r3, #1
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b936:	b29b      	uxth	r3, r3
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d005      	beq.n	800b948 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b940:	f043 0204 	orr.w	r2, r3, #4
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f8b7 	bl	800bac4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b956:	e039      	b.n	800b9cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b95c:	d109      	bne.n	800b972 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2228      	movs	r2, #40	@ 0x28
 800b968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff f811 	bl	800a994 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b28      	cmp	r3, #40	@ 0x28
 800b97c:	d111      	bne.n	800b9a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a15      	ldr	r2, [pc, #84]	@ (800b9d8 <I2C_Slave_STOPF+0x25c>)
 800b982:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff f812 	bl	800a9c4 <HAL_I2C_ListenCpltCallback>
}
 800b9a0:	e014      	b.n	800b9cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a6:	2b22      	cmp	r3, #34	@ 0x22
 800b9a8:	d002      	beq.n	800b9b0 <I2C_Slave_STOPF+0x234>
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b22      	cmp	r3, #34	@ 0x22
 800b9ae:	d10d      	bne.n	800b9cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7fe ffe4 	bl	800a994 <HAL_I2C_SlaveRxCpltCallback>
}
 800b9cc:	bf00      	nop
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	0800bfc9 	.word	0x0800bfc9
 800b9d8:	ffff0000 	.word	0xffff0000

0800b9dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b08      	cmp	r3, #8
 800b9f6:	d002      	beq.n	800b9fe <I2C_Slave_AF+0x22>
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d129      	bne.n	800ba52 <I2C_Slave_AF+0x76>
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ba00:	2b28      	cmp	r3, #40	@ 0x28
 800ba02:	d126      	bne.n	800ba52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a2e      	ldr	r2, [pc, #184]	@ (800bac0 <I2C_Slave_AF+0xe4>)
 800ba08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ba18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7fe ffba 	bl	800a9c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ba50:	e031      	b.n	800bab6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	2b21      	cmp	r3, #33	@ 0x21
 800ba56:	d129      	bne.n	800baac <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a19      	ldr	r2, [pc, #100]	@ (800bac0 <I2C_Slave_AF+0xe4>)
 800ba5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2221      	movs	r2, #33	@ 0x21
 800ba62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2220      	movs	r2, #32
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ba82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba9c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7fe f8f4 	bl	8009c8c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7fe ff6b 	bl	800a980 <HAL_I2C_SlaveTxCpltCallback>
}
 800baaa:	e004      	b.n	800bab6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bab4:	615a      	str	r2, [r3, #20]
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	ffff0000 	.word	0xffff0000

0800bac4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bad2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bada:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b10      	cmp	r3, #16
 800bae0:	d002      	beq.n	800bae8 <I2C_ITError+0x24>
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b40      	cmp	r3, #64	@ 0x40
 800bae6:	d10a      	bne.n	800bafe <I2C_ITError+0x3a>
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
 800baea:	2b22      	cmp	r3, #34	@ 0x22
 800baec:	d107      	bne.n	800bafe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bafc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bb04:	2b28      	cmp	r3, #40	@ 0x28
 800bb06:	d107      	bne.n	800bb18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2228      	movs	r2, #40	@ 0x28
 800bb12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bb16:	e015      	b.n	800bb44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb26:	d00a      	beq.n	800bb3e <I2C_ITError+0x7a>
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	2b60      	cmp	r3, #96	@ 0x60
 800bb2c:	d007      	beq.n	800bb3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2220      	movs	r2, #32
 800bb32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb52:	d162      	bne.n	800bc1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bb62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d020      	beq.n	800bbb4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb76:	4a6a      	ldr	r2, [pc, #424]	@ (800bd20 <I2C_ITError+0x25c>)
 800bb78:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fd fa37 	bl	8008ff2 <HAL_DMA_Abort_IT>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 8089 	beq.w	800bc9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f022 0201 	bic.w	r2, r2, #1
 800bb9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bbae:	4610      	mov	r0, r2
 800bbb0:	4798      	blx	r3
 800bbb2:	e074      	b.n	800bc9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb8:	4a59      	ldr	r2, [pc, #356]	@ (800bd20 <I2C_ITError+0x25c>)
 800bbba:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fd fa16 	bl	8008ff2 <HAL_DMA_Abort_IT>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d068      	beq.n	800bc9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd6:	2b40      	cmp	r3, #64	@ 0x40
 800bbd8:	d10b      	bne.n	800bbf2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	691a      	ldr	r2, [r3, #16]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe4:	b2d2      	uxtb	r2, r2
 800bbe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f022 0201 	bic.w	r2, r2, #1
 800bc00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bc14:	4610      	mov	r0, r2
 800bc16:	4798      	blx	r3
 800bc18:	e041      	b.n	800bc9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b60      	cmp	r3, #96	@ 0x60
 800bc24:	d125      	bne.n	800bc72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc3e:	2b40      	cmp	r3, #64	@ 0x40
 800bc40:	d10b      	bne.n	800bc5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	691a      	ldr	r2, [r3, #16]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc4c:	b2d2      	uxtb	r2, r2
 800bc4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f022 0201 	bic.w	r2, r2, #1
 800bc68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7fe fed2 	bl	800aa14 <HAL_I2C_AbortCpltCallback>
 800bc70:	e015      	b.n	800bc9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc7c:	2b40      	cmp	r3, #64	@ 0x40
 800bc7e:	d10b      	bne.n	800bc98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	691a      	ldr	r2, [r3, #16]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc8a:	b2d2      	uxtb	r2, r2
 800bc8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7fe feb1 	bl	800aa00 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f003 0301 	and.w	r3, r3, #1
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10e      	bne.n	800bccc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d109      	bne.n	800bccc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d104      	bne.n	800bccc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d007      	beq.n	800bcdc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bcda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bce2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	d113      	bne.n	800bd18 <I2C_ITError+0x254>
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	2b28      	cmp	r3, #40	@ 0x28
 800bcf4:	d110      	bne.n	800bd18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a0a      	ldr	r2, [pc, #40]	@ (800bd24 <I2C_ITError+0x260>)
 800bcfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7fe fe56 	bl	800a9c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	0800bfc9 	.word	0x0800bfc9
 800bd24:	ffff0000 	.word	0xffff0000

0800bd28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	607a      	str	r2, [r7, #4]
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	460b      	mov	r3, r1
 800bd36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d006      	beq.n	800bd52 <I2C_MasterRequestWrite+0x2a>
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d003      	beq.n	800bd52 <I2C_MasterRequestWrite+0x2a>
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bd50:	d108      	bne.n	800bd64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	e00b      	b.n	800bd7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd68:	2b12      	cmp	r3, #18
 800bd6a:	d107      	bne.n	800bd7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f000 f9c5 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00d      	beq.n	800bdb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bda2:	d103      	bne.n	800bdac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bdac:	2303      	movs	r3, #3
 800bdae:	e035      	b.n	800be1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bdb8:	d108      	bne.n	800bdcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdba:	897b      	ldrh	r3, [r7, #10]
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bdc8:	611a      	str	r2, [r3, #16]
 800bdca:	e01b      	b.n	800be04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bdcc:	897b      	ldrh	r3, [r7, #10]
 800bdce:	11db      	asrs	r3, r3, #7
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	f003 0306 	and.w	r3, r3, #6
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	f063 030f 	orn	r3, r3, #15
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	490e      	ldr	r1, [pc, #56]	@ (800be24 <I2C_MasterRequestWrite+0xfc>)
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f000 fa0e 	bl	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e010      	b.n	800be1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bdfa:	897b      	ldrh	r3, [r7, #10]
 800bdfc:	b2da      	uxtb	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	4907      	ldr	r1, [pc, #28]	@ (800be28 <I2C_MasterRequestWrite+0x100>)
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f000 f9fe 	bl	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	00010008 	.word	0x00010008
 800be28:	00010002 	.word	0x00010002

0800be2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	607a      	str	r2, [r7, #4]
 800be36:	603b      	str	r3, [r7, #0]
 800be38:	460b      	mov	r3, r1
 800be3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800be50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b08      	cmp	r3, #8
 800be56:	d006      	beq.n	800be66 <I2C_MasterRequestRead+0x3a>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d003      	beq.n	800be66 <I2C_MasterRequestRead+0x3a>
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800be64:	d108      	bne.n	800be78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be74:	601a      	str	r2, [r3, #0]
 800be76:	e00b      	b.n	800be90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be7c:	2b11      	cmp	r3, #17
 800be7e:	d107      	bne.n	800be90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 f93b 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00d      	beq.n	800bec4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800beb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800beb6:	d103      	bne.n	800bec0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bebe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bec0:	2303      	movs	r3, #3
 800bec2:	e079      	b.n	800bfb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800becc:	d108      	bne.n	800bee0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bece:	897b      	ldrh	r3, [r7, #10]
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	611a      	str	r2, [r3, #16]
 800bede:	e05f      	b.n	800bfa0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bee0:	897b      	ldrh	r3, [r7, #10]
 800bee2:	11db      	asrs	r3, r3, #7
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	f003 0306 	and.w	r3, r3, #6
 800beea:	b2db      	uxtb	r3, r3
 800beec:	f063 030f 	orn	r3, r3, #15
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	4930      	ldr	r1, [pc, #192]	@ (800bfc0 <I2C_MasterRequestRead+0x194>)
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 f984 	bl	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e054      	b.n	800bfb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bf0e:	897b      	ldrh	r3, [r7, #10]
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	4929      	ldr	r1, [pc, #164]	@ (800bfc4 <I2C_MasterRequestRead+0x198>)
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 f974 	bl	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e044      	b.n	800bfb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf2e:	2300      	movs	r3, #0
 800bf30:	613b      	str	r3, [r7, #16]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	613b      	str	r3, [r7, #16]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	613b      	str	r3, [r7, #16]
 800bf42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f8d9 	bl	800c118 <I2C_WaitOnFlagUntilTimeout>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf7a:	d103      	bne.n	800bf84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf82:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e017      	b.n	800bfb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bf88:	897b      	ldrh	r3, [r7, #10]
 800bf8a:	11db      	asrs	r3, r3, #7
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	f003 0306 	and.w	r3, r3, #6
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	f063 030e 	orn	r3, r3, #14
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4907      	ldr	r1, [pc, #28]	@ (800bfc4 <I2C_MasterRequestRead+0x198>)
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 f930 	bl	800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	00010008 	.word	0x00010008
 800bfc4:	00010002 	.word	0x00010002

0800bfc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfe0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bfe2:	4b4b      	ldr	r3, [pc, #300]	@ (800c110 <I2C_DMAAbort+0x148>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	08db      	lsrs	r3, r3, #3
 800bfe8:	4a4a      	ldr	r2, [pc, #296]	@ (800c114 <I2C_DMAAbort+0x14c>)
 800bfea:	fba2 2303 	umull	r2, r3, r2, r3
 800bfee:	0a1a      	lsrs	r2, r3, #8
 800bff0:	4613      	mov	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	00da      	lsls	r2, r3, #3
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c006:	f043 0220 	orr.w	r2, r3, #32
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c00e:	e00a      	b.n	800c026 <I2C_DMAAbort+0x5e>
    }
    count--;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3b01      	subs	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c024:	d0ea      	beq.n	800bffc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d003      	beq.n	800c036 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c032:	2200      	movs	r2, #0
 800c034:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c042:	2200      	movs	r2, #0
 800c044:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c054:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2200      	movs	r2, #0
 800c05a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c068:	2200      	movs	r2, #0
 800c06a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c078:	2200      	movs	r2, #0
 800c07a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 0201 	bic.w	r2, r2, #1
 800c08a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b60      	cmp	r3, #96	@ 0x60
 800c096:	d10e      	bne.n	800c0b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2220      	movs	r2, #32
 800c09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c0ae:	6978      	ldr	r0, [r7, #20]
 800c0b0:	f7fe fcb0 	bl	800aa14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c0b4:	e027      	b.n	800c106 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c0b6:	7cfb      	ldrb	r3, [r7, #19]
 800c0b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c0bc:	2b28      	cmp	r3, #40	@ 0x28
 800c0be:	d117      	bne.n	800c0f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0201 	orr.w	r2, r2, #1
 800c0ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c0de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	2228      	movs	r2, #40	@ 0x28
 800c0ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c0ee:	e007      	b.n	800c100 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2220      	movs	r2, #32
 800c0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c100:	6978      	ldr	r0, [r7, #20]
 800c102:	f7fe fc7d 	bl	800aa00 <HAL_I2C_ErrorCallback>
}
 800c106:	bf00      	nop
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000554 	.word	0x20000554
 800c114:	14f8b589 	.word	0x14f8b589

0800c118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	603b      	str	r3, [r7, #0]
 800c124:	4613      	mov	r3, r2
 800c126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c128:	e048      	b.n	800c1bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c130:	d044      	beq.n	800c1bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c132:	f7fc fd93 	bl	8008c5c <HAL_GetTick>
 800c136:	4602      	mov	r2, r0
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d302      	bcc.n	800c148 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d139      	bne.n	800c1bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	0c1b      	lsrs	r3, r3, #16
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d10d      	bne.n	800c16e <I2C_WaitOnFlagUntilTimeout+0x56>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	43da      	mvns	r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4013      	ands	r3, r2
 800c15e:	b29b      	uxth	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	bf0c      	ite	eq
 800c164:	2301      	moveq	r3, #1
 800c166:	2300      	movne	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	e00c      	b.n	800c188 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	43da      	mvns	r2, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	4013      	ands	r3, r2
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	bf0c      	ite	eq
 800c180:	2301      	moveq	r3, #1
 800c182:	2300      	movne	r3, #0
 800c184:	b2db      	uxtb	r3, r3
 800c186:	461a      	mov	r2, r3
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d116      	bne.n	800c1bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2220      	movs	r2, #32
 800c198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a8:	f043 0220 	orr.w	r2, r3, #32
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e023      	b.n	800c204 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	0c1b      	lsrs	r3, r3, #16
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d10d      	bne.n	800c1e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	43da      	mvns	r2, r3
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bf0c      	ite	eq
 800c1d8:	2301      	moveq	r3, #1
 800c1da:	2300      	movne	r3, #0
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	461a      	mov	r2, r3
 800c1e0:	e00c      	b.n	800c1fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	43da      	mvns	r2, r3
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bf0c      	ite	eq
 800c1f4:	2301      	moveq	r3, #1
 800c1f6:	2300      	movne	r3, #0
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d093      	beq.n	800c12a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c21a:	e071      	b.n	800c300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c22a:	d123      	bne.n	800c274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c23a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2220      	movs	r2, #32
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c260:	f043 0204 	orr.w	r2, r3, #4
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e067      	b.n	800c344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c27a:	d041      	beq.n	800c300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c27c:	f7fc fcee 	bl	8008c5c <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d302      	bcc.n	800c292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d136      	bne.n	800c300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	0c1b      	lsrs	r3, r3, #16
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d10c      	bne.n	800c2b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	43da      	mvns	r2, r3
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bf14      	ite	ne
 800c2ae:	2301      	movne	r3, #1
 800c2b0:	2300      	moveq	r3, #0
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	e00b      	b.n	800c2ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	43da      	mvns	r2, r3
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	bf14      	ite	ne
 800c2c8:	2301      	movne	r3, #1
 800c2ca:	2300      	moveq	r3, #0
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d016      	beq.n	800c300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2220      	movs	r2, #32
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2ec:	f043 0220 	orr.w	r2, r3, #32
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e021      	b.n	800c344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	0c1b      	lsrs	r3, r3, #16
 800c304:	b2db      	uxtb	r3, r3
 800c306:	2b01      	cmp	r3, #1
 800c308:	d10c      	bne.n	800c324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	695b      	ldr	r3, [r3, #20]
 800c310:	43da      	mvns	r2, r3
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	4013      	ands	r3, r2
 800c316:	b29b      	uxth	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	bf14      	ite	ne
 800c31c:	2301      	movne	r3, #1
 800c31e:	2300      	moveq	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e00b      	b.n	800c33c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	43da      	mvns	r2, r3
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	4013      	ands	r3, r2
 800c330:	b29b      	uxth	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	bf14      	ite	ne
 800c336:	2301      	movne	r3, #1
 800c338:	2300      	moveq	r3, #0
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f47f af6d 	bne.w	800c21c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c358:	e034      	b.n	800c3c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f915 	bl	800c58a <I2C_IsAcknowledgeFailed>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e034      	b.n	800c3d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c370:	d028      	beq.n	800c3c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c372:	f7fc fc73 	bl	8008c5c <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d302      	bcc.n	800c388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d11d      	bne.n	800c3c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c392:	2b80      	cmp	r3, #128	@ 0x80
 800c394:	d016      	beq.n	800c3c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3b0:	f043 0220 	orr.w	r2, r3, #32
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e007      	b.n	800c3d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	695b      	ldr	r3, [r3, #20]
 800c3ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3ce:	2b80      	cmp	r3, #128	@ 0x80
 800c3d0:	d1c3      	bne.n	800c35a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c3e8:	e034      	b.n	800c454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 f8cd 	bl	800c58a <I2C_IsAcknowledgeFailed>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e034      	b.n	800c464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c400:	d028      	beq.n	800c454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c402:	f7fc fc2b 	bl	8008c5c <HAL_GetTick>
 800c406:	4602      	mov	r2, r0
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d302      	bcc.n	800c418 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d11d      	bne.n	800c454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	f003 0304 	and.w	r3, r3, #4
 800c422:	2b04      	cmp	r3, #4
 800c424:	d016      	beq.n	800c454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2220      	movs	r2, #32
 800c430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c440:	f043 0220 	orr.w	r2, r3, #32
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e007      	b.n	800c464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	695b      	ldr	r3, [r3, #20]
 800c45a:	f003 0304 	and.w	r3, r3, #4
 800c45e:	2b04      	cmp	r3, #4
 800c460:	d1c3      	bne.n	800c3ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c474:	2300      	movs	r3, #0
 800c476:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c478:	4b13      	ldr	r3, [pc, #76]	@ (800c4c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	08db      	lsrs	r3, r3, #3
 800c47e:	4a13      	ldr	r2, [pc, #76]	@ (800c4cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c480:	fba2 2303 	umull	r2, r3, r2, r3
 800c484:	0a1a      	lsrs	r2, r3, #8
 800c486:	4613      	mov	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3b01      	subs	r3, #1
 800c492:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d107      	bne.n	800c4aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49e:	f043 0220 	orr.w	r2, r3, #32
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e008      	b.n	800c4bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4b8:	d0e9      	beq.n	800c48e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr
 800c4c8:	20000554 	.word	0x20000554
 800c4cc:	14f8b589 	.word	0x14f8b589

0800c4d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c4dc:	e049      	b.n	800c572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	f003 0310 	and.w	r3, r3, #16
 800c4e8:	2b10      	cmp	r3, #16
 800c4ea:	d119      	bne.n	800c520 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f06f 0210 	mvn.w	r2, #16
 800c4f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e030      	b.n	800c582 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c520:	f7fc fb9c 	bl	8008c5c <HAL_GetTick>
 800c524:	4602      	mov	r2, r0
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d302      	bcc.n	800c536 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d11d      	bne.n	800c572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c540:	2b40      	cmp	r3, #64	@ 0x40
 800c542:	d016      	beq.n	800c572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c55e:	f043 0220 	orr.w	r2, r3, #32
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e007      	b.n	800c582 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c57c:	2b40      	cmp	r3, #64	@ 0x40
 800c57e:	d1ae      	bne.n	800c4de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c58a:	b480      	push	{r7}
 800c58c:	b083      	sub	sp, #12
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c59c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5a0:	d11b      	bne.n	800c5da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c5aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2220      	movs	r2, #32
 800c5b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5c6:	f043 0204 	orr.w	r2, r3, #4
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c5f8:	d103      	bne.n	800c602 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c600:	e007      	b.n	800c612 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c606:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c60a:	d102      	bne.n	800c612 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2208      	movs	r2, #8
 800c610:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
	...

0800c620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e267      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d075      	beq.n	800c72a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c63e:	4b88      	ldr	r3, [pc, #544]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	f003 030c 	and.w	r3, r3, #12
 800c646:	2b04      	cmp	r3, #4
 800c648:	d00c      	beq.n	800c664 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c64a:	4b85      	ldr	r3, [pc, #532]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c652:	2b08      	cmp	r3, #8
 800c654:	d112      	bne.n	800c67c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c656:	4b82      	ldr	r3, [pc, #520]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c65e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c662:	d10b      	bne.n	800c67c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c664:	4b7e      	ldr	r3, [pc, #504]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d05b      	beq.n	800c728 <HAL_RCC_OscConfig+0x108>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d157      	bne.n	800c728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	e242      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c684:	d106      	bne.n	800c694 <HAL_RCC_OscConfig+0x74>
 800c686:	4b76      	ldr	r3, [pc, #472]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a75      	ldr	r2, [pc, #468]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c68c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	e01d      	b.n	800c6d0 <HAL_RCC_OscConfig+0xb0>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c69c:	d10c      	bne.n	800c6b8 <HAL_RCC_OscConfig+0x98>
 800c69e:	4b70      	ldr	r3, [pc, #448]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a6f      	ldr	r2, [pc, #444]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	4b6d      	ldr	r3, [pc, #436]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a6c      	ldr	r2, [pc, #432]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	e00b      	b.n	800c6d0 <HAL_RCC_OscConfig+0xb0>
 800c6b8:	4b69      	ldr	r3, [pc, #420]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a68      	ldr	r2, [pc, #416]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	4b66      	ldr	r3, [pc, #408]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a65      	ldr	r2, [pc, #404]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d013      	beq.n	800c700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6d8:	f7fc fac0 	bl	8008c5c <HAL_GetTick>
 800c6dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6de:	e008      	b.n	800c6f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6e0:	f7fc fabc 	bl	8008c5c <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	2b64      	cmp	r3, #100	@ 0x64
 800c6ec:	d901      	bls.n	800c6f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e207      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6f2:	4b5b      	ldr	r3, [pc, #364]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d0f0      	beq.n	800c6e0 <HAL_RCC_OscConfig+0xc0>
 800c6fe:	e014      	b.n	800c72a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c700:	f7fc faac 	bl	8008c5c <HAL_GetTick>
 800c704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c706:	e008      	b.n	800c71a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c708:	f7fc faa8 	bl	8008c5c <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	2b64      	cmp	r3, #100	@ 0x64
 800c714:	d901      	bls.n	800c71a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e1f3      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c71a:	4b51      	ldr	r3, [pc, #324]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1f0      	bne.n	800c708 <HAL_RCC_OscConfig+0xe8>
 800c726:	e000      	b.n	800c72a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b00      	cmp	r3, #0
 800c734:	d063      	beq.n	800c7fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c736:	4b4a      	ldr	r3, [pc, #296]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f003 030c 	and.w	r3, r3, #12
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00b      	beq.n	800c75a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c742:	4b47      	ldr	r3, [pc, #284]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c74a:	2b08      	cmp	r3, #8
 800c74c:	d11c      	bne.n	800c788 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c74e:	4b44      	ldr	r3, [pc, #272]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d116      	bne.n	800c788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c75a:	4b41      	ldr	r3, [pc, #260]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <HAL_RCC_OscConfig+0x152>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d001      	beq.n	800c772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e1c7      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c772:	4b3b      	ldr	r3, [pc, #236]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	4937      	ldr	r1, [pc, #220]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c782:	4313      	orrs	r3, r2
 800c784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c786:	e03a      	b.n	800c7fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d020      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c790:	4b34      	ldr	r3, [pc, #208]	@ (800c864 <HAL_RCC_OscConfig+0x244>)
 800c792:	2201      	movs	r2, #1
 800c794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c796:	f7fc fa61 	bl	8008c5c <HAL_GetTick>
 800c79a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c79c:	e008      	b.n	800c7b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c79e:	f7fc fa5d 	bl	8008c5c <HAL_GetTick>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d901      	bls.n	800c7b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e1a8      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7b0:	4b2b      	ldr	r3, [pc, #172]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f003 0302 	and.w	r3, r3, #2
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0f0      	beq.n	800c79e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7bc:	4b28      	ldr	r3, [pc, #160]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	4925      	ldr	r1, [pc, #148]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	600b      	str	r3, [r1, #0]
 800c7d0:	e015      	b.n	800c7fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7d2:	4b24      	ldr	r3, [pc, #144]	@ (800c864 <HAL_RCC_OscConfig+0x244>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d8:	f7fc fa40 	bl	8008c5c <HAL_GetTick>
 800c7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7de:	e008      	b.n	800c7f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7e0:	f7fc fa3c 	bl	8008c5c <HAL_GetTick>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d901      	bls.n	800c7f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e187      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0302 	and.w	r3, r3, #2
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1f0      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d036      	beq.n	800c878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	695b      	ldr	r3, [r3, #20]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d016      	beq.n	800c840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c812:	4b15      	ldr	r3, [pc, #84]	@ (800c868 <HAL_RCC_OscConfig+0x248>)
 800c814:	2201      	movs	r2, #1
 800c816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c818:	f7fc fa20 	bl	8008c5c <HAL_GetTick>
 800c81c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c81e:	e008      	b.n	800c832 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c820:	f7fc fa1c 	bl	8008c5c <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d901      	bls.n	800c832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e167      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c832:	4b0b      	ldr	r3, [pc, #44]	@ (800c860 <HAL_RCC_OscConfig+0x240>)
 800c834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d0f0      	beq.n	800c820 <HAL_RCC_OscConfig+0x200>
 800c83e:	e01b      	b.n	800c878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c840:	4b09      	ldr	r3, [pc, #36]	@ (800c868 <HAL_RCC_OscConfig+0x248>)
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c846:	f7fc fa09 	bl	8008c5c <HAL_GetTick>
 800c84a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c84c:	e00e      	b.n	800c86c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c84e:	f7fc fa05 	bl	8008c5c <HAL_GetTick>
 800c852:	4602      	mov	r2, r0
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d907      	bls.n	800c86c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c85c:	2303      	movs	r3, #3
 800c85e:	e150      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
 800c860:	40023800 	.word	0x40023800
 800c864:	42470000 	.word	0x42470000
 800c868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c86c:	4b88      	ldr	r3, [pc, #544]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c870:	f003 0302 	and.w	r3, r3, #2
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1ea      	bne.n	800c84e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8097 	beq.w	800c9b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c88a:	4b81      	ldr	r3, [pc, #516]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c88e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10f      	bne.n	800c8b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c896:	2300      	movs	r3, #0
 800c898:	60bb      	str	r3, [r7, #8]
 800c89a:	4b7d      	ldr	r3, [pc, #500]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c89e:	4a7c      	ldr	r2, [pc, #496]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c8a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c8a4:	6413      	str	r3, [r2, #64]	@ 0x40
 800c8a6:	4b7a      	ldr	r3, [pc, #488]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8ae:	60bb      	str	r3, [r7, #8]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8b6:	4b77      	ldr	r3, [pc, #476]	@ (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d118      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c8c2:	4b74      	ldr	r3, [pc, #464]	@ (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a73      	ldr	r2, [pc, #460]	@ (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8ce:	f7fc f9c5 	bl	8008c5c <HAL_GetTick>
 800c8d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8d4:	e008      	b.n	800c8e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8d6:	f7fc f9c1 	bl	8008c5c <HAL_GetTick>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d901      	bls.n	800c8e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e10c      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8e8:	4b6a      	ldr	r3, [pc, #424]	@ (800ca94 <HAL_RCC_OscConfig+0x474>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d0f0      	beq.n	800c8d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d106      	bne.n	800c90a <HAL_RCC_OscConfig+0x2ea>
 800c8fc:	4b64      	ldr	r3, [pc, #400]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c900:	4a63      	ldr	r2, [pc, #396]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c902:	f043 0301 	orr.w	r3, r3, #1
 800c906:	6713      	str	r3, [r2, #112]	@ 0x70
 800c908:	e01c      	b.n	800c944 <HAL_RCC_OscConfig+0x324>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	2b05      	cmp	r3, #5
 800c910:	d10c      	bne.n	800c92c <HAL_RCC_OscConfig+0x30c>
 800c912:	4b5f      	ldr	r3, [pc, #380]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c916:	4a5e      	ldr	r2, [pc, #376]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c918:	f043 0304 	orr.w	r3, r3, #4
 800c91c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c91e:	4b5c      	ldr	r3, [pc, #368]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c922:	4a5b      	ldr	r2, [pc, #364]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c924:	f043 0301 	orr.w	r3, r3, #1
 800c928:	6713      	str	r3, [r2, #112]	@ 0x70
 800c92a:	e00b      	b.n	800c944 <HAL_RCC_OscConfig+0x324>
 800c92c:	4b58      	ldr	r3, [pc, #352]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c92e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c930:	4a57      	ldr	r2, [pc, #348]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c932:	f023 0301 	bic.w	r3, r3, #1
 800c936:	6713      	str	r3, [r2, #112]	@ 0x70
 800c938:	4b55      	ldr	r3, [pc, #340]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c93a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c93c:	4a54      	ldr	r2, [pc, #336]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c93e:	f023 0304 	bic.w	r3, r3, #4
 800c942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d015      	beq.n	800c978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c94c:	f7fc f986 	bl	8008c5c <HAL_GetTick>
 800c950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c952:	e00a      	b.n	800c96a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c954:	f7fc f982 	bl	8008c5c <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c962:	4293      	cmp	r3, r2
 800c964:	d901      	bls.n	800c96a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c966:	2303      	movs	r3, #3
 800c968:	e0cb      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c96a:	4b49      	ldr	r3, [pc, #292]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c96c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0ee      	beq.n	800c954 <HAL_RCC_OscConfig+0x334>
 800c976:	e014      	b.n	800c9a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c978:	f7fc f970 	bl	8008c5c <HAL_GetTick>
 800c97c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c97e:	e00a      	b.n	800c996 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c980:	f7fc f96c 	bl	8008c5c <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c98e:	4293      	cmp	r3, r2
 800c990:	d901      	bls.n	800c996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e0b5      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c996:	4b3e      	ldr	r3, [pc, #248]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c99a:	f003 0302 	and.w	r3, r3, #2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1ee      	bne.n	800c980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d105      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9a8:	4b39      	ldr	r3, [pc, #228]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ac:	4a38      	ldr	r2, [pc, #224]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 80a1 	beq.w	800cb00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9be:	4b34      	ldr	r3, [pc, #208]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	f003 030c 	and.w	r3, r3, #12
 800c9c6:	2b08      	cmp	r3, #8
 800c9c8:	d05c      	beq.n	800ca84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	699b      	ldr	r3, [r3, #24]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d141      	bne.n	800ca56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9d2:	4b31      	ldr	r3, [pc, #196]	@ (800ca98 <HAL_RCC_OscConfig+0x478>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9d8:	f7fc f940 	bl	8008c5c <HAL_GetTick>
 800c9dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9de:	e008      	b.n	800c9f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9e0:	f7fc f93c 	bl	8008c5c <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d901      	bls.n	800c9f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e087      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9f2:	4b27      	ldr	r3, [pc, #156]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1f0      	bne.n	800c9e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69da      	ldr	r2, [r3, #28]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	431a      	orrs	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca0c:	019b      	lsls	r3, r3, #6
 800ca0e:	431a      	orrs	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca14:	085b      	lsrs	r3, r3, #1
 800ca16:	3b01      	subs	r3, #1
 800ca18:	041b      	lsls	r3, r3, #16
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca20:	061b      	lsls	r3, r3, #24
 800ca22:	491b      	ldr	r1, [pc, #108]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800ca24:	4313      	orrs	r3, r2
 800ca26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca28:	4b1b      	ldr	r3, [pc, #108]	@ (800ca98 <HAL_RCC_OscConfig+0x478>)
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca2e:	f7fc f915 	bl	8008c5c <HAL_GetTick>
 800ca32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca34:	e008      	b.n	800ca48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca36:	f7fc f911 	bl	8008c5c <HAL_GetTick>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	2b02      	cmp	r3, #2
 800ca42:	d901      	bls.n	800ca48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	e05c      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca48:	4b11      	ldr	r3, [pc, #68]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d0f0      	beq.n	800ca36 <HAL_RCC_OscConfig+0x416>
 800ca54:	e054      	b.n	800cb00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca56:	4b10      	ldr	r3, [pc, #64]	@ (800ca98 <HAL_RCC_OscConfig+0x478>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca5c:	f7fc f8fe 	bl	8008c5c <HAL_GetTick>
 800ca60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca62:	e008      	b.n	800ca76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca64:	f7fc f8fa 	bl	8008c5c <HAL_GetTick>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	2b02      	cmp	r3, #2
 800ca70:	d901      	bls.n	800ca76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e045      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca76:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <HAL_RCC_OscConfig+0x470>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1f0      	bne.n	800ca64 <HAL_RCC_OscConfig+0x444>
 800ca82:	e03d      	b.n	800cb00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d107      	bne.n	800ca9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e038      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
 800ca90:	40023800 	.word	0x40023800
 800ca94:	40007000 	.word	0x40007000
 800ca98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ca9c:	4b1b      	ldr	r3, [pc, #108]	@ (800cb0c <HAL_RCC_OscConfig+0x4ec>)
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d028      	beq.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d121      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d11a      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cacc:	4013      	ands	r3, r2
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d111      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae2:	085b      	lsrs	r3, r3, #1
 800cae4:	3b01      	subs	r3, #1
 800cae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cae8:	429a      	cmp	r2, r3
 800caea:	d107      	bne.n	800cafc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d001      	beq.n	800cb00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e000      	b.n	800cb02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	40023800 	.word	0x40023800

0800cb10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e0cc      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cb24:	4b68      	ldr	r3, [pc, #416]	@ (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 0307 	and.w	r3, r3, #7
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d90c      	bls.n	800cb4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb32:	4b65      	ldr	r3, [pc, #404]	@ (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb3a:	4b63      	ldr	r3, [pc, #396]	@ (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d001      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e0b8      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0302 	and.w	r3, r3, #2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d020      	beq.n	800cb9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d005      	beq.n	800cb70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb64:	4b59      	ldr	r3, [pc, #356]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	4a58      	ldr	r2, [pc, #352]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800cb6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0308 	and.w	r3, r3, #8
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d005      	beq.n	800cb88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb7c:	4b53      	ldr	r3, [pc, #332]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	4a52      	ldr	r2, [pc, #328]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800cb86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb88:	4b50      	ldr	r3, [pc, #320]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	494d      	ldr	r1, [pc, #308]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d044      	beq.n	800cc30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d107      	bne.n	800cbbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbae:	4b47      	ldr	r3, [pc, #284]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d119      	bne.n	800cbee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e07f      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d003      	beq.n	800cbce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d107      	bne.n	800cbde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cbce:	4b3f      	ldr	r3, [pc, #252]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d109      	bne.n	800cbee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e06f      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbde:	4b3b      	ldr	r3, [pc, #236]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 0302 	and.w	r3, r3, #2
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e067      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cbee:	4b37      	ldr	r3, [pc, #220]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f023 0203 	bic.w	r2, r3, #3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	4934      	ldr	r1, [pc, #208]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc00:	f7fc f82c 	bl	8008c5c <HAL_GetTick>
 800cc04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc06:	e00a      	b.n	800cc1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc08:	f7fc f828 	bl	8008c5c <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d901      	bls.n	800cc1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e04f      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc1e:	4b2b      	ldr	r3, [pc, #172]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 020c 	and.w	r2, r3, #12
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d1eb      	bne.n	800cc08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc30:	4b25      	ldr	r3, [pc, #148]	@ (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0307 	and.w	r3, r3, #7
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d20c      	bcs.n	800cc58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc3e:	4b22      	ldr	r3, [pc, #136]	@ (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	b2d2      	uxtb	r2, r2
 800cc44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc46:	4b20      	ldr	r3, [pc, #128]	@ (800ccc8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d001      	beq.n	800cc58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e032      	b.n	800ccbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d008      	beq.n	800cc76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc64:	4b19      	ldr	r3, [pc, #100]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	4916      	ldr	r1, [pc, #88]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc72:	4313      	orrs	r3, r2
 800cc74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0308 	and.w	r3, r3, #8
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc82:	4b12      	ldr	r3, [pc, #72]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	490e      	ldr	r1, [pc, #56]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc92:	4313      	orrs	r3, r2
 800cc94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cc96:	f000 f821 	bl	800ccdc <HAL_RCC_GetSysClockFreq>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4b0b      	ldr	r3, [pc, #44]	@ (800cccc <HAL_RCC_ClockConfig+0x1bc>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	091b      	lsrs	r3, r3, #4
 800cca2:	f003 030f 	and.w	r3, r3, #15
 800cca6:	490a      	ldr	r1, [pc, #40]	@ (800ccd0 <HAL_RCC_ClockConfig+0x1c0>)
 800cca8:	5ccb      	ldrb	r3, [r1, r3]
 800ccaa:	fa22 f303 	lsr.w	r3, r2, r3
 800ccae:	4a09      	ldr	r2, [pc, #36]	@ (800ccd4 <HAL_RCC_ClockConfig+0x1c4>)
 800ccb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ccb2:	4b09      	ldr	r3, [pc, #36]	@ (800ccd8 <HAL_RCC_ClockConfig+0x1c8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fb ff8c 	bl	8008bd4 <HAL_InitTick>

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	40023c00 	.word	0x40023c00
 800cccc:	40023800 	.word	0x40023800
 800ccd0:	0801001c 	.word	0x0801001c
 800ccd4:	20000554 	.word	0x20000554
 800ccd8:	20000558 	.word	0x20000558

0800ccdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cce0:	b094      	sub	sp, #80	@ 0x50
 800cce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800cce4:	2300      	movs	r3, #0
 800cce6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ccec:	2300      	movs	r3, #0
 800ccee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccf4:	4b79      	ldr	r3, [pc, #484]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	f003 030c 	and.w	r3, r3, #12
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d00d      	beq.n	800cd1c <HAL_RCC_GetSysClockFreq+0x40>
 800cd00:	2b08      	cmp	r3, #8
 800cd02:	f200 80e1 	bhi.w	800cec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <HAL_RCC_GetSysClockFreq+0x34>
 800cd0a:	2b04      	cmp	r3, #4
 800cd0c:	d003      	beq.n	800cd16 <HAL_RCC_GetSysClockFreq+0x3a>
 800cd0e:	e0db      	b.n	800cec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd10:	4b73      	ldr	r3, [pc, #460]	@ (800cee0 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cd14:	e0db      	b.n	800cece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd16:	4b73      	ldr	r3, [pc, #460]	@ (800cee4 <HAL_RCC_GetSysClockFreq+0x208>)
 800cd18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cd1a:	e0d8      	b.n	800cece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd1c:	4b6f      	ldr	r3, [pc, #444]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd26:	4b6d      	ldr	r3, [pc, #436]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d063      	beq.n	800cdfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd32:	4b6a      	ldr	r3, [pc, #424]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	099b      	lsrs	r3, r3, #6
 800cd38:	2200      	movs	r2, #0
 800cd3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd44:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd46:	2300      	movs	r3, #0
 800cd48:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800cd4e:	4622      	mov	r2, r4
 800cd50:	462b      	mov	r3, r5
 800cd52:	f04f 0000 	mov.w	r0, #0
 800cd56:	f04f 0100 	mov.w	r1, #0
 800cd5a:	0159      	lsls	r1, r3, #5
 800cd5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cd60:	0150      	lsls	r0, r2, #5
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	4621      	mov	r1, r4
 800cd68:	1a51      	subs	r1, r2, r1
 800cd6a:	6139      	str	r1, [r7, #16]
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	eb63 0301 	sbc.w	r3, r3, r1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	f04f 0300 	mov.w	r3, #0
 800cd7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd80:	4659      	mov	r1, fp
 800cd82:	018b      	lsls	r3, r1, #6
 800cd84:	4651      	mov	r1, sl
 800cd86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cd8a:	4651      	mov	r1, sl
 800cd8c:	018a      	lsls	r2, r1, #6
 800cd8e:	4651      	mov	r1, sl
 800cd90:	ebb2 0801 	subs.w	r8, r2, r1
 800cd94:	4659      	mov	r1, fp
 800cd96:	eb63 0901 	sbc.w	r9, r3, r1
 800cd9a:	f04f 0200 	mov.w	r2, #0
 800cd9e:	f04f 0300 	mov.w	r3, #0
 800cda2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cda6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdae:	4690      	mov	r8, r2
 800cdb0:	4699      	mov	r9, r3
 800cdb2:	4623      	mov	r3, r4
 800cdb4:	eb18 0303 	adds.w	r3, r8, r3
 800cdb8:	60bb      	str	r3, [r7, #8]
 800cdba:	462b      	mov	r3, r5
 800cdbc:	eb49 0303 	adc.w	r3, r9, r3
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	f04f 0200 	mov.w	r2, #0
 800cdc6:	f04f 0300 	mov.w	r3, #0
 800cdca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cdce:	4629      	mov	r1, r5
 800cdd0:	024b      	lsls	r3, r1, #9
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cdd8:	4621      	mov	r1, r4
 800cdda:	024a      	lsls	r2, r1, #9
 800cddc:	4610      	mov	r0, r2
 800cdde:	4619      	mov	r1, r3
 800cde0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cde2:	2200      	movs	r2, #0
 800cde4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cde6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cde8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cdec:	f7f3 fa48 	bl	8000280 <__aeabi_uldivmod>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdf8:	e058      	b.n	800ceac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cdfa:	4b38      	ldr	r3, [pc, #224]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	099b      	lsrs	r3, r3, #6
 800ce00:	2200      	movs	r2, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	4611      	mov	r1, r2
 800ce06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ce0a:	623b      	str	r3, [r7, #32]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ce14:	4642      	mov	r2, r8
 800ce16:	464b      	mov	r3, r9
 800ce18:	f04f 0000 	mov.w	r0, #0
 800ce1c:	f04f 0100 	mov.w	r1, #0
 800ce20:	0159      	lsls	r1, r3, #5
 800ce22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce26:	0150      	lsls	r0, r2, #5
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ce32:	4649      	mov	r1, r9
 800ce34:	eb63 0b01 	sbc.w	fp, r3, r1
 800ce38:	f04f 0200 	mov.w	r2, #0
 800ce3c:	f04f 0300 	mov.w	r3, #0
 800ce40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ce44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ce48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ce4c:	ebb2 040a 	subs.w	r4, r2, sl
 800ce50:	eb63 050b 	sbc.w	r5, r3, fp
 800ce54:	f04f 0200 	mov.w	r2, #0
 800ce58:	f04f 0300 	mov.w	r3, #0
 800ce5c:	00eb      	lsls	r3, r5, #3
 800ce5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce62:	00e2      	lsls	r2, r4, #3
 800ce64:	4614      	mov	r4, r2
 800ce66:	461d      	mov	r5, r3
 800ce68:	4643      	mov	r3, r8
 800ce6a:	18e3      	adds	r3, r4, r3
 800ce6c:	603b      	str	r3, [r7, #0]
 800ce6e:	464b      	mov	r3, r9
 800ce70:	eb45 0303 	adc.w	r3, r5, r3
 800ce74:	607b      	str	r3, [r7, #4]
 800ce76:	f04f 0200 	mov.w	r2, #0
 800ce7a:	f04f 0300 	mov.w	r3, #0
 800ce7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ce82:	4629      	mov	r1, r5
 800ce84:	028b      	lsls	r3, r1, #10
 800ce86:	4621      	mov	r1, r4
 800ce88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	028a      	lsls	r2, r1, #10
 800ce90:	4610      	mov	r0, r2
 800ce92:	4619      	mov	r1, r3
 800ce94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce96:	2200      	movs	r2, #0
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	61fa      	str	r2, [r7, #28]
 800ce9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cea0:	f7f3 f9ee 	bl	8000280 <__aeabi_uldivmod>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4613      	mov	r3, r2
 800ceaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ceac:	4b0b      	ldr	r3, [pc, #44]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x200>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	0c1b      	lsrs	r3, r3, #16
 800ceb2:	f003 0303 	and.w	r3, r3, #3
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800cebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cec6:	e002      	b.n	800cece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cec8:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ceca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3750      	adds	r7, #80	@ 0x50
 800ced4:	46bd      	mov	sp, r7
 800ced6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ceda:	bf00      	nop
 800cedc:	40023800 	.word	0x40023800
 800cee0:	00f42400 	.word	0x00f42400
 800cee4:	007a1200 	.word	0x007a1200

0800cee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cee8:	b480      	push	{r7}
 800ceea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ceec:	4b03      	ldr	r3, [pc, #12]	@ (800cefc <HAL_RCC_GetHCLKFreq+0x14>)
 800ceee:	681b      	ldr	r3, [r3, #0]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	20000554 	.word	0x20000554

0800cf00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cf04:	f7ff fff0 	bl	800cee8 <HAL_RCC_GetHCLKFreq>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	0a9b      	lsrs	r3, r3, #10
 800cf10:	f003 0307 	and.w	r3, r3, #7
 800cf14:	4903      	ldr	r1, [pc, #12]	@ (800cf24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf16:	5ccb      	ldrb	r3, [r1, r3]
 800cf18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	40023800 	.word	0x40023800
 800cf24:	0801002c 	.word	0x0801002c

0800cf28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cf2c:	f7ff ffdc 	bl	800cee8 <HAL_RCC_GetHCLKFreq>
 800cf30:	4602      	mov	r2, r0
 800cf32:	4b05      	ldr	r3, [pc, #20]	@ (800cf48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	0b5b      	lsrs	r3, r3, #13
 800cf38:	f003 0307 	and.w	r3, r3, #7
 800cf3c:	4903      	ldr	r1, [pc, #12]	@ (800cf4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf3e:	5ccb      	ldrb	r3, [r1, r3]
 800cf40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	40023800 	.word	0x40023800
 800cf4c:	0801002c 	.word	0x0801002c

0800cf50 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cf56:	f7fb fe81 	bl	8008c5c <HAL_GetTick>
 800cf5a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800cf5c:	4b5d      	ldr	r3, [pc, #372]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a5c      	ldr	r2, [pc, #368]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cf62:	f043 0301 	orr.w	r3, r3, #1
 800cf66:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800cf68:	e008      	b.n	800cf7c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf6a:	f7fb fe77 	bl	8008c5c <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d901      	bls.n	800cf7c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e0a7      	b.n	800d0cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800cf7c:	4b55      	ldr	r3, [pc, #340]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 0302 	and.w	r3, r3, #2
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d0f0      	beq.n	800cf6a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800cf88:	4b52      	ldr	r3, [pc, #328]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a51      	ldr	r2, [pc, #324]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cf8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cf94:	f7fb fe62 	bl	8008c5c <HAL_GetTick>
 800cf98:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800cf9a:	4b4e      	ldr	r3, [pc, #312]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800cfa0:	e00a      	b.n	800cfb8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfa2:	f7fb fe5b 	bl	8008c5c <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d901      	bls.n	800cfb8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e089      	b.n	800d0cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800cfb8:	4b46      	ldr	r3, [pc, #280]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f003 030c 	and.w	r3, r3, #12
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1ee      	bne.n	800cfa2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cfc4:	f7fb fe4a 	bl	8008c5c <HAL_GetTick>
 800cfc8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800cfca:	4b42      	ldr	r3, [pc, #264]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a41      	ldr	r2, [pc, #260]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cfd0:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800cfd4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800cfd6:	e008      	b.n	800cfea <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfd8:	f7fb fe40 	bl	8008c5c <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b64      	cmp	r3, #100	@ 0x64
 800cfe4:	d901      	bls.n	800cfea <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e070      	b.n	800d0cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800cfea:	4b3a      	ldr	r3, [pc, #232]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1f0      	bne.n	800cfd8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cff6:	f7fb fe31 	bl	8008c5c <HAL_GetTick>
 800cffa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800cffc:	4b35      	ldr	r3, [pc, #212]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a34      	ldr	r2, [pc, #208]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d006:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800d008:	e008      	b.n	800d01c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d00a:	f7fb fe27 	bl	8008c5c <HAL_GetTick>
 800d00e:	4602      	mov	r2, r0
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	1ad3      	subs	r3, r2, r3
 800d014:	2b02      	cmp	r3, #2
 800d016:	d901      	bls.n	800d01c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800d018:	2303      	movs	r3, #3
 800d01a:	e057      	b.n	800d0cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800d01c:	4b2d      	ldr	r3, [pc, #180]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1f0      	bne.n	800d00a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800d028:	f7fb fe18 	bl	8008c5c <HAL_GetTick>
 800d02c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800d02e:	4b29      	ldr	r3, [pc, #164]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a28      	ldr	r2, [pc, #160]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d034:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d038:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800d03a:	e008      	b.n	800d04e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d03c:	f7fb fe0e 	bl	8008c5c <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	2b02      	cmp	r3, #2
 800d048:	d901      	bls.n	800d04e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e03e      	b.n	800d0cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800d04e:	4b21      	ldr	r3, [pc, #132]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1f0      	bne.n	800d03c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800d05a:	4b1e      	ldr	r3, [pc, #120]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d05c:	4a1e      	ldr	r2, [pc, #120]	@ (800d0d8 <HAL_RCC_DeInit+0x188>)
 800d05e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800d060:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d062:	4a1e      	ldr	r2, [pc, #120]	@ (800d0dc <HAL_RCC_DeInit+0x18c>)
 800d064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800d068:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	4a19      	ldr	r2, [pc, #100]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d06e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800d072:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800d074:	4b17      	ldr	r3, [pc, #92]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	4a16      	ldr	r2, [pc, #88]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d07a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d07e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800d080:	4b14      	ldr	r3, [pc, #80]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	4a13      	ldr	r2, [pc, #76]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d086:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800d08a:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800d08c:	4b11      	ldr	r3, [pc, #68]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	4a10      	ldr	r2, [pc, #64]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d092:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d096:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800d098:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d09a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d09c:	4a0d      	ldr	r2, [pc, #52]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d09e:	f023 0301 	bic.w	r3, r3, #1
 800d0a2:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800d0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d0a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0a8:	4a0a      	ldr	r2, [pc, #40]	@ (800d0d4 <HAL_RCC_DeInit+0x184>)
 800d0aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d0ae:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800d0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e0 <HAL_RCC_DeInit+0x190>)
 800d0b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d0e4 <HAL_RCC_DeInit+0x194>)
 800d0b4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e8 <HAL_RCC_DeInit+0x198>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fb fd8a 	bl	8008bd4 <HAL_InitTick>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e000      	b.n	800d0cc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
  }
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	40023800 	.word	0x40023800
 800d0d8:	04003010 	.word	0x04003010
 800d0dc:	20003000 	.word	0x20003000
 800d0e0:	20000554 	.word	0x20000554
 800d0e4:	00f42400 	.word	0x00f42400
 800d0e8:	20000558 	.word	0x20000558

0800d0ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e041      	b.n	800d182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7fb fb50 	bl	80087b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2202      	movs	r2, #2
 800d11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3304      	adds	r3, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f000 fa70 	bl	800d610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d001      	beq.n	800d1a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e044      	b.n	800d22e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68da      	ldr	r2, [r3, #12]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0201 	orr.w	r2, r2, #1
 800d1ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a1e      	ldr	r2, [pc, #120]	@ (800d23c <HAL_TIM_Base_Start_IT+0xb0>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d018      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0x6c>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1ce:	d013      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0x6c>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d240 <HAL_TIM_Base_Start_IT+0xb4>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d00e      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0x6c>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a19      	ldr	r2, [pc, #100]	@ (800d244 <HAL_TIM_Base_Start_IT+0xb8>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d009      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0x6c>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a17      	ldr	r2, [pc, #92]	@ (800d248 <HAL_TIM_Base_Start_IT+0xbc>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d004      	beq.n	800d1f8 <HAL_TIM_Base_Start_IT+0x6c>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a16      	ldr	r2, [pc, #88]	@ (800d24c <HAL_TIM_Base_Start_IT+0xc0>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d111      	bne.n	800d21c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f003 0307 	and.w	r3, r3, #7
 800d202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b06      	cmp	r3, #6
 800d208:	d010      	beq.n	800d22c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f042 0201 	orr.w	r2, r2, #1
 800d218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21a:	e007      	b.n	800d22c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f042 0201 	orr.w	r2, r2, #1
 800d22a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	40010000 	.word	0x40010000
 800d240:	40000400 	.word	0x40000400
 800d244:	40000800 	.word	0x40000800
 800d248:	40000c00 	.word	0x40000c00
 800d24c:	40014000 	.word	0x40014000

0800d250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	f003 0302 	and.w	r3, r3, #2
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d020      	beq.n	800d2b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01b      	beq.n	800d2b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f06f 0202 	mvn.w	r2, #2
 800d284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2201      	movs	r2, #1
 800d28a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	f003 0303 	and.w	r3, r3, #3
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f999 	bl	800d5d2 <HAL_TIM_IC_CaptureCallback>
 800d2a0:	e005      	b.n	800d2ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f98b 	bl	800d5be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 f99c 	bl	800d5e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	f003 0304 	and.w	r3, r3, #4
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d020      	beq.n	800d300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f003 0304 	and.w	r3, r3, #4
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d01b      	beq.n	800d300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f06f 0204 	mvn.w	r2, #4
 800d2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f973 	bl	800d5d2 <HAL_TIM_IC_CaptureCallback>
 800d2ec:	e005      	b.n	800d2fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f965 	bl	800d5be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f976 	bl	800d5e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f003 0308 	and.w	r3, r3, #8
 800d306:	2b00      	cmp	r3, #0
 800d308:	d020      	beq.n	800d34c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f003 0308 	and.w	r3, r3, #8
 800d310:	2b00      	cmp	r3, #0
 800d312:	d01b      	beq.n	800d34c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f06f 0208 	mvn.w	r2, #8
 800d31c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2204      	movs	r2, #4
 800d322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	f003 0303 	and.w	r3, r3, #3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f94d 	bl	800d5d2 <HAL_TIM_IC_CaptureCallback>
 800d338:	e005      	b.n	800d346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f93f 	bl	800d5be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f950 	bl	800d5e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	f003 0310 	and.w	r3, r3, #16
 800d352:	2b00      	cmp	r3, #0
 800d354:	d020      	beq.n	800d398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f003 0310 	and.w	r3, r3, #16
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01b      	beq.n	800d398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f06f 0210 	mvn.w	r2, #16
 800d368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2208      	movs	r2, #8
 800d36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f927 	bl	800d5d2 <HAL_TIM_IC_CaptureCallback>
 800d384:	e005      	b.n	800d392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f919 	bl	800d5be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f92a 	bl	800d5e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00c      	beq.n	800d3bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d007      	beq.n	800d3bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f06f 0201 	mvn.w	r2, #1
 800d3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7f6 fcd4 	bl	8003d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00c      	beq.n	800d3e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d007      	beq.n	800d3e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fab0 	bl	800d940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00c      	beq.n	800d404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f8fb 	bl	800d5fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f003 0320 	and.w	r3, r3, #32
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00c      	beq.n	800d428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f003 0320 	and.w	r3, r3, #32
 800d414:	2b00      	cmp	r3, #0
 800d416:	d007      	beq.n	800d428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f06f 0220 	mvn.w	r2, #32
 800d420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fa82 	bl	800d92c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d444:	2b01      	cmp	r3, #1
 800d446:	d101      	bne.n	800d44c <HAL_TIM_ConfigClockSource+0x1c>
 800d448:	2302      	movs	r3, #2
 800d44a:	e0b4      	b.n	800d5b6 <HAL_TIM_ConfigClockSource+0x186>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2202      	movs	r2, #2
 800d458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d46a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d484:	d03e      	beq.n	800d504 <HAL_TIM_ConfigClockSource+0xd4>
 800d486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d48a:	f200 8087 	bhi.w	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d48e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d492:	f000 8086 	beq.w	800d5a2 <HAL_TIM_ConfigClockSource+0x172>
 800d496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d49a:	d87f      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d49c:	2b70      	cmp	r3, #112	@ 0x70
 800d49e:	d01a      	beq.n	800d4d6 <HAL_TIM_ConfigClockSource+0xa6>
 800d4a0:	2b70      	cmp	r3, #112	@ 0x70
 800d4a2:	d87b      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d4a4:	2b60      	cmp	r3, #96	@ 0x60
 800d4a6:	d050      	beq.n	800d54a <HAL_TIM_ConfigClockSource+0x11a>
 800d4a8:	2b60      	cmp	r3, #96	@ 0x60
 800d4aa:	d877      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d4ac:	2b50      	cmp	r3, #80	@ 0x50
 800d4ae:	d03c      	beq.n	800d52a <HAL_TIM_ConfigClockSource+0xfa>
 800d4b0:	2b50      	cmp	r3, #80	@ 0x50
 800d4b2:	d873      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d4b4:	2b40      	cmp	r3, #64	@ 0x40
 800d4b6:	d058      	beq.n	800d56a <HAL_TIM_ConfigClockSource+0x13a>
 800d4b8:	2b40      	cmp	r3, #64	@ 0x40
 800d4ba:	d86f      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d4bc:	2b30      	cmp	r3, #48	@ 0x30
 800d4be:	d064      	beq.n	800d58a <HAL_TIM_ConfigClockSource+0x15a>
 800d4c0:	2b30      	cmp	r3, #48	@ 0x30
 800d4c2:	d86b      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d4c4:	2b20      	cmp	r3, #32
 800d4c6:	d060      	beq.n	800d58a <HAL_TIM_ConfigClockSource+0x15a>
 800d4c8:	2b20      	cmp	r3, #32
 800d4ca:	d867      	bhi.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d05c      	beq.n	800d58a <HAL_TIM_ConfigClockSource+0x15a>
 800d4d0:	2b10      	cmp	r3, #16
 800d4d2:	d05a      	beq.n	800d58a <HAL_TIM_ConfigClockSource+0x15a>
 800d4d4:	e062      	b.n	800d59c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d4e6:	f000 f993 	bl	800d810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d4f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	609a      	str	r2, [r3, #8]
      break;
 800d502:	e04f      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d514:	f000 f97c 	bl	800d810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	689a      	ldr	r2, [r3, #8]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d526:	609a      	str	r2, [r3, #8]
      break;
 800d528:	e03c      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d536:	461a      	mov	r2, r3
 800d538:	f000 f8f0 	bl	800d71c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2150      	movs	r1, #80	@ 0x50
 800d542:	4618      	mov	r0, r3
 800d544:	f000 f949 	bl	800d7da <TIM_ITRx_SetConfig>
      break;
 800d548:	e02c      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d556:	461a      	mov	r2, r3
 800d558:	f000 f90f 	bl	800d77a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2160      	movs	r1, #96	@ 0x60
 800d562:	4618      	mov	r0, r3
 800d564:	f000 f939 	bl	800d7da <TIM_ITRx_SetConfig>
      break;
 800d568:	e01c      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d576:	461a      	mov	r2, r3
 800d578:	f000 f8d0 	bl	800d71c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2140      	movs	r1, #64	@ 0x40
 800d582:	4618      	mov	r0, r3
 800d584:	f000 f929 	bl	800d7da <TIM_ITRx_SetConfig>
      break;
 800d588:	e00c      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f000 f920 	bl	800d7da <TIM_ITRx_SetConfig>
      break;
 800d59a:	e003      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	73fb      	strb	r3, [r7, #15]
      break;
 800d5a0:	e000      	b.n	800d5a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d5a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5da:	bf00      	nop
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5e6:	b480      	push	{r7}
 800d5e8:	b083      	sub	sp, #12
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d602:	bf00      	nop
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
	...

0800d610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a37      	ldr	r2, [pc, #220]	@ (800d700 <TIM_Base_SetConfig+0xf0>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d00f      	beq.n	800d648 <TIM_Base_SetConfig+0x38>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d62e:	d00b      	beq.n	800d648 <TIM_Base_SetConfig+0x38>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a34      	ldr	r2, [pc, #208]	@ (800d704 <TIM_Base_SetConfig+0xf4>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d007      	beq.n	800d648 <TIM_Base_SetConfig+0x38>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a33      	ldr	r2, [pc, #204]	@ (800d708 <TIM_Base_SetConfig+0xf8>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d003      	beq.n	800d648 <TIM_Base_SetConfig+0x38>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4a32      	ldr	r2, [pc, #200]	@ (800d70c <TIM_Base_SetConfig+0xfc>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d108      	bne.n	800d65a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d64e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	4313      	orrs	r3, r2
 800d658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a28      	ldr	r2, [pc, #160]	@ (800d700 <TIM_Base_SetConfig+0xf0>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d01b      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d668:	d017      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a25      	ldr	r2, [pc, #148]	@ (800d704 <TIM_Base_SetConfig+0xf4>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d013      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a24      	ldr	r2, [pc, #144]	@ (800d708 <TIM_Base_SetConfig+0xf8>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00f      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a23      	ldr	r2, [pc, #140]	@ (800d70c <TIM_Base_SetConfig+0xfc>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00b      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a22      	ldr	r2, [pc, #136]	@ (800d710 <TIM_Base_SetConfig+0x100>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a21      	ldr	r2, [pc, #132]	@ (800d714 <TIM_Base_SetConfig+0x104>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d003      	beq.n	800d69a <TIM_Base_SetConfig+0x8a>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a20      	ldr	r2, [pc, #128]	@ (800d718 <TIM_Base_SetConfig+0x108>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d108      	bne.n	800d6ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	689a      	ldr	r2, [r3, #8]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a0c      	ldr	r2, [pc, #48]	@ (800d700 <TIM_Base_SetConfig+0xf0>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d103      	bne.n	800d6da <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	691a      	ldr	r2, [r3, #16]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f043 0204 	orr.w	r2, r3, #4
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	601a      	str	r2, [r3, #0]
}
 800d6f2:	bf00      	nop
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	40010000 	.word	0x40010000
 800d704:	40000400 	.word	0x40000400
 800d708:	40000800 	.word	0x40000800
 800d70c:	40000c00 	.word	0x40000c00
 800d710:	40014000 	.word	0x40014000
 800d714:	40014400 	.word	0x40014400
 800d718:	40014800 	.word	0x40014800

0800d71c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b087      	sub	sp, #28
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6a1b      	ldr	r3, [r3, #32]
 800d72c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	f023 0201 	bic.w	r2, r3, #1
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	699b      	ldr	r3, [r3, #24]
 800d73e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	011b      	lsls	r3, r3, #4
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	4313      	orrs	r3, r2
 800d750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f023 030a 	bic.w	r3, r3, #10
 800d758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d75a:	697a      	ldr	r2, [r7, #20]
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	4313      	orrs	r3, r2
 800d760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	621a      	str	r2, [r3, #32]
}
 800d76e:	bf00      	nop
 800d770:	371c      	adds	r7, #28
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d77a:	b480      	push	{r7}
 800d77c:	b087      	sub	sp, #28
 800d77e:	af00      	add	r7, sp, #0
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6a1b      	ldr	r3, [r3, #32]
 800d78a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6a1b      	ldr	r3, [r3, #32]
 800d790:	f023 0210 	bic.w	r2, r3, #16
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d7a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	031b      	lsls	r3, r3, #12
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d7b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	011b      	lsls	r3, r3, #4
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	621a      	str	r2, [r3, #32]
}
 800d7ce:	bf00      	nop
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b085      	sub	sp, #20
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	f043 0307 	orr.w	r3, r3, #7
 800d7fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	609a      	str	r2, [r3, #8]
}
 800d804:	bf00      	nop
 800d806:	3714      	adds	r7, #20
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d82a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	021a      	lsls	r2, r3, #8
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	431a      	orrs	r2, r3
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	4313      	orrs	r3, r2
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	697a      	ldr	r2, [r7, #20]
 800d842:	609a      	str	r2, [r3, #8]
}
 800d844:	bf00      	nop
 800d846:	371c      	adds	r7, #28
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d860:	2b01      	cmp	r3, #1
 800d862:	d101      	bne.n	800d868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d864:	2302      	movs	r3, #2
 800d866:	e050      	b.n	800d90a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2202      	movs	r2, #2
 800d874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d88e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	4313      	orrs	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a1c      	ldr	r2, [pc, #112]	@ (800d918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d018      	beq.n	800d8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8b4:	d013      	beq.n	800d8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a18      	ldr	r2, [pc, #96]	@ (800d91c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d00e      	beq.n	800d8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a16      	ldr	r2, [pc, #88]	@ (800d920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d009      	beq.n	800d8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4a15      	ldr	r2, [pc, #84]	@ (800d924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d004      	beq.n	800d8de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a13      	ldr	r2, [pc, #76]	@ (800d928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d10c      	bne.n	800d8f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	40010000 	.word	0x40010000
 800d91c:	40000400 	.word	0x40000400
 800d920:	40000800 	.word	0x40000800
 800d924:	40000c00 	.word	0x40000c00
 800d928:	40014000 	.word	0x40014000

0800d92c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e042      	b.n	800d9ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7fa ff42 	bl	8008804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2224      	movs	r2, #36	@ 0x24
 800d984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fe15 	bl	800e5c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	691a      	ldr	r2, [r3, #16]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d9ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	695a      	ldr	r2, [r3, #20]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d9bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68da      	ldr	r2, [r3, #12]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d9cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2220      	movs	r2, #32
 800d9d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2220      	movs	r2, #32
 800d9e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08a      	sub	sp, #40	@ 0x28
 800d9f8:	af02      	add	r7, sp, #8
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	4613      	mov	r3, r2
 800da02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	2b20      	cmp	r3, #32
 800da12:	d175      	bne.n	800db00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d002      	beq.n	800da20 <HAL_UART_Transmit+0x2c>
 800da1a:	88fb      	ldrh	r3, [r7, #6]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d101      	bne.n	800da24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	e06e      	b.n	800db02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2221      	movs	r2, #33	@ 0x21
 800da2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da32:	f7fb f913 	bl	8008c5c <HAL_GetTick>
 800da36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	88fa      	ldrh	r2, [r7, #6]
 800da3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	88fa      	ldrh	r2, [r7, #6]
 800da42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da4c:	d108      	bne.n	800da60 <HAL_UART_Transmit+0x6c>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d104      	bne.n	800da60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800da56:	2300      	movs	r3, #0
 800da58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	61bb      	str	r3, [r7, #24]
 800da5e:	e003      	b.n	800da68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da64:	2300      	movs	r3, #0
 800da66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da68:	e02e      	b.n	800dac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2200      	movs	r2, #0
 800da72:	2180      	movs	r1, #128	@ 0x80
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 fbb3 	bl	800e1e0 <UART_WaitOnFlagUntilTimeout>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2220      	movs	r2, #32
 800da84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800da88:	2303      	movs	r3, #3
 800da8a:	e03a      	b.n	800db02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10b      	bne.n	800daaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	461a      	mov	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800daa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	3302      	adds	r3, #2
 800daa6:	61bb      	str	r3, [r7, #24]
 800daa8:	e007      	b.n	800daba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	781a      	ldrb	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	3301      	adds	r3, #1
 800dab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	3b01      	subs	r3, #1
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dacc:	b29b      	uxth	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1cb      	bne.n	800da6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	2200      	movs	r2, #0
 800dada:	2140      	movs	r1, #64	@ 0x40
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 fb7f 	bl	800e1e0 <UART_WaitOnFlagUntilTimeout>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d005      	beq.n	800daf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2220      	movs	r2, #32
 800daec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e006      	b.n	800db02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2220      	movs	r2, #32
 800daf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	e000      	b.n	800db02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800db00:	2302      	movs	r3, #2
  }
}
 800db02:	4618      	mov	r0, r3
 800db04:	3720      	adds	r7, #32
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b08a      	sub	sp, #40	@ 0x28
 800db0e:	af02      	add	r7, sp, #8
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	603b      	str	r3, [r7, #0]
 800db16:	4613      	mov	r3, r2
 800db18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800db1a:	2300      	movs	r3, #0
 800db1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b20      	cmp	r3, #32
 800db28:	f040 8081 	bne.w	800dc2e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d002      	beq.n	800db38 <HAL_UART_Receive+0x2e>
 800db32:	88fb      	ldrh	r3, [r7, #6]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e079      	b.n	800dc30 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2222      	movs	r2, #34	@ 0x22
 800db46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db50:	f7fb f884 	bl	8008c5c <HAL_GetTick>
 800db54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	88fa      	ldrh	r2, [r7, #6]
 800db5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	88fa      	ldrh	r2, [r7, #6]
 800db60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db6a:	d108      	bne.n	800db7e <HAL_UART_Receive+0x74>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d104      	bne.n	800db7e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800db74:	2300      	movs	r3, #0
 800db76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	61bb      	str	r3, [r7, #24]
 800db7c:	e003      	b.n	800db86 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800db86:	e047      	b.n	800dc18 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	2200      	movs	r2, #0
 800db90:	2120      	movs	r1, #32
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f000 fb24 	bl	800e1e0 <UART_WaitOnFlagUntilTimeout>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d005      	beq.n	800dbaa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2220      	movs	r2, #32
 800dba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800dba6:	2303      	movs	r3, #3
 800dba8:	e042      	b.n	800dc30 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10c      	bne.n	800dbca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	3302      	adds	r3, #2
 800dbc6:	61bb      	str	r3, [r7, #24]
 800dbc8:	e01f      	b.n	800dc0a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbd2:	d007      	beq.n	800dbe4 <HAL_UART_Receive+0xda>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <HAL_UART_Receive+0xe8>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d106      	bne.n	800dbf2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	701a      	strb	r2, [r3, #0]
 800dbf0:	e008      	b.n	800dc04 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	3301      	adds	r3, #1
 800dc08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	3b01      	subs	r3, #1
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1b2      	bne.n	800db88 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2220      	movs	r2, #32
 800dc26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e000      	b.n	800dc30 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800dc2e:	2302      	movs	r3, #2
  }
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3720      	adds	r7, #32
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b0ba      	sub	sp, #232	@ 0xe8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	695b      	ldr	r3, [r3, #20]
 800dc5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800dc64:	2300      	movs	r3, #0
 800dc66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dc6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc6e:	f003 030f 	and.w	r3, r3, #15
 800dc72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800dc76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10f      	bne.n	800dc9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc82:	f003 0320 	and.w	r3, r3, #32
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d009      	beq.n	800dc9e <HAL_UART_IRQHandler+0x66>
 800dc8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fbd7 	bl	800e44a <UART_Receive_IT>
      return;
 800dc9c:	e273      	b.n	800e186 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dc9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80de 	beq.w	800de64 <HAL_UART_IRQHandler+0x22c>
 800dca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dcac:	f003 0301 	and.w	r3, r3, #1
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d106      	bne.n	800dcc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dcb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f000 80d1 	beq.w	800de64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dcc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00b      	beq.n	800dce6 <HAL_UART_IRQHandler+0xae>
 800dcce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d005      	beq.n	800dce6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcde:	f043 0201 	orr.w	r2, r3, #1
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcea:	f003 0304 	and.w	r3, r3, #4
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00b      	beq.n	800dd0a <HAL_UART_IRQHandler+0xd2>
 800dcf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d005      	beq.n	800dd0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd02:	f043 0202 	orr.w	r2, r3, #2
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd0e:	f003 0302 	and.w	r3, r3, #2
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00b      	beq.n	800dd2e <HAL_UART_IRQHandler+0xf6>
 800dd16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd1a:	f003 0301 	and.w	r3, r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d005      	beq.n	800dd2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd26:	f043 0204 	orr.w	r2, r3, #4
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd32:	f003 0308 	and.w	r3, r3, #8
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d011      	beq.n	800dd5e <HAL_UART_IRQHandler+0x126>
 800dd3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d105      	bne.n	800dd52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dd46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d005      	beq.n	800dd5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd56:	f043 0208 	orr.w	r2, r3, #8
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 820a 	beq.w	800e17c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dd68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd6c:	f003 0320 	and.w	r3, r3, #32
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d008      	beq.n	800dd86 <HAL_UART_IRQHandler+0x14e>
 800dd74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd78:	f003 0320 	and.w	r3, r3, #32
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fb62 	bl	800e44a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd90:	2b40      	cmp	r3, #64	@ 0x40
 800dd92:	bf0c      	ite	eq
 800dd94:	2301      	moveq	r3, #1
 800dd96:	2300      	movne	r3, #0
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dda2:	f003 0308 	and.w	r3, r3, #8
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d103      	bne.n	800ddb2 <HAL_UART_IRQHandler+0x17a>
 800ddaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d04f      	beq.n	800de52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fa6d 	bl	800e292 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddc2:	2b40      	cmp	r3, #64	@ 0x40
 800ddc4:	d141      	bne.n	800de4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	3314      	adds	r3, #20
 800ddcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddd4:	e853 3f00 	ldrex	r3, [r3]
 800ddd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dde0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dde4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3314      	adds	r3, #20
 800ddee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ddf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ddf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ddfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800de02:	e841 2300 	strex	r3, r2, [r1]
 800de06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800de0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1d9      	bne.n	800ddc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d013      	beq.n	800de42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de1e:	4a8a      	ldr	r2, [pc, #552]	@ (800e048 <HAL_UART_IRQHandler+0x410>)
 800de20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de26:	4618      	mov	r0, r3
 800de28:	f7fb f8e3 	bl	8008ff2 <HAL_DMA_Abort_IT>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d016      	beq.n	800de60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800de3c:	4610      	mov	r0, r2
 800de3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de40:	e00e      	b.n	800de60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 f9b6 	bl	800e1b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de48:	e00a      	b.n	800de60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f9b2 	bl	800e1b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de50:	e006      	b.n	800de60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f9ae 	bl	800e1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800de5e:	e18d      	b.n	800e17c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de60:	bf00      	nop
    return;
 800de62:	e18b      	b.n	800e17c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de68:	2b01      	cmp	r3, #1
 800de6a:	f040 8167 	bne.w	800e13c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800de6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de72:	f003 0310 	and.w	r3, r3, #16
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 8160 	beq.w	800e13c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800de7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de80:	f003 0310 	and.w	r3, r3, #16
 800de84:	2b00      	cmp	r3, #0
 800de86:	f000 8159 	beq.w	800e13c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800de8a:	2300      	movs	r3, #0
 800de8c:	60bb      	str	r3, [r7, #8]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	60bb      	str	r3, [r7, #8]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	60bb      	str	r3, [r7, #8]
 800de9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deaa:	2b40      	cmp	r3, #64	@ 0x40
 800deac:	f040 80ce 	bne.w	800e04c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800debc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 80a9 	beq.w	800e018 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800deca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dece:	429a      	cmp	r2, r3
 800ded0:	f080 80a2 	bcs.w	800e018 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800deda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dee6:	f000 8088 	beq.w	800dffa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	330c      	adds	r3, #12
 800def0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800def4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800def8:	e853 3f00 	ldrex	r3, [r3]
 800defc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800df00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	330c      	adds	r3, #12
 800df12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800df16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800df1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800df22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800df26:	e841 2300 	strex	r3, r2, [r1]
 800df2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800df2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1d9      	bne.n	800deea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3314      	adds	r3, #20
 800df3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800df40:	e853 3f00 	ldrex	r3, [r3]
 800df44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800df46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800df48:	f023 0301 	bic.w	r3, r3, #1
 800df4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3314      	adds	r3, #20
 800df56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800df5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800df5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800df62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800df66:	e841 2300 	strex	r3, r2, [r1]
 800df6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800df6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1e1      	bne.n	800df36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3314      	adds	r3, #20
 800df78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df7c:	e853 3f00 	ldrex	r3, [r3]
 800df80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800df82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3314      	adds	r3, #20
 800df92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800df96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800df98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800df9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800df9e:	e841 2300 	strex	r3, r2, [r1]
 800dfa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dfa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1e3      	bne.n	800df72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2220      	movs	r2, #32
 800dfae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	330c      	adds	r3, #12
 800dfbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc2:	e853 3f00 	ldrex	r3, [r3]
 800dfc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dfc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfca:	f023 0310 	bic.w	r3, r3, #16
 800dfce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	330c      	adds	r3, #12
 800dfd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dfdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800dfde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dfe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dfe4:	e841 2300 	strex	r3, r2, [r1]
 800dfe8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dfea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e3      	bne.n	800dfb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fa ff8c 	bl	8008f12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2202      	movs	r2, #2
 800dffe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e008:	b29b      	uxth	r3, r3
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4619      	mov	r1, r3
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f8d9 	bl	800e1c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e016:	e0b3      	b.n	800e180 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e01c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e020:	429a      	cmp	r2, r3
 800e022:	f040 80ad 	bne.w	800e180 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e030:	f040 80a6 	bne.w	800e180 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2202      	movs	r2, #2
 800e038:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 f8c1 	bl	800e1c8 <HAL_UARTEx_RxEventCallback>
      return;
 800e046:	e09b      	b.n	800e180 <HAL_UART_IRQHandler+0x548>
 800e048:	0800e359 	.word	0x0800e359
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e054:	b29b      	uxth	r3, r3
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e060:	b29b      	uxth	r3, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 808e 	beq.w	800e184 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800e068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 8089 	beq.w	800e184 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	330c      	adds	r3, #12
 800e078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07c:	e853 3f00 	ldrex	r3, [r3]
 800e080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	330c      	adds	r3, #12
 800e092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e096:	647a      	str	r2, [r7, #68]	@ 0x44
 800e098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e09c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e09e:	e841 2300 	strex	r3, r2, [r1]
 800e0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1e3      	bne.n	800e072 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3314      	adds	r3, #20
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	e853 3f00 	ldrex	r3, [r3]
 800e0b8:	623b      	str	r3, [r7, #32]
   return(result);
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	f023 0301 	bic.w	r3, r3, #1
 800e0c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3314      	adds	r3, #20
 800e0ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e0ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800e0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d6:	e841 2300 	strex	r3, r2, [r1]
 800e0da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1e3      	bne.n	800e0aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	330c      	adds	r3, #12
 800e0f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	e853 3f00 	ldrex	r3, [r3]
 800e0fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f023 0310 	bic.w	r3, r3, #16
 800e106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	330c      	adds	r3, #12
 800e110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e114:	61fa      	str	r2, [r7, #28]
 800e116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e118:	69b9      	ldr	r1, [r7, #24]
 800e11a:	69fa      	ldr	r2, [r7, #28]
 800e11c:	e841 2300 	strex	r3, r2, [r1]
 800e120:	617b      	str	r3, [r7, #20]
   return(result);
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e3      	bne.n	800e0f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2202      	movs	r2, #2
 800e12c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e12e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f847 	bl	800e1c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e13a:	e023      	b.n	800e184 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e144:	2b00      	cmp	r3, #0
 800e146:	d009      	beq.n	800e15c <HAL_UART_IRQHandler+0x524>
 800e148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e14c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e150:	2b00      	cmp	r3, #0
 800e152:	d003      	beq.n	800e15c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f910 	bl	800e37a <UART_Transmit_IT>
    return;
 800e15a:	e014      	b.n	800e186 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00e      	beq.n	800e186 <HAL_UART_IRQHandler+0x54e>
 800e168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e170:	2b00      	cmp	r3, #0
 800e172:	d008      	beq.n	800e186 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f950 	bl	800e41a <UART_EndTransmit_IT>
    return;
 800e17a:	e004      	b.n	800e186 <HAL_UART_IRQHandler+0x54e>
    return;
 800e17c:	bf00      	nop
 800e17e:	e002      	b.n	800e186 <HAL_UART_IRQHandler+0x54e>
      return;
 800e180:	bf00      	nop
 800e182:	e000      	b.n	800e186 <HAL_UART_IRQHandler+0x54e>
      return;
 800e184:	bf00      	nop
  }
}
 800e186:	37e8      	adds	r7, #232	@ 0xe8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e1a8:	bf00      	nop
 800e1aa:	370c      	adds	r7, #12
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e1bc:	bf00      	nop
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e1d4:	bf00      	nop
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1f0:	e03b      	b.n	800e26a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1f8:	d037      	beq.n	800e26a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1fa:	f7fa fd2f 	bl	8008c5c <HAL_GetTick>
 800e1fe:	4602      	mov	r2, r0
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	6a3a      	ldr	r2, [r7, #32]
 800e206:	429a      	cmp	r2, r3
 800e208:	d302      	bcc.n	800e210 <UART_WaitOnFlagUntilTimeout+0x30>
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d101      	bne.n	800e214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e210:	2303      	movs	r3, #3
 800e212:	e03a      	b.n	800e28a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f003 0304 	and.w	r3, r3, #4
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d023      	beq.n	800e26a <UART_WaitOnFlagUntilTimeout+0x8a>
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	2b80      	cmp	r3, #128	@ 0x80
 800e226:	d020      	beq.n	800e26a <UART_WaitOnFlagUntilTimeout+0x8a>
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2b40      	cmp	r3, #64	@ 0x40
 800e22c:	d01d      	beq.n	800e26a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f003 0308 	and.w	r3, r3, #8
 800e238:	2b08      	cmp	r3, #8
 800e23a:	d116      	bne.n	800e26a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e23c:	2300      	movs	r3, #0
 800e23e:	617b      	str	r3, [r7, #20]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	617b      	str	r3, [r7, #20]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 f81d 	bl	800e292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2208      	movs	r2, #8
 800e25c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e00f      	b.n	800e28a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	4013      	ands	r3, r2
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	429a      	cmp	r2, r3
 800e278:	bf0c      	ite	eq
 800e27a:	2301      	moveq	r3, #1
 800e27c:	2300      	movne	r3, #0
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	461a      	mov	r2, r3
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	429a      	cmp	r2, r3
 800e286:	d0b4      	beq.n	800e1f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e292:	b480      	push	{r7}
 800e294:	b095      	sub	sp, #84	@ 0x54
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	330c      	adds	r3, #12
 800e2a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a4:	e853 3f00 	ldrex	r3, [r3]
 800e2a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	330c      	adds	r3, #12
 800e2b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e2ba:	643a      	str	r2, [r7, #64]	@ 0x40
 800e2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e2c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2c2:	e841 2300 	strex	r3, r2, [r1]
 800e2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1e5      	bne.n	800e29a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3314      	adds	r3, #20
 800e2d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	e853 3f00 	ldrex	r3, [r3]
 800e2dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	f023 0301 	bic.w	r3, r3, #1
 800e2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3314      	adds	r3, #20
 800e2ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e2f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2f6:	e841 2300 	strex	r3, r2, [r1]
 800e2fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e5      	bne.n	800e2ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e306:	2b01      	cmp	r3, #1
 800e308:	d119      	bne.n	800e33e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	330c      	adds	r3, #12
 800e310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	e853 3f00 	ldrex	r3, [r3]
 800e318:	60bb      	str	r3, [r7, #8]
   return(result);
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	f023 0310 	bic.w	r3, r3, #16
 800e320:	647b      	str	r3, [r7, #68]	@ 0x44
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	330c      	adds	r3, #12
 800e328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e32a:	61ba      	str	r2, [r7, #24]
 800e32c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32e:	6979      	ldr	r1, [r7, #20]
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	e841 2300 	strex	r3, r2, [r1]
 800e336:	613b      	str	r3, [r7, #16]
   return(result);
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1e5      	bne.n	800e30a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2220      	movs	r2, #32
 800e342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e34c:	bf00      	nop
 800e34e:	3754      	adds	r7, #84	@ 0x54
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e364:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7ff ff21 	bl	800e1b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e372:	bf00      	nop
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e37a:	b480      	push	{r7}
 800e37c:	b085      	sub	sp, #20
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	2b21      	cmp	r3, #33	@ 0x21
 800e38c:	d13e      	bne.n	800e40c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e396:	d114      	bne.n	800e3c2 <UART_Transmit_IT+0x48>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d110      	bne.n	800e3c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	1c9a      	adds	r2, r3, #2
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	621a      	str	r2, [r3, #32]
 800e3c0:	e008      	b.n	800e3d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	1c59      	adds	r1, r3, #1
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	6211      	str	r1, [r2, #32]
 800e3cc:	781a      	ldrb	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10f      	bne.n	800e408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e3f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	e000      	b.n	800e40e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e40c:	2302      	movs	r3, #2
  }
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b082      	sub	sp, #8
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	68da      	ldr	r2, [r3, #12]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2220      	movs	r2, #32
 800e436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff fea6 	bl	800e18c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b08c      	sub	sp, #48	@ 0x30
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800e452:	2300      	movs	r3, #0
 800e454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800e456:	2300      	movs	r3, #0
 800e458:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e460:	b2db      	uxtb	r3, r3
 800e462:	2b22      	cmp	r3, #34	@ 0x22
 800e464:	f040 80aa 	bne.w	800e5bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e470:	d115      	bne.n	800e49e <UART_Receive_IT+0x54>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d111      	bne.n	800e49e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e47e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	b29b      	uxth	r3, r3
 800e488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e490:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e496:	1c9a      	adds	r2, r3, #2
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	629a      	str	r2, [r3, #40]	@ 0x28
 800e49c:	e024      	b.n	800e4e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4ac:	d007      	beq.n	800e4be <UART_Receive_IT+0x74>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10a      	bne.n	800e4cc <UART_Receive_IT+0x82>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d106      	bne.n	800e4cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c8:	701a      	strb	r2, [r3, #0]
 800e4ca:	e008      	b.n	800e4de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d15d      	bne.n	800e5b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68da      	ldr	r2, [r3, #12]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f022 0220 	bic.w	r2, r2, #32
 800e50a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	68da      	ldr	r2, [r3, #12]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e51a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	695a      	ldr	r2, [r3, #20]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f022 0201 	bic.w	r2, r2, #1
 800e52a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2220      	movs	r2, #32
 800e530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d135      	bne.n	800e5ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	330c      	adds	r3, #12
 800e54e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	e853 3f00 	ldrex	r3, [r3]
 800e556:	613b      	str	r3, [r7, #16]
   return(result);
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f023 0310 	bic.w	r3, r3, #16
 800e55e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	330c      	adds	r3, #12
 800e566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e568:	623a      	str	r2, [r7, #32]
 800e56a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56c:	69f9      	ldr	r1, [r7, #28]
 800e56e:	6a3a      	ldr	r2, [r7, #32]
 800e570:	e841 2300 	strex	r3, r2, [r1]
 800e574:	61bb      	str	r3, [r7, #24]
   return(result);
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e5      	bne.n	800e548 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f003 0310 	and.w	r3, r3, #16
 800e586:	2b10      	cmp	r3, #16
 800e588:	d10a      	bne.n	800e5a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e58a:	2300      	movs	r3, #0
 800e58c:	60fb      	str	r3, [r7, #12]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	60fb      	str	r3, [r7, #12]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff fe0e 	bl	800e1c8 <HAL_UARTEx_RxEventCallback>
 800e5ac:	e002      	b.n	800e5b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff fdf6 	bl	800e1a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	e002      	b.n	800e5be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e000      	b.n	800e5be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e5bc:	2302      	movs	r3, #2
  }
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3730      	adds	r7, #48	@ 0x30
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5cc:	b0c0      	sub	sp, #256	@ 0x100
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5e4:	68d9      	ldr	r1, [r3, #12]
 800e5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	ea40 0301 	orr.w	r3, r0, r1
 800e5f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5f6:	689a      	ldr	r2, [r3, #8]
 800e5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	431a      	orrs	r2, r3
 800e600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	431a      	orrs	r2, r3
 800e608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e60c:	69db      	ldr	r3, [r3, #28]
 800e60e:	4313      	orrs	r3, r2
 800e610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e620:	f021 010c 	bic.w	r1, r1, #12
 800e624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e62e:	430b      	orrs	r3, r1
 800e630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	695b      	ldr	r3, [r3, #20]
 800e63a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e63e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e642:	6999      	ldr	r1, [r3, #24]
 800e644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	ea40 0301 	orr.w	r3, r0, r1
 800e64e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	4b8f      	ldr	r3, [pc, #572]	@ (800e894 <UART_SetConfig+0x2cc>)
 800e658:	429a      	cmp	r2, r3
 800e65a:	d005      	beq.n	800e668 <UART_SetConfig+0xa0>
 800e65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	4b8d      	ldr	r3, [pc, #564]	@ (800e898 <UART_SetConfig+0x2d0>)
 800e664:	429a      	cmp	r2, r3
 800e666:	d104      	bne.n	800e672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e668:	f7fe fc5e 	bl	800cf28 <HAL_RCC_GetPCLK2Freq>
 800e66c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e670:	e003      	b.n	800e67a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e672:	f7fe fc45 	bl	800cf00 <HAL_RCC_GetPCLK1Freq>
 800e676:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e67e:	69db      	ldr	r3, [r3, #28]
 800e680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e684:	f040 810c 	bne.w	800e8a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e69a:	4622      	mov	r2, r4
 800e69c:	462b      	mov	r3, r5
 800e69e:	1891      	adds	r1, r2, r2
 800e6a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e6a2:	415b      	adcs	r3, r3
 800e6a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	eb12 0801 	adds.w	r8, r2, r1
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	eb43 0901 	adc.w	r9, r3, r1
 800e6b6:	f04f 0200 	mov.w	r2, #0
 800e6ba:	f04f 0300 	mov.w	r3, #0
 800e6be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e6c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e6c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e6ca:	4690      	mov	r8, r2
 800e6cc:	4699      	mov	r9, r3
 800e6ce:	4623      	mov	r3, r4
 800e6d0:	eb18 0303 	adds.w	r3, r8, r3
 800e6d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e6d8:	462b      	mov	r3, r5
 800e6da:	eb49 0303 	adc.w	r3, r9, r3
 800e6de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e6ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e6f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	18db      	adds	r3, r3, r3
 800e6fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	eb42 0303 	adc.w	r3, r2, r3
 800e702:	657b      	str	r3, [r7, #84]	@ 0x54
 800e704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e70c:	f7f1 fdb8 	bl	8000280 <__aeabi_uldivmod>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4b61      	ldr	r3, [pc, #388]	@ (800e89c <UART_SetConfig+0x2d4>)
 800e716:	fba3 2302 	umull	r2, r3, r3, r2
 800e71a:	095b      	lsrs	r3, r3, #5
 800e71c:	011c      	lsls	r4, r3, #4
 800e71e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e722:	2200      	movs	r2, #0
 800e724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e728:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e72c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e730:	4642      	mov	r2, r8
 800e732:	464b      	mov	r3, r9
 800e734:	1891      	adds	r1, r2, r2
 800e736:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e738:	415b      	adcs	r3, r3
 800e73a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e73c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e740:	4641      	mov	r1, r8
 800e742:	eb12 0a01 	adds.w	sl, r2, r1
 800e746:	4649      	mov	r1, r9
 800e748:	eb43 0b01 	adc.w	fp, r3, r1
 800e74c:	f04f 0200 	mov.w	r2, #0
 800e750:	f04f 0300 	mov.w	r3, #0
 800e754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e75c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e760:	4692      	mov	sl, r2
 800e762:	469b      	mov	fp, r3
 800e764:	4643      	mov	r3, r8
 800e766:	eb1a 0303 	adds.w	r3, sl, r3
 800e76a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e76e:	464b      	mov	r3, r9
 800e770:	eb4b 0303 	adc.w	r3, fp, r3
 800e774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e78c:	460b      	mov	r3, r1
 800e78e:	18db      	adds	r3, r3, r3
 800e790:	643b      	str	r3, [r7, #64]	@ 0x40
 800e792:	4613      	mov	r3, r2
 800e794:	eb42 0303 	adc.w	r3, r2, r3
 800e798:	647b      	str	r3, [r7, #68]	@ 0x44
 800e79a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e79e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e7a2:	f7f1 fd6d 	bl	8000280 <__aeabi_uldivmod>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	4b3b      	ldr	r3, [pc, #236]	@ (800e89c <UART_SetConfig+0x2d4>)
 800e7ae:	fba3 2301 	umull	r2, r3, r3, r1
 800e7b2:	095b      	lsrs	r3, r3, #5
 800e7b4:	2264      	movs	r2, #100	@ 0x64
 800e7b6:	fb02 f303 	mul.w	r3, r2, r3
 800e7ba:	1acb      	subs	r3, r1, r3
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e7c2:	4b36      	ldr	r3, [pc, #216]	@ (800e89c <UART_SetConfig+0x2d4>)
 800e7c4:	fba3 2302 	umull	r2, r3, r3, r2
 800e7c8:	095b      	lsrs	r3, r3, #5
 800e7ca:	005b      	lsls	r3, r3, #1
 800e7cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e7d0:	441c      	add	r4, r3
 800e7d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e7dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e7e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e7e4:	4642      	mov	r2, r8
 800e7e6:	464b      	mov	r3, r9
 800e7e8:	1891      	adds	r1, r2, r2
 800e7ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e7ec:	415b      	adcs	r3, r3
 800e7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e7f4:	4641      	mov	r1, r8
 800e7f6:	1851      	adds	r1, r2, r1
 800e7f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800e7fa:	4649      	mov	r1, r9
 800e7fc:	414b      	adcs	r3, r1
 800e7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e800:	f04f 0200 	mov.w	r2, #0
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e80c:	4659      	mov	r1, fp
 800e80e:	00cb      	lsls	r3, r1, #3
 800e810:	4651      	mov	r1, sl
 800e812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e816:	4651      	mov	r1, sl
 800e818:	00ca      	lsls	r2, r1, #3
 800e81a:	4610      	mov	r0, r2
 800e81c:	4619      	mov	r1, r3
 800e81e:	4603      	mov	r3, r0
 800e820:	4642      	mov	r2, r8
 800e822:	189b      	adds	r3, r3, r2
 800e824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e828:	464b      	mov	r3, r9
 800e82a:	460a      	mov	r2, r1
 800e82c:	eb42 0303 	adc.w	r3, r2, r3
 800e830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e840:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e848:	460b      	mov	r3, r1
 800e84a:	18db      	adds	r3, r3, r3
 800e84c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e84e:	4613      	mov	r3, r2
 800e850:	eb42 0303 	adc.w	r3, r2, r3
 800e854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e85a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e85e:	f7f1 fd0f 	bl	8000280 <__aeabi_uldivmod>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4b0d      	ldr	r3, [pc, #52]	@ (800e89c <UART_SetConfig+0x2d4>)
 800e868:	fba3 1302 	umull	r1, r3, r3, r2
 800e86c:	095b      	lsrs	r3, r3, #5
 800e86e:	2164      	movs	r1, #100	@ 0x64
 800e870:	fb01 f303 	mul.w	r3, r1, r3
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	00db      	lsls	r3, r3, #3
 800e878:	3332      	adds	r3, #50	@ 0x32
 800e87a:	4a08      	ldr	r2, [pc, #32]	@ (800e89c <UART_SetConfig+0x2d4>)
 800e87c:	fba2 2303 	umull	r2, r3, r2, r3
 800e880:	095b      	lsrs	r3, r3, #5
 800e882:	f003 0207 	and.w	r2, r3, #7
 800e886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4422      	add	r2, r4
 800e88e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e890:	e106      	b.n	800eaa0 <UART_SetConfig+0x4d8>
 800e892:	bf00      	nop
 800e894:	40011000 	.word	0x40011000
 800e898:	40011400 	.word	0x40011400
 800e89c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e8a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e8aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e8ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e8b2:	4642      	mov	r2, r8
 800e8b4:	464b      	mov	r3, r9
 800e8b6:	1891      	adds	r1, r2, r2
 800e8b8:	6239      	str	r1, [r7, #32]
 800e8ba:	415b      	adcs	r3, r3
 800e8bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e8c2:	4641      	mov	r1, r8
 800e8c4:	1854      	adds	r4, r2, r1
 800e8c6:	4649      	mov	r1, r9
 800e8c8:	eb43 0501 	adc.w	r5, r3, r1
 800e8cc:	f04f 0200 	mov.w	r2, #0
 800e8d0:	f04f 0300 	mov.w	r3, #0
 800e8d4:	00eb      	lsls	r3, r5, #3
 800e8d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e8da:	00e2      	lsls	r2, r4, #3
 800e8dc:	4614      	mov	r4, r2
 800e8de:	461d      	mov	r5, r3
 800e8e0:	4643      	mov	r3, r8
 800e8e2:	18e3      	adds	r3, r4, r3
 800e8e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e8e8:	464b      	mov	r3, r9
 800e8ea:	eb45 0303 	adc.w	r3, r5, r3
 800e8ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e8fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e902:	f04f 0200 	mov.w	r2, #0
 800e906:	f04f 0300 	mov.w	r3, #0
 800e90a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e90e:	4629      	mov	r1, r5
 800e910:	008b      	lsls	r3, r1, #2
 800e912:	4621      	mov	r1, r4
 800e914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e918:	4621      	mov	r1, r4
 800e91a:	008a      	lsls	r2, r1, #2
 800e91c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e920:	f7f1 fcae 	bl	8000280 <__aeabi_uldivmod>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	4b60      	ldr	r3, [pc, #384]	@ (800eaac <UART_SetConfig+0x4e4>)
 800e92a:	fba3 2302 	umull	r2, r3, r3, r2
 800e92e:	095b      	lsrs	r3, r3, #5
 800e930:	011c      	lsls	r4, r3, #4
 800e932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e936:	2200      	movs	r2, #0
 800e938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e93c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e944:	4642      	mov	r2, r8
 800e946:	464b      	mov	r3, r9
 800e948:	1891      	adds	r1, r2, r2
 800e94a:	61b9      	str	r1, [r7, #24]
 800e94c:	415b      	adcs	r3, r3
 800e94e:	61fb      	str	r3, [r7, #28]
 800e950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e954:	4641      	mov	r1, r8
 800e956:	1851      	adds	r1, r2, r1
 800e958:	6139      	str	r1, [r7, #16]
 800e95a:	4649      	mov	r1, r9
 800e95c:	414b      	adcs	r3, r1
 800e95e:	617b      	str	r3, [r7, #20]
 800e960:	f04f 0200 	mov.w	r2, #0
 800e964:	f04f 0300 	mov.w	r3, #0
 800e968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e96c:	4659      	mov	r1, fp
 800e96e:	00cb      	lsls	r3, r1, #3
 800e970:	4651      	mov	r1, sl
 800e972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e976:	4651      	mov	r1, sl
 800e978:	00ca      	lsls	r2, r1, #3
 800e97a:	4610      	mov	r0, r2
 800e97c:	4619      	mov	r1, r3
 800e97e:	4603      	mov	r3, r0
 800e980:	4642      	mov	r2, r8
 800e982:	189b      	adds	r3, r3, r2
 800e984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e988:	464b      	mov	r3, r9
 800e98a:	460a      	mov	r2, r1
 800e98c:	eb42 0303 	adc.w	r3, r2, r3
 800e990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e99e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e9a0:	f04f 0200 	mov.w	r2, #0
 800e9a4:	f04f 0300 	mov.w	r3, #0
 800e9a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	008b      	lsls	r3, r1, #2
 800e9b0:	4641      	mov	r1, r8
 800e9b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e9b6:	4641      	mov	r1, r8
 800e9b8:	008a      	lsls	r2, r1, #2
 800e9ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e9be:	f7f1 fc5f 	bl	8000280 <__aeabi_uldivmod>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	4b38      	ldr	r3, [pc, #224]	@ (800eaac <UART_SetConfig+0x4e4>)
 800e9ca:	fba3 2301 	umull	r2, r3, r3, r1
 800e9ce:	095b      	lsrs	r3, r3, #5
 800e9d0:	2264      	movs	r2, #100	@ 0x64
 800e9d2:	fb02 f303 	mul.w	r3, r2, r3
 800e9d6:	1acb      	subs	r3, r1, r3
 800e9d8:	011b      	lsls	r3, r3, #4
 800e9da:	3332      	adds	r3, #50	@ 0x32
 800e9dc:	4a33      	ldr	r2, [pc, #204]	@ (800eaac <UART_SetConfig+0x4e4>)
 800e9de:	fba2 2303 	umull	r2, r3, r2, r3
 800e9e2:	095b      	lsrs	r3, r3, #5
 800e9e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e9e8:	441c      	add	r4, r3
 800e9ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	673b      	str	r3, [r7, #112]	@ 0x70
 800e9f2:	677a      	str	r2, [r7, #116]	@ 0x74
 800e9f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e9f8:	4642      	mov	r2, r8
 800e9fa:	464b      	mov	r3, r9
 800e9fc:	1891      	adds	r1, r2, r2
 800e9fe:	60b9      	str	r1, [r7, #8]
 800ea00:	415b      	adcs	r3, r3
 800ea02:	60fb      	str	r3, [r7, #12]
 800ea04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea08:	4641      	mov	r1, r8
 800ea0a:	1851      	adds	r1, r2, r1
 800ea0c:	6039      	str	r1, [r7, #0]
 800ea0e:	4649      	mov	r1, r9
 800ea10:	414b      	adcs	r3, r1
 800ea12:	607b      	str	r3, [r7, #4]
 800ea14:	f04f 0200 	mov.w	r2, #0
 800ea18:	f04f 0300 	mov.w	r3, #0
 800ea1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ea20:	4659      	mov	r1, fp
 800ea22:	00cb      	lsls	r3, r1, #3
 800ea24:	4651      	mov	r1, sl
 800ea26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ea2a:	4651      	mov	r1, sl
 800ea2c:	00ca      	lsls	r2, r1, #3
 800ea2e:	4610      	mov	r0, r2
 800ea30:	4619      	mov	r1, r3
 800ea32:	4603      	mov	r3, r0
 800ea34:	4642      	mov	r2, r8
 800ea36:	189b      	adds	r3, r3, r2
 800ea38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ea3a:	464b      	mov	r3, r9
 800ea3c:	460a      	mov	r2, r1
 800ea3e:	eb42 0303 	adc.w	r3, r2, r3
 800ea42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ea44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea4e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ea50:	f04f 0200 	mov.w	r2, #0
 800ea54:	f04f 0300 	mov.w	r3, #0
 800ea58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	008b      	lsls	r3, r1, #2
 800ea60:	4641      	mov	r1, r8
 800ea62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ea66:	4641      	mov	r1, r8
 800ea68:	008a      	lsls	r2, r1, #2
 800ea6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ea6e:	f7f1 fc07 	bl	8000280 <__aeabi_uldivmod>
 800ea72:	4602      	mov	r2, r0
 800ea74:	460b      	mov	r3, r1
 800ea76:	4b0d      	ldr	r3, [pc, #52]	@ (800eaac <UART_SetConfig+0x4e4>)
 800ea78:	fba3 1302 	umull	r1, r3, r3, r2
 800ea7c:	095b      	lsrs	r3, r3, #5
 800ea7e:	2164      	movs	r1, #100	@ 0x64
 800ea80:	fb01 f303 	mul.w	r3, r1, r3
 800ea84:	1ad3      	subs	r3, r2, r3
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	3332      	adds	r3, #50	@ 0x32
 800ea8a:	4a08      	ldr	r2, [pc, #32]	@ (800eaac <UART_SetConfig+0x4e4>)
 800ea8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea90:	095b      	lsrs	r3, r3, #5
 800ea92:	f003 020f 	and.w	r2, r3, #15
 800ea96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4422      	add	r2, r4
 800ea9e:	609a      	str	r2, [r3, #8]
}
 800eaa0:	bf00      	nop
 800eaa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eaac:	51eb851f 	.word	0x51eb851f

0800eab0 <calloc>:
 800eab0:	4b02      	ldr	r3, [pc, #8]	@ (800eabc <calloc+0xc>)
 800eab2:	460a      	mov	r2, r1
 800eab4:	4601      	mov	r1, r0
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	f000 b802 	b.w	800eac0 <_calloc_r>
 800eabc:	2000056c 	.word	0x2000056c

0800eac0 <_calloc_r>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	fba1 5402 	umull	r5, r4, r1, r2
 800eac6:	b93c      	cbnz	r4, 800ead8 <_calloc_r+0x18>
 800eac8:	4629      	mov	r1, r5
 800eaca:	f000 f837 	bl	800eb3c <_malloc_r>
 800eace:	4606      	mov	r6, r0
 800ead0:	b928      	cbnz	r0, 800eade <_calloc_r+0x1e>
 800ead2:	2600      	movs	r6, #0
 800ead4:	4630      	mov	r0, r6
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	220c      	movs	r2, #12
 800eada:	6002      	str	r2, [r0, #0]
 800eadc:	e7f9      	b.n	800ead2 <_calloc_r+0x12>
 800eade:	462a      	mov	r2, r5
 800eae0:	4621      	mov	r1, r4
 800eae2:	f000 fa01 	bl	800eee8 <memset>
 800eae6:	e7f5      	b.n	800ead4 <_calloc_r+0x14>

0800eae8 <free>:
 800eae8:	4b02      	ldr	r3, [pc, #8]	@ (800eaf4 <free+0xc>)
 800eaea:	4601      	mov	r1, r0
 800eaec:	6818      	ldr	r0, [r3, #0]
 800eaee:	f000 ba4f 	b.w	800ef90 <_free_r>
 800eaf2:	bf00      	nop
 800eaf4:	2000056c 	.word	0x2000056c

0800eaf8 <sbrk_aligned>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	4e0f      	ldr	r6, [pc, #60]	@ (800eb38 <sbrk_aligned+0x40>)
 800eafc:	460c      	mov	r4, r1
 800eafe:	6831      	ldr	r1, [r6, #0]
 800eb00:	4605      	mov	r5, r0
 800eb02:	b911      	cbnz	r1, 800eb0a <sbrk_aligned+0x12>
 800eb04:	f000 f9f8 	bl	800eef8 <_sbrk_r>
 800eb08:	6030      	str	r0, [r6, #0]
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	f000 f9f3 	bl	800eef8 <_sbrk_r>
 800eb12:	1c43      	adds	r3, r0, #1
 800eb14:	d103      	bne.n	800eb1e <sbrk_aligned+0x26>
 800eb16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
 800eb1e:	1cc4      	adds	r4, r0, #3
 800eb20:	f024 0403 	bic.w	r4, r4, #3
 800eb24:	42a0      	cmp	r0, r4
 800eb26:	d0f8      	beq.n	800eb1a <sbrk_aligned+0x22>
 800eb28:	1a21      	subs	r1, r4, r0
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f000 f9e4 	bl	800eef8 <_sbrk_r>
 800eb30:	3001      	adds	r0, #1
 800eb32:	d1f2      	bne.n	800eb1a <sbrk_aligned+0x22>
 800eb34:	e7ef      	b.n	800eb16 <sbrk_aligned+0x1e>
 800eb36:	bf00      	nop
 800eb38:	20001244 	.word	0x20001244

0800eb3c <_malloc_r>:
 800eb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb40:	1ccd      	adds	r5, r1, #3
 800eb42:	f025 0503 	bic.w	r5, r5, #3
 800eb46:	3508      	adds	r5, #8
 800eb48:	2d0c      	cmp	r5, #12
 800eb4a:	bf38      	it	cc
 800eb4c:	250c      	movcc	r5, #12
 800eb4e:	2d00      	cmp	r5, #0
 800eb50:	4606      	mov	r6, r0
 800eb52:	db01      	blt.n	800eb58 <_malloc_r+0x1c>
 800eb54:	42a9      	cmp	r1, r5
 800eb56:	d904      	bls.n	800eb62 <_malloc_r+0x26>
 800eb58:	230c      	movs	r3, #12
 800eb5a:	6033      	str	r3, [r6, #0]
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec38 <_malloc_r+0xfc>
 800eb66:	f000 f869 	bl	800ec3c <__malloc_lock>
 800eb6a:	f8d8 3000 	ldr.w	r3, [r8]
 800eb6e:	461c      	mov	r4, r3
 800eb70:	bb44      	cbnz	r4, 800ebc4 <_malloc_r+0x88>
 800eb72:	4629      	mov	r1, r5
 800eb74:	4630      	mov	r0, r6
 800eb76:	f7ff ffbf 	bl	800eaf8 <sbrk_aligned>
 800eb7a:	1c43      	adds	r3, r0, #1
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	d158      	bne.n	800ec32 <_malloc_r+0xf6>
 800eb80:	f8d8 4000 	ldr.w	r4, [r8]
 800eb84:	4627      	mov	r7, r4
 800eb86:	2f00      	cmp	r7, #0
 800eb88:	d143      	bne.n	800ec12 <_malloc_r+0xd6>
 800eb8a:	2c00      	cmp	r4, #0
 800eb8c:	d04b      	beq.n	800ec26 <_malloc_r+0xea>
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	4639      	mov	r1, r7
 800eb92:	4630      	mov	r0, r6
 800eb94:	eb04 0903 	add.w	r9, r4, r3
 800eb98:	f000 f9ae 	bl	800eef8 <_sbrk_r>
 800eb9c:	4581      	cmp	r9, r0
 800eb9e:	d142      	bne.n	800ec26 <_malloc_r+0xea>
 800eba0:	6821      	ldr	r1, [r4, #0]
 800eba2:	1a6d      	subs	r5, r5, r1
 800eba4:	4629      	mov	r1, r5
 800eba6:	4630      	mov	r0, r6
 800eba8:	f7ff ffa6 	bl	800eaf8 <sbrk_aligned>
 800ebac:	3001      	adds	r0, #1
 800ebae:	d03a      	beq.n	800ec26 <_malloc_r+0xea>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	442b      	add	r3, r5
 800ebb4:	6023      	str	r3, [r4, #0]
 800ebb6:	f8d8 3000 	ldr.w	r3, [r8]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	bb62      	cbnz	r2, 800ec18 <_malloc_r+0xdc>
 800ebbe:	f8c8 7000 	str.w	r7, [r8]
 800ebc2:	e00f      	b.n	800ebe4 <_malloc_r+0xa8>
 800ebc4:	6822      	ldr	r2, [r4, #0]
 800ebc6:	1b52      	subs	r2, r2, r5
 800ebc8:	d420      	bmi.n	800ec0c <_malloc_r+0xd0>
 800ebca:	2a0b      	cmp	r2, #11
 800ebcc:	d917      	bls.n	800ebfe <_malloc_r+0xc2>
 800ebce:	1961      	adds	r1, r4, r5
 800ebd0:	42a3      	cmp	r3, r4
 800ebd2:	6025      	str	r5, [r4, #0]
 800ebd4:	bf18      	it	ne
 800ebd6:	6059      	strne	r1, [r3, #4]
 800ebd8:	6863      	ldr	r3, [r4, #4]
 800ebda:	bf08      	it	eq
 800ebdc:	f8c8 1000 	streq.w	r1, [r8]
 800ebe0:	5162      	str	r2, [r4, r5]
 800ebe2:	604b      	str	r3, [r1, #4]
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f000 f82f 	bl	800ec48 <__malloc_unlock>
 800ebea:	f104 000b 	add.w	r0, r4, #11
 800ebee:	1d23      	adds	r3, r4, #4
 800ebf0:	f020 0007 	bic.w	r0, r0, #7
 800ebf4:	1ac2      	subs	r2, r0, r3
 800ebf6:	bf1c      	itt	ne
 800ebf8:	1a1b      	subne	r3, r3, r0
 800ebfa:	50a3      	strne	r3, [r4, r2]
 800ebfc:	e7af      	b.n	800eb5e <_malloc_r+0x22>
 800ebfe:	6862      	ldr	r2, [r4, #4]
 800ec00:	42a3      	cmp	r3, r4
 800ec02:	bf0c      	ite	eq
 800ec04:	f8c8 2000 	streq.w	r2, [r8]
 800ec08:	605a      	strne	r2, [r3, #4]
 800ec0a:	e7eb      	b.n	800ebe4 <_malloc_r+0xa8>
 800ec0c:	4623      	mov	r3, r4
 800ec0e:	6864      	ldr	r4, [r4, #4]
 800ec10:	e7ae      	b.n	800eb70 <_malloc_r+0x34>
 800ec12:	463c      	mov	r4, r7
 800ec14:	687f      	ldr	r7, [r7, #4]
 800ec16:	e7b6      	b.n	800eb86 <_malloc_r+0x4a>
 800ec18:	461a      	mov	r2, r3
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	42a3      	cmp	r3, r4
 800ec1e:	d1fb      	bne.n	800ec18 <_malloc_r+0xdc>
 800ec20:	2300      	movs	r3, #0
 800ec22:	6053      	str	r3, [r2, #4]
 800ec24:	e7de      	b.n	800ebe4 <_malloc_r+0xa8>
 800ec26:	230c      	movs	r3, #12
 800ec28:	6033      	str	r3, [r6, #0]
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f000 f80c 	bl	800ec48 <__malloc_unlock>
 800ec30:	e794      	b.n	800eb5c <_malloc_r+0x20>
 800ec32:	6005      	str	r5, [r0, #0]
 800ec34:	e7d6      	b.n	800ebe4 <_malloc_r+0xa8>
 800ec36:	bf00      	nop
 800ec38:	20001248 	.word	0x20001248

0800ec3c <__malloc_lock>:
 800ec3c:	4801      	ldr	r0, [pc, #4]	@ (800ec44 <__malloc_lock+0x8>)
 800ec3e:	f000 b996 	b.w	800ef6e <__retarget_lock_acquire_recursive>
 800ec42:	bf00      	nop
 800ec44:	20001388 	.word	0x20001388

0800ec48 <__malloc_unlock>:
 800ec48:	4801      	ldr	r0, [pc, #4]	@ (800ec50 <__malloc_unlock+0x8>)
 800ec4a:	f000 b991 	b.w	800ef70 <__retarget_lock_release_recursive>
 800ec4e:	bf00      	nop
 800ec50:	20001388 	.word	0x20001388

0800ec54 <std>:
 800ec54:	2300      	movs	r3, #0
 800ec56:	b510      	push	{r4, lr}
 800ec58:	4604      	mov	r4, r0
 800ec5a:	e9c0 3300 	strd	r3, r3, [r0]
 800ec5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec62:	6083      	str	r3, [r0, #8]
 800ec64:	8181      	strh	r1, [r0, #12]
 800ec66:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec68:	81c2      	strh	r2, [r0, #14]
 800ec6a:	6183      	str	r3, [r0, #24]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	2208      	movs	r2, #8
 800ec70:	305c      	adds	r0, #92	@ 0x5c
 800ec72:	f000 f939 	bl	800eee8 <memset>
 800ec76:	4b0d      	ldr	r3, [pc, #52]	@ (800ecac <std+0x58>)
 800ec78:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb0 <std+0x5c>)
 800ec7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb4 <std+0x60>)
 800ec80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec82:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb8 <std+0x64>)
 800ec84:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec86:	4b0d      	ldr	r3, [pc, #52]	@ (800ecbc <std+0x68>)
 800ec88:	6224      	str	r4, [r4, #32]
 800ec8a:	429c      	cmp	r4, r3
 800ec8c:	d006      	beq.n	800ec9c <std+0x48>
 800ec8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec92:	4294      	cmp	r4, r2
 800ec94:	d002      	beq.n	800ec9c <std+0x48>
 800ec96:	33d0      	adds	r3, #208	@ 0xd0
 800ec98:	429c      	cmp	r4, r3
 800ec9a:	d105      	bne.n	800eca8 <std+0x54>
 800ec9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca4:	f000 b962 	b.w	800ef6c <__retarget_lock_init_recursive>
 800eca8:	bd10      	pop	{r4, pc}
 800ecaa:	bf00      	nop
 800ecac:	0800f71d 	.word	0x0800f71d
 800ecb0:	0800f73f 	.word	0x0800f73f
 800ecb4:	0800f777 	.word	0x0800f777
 800ecb8:	0800f79b 	.word	0x0800f79b
 800ecbc:	2000124c 	.word	0x2000124c

0800ecc0 <stdio_exit_handler>:
 800ecc0:	4a02      	ldr	r2, [pc, #8]	@ (800eccc <stdio_exit_handler+0xc>)
 800ecc2:	4903      	ldr	r1, [pc, #12]	@ (800ecd0 <stdio_exit_handler+0x10>)
 800ecc4:	4803      	ldr	r0, [pc, #12]	@ (800ecd4 <stdio_exit_handler+0x14>)
 800ecc6:	f000 b869 	b.w	800ed9c <_fwalk_sglue>
 800ecca:	bf00      	nop
 800eccc:	20000560 	.word	0x20000560
 800ecd0:	0800f6cd 	.word	0x0800f6cd
 800ecd4:	20000570 	.word	0x20000570

0800ecd8 <cleanup_stdio>:
 800ecd8:	6841      	ldr	r1, [r0, #4]
 800ecda:	4b0c      	ldr	r3, [pc, #48]	@ (800ed0c <cleanup_stdio+0x34>)
 800ecdc:	4299      	cmp	r1, r3
 800ecde:	b510      	push	{r4, lr}
 800ece0:	4604      	mov	r4, r0
 800ece2:	d001      	beq.n	800ece8 <cleanup_stdio+0x10>
 800ece4:	f000 fcf2 	bl	800f6cc <_fflush_r>
 800ece8:	68a1      	ldr	r1, [r4, #8]
 800ecea:	4b09      	ldr	r3, [pc, #36]	@ (800ed10 <cleanup_stdio+0x38>)
 800ecec:	4299      	cmp	r1, r3
 800ecee:	d002      	beq.n	800ecf6 <cleanup_stdio+0x1e>
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f000 fceb 	bl	800f6cc <_fflush_r>
 800ecf6:	68e1      	ldr	r1, [r4, #12]
 800ecf8:	4b06      	ldr	r3, [pc, #24]	@ (800ed14 <cleanup_stdio+0x3c>)
 800ecfa:	4299      	cmp	r1, r3
 800ecfc:	d004      	beq.n	800ed08 <cleanup_stdio+0x30>
 800ecfe:	4620      	mov	r0, r4
 800ed00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed04:	f000 bce2 	b.w	800f6cc <_fflush_r>
 800ed08:	bd10      	pop	{r4, pc}
 800ed0a:	bf00      	nop
 800ed0c:	2000124c 	.word	0x2000124c
 800ed10:	200012b4 	.word	0x200012b4
 800ed14:	2000131c 	.word	0x2000131c

0800ed18 <global_stdio_init.part.0>:
 800ed18:	b510      	push	{r4, lr}
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed48 <global_stdio_init.part.0+0x30>)
 800ed1c:	4c0b      	ldr	r4, [pc, #44]	@ (800ed4c <global_stdio_init.part.0+0x34>)
 800ed1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ed50 <global_stdio_init.part.0+0x38>)
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	4620      	mov	r0, r4
 800ed24:	2200      	movs	r2, #0
 800ed26:	2104      	movs	r1, #4
 800ed28:	f7ff ff94 	bl	800ec54 <std>
 800ed2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed30:	2201      	movs	r2, #1
 800ed32:	2109      	movs	r1, #9
 800ed34:	f7ff ff8e 	bl	800ec54 <std>
 800ed38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed3c:	2202      	movs	r2, #2
 800ed3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed42:	2112      	movs	r1, #18
 800ed44:	f7ff bf86 	b.w	800ec54 <std>
 800ed48:	20001384 	.word	0x20001384
 800ed4c:	2000124c 	.word	0x2000124c
 800ed50:	0800ecc1 	.word	0x0800ecc1

0800ed54 <__sfp_lock_acquire>:
 800ed54:	4801      	ldr	r0, [pc, #4]	@ (800ed5c <__sfp_lock_acquire+0x8>)
 800ed56:	f000 b90a 	b.w	800ef6e <__retarget_lock_acquire_recursive>
 800ed5a:	bf00      	nop
 800ed5c:	20001389 	.word	0x20001389

0800ed60 <__sfp_lock_release>:
 800ed60:	4801      	ldr	r0, [pc, #4]	@ (800ed68 <__sfp_lock_release+0x8>)
 800ed62:	f000 b905 	b.w	800ef70 <__retarget_lock_release_recursive>
 800ed66:	bf00      	nop
 800ed68:	20001389 	.word	0x20001389

0800ed6c <__sinit>:
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	4604      	mov	r4, r0
 800ed70:	f7ff fff0 	bl	800ed54 <__sfp_lock_acquire>
 800ed74:	6a23      	ldr	r3, [r4, #32]
 800ed76:	b11b      	cbz	r3, 800ed80 <__sinit+0x14>
 800ed78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed7c:	f7ff bff0 	b.w	800ed60 <__sfp_lock_release>
 800ed80:	4b04      	ldr	r3, [pc, #16]	@ (800ed94 <__sinit+0x28>)
 800ed82:	6223      	str	r3, [r4, #32]
 800ed84:	4b04      	ldr	r3, [pc, #16]	@ (800ed98 <__sinit+0x2c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1f5      	bne.n	800ed78 <__sinit+0xc>
 800ed8c:	f7ff ffc4 	bl	800ed18 <global_stdio_init.part.0>
 800ed90:	e7f2      	b.n	800ed78 <__sinit+0xc>
 800ed92:	bf00      	nop
 800ed94:	0800ecd9 	.word	0x0800ecd9
 800ed98:	20001384 	.word	0x20001384

0800ed9c <_fwalk_sglue>:
 800ed9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda0:	4607      	mov	r7, r0
 800eda2:	4688      	mov	r8, r1
 800eda4:	4614      	mov	r4, r2
 800eda6:	2600      	movs	r6, #0
 800eda8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edac:	f1b9 0901 	subs.w	r9, r9, #1
 800edb0:	d505      	bpl.n	800edbe <_fwalk_sglue+0x22>
 800edb2:	6824      	ldr	r4, [r4, #0]
 800edb4:	2c00      	cmp	r4, #0
 800edb6:	d1f7      	bne.n	800eda8 <_fwalk_sglue+0xc>
 800edb8:	4630      	mov	r0, r6
 800edba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edbe:	89ab      	ldrh	r3, [r5, #12]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d907      	bls.n	800edd4 <_fwalk_sglue+0x38>
 800edc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edc8:	3301      	adds	r3, #1
 800edca:	d003      	beq.n	800edd4 <_fwalk_sglue+0x38>
 800edcc:	4629      	mov	r1, r5
 800edce:	4638      	mov	r0, r7
 800edd0:	47c0      	blx	r8
 800edd2:	4306      	orrs	r6, r0
 800edd4:	3568      	adds	r5, #104	@ 0x68
 800edd6:	e7e9      	b.n	800edac <_fwalk_sglue+0x10>

0800edd8 <iprintf>:
 800edd8:	b40f      	push	{r0, r1, r2, r3}
 800edda:	b507      	push	{r0, r1, r2, lr}
 800eddc:	4906      	ldr	r1, [pc, #24]	@ (800edf8 <iprintf+0x20>)
 800edde:	ab04      	add	r3, sp, #16
 800ede0:	6808      	ldr	r0, [r1, #0]
 800ede2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ede6:	6881      	ldr	r1, [r0, #8]
 800ede8:	9301      	str	r3, [sp, #4]
 800edea:	f000 f945 	bl	800f078 <_vfiprintf_r>
 800edee:	b003      	add	sp, #12
 800edf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800edf4:	b004      	add	sp, #16
 800edf6:	4770      	bx	lr
 800edf8:	2000056c 	.word	0x2000056c

0800edfc <putchar>:
 800edfc:	4b02      	ldr	r3, [pc, #8]	@ (800ee08 <putchar+0xc>)
 800edfe:	4601      	mov	r1, r0
 800ee00:	6818      	ldr	r0, [r3, #0]
 800ee02:	6882      	ldr	r2, [r0, #8]
 800ee04:	f000 bdc4 	b.w	800f990 <_putc_r>
 800ee08:	2000056c 	.word	0x2000056c

0800ee0c <_puts_r>:
 800ee0c:	6a03      	ldr	r3, [r0, #32]
 800ee0e:	b570      	push	{r4, r5, r6, lr}
 800ee10:	6884      	ldr	r4, [r0, #8]
 800ee12:	4605      	mov	r5, r0
 800ee14:	460e      	mov	r6, r1
 800ee16:	b90b      	cbnz	r3, 800ee1c <_puts_r+0x10>
 800ee18:	f7ff ffa8 	bl	800ed6c <__sinit>
 800ee1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee1e:	07db      	lsls	r3, r3, #31
 800ee20:	d405      	bmi.n	800ee2e <_puts_r+0x22>
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	0598      	lsls	r0, r3, #22
 800ee26:	d402      	bmi.n	800ee2e <_puts_r+0x22>
 800ee28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee2a:	f000 f8a0 	bl	800ef6e <__retarget_lock_acquire_recursive>
 800ee2e:	89a3      	ldrh	r3, [r4, #12]
 800ee30:	0719      	lsls	r1, r3, #28
 800ee32:	d502      	bpl.n	800ee3a <_puts_r+0x2e>
 800ee34:	6923      	ldr	r3, [r4, #16]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d135      	bne.n	800eea6 <_puts_r+0x9a>
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f000 fcef 	bl	800f820 <__swsetup_r>
 800ee42:	b380      	cbz	r0, 800eea6 <_puts_r+0x9a>
 800ee44:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ee48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee4a:	07da      	lsls	r2, r3, #31
 800ee4c:	d405      	bmi.n	800ee5a <_puts_r+0x4e>
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	059b      	lsls	r3, r3, #22
 800ee52:	d402      	bmi.n	800ee5a <_puts_r+0x4e>
 800ee54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee56:	f000 f88b 	bl	800ef70 <__retarget_lock_release_recursive>
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	bd70      	pop	{r4, r5, r6, pc}
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	da04      	bge.n	800ee6c <_puts_r+0x60>
 800ee62:	69a2      	ldr	r2, [r4, #24]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	dc17      	bgt.n	800ee98 <_puts_r+0x8c>
 800ee68:	290a      	cmp	r1, #10
 800ee6a:	d015      	beq.n	800ee98 <_puts_r+0x8c>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	1c5a      	adds	r2, r3, #1
 800ee70:	6022      	str	r2, [r4, #0]
 800ee72:	7019      	strb	r1, [r3, #0]
 800ee74:	68a3      	ldr	r3, [r4, #8]
 800ee76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	60a3      	str	r3, [r4, #8]
 800ee7e:	2900      	cmp	r1, #0
 800ee80:	d1ed      	bne.n	800ee5e <_puts_r+0x52>
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da11      	bge.n	800eeaa <_puts_r+0x9e>
 800ee86:	4622      	mov	r2, r4
 800ee88:	210a      	movs	r1, #10
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	f000 fc89 	bl	800f7a2 <__swbuf_r>
 800ee90:	3001      	adds	r0, #1
 800ee92:	d0d7      	beq.n	800ee44 <_puts_r+0x38>
 800ee94:	250a      	movs	r5, #10
 800ee96:	e7d7      	b.n	800ee48 <_puts_r+0x3c>
 800ee98:	4622      	mov	r2, r4
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	f000 fc81 	bl	800f7a2 <__swbuf_r>
 800eea0:	3001      	adds	r0, #1
 800eea2:	d1e7      	bne.n	800ee74 <_puts_r+0x68>
 800eea4:	e7ce      	b.n	800ee44 <_puts_r+0x38>
 800eea6:	3e01      	subs	r6, #1
 800eea8:	e7e4      	b.n	800ee74 <_puts_r+0x68>
 800eeaa:	6823      	ldr	r3, [r4, #0]
 800eeac:	1c5a      	adds	r2, r3, #1
 800eeae:	6022      	str	r2, [r4, #0]
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	701a      	strb	r2, [r3, #0]
 800eeb4:	e7ee      	b.n	800ee94 <_puts_r+0x88>
	...

0800eeb8 <puts>:
 800eeb8:	4b02      	ldr	r3, [pc, #8]	@ (800eec4 <puts+0xc>)
 800eeba:	4601      	mov	r1, r0
 800eebc:	6818      	ldr	r0, [r3, #0]
 800eebe:	f7ff bfa5 	b.w	800ee0c <_puts_r>
 800eec2:	bf00      	nop
 800eec4:	2000056c 	.word	0x2000056c

0800eec8 <memcmp>:
 800eec8:	b510      	push	{r4, lr}
 800eeca:	3901      	subs	r1, #1
 800eecc:	4402      	add	r2, r0
 800eece:	4290      	cmp	r0, r2
 800eed0:	d101      	bne.n	800eed6 <memcmp+0xe>
 800eed2:	2000      	movs	r0, #0
 800eed4:	e005      	b.n	800eee2 <memcmp+0x1a>
 800eed6:	7803      	ldrb	r3, [r0, #0]
 800eed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eedc:	42a3      	cmp	r3, r4
 800eede:	d001      	beq.n	800eee4 <memcmp+0x1c>
 800eee0:	1b18      	subs	r0, r3, r4
 800eee2:	bd10      	pop	{r4, pc}
 800eee4:	3001      	adds	r0, #1
 800eee6:	e7f2      	b.n	800eece <memcmp+0x6>

0800eee8 <memset>:
 800eee8:	4402      	add	r2, r0
 800eeea:	4603      	mov	r3, r0
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d100      	bne.n	800eef2 <memset+0xa>
 800eef0:	4770      	bx	lr
 800eef2:	f803 1b01 	strb.w	r1, [r3], #1
 800eef6:	e7f9      	b.n	800eeec <memset+0x4>

0800eef8 <_sbrk_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4d06      	ldr	r5, [pc, #24]	@ (800ef14 <_sbrk_r+0x1c>)
 800eefc:	2300      	movs	r3, #0
 800eefe:	4604      	mov	r4, r0
 800ef00:	4608      	mov	r0, r1
 800ef02:	602b      	str	r3, [r5, #0]
 800ef04:	f7f9 fd9c 	bl	8008a40 <_sbrk>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d102      	bne.n	800ef12 <_sbrk_r+0x1a>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	b103      	cbz	r3, 800ef12 <_sbrk_r+0x1a>
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	bd38      	pop	{r3, r4, r5, pc}
 800ef14:	2000138c 	.word	0x2000138c

0800ef18 <__errno>:
 800ef18:	4b01      	ldr	r3, [pc, #4]	@ (800ef20 <__errno+0x8>)
 800ef1a:	6818      	ldr	r0, [r3, #0]
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	2000056c 	.word	0x2000056c

0800ef24 <__libc_init_array>:
 800ef24:	b570      	push	{r4, r5, r6, lr}
 800ef26:	4d0d      	ldr	r5, [pc, #52]	@ (800ef5c <__libc_init_array+0x38>)
 800ef28:	4c0d      	ldr	r4, [pc, #52]	@ (800ef60 <__libc_init_array+0x3c>)
 800ef2a:	1b64      	subs	r4, r4, r5
 800ef2c:	10a4      	asrs	r4, r4, #2
 800ef2e:	2600      	movs	r6, #0
 800ef30:	42a6      	cmp	r6, r4
 800ef32:	d109      	bne.n	800ef48 <__libc_init_array+0x24>
 800ef34:	4d0b      	ldr	r5, [pc, #44]	@ (800ef64 <__libc_init_array+0x40>)
 800ef36:	4c0c      	ldr	r4, [pc, #48]	@ (800ef68 <__libc_init_array+0x44>)
 800ef38:	f000 fdc6 	bl	800fac8 <_init>
 800ef3c:	1b64      	subs	r4, r4, r5
 800ef3e:	10a4      	asrs	r4, r4, #2
 800ef40:	2600      	movs	r6, #0
 800ef42:	42a6      	cmp	r6, r4
 800ef44:	d105      	bne.n	800ef52 <__libc_init_array+0x2e>
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef4c:	4798      	blx	r3
 800ef4e:	3601      	adds	r6, #1
 800ef50:	e7ee      	b.n	800ef30 <__libc_init_array+0xc>
 800ef52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef56:	4798      	blx	r3
 800ef58:	3601      	adds	r6, #1
 800ef5a:	e7f2      	b.n	800ef42 <__libc_init_array+0x1e>
 800ef5c:	08010070 	.word	0x08010070
 800ef60:	08010070 	.word	0x08010070
 800ef64:	08010070 	.word	0x08010070
 800ef68:	08010074 	.word	0x08010074

0800ef6c <__retarget_lock_init_recursive>:
 800ef6c:	4770      	bx	lr

0800ef6e <__retarget_lock_acquire_recursive>:
 800ef6e:	4770      	bx	lr

0800ef70 <__retarget_lock_release_recursive>:
 800ef70:	4770      	bx	lr

0800ef72 <memcpy>:
 800ef72:	440a      	add	r2, r1
 800ef74:	4291      	cmp	r1, r2
 800ef76:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ef7a:	d100      	bne.n	800ef7e <memcpy+0xc>
 800ef7c:	4770      	bx	lr
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef88:	4291      	cmp	r1, r2
 800ef8a:	d1f9      	bne.n	800ef80 <memcpy+0xe>
 800ef8c:	bd10      	pop	{r4, pc}
	...

0800ef90 <_free_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4605      	mov	r5, r0
 800ef94:	2900      	cmp	r1, #0
 800ef96:	d041      	beq.n	800f01c <_free_r+0x8c>
 800ef98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef9c:	1f0c      	subs	r4, r1, #4
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	bfb8      	it	lt
 800efa2:	18e4      	addlt	r4, r4, r3
 800efa4:	f7ff fe4a 	bl	800ec3c <__malloc_lock>
 800efa8:	4a1d      	ldr	r2, [pc, #116]	@ (800f020 <_free_r+0x90>)
 800efaa:	6813      	ldr	r3, [r2, #0]
 800efac:	b933      	cbnz	r3, 800efbc <_free_r+0x2c>
 800efae:	6063      	str	r3, [r4, #4]
 800efb0:	6014      	str	r4, [r2, #0]
 800efb2:	4628      	mov	r0, r5
 800efb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efb8:	f7ff be46 	b.w	800ec48 <__malloc_unlock>
 800efbc:	42a3      	cmp	r3, r4
 800efbe:	d908      	bls.n	800efd2 <_free_r+0x42>
 800efc0:	6820      	ldr	r0, [r4, #0]
 800efc2:	1821      	adds	r1, r4, r0
 800efc4:	428b      	cmp	r3, r1
 800efc6:	bf01      	itttt	eq
 800efc8:	6819      	ldreq	r1, [r3, #0]
 800efca:	685b      	ldreq	r3, [r3, #4]
 800efcc:	1809      	addeq	r1, r1, r0
 800efce:	6021      	streq	r1, [r4, #0]
 800efd0:	e7ed      	b.n	800efae <_free_r+0x1e>
 800efd2:	461a      	mov	r2, r3
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	b10b      	cbz	r3, 800efdc <_free_r+0x4c>
 800efd8:	42a3      	cmp	r3, r4
 800efda:	d9fa      	bls.n	800efd2 <_free_r+0x42>
 800efdc:	6811      	ldr	r1, [r2, #0]
 800efde:	1850      	adds	r0, r2, r1
 800efe0:	42a0      	cmp	r0, r4
 800efe2:	d10b      	bne.n	800effc <_free_r+0x6c>
 800efe4:	6820      	ldr	r0, [r4, #0]
 800efe6:	4401      	add	r1, r0
 800efe8:	1850      	adds	r0, r2, r1
 800efea:	4283      	cmp	r3, r0
 800efec:	6011      	str	r1, [r2, #0]
 800efee:	d1e0      	bne.n	800efb2 <_free_r+0x22>
 800eff0:	6818      	ldr	r0, [r3, #0]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	6053      	str	r3, [r2, #4]
 800eff6:	4408      	add	r0, r1
 800eff8:	6010      	str	r0, [r2, #0]
 800effa:	e7da      	b.n	800efb2 <_free_r+0x22>
 800effc:	d902      	bls.n	800f004 <_free_r+0x74>
 800effe:	230c      	movs	r3, #12
 800f000:	602b      	str	r3, [r5, #0]
 800f002:	e7d6      	b.n	800efb2 <_free_r+0x22>
 800f004:	6820      	ldr	r0, [r4, #0]
 800f006:	1821      	adds	r1, r4, r0
 800f008:	428b      	cmp	r3, r1
 800f00a:	bf04      	itt	eq
 800f00c:	6819      	ldreq	r1, [r3, #0]
 800f00e:	685b      	ldreq	r3, [r3, #4]
 800f010:	6063      	str	r3, [r4, #4]
 800f012:	bf04      	itt	eq
 800f014:	1809      	addeq	r1, r1, r0
 800f016:	6021      	streq	r1, [r4, #0]
 800f018:	6054      	str	r4, [r2, #4]
 800f01a:	e7ca      	b.n	800efb2 <_free_r+0x22>
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop
 800f020:	20001248 	.word	0x20001248

0800f024 <__sfputc_r>:
 800f024:	6893      	ldr	r3, [r2, #8]
 800f026:	3b01      	subs	r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	b410      	push	{r4}
 800f02c:	6093      	str	r3, [r2, #8]
 800f02e:	da08      	bge.n	800f042 <__sfputc_r+0x1e>
 800f030:	6994      	ldr	r4, [r2, #24]
 800f032:	42a3      	cmp	r3, r4
 800f034:	db01      	blt.n	800f03a <__sfputc_r+0x16>
 800f036:	290a      	cmp	r1, #10
 800f038:	d103      	bne.n	800f042 <__sfputc_r+0x1e>
 800f03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03e:	f000 bbb0 	b.w	800f7a2 <__swbuf_r>
 800f042:	6813      	ldr	r3, [r2, #0]
 800f044:	1c58      	adds	r0, r3, #1
 800f046:	6010      	str	r0, [r2, #0]
 800f048:	7019      	strb	r1, [r3, #0]
 800f04a:	4608      	mov	r0, r1
 800f04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f050:	4770      	bx	lr

0800f052 <__sfputs_r>:
 800f052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f054:	4606      	mov	r6, r0
 800f056:	460f      	mov	r7, r1
 800f058:	4614      	mov	r4, r2
 800f05a:	18d5      	adds	r5, r2, r3
 800f05c:	42ac      	cmp	r4, r5
 800f05e:	d101      	bne.n	800f064 <__sfputs_r+0x12>
 800f060:	2000      	movs	r0, #0
 800f062:	e007      	b.n	800f074 <__sfputs_r+0x22>
 800f064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f068:	463a      	mov	r2, r7
 800f06a:	4630      	mov	r0, r6
 800f06c:	f7ff ffda 	bl	800f024 <__sfputc_r>
 800f070:	1c43      	adds	r3, r0, #1
 800f072:	d1f3      	bne.n	800f05c <__sfputs_r+0xa>
 800f074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f078 <_vfiprintf_r>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	460d      	mov	r5, r1
 800f07e:	b09d      	sub	sp, #116	@ 0x74
 800f080:	4614      	mov	r4, r2
 800f082:	4698      	mov	r8, r3
 800f084:	4606      	mov	r6, r0
 800f086:	b118      	cbz	r0, 800f090 <_vfiprintf_r+0x18>
 800f088:	6a03      	ldr	r3, [r0, #32]
 800f08a:	b90b      	cbnz	r3, 800f090 <_vfiprintf_r+0x18>
 800f08c:	f7ff fe6e 	bl	800ed6c <__sinit>
 800f090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f092:	07d9      	lsls	r1, r3, #31
 800f094:	d405      	bmi.n	800f0a2 <_vfiprintf_r+0x2a>
 800f096:	89ab      	ldrh	r3, [r5, #12]
 800f098:	059a      	lsls	r2, r3, #22
 800f09a:	d402      	bmi.n	800f0a2 <_vfiprintf_r+0x2a>
 800f09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f09e:	f7ff ff66 	bl	800ef6e <__retarget_lock_acquire_recursive>
 800f0a2:	89ab      	ldrh	r3, [r5, #12]
 800f0a4:	071b      	lsls	r3, r3, #28
 800f0a6:	d501      	bpl.n	800f0ac <_vfiprintf_r+0x34>
 800f0a8:	692b      	ldr	r3, [r5, #16]
 800f0aa:	b99b      	cbnz	r3, 800f0d4 <_vfiprintf_r+0x5c>
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f000 fbb6 	bl	800f820 <__swsetup_r>
 800f0b4:	b170      	cbz	r0, 800f0d4 <_vfiprintf_r+0x5c>
 800f0b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0b8:	07dc      	lsls	r4, r3, #31
 800f0ba:	d504      	bpl.n	800f0c6 <_vfiprintf_r+0x4e>
 800f0bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0c0:	b01d      	add	sp, #116	@ 0x74
 800f0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c6:	89ab      	ldrh	r3, [r5, #12]
 800f0c8:	0598      	lsls	r0, r3, #22
 800f0ca:	d4f7      	bmi.n	800f0bc <_vfiprintf_r+0x44>
 800f0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0ce:	f7ff ff4f 	bl	800ef70 <__retarget_lock_release_recursive>
 800f0d2:	e7f3      	b.n	800f0bc <_vfiprintf_r+0x44>
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0d8:	2320      	movs	r3, #32
 800f0da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0e2:	2330      	movs	r3, #48	@ 0x30
 800f0e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f294 <_vfiprintf_r+0x21c>
 800f0e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0ec:	f04f 0901 	mov.w	r9, #1
 800f0f0:	4623      	mov	r3, r4
 800f0f2:	469a      	mov	sl, r3
 800f0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0f8:	b10a      	cbz	r2, 800f0fe <_vfiprintf_r+0x86>
 800f0fa:	2a25      	cmp	r2, #37	@ 0x25
 800f0fc:	d1f9      	bne.n	800f0f2 <_vfiprintf_r+0x7a>
 800f0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f102:	d00b      	beq.n	800f11c <_vfiprintf_r+0xa4>
 800f104:	465b      	mov	r3, fp
 800f106:	4622      	mov	r2, r4
 800f108:	4629      	mov	r1, r5
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7ff ffa1 	bl	800f052 <__sfputs_r>
 800f110:	3001      	adds	r0, #1
 800f112:	f000 80a7 	beq.w	800f264 <_vfiprintf_r+0x1ec>
 800f116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f118:	445a      	add	r2, fp
 800f11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f11c:	f89a 3000 	ldrb.w	r3, [sl]
 800f120:	2b00      	cmp	r3, #0
 800f122:	f000 809f 	beq.w	800f264 <_vfiprintf_r+0x1ec>
 800f126:	2300      	movs	r3, #0
 800f128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f130:	f10a 0a01 	add.w	sl, sl, #1
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	9307      	str	r3, [sp, #28]
 800f138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f13c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f13e:	4654      	mov	r4, sl
 800f140:	2205      	movs	r2, #5
 800f142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f146:	4853      	ldr	r0, [pc, #332]	@ (800f294 <_vfiprintf_r+0x21c>)
 800f148:	f7f1 f84a 	bl	80001e0 <memchr>
 800f14c:	9a04      	ldr	r2, [sp, #16]
 800f14e:	b9d8      	cbnz	r0, 800f188 <_vfiprintf_r+0x110>
 800f150:	06d1      	lsls	r1, r2, #27
 800f152:	bf44      	itt	mi
 800f154:	2320      	movmi	r3, #32
 800f156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f15a:	0713      	lsls	r3, r2, #28
 800f15c:	bf44      	itt	mi
 800f15e:	232b      	movmi	r3, #43	@ 0x2b
 800f160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f164:	f89a 3000 	ldrb.w	r3, [sl]
 800f168:	2b2a      	cmp	r3, #42	@ 0x2a
 800f16a:	d015      	beq.n	800f198 <_vfiprintf_r+0x120>
 800f16c:	9a07      	ldr	r2, [sp, #28]
 800f16e:	4654      	mov	r4, sl
 800f170:	2000      	movs	r0, #0
 800f172:	f04f 0c0a 	mov.w	ip, #10
 800f176:	4621      	mov	r1, r4
 800f178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f17c:	3b30      	subs	r3, #48	@ 0x30
 800f17e:	2b09      	cmp	r3, #9
 800f180:	d94b      	bls.n	800f21a <_vfiprintf_r+0x1a2>
 800f182:	b1b0      	cbz	r0, 800f1b2 <_vfiprintf_r+0x13a>
 800f184:	9207      	str	r2, [sp, #28]
 800f186:	e014      	b.n	800f1b2 <_vfiprintf_r+0x13a>
 800f188:	eba0 0308 	sub.w	r3, r0, r8
 800f18c:	fa09 f303 	lsl.w	r3, r9, r3
 800f190:	4313      	orrs	r3, r2
 800f192:	9304      	str	r3, [sp, #16]
 800f194:	46a2      	mov	sl, r4
 800f196:	e7d2      	b.n	800f13e <_vfiprintf_r+0xc6>
 800f198:	9b03      	ldr	r3, [sp, #12]
 800f19a:	1d19      	adds	r1, r3, #4
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	9103      	str	r1, [sp, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	bfbb      	ittet	lt
 800f1a4:	425b      	neglt	r3, r3
 800f1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f1aa:	9307      	strge	r3, [sp, #28]
 800f1ac:	9307      	strlt	r3, [sp, #28]
 800f1ae:	bfb8      	it	lt
 800f1b0:	9204      	strlt	r2, [sp, #16]
 800f1b2:	7823      	ldrb	r3, [r4, #0]
 800f1b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1b6:	d10a      	bne.n	800f1ce <_vfiprintf_r+0x156>
 800f1b8:	7863      	ldrb	r3, [r4, #1]
 800f1ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1bc:	d132      	bne.n	800f224 <_vfiprintf_r+0x1ac>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	1d1a      	adds	r2, r3, #4
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	9203      	str	r2, [sp, #12]
 800f1c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1ca:	3402      	adds	r4, #2
 800f1cc:	9305      	str	r3, [sp, #20]
 800f1ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2a4 <_vfiprintf_r+0x22c>
 800f1d2:	7821      	ldrb	r1, [r4, #0]
 800f1d4:	2203      	movs	r2, #3
 800f1d6:	4650      	mov	r0, sl
 800f1d8:	f7f1 f802 	bl	80001e0 <memchr>
 800f1dc:	b138      	cbz	r0, 800f1ee <_vfiprintf_r+0x176>
 800f1de:	9b04      	ldr	r3, [sp, #16]
 800f1e0:	eba0 000a 	sub.w	r0, r0, sl
 800f1e4:	2240      	movs	r2, #64	@ 0x40
 800f1e6:	4082      	lsls	r2, r0
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	3401      	adds	r4, #1
 800f1ec:	9304      	str	r3, [sp, #16]
 800f1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f2:	4829      	ldr	r0, [pc, #164]	@ (800f298 <_vfiprintf_r+0x220>)
 800f1f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1f8:	2206      	movs	r2, #6
 800f1fa:	f7f0 fff1 	bl	80001e0 <memchr>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	d03f      	beq.n	800f282 <_vfiprintf_r+0x20a>
 800f202:	4b26      	ldr	r3, [pc, #152]	@ (800f29c <_vfiprintf_r+0x224>)
 800f204:	bb1b      	cbnz	r3, 800f24e <_vfiprintf_r+0x1d6>
 800f206:	9b03      	ldr	r3, [sp, #12]
 800f208:	3307      	adds	r3, #7
 800f20a:	f023 0307 	bic.w	r3, r3, #7
 800f20e:	3308      	adds	r3, #8
 800f210:	9303      	str	r3, [sp, #12]
 800f212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f214:	443b      	add	r3, r7
 800f216:	9309      	str	r3, [sp, #36]	@ 0x24
 800f218:	e76a      	b.n	800f0f0 <_vfiprintf_r+0x78>
 800f21a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f21e:	460c      	mov	r4, r1
 800f220:	2001      	movs	r0, #1
 800f222:	e7a8      	b.n	800f176 <_vfiprintf_r+0xfe>
 800f224:	2300      	movs	r3, #0
 800f226:	3401      	adds	r4, #1
 800f228:	9305      	str	r3, [sp, #20]
 800f22a:	4619      	mov	r1, r3
 800f22c:	f04f 0c0a 	mov.w	ip, #10
 800f230:	4620      	mov	r0, r4
 800f232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f236:	3a30      	subs	r2, #48	@ 0x30
 800f238:	2a09      	cmp	r2, #9
 800f23a:	d903      	bls.n	800f244 <_vfiprintf_r+0x1cc>
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d0c6      	beq.n	800f1ce <_vfiprintf_r+0x156>
 800f240:	9105      	str	r1, [sp, #20]
 800f242:	e7c4      	b.n	800f1ce <_vfiprintf_r+0x156>
 800f244:	fb0c 2101 	mla	r1, ip, r1, r2
 800f248:	4604      	mov	r4, r0
 800f24a:	2301      	movs	r3, #1
 800f24c:	e7f0      	b.n	800f230 <_vfiprintf_r+0x1b8>
 800f24e:	ab03      	add	r3, sp, #12
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	462a      	mov	r2, r5
 800f254:	4b12      	ldr	r3, [pc, #72]	@ (800f2a0 <_vfiprintf_r+0x228>)
 800f256:	a904      	add	r1, sp, #16
 800f258:	4630      	mov	r0, r6
 800f25a:	f3af 8000 	nop.w
 800f25e:	4607      	mov	r7, r0
 800f260:	1c78      	adds	r0, r7, #1
 800f262:	d1d6      	bne.n	800f212 <_vfiprintf_r+0x19a>
 800f264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f266:	07d9      	lsls	r1, r3, #31
 800f268:	d405      	bmi.n	800f276 <_vfiprintf_r+0x1fe>
 800f26a:	89ab      	ldrh	r3, [r5, #12]
 800f26c:	059a      	lsls	r2, r3, #22
 800f26e:	d402      	bmi.n	800f276 <_vfiprintf_r+0x1fe>
 800f270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f272:	f7ff fe7d 	bl	800ef70 <__retarget_lock_release_recursive>
 800f276:	89ab      	ldrh	r3, [r5, #12]
 800f278:	065b      	lsls	r3, r3, #25
 800f27a:	f53f af1f 	bmi.w	800f0bc <_vfiprintf_r+0x44>
 800f27e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f280:	e71e      	b.n	800f0c0 <_vfiprintf_r+0x48>
 800f282:	ab03      	add	r3, sp, #12
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	462a      	mov	r2, r5
 800f288:	4b05      	ldr	r3, [pc, #20]	@ (800f2a0 <_vfiprintf_r+0x228>)
 800f28a:	a904      	add	r1, sp, #16
 800f28c:	4630      	mov	r0, r6
 800f28e:	f000 f879 	bl	800f384 <_printf_i>
 800f292:	e7e4      	b.n	800f25e <_vfiprintf_r+0x1e6>
 800f294:	08010034 	.word	0x08010034
 800f298:	0801003e 	.word	0x0801003e
 800f29c:	00000000 	.word	0x00000000
 800f2a0:	0800f053 	.word	0x0800f053
 800f2a4:	0801003a 	.word	0x0801003a

0800f2a8 <_printf_common>:
 800f2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ac:	4616      	mov	r6, r2
 800f2ae:	4698      	mov	r8, r3
 800f2b0:	688a      	ldr	r2, [r1, #8]
 800f2b2:	690b      	ldr	r3, [r1, #16]
 800f2b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	bfb8      	it	lt
 800f2bc:	4613      	movlt	r3, r2
 800f2be:	6033      	str	r3, [r6, #0]
 800f2c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f2c4:	4607      	mov	r7, r0
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	b10a      	cbz	r2, 800f2ce <_printf_common+0x26>
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	6033      	str	r3, [r6, #0]
 800f2ce:	6823      	ldr	r3, [r4, #0]
 800f2d0:	0699      	lsls	r1, r3, #26
 800f2d2:	bf42      	ittt	mi
 800f2d4:	6833      	ldrmi	r3, [r6, #0]
 800f2d6:	3302      	addmi	r3, #2
 800f2d8:	6033      	strmi	r3, [r6, #0]
 800f2da:	6825      	ldr	r5, [r4, #0]
 800f2dc:	f015 0506 	ands.w	r5, r5, #6
 800f2e0:	d106      	bne.n	800f2f0 <_printf_common+0x48>
 800f2e2:	f104 0a19 	add.w	sl, r4, #25
 800f2e6:	68e3      	ldr	r3, [r4, #12]
 800f2e8:	6832      	ldr	r2, [r6, #0]
 800f2ea:	1a9b      	subs	r3, r3, r2
 800f2ec:	42ab      	cmp	r3, r5
 800f2ee:	dc26      	bgt.n	800f33e <_printf_common+0x96>
 800f2f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f2f4:	6822      	ldr	r2, [r4, #0]
 800f2f6:	3b00      	subs	r3, #0
 800f2f8:	bf18      	it	ne
 800f2fa:	2301      	movne	r3, #1
 800f2fc:	0692      	lsls	r2, r2, #26
 800f2fe:	d42b      	bmi.n	800f358 <_printf_common+0xb0>
 800f300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f304:	4641      	mov	r1, r8
 800f306:	4638      	mov	r0, r7
 800f308:	47c8      	blx	r9
 800f30a:	3001      	adds	r0, #1
 800f30c:	d01e      	beq.n	800f34c <_printf_common+0xa4>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	6922      	ldr	r2, [r4, #16]
 800f312:	f003 0306 	and.w	r3, r3, #6
 800f316:	2b04      	cmp	r3, #4
 800f318:	bf02      	ittt	eq
 800f31a:	68e5      	ldreq	r5, [r4, #12]
 800f31c:	6833      	ldreq	r3, [r6, #0]
 800f31e:	1aed      	subeq	r5, r5, r3
 800f320:	68a3      	ldr	r3, [r4, #8]
 800f322:	bf0c      	ite	eq
 800f324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f328:	2500      	movne	r5, #0
 800f32a:	4293      	cmp	r3, r2
 800f32c:	bfc4      	itt	gt
 800f32e:	1a9b      	subgt	r3, r3, r2
 800f330:	18ed      	addgt	r5, r5, r3
 800f332:	2600      	movs	r6, #0
 800f334:	341a      	adds	r4, #26
 800f336:	42b5      	cmp	r5, r6
 800f338:	d11a      	bne.n	800f370 <_printf_common+0xc8>
 800f33a:	2000      	movs	r0, #0
 800f33c:	e008      	b.n	800f350 <_printf_common+0xa8>
 800f33e:	2301      	movs	r3, #1
 800f340:	4652      	mov	r2, sl
 800f342:	4641      	mov	r1, r8
 800f344:	4638      	mov	r0, r7
 800f346:	47c8      	blx	r9
 800f348:	3001      	adds	r0, #1
 800f34a:	d103      	bne.n	800f354 <_printf_common+0xac>
 800f34c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f354:	3501      	adds	r5, #1
 800f356:	e7c6      	b.n	800f2e6 <_printf_common+0x3e>
 800f358:	18e1      	adds	r1, r4, r3
 800f35a:	1c5a      	adds	r2, r3, #1
 800f35c:	2030      	movs	r0, #48	@ 0x30
 800f35e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f362:	4422      	add	r2, r4
 800f364:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f36c:	3302      	adds	r3, #2
 800f36e:	e7c7      	b.n	800f300 <_printf_common+0x58>
 800f370:	2301      	movs	r3, #1
 800f372:	4622      	mov	r2, r4
 800f374:	4641      	mov	r1, r8
 800f376:	4638      	mov	r0, r7
 800f378:	47c8      	blx	r9
 800f37a:	3001      	adds	r0, #1
 800f37c:	d0e6      	beq.n	800f34c <_printf_common+0xa4>
 800f37e:	3601      	adds	r6, #1
 800f380:	e7d9      	b.n	800f336 <_printf_common+0x8e>
	...

0800f384 <_printf_i>:
 800f384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f388:	7e0f      	ldrb	r7, [r1, #24]
 800f38a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f38c:	2f78      	cmp	r7, #120	@ 0x78
 800f38e:	4691      	mov	r9, r2
 800f390:	4680      	mov	r8, r0
 800f392:	460c      	mov	r4, r1
 800f394:	469a      	mov	sl, r3
 800f396:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f39a:	d807      	bhi.n	800f3ac <_printf_i+0x28>
 800f39c:	2f62      	cmp	r7, #98	@ 0x62
 800f39e:	d80a      	bhi.n	800f3b6 <_printf_i+0x32>
 800f3a0:	2f00      	cmp	r7, #0
 800f3a2:	f000 80d2 	beq.w	800f54a <_printf_i+0x1c6>
 800f3a6:	2f58      	cmp	r7, #88	@ 0x58
 800f3a8:	f000 80b9 	beq.w	800f51e <_printf_i+0x19a>
 800f3ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3b4:	e03a      	b.n	800f42c <_printf_i+0xa8>
 800f3b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3ba:	2b15      	cmp	r3, #21
 800f3bc:	d8f6      	bhi.n	800f3ac <_printf_i+0x28>
 800f3be:	a101      	add	r1, pc, #4	@ (adr r1, 800f3c4 <_printf_i+0x40>)
 800f3c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3c4:	0800f41d 	.word	0x0800f41d
 800f3c8:	0800f431 	.word	0x0800f431
 800f3cc:	0800f3ad 	.word	0x0800f3ad
 800f3d0:	0800f3ad 	.word	0x0800f3ad
 800f3d4:	0800f3ad 	.word	0x0800f3ad
 800f3d8:	0800f3ad 	.word	0x0800f3ad
 800f3dc:	0800f431 	.word	0x0800f431
 800f3e0:	0800f3ad 	.word	0x0800f3ad
 800f3e4:	0800f3ad 	.word	0x0800f3ad
 800f3e8:	0800f3ad 	.word	0x0800f3ad
 800f3ec:	0800f3ad 	.word	0x0800f3ad
 800f3f0:	0800f531 	.word	0x0800f531
 800f3f4:	0800f45b 	.word	0x0800f45b
 800f3f8:	0800f4eb 	.word	0x0800f4eb
 800f3fc:	0800f3ad 	.word	0x0800f3ad
 800f400:	0800f3ad 	.word	0x0800f3ad
 800f404:	0800f553 	.word	0x0800f553
 800f408:	0800f3ad 	.word	0x0800f3ad
 800f40c:	0800f45b 	.word	0x0800f45b
 800f410:	0800f3ad 	.word	0x0800f3ad
 800f414:	0800f3ad 	.word	0x0800f3ad
 800f418:	0800f4f3 	.word	0x0800f4f3
 800f41c:	6833      	ldr	r3, [r6, #0]
 800f41e:	1d1a      	adds	r2, r3, #4
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	6032      	str	r2, [r6, #0]
 800f424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f428:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f42c:	2301      	movs	r3, #1
 800f42e:	e09d      	b.n	800f56c <_printf_i+0x1e8>
 800f430:	6833      	ldr	r3, [r6, #0]
 800f432:	6820      	ldr	r0, [r4, #0]
 800f434:	1d19      	adds	r1, r3, #4
 800f436:	6031      	str	r1, [r6, #0]
 800f438:	0606      	lsls	r6, r0, #24
 800f43a:	d501      	bpl.n	800f440 <_printf_i+0xbc>
 800f43c:	681d      	ldr	r5, [r3, #0]
 800f43e:	e003      	b.n	800f448 <_printf_i+0xc4>
 800f440:	0645      	lsls	r5, r0, #25
 800f442:	d5fb      	bpl.n	800f43c <_printf_i+0xb8>
 800f444:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f448:	2d00      	cmp	r5, #0
 800f44a:	da03      	bge.n	800f454 <_printf_i+0xd0>
 800f44c:	232d      	movs	r3, #45	@ 0x2d
 800f44e:	426d      	negs	r5, r5
 800f450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f454:	4859      	ldr	r0, [pc, #356]	@ (800f5bc <_printf_i+0x238>)
 800f456:	230a      	movs	r3, #10
 800f458:	e011      	b.n	800f47e <_printf_i+0xfa>
 800f45a:	6821      	ldr	r1, [r4, #0]
 800f45c:	6833      	ldr	r3, [r6, #0]
 800f45e:	0608      	lsls	r0, r1, #24
 800f460:	f853 5b04 	ldr.w	r5, [r3], #4
 800f464:	d402      	bmi.n	800f46c <_printf_i+0xe8>
 800f466:	0649      	lsls	r1, r1, #25
 800f468:	bf48      	it	mi
 800f46a:	b2ad      	uxthmi	r5, r5
 800f46c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f46e:	4853      	ldr	r0, [pc, #332]	@ (800f5bc <_printf_i+0x238>)
 800f470:	6033      	str	r3, [r6, #0]
 800f472:	bf14      	ite	ne
 800f474:	230a      	movne	r3, #10
 800f476:	2308      	moveq	r3, #8
 800f478:	2100      	movs	r1, #0
 800f47a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f47e:	6866      	ldr	r6, [r4, #4]
 800f480:	60a6      	str	r6, [r4, #8]
 800f482:	2e00      	cmp	r6, #0
 800f484:	bfa2      	ittt	ge
 800f486:	6821      	ldrge	r1, [r4, #0]
 800f488:	f021 0104 	bicge.w	r1, r1, #4
 800f48c:	6021      	strge	r1, [r4, #0]
 800f48e:	b90d      	cbnz	r5, 800f494 <_printf_i+0x110>
 800f490:	2e00      	cmp	r6, #0
 800f492:	d04b      	beq.n	800f52c <_printf_i+0x1a8>
 800f494:	4616      	mov	r6, r2
 800f496:	fbb5 f1f3 	udiv	r1, r5, r3
 800f49a:	fb03 5711 	mls	r7, r3, r1, r5
 800f49e:	5dc7      	ldrb	r7, [r0, r7]
 800f4a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4a4:	462f      	mov	r7, r5
 800f4a6:	42bb      	cmp	r3, r7
 800f4a8:	460d      	mov	r5, r1
 800f4aa:	d9f4      	bls.n	800f496 <_printf_i+0x112>
 800f4ac:	2b08      	cmp	r3, #8
 800f4ae:	d10b      	bne.n	800f4c8 <_printf_i+0x144>
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	07df      	lsls	r7, r3, #31
 800f4b4:	d508      	bpl.n	800f4c8 <_printf_i+0x144>
 800f4b6:	6923      	ldr	r3, [r4, #16]
 800f4b8:	6861      	ldr	r1, [r4, #4]
 800f4ba:	4299      	cmp	r1, r3
 800f4bc:	bfde      	ittt	le
 800f4be:	2330      	movle	r3, #48	@ 0x30
 800f4c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f4c8:	1b92      	subs	r2, r2, r6
 800f4ca:	6122      	str	r2, [r4, #16]
 800f4cc:	f8cd a000 	str.w	sl, [sp]
 800f4d0:	464b      	mov	r3, r9
 800f4d2:	aa03      	add	r2, sp, #12
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	4640      	mov	r0, r8
 800f4d8:	f7ff fee6 	bl	800f2a8 <_printf_common>
 800f4dc:	3001      	adds	r0, #1
 800f4de:	d14a      	bne.n	800f576 <_printf_i+0x1f2>
 800f4e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4e4:	b004      	add	sp, #16
 800f4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	f043 0320 	orr.w	r3, r3, #32
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	4833      	ldr	r0, [pc, #204]	@ (800f5c0 <_printf_i+0x23c>)
 800f4f4:	2778      	movs	r7, #120	@ 0x78
 800f4f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	6831      	ldr	r1, [r6, #0]
 800f4fe:	061f      	lsls	r7, r3, #24
 800f500:	f851 5b04 	ldr.w	r5, [r1], #4
 800f504:	d402      	bmi.n	800f50c <_printf_i+0x188>
 800f506:	065f      	lsls	r7, r3, #25
 800f508:	bf48      	it	mi
 800f50a:	b2ad      	uxthmi	r5, r5
 800f50c:	6031      	str	r1, [r6, #0]
 800f50e:	07d9      	lsls	r1, r3, #31
 800f510:	bf44      	itt	mi
 800f512:	f043 0320 	orrmi.w	r3, r3, #32
 800f516:	6023      	strmi	r3, [r4, #0]
 800f518:	b11d      	cbz	r5, 800f522 <_printf_i+0x19e>
 800f51a:	2310      	movs	r3, #16
 800f51c:	e7ac      	b.n	800f478 <_printf_i+0xf4>
 800f51e:	4827      	ldr	r0, [pc, #156]	@ (800f5bc <_printf_i+0x238>)
 800f520:	e7e9      	b.n	800f4f6 <_printf_i+0x172>
 800f522:	6823      	ldr	r3, [r4, #0]
 800f524:	f023 0320 	bic.w	r3, r3, #32
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	e7f6      	b.n	800f51a <_printf_i+0x196>
 800f52c:	4616      	mov	r6, r2
 800f52e:	e7bd      	b.n	800f4ac <_printf_i+0x128>
 800f530:	6833      	ldr	r3, [r6, #0]
 800f532:	6825      	ldr	r5, [r4, #0]
 800f534:	6961      	ldr	r1, [r4, #20]
 800f536:	1d18      	adds	r0, r3, #4
 800f538:	6030      	str	r0, [r6, #0]
 800f53a:	062e      	lsls	r6, r5, #24
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	d501      	bpl.n	800f544 <_printf_i+0x1c0>
 800f540:	6019      	str	r1, [r3, #0]
 800f542:	e002      	b.n	800f54a <_printf_i+0x1c6>
 800f544:	0668      	lsls	r0, r5, #25
 800f546:	d5fb      	bpl.n	800f540 <_printf_i+0x1bc>
 800f548:	8019      	strh	r1, [r3, #0]
 800f54a:	2300      	movs	r3, #0
 800f54c:	6123      	str	r3, [r4, #16]
 800f54e:	4616      	mov	r6, r2
 800f550:	e7bc      	b.n	800f4cc <_printf_i+0x148>
 800f552:	6833      	ldr	r3, [r6, #0]
 800f554:	1d1a      	adds	r2, r3, #4
 800f556:	6032      	str	r2, [r6, #0]
 800f558:	681e      	ldr	r6, [r3, #0]
 800f55a:	6862      	ldr	r2, [r4, #4]
 800f55c:	2100      	movs	r1, #0
 800f55e:	4630      	mov	r0, r6
 800f560:	f7f0 fe3e 	bl	80001e0 <memchr>
 800f564:	b108      	cbz	r0, 800f56a <_printf_i+0x1e6>
 800f566:	1b80      	subs	r0, r0, r6
 800f568:	6060      	str	r0, [r4, #4]
 800f56a:	6863      	ldr	r3, [r4, #4]
 800f56c:	6123      	str	r3, [r4, #16]
 800f56e:	2300      	movs	r3, #0
 800f570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f574:	e7aa      	b.n	800f4cc <_printf_i+0x148>
 800f576:	6923      	ldr	r3, [r4, #16]
 800f578:	4632      	mov	r2, r6
 800f57a:	4649      	mov	r1, r9
 800f57c:	4640      	mov	r0, r8
 800f57e:	47d0      	blx	sl
 800f580:	3001      	adds	r0, #1
 800f582:	d0ad      	beq.n	800f4e0 <_printf_i+0x15c>
 800f584:	6823      	ldr	r3, [r4, #0]
 800f586:	079b      	lsls	r3, r3, #30
 800f588:	d413      	bmi.n	800f5b2 <_printf_i+0x22e>
 800f58a:	68e0      	ldr	r0, [r4, #12]
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	4298      	cmp	r0, r3
 800f590:	bfb8      	it	lt
 800f592:	4618      	movlt	r0, r3
 800f594:	e7a6      	b.n	800f4e4 <_printf_i+0x160>
 800f596:	2301      	movs	r3, #1
 800f598:	4632      	mov	r2, r6
 800f59a:	4649      	mov	r1, r9
 800f59c:	4640      	mov	r0, r8
 800f59e:	47d0      	blx	sl
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d09d      	beq.n	800f4e0 <_printf_i+0x15c>
 800f5a4:	3501      	adds	r5, #1
 800f5a6:	68e3      	ldr	r3, [r4, #12]
 800f5a8:	9903      	ldr	r1, [sp, #12]
 800f5aa:	1a5b      	subs	r3, r3, r1
 800f5ac:	42ab      	cmp	r3, r5
 800f5ae:	dcf2      	bgt.n	800f596 <_printf_i+0x212>
 800f5b0:	e7eb      	b.n	800f58a <_printf_i+0x206>
 800f5b2:	2500      	movs	r5, #0
 800f5b4:	f104 0619 	add.w	r6, r4, #25
 800f5b8:	e7f5      	b.n	800f5a6 <_printf_i+0x222>
 800f5ba:	bf00      	nop
 800f5bc:	08010045 	.word	0x08010045
 800f5c0:	08010056 	.word	0x08010056

0800f5c4 <__sflush_r>:
 800f5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5cc:	0716      	lsls	r6, r2, #28
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	460c      	mov	r4, r1
 800f5d2:	d454      	bmi.n	800f67e <__sflush_r+0xba>
 800f5d4:	684b      	ldr	r3, [r1, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dc02      	bgt.n	800f5e0 <__sflush_r+0x1c>
 800f5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dd48      	ble.n	800f672 <__sflush_r+0xae>
 800f5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5e2:	2e00      	cmp	r6, #0
 800f5e4:	d045      	beq.n	800f672 <__sflush_r+0xae>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5ec:	682f      	ldr	r7, [r5, #0]
 800f5ee:	6a21      	ldr	r1, [r4, #32]
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	d030      	beq.n	800f656 <__sflush_r+0x92>
 800f5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	0759      	lsls	r1, r3, #29
 800f5fa:	d505      	bpl.n	800f608 <__sflush_r+0x44>
 800f5fc:	6863      	ldr	r3, [r4, #4]
 800f5fe:	1ad2      	subs	r2, r2, r3
 800f600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f602:	b10b      	cbz	r3, 800f608 <__sflush_r+0x44>
 800f604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	2300      	movs	r3, #0
 800f60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f60c:	6a21      	ldr	r1, [r4, #32]
 800f60e:	4628      	mov	r0, r5
 800f610:	47b0      	blx	r6
 800f612:	1c43      	adds	r3, r0, #1
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	d106      	bne.n	800f626 <__sflush_r+0x62>
 800f618:	6829      	ldr	r1, [r5, #0]
 800f61a:	291d      	cmp	r1, #29
 800f61c:	d82b      	bhi.n	800f676 <__sflush_r+0xb2>
 800f61e:	4a2a      	ldr	r2, [pc, #168]	@ (800f6c8 <__sflush_r+0x104>)
 800f620:	410a      	asrs	r2, r1
 800f622:	07d6      	lsls	r6, r2, #31
 800f624:	d427      	bmi.n	800f676 <__sflush_r+0xb2>
 800f626:	2200      	movs	r2, #0
 800f628:	6062      	str	r2, [r4, #4]
 800f62a:	04d9      	lsls	r1, r3, #19
 800f62c:	6922      	ldr	r2, [r4, #16]
 800f62e:	6022      	str	r2, [r4, #0]
 800f630:	d504      	bpl.n	800f63c <__sflush_r+0x78>
 800f632:	1c42      	adds	r2, r0, #1
 800f634:	d101      	bne.n	800f63a <__sflush_r+0x76>
 800f636:	682b      	ldr	r3, [r5, #0]
 800f638:	b903      	cbnz	r3, 800f63c <__sflush_r+0x78>
 800f63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f63e:	602f      	str	r7, [r5, #0]
 800f640:	b1b9      	cbz	r1, 800f672 <__sflush_r+0xae>
 800f642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f646:	4299      	cmp	r1, r3
 800f648:	d002      	beq.n	800f650 <__sflush_r+0x8c>
 800f64a:	4628      	mov	r0, r5
 800f64c:	f7ff fca0 	bl	800ef90 <_free_r>
 800f650:	2300      	movs	r3, #0
 800f652:	6363      	str	r3, [r4, #52]	@ 0x34
 800f654:	e00d      	b.n	800f672 <__sflush_r+0xae>
 800f656:	2301      	movs	r3, #1
 800f658:	4628      	mov	r0, r5
 800f65a:	47b0      	blx	r6
 800f65c:	4602      	mov	r2, r0
 800f65e:	1c50      	adds	r0, r2, #1
 800f660:	d1c9      	bne.n	800f5f6 <__sflush_r+0x32>
 800f662:	682b      	ldr	r3, [r5, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d0c6      	beq.n	800f5f6 <__sflush_r+0x32>
 800f668:	2b1d      	cmp	r3, #29
 800f66a:	d001      	beq.n	800f670 <__sflush_r+0xac>
 800f66c:	2b16      	cmp	r3, #22
 800f66e:	d11e      	bne.n	800f6ae <__sflush_r+0xea>
 800f670:	602f      	str	r7, [r5, #0]
 800f672:	2000      	movs	r0, #0
 800f674:	e022      	b.n	800f6bc <__sflush_r+0xf8>
 800f676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f67a:	b21b      	sxth	r3, r3
 800f67c:	e01b      	b.n	800f6b6 <__sflush_r+0xf2>
 800f67e:	690f      	ldr	r7, [r1, #16]
 800f680:	2f00      	cmp	r7, #0
 800f682:	d0f6      	beq.n	800f672 <__sflush_r+0xae>
 800f684:	0793      	lsls	r3, r2, #30
 800f686:	680e      	ldr	r6, [r1, #0]
 800f688:	bf08      	it	eq
 800f68a:	694b      	ldreq	r3, [r1, #20]
 800f68c:	600f      	str	r7, [r1, #0]
 800f68e:	bf18      	it	ne
 800f690:	2300      	movne	r3, #0
 800f692:	eba6 0807 	sub.w	r8, r6, r7
 800f696:	608b      	str	r3, [r1, #8]
 800f698:	f1b8 0f00 	cmp.w	r8, #0
 800f69c:	dde9      	ble.n	800f672 <__sflush_r+0xae>
 800f69e:	6a21      	ldr	r1, [r4, #32]
 800f6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f6a2:	4643      	mov	r3, r8
 800f6a4:	463a      	mov	r2, r7
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	47b0      	blx	r6
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	dc08      	bgt.n	800f6c0 <__sflush_r+0xfc>
 800f6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6b6:	81a3      	strh	r3, [r4, #12]
 800f6b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c0:	4407      	add	r7, r0
 800f6c2:	eba8 0800 	sub.w	r8, r8, r0
 800f6c6:	e7e7      	b.n	800f698 <__sflush_r+0xd4>
 800f6c8:	dfbffffe 	.word	0xdfbffffe

0800f6cc <_fflush_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	690b      	ldr	r3, [r1, #16]
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	b913      	cbnz	r3, 800f6dc <_fflush_r+0x10>
 800f6d6:	2500      	movs	r5, #0
 800f6d8:	4628      	mov	r0, r5
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	b118      	cbz	r0, 800f6e6 <_fflush_r+0x1a>
 800f6de:	6a03      	ldr	r3, [r0, #32]
 800f6e0:	b90b      	cbnz	r3, 800f6e6 <_fflush_r+0x1a>
 800f6e2:	f7ff fb43 	bl	800ed6c <__sinit>
 800f6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d0f3      	beq.n	800f6d6 <_fflush_r+0xa>
 800f6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6f0:	07d0      	lsls	r0, r2, #31
 800f6f2:	d404      	bmi.n	800f6fe <_fflush_r+0x32>
 800f6f4:	0599      	lsls	r1, r3, #22
 800f6f6:	d402      	bmi.n	800f6fe <_fflush_r+0x32>
 800f6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6fa:	f7ff fc38 	bl	800ef6e <__retarget_lock_acquire_recursive>
 800f6fe:	4628      	mov	r0, r5
 800f700:	4621      	mov	r1, r4
 800f702:	f7ff ff5f 	bl	800f5c4 <__sflush_r>
 800f706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f708:	07da      	lsls	r2, r3, #31
 800f70a:	4605      	mov	r5, r0
 800f70c:	d4e4      	bmi.n	800f6d8 <_fflush_r+0xc>
 800f70e:	89a3      	ldrh	r3, [r4, #12]
 800f710:	059b      	lsls	r3, r3, #22
 800f712:	d4e1      	bmi.n	800f6d8 <_fflush_r+0xc>
 800f714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f716:	f7ff fc2b 	bl	800ef70 <__retarget_lock_release_recursive>
 800f71a:	e7dd      	b.n	800f6d8 <_fflush_r+0xc>

0800f71c <__sread>:
 800f71c:	b510      	push	{r4, lr}
 800f71e:	460c      	mov	r4, r1
 800f720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f724:	f000 f9ac 	bl	800fa80 <_read_r>
 800f728:	2800      	cmp	r0, #0
 800f72a:	bfab      	itete	ge
 800f72c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f72e:	89a3      	ldrhlt	r3, [r4, #12]
 800f730:	181b      	addge	r3, r3, r0
 800f732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f736:	bfac      	ite	ge
 800f738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f73a:	81a3      	strhlt	r3, [r4, #12]
 800f73c:	bd10      	pop	{r4, pc}

0800f73e <__swrite>:
 800f73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f742:	461f      	mov	r7, r3
 800f744:	898b      	ldrh	r3, [r1, #12]
 800f746:	05db      	lsls	r3, r3, #23
 800f748:	4605      	mov	r5, r0
 800f74a:	460c      	mov	r4, r1
 800f74c:	4616      	mov	r6, r2
 800f74e:	d505      	bpl.n	800f75c <__swrite+0x1e>
 800f750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f754:	2302      	movs	r3, #2
 800f756:	2200      	movs	r2, #0
 800f758:	f000 f980 	bl	800fa5c <_lseek_r>
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f766:	81a3      	strh	r3, [r4, #12]
 800f768:	4632      	mov	r2, r6
 800f76a:	463b      	mov	r3, r7
 800f76c:	4628      	mov	r0, r5
 800f76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f772:	f000 b997 	b.w	800faa4 <_write_r>

0800f776 <__sseek>:
 800f776:	b510      	push	{r4, lr}
 800f778:	460c      	mov	r4, r1
 800f77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77e:	f000 f96d 	bl	800fa5c <_lseek_r>
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	89a3      	ldrh	r3, [r4, #12]
 800f786:	bf15      	itete	ne
 800f788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f78a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f78e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f792:	81a3      	strheq	r3, [r4, #12]
 800f794:	bf18      	it	ne
 800f796:	81a3      	strhne	r3, [r4, #12]
 800f798:	bd10      	pop	{r4, pc}

0800f79a <__sclose>:
 800f79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f79e:	f000 b92b 	b.w	800f9f8 <_close_r>

0800f7a2 <__swbuf_r>:
 800f7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a4:	460e      	mov	r6, r1
 800f7a6:	4614      	mov	r4, r2
 800f7a8:	4605      	mov	r5, r0
 800f7aa:	b118      	cbz	r0, 800f7b4 <__swbuf_r+0x12>
 800f7ac:	6a03      	ldr	r3, [r0, #32]
 800f7ae:	b90b      	cbnz	r3, 800f7b4 <__swbuf_r+0x12>
 800f7b0:	f7ff fadc 	bl	800ed6c <__sinit>
 800f7b4:	69a3      	ldr	r3, [r4, #24]
 800f7b6:	60a3      	str	r3, [r4, #8]
 800f7b8:	89a3      	ldrh	r3, [r4, #12]
 800f7ba:	071a      	lsls	r2, r3, #28
 800f7bc:	d501      	bpl.n	800f7c2 <__swbuf_r+0x20>
 800f7be:	6923      	ldr	r3, [r4, #16]
 800f7c0:	b943      	cbnz	r3, 800f7d4 <__swbuf_r+0x32>
 800f7c2:	4621      	mov	r1, r4
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	f000 f82b 	bl	800f820 <__swsetup_r>
 800f7ca:	b118      	cbz	r0, 800f7d4 <__swbuf_r+0x32>
 800f7cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f7d0:	4638      	mov	r0, r7
 800f7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7d4:	6823      	ldr	r3, [r4, #0]
 800f7d6:	6922      	ldr	r2, [r4, #16]
 800f7d8:	1a98      	subs	r0, r3, r2
 800f7da:	6963      	ldr	r3, [r4, #20]
 800f7dc:	b2f6      	uxtb	r6, r6
 800f7de:	4283      	cmp	r3, r0
 800f7e0:	4637      	mov	r7, r6
 800f7e2:	dc05      	bgt.n	800f7f0 <__swbuf_r+0x4e>
 800f7e4:	4621      	mov	r1, r4
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	f7ff ff70 	bl	800f6cc <_fflush_r>
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	d1ed      	bne.n	800f7cc <__swbuf_r+0x2a>
 800f7f0:	68a3      	ldr	r3, [r4, #8]
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	60a3      	str	r3, [r4, #8]
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	1c5a      	adds	r2, r3, #1
 800f7fa:	6022      	str	r2, [r4, #0]
 800f7fc:	701e      	strb	r6, [r3, #0]
 800f7fe:	6962      	ldr	r2, [r4, #20]
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	429a      	cmp	r2, r3
 800f804:	d004      	beq.n	800f810 <__swbuf_r+0x6e>
 800f806:	89a3      	ldrh	r3, [r4, #12]
 800f808:	07db      	lsls	r3, r3, #31
 800f80a:	d5e1      	bpl.n	800f7d0 <__swbuf_r+0x2e>
 800f80c:	2e0a      	cmp	r6, #10
 800f80e:	d1df      	bne.n	800f7d0 <__swbuf_r+0x2e>
 800f810:	4621      	mov	r1, r4
 800f812:	4628      	mov	r0, r5
 800f814:	f7ff ff5a 	bl	800f6cc <_fflush_r>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d0d9      	beq.n	800f7d0 <__swbuf_r+0x2e>
 800f81c:	e7d6      	b.n	800f7cc <__swbuf_r+0x2a>
	...

0800f820 <__swsetup_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4b29      	ldr	r3, [pc, #164]	@ (800f8c8 <__swsetup_r+0xa8>)
 800f824:	4605      	mov	r5, r0
 800f826:	6818      	ldr	r0, [r3, #0]
 800f828:	460c      	mov	r4, r1
 800f82a:	b118      	cbz	r0, 800f834 <__swsetup_r+0x14>
 800f82c:	6a03      	ldr	r3, [r0, #32]
 800f82e:	b90b      	cbnz	r3, 800f834 <__swsetup_r+0x14>
 800f830:	f7ff fa9c 	bl	800ed6c <__sinit>
 800f834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f838:	0719      	lsls	r1, r3, #28
 800f83a:	d422      	bmi.n	800f882 <__swsetup_r+0x62>
 800f83c:	06da      	lsls	r2, r3, #27
 800f83e:	d407      	bmi.n	800f850 <__swsetup_r+0x30>
 800f840:	2209      	movs	r2, #9
 800f842:	602a      	str	r2, [r5, #0]
 800f844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f848:	81a3      	strh	r3, [r4, #12]
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f84e:	e033      	b.n	800f8b8 <__swsetup_r+0x98>
 800f850:	0758      	lsls	r0, r3, #29
 800f852:	d512      	bpl.n	800f87a <__swsetup_r+0x5a>
 800f854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f856:	b141      	cbz	r1, 800f86a <__swsetup_r+0x4a>
 800f858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f85c:	4299      	cmp	r1, r3
 800f85e:	d002      	beq.n	800f866 <__swsetup_r+0x46>
 800f860:	4628      	mov	r0, r5
 800f862:	f7ff fb95 	bl	800ef90 <_free_r>
 800f866:	2300      	movs	r3, #0
 800f868:	6363      	str	r3, [r4, #52]	@ 0x34
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	2300      	movs	r3, #0
 800f874:	6063      	str	r3, [r4, #4]
 800f876:	6923      	ldr	r3, [r4, #16]
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	89a3      	ldrh	r3, [r4, #12]
 800f87c:	f043 0308 	orr.w	r3, r3, #8
 800f880:	81a3      	strh	r3, [r4, #12]
 800f882:	6923      	ldr	r3, [r4, #16]
 800f884:	b94b      	cbnz	r3, 800f89a <__swsetup_r+0x7a>
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f88c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f890:	d003      	beq.n	800f89a <__swsetup_r+0x7a>
 800f892:	4621      	mov	r1, r4
 800f894:	4628      	mov	r0, r5
 800f896:	f000 f83f 	bl	800f918 <__smakebuf_r>
 800f89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f89e:	f013 0201 	ands.w	r2, r3, #1
 800f8a2:	d00a      	beq.n	800f8ba <__swsetup_r+0x9a>
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	60a2      	str	r2, [r4, #8]
 800f8a8:	6962      	ldr	r2, [r4, #20]
 800f8aa:	4252      	negs	r2, r2
 800f8ac:	61a2      	str	r2, [r4, #24]
 800f8ae:	6922      	ldr	r2, [r4, #16]
 800f8b0:	b942      	cbnz	r2, 800f8c4 <__swsetup_r+0xa4>
 800f8b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8b6:	d1c5      	bne.n	800f844 <__swsetup_r+0x24>
 800f8b8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ba:	0799      	lsls	r1, r3, #30
 800f8bc:	bf58      	it	pl
 800f8be:	6962      	ldrpl	r2, [r4, #20]
 800f8c0:	60a2      	str	r2, [r4, #8]
 800f8c2:	e7f4      	b.n	800f8ae <__swsetup_r+0x8e>
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	e7f7      	b.n	800f8b8 <__swsetup_r+0x98>
 800f8c8:	2000056c 	.word	0x2000056c

0800f8cc <__swhatbuf_r>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8d4:	2900      	cmp	r1, #0
 800f8d6:	b096      	sub	sp, #88	@ 0x58
 800f8d8:	4615      	mov	r5, r2
 800f8da:	461e      	mov	r6, r3
 800f8dc:	da0d      	bge.n	800f8fa <__swhatbuf_r+0x2e>
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f8e4:	f04f 0100 	mov.w	r1, #0
 800f8e8:	bf14      	ite	ne
 800f8ea:	2340      	movne	r3, #64	@ 0x40
 800f8ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	6031      	str	r1, [r6, #0]
 800f8f4:	602b      	str	r3, [r5, #0]
 800f8f6:	b016      	add	sp, #88	@ 0x58
 800f8f8:	bd70      	pop	{r4, r5, r6, pc}
 800f8fa:	466a      	mov	r2, sp
 800f8fc:	f000 f88c 	bl	800fa18 <_fstat_r>
 800f900:	2800      	cmp	r0, #0
 800f902:	dbec      	blt.n	800f8de <__swhatbuf_r+0x12>
 800f904:	9901      	ldr	r1, [sp, #4]
 800f906:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f90a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f90e:	4259      	negs	r1, r3
 800f910:	4159      	adcs	r1, r3
 800f912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f916:	e7eb      	b.n	800f8f0 <__swhatbuf_r+0x24>

0800f918 <__smakebuf_r>:
 800f918:	898b      	ldrh	r3, [r1, #12]
 800f91a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f91c:	079d      	lsls	r5, r3, #30
 800f91e:	4606      	mov	r6, r0
 800f920:	460c      	mov	r4, r1
 800f922:	d507      	bpl.n	800f934 <__smakebuf_r+0x1c>
 800f924:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	6123      	str	r3, [r4, #16]
 800f92c:	2301      	movs	r3, #1
 800f92e:	6163      	str	r3, [r4, #20]
 800f930:	b003      	add	sp, #12
 800f932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f934:	ab01      	add	r3, sp, #4
 800f936:	466a      	mov	r2, sp
 800f938:	f7ff ffc8 	bl	800f8cc <__swhatbuf_r>
 800f93c:	9f00      	ldr	r7, [sp, #0]
 800f93e:	4605      	mov	r5, r0
 800f940:	4639      	mov	r1, r7
 800f942:	4630      	mov	r0, r6
 800f944:	f7ff f8fa 	bl	800eb3c <_malloc_r>
 800f948:	b948      	cbnz	r0, 800f95e <__smakebuf_r+0x46>
 800f94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f94e:	059a      	lsls	r2, r3, #22
 800f950:	d4ee      	bmi.n	800f930 <__smakebuf_r+0x18>
 800f952:	f023 0303 	bic.w	r3, r3, #3
 800f956:	f043 0302 	orr.w	r3, r3, #2
 800f95a:	81a3      	strh	r3, [r4, #12]
 800f95c:	e7e2      	b.n	800f924 <__smakebuf_r+0xc>
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	6020      	str	r0, [r4, #0]
 800f962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	9b01      	ldr	r3, [sp, #4]
 800f96a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f96e:	b15b      	cbz	r3, 800f988 <__smakebuf_r+0x70>
 800f970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f974:	4630      	mov	r0, r6
 800f976:	f000 f861 	bl	800fa3c <_isatty_r>
 800f97a:	b128      	cbz	r0, 800f988 <__smakebuf_r+0x70>
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	f023 0303 	bic.w	r3, r3, #3
 800f982:	f043 0301 	orr.w	r3, r3, #1
 800f986:	81a3      	strh	r3, [r4, #12]
 800f988:	89a3      	ldrh	r3, [r4, #12]
 800f98a:	431d      	orrs	r5, r3
 800f98c:	81a5      	strh	r5, [r4, #12]
 800f98e:	e7cf      	b.n	800f930 <__smakebuf_r+0x18>

0800f990 <_putc_r>:
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	460d      	mov	r5, r1
 800f994:	4614      	mov	r4, r2
 800f996:	4606      	mov	r6, r0
 800f998:	b118      	cbz	r0, 800f9a2 <_putc_r+0x12>
 800f99a:	6a03      	ldr	r3, [r0, #32]
 800f99c:	b90b      	cbnz	r3, 800f9a2 <_putc_r+0x12>
 800f99e:	f7ff f9e5 	bl	800ed6c <__sinit>
 800f9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9a4:	07d8      	lsls	r0, r3, #31
 800f9a6:	d405      	bmi.n	800f9b4 <_putc_r+0x24>
 800f9a8:	89a3      	ldrh	r3, [r4, #12]
 800f9aa:	0599      	lsls	r1, r3, #22
 800f9ac:	d402      	bmi.n	800f9b4 <_putc_r+0x24>
 800f9ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9b0:	f7ff fadd 	bl	800ef6e <__retarget_lock_acquire_recursive>
 800f9b4:	68a3      	ldr	r3, [r4, #8]
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	60a3      	str	r3, [r4, #8]
 800f9bc:	da05      	bge.n	800f9ca <_putc_r+0x3a>
 800f9be:	69a2      	ldr	r2, [r4, #24]
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	db12      	blt.n	800f9ea <_putc_r+0x5a>
 800f9c4:	b2eb      	uxtb	r3, r5
 800f9c6:	2b0a      	cmp	r3, #10
 800f9c8:	d00f      	beq.n	800f9ea <_putc_r+0x5a>
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	6022      	str	r2, [r4, #0]
 800f9d0:	701d      	strb	r5, [r3, #0]
 800f9d2:	b2ed      	uxtb	r5, r5
 800f9d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9d6:	07da      	lsls	r2, r3, #31
 800f9d8:	d405      	bmi.n	800f9e6 <_putc_r+0x56>
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	059b      	lsls	r3, r3, #22
 800f9de:	d402      	bmi.n	800f9e6 <_putc_r+0x56>
 800f9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9e2:	f7ff fac5 	bl	800ef70 <__retarget_lock_release_recursive>
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	4622      	mov	r2, r4
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7ff fed7 	bl	800f7a2 <__swbuf_r>
 800f9f4:	4605      	mov	r5, r0
 800f9f6:	e7ed      	b.n	800f9d4 <_putc_r+0x44>

0800f9f8 <_close_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	4d06      	ldr	r5, [pc, #24]	@ (800fa14 <_close_r+0x1c>)
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	4604      	mov	r4, r0
 800fa00:	4608      	mov	r0, r1
 800fa02:	602b      	str	r3, [r5, #0]
 800fa04:	f7f8 ffe7 	bl	80089d6 <_close>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d102      	bne.n	800fa12 <_close_r+0x1a>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	b103      	cbz	r3, 800fa12 <_close_r+0x1a>
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	2000138c 	.word	0x2000138c

0800fa18 <_fstat_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4d07      	ldr	r5, [pc, #28]	@ (800fa38 <_fstat_r+0x20>)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	4611      	mov	r1, r2
 800fa24:	602b      	str	r3, [r5, #0]
 800fa26:	f7f8 ffe2 	bl	80089ee <_fstat>
 800fa2a:	1c43      	adds	r3, r0, #1
 800fa2c:	d102      	bne.n	800fa34 <_fstat_r+0x1c>
 800fa2e:	682b      	ldr	r3, [r5, #0]
 800fa30:	b103      	cbz	r3, 800fa34 <_fstat_r+0x1c>
 800fa32:	6023      	str	r3, [r4, #0]
 800fa34:	bd38      	pop	{r3, r4, r5, pc}
 800fa36:	bf00      	nop
 800fa38:	2000138c 	.word	0x2000138c

0800fa3c <_isatty_r>:
 800fa3c:	b538      	push	{r3, r4, r5, lr}
 800fa3e:	4d06      	ldr	r5, [pc, #24]	@ (800fa58 <_isatty_r+0x1c>)
 800fa40:	2300      	movs	r3, #0
 800fa42:	4604      	mov	r4, r0
 800fa44:	4608      	mov	r0, r1
 800fa46:	602b      	str	r3, [r5, #0]
 800fa48:	f7f8 ffe1 	bl	8008a0e <_isatty>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d102      	bne.n	800fa56 <_isatty_r+0x1a>
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	b103      	cbz	r3, 800fa56 <_isatty_r+0x1a>
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	2000138c 	.word	0x2000138c

0800fa5c <_lseek_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4d07      	ldr	r5, [pc, #28]	@ (800fa7c <_lseek_r+0x20>)
 800fa60:	4604      	mov	r4, r0
 800fa62:	4608      	mov	r0, r1
 800fa64:	4611      	mov	r1, r2
 800fa66:	2200      	movs	r2, #0
 800fa68:	602a      	str	r2, [r5, #0]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	f7f8 ffda 	bl	8008a24 <_lseek>
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d102      	bne.n	800fa7a <_lseek_r+0x1e>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	b103      	cbz	r3, 800fa7a <_lseek_r+0x1e>
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	bd38      	pop	{r3, r4, r5, pc}
 800fa7c:	2000138c 	.word	0x2000138c

0800fa80 <_read_r>:
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	4d07      	ldr	r5, [pc, #28]	@ (800faa0 <_read_r+0x20>)
 800fa84:	4604      	mov	r4, r0
 800fa86:	4608      	mov	r0, r1
 800fa88:	4611      	mov	r1, r2
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	602a      	str	r2, [r5, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	f7f8 ff68 	bl	8008964 <_read>
 800fa94:	1c43      	adds	r3, r0, #1
 800fa96:	d102      	bne.n	800fa9e <_read_r+0x1e>
 800fa98:	682b      	ldr	r3, [r5, #0]
 800fa9a:	b103      	cbz	r3, 800fa9e <_read_r+0x1e>
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	bd38      	pop	{r3, r4, r5, pc}
 800faa0:	2000138c 	.word	0x2000138c

0800faa4 <_write_r>:
 800faa4:	b538      	push	{r3, r4, r5, lr}
 800faa6:	4d07      	ldr	r5, [pc, #28]	@ (800fac4 <_write_r+0x20>)
 800faa8:	4604      	mov	r4, r0
 800faaa:	4608      	mov	r0, r1
 800faac:	4611      	mov	r1, r2
 800faae:	2200      	movs	r2, #0
 800fab0:	602a      	str	r2, [r5, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	f7f8 ff73 	bl	800899e <_write>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_write_r+0x1e>
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_write_r+0x1e>
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	2000138c 	.word	0x2000138c

0800fac8 <_init>:
 800fac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faca:	bf00      	nop
 800facc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800face:	bc08      	pop	{r3}
 800fad0:	469e      	mov	lr, r3
 800fad2:	4770      	bx	lr

0800fad4 <_fini>:
 800fad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fad6:	bf00      	nop
 800fad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fada:	bc08      	pop	{r3}
 800fadc:	469e      	mov	lr, r3
 800fade:	4770      	bx	lr
