
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019a0  08011dd4  08011dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013774  08013774  000155c0  2**0
                  CONTENTS
  4 .ARM          00000008  08013774  08013774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801377c  0801377c  000155c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801377c  0801377c  0001477c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013780  08013780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005c0  20000000  08013784  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de4  200005c0  08013d44  000155c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  08013d44  000163a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000155c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bc5  00000000  00000000  000155f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000601a  00000000  00000000  0003a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  000401d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016dd  00000000  00000000  00041fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d293  00000000  00000000  0004368d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f95  00000000  00000000  00060920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f6c1  00000000  00000000  0008a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082d4  00000000  00000000  00129fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00132290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005c0 	.word	0x200005c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011dbc 	.word	0x08011dbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c4 	.word	0x200005c4
 80001dc:	08011dbc 	.word	0x08011dbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <int_to_str>:
  * @brief  Convert an Integer to a string
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void int_to_str(uint8_t* p_str, uint32_t intNum) {
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, divider = 1000000000,pos = 0, status = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <int_to_str+0x94>)
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]

	for (i = 0;i < 10;i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e02e      	b.n	80005fe <int_to_str+0x7e>
		p_str[pos++] = (intNum/divider) + 48;
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1c59      	adds	r1, r3, #1
 80005ae:	60f9      	str	r1, [r7, #12]
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	440b      	add	r3, r1
 80005b4:	3230      	adds	r2, #48	@ 0x30
 80005b6:	b2d2      	uxtb	r2, r2
 80005b8:	701a      	strb	r2, [r3, #0]
		intNum %= divider;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	693a      	ldr	r2, [r7, #16]
 80005be:	fbb3 f2f2 	udiv	r2, r3, r2
 80005c2:	6939      	ldr	r1, [r7, #16]
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	603b      	str	r3, [r7, #0]
		divider /= 10;
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <int_to_str+0x98>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	08db      	lsrs	r3, r3, #3
 80005d6:	613b      	str	r3, [r7, #16]
		if ((p_str[pos-1] == '0') || (status == 0)) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3b01      	subs	r3, #1
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b30      	cmp	r3, #48	@ 0x30
 80005e4:	d002      	beq.n	80005ec <int_to_str+0x6c>
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <int_to_str+0x72>
			pos = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e002      	b.n	80005f8 <int_to_str+0x78>
		}
		else {
			status++;
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
	for (i = 0;i < 10;i++) {
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2b09      	cmp	r3, #9
 8000602:	d9cd      	bls.n	80005a0 <int_to_str+0x20>
		}
	}
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	371c      	adds	r7, #28
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	3b9aca00 	.word	0x3b9aca00
 8000618:	cccccccd 	.word	0xcccccccd

0800061c <str_to_int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */

uint32_t str_to_int(uint8_t *p_inputStr, uint32_t* p_intNum) {
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, res = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
	  uint32_t val = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]

	  if ((p_inputStr[0] == '0') && ((p_inputStr[1] == 'x') || (p_inputStr[1] == 'X')))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b30      	cmp	r3, #48	@ 0x30
 8000638:	f040 80d7 	bne.w	80007ea <str_to_int+0x1ce>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b78      	cmp	r3, #120	@ 0x78
 8000644:	d005      	beq.n	8000652 <str_to_int+0x36>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b58      	cmp	r3, #88	@ 0x58
 800064e:	f040 80cc 	bne.w	80007ea <str_to_int+0x1ce>
	  {
	    i = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000656:	e057      	b.n	8000708 <str_to_int+0xec>
	    {
	      if (IS_VALID_HEX(p_inputStr[i]))
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b40      	cmp	r3, #64	@ 0x40
 8000662:	d905      	bls.n	8000670 <str_to_int+0x54>
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b46      	cmp	r3, #70	@ 0x46
 800066e:	d917      	bls.n	80006a0 <str_to_int+0x84>
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b60      	cmp	r3, #96	@ 0x60
 800067a:	d905      	bls.n	8000688 <str_to_int+0x6c>
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b66      	cmp	r3, #102	@ 0x66
 8000686:	d90b      	bls.n	80006a0 <str_to_int+0x84>
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b2f      	cmp	r3, #47	@ 0x2f
 8000692:	d936      	bls.n	8000702 <str_to_int+0xe6>
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b39      	cmp	r3, #57	@ 0x39
 800069e:	d830      	bhi.n	8000702 <str_to_int+0xe6>
	      {
	        val = (val << 4) + CONVERTHEX(p_inputStr[i]);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	440a      	add	r2, r1
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	2a2f      	cmp	r2, #47	@ 0x2f
 80006ae:	d90b      	bls.n	80006c8 <str_to_int+0xac>
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	440a      	add	r2, r1
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	2a39      	cmp	r2, #57	@ 0x39
 80006ba:	d805      	bhi.n	80006c8 <str_to_int+0xac>
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	440a      	add	r2, r1
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	3a30      	subs	r2, #48	@ 0x30
 80006c6:	e016      	b.n	80006f6 <str_to_int+0xda>
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	440a      	add	r2, r1
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	2a40      	cmp	r2, #64	@ 0x40
 80006d2:	d90b      	bls.n	80006ec <str_to_int+0xd0>
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	440a      	add	r2, r1
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	2a46      	cmp	r2, #70	@ 0x46
 80006de:	d805      	bhi.n	80006ec <str_to_int+0xd0>
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	440a      	add	r2, r1
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	3a37      	subs	r2, #55	@ 0x37
 80006ea:	e004      	b.n	80006f6 <str_to_int+0xda>
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	440a      	add	r2, r1
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	3a57      	subs	r2, #87	@ 0x57
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
	      {
	        /* Return 0, Invalid input */
	        res = 0;
	        break;
	      }
	      i++;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e002      	b.n	8000708 <str_to_int+0xec>
	        res = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
	        break;
 8000706:	e008      	b.n	800071a <str_to_int+0xfe>
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b0a      	cmp	r3, #10
 800070c:	d805      	bhi.n	800071a <str_to_int+0xfe>
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d19e      	bne.n	8000658 <str_to_int+0x3c>
	    }

	    /* valid result */
	    if (p_inputStr[i] == '\0')
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d167      	bne.n	80007f6 <str_to_int+0x1da>
	    {
	      *p_intNum= val;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	601a      	str	r2, [r3, #0]
	      res = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	613b      	str	r3, [r7, #16]
	    if (p_inputStr[i] == '\0')
 8000730:	e061      	b.n	80007f6 <str_to_int+0x1da>
	  }
	  else /* max 10-digit decimal input */
	  {
	    while ( ( i < 11 ) && ( res != 1 ) )
	    {
	      if (p_inputStr[i] == '\0')
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d105      	bne.n	800074a <str_to_int+0x12e>
	      {
	        *p_intNum = val;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	601a      	str	r2, [r3, #0]
	        /* return 1 */
	        res = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	e04c      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'k') || (p_inputStr[i] == 'K')) && (i > 0))
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b6b      	cmp	r3, #107	@ 0x6b
 8000754:	d005      	beq.n	8000762 <str_to_int+0x146>
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000760:	d10b      	bne.n	800077a <str_to_int+0x15e>
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <str_to_int+0x15e>
	      {
	        val = val << 10;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	029b      	lsls	r3, r3, #10
 800076c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	e034      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'm') || (p_inputStr[i] == 'M')) && (i > 0))
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b6d      	cmp	r3, #109	@ 0x6d
 8000784:	d005      	beq.n	8000792 <str_to_int+0x176>
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000790:	d10b      	bne.n	80007aa <str_to_int+0x18e>
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d008      	beq.n	80007aa <str_to_int+0x18e>
	      {
	        val = val << 20;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	051b      	lsls	r3, r3, #20
 800079c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]
	        res = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	e01c      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else if (ISVALIDDEC(p_inputStr[i]))
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007b4:	d913      	bls.n	80007de <str_to_int+0x1c2>
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b39      	cmp	r3, #57	@ 0x39
 80007c0:	d80d      	bhi.n	80007de <str_to_int+0x1c2>
	      {
	        val = val * 10 + CONVERTDEC(p_inputStr[i]);
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	440b      	add	r3, r1
 80007d8:	3b30      	subs	r3, #48	@ 0x30
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e002      	b.n	80007e4 <str_to_int+0x1c8>
	      }
	      else
	      {
	        /* return 0, Invalid input */
	        res = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
	        break;
 80007e2:	e008      	b.n	80007f6 <str_to_int+0x1da>
	      }
	      i++;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( res != 1 ) )
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2b0a      	cmp	r3, #10
 80007ee:	d802      	bhi.n	80007f6 <str_to_int+0x1da>
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d19d      	bne.n	8000732 <str_to_int+0x116>
	    }
	  }

	  return res;
 80007f6:	693b      	ldr	r3, [r7, #16]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <serial_put_string>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */

void serial_put_string(uint8_t* p_string) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	 uint16_t length = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	81fb      	strh	r3, [r7, #14]

	  while (p_string[length] != '\0')
 8000810:	e002      	b.n	8000818 <serial_put_string+0x14>
	  {
	    length++;
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	3301      	adds	r3, #1
 8000816:	81fb      	strh	r3, [r7, #14]
	  while (p_string[length] != '\0')
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f6      	bne.n	8000812 <serial_put_string+0xe>
	  }
	  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000824:	89fa      	ldrh	r2, [r7, #14]
 8000826:	2364      	movs	r3, #100	@ 0x64
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4803      	ldr	r0, [pc, #12]	@ (8000838 <serial_put_string+0x34>)
 800082c:	f00f f8c0 	bl	800f9b0 <HAL_UART_Transmit>
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000680 	.word	0x20000680

0800083c <serial_put_byte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */

HAL_StatusTypeDef serial_put_byte(uint8_t param) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	/* May be timeouted... */
	  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <serial_put_byte+0x34>)
 8000848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000850:	d103      	bne.n	800085a <serial_put_byte+0x1e>
	  {
	    UartHandle.gState = HAL_UART_STATE_READY;
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <serial_put_byte+0x34>)
 8000854:	2220      	movs	r2, #32
 8000856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  }
	  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 800085a:	1df9      	adds	r1, r7, #7
 800085c:	2364      	movs	r3, #100	@ 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <serial_put_byte+0x34>)
 8000862:	f00f f8a5 	bl	800f9b0 <HAL_UART_Transmit>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000680 	.word	0x20000680

08000874 <get_sector>:
#include "ymodem/flash_if.h"



uint32_t get_sector(uint32_t Address)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if (Address < 0x08004000) return FLASH_SECTOR_0;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <get_sector+0x78>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d201      	bcs.n	8000888 <get_sector+0x14>
 8000884:	2300      	movs	r3, #0
 8000886:	e02a      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08008000) return FLASH_SECTOR_1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <get_sector+0x7c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d201      	bcs.n	8000894 <get_sector+0x20>
 8000890:	2301      	movs	r3, #1
 8000892:	e024      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x0800C000) return FLASH_SECTOR_2;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <get_sector+0x80>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d201      	bcs.n	80008a0 <get_sector+0x2c>
 800089c:	2302      	movs	r3, #2
 800089e:	e01e      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08010000) return FLASH_SECTOR_3;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <get_sector+0x84>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d801      	bhi.n	80008ac <get_sector+0x38>
 80008a8:	2303      	movs	r3, #3
 80008aa:	e018      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08020000) return FLASH_SECTOR_4;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a13      	ldr	r2, [pc, #76]	@ (80008fc <get_sector+0x88>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d801      	bhi.n	80008b8 <get_sector+0x44>
 80008b4:	2304      	movs	r3, #4
 80008b6:	e012      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08040000) return FLASH_SECTOR_5;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <get_sector+0x8c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d801      	bhi.n	80008c4 <get_sector+0x50>
 80008c0:	2305      	movs	r3, #5
 80008c2:	e00c      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08060000) return FLASH_SECTOR_6;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <get_sector+0x90>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d801      	bhi.n	80008d0 <get_sector+0x5c>
 80008cc:	2306      	movs	r3, #6
 80008ce:	e006      	b.n	80008de <get_sector+0x6a>
  else if (Address < 0x08080000) return FLASH_SECTOR_7;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <get_sector+0x94>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d801      	bhi.n	80008dc <get_sector+0x68>
 80008d8:	2307      	movs	r3, #7
 80008da:	e000      	b.n	80008de <get_sector+0x6a>
  else return FLASH_SECTOR_7; // fallback
 80008dc:	2307      	movs	r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	08004000 	.word	0x08004000
 80008f0:	08008000 	.word	0x08008000
 80008f4:	0800c000 	.word	0x0800c000
 80008f8:	0800ffff 	.word	0x0800ffff
 80008fc:	0801ffff 	.word	0x0801ffff
 8000900:	0803ffff 	.word	0x0803ffff
 8000904:	0805ffff 	.word	0x0805ffff
 8000908:	0807ffff 	.word	0x0807ffff

0800090c <FLASH_IF_init>:
/**
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_IF_init(void) {
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
/* Unlocking hte program memroy*/
	 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <FLASH_IF_init+0x14>)
 8000912:	2293      	movs	r2, #147	@ 0x93
 8000914:	60da      	str	r2, [r3, #12]
	                         FLASH_FLAG_PGSERR);


}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40023c00 	.word	0x40023c00

08000924 <FLASH_IF_erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */

uint32_t FLASH_IF_erase(uint32_t StartSector) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	@ 0x58
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef desc;
	uint32_t result = FLASHIF_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t sectorError;
	uint32_t userStartSector;

	  /* Unlock the Flash to enable the flash control register access *************/

	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000930:	f00a fae2 	bl	800aef8 <HAL_FLASH_Unlock>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <FLASH_IF_erase+0x20>
		serial_put_string((uint8_t*)"Erase failed at unlock itself 1");
 800093a:	481c      	ldr	r0, [pc, #112]	@ (80009ac <FLASH_IF_erase+0x88>)
 800093c:	f7ff ff62 	bl	8000804 <serial_put_string>
		result = FLASHIF_ERASEKO;
 8000940:	2301      	movs	r3, #1
 8000942:	657b      	str	r3, [r7, #84]	@ 0x54
	}
	FLASH_IF_init();
 8000944:	f7ff ffe2 	bl	800090c <FLASH_IF_init>


	desc.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000948:	2300      	movs	r3, #0
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40
	desc.Sector = get_sector(StartSector);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff91 	bl	8000874 <get_sector>
 8000952:	4603      	mov	r3, r0
 8000954:	64bb      	str	r3, [r7, #72]	@ 0x48
	desc.NbSectors = 3;
 8000956:	2303      	movs	r3, #3
 8000958:	64fb      	str	r3, [r7, #76]	@ 0x4c
	desc.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800095a:	2302      	movs	r3, #2
 800095c:	653b      	str	r3, [r7, #80]	@ 0x50

	if (StartSector < USER_FLASH_END_ADDRESS) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <FLASH_IF_erase+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d219      	bcs.n	800099a <FLASH_IF_erase+0x76>
		if (HAL_FLASHEx_Erase(&desc, &sectorError) != HAL_OK) {
 8000966:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800096a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f00a fc73 	bl	800b25c <HAL_FLASHEx_Erase>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d010      	beq.n	800099e <FLASH_IF_erase+0x7a>
			char msg[50];
			sprintf(msg, "Erase failed at sector: %lu\n", sectorError);
 800097c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <FLASH_IF_erase+0x90>)
 8000984:	4618      	mov	r0, r3
 8000986:	f010 f943 	bl	8010c10 <siprintf>
			serial_put_string((uint8_t*)msg);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff38 	bl	8000804 <serial_put_string>
			result = FLASHIF_ERASEKO;
 8000994:	2301      	movs	r3, #1
 8000996:	657b      	str	r3, [r7, #84]	@ 0x54
 8000998:	e001      	b.n	800099e <FLASH_IF_erase+0x7a>
		}


	}
	else result = FLASHIF_ERASEKO;
 800099a:	2301      	movs	r3, #1
 800099c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_FLASH_Lock();
 800099e:	f00a facd 	bl	800af3c <HAL_FLASH_Lock>
	return result;
 80009a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3758      	adds	r7, #88	@ 0x58
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08011dd4 	.word	0x08011dd4
 80009b0:	0807ffff 	.word	0x0807ffff
 80009b4:	08011df4 	.word	0x08011df4

080009b8 <FLASH_IF_disable_all_protection>:


void FLASH_IF_disable_all_protection(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80009be:	f00a fa9b 	bl	800aef8 <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80009c2:	f00a facb 	bl	800af5c <HAL_FLASH_OB_Unlock>

    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASHEx_OBGetConfig(&OBInit);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00a fd23 	bl	800b414 <HAL_FLASHEx_OBGetConfig>

    // Set RDP to Level 0 (no protection)
    OBInit.OptionType = OPTIONBYTE_RDP | OPTIONBYTE_WRP;
 80009ce:	2303      	movs	r3, #3
 80009d0:	607b      	str	r3, [r7, #4]
    OBInit.RDPLevel = OB_RDP_LEVEL_0;
 80009d2:	23aa      	movs	r3, #170	@ 0xaa
 80009d4:	617b      	str	r3, [r7, #20]
    OBInit.WRPSector = 0xFFF; // All sectors
 80009d6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80009da:	60fb      	str	r3, [r7, #12]
    OBInit.Banks = FLASH_BANK_1;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
    OBInit.WRPState = OB_WRPSTATE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]

    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00a fca6 	bl	800b338 <HAL_FLASHEx_OBProgram>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <FLASH_IF_disable_all_protection+0x40>
        serial_put_string("Option byte programming failed!");
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <FLASH_IF_disable_all_protection+0x5c>)
 80009f4:	f7ff ff06 	bl	8000804 <serial_put_string>
    }

    // Launch Option Bytes programming
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80009f8:	f00a fadc 	bl	800afb4 <HAL_FLASH_OB_Launch>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <FLASH_IF_disable_all_protection+0x50>
    	serial_put_string((uint8_t*)"OB launch failed!");
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <FLASH_IF_disable_all_protection+0x60>)
 8000a04:	f7ff fefe 	bl	8000804 <serial_put_string>
    }

    HAL_FLASH_OB_Lock();
 8000a08:	f00a fac4 	bl	800af94 <HAL_FLASH_OB_Lock>
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	08011e14 	.word	0x08011e14
 8000a18:	08011e34 	.word	0x08011e34

08000a1c <FLASH_IF_write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */

uint32_t FLASH_IF_write(uint32_t destination, uint32_t* p_source, uint32_t length) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	uint32_t status = FLASHIF_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8000a30:	f00a fa62 	bl	800aef8 <HAL_FLASH_Unlock>

	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	e026      	b.n	8000a88 <FLASH_IF_write+0x6c>
	        /* Word programming (32-bit) */
	        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(p_source + i)) == HAL_OK) {
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4413      	add	r3, r2
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	462b      	mov	r3, r5
 8000a4e:	68f9      	ldr	r1, [r7, #12]
 8000a50:	2002      	movs	r0, #2
 8000a52:	f00a f9ff 	bl	800ae54 <HAL_FLASH_Program>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10f      	bne.n	8000a7c <FLASH_IF_write+0x60>
	            /* Check the written value */
	            if (*(uint32_t*)destination != *(p_source + i)) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	440b      	add	r3, r1
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d002      	beq.n	8000a74 <FLASH_IF_write+0x58>
	                status = FLASHIF_WRITINGCTRL_ERROR;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
	                break;
 8000a72:	e011      	b.n	8000a98 <FLASH_IF_write+0x7c>
	            }
	            destination += 4; // Move to next word
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3304      	adds	r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e002      	b.n	8000a82 <FLASH_IF_write+0x66>
	        } else {
	            status = FLASHIF_WRITING_ERROR;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	617b      	str	r3, [r7, #20]
	            break;
 8000a80:	e00a      	b.n	8000a98 <FLASH_IF_write+0x7c>
	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	3301      	adds	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d203      	bcs.n	8000a98 <FLASH_IF_write+0x7c>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <FLASH_IF_write+0x8c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d9d0      	bls.n	8000a3a <FLASH_IF_write+0x1e>
	        }
	    }
	HAL_FLASH_Lock();
 8000a98:	f00a fa50 	bl	800af3c <HAL_FLASH_Lock>

	return status;
 8000a9c:	697b      	ldr	r3, [r7, #20]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	0807fffb 	.word	0x0807fffb

08000aac <FLASH_IF_get_write_protection_status>:
  * @param  None
  * @retval If a sector in application area is write-protected returned value is a combination
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_IF_get_write_protection_status(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef config;
	uint32_t protected = FLASHIF_PROTECTION_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
	 /* Get the current configuration */
	HAL_FLASHEx_OBGetConfig(&config);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00a fcab 	bl	800b414 <HAL_FLASHEx_OBGetConfig>

	 /* Get pages already write protected ****************************************/
	 /* Check if write protection is enabled for any sectors */
	if ((config.WRPState == OB_WRPSTATE_ENABLE) && (config.WRPSector & FLASH_SECTOR_TO_BE_PROTECTED)) {
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d106      	bne.n	8000ad2 <FLASH_IF_get_write_protection_status+0x26>
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <FLASH_IF_get_write_protection_status+0x26>
		protected = FLASHIF_PROTECTION_WRPENABLED;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
	}
	return protected;
 8000ad2:	69fb      	ldr	r3, [r7, #28]

}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <FLASH_IF_write_protection_config>:
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */

uint32_t FLASH_IF_write_protection_config(uint32_t protectionState)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    FLASH_OBProgramInitTypeDef config;
    HAL_StatusTypeDef status;

    // Unlock the Flash to enable the flash control register access
    if (HAL_FLASH_Unlock() != HAL_OK) {
 8000ae4:	f00a fa08 	bl	800aef8 <HAL_FLASH_Unlock>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <FLASH_IF_write_protection_config+0x1c>
        serial_put_string((uint8_t *)"Error: Failed to unlock Flash control register\r\n");
 8000aee:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <FLASH_IF_write_protection_config+0xb0>)
 8000af0:	f7ff fe88 	bl	8000804 <serial_put_string>
        return FLASHIF_PROTECTION_ERROR;
 8000af4:	2304      	movs	r3, #4
 8000af6:	e045      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    // Unlock the Option Bytes
    if (HAL_FLASH_OB_Unlock() != HAL_OK) {
 8000af8:	f00a fa30 	bl	800af5c <HAL_FLASH_OB_Unlock>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <FLASH_IF_write_protection_config+0x34>
        serial_put_string((uint8_t *)"Error: Failed to unlock Option Bytes\r\n");
 8000b02:	4823      	ldr	r0, [pc, #140]	@ (8000b90 <FLASH_IF_write_protection_config+0xb4>)
 8000b04:	f7ff fe7e 	bl	8000804 <serial_put_string>
        HAL_FLASH_Lock(); // Lock flash back before returning
 8000b08:	f00a fa18 	bl	800af3c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	e039      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    // Prepare Option Bytes configuration
    config.OptionType = OPTIONBYTE_WRP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
    config.Banks = FLASH_BANK_1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
    config.WRPSector = FLASH_SECTOR_TO_BE_PROTECTED;
 8000b18:	23e0      	movs	r3, #224	@ 0xe0
 8000b1a:	613b      	str	r3, [r7, #16]

    if (protectionState == FLASHIF_WRP_ENABLE) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <FLASH_IF_write_protection_config+0x4c>
        config.WRPState = OB_WRPSTATE_ENABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e001      	b.n	8000b2c <FLASH_IF_write_protection_config+0x50>
    } else {
        config.WRPState = OB_WRPSTATE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
    }

    // Program the Option Bytes
    status = HAL_FLASHEx_OBProgram(&config);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00a fc01 	bl	800b338 <HAL_FLASHEx_OBProgram>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d008      	beq.n	8000b56 <FLASH_IF_write_protection_config+0x7a>
        serial_put_string((uint8_t *)"Error: Failed to program Option Bytes\r\n");
 8000b44:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <FLASH_IF_write_protection_config+0xb8>)
 8000b46:	f7ff fe5d 	bl	8000804 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b4a:	f00a fa23 	bl	800af94 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b4e:	f00a f9f5 	bl	800af3c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b52:	2304      	movs	r3, #4
 8000b54:	e016      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    // Launch Option Bytes loading (causes a system reset)
    status = HAL_FLASH_OB_Launch();
 8000b56:	f00a fa2d 	bl	800afb4 <HAL_FLASH_OB_Launch>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d008      	beq.n	8000b7a <FLASH_IF_write_protection_config+0x9e>
        serial_put_string((uint8_t *)"Error: Failed to launch Option Bytes reload\r\n");
 8000b68:	480b      	ldr	r0, [pc, #44]	@ (8000b98 <FLASH_IF_write_protection_config+0xbc>)
 8000b6a:	f7ff fe4b 	bl	8000804 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b6e:	f00a fa11 	bl	800af94 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b72:	f00a f9e3 	bl	800af3c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b76:	2304      	movs	r3, #4
 8000b78:	e004      	b.n	8000b84 <FLASH_IF_write_protection_config+0xa8>
    }

    HAL_FLASH_OB_Lock();
 8000b7a:	f00a fa0b 	bl	800af94 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000b7e:	f00a f9dd 	bl	800af3c <HAL_FLASH_Lock>

    return FLASHIF_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08011e48 	.word	0x08011e48
 8000b90:	08011e7c 	.word	0x08011e7c
 8000b94:	08011ea4 	.word	0x08011ea4
 8000b98:	08011ecc 	.word	0x08011ecc

08000b9c <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000ba4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000ba8:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d027      	beq.n	8000c04 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d818      	bhi.n	8000c02 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	22b1      	movs	r2, #177	@ 0xb1
 8000bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f8f5 	bl	8000dd8 <ifx_i2c_init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8000c00:	e000      	b.n	8000c04 <ifx_i2c_open+0x68>
                break;
 8000c02:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000c04:	89fb      	ldrh	r3, [r7, #14]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b088      	sub	sp, #32
 8000c12:	af02      	add	r7, sp, #8
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c1e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c22:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d122      	bne.n	8000c74 <ifx_i2c_transceive+0x66>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d01d      	beq.n	8000c74 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6a3a      	ldr	r2, [r7, #32]
 8000c44:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f001 fb5c 	bl	8002310 <ifx_i2c_prl_transceive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d108      	bne.n	8000c74 <ifx_i2c_transceive+0x66>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2203      	movs	r2, #3
 8000c70:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000c74:	8afb      	ldrh	r3, [r7, #22]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c88:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c8c:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d02a      	beq.n	8000cee <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000ca2:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000cae:	4912      	ldr	r1, [pc, #72]	@ (8000cf8 <ifx_i2c_close+0x78>)
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f001 faeb 	bl	800228c <ifx_i2c_prl_close>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000cc0:	d115      	bne.n	8000cee <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 fc24 	bl	8007516 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 fbbf 	bl	8007458 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 fbb9 	bl	8007458 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2204      	movs	r2, #4
 8000cea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 8000cee:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08000d65 	.word	0x08000d65

08000cfc <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	461a      	mov	r2, r3
 8000d08:	460b      	mov	r3, r1
 8000d0a:	817b      	strh	r3, [r7, #10]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000d26:	8979      	ldrh	r1, [r7, #10]
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	897a      	ldrh	r2, [r7, #10]
 8000d30:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2204      	movs	r2, #4
 8000d38:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000d46:	897b      	ldrh	r3, [r7, #10]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d106      	bne.n	8000d5a <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2202      	movs	r2, #2
 8000d50:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000d54:	e001      	b.n	8000d5a <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8000d56:	bf00      	nop
 8000d58:	e000      	b.n	8000d5c <ifx_i2c_tl_event_handler+0x60>
            break;
 8000d5a:	bf00      	nop
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	817b      	strh	r3, [r7, #10]
 8000d74:	4613      	mov	r3, r2
 8000d76:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d112      	bne.n	8000db0 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 fbc0 	bl	8007516 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fb5b 	bl	8007458 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fb55 	bl	8007458 <pal_gpio_set_low>
            break;
 8000dae:	e000      	b.n	8000db2 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000db0:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d008      	beq.n	8000dce <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000dc8:	8979      	ldrh	r1, [r7, #10]
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4798      	blx	r3
    }
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8000de0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000de4:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d004      	beq.n	8000dfa <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d156      	bne.n	8000ea8 <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000e00:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e02:	d048      	beq.n	8000e96 <ifx_i2c_init+0xbe>
 8000e04:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e06:	dc4d      	bgt.n	8000ea4 <ifx_i2c_init+0xcc>
 8000e08:	2bb1      	cmp	r3, #177	@ 0xb1
 8000e0a:	d002      	beq.n	8000e12 <ifx_i2c_init+0x3a>
 8000e0c:	2bb2      	cmp	r3, #178	@ 0xb2
 8000e0e:	d021      	beq.n	8000e54 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 8000e10:	e048      	b.n	8000ea4 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d105      	bne.n	8000e28 <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e22:	4618      	mov	r0, r3
 8000e24:	f006 fb18 	bl	8007458 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 fb12 	bl	8007458 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	22b2      	movs	r2, #178	@ 0xb2
 8000e38:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4923      	ldr	r1, [pc, #140]	@ (8000ed8 <ifx_i2c_init+0x100>)
 8000e4a:	f006 fd57 	bl	80078fc <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81fb      	strh	r3, [r7, #14]
                break;
 8000e52:	e028      	b.n	8000ea6 <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fae7 	bl	8007438 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fae1 	bl	8007438 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	22b3      	movs	r2, #179	@ 0xb3
 8000e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e84:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4913      	ldr	r1, [pc, #76]	@ (8000ed8 <ifx_i2c_init+0x100>)
 8000e8c:	f006 fd36 	bl	80078fc <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e90:	2300      	movs	r3, #0
 8000e92:	81fb      	strh	r3, [r7, #14]
                break;
 8000e94:	e007      	b.n	8000ea6 <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000e96:	4911      	ldr	r1, [pc, #68]	@ (8000edc <ifx_i2c_init+0x104>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f001 f9af 	bl	80021fc <ifx_i2c_prl_init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	81fb      	strh	r3, [r7, #14]
                break;
 8000ea2:	e000      	b.n	8000ea6 <ifx_i2c_init+0xce>
                break;
 8000ea4:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8000ea6:	e009      	b.n	8000ebc <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000eb0:	490a      	ldr	r1, [pc, #40]	@ (8000edc <ifx_i2c_init+0x104>)
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 f9a2 	bl	80021fc <ifx_i2c_prl_init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000ec2:	89f9      	ldrh	r1, [r7, #14]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff17 	bl	8000cfc <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	08000dd9 	.word	0x08000dd9
 8000edc:	08000cfd 	.word	0x08000cfd

08000ee0 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000ef2:	4919      	ldr	r1, [pc, #100]	@ (8000f58 <ifx_i2c_dl_init+0x78>)
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fc93 	bl	8001820 <ifx_i2c_pl_init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000f00:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000f04:	e024      	b.n	8000f50 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08001361 	.word	0x08001361

08000f5c <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <ifx_i2c_dl_send_frame+0x1c>
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000f78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000f7c:	e01a      	b.n	8000fb4 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	887a      	ldrh	r2, [r7, #2]
 8000f9a:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000fa6:	8879      	ldrh	r1, [r7, #2]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2200      	movs	r2, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f88b 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
 8000fb2:	4603      	mov	r3, r0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d002      	beq.n	8000fd4 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000fce:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000fd2:	e019      	b.n	8001008 <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000fec:	f006 fd3b 	bl	8007a66 <pal_os_timer_get_time_in_milliseconds>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <ifx_i2c_dl_receive_frame+0x54>)
 8000ffc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fc86 	bl	8001912 <ifx_i2c_pl_receive_frame>
 8001006:	4603      	mov	r3, r0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0002bf20 	.word	0x0002bf20

08001014 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4613      	mov	r3, r2
 8001022:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	b29a      	uxth	r2, r3
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4053      	eors	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	b29a      	uxth	r2, r3
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	4053      	eors	r3, r2
 8001044:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8001046:	897b      	ldrh	r3, [r7, #10]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800104c:	897b      	ldrh	r3, [r7, #10]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	4053      	eors	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	b29a      	uxth	r2, r3
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	4053      	eors	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	b29a      	uxth	r2, r3
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	4053      	eors	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	4053      	eors	r3, r2
 8001074:	b29b      	uxth	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	81fb      	strh	r3, [r7, #14]
 8001096:	e00d      	b.n	80010b4 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffb5 	bl	8001014 <ifx_i2c_dl_calc_crc_byte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	3301      	adds	r3, #1
 80010b2:	81fb      	strh	r3, [r7, #14]
 80010b4:	89fa      	ldrh	r2, [r7, #14]
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3ed      	bcc.n	8001098 <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 80010bc:	89bb      	ldrh	r3, [r7, #12]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	460b      	mov	r3, r1
 80010dc:	707b      	strb	r3, [r7, #1]
 80010de:	4613      	mov	r3, r2
 80010e0:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80010e8:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 80010ea:	787b      	ldrb	r3, [r7, #1]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80010f6:	3301      	adds	r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8001106:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d105      	bne.n	800111a <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001118:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 800111a:	787b      	ldrb	r3, [r7, #1]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <ifx_i2c_dl_send_frame_internal+0x6a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001126:	2b09      	cmp	r3, #9
 8001128:	d103      	bne.n	8001132 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001130:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8001132:	8afb      	ldrh	r3, [r7, #22]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	015b      	lsls	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d027      	beq.n	80011a2 <ifx_i2c_dl_send_frame_internal+0xda>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8001152:	783b      	ldrb	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <ifx_i2c_dl_send_frame_internal+0x9a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001168:	3301      	adds	r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
 8001196:	4a31      	ldr	r2, [pc, #196]	@ (800125c <ifx_i2c_dl_send_frame_internal+0x194>)
 8001198:	4931      	ldr	r1, [pc, #196]	@ (8001260 <ifx_i2c_dl_send_frame_internal+0x198>)
 800119a:	4832      	ldr	r0, [pc, #200]	@ (8001264 <ifx_i2c_dl_send_frame_internal+0x19c>)
 800119c:	f005 fe18 	bl	8006dd0 <optiga_lib_print_message>
 80011a0:	e006      	b.n	80011b0 <ifx_i2c_dl_send_frame_internal+0xe8>
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	3302      	adds	r3, #2
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	3303      	adds	r3, #3
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	6938      	ldr	r0, [r7, #16]
 80011d2:	f7ff ff56 	bl	8001082 <ifx_i2c_dl_calc_crc>
 80011d6:	4603      	mov	r3, r0
 80011d8:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29a      	uxth	r2, r3
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	3303      	adds	r3, #3
 80011e4:	4619      	mov	r1, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	440b      	add	r3, r1
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	3304      	adds	r3, #4
 80011f2:	461a      	mov	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	89fa      	ldrh	r2, [r7, #14]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01e      	beq.n	8001242 <ifx_i2c_dl_send_frame_internal+0x17a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	2b01      	cmp	r3, #1
 8001210:	d006      	beq.n	8001220 <ifx_i2c_dl_send_frame_internal+0x158>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b03      	cmp	r3, #3
 800121e:	d108      	bne.n	8001232 <ifx_i2c_dl_send_frame_internal+0x16a>
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	3305      	adds	r3, #5
 8001224:	b29b      	uxth	r3, r3
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <ifx_i2c_dl_send_frame_internal+0x1a0>)
 8001228:	4619      	mov	r1, r3
 800122a:	6938      	ldr	r0, [r7, #16]
 800122c:	f005 fe32 	bl	8006e94 <optiga_lib_print_array_hex_format>
 8001230:	e007      	b.n	8001242 <ifx_i2c_dl_send_frame_internal+0x17a>
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	3305      	adds	r3, #5
 8001236:	b29b      	uxth	r3, r3
 8001238:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <ifx_i2c_dl_send_frame_internal+0x1a4>)
 800123a:	4619      	mov	r1, r3
 800123c:	6938      	ldr	r0, [r7, #16]
 800123e:	f005 fe29 	bl	8006e94 <optiga_lib_print_array_hex_format>
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	3305      	adds	r3, #5
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	6939      	ldr	r1, [r7, #16]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb37 	bl	80018c0 <ifx_i2c_pl_send_frame>
 8001252:	4603      	mov	r3, r0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08011efc 	.word	0x08011efc
 8001260:	08011f04 	.word	0x08011f04
 8001264:	08011f1c 	.word	0x08011f1c
 8001268:	08011f24 	.word	0x08011f24
 800126c:	08011f2c 	.word	0x08011f2c

08001270 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2203      	movs	r2, #3
 8001284:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2205      	movs	r2, #5
 8001294:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8001298:	2300      	movs	r3, #0
 800129a:	2202      	movs	r2, #2
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff12 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
 80012a4:	4603      	mov	r3, r0
 80012a6:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 80012c0:	f006 fbd1 	bl	8007a66 <pal_os_timer_get_time_in_milliseconds>
 80012c4:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d205      	bcs.n	80012ea <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <ifx_i2c_dl_resend_frame+0xa8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d82c      	bhi.n	800134c <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d109      	bne.n	8001310 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffb3 	bl	8001270 <ifx_i2c_dl_resync>
 800130a:	4603      	mov	r3, r0
 800130c:	82fb      	strh	r3, [r7, #22]
 800130e:	e015      	b.n	800133c <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001316:	3301      	adds	r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	2301      	movs	r3, #1
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fec8 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
 8001338:	4603      	mov	r3, r0
 800133a:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2206      	movs	r2, #6
 8001346:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 800134a:	e003      	b.n	8001354 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2208      	movs	r2, #8
 8001350:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0002bf1f 	.word	0x0002bf1f

08001360 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	460b      	mov	r3, r1
 800136e:	817b      	strh	r3, [r7, #10]
 8001370:	4613      	mov	r3, r2
 8001372:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8001388:	2301      	movs	r3, #1
 800138a:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800139e:	d108      	bne.n	80013b2 <ifx_i2c_pl_event_handler+0x52>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d003      	beq.n	80013b2 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2208      	movs	r2, #8
 80013ae:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80013b8:	3b01      	subs	r3, #1
 80013ba:	2b0a      	cmp	r3, #10
 80013bc:	f200 820d 	bhi.w	80017da <ifx_i2c_pl_event_handler+0x47a>
 80013c0:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <ifx_i2c_pl_event_handler+0x68>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	0800141b 	.word	0x0800141b
 80013d0:	0800145d 	.word	0x0800145d
 80013d4:	080016ef 	.word	0x080016ef
 80013d8:	08001771 	.word	0x08001771
 80013dc:	08001757 	.word	0x08001757
 80013e0:	080017db 	.word	0x080017db
 80013e4:	08001789 	.word	0x08001789
 80013e8:	080016db 	.word	0x080016db
 80013ec:	08001509 	.word	0x08001509
 80013f0:	08001619 	.word	0x08001619
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 80013f4:	897b      	ldrh	r3, [r7, #10]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <ifx_i2c_pl_event_handler+0x9e>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <ifx_i2c_pl_event_handler+0xa0>
 80013fe:	2302      	movs	r3, #2
 8001400:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8001402:	2300      	movs	r3, #0
 8001404:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800140c:	7cfb      	ldrb	r3, [r7, #19]
 800140e:	b299      	uxth	r1, r3
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	47a0      	blx	r4
            }
            break;
 8001418:	e1ef      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001420:	d104      	bne.n	800142c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800142a:	e1e6      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800142c:	f006 fb1b 	bl	8007a66 <pal_os_timer_get_time_in_milliseconds>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2203      	movs	r2, #3
 800143c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 fa66 	bl	8001912 <ifx_i2c_pl_receive_frame>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2206      	movs	r2, #6
 8001450:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8001454:	e1d1      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                    continue_state_machine = FALSE;
 8001456:	2300      	movs	r3, #0
 8001458:	773b      	strb	r3, [r7, #28]
            break;
 800145a:	e1ce      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 800145c:	897b      	ldrh	r3, [r7, #10]
 800145e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001462:	d104      	bne.n	800146e <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800146c:	e1c5      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 800146e:	893b      	ldrh	r3, [r7, #8]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d804      	bhi.n	800147e <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2206      	movs	r2, #6
 8001478:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800147c:	e1bd      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8001484:	7d7b      	ldrb	r3, [r7, #21]
 8001486:	09db      	lsrs	r3, r3, #7
 8001488:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 800148a:	7d7b      	ldrb	r3, [r7, #21]
 800148c:	115b      	asrs	r3, r3, #5
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8001496:	7d7b      	ldrb	r3, [r7, #21]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 800149e:	7d7b      	ldrb	r3, [r7, #21]
 80014a0:	109b      	asrs	r3, r3, #2
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3302      	adds	r3, #2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 80014c2:	893b      	ldrh	r3, [r7, #8]
 80014c4:	3b02      	subs	r3, #2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	893b      	ldrh	r3, [r7, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	440b      	add	r3, r1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 80014e2:	893b      	ldrh	r3, [r7, #8]
 80014e4:	3b02      	subs	r3, #2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fdc9 	bl	8001082 <ifx_i2c_dl_calc_crc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 80014f4:	7d3b      	ldrb	r3, [r7, #20]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <ifx_i2c_pl_event_handler+0x19e>
 80014fa:	220b      	movs	r2, #11
 80014fc:	e000      	b.n	8001500 <ifx_i2c_pl_event_handler+0x1a0>
 80014fe:	220a      	movs	r2, #10
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8001506:	e178      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001508:	8b3a      	ldrh	r2, [r7, #24]
 800150a:	8afb      	ldrh	r3, [r7, #22]
 800150c:	429a      	cmp	r2, r3
 800150e:	d10d      	bne.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
 8001510:	8b7b      	ldrh	r3, [r7, #26]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001516:	893a      	ldrh	r2, [r7, #8]
 8001518:	8b7b      	ldrh	r3, [r7, #26]
 800151a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d105      	bne.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001520:	7f7b      	ldrb	r3, [r7, #29]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d002      	beq.n	800152c <ifx_i2c_pl_event_handler+0x1cc>
 8001526:	7f7b      	ldrb	r3, [r7, #29]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d104      	bne.n	8001536 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2206      	movs	r2, #6
 8001530:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001534:	e161      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8001536:	7ffa      	ldrb	r2, [r7, #31]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800153e:	3301      	adds	r3, #1
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	429a      	cmp	r2, r3
 8001546:	d00c      	beq.n	8001562 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2209      	movs	r2, #9
 800154c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8001550:	2300      	movs	r3, #0
 8001552:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff fdb4 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
                    break;
 8001560:	e14b      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001568:	7fba      	ldrb	r2, [r7, #30]
 800156a:	429a      	cmp	r2, r3
 800156c:	d004      	beq.n	8001578 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2209      	movs	r2, #9
 8001572:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001576:	e140      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001578:	7f7b      	ldrb	r3, [r7, #29]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d104      	bne.n	8001588 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2205      	movs	r2, #5
 8001582:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001586:	e138      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800158e:	3301      	adds	r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80015a4:	893a      	ldrh	r2, [r7, #8]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00f fce8 	bl	8010f7e <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	893a      	ldrh	r2, [r7, #8]
 80015b2:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2204      	movs	r2, #4
 80015c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
 80015ca:	4a90      	ldr	r2, [pc, #576]	@ (800180c <ifx_i2c_pl_event_handler+0x4ac>)
 80015cc:	4990      	ldr	r1, [pc, #576]	@ (8001810 <ifx_i2c_pl_event_handler+0x4b0>)
 80015ce:	4891      	ldr	r0, [pc, #580]	@ (8001814 <ifx_i2c_pl_event_handler+0x4b4>)
 80015d0:	f005 fbfe 	bl	8006dd0 <optiga_lib_print_message>
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d006      	beq.n	80015f0 <ifx_i2c_pl_event_handler+0x290>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d106      	bne.n	80015fe <ifx_i2c_pl_event_handler+0x29e>
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	4a89      	ldr	r2, [pc, #548]	@ (8001818 <ifx_i2c_pl_event_handler+0x4b8>)
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f005 fc4c 	bl	8006e94 <optiga_lib_print_array_hex_format>
 80015fc:	e005      	b.n	800160a <ifx_i2c_pl_event_handler+0x2aa>
 80015fe:	893b      	ldrh	r3, [r7, #8]
 8001600:	4a86      	ldr	r2, [pc, #536]	@ (800181c <ifx_i2c_pl_event_handler+0x4bc>)
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f005 fc45 	bl	8006e94 <optiga_lib_print_array_hex_format>
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fd59 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001616:	e0f0      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800161e:	461a      	mov	r2, r3
 8001620:	7f7b      	ldrb	r3, [r7, #29]
 8001622:	2b02      	cmp	r3, #2
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	429a      	cmp	r2, r3
 800162e:	d004      	beq.n	800163a <ifx_i2c_pl_event_handler+0x2da>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2209      	movs	r2, #9
 8001634:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001638:	e0df      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (crc_received != crc_calculated)
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	429a      	cmp	r2, r3
 8001640:	d004      	beq.n	800164c <ifx_i2c_pl_event_handler+0x2ec>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800164a:	e0d6      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800164c:	893b      	ldrh	r3, [r7, #8]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d802      	bhi.n	8001658 <ifx_i2c_pl_event_handler+0x2f8>
 8001652:	8b7b      	ldrh	r3, [r7, #26]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <ifx_i2c_pl_event_handler+0x302>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2209      	movs	r2, #9
 800165c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001660:	e0cb      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8001662:	7f7b      	ldrb	r3, [r7, #29]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d110      	bne.n	800168a <ifx_i2c_pl_event_handler+0x32a>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2209      	movs	r2, #9
 800166c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2203      	movs	r2, #3
 800167c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2203      	movs	r2, #3
 8001684:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 8001688:	e0b7      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d108      	bne.n	80016a2 <ifx_i2c_pl_event_handler+0x342>
 8001690:	7f7b      	ldrb	r3, [r7, #29]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d005      	beq.n	80016a2 <ifx_i2c_pl_event_handler+0x342>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800169c:	7fba      	ldrb	r2, [r7, #30]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d004      	beq.n	80016ac <ifx_i2c_pl_event_handler+0x34c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2209      	movs	r2, #9
 80016a6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016aa:	e0a6      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80016ac:	7f7b      	ldrb	r3, [r7, #29]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <ifx_i2c_pl_event_handler+0x35c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016ba:	e09e      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80016ce:	2300      	movs	r3, #0
 80016d0:	2200      	movs	r2, #0
 80016d2:	2102      	movs	r1, #2
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	47a0      	blx	r4
            }
            break;
 80016d8:	e08f      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f913 	bl	8001912 <ifx_i2c_pl_receive_frame>
            }
            break;
 80016ec:	e085      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80016f4:	d104      	bne.n	8001700 <ifx_i2c_pl_event_handler+0x3a0>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016fe:	e07c      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001708:	2300      	movs	r3, #0
 800170a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <ifx_i2c_pl_event_handler+0x3d6>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001722:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800172a:	3b05      	subs	r3, #5
 800172c:	b29b      	uxth	r3, r3
 800172e:	2104      	movs	r1, #4
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001734:	e061      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001742:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800174a:	3b05      	subs	r3, #5
 800174c:	b29b      	uxth	r3, r3
 800174e:	2106      	movs	r1, #6
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	47a0      	blx	r4
            break;
 8001754:	e051      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800175e:	2300      	movs	r3, #0
 8001760:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001762:	2300      	movs	r3, #0
 8001764:	2201      	movs	r2, #1
 8001766:	2100      	movs	r1, #0
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fcad 	bl	80010c8 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800176e:	e044      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8001770:	2100      	movs	r1, #0
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fd9e 	bl	80012b4 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800177e:	2b08      	cmp	r3, #8
 8001780:	d03a      	beq.n	80017f8 <ifx_i2c_pl_event_handler+0x498>
                {
                    continue_state_machine = FALSE;
 8001782:	2300      	movs	r3, #0
 8001784:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 8001786:	e037      	b.n	80017f8 <ifx_i2c_pl_event_handler+0x498>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <ifx_i2c_pl_event_handler+0x43a>
                {
                    p_ctx->dl.error = 1;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10c      	bne.n	80017be <ifx_i2c_pl_event_handler+0x45e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80017b2:	2300      	movs	r3, #0
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	47a0      	blx	r4
 80017bc:	e00a      	b.n	80017d4 <ifx_i2c_pl_event_handler+0x474>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fd56 	bl	8001270 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2208      	movs	r2, #8
 80017c8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	773b      	strb	r3, [r7, #28]
            }
            break;
 80017d8:	e00f      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80017e8:	2300      	movs	r3, #0
 80017ea:	2200      	movs	r2, #0
 80017ec:	2101      	movs	r1, #1
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	47a0      	blx	r4
                continue_state_machine = FALSE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	773b      	strb	r3, [r7, #28]
                break;
 80017f6:	e000      	b.n	80017fa <ifx_i2c_pl_event_handler+0x49a>
            break;
 80017f8:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 80017fa:	7f3b      	ldrb	r3, [r7, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f43f adcb 	beq.w	8001398 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3724      	adds	r7, #36	@ 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	08011efc 	.word	0x08011efc
 8001810:	08011f04 	.word	0x08011f04
 8001814:	08011f34 	.word	0x08011f34
 8001818:	08011f24 	.word	0x08011f24
 800181c:	08011f2c 	.word	0x08011f2c

08001820 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	22bb      	movs	r2, #187	@ 0xbb
 800183e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800184e:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001856:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <ifx_i2c_pl_init+0x9c>)
 8001858:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	22c8      	movs	r2, #200	@ 0xc8
 800185e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10b      	bne.n	8001884 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fe44 	bl	8007500 <pal_i2c_init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800187e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001882:	e016      	b.n	80018b2 <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2299      	movs	r2, #153	@ 0x99
 8001892:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800189e:	e003      	b.n	80018a8 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fa84 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	080020a1 	.word	0x080020a1

080018c0 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	4613      	mov	r3, r2
 80018cc:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d007      	beq.n	80018e8 <ifx_i2c_pl_send_frame+0x28>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d002      	beq.n	80018e8 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80018e2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018e6:	e010      	b.n	800190a <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001900:	2100      	movs	r1, #0
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa58 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001920:	2b01      	cmp	r3, #1
 8001922:	d007      	beq.n	8001934 <ifx_i2c_pl_receive_frame+0x22>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800192a:	2b02      	cmp	r3, #2
 800192c:	d002      	beq.n	8001934 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800192e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001932:	e008      	b.n	8001946 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800193c:	2100      	movs	r1, #0
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fa3a 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
 800195a:	4613      	mov	r3, r2
 800195c:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	883a      	ldrh	r2, [r7, #0]
 8001972:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	22c8      	movs	r2, #200	@ 0xc8
 8001982:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80019a0:	461a      	mov	r2, r3
 80019a2:	f005 fdc3 	bl	800752c <pal_i2c_write>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	72fb      	strb	r3, [r7, #11]
 80019bc:	4613      	mov	r3, r2
 80019be:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	7afa      	ldrb	r2, [r7, #11]
 80019c4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80019ce:	3301      	adds	r3, #1
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00f fad2 	bl	8010f7e <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80019da:	893b      	ldrh	r3, [r7, #8]
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2202      	movs	r2, #2
 80019ea:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	22c8      	movs	r2, #200	@ 0xc8
 80019f2:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001a10:	461a      	mov	r2, r3
 8001a12:	f005 fd8b 	bl	800752c <pal_i2c_write>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001a26:	2204      	movs	r2, #4
 8001a28:	2182      	movs	r1, #130	@ 0x82
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff8f 	bl	800194e <ifx_i2c_pl_read_register>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f005 fdde 	bl	8007624 <pal_i2c_set_bitrate>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d019      	beq.n	8001ab0 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	b291      	uxth	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <ifx_i2c_pl_set_bit_rate+0x88>)
 8001a9e:	f005 ff2d 	bl	80078fc <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	81fb      	strh	r3, [r7, #14]
 8001aa6:	e005      	b.n	8001ab4 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 8001aa8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001aac:	81fb      	strh	r3, [r7, #14]
 8001aae:	e001      	b.n	8001ab4 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 8001ab4:	89fb      	ldrh	r3, [r7, #14]

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	08001ac5 	.word	0x08001ac5

08001ac4 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b08b      	sub	sp, #44	@ 0x2c
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 8001acc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ad0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	733b      	strb	r3, [r7, #12]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8001b02:	2bbb      	cmp	r3, #187	@ 0xbb
 8001b04:	d031      	beq.n	8001b6a <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001b06:	2bbb      	cmp	r3, #187	@ 0xbb
 8001b08:	f300 8145 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b0c:	2baa      	cmp	r3, #170	@ 0xaa
 8001b0e:	f000 812d 	beq.w	8001d6c <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 8001b12:	2baa      	cmp	r3, #170	@ 0xaa
 8001b14:	f300 813f 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b18:	2b88      	cmp	r3, #136	@ 0x88
 8001b1a:	f000 8103 	beq.w	8001d24 <ifx_i2c_pl_negotiation_event_handler+0x260>
 8001b1e:	2b88      	cmp	r3, #136	@ 0x88
 8001b20:	f300 8139 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b24:	2b77      	cmp	r3, #119	@ 0x77
 8001b26:	f000 80c6 	beq.w	8001cb6 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001b2a:	2b77      	cmp	r3, #119	@ 0x77
 8001b2c:	f300 8133 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b30:	2b66      	cmp	r3, #102	@ 0x66
 8001b32:	f000 809d 	beq.w	8001c70 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001b36:	2b66      	cmp	r3, #102	@ 0x66
 8001b38:	f300 812d 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b3c:	2b55      	cmp	r3, #85	@ 0x55
 8001b3e:	f000 808d 	beq.w	8001c5c <ifx_i2c_pl_negotiation_event_handler+0x198>
 8001b42:	2b55      	cmp	r3, #85	@ 0x55
 8001b44:	f300 8127 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b48:	2b44      	cmp	r3, #68	@ 0x44
 8001b4a:	d040      	beq.n	8001bce <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001b4c:	2b44      	cmp	r3, #68	@ 0x44
 8001b4e:	f300 8122 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b52:	2b33      	cmp	r3, #51	@ 0x33
 8001b54:	d031      	beq.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001b56:	2b33      	cmp	r3, #51	@ 0x33
 8001b58:	f300 811d 	bgt.w	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	f000 80cb 	beq.w	8001cf8 <ifx_i2c_pl_negotiation_event_handler+0x234>
 8001b62:	2b22      	cmp	r3, #34	@ 0x22
 8001b64:	f000 80d4 	beq.w	8001d10 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001b68:	e115      	b.n	8001d96 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001b6a:	2164      	movs	r1, #100	@ 0x64
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff63 	bl	8001a38 <ifx_i2c_pl_set_bit_rate>
 8001b72:	4603      	mov	r3, r0
 8001b74:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001b76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2233      	movs	r2, #51	@ 0x33
 8001b80:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001b8a:	e106      	b.n	8001d9a <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001b8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b8e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001b92:	f040 8102 	bne.w	8001d9a <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	22aa      	movs	r2, #170	@ 0xaa
 8001b9a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001bac:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4980      	ldr	r1, [pc, #512]	@ (8001db4 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 8001bb4:	f005 fea2 	bl	80078fc <pal_os_event_register_callback_oneshot>
            break;
 8001bb8:	e0ef      	b.n	8001d9a <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2244      	movs	r2, #68	@ 0x44
 8001bbe:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	2184      	movs	r1, #132	@ 0x84
 8001bc6:	69b8      	ldr	r0, [r7, #24]
 8001bc8:	f7ff fec1 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8001bcc:	e0e8      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001bf0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bf4:	d911      	bls.n	8001c1a <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001bf6:	8abb      	ldrh	r3, [r7, #20]
 8001bf8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bfc:	d80d      	bhi.n	8001c1a <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2255      	movs	r2, #85	@ 0x55
 8001c06:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2202      	movs	r2, #2
 8001c10:	2189      	movs	r1, #137	@ 0x89
 8001c12:	69b8      	ldr	r0, [r7, #24]
 8001c14:	f7ff fecb 	bl	80019ae <ifx_i2c_pl_write_register>
 8001c18:	e01f      	b.n	8001c5a <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001c20:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001c24:	d811      	bhi.n	8001c4a <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001c26:	8abb      	ldrh	r3, [r7, #20]
 8001c28:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001c2c:	d90d      	bls.n	8001c4a <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2255      	movs	r2, #85	@ 0x55
 8001c36:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	2202      	movs	r2, #2
 8001c40:	2189      	movs	r1, #137	@ 0x89
 8001c42:	69b8      	ldr	r0, [r7, #24]
 8001c44:	f7ff feb3 	bl	80019ae <ifx_i2c_pl_write_register>
 8001c48:	e007      	b.n	8001c5a <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2266      	movs	r2, #102	@ 0x66
 8001c4e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001c58:	e0a2      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001c5a:	e0a1      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2266      	movs	r2, #102	@ 0x66
 8001c60:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001c64:	2204      	movs	r2, #4
 8001c66:	2184      	movs	r1, #132	@ 0x84
 8001c68:	69b8      	ldr	r0, [r7, #24]
 8001c6a:	f7ff fe70 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8001c6e:	e097      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001c8e:	8aba      	ldrh	r2, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d208      	bcs.n	8001ca6 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	22aa      	movs	r2, #170	@ 0xaa
 8001ca0:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001ca4:	e003      	b.n	8001cae <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2277      	movs	r2, #119	@ 0x77
 8001caa:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001cb4:	e074      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff feba 	bl	8001a38 <ifx_i2c_pl_set_bit_rate>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001cc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2211      	movs	r2, #17
 8001cd2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001cdc:	e05f      	b.n	8001d9e <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ce0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001ce4:	d15b      	bne.n	8001d9e <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	22aa      	movs	r2, #170	@ 0xaa
 8001cea:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001cf6:	e052      	b.n	8001d9e <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2222      	movs	r2, #34	@ 0x22
 8001cfc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2202      	movs	r2, #2
 8001d06:	2181      	movs	r1, #129	@ 0x81
 8001d08:	69b8      	ldr	r0, [r7, #24]
 8001d0a:	f7ff fe50 	bl	80019ae <ifx_i2c_pl_write_register>
            break;
 8001d0e:	e047      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2288      	movs	r2, #136	@ 0x88
 8001d14:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001d18:	2202      	movs	r2, #2
 8001d1a:	2181      	movs	r1, #129	@ 0x81
 8001d1c:	69b8      	ldr	r0, [r7, #24]
 8001d1e:	f7ff fe16 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8001d22:	e03d      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	22aa      	movs	r2, #170	@ 0xaa
 8001d28:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001d4a:	8afa      	ldrh	r2, [r7, #22]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d805      	bhi.n	8001d5c <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	8afa      	ldrh	r2, [r7, #22]
 8001d54:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001d6a:	e019      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001d6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001d7a:	e003      	b.n	8001d84 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d8c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	69b8      	ldr	r0, [r7, #24]
 8001d92:	47a0      	blx	r4
            break;
 8001d94:	e004      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 8001d96:	bf00      	nop
 8001d98:	e002      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001d9a:	bf00      	nop
 8001d9c:	e000      	b.n	8001da0 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001d9e:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001da0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f aea6 	bne.w	8001af6 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	372c      	adds	r7, #44	@ 0x2c
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	08001ac5 	.word	0x08001ac5

08001db8 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001dd8:	8879      	ldrh	r1, [r7, #2]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001de2:	e0f0      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001dea:	3b01      	subs	r3, #1
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	f200 80dc 	bhi.w	8001faa <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e15 	.word	0x08001e15
 8001dfc:	08001e1d 	.word	0x08001e1d
 8001e00:	08001e3b 	.word	0x08001e3b
 8001e04:	08001f89 	.word	0x08001f89
 8001e08:	08001e0d 	.word	0x08001e0d
                ifx_i2c_pl_soft_reset(p_ctx);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f983 	bl	8002118 <ifx_i2c_pl_soft_reset>
            break;
 8001e12:	e0d8      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fe55 	bl	8001ac4 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001e1a:	e0d4      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d105      	bne.n	8001e3a <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001e2e:	2204      	movs	r2, #4
 8001e30:	2182      	movs	r1, #130	@ 0x82
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fd8b 	bl	800194e <ifx_i2c_pl_read_register>
                    break;
 8001e38:	e0c5      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d159      	bne.n	8001ef8 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d052      	beq.n	8001ef8 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e6a:	8a7b      	ldrh	r3, [r7, #18]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <ifx_i2c_pl_frame_event_handler+0xda>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001e76:	8a7a      	ldrh	r2, [r7, #18]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d80a      	bhi.n	8001e92 <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001e84:	8a7b      	ldrh	r3, [r7, #18]
 8001e86:	461a      	mov	r2, r3
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fd5f 	bl	800194e <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e90:	e079      	b.n	8001f86 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001e92:	f005 fde8 	bl	8007a66 <pal_os_timer_get_time_in_milliseconds>
 8001e96:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d205      	bcs.n	8001ebc <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d209      	bcs.n	8001edc <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ece:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	493e      	ldr	r1, [pc, #248]	@ (8001fd0 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001ed6:	f005 fd11 	bl	80078fc <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001eda:	e054      	b.n	8001f86 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001eea:	2300      	movs	r3, #0
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001ef6:	e046      	b.n	8001f86 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10e      	bne.n	8001f20 <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2204      	movs	r2, #4
 8001f06:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fd48 	bl	80019ae <ifx_i2c_pl_write_register>
            break;
 8001f1e:	e052      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001f20:	f005 fda1 	bl	8007a66 <pal_os_timer_get_time_in_milliseconds>
 8001f24:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d205      	bcs.n	8001f4a <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d209      	bcs.n	8001f6a <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001f5c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	491b      	ldr	r1, [pc, #108]	@ (8001fd0 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001f64:	f005 fcca 	bl	80078fc <pal_os_event_register_callback_oneshot>
            break;
 8001f68:	e02d      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	47a0      	blx	r4
            break;
 8001f84:	e01f      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
 8001f86:	e01e      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	47a0      	blx	r4
            break;
 8001fa8:	e00d      	b.n	8001fc6 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	47a0      	blx	r4
            break;
 8001fc4:	bf00      	nop
}
 8001fc6:	bf00      	nop
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	08001a1f 	.word	0x08001a1f

08001fd4 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10c      	bne.n	8002004 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f005 fa95 	bl	800752c <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8002002:	e010      	b.n	8002026 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 800200a:	2b02      	cmp	r3, #2
 800200c:	d10b      	bne.n	8002026 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002020:	461a      	mov	r2, r3
 8002022:	f005 fac1 	bl	80075a8 <pal_i2c_read>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11f      	bne.n	8002084 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 800204a:	2b01      	cmp	r3, #1
 800204c:	d110      	bne.n	8002070 <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002068:	461a      	mov	r2, r3
 800206a:	f005 fa9d 	bl	80075a8 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800206e:	e012      	b.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8002076:	2b02      	cmp	r3, #2
 8002078:	d10d      	bne.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800207a:	2100      	movs	r1, #0
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fe9b 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
}
 8002082:	e008      	b.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800208a:	2b02      	cmp	r3, #2
 800208c:	d103      	bne.n	8002096 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800208e:	2100      	movs	r1, #0
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fe91 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
    switch (event)
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01e      	beq.n	80020f4 <ifx_i2c_pl_pal_event_handler+0x54>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db25      	blt.n	8002106 <ifx_i2c_pl_pal_event_handler+0x66>
 80020ba:	3b01      	subs	r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d822      	bhi.n	8002106 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	b291      	uxth	r1, r2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80020da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	490b      	ldr	r1, [pc, #44]	@ (8002110 <ifx_i2c_pl_pal_event_handler+0x70>)
 80020e2:	f005 fc0b 	bl	80078fc <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 80020e6:	e00f      	b.n	8002108 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 80020e8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff fe63 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
            break;
 80020f2:	e009      	b.n	8002108 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80020fa:	2332      	movs	r3, #50	@ 0x32
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4905      	ldr	r1, [pc, #20]	@ (8002114 <ifx_i2c_pl_pal_event_handler+0x74>)
 8002100:	f005 fbfc 	bl	80078fc <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8002104:	e000      	b.n	8002108 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8002106:	bf00      	nop
    }
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	08001fd5 	.word	0x08001fd5
 8002114:	0800202f 	.word	0x0800202f

08002118 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8002120:	2300      	movs	r3, #0
 8002122:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800212a:	3b99      	subs	r3, #153	@ 0x99
 800212c:	2b0a      	cmp	r3, #10
 800212e:	d85e      	bhi.n	80021ee <ifx_i2c_pl_soft_reset+0xd6>
 8002130:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <ifx_i2c_pl_soft_reset+0x20>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002165 	.word	0x08002165
 800213c:	080021ef 	.word	0x080021ef
 8002140:	080021ef 	.word	0x080021ef
 8002144:	080021ef 	.word	0x080021ef
 8002148:	080021ef 	.word	0x080021ef
 800214c:	080021ef 	.word	0x080021ef
 8002150:	080021ef 	.word	0x080021ef
 8002154:	080021ef 	.word	0x080021ef
 8002158:	080021dd 	.word	0x080021dd
 800215c:	08002179 	.word	0x08002179
 8002160:	080021c1 	.word	0x080021c1
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	22a2      	movs	r2, #162	@ 0xa2
 8002168:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800216c:	2204      	movs	r2, #4
 800216e:	2182      	movs	r1, #130	@ 0x82
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fbec 	bl	800194e <ifx_i2c_pl_read_register>
            break;
 8002176:	e03b      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	b2da      	uxtb	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8002190:	2b08      	cmp	r3, #8
 8002192:	d10b      	bne.n	80021ac <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	22a3      	movs	r2, #163	@ 0xa3
 8002198:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2202      	movs	r2, #2
 80021a2:	2188      	movs	r1, #136	@ 0x88
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff fc02 	bl	80019ae <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 80021aa:	e021      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 80021b4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fdfd 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
            break;
 80021be:	e017      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	22a1      	movs	r2, #161	@ 0xa1
 80021c4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80021ce:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <ifx_i2c_pl_soft_reset+0xe0>)
 80021d6:	f005 fb91 	bl	80078fc <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 80021da:	e009      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fde6 	bl	8001db8 <ifx_i2c_pl_frame_event_handler>
            break;
 80021ec:	e000      	b.n	80021f0 <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 80021ee:	bf00      	nop
    }
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	08002119 	.word	0x08002119

080021fc <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002206:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800220a:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8002214:	491c      	ldr	r1, [pc, #112]	@ (8002288 <ifx_i2c_prl_init+0x8c>)
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f001 faa0 	bl	800375c <ifx_i2c_tl_init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d12b      	bne.n	800227a <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800222e:	2b11      	cmp	r3, #17
 8002230:	d104      	bne.n	800223c <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800223a:	e003      	b.n	8002244 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2211      	movs	r2, #17
 8002268:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2211      	movs	r2, #17
 8002270:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8002274:	2300      	movs	r3, #0
 8002276:	81fb      	strh	r3, [r7, #14]
 8002278:	e000      	b.n	800227c <ifx_i2c_prl_init+0x80>
            break;
 800227a:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 800227c:	89fb      	ldrh	r3, [r7, #14]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	08002e05 	.word	0x08002e05

0800228c <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002296:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800229a:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12e      	bne.n	8002304 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80022b2:	2b33      	cmp	r3, #51	@ 0x33
 80022b4:	d109      	bne.n	80022ca <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80022ba:	2300      	movs	r3, #0
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 80022c4:	2300      	movs	r3, #0
 80022c6:	81fb      	strh	r3, [r7, #14]
            break;
 80022c8:	e01d      	b.n	8002306 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d118      	bne.n	8002306 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80022da:	2b22      	cmp	r3, #34	@ 0x22
 80022dc:	d113      	bne.n	8002306 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 80022f4:	2301      	movs	r3, #1
 80022f6:	2100      	movs	r1, #0
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fd83 	bl	8002e04 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 80022fe:	2300      	movs	r3, #0
 8002300:	81fb      	strh	r3, [r7, #14]
            break;
 8002302:	e000      	b.n	8002306 <ifx_i2c_prl_close+0x7a>
            break;
 8002304:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8002306:	89fb      	ldrh	r3, [r7, #14]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002320:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002324:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05a      	beq.n	80023e2 <ifx_i2c_prl_transceive+0xd2>
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d057      	beq.n	80023e2 <ifx_i2c_prl_transceive+0xd2>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002338:	2b01      	cmp	r3, #1
 800233a:	d152      	bne.n	80023e2 <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002342:	2b11      	cmp	r3, #17
 8002344:	d10d      	bne.n	8002362 <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 800234c:	2b00      	cmp	r3, #0
 800234e:	d108      	bne.n	8002362 <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2208      	movs	r2, #8
 8002354:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8002360:	e003      	b.n	800236a <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d006      	beq.n	8002394 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800238c:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002390:	2b03      	cmp	r3, #3
 8002392:	d103      	bne.n	800239c <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
 800239a:	e003      	b.n	80023a4 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a3a      	ldr	r2, [r7, #32]
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2211      	movs	r2, #17
 80023ce:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	2100      	movs	r1, #0
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fd13 	bl	8002e04 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 80023de:	2300      	movs	r3, #0
 80023e0:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 80023e2:	8afb      	ldrh	r3, [r7, #22]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b09e      	sub	sp, #120	@ 0x78
 80023f0:	af06      	add	r7, sp, #24
 80023f2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 80023f4:	f240 1307 	movw	r3, #263	@ 0x107
 80023f8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <ifx_i2c_prl_prf+0xa4>)
 80023fe:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002402:	461d      	mov	r5, r3
 8002404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	f107 020a 	add.w	r2, r7, #10
 8002418:	f107 010c 	add.w	r1, r7, #12
 800241c:	4618      	mov	r0, r3
 800241e:	f005 f9a7 	bl	8007770 <pal_os_datastore_read>
 8002422:	4603      	mov	r3, r0
 8002424:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8002428:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002430:	f240 1307 	movw	r3, #263	@ 0x107
 8002434:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8002438:	e024      	b.n	8002484 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 800243a:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002444:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002448:	f107 010c 	add.w	r1, r7, #12
 800244c:	2528      	movs	r5, #40	@ 0x28
 800244e:	9504      	str	r5, [sp, #16]
 8002450:	9203      	str	r2, [sp, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2310      	movs	r3, #16
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4623      	mov	r3, r4
 800245e:	4602      	mov	r2, r0
 8002460:	2000      	movs	r0, #0
 8002462:	f004 ff81 	bl	8007368 <pal_crypt_tls_prf_sha256>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 800246c:	f240 1307 	movw	r3, #263	@ 0x107
 8002470:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	461a      	mov	r2, r3
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f00e fd37 	bl	8010ef2 <memset>

    } while (FALSE);
    return (return_status);
 8002484:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8002488:	4618      	mov	r0, r3
 800248a:	3760      	adds	r7, #96	@ 0x60
 800248c:	46bd      	mov	sp, r7
 800248e:	bdb0      	pop	{r4, r5, r7, pc}
 8002490:	08011f3c 	.word	0x08011f3c

08002494 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	7a7a      	ldrb	r2, [r7, #9]
 80024ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	33a1      	adds	r3, #161	@ 0xa1
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fb1f 	bl	8006afa <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	33a6      	adds	r3, #166	@ 0xa6
 80024cc:	897a      	ldrh	r2, [r7, #10]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 fafb 	bl	8006acc <optiga_common_set_uint16>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b08e      	sub	sp, #56	@ 0x38
 80024e2:	af06      	add	r7, sp, #24
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80024ee:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80024f2:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 80024f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024f8:	88f9      	ldrh	r1, [r7, #6]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff ffc9 	bl	8002494 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3378      	adds	r3, #120	@ 0x78
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	3304      	adds	r3, #4
 8002510:	6839      	ldr	r1, [r7, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 faf1 	bl	8006afa <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8002522:	88f9      	ldrh	r1, [r7, #6]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	9205      	str	r2, [sp, #20]
 8002528:	2208      	movs	r2, #8
 800252a:	9204      	str	r2, [sp, #16]
 800252c:	2208      	movs	r2, #8
 800252e:	9203      	str	r2, [sp, #12]
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2308      	movs	r3, #8
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4603      	mov	r3, r0
 800253e:	460a      	mov	r2, r1
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	2000      	movs	r0, #0
 8002544:	f004 ff36 	bl	80073b4 <pal_crypt_encrypt_aes128_ccm>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 800254e:	2300      	movs	r3, #0
 8002550:	83fb      	strh	r3, [r7, #30]
 8002552:	e000      	b.n	8002556 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8002554:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002556:	8bfb      	ldrh	r3, [r7, #30]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	@ 0x38
 8002564:	af06      	add	r7, sp, #24
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002570:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002574:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800257a:	88f9      	ldrh	r1, [r7, #6]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff ff88 	bl	8002494 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8002584:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002588:	3358      	adds	r3, #88	@ 0x58
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	3304      	adds	r3, #4
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f004 faad 	bl	8006afa <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	3308      	adds	r3, #8
 80025a4:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80025a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025aa:	3358      	adds	r3, #88	@ 0x58
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80025b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b6:	9205      	str	r2, [sp, #20]
 80025b8:	2208      	movs	r2, #8
 80025ba:	9204      	str	r2, [sp, #16]
 80025bc:	2208      	movs	r2, #8
 80025be:	9203      	str	r2, [sp, #12]
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	2308      	movs	r3, #8
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4603      	mov	r3, r0
 80025ce:	460a      	mov	r2, r1
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	2000      	movs	r0, #0
 80025d4:	f004 ff0f 	bl	80073f6 <pal_crypt_decrypt_aes128_ccm>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 80025de:	2300      	movs	r3, #0
 80025e0:	83fb      	strh	r3, [r7, #30]
 80025e2:	e000      	b.n	80025e6 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 80025e4:	bf00      	nop
    } while (FALSE);
    return (return_status);
 80025e6:	8bfb      	ldrh	r3, [r7, #30]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 80025f8:	2300      	movs	r3, #0
 80025fa:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800260a:	2b04      	cmp	r3, #4
 800260c:	d134      	bne.n	8002678 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002614:	3301      	adds	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3354      	adds	r3, #84	@ 0x54
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	2201      	movs	r2, #1
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f001 f8a9 	bl	80037b8 <ifx_i2c_tl_transceive>
 8002666:	4603      	mov	r3, r0
 8002668:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e00d      	b.n	8002694 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800267e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22ff      	movs	r2, #255	@ 0xff
 800268e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8002692:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8002694:	89fb      	ldrh	r3, [r7, #14]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b08a      	sub	sp, #40	@ 0x28
 80026a2:	af04      	add	r7, sp, #16
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80026a8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80026ac:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80026b8:	2b55      	cmp	r3, #85	@ 0x55
 80026ba:	f000 8178 	beq.w	80029ae <ifx_i2c_prl_do_handshake+0x310>
 80026be:	2b55      	cmp	r3, #85	@ 0x55
 80026c0:	f300 817f 	bgt.w	80029c2 <ifx_i2c_prl_do_handshake+0x324>
 80026c4:	2b44      	cmp	r3, #68	@ 0x44
 80026c6:	f000 8100 	beq.w	80028ca <ifx_i2c_prl_do_handshake+0x22c>
 80026ca:	2b44      	cmp	r3, #68	@ 0x44
 80026cc:	f300 8179 	bgt.w	80029c2 <ifx_i2c_prl_do_handshake+0x324>
 80026d0:	2b33      	cmp	r3, #51	@ 0x33
 80026d2:	f000 8095 	beq.w	8002800 <ifx_i2c_prl_do_handshake+0x162>
 80026d6:	2b33      	cmp	r3, #51	@ 0x33
 80026d8:	f300 8173 	bgt.w	80029c2 <ifx_i2c_prl_do_handshake+0x324>
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d002      	beq.n	80026e6 <ifx_i2c_prl_do_handshake+0x48>
 80026e0:	2b22      	cmp	r3, #34	@ 0x22
 80026e2:	d034      	beq.n	800274e <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 80026e4:	e16d      	b.n	80029c2 <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2226      	movs	r2, #38	@ 0x26
 800270a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3354      	adds	r3, #84	@ 0x54
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	2202      	movs	r2, #2
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 f847 	bl	80037b8 <ifx_i2c_tl_transceive>
 800272a:	4603      	mov	r3, r0
 800272c:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002734:	d106      	bne.n	8002744 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2255      	movs	r2, #85	@ 0x55
 800273a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800273e:	2301      	movs	r3, #1
 8002740:	613b      	str	r3, [r7, #16]
                    break;
 8002742:	e13f      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2222      	movs	r2, #34	@ 0x22
 8002748:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800274c:	e13a      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800274e:	2301      	movs	r3, #1
 8002750:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002770:	2b01      	cmp	r3, #1
 8002772:	d109      	bne.n	8002788 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002774:	f240 1307 	movw	r3, #263	@ 0x107
 8002778:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	22ff      	movs	r2, #255	@ 0xff
 800277e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
                    break;
 8002786:	e11d      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800278e:	2b26      	cmp	r3, #38	@ 0x26
 8002790:	d108      	bne.n	80027a4 <ifx_i2c_prl_do_handshake+0x106>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d004      	beq.n	80027ae <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2255      	movs	r2, #85	@ 0x55
 80027a8:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80027ac:	e10a      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3322      	adds	r3, #34	@ 0x22
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 f9c2 	bl	8006b3c <optiga_common_get_uint32>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3302      	adds	r3, #2
 80027d0:	2220      	movs	r2, #32
 80027d2:	4619      	mov	r1, r3
 80027d4:	f00e fbd3 	bl	8010f7e <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fe07 	bl	80023ec <ifx_i2c_prl_prf>
 80027de:	4603      	mov	r3, r0
 80027e0:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80027e2:	8afb      	ldrh	r3, [r7, #22]
 80027e4:	f240 1207 	movw	r2, #263	@ 0x107
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d104      	bne.n	80027f6 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2255      	movs	r2, #85	@ 0x55
 80027f0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80027f4:	e0e6      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2233      	movs	r2, #51	@ 0x33
 80027fa:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80027fe:	e0e1      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2208      	movs	r2, #8
 8002804:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3380      	adds	r3, #128	@ 0x80
 8002816:	2220      	movs	r2, #32
 8002818:	4619      	mov	r1, r3
 800281a:	f00e fbb0 	bl	8010f7e <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f004 f965 	bl	8006afa <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	2224      	movs	r2, #36	@ 0x24
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fe49 	bl	80024de <ifx_i2c_prl_encrypt_msg>
 800284c:	4603      	mov	r3, r0
 800284e:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002850:	8afb      	ldrh	r3, [r7, #22]
 8002852:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002856:	d106      	bne.n	8002866 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2255      	movs	r2, #85	@ 0x55
 800285c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
                    break;
 8002864:	e0ae      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f004 f93b 	bl	8006afa <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2231      	movs	r2, #49	@ 0x31
 8002888:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3354      	adds	r3, #84	@ 0x54
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	2231      	movs	r2, #49	@ 0x31
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 ff88 	bl	80037b8 <ifx_i2c_tl_transceive>
 80028a8:	4603      	mov	r3, r0
 80028aa:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80028ac:	8afb      	ldrh	r3, [r7, #22]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2255      	movs	r2, #85	@ 0x55
 80028b6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
                    break;
 80028be:	e081      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2244      	movs	r2, #68	@ 0x44
 80028c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80028c8:	e07c      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d104      	bne.n	80028dc <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80028d8:	2b31      	cmp	r3, #49	@ 0x31
 80028da:	d006      	beq.n	80028ea <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2255      	movs	r2, #85	@ 0x55
 80028e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	613b      	str	r3, [r7, #16]
                    break;
 80028e8:	e06c      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 f924 	bl	8006b3c <optiga_common_get_uint32>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1d59      	adds	r1, r3, #5
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 800290c:	9203      	str	r2, [sp, #12]
 800290e:	2224      	movs	r2, #36	@ 0x24
 8002910:	9202      	str	r2, [sp, #8]
 8002912:	2210      	movs	r2, #16
 8002914:	9201      	str	r2, [sp, #4]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4603      	mov	r3, r0
 800291a:	2224      	movs	r2, #36	@ 0x24
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fe1f 	bl	8002560 <ifx_i2c_prl_decrypt_msg>
 8002922:	4603      	mov	r3, r0
 8002924:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002926:	8afb      	ldrh	r3, [r7, #22]
 8002928:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800292c:	d106      	bne.n	800293c <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2255      	movs	r2, #85	@ 0x55
 8002932:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002936:	2301      	movs	r3, #1
 8002938:	613b      	str	r3, [r7, #16]
                    break;
 800293a:	e043      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f004 f8d7 	bl	8006afa <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	33a8      	adds	r3, #168	@ 0xa8
 8002956:	2220      	movs	r2, #32
 8002958:	4619      	mov	r1, r3
 800295a:	f00e faba 	bl	8010ed2 <memcmp>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002964:	f240 1307 	movw	r3, #263	@ 0x107
 8002968:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2255      	movs	r2, #85	@ 0x55
 800296e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002972:	2301      	movs	r3, #1
 8002974:	613b      	str	r3, [r7, #16]
                    break;
 8002976:	e025      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2204      	movs	r2, #4
 8002984:	4618      	mov	r0, r3
 8002986:	f00e faa4 	bl	8010ed2 <memcmp>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002990:	f240 1307 	movw	r3, #263	@ 0x107
 8002994:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2255      	movs	r2, #85	@ 0x55
 800299a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	613b      	str	r3, [r7, #16]
                    break;
 80029a2:	e00f      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80029ac:	e00a      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80029ae:	f240 1307 	movw	r3, #263	@ 0x107
 80029b2:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	22ff      	movs	r2, #255	@ 0xff
 80029b8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
            break;
 80029c0:	e000      	b.n	80029c4 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80029c2:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f43f ae73 	beq.w	80026b2 <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80029cc:	8afb      	ldrh	r3, [r7, #22]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b094      	sub	sp, #80	@ 0x50
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80029e6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80029ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d003      	beq.n	8002a00 <ifx_i2c_prl_do_manage_context+0x2a>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	f000 80eb 	beq.w	8002bd4 <ifx_i2c_prl_do_manage_context+0x1fe>
 80029fe:	e1df      	b.n	8002dc0 <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da07      	bge.n	8002a1c <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002a1a:	e1ed      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002a22:	2b22      	cmp	r3, #34	@ 0x22
 8002a24:	d10c      	bne.n	8002a40 <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2260      	movs	r2, #96	@ 0x60
 8002a2a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8002a3e:	e0a6      	b.n	8002b8e <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002a46:	2b11      	cmp	r3, #17
 8002a48:	f040 8093 	bne.w	8002b72 <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a52:	885b      	ldrh	r3, [r3, #2]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d033      	beq.n	8002ac0 <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2234      	movs	r2, #52	@ 0x34
 8002a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a66:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002a68:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3354      	adds	r3, #84	@ 0x54
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f004 fe7e 	bl	8007770 <pal_os_datastore_read>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002a7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	f000 81b7 	beq.w	8002df2 <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002abe:	e19b      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002aee:	e183      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2268      	movs	r2, #104	@ 0x68
 8002b00:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f003 fff2 	bl	8006afa <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2205      	movs	r2, #5
 8002b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2205      	movs	r2, #5
 8002b28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002b3a:	885b      	ldrh	r3, [r3, #2]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d026      	beq.n	8002b8e <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	2234      	movs	r2, #52	@ 0x34
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00e f9d2 	bl	8010ef2 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002b54:	885b      	ldrh	r3, [r3, #2]
 8002b56:	f107 0110 	add.w	r1, r7, #16
 8002b5a:	2234      	movs	r2, #52	@ 0x34
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fd89 	bl	8007674 <pal_os_datastore_write>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002b68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10e      	bne.n	8002b8e <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 8002b70:	e142      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	22ff      	movs	r2, #255	@ 0xff
 8002b76:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002b88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002b8c:	e134      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3354      	adds	r3, #84	@ 0x54
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fe05 	bl	80037b8 <ifx_i2c_tl_transceive>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 8002bb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 811c 	bne.w	8002df6 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002bd2:	e111      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002be6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002bea:	2b6c      	cmp	r3, #108	@ 0x6c
 8002bec:	d133      	bne.n	8002c56 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002bf4:	2b11      	cmp	r3, #17
 8002bf6:	d12e      	bne.n	8002c56 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d12b      	bne.n	8002c56 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3308      	adds	r3, #8
 8002c08:	2228      	movs	r2, #40	@ 0x28
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f00e f9b7 	bl	8010f7e <memcpy>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c54:	e0ac      	b.n	8002db0 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002c56:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	f040 808b 	bne.w	8002d76 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002c66:	2b22      	cmp	r3, #34	@ 0x22
 8002c68:	f040 8085 	bne.w	8002d76 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 8081 	bne.w	8002d76 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f103 0008 	add.w	r0, r3, #8
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3358      	adds	r3, #88	@ 0x58
 8002c86:	2228      	movs	r2, #40	@ 0x28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f00e f978 	bl	8010f7e <memcpy>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002cc8:	885b      	ldrh	r3, [r3, #2]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02e      	beq.n	8002d2c <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2234      	movs	r2, #52	@ 0x34
 8002cd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002cdc:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002cde:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f004 fcc4 	bl	8007674 <pal_os_datastore_write>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002cf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d018      	beq.n	8002d2c <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22ff      	movs	r2, #255	@ 0xff
 8002cfe:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2207      	movs	r2, #7
 8002d06:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
                        break;
 8002d2a:	e065      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3358      	adds	r3, #88	@ 0x58
 8002d30:	2228      	movs	r2, #40	@ 0x28
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f00e f8dc 	bl	8010ef2 <memset>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	649a      	str	r2, [r3, #72]	@ 0x48
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d74:	e01c      	b.n	8002db0 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2234      	movs	r2, #52	@ 0x34
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f00e f8b8 	bl	8010ef2 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d88:	885b      	ldrh	r3, [r3, #2]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d94:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002d96:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002d98:	2234      	movs	r2, #52	@ 0x34
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fc6a 	bl	8007674 <pal_os_datastore_write>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8002da6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002daa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002dae:	e023      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002dbe:	e01b      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	22ff      	movs	r2, #255	@ 0xff
 8002dc4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002dde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002df0:	e002      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002df6:	bf00      	nop
    }
  return (return_status);
 8002df8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3748      	adds	r7, #72	@ 0x48
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b097      	sub	sp, #92	@ 0x5c
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	4613      	mov	r3, r2
 8002e16:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002e1e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002e22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <ifx_i2c_prl_event_handler+0x36>
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d029      	beq.n	8002e8e <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	@ 0xff
 8002e3e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d105      	bne.n	8002e58 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f240 1207 	movw	r2, #263	@ 0x107
 8002e52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e56:	e016      	b.n	8002e86 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10d      	bne.n	8002e7e <ifx_i2c_prl_event_handler+0x7a>
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e68:	d009      	beq.n	8002e7e <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e7c:	e003      	b.n	8002e86 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	897a      	ldrh	r2, [r7, #10]
 8002e82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2207      	movs	r2, #7
 8002e8a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002e94:	3b01      	subs	r3, #1
 8002e96:	2b07      	cmp	r3, #7
 8002e98:	f200 8445 	bhi.w	8003726 <ifx_i2c_prl_event_handler+0x922>
 8002e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <ifx_i2c_prl_event_handler+0xa0>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002ec5 	.word	0x08002ec5
 8002ea8:	08002f33 	.word	0x08002f33
 8002eac:	08003345 	.word	0x08003345
 8002eb0:	08003073 	.word	0x08003073
 8002eb4:	08002f77 	.word	0x08002f77
 8002eb8:	080035dd 	.word	0x080035dd
 8002ebc:	080036f7 	.word	0x080036f7
 8002ec0:	08002ee1 	.word	0x08002ee1
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	47a0      	blx	r4
                exit_machine = FALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002edc:	f000 bc34 	b.w	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002ee0:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff fd74 	bl	80029d6 <ifx_i2c_prl_do_manage_context>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002ef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8424 	beq.w	8003746 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	22ff      	movs	r2, #255	@ 0xff
 8002f02:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2207      	movs	r2, #7
 8002f0a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002f2e:	f000 bc0a 	b.w	8003746 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db09      	blt.n	8002f52 <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d011      	beq.n	8002f6c <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2211      	movs	r2, #17
 8002f5e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002f6a:	e3ed      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002f74:	e3e8      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	2228      	movs	r2, #40	@ 0x28
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f00d ffb7 	bl	8010ef2 <memset>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	2234      	movs	r2, #52	@ 0x34
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f00d ff9a 	bl	8010ef2 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002fc4:	885b      	ldrh	r3, [r3, #2]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02e      	beq.n	8003028 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002fd0:	885b      	ldrh	r3, [r3, #2]
 8002fd2:	f107 0110 	add.w	r1, r7, #16
 8002fd6:	2234      	movs	r2, #52	@ 0x34
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fb4b 	bl	8007674 <pal_os_datastore_write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01d      	beq.n	8003028 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	22ff      	movs	r2, #255	@ 0xff
 8002ff0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800300a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f240 1207 	movw	r2, #263	@ 0x107
 8003022:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8003026:	e38f      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fb37 	bl	800269e <ifx_i2c_prl_do_handshake>
 8003030:	4603      	mov	r3, r0
 8003032:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8003036:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800303a:	f240 1207 	movw	r2, #263	@ 0x107
 800303e:	4293      	cmp	r3, r2
 8003040:	d109      	bne.n	8003056 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003048:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2207      	movs	r2, #7
 8003050:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8003054:	e378      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800305c:	2b01      	cmp	r3, #1
 800305e:	d104      	bne.n	800306a <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2204      	movs	r2, #4
 8003064:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8003068:	e36e      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8003070:	e36a      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003078:	b25b      	sxtb	r3, r3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	b25b      	sxtb	r3, r3
 8003080:	f043 0320 	orr.w	r3, r3, #32
 8003084:	b25b      	sxtb	r3, r3
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d006      	beq.n	80030aa <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80030a2:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d122      	bne.n	80030f0 <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	3301      	adds	r3, #1
 80030b0:	f113 0f10 	cmn.w	r3, #16
 80030b4:	d914      	bls.n	80030e0 <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10f      	bne.n	80030e0 <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2205      	movs	r2, #5
 80030cc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2211      	movs	r2, #17
 80030da:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 80030de:	e333      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	320d      	adds	r2, #13
 80030ec:	b292      	uxth	r2, r2
 80030ee:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d007      	beq.n	800311a <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003110:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8003114:	2b03      	cmp	r3, #3
 8003116:	f040 80c2 	bne.w	800329e <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	3301      	adds	r3, #1
 8003120:	f113 0f10 	cmn.w	r3, #16
 8003124:	d914      	bls.n	8003150 <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10f      	bne.n	8003150 <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2205      	movs	r2, #5
 800313c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2211      	movs	r2, #17
 800314a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 800314e:	e2fb      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003156:	2b04      	cmp	r3, #4
 8003158:	d13f      	bne.n	80031da <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800316e:	3305      	adds	r3, #5
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8003176:	9203      	str	r2, [sp, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	9202      	str	r2, [sp, #8]
 800317c:	2200      	movs	r2, #0
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4623      	mov	r3, r4
 8003184:	4602      	mov	r2, r0
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff f9ea 	bl	8002560 <ifx_i2c_prl_decrypt_msg>
 800318c:	4603      	mov	r3, r0
 800318e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8003192:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003196:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800319a:	d118      	bne.n	80031ce <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2207      	movs	r2, #7
 80031a8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80031ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 80031cc:	e2bc      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 80031d8:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2205      	movs	r2, #5
 80031e8:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f003 fc7e 	bl	8006afa <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8003202:	1d59      	adds	r1, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4603      	mov	r3, r0
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff f960 	bl	80024de <ifx_i2c_prl_encrypt_msg>
 800321e:	4603      	mov	r3, r0
 8003220:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003224:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003228:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800322c:	d118      	bne.n	8003260 <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2207      	movs	r2, #7
 800323a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800324c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003258:	2301      	movs	r3, #1
 800325a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 800325e:	e273      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 800326a:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 800327c:	4413      	add	r3, r2
 800327e:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8003280:	3308      	adds	r3, #8
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4603      	mov	r3, r0
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa91 	bl	80037b8 <ifx_i2c_tl_transceive>
 8003296:	4603      	mov	r3, r0
 8003298:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800329c:	e021      	b.n	80032e2 <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	3304      	adds	r3, #4
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80032b2:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80032b8:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80032c6:	4413      	add	r3, r2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4603      	mov	r3, r0
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fa6e 	bl	80037b8 <ifx_i2c_tl_transceive>
 80032dc:	4603      	mov	r3, r0
 80032de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 80032e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80032e6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80032ea:	d11d      	bne.n	8003328 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	22ff      	movs	r2, #255	@ 0xff
 80032f0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2207      	movs	r2, #7
 80032f8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800330a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003322:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8003326:	e20f      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2203      	movs	r2, #3
 8003338:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003342:	e201      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	3301      	adds	r3, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fbf6 	bl	8006b3c <optiga_common_get_uint32>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8003356:	893b      	ldrh	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d118      	bne.n	800338e <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	22ff      	movs	r2, #255	@ 0xff
 8003360:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2207      	movs	r2, #7
 8003368:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800337a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 800338c:	e1dc      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d040      	beq.n	800341c <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b40      	cmp	r3, #64	@ 0x40
 80033a0:	d003      	beq.n	80033aa <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80033a6:	2b44      	cmp	r3, #68	@ 0x44
 80033a8:	d10c      	bne.n	80033c4 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d004      	beq.n	80033ba <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d004      	beq.n	80033c4 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d109      	bne.n	80033d8 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80033d6:	e018      	b.n	800340a <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10e      	bne.n	8003400 <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 80033e8:	2b11      	cmp	r3, #17
 80033ea:	d109      	bne.n	8003400 <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80033fe:	e004      	b.n	800340a <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003406:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2206      	movs	r2, #6
 800340e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	@ 0xff
 8003416:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 800341a:	e195      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003426:	429a      	cmp	r2, r3
 8003428:	d018      	beq.n	800345c <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	22ff      	movs	r2, #255	@ 0xff
 800342e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2207      	movs	r2, #7
 8003436:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003448:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 800345a:	e175      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d006      	beq.n	8003476 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8003470:	2b03      	cmp	r3, #3
 8003472:	f040 8082 	bne.w	800357a <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	2b0d      	cmp	r3, #13
 800347a:	d818      	bhi.n	80034ae <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	22ff      	movs	r2, #255	@ 0xff
 8003480:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2207      	movs	r2, #7
 8003488:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800349a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80034ac:	e14c      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	3303      	adds	r3, #3
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d805      	bhi.n	80034c8 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d818      	bhi.n	80034fa <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	@ 0xff
 80034cc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2207      	movs	r2, #7
 80034d4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80034e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80034f8:	e126      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	3a0d      	subs	r2, #13
 800350e:	b292      	uxth	r2, r2
 8003510:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800351c:	8818      	ldrh	r0, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003526:	3305      	adds	r3, #5
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 800352e:	9203      	str	r2, [sp, #12]
 8003530:	2224      	movs	r2, #36	@ 0x24
 8003532:	9202      	str	r2, [sp, #8]
 8003534:	2210      	movs	r2, #16
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4623      	mov	r3, r4
 800353c:	4602      	mov	r2, r0
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff f80e 	bl	8002560 <ifx_i2c_prl_decrypt_msg>
 8003544:	4603      	mov	r3, r0
 8003546:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 800354a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800354e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003552:	d108      	bne.n	8003566 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2206      	movs	r2, #6
 8003558:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2204      	movs	r2, #4
 8003560:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8003564:	e0f0      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003576:	bf00      	nop
            break;
 8003578:	e0e6      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d81c      	bhi.n	80035ba <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2207      	movs	r2, #7
 8003584:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	22ff      	movs	r2, #255	@ 0xff
 800358c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80035a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 80035a4:	e0d0      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80035ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80035b8:	e0c6      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	3a01      	subs	r2, #1
 80035c6:	b292      	uxth	r2, r2
 80035c8:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80035da:	e0b5      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b44      	cmp	r3, #68	@ 0x44
 80035e2:	d166      	bne.n	80036b2 <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d104      	bne.n	80035f4 <ifx_i2c_prl_event_handler+0x7f0>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d918      	bls.n	8003626 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	22ff      	movs	r2, #255	@ 0xff
 80035f8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2207      	movs	r2, #7
 8003600:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003624:	e090      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d004      	beq.n	800363a <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003636:	2b03      	cmp	r3, #3
 8003638:	d136      	bne.n	80036a8 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003640:	3301      	adds	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003658:	2b03      	cmp	r3, #3
 800365a:	d91c      	bls.n	8003696 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	22ff      	movs	r2, #255	@ 0xff
 8003660:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2207      	movs	r2, #7
 8003668:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800367a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8003694:	e058      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2204      	movs	r2, #4
 800369a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2204      	movs	r2, #4
 80036a2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 80036a6:	e04f      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2207      	movs	r2, #7
 80036ac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80036b0:	e04a      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d117      	bne.n	80036ec <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	22ff      	movs	r2, #255	@ 0xff
 80036c0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2207      	movs	r2, #7
 80036c8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80036da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2207      	movs	r2, #7
 80036f0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80036f4:	e028      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80036fc:	2bff      	cmp	r3, #255	@ 0xff
 80036fe:	d00d      	beq.n	800371c <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7fe ff75 	bl	80025f0 <ifx_i2c_prl_send_alert>
 8003706:	4603      	mov	r3, r0
 8003708:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	22ff      	movs	r2, #255	@ 0xff
 8003710:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 800371a:	e015      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003724:	e010      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003732:	2300      	movs	r3, #0
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	47a0      	blx	r4
                exit_machine = FALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003744:	e000      	b.n	8003748 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003746:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003748:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800374c:	2b01      	cmp	r3, #1
 800374e:	f43f ab9e 	beq.w	8002e8e <ifx_i2c_prl_event_handler+0x8a>
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	374c      	adds	r7, #76	@ 0x4c
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}

0800375c <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800376e:	4911      	ldr	r1, [pc, #68]	@ (80037b4 <ifx_i2c_tl_init+0x58>)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd fbb5 	bl	8000ee0 <ifx_i2c_dl_init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 800377c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003780:	e014      	b.n	80037ac <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80037a0:	3b06      	subs	r3, #6
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	08003a9d 	.word	0x08003a9d

080037b8 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80037c8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80037cc:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d041      	beq.n	8003858 <ifx_i2c_tl_transceive+0xa0>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d03e      	beq.n	8003858 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d138      	bne.n	8003856 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 80037ec:	f004 f93b 	bl	8007a66 <pal_os_timer_get_time_in_milliseconds>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a3a      	ldr	r2, [r7, #32]
 800381c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003846:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f866 	bl	800391c <ifx_i2c_tl_send_next_fragment>
 8003850:	4603      	mov	r3, r0
 8003852:	82fb      	strh	r3, [r7, #22]
 8003854:	e000      	b.n	8003858 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003856:	bf00      	nop
    } while (FALSE);
    return (status);
 8003858:	8afb      	ldrh	r3, [r7, #22]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003870:	2b01      	cmp	r3, #1
 8003872:	d002      	beq.n	800387a <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003874:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003878:	e00f      	b.n	800389a <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f842 	bl	800391c <ifx_i2c_tl_send_next_fragment>
 8003898:	4603      	mov	r3, r0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80038b0:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <ifx_i2c_tl_calculate_pctr+0x38>
 80038cc:	897a      	ldrh	r2, [r7, #10]
 80038ce:	89bb      	ldrh	r3, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d802      	bhi.n	80038da <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e019      	b.n	800390e <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <ifx_i2c_tl_calculate_pctr+0x50>
 80038e4:	897a      	ldrh	r2, [r7, #10]
 80038e6:	89bb      	ldrh	r3, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d902      	bls.n	80038f2 <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e00d      	b.n	800390e <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <ifx_i2c_tl_calculate_pctr+0x68>
 80038fc:	897a      	ldrh	r2, [r7, #10]
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d902      	bls.n	800390a <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003904:	2302      	movs	r3, #2
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e001      	b.n	800390e <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 800390a:	2304      	movs	r3, #4
 800390c:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 800392a:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ffb8 	bl	80038a2 <ifx_i2c_tl_calculate_pctr>
 8003932:	4603      	mov	r3, r0
 8003934:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	429a      	cmp	r2, r3
 800394a:	da07      	bge.n	800395c <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 800395c:	7b7b      	ldrb	r3, [r7, #13]
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 8003970:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800397e:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003980:	89fa      	ldrh	r2, [r7, #14]
 8003982:	4619      	mov	r1, r3
 8003984:	f00d fafb 	bl	8010f7e <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 800398e:	89fb      	ldrh	r3, [r7, #14]
 8003990:	4413      	add	r3, r2
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	3301      	adds	r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fada 	bl	8000f5c <ifx_i2c_dl_send_frame>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2207      	movs	r2, #7
 80039c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fac2 	bl	8000f5c <ifx_i2c_dl_send_frame>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	460a      	mov	r2, r1
 80039ee:	71fb      	strb	r3, [r7, #7]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80039f4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80039f8:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b07      	cmp	r3, #7
 80039fe:	d00b      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d005      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d002      	beq.n	8003a18 <ifx_i2c_tl_check_chaining_error+0x34>
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d110      	bne.n	8003a3a <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a48 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003a1c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003a20:	79ba      	ldrb	r2, [r7, #6]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d007      	beq.n	8003a36 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4a07      	ldr	r2, [pc, #28]	@ (8003a48 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003a30:	79ba      	ldrb	r2, [r7, #6]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d101      	bne.n	8003a3a <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003a36:	2300      	movs	r3, #0
 8003a38:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	08013564 	.word	0x08013564

08003a4c <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f023 0307 	bic.w	r3, r3, #7
 8003a62:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <presence_bit_check+0x42>
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8003a82:	7b7b      	ldrb	r3, [r7, #13]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d002      	beq.n	8003a8e <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 8003a88:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003a8c:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 8003a8e:	89fb      	ldrh	r3, [r7, #14]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	817b      	strh	r3, [r7, #10]
 8003aac:	4613      	mov	r3, r2
 8003aae:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2206      	movs	r2, #6
 8003ade:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003ae8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	4619      	mov	r1, r3
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ffa8 	bl	8003a4c <presence_bit_check>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2206      	movs	r2, #6
 8003b06:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003b10:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003b22:	3b01      	subs	r3, #1
 8003b24:	2b07      	cmp	r3, #7
 8003b26:	f200 81d0 	bhi.w	8003eca <ifx_i2c_dl_event_handler+0x42e>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <ifx_i2c_dl_event_handler+0x94>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b51 	.word	0x08003b51
 8003b34:	08003b67 	.word	0x08003b67
 8003b38:	08003ecb 	.word	0x08003ecb
 8003b3c:	08003bfd 	.word	0x08003bfd
 8003b40:	08003d43 	.word	0x08003d43
 8003b44:	08003e99 	.word	0x08003e99
 8003b48:	08003e57 	.word	0x08003e57
 8003b4c:	08003dfb 	.word	0x08003dfb
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	47a0      	blx	r4
            }
            break;
 8003b64:	e1c3      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d040      	beq.n	8003bf2 <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d215      	bcs.n	8003bac <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8003b80:	7dbb      	ldrb	r3, [r7, #22]
 8003b82:	2b07      	cmp	r3, #7
 8003b84:	d104      	bne.n	8003b90 <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b8e:	e1ae      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2206      	movs	r2, #6
 8003b9a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b9e:	e1a6      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff feb9 	bl	800391c <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003baa:	e19f      	b.n	8003eec <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 818a 	bne.w	8003eec <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7fd f9ef 	bl	8000fbc <ifx_i2c_dl_receive_frame>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2206      	movs	r2, #6
 8003be8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	757b      	strb	r3, [r7, #21]
            break;
 8003bf0:	e17c      	b.n	8003eec <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2206      	movs	r2, #6
 8003bf6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003bfa:	e178      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003bfc:	897b      	ldrh	r3, [r7, #10]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8098 	beq.w	8003d38 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2206      	movs	r2, #6
 8003c12:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c16:	e16a      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c22:	d114      	bne.n	8003c4e <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003c24:	7dbb      	ldrb	r3, [r7, #22]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d005      	beq.n	8003c36 <ifx_i2c_dl_event_handler+0x19a>
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7fd f9c6 	bl	8000fbc <ifx_i2c_dl_receive_frame>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2206      	movs	r2, #6
 8003c3a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003c3e:	e156      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2204      	movs	r2, #4
 8003c44:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	757b      	strb	r3, [r7, #21]
                        break;
 8003c4c:	e14f      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003c54:	7dbb      	ldrb	r3, [r7, #22]
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fec3 	bl	80039e4 <ifx_i2c_tl_check_chaining_error>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2208      	movs	r2, #8
 8003c68:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c6c:	e13f      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003c6e:	7dbb      	ldrb	r3, [r7, #22]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2206      	movs	r2, #6
 8003c86:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c8a:	e130      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003c8c:	7dbb      	ldrb	r3, [r7, #22]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <ifx_i2c_dl_event_handler+0x1fc>
 8003c92:	7dbb      	ldrb	r3, [r7, #22]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d14a      	bne.n	8003d2e <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	dd09      	ble.n	8003cc6 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cb8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2206      	movs	r2, #6
 8003cc0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003cc4:	e113      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003cd6:	1898      	adds	r0, r3, r2
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f00d f94c 	bl	8010f7e <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003cec:	893b      	ldrh	r3, [r7, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003d10:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	2100      	movs	r1, #0
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003d2c:	e0df      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2205      	movs	r2, #5
 8003d32:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003d36:	e0da      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d40:	e0d5      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003d42:	893a      	ldrh	r2, [r7, #8]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d004      	beq.n	8003d5a <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2207      	movs	r2, #7
 8003d54:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d58:	e0c9      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003d60:	461a      	mov	r2, r3
 8003d62:	893b      	ldrh	r3, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	3b01      	subs	r3, #1
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	dd09      	ble.n	8003d88 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d7a:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2204      	movs	r2, #4
 8003d82:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d86:	e0b2      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d104      	bne.n	8003d98 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2206      	movs	r2, #6
 8003d92:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d96:	e0aa      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003da4:	1898      	adds	r0, r3, r2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	461a      	mov	r2, r3
 8003db0:	f00d f8e5 	bl	8010f7e <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7fd f8eb 	bl	8000fbc <ifx_i2c_dl_receive_frame>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2206      	movs	r2, #6
 8003df0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003df8:	e079      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d909      	bls.n	8003e14 <ifx_i2c_dl_event_handler+0x378>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d104      	bne.n	8003e14 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003e12:	e06c      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	b2d1      	uxtb	r1, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d111      	bne.n	8003e4c <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff fd16 	bl	8003862 <ifx_i2c_tl_resend_packets>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2206      	movs	r2, #6
 8003e40:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003e44:	e053      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	757b      	strb	r3, [r7, #21]
            break;
 8003e4a:	e050      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2206      	movs	r2, #6
 8003e50:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003e54:	e04b      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	b2d1      	uxtb	r1, r2
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff fd9d 	bl	80039b2 <ifx_i2c_tl_send_chaining_error>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2206      	movs	r2, #6
 8003e82:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003e86:	e032      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	757b      	strb	r3, [r7, #21]
            break;
 8003e8c:	e02f      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2206      	movs	r2, #6
 8003e92:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003e96:	e02a      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <ifx_i2c_dl_event_handler+0x410>
 8003ea6:	893b      	ldrh	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	47a0      	blx	r4
            }
            break;
 8003ec8:	e011      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	47a0      	blx	r4
            }
            break;
 8003eea:	e000      	b.n	8003eee <ifx_i2c_dl_event_handler+0x452>
            break;
 8003eec:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003eee:	7d7b      	ldrb	r3, [r7, #21]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f43f ade3 	beq.w	8003abc <ifx_i2c_dl_event_handler+0x20>
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd90      	pop	{r4, r7, pc}

08003f00 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003f08:	1d39      	adds	r1, r7, #4
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4803      	ldr	r0, [pc, #12]	@ (8003f20 <__io_putchar+0x20>)
 8003f12:	f00b fd4d 	bl	800f9b0 <HAL_UART_Transmit>

  return ch;
 8003f16:	687b      	ldr	r3, [r7, #4]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000680 	.word	0x20000680

08003f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f2a:	f006 fcfd 	bl	800a928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f2e:	f000 f86f 	bl	8004010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f32:	f000 f99f 	bl	8004274 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f36:	f000 f973 	bl	8004220 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003f3a:	f000 f8f5 	bl	8004128 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003f3e:	f000 f921 	bl	8004184 <MX_TIM2_Init>
  MX_CRC_Init();
 8003f42:	f000 f8dd 	bl	8004100 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003f46:	f000 f8cf 	bl	80040e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003f4a:	4828      	ldr	r0, [pc, #160]	@ (8003fec <main+0xc8>)
 8003f4c:	f00b f8fc 	bl	800f148 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f50:	2200      	movs	r2, #0
 8003f52:	2100      	movs	r1, #0
 8003f54:	201c      	movs	r0, #28
 8003f56:	f006 fe58 	bl	800ac0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f5a:	201c      	movs	r0, #28
 8003f5c:	f006 fe71 	bl	800ac42 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8003f60:	2201      	movs	r2, #1
 8003f62:	2120      	movs	r1, #32
 8003f64:	4822      	ldr	r0, [pc, #136]	@ (8003ff0 <main+0xcc>)
 8003f66:	f007 fdbb 	bl	800bae0 <HAL_GPIO_WritePin>

   // optiga_main_logic();
    /* Check the GPIO for 3 seconds */
  	//  optiga_main_logic();
      GPIO_PinState OTA_Pin_state;
      uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8003f6a:	f006 fd43 	bl	800a9f4 <HAL_GetTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8003f74:	60fb      	str	r3, [r7, #12]

      printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8003f76:	481f      	ldr	r0, [pc, #124]	@ (8003ff4 <main+0xd0>)
 8003f78:	f00c ff94 	bl	8010ea4 <puts>
      do
      {
        OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8003f7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f80:	481d      	ldr	r0, [pc, #116]	@ (8003ff8 <main+0xd4>)
 8003f82:	f007 fd95 	bl	800bab0 <HAL_GPIO_ReadPin>
 8003f86:	4603      	mov	r3, r0
 8003f88:	72fb      	strb	r3, [r7, #11]
        uint32_t current_tick = HAL_GetTick();
 8003f8a:	f006 fd33 	bl	800a9f4 <HAL_GetTick>
 8003f8e:	6078      	str	r0, [r7, #4]

        /* Check the button is pressed or not for 3seconds */
        if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d104      	bne.n	8003fa0 <main+0x7c>
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d800      	bhi.n	8003fa0 <main+0x7c>
      {
 8003f9e:	e7ed      	b.n	8003f7c <main+0x58>
        {
          /* Either timeout or Button is pressed */
          break;
        }
      }while( 1 );
      if( OTA_Pin_state == GPIO_PIN_RESET ) {
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <main+0x8c>
    	  /* Initialise Flash */
    	 	  FLASH_IF_init();
 8003fa6:	f7fc fcb1 	bl	800090c <FLASH_IF_init>
    	 	  /* Display main menu */
    	 	  main_menu ();
 8003faa:	f000 fabf 	bl	800452c <main_menu>
 8003fae:	e01a      	b.n	8003fe6 <main+0xc2>
      }
      else {
    	  /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    	 	  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8003fb0:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <main+0xd8>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <main+0xdc>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fbc:	d113      	bne.n	8003fe6 <main+0xc2>
    	 	  {
    	 		  /* Jump to user application */
    	 		  jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8003fbe:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <main+0xe0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a11      	ldr	r2, [pc, #68]	@ (8004008 <main+0xe4>)
 8003fc4:	6013      	str	r3, [r2, #0]
    	 		  jumpToApplication = (pFunction) jumpAddress;
 8003fc6:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <main+0xe4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <main+0xe8>)
 8003fce:	601a      	str	r2, [r3, #0]
    	 		  /* Initialize user application's Stack Pointer */
    	 		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <main+0xd8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f383 8808 	msr	MSP, r3
}
 8003fdc:	bf00      	nop
    	 		  jumpToApplication();
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <main+0xe8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <main+0xc2>
 8003fea:	bf00      	nop
 8003fec:	20000638 	.word	0x20000638
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	08011f50 	.word	0x08011f50
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	08020000 	.word	0x08020000
 8004000:	2ffe0000 	.word	0x2ffe0000
 8004004:	08020004 	.word	0x08020004
 8004008:	200006cc 	.word	0x200006cc
 800400c:	200006c8 	.word	0x200006c8

08004010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b094      	sub	sp, #80	@ 0x50
 8004014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004016:	f107 0320 	add.w	r3, r7, #32
 800401a:	2230      	movs	r2, #48	@ 0x30
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f00c ff67 	bl	8010ef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004034:	2300      	movs	r3, #0
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <SystemClock_Config+0xd0>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	4a28      	ldr	r2, [pc, #160]	@ (80040e0 <SystemClock_Config+0xd0>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004042:	6413      	str	r3, [r2, #64]	@ 0x40
 8004044:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <SystemClock_Config+0xd0>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004050:	2300      	movs	r3, #0
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	4b23      	ldr	r3, [pc, #140]	@ (80040e4 <SystemClock_Config+0xd4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800405c:	4a21      	ldr	r2, [pc, #132]	@ (80040e4 <SystemClock_Config+0xd4>)
 800405e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <SystemClock_Config+0xd4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004070:	2302      	movs	r3, #2
 8004072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004074:	2301      	movs	r3, #1
 8004076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004078:	2310      	movs	r3, #16
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800407c:	2302      	movs	r3, #2
 800407e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004080:	2300      	movs	r3, #0
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004084:	2310      	movs	r3, #16
 8004086:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004088:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800408e:	2304      	movs	r3, #4
 8004090:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004092:	2307      	movs	r3, #7
 8004094:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	4618      	mov	r0, r3
 800409c:	f00a fb6c 	bl	800e778 <HAL_RCC_OscConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80040a6:	f000 f95d 	bl	8004364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040aa:	230f      	movs	r3, #15
 80040ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ae:	2302      	movs	r3, #2
 80040b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040c0:	f107 030c 	add.w	r3, r7, #12
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f00a fdce 	bl	800ec68 <HAL_RCC_ClockConfig>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80040d2:	f000 f947 	bl	8004364 <Error_Handler>
  }
}
 80040d6:	bf00      	nop
 80040d8:	3750      	adds	r7, #80	@ 0x50
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40007000 	.word	0x40007000

080040e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	201f      	movs	r0, #31
 80040f2:	f006 fd8a 	bl	800ac0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040f6:	201f      	movs	r0, #31
 80040f8:	f006 fda3 	bl	800ac42 <HAL_NVIC_EnableIRQ>
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}

08004100 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <MX_CRC_Init+0x20>)
 8004106:	4a07      	ldr	r2, [pc, #28]	@ (8004124 <MX_CRC_Init+0x24>)
 8004108:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800410a:	4805      	ldr	r0, [pc, #20]	@ (8004120 <MX_CRC_Init+0x20>)
 800410c:	f006 fdb3 	bl	800ac76 <HAL_CRC_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004116:	f000 f925 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200005dc 	.word	0x200005dc
 8004124:	40023000 	.word	0x40023000

08004128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <MX_I2C1_Init+0x50>)
 800412e:	4a13      	ldr	r2, [pc, #76]	@ (800417c <MX_I2C1_Init+0x54>)
 8004130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004134:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <MX_I2C1_Init+0x58>)
 8004136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004138:	4b0f      	ldr	r3, [pc, #60]	@ (8004178 <MX_I2C1_Init+0x50>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800413e:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800414a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <MX_I2C1_Init+0x50>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004152:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004158:	4b07      	ldr	r3, [pc, #28]	@ (8004178 <MX_I2C1_Init+0x50>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004160:	2200      	movs	r2, #0
 8004162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004164:	4804      	ldr	r0, [pc, #16]	@ (8004178 <MX_I2C1_Init+0x50>)
 8004166:	f007 fcf9 	bl	800bb5c <HAL_I2C_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004170:	f000 f8f8 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200005e4 	.word	0x200005e4
 800417c:	40005400 	.word	0x40005400
 8004180:	00061a80 	.word	0x00061a80

08004184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004198:	463b      	mov	r3, r7
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	@ (800421c <MX_TIM2_Init+0x98>)
 80041a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <MX_TIM2_Init+0x98>)
 80041aa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80041ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <MX_TIM2_Init+0x98>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <MX_TIM2_Init+0x98>)
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041be:	4b17      	ldr	r3, [pc, #92]	@ (800421c <MX_TIM2_Init+0x98>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <MX_TIM2_Init+0x98>)
 80041c6:	2280      	movs	r2, #128	@ 0x80
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041ca:	4814      	ldr	r0, [pc, #80]	@ (800421c <MX_TIM2_Init+0x98>)
 80041cc:	f00a ff6c 	bl	800f0a8 <HAL_TIM_Base_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80041d6:	f000 f8c5 	bl	8004364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041e0:	f107 0308 	add.w	r3, r7, #8
 80041e4:	4619      	mov	r1, r3
 80041e6:	480d      	ldr	r0, [pc, #52]	@ (800421c <MX_TIM2_Init+0x98>)
 80041e8:	f00b f900 	bl	800f3ec <HAL_TIM_ConfigClockSource>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80041f2:	f000 f8b7 	bl	8004364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041fe:	463b      	mov	r3, r7
 8004200:	4619      	mov	r1, r3
 8004202:	4806      	ldr	r0, [pc, #24]	@ (800421c <MX_TIM2_Init+0x98>)
 8004204:	f00b fb02 	bl	800f80c <HAL_TIMEx_MasterConfigSynchronization>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800420e:	f000 f8a9 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000638 	.word	0x20000638

08004220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004224:	4b11      	ldr	r3, [pc, #68]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004226:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <MX_USART2_UART_Init+0x50>)
 8004228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 800422c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004232:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 800423a:	2200      	movs	r2, #0
 800423c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004244:	4b09      	ldr	r3, [pc, #36]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004246:	220c      	movs	r2, #12
 8004248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004256:	4805      	ldr	r0, [pc, #20]	@ (800426c <MX_USART2_UART_Init+0x4c>)
 8004258:	f00b fb5a 	bl	800f910 <HAL_UART_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004262:	f000 f87f 	bl	8004364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000680 	.word	0x20000680
 8004270:	40004400 	.word	0x40004400

08004274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	@ 0x28
 8004278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	4b32      	ldr	r3, [pc, #200]	@ (8004358 <MX_GPIO_Init+0xe4>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	4a31      	ldr	r2, [pc, #196]	@ (8004358 <MX_GPIO_Init+0xe4>)
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	6313      	str	r3, [r2, #48]	@ 0x30
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <MX_GPIO_Init+0xe4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b6:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042d2:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <MX_GPIO_Init+0xe4>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80042fa:	2200      	movs	r2, #0
 80042fc:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004300:	4816      	ldr	r0, [pc, #88]	@ (800435c <MX_GPIO_Init+0xe8>)
 8004302:	f007 fbed 	bl	800bae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800430a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800430c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004316:	f107 0314 	add.w	r3, r7, #20
 800431a:	4619      	mov	r1, r3
 800431c:	4810      	ldr	r0, [pc, #64]	@ (8004360 <MX_GPIO_Init+0xec>)
 800431e:	f007 fa43 	bl	800b7a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8004322:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004328:	2301      	movs	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004330:	2300      	movs	r3, #0
 8004332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004334:	f107 0314 	add.w	r3, r7, #20
 8004338:	4619      	mov	r1, r3
 800433a:	4808      	ldr	r0, [pc, #32]	@ (800435c <MX_GPIO_Init+0xe8>)
 800433c:	f007 fa34 	bl	800b7a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004340:	2200      	movs	r2, #0
 8004342:	2100      	movs	r1, #0
 8004344:	2028      	movs	r0, #40	@ 0x28
 8004346:	f006 fc60 	bl	800ac0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800434a:	2028      	movs	r0, #40	@ 0x28
 800434c:	f006 fc79 	bl	800ac42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004350:	bf00      	nop
 8004352:	3728      	adds	r7, #40	@ 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	40020000 	.word	0x40020000
 8004360:	40020800 	.word	0x40020800

08004364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004368:	b672      	cpsid	i
}
 800436a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <Error_Handler+0x8>

08004370 <serial_download>:
/**
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void serial_download(void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
	uint8_t number[11] = {0};
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f8c3 2003 	str.w	r2, [r3, #3]
	uint32_t size = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
	COM_StatusTypeDef result = COM_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
	serial_put_string((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 800438e:	483b      	ldr	r0, [pc, #236]	@ (800447c <serial_download+0x10c>)
 8004390:	f7fc fa38 	bl	8000804 <serial_put_string>

	if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 8004394:	483a      	ldr	r0, [pc, #232]	@ (8004480 <serial_download+0x110>)
 8004396:	f7fc fac5 	bl	8000924 <FLASH_IF_erase>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <serial_download+0x36>
		serial_put_string((uint8_t*)"Error occured while erasing the flash");
 80043a0:	4838      	ldr	r0, [pc, #224]	@ (8004484 <serial_download+0x114>)
 80043a2:	f7fc fa2f 	bl	8000804 <serial_put_string>
	}

	result = ymodem_receive(&size);
 80043a6:	463b      	mov	r3, r7
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 ff49 	bl	800a240 <ymodem_receive>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75fb      	strb	r3, [r7, #23]

	if (result == COM_OK) {
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d119      	bne.n	80043ec <serial_download+0x7c>
			serial_put_string((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 80043b8:	4833      	ldr	r0, [pc, #204]	@ (8004488 <serial_download+0x118>)
 80043ba:	f7fc fa23 	bl	8000804 <serial_put_string>
			serial_put_string((uint8_t *)aFileName);
 80043be:	4833      	ldr	r0, [pc, #204]	@ (800448c <serial_download+0x11c>)
 80043c0:	f7fc fa20 	bl	8000804 <serial_put_string>
		    int_to_str(number, size);
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f8d8 	bl	8000580 <int_to_str>
		    serial_put_string((uint8_t *)"\n\r Size: ");
 80043d0:	482f      	ldr	r0, [pc, #188]	@ (8004490 <serial_download+0x120>)
 80043d2:	f7fc fa17 	bl	8000804 <serial_put_string>
		    serial_put_string((uint8_t *)number);
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc fa13 	bl	8000804 <serial_put_string>
		    serial_put_string((uint8_t *)" Bytes\r\n");
 80043de:	482d      	ldr	r0, [pc, #180]	@ (8004494 <serial_download+0x124>)
 80043e0:	f7fc fa10 	bl	8000804 <serial_put_string>
		    serial_put_string((uint8_t *)"-------------------\r\n");
 80043e4:	482c      	ldr	r0, [pc, #176]	@ (8004498 <serial_download+0x128>)
 80043e6:	f7fc fa0d 	bl	8000804 <serial_put_string>
 80043ea:	e017      	b.n	800441c <serial_download+0xac>
	}
	else if (result == COM_ABORT) {
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d103      	bne.n	80043fa <serial_download+0x8a>
		serial_put_string((uint8_t*)"\r\n\nAborted by User.\n\r");
 80043f2:	482a      	ldr	r0, [pc, #168]	@ (800449c <serial_download+0x12c>)
 80043f4:	f7fc fa06 	bl	8000804 <serial_put_string>
 80043f8:	e010      	b.n	800441c <serial_download+0xac>
	}
	else if (result == COM_LIMIT) {
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d103      	bne.n	8004408 <serial_download+0x98>
		serial_put_string((uint8_t*)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8004400:	4827      	ldr	r0, [pc, #156]	@ (80044a0 <serial_download+0x130>)
 8004402:	f7fc f9ff 	bl	8000804 <serial_put_string>
 8004406:	e009      	b.n	800441c <serial_download+0xac>
	}
	else if (result == COM_DATA) {
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d103      	bne.n	8004416 <serial_download+0xa6>
		serial_put_string((uint8_t *)"\n\n\rVerification failed!\n\r");
 800440e:	4825      	ldr	r0, [pc, #148]	@ (80044a4 <serial_download+0x134>)
 8004410:	f7fc f9f8 	bl	8000804 <serial_put_string>
 8004414:	e002      	b.n	800441c <serial_download+0xac>
	}
	else
	  {
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8004416:	4824      	ldr	r0, [pc, #144]	@ (80044a8 <serial_download+0x138>)
 8004418:	f7fc f9f4 	bl	8000804 <serial_put_string>
	  }
	  optiga_init();
 800441c:	f000 f9b2 	bl	8004784 <optiga_init>

	if ( verify_firmware_integrity(size) != 0) {
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fb66 	bl	8004af4 <verify_firmware_integrity>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01b      	beq.n	8004466 <serial_download+0xf6>
		optiga_deinit();
 800442e:	f000 fb35 	bl	8004a9c <optiga_deinit>
		serial_put_string("Firmware Authenticated!\r\n");
 8004432:	481e      	ldr	r0, [pc, #120]	@ (80044ac <serial_download+0x13c>)
 8004434:	f7fc f9e6 	bl	8000804 <serial_put_string>
		serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 8004438:	481d      	ldr	r0, [pc, #116]	@ (80044b0 <serial_download+0x140>)
 800443a:	f7fc f9e3 	bl	8000804 <serial_put_string>
		      /* execute the new program */
		      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <serial_download+0x144>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1d      	ldr	r2, [pc, #116]	@ (80044b8 <serial_download+0x148>)
 8004444:	6013      	str	r3, [r2, #0]
		      /* Jump to user application */
		      jumpToApplication = (pFunction)jumpAddress;
 8004446:	4b1c      	ldr	r3, [pc, #112]	@ (80044b8 <serial_download+0x148>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <serial_download+0x14c>)
 800444e:	601a      	str	r2, [r3, #0]
		      /* Initialize user application's Stack Pointer */
		      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <serial_download+0x110>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f383 8808 	msr	MSP, r3
}
 800445c:	bf00      	nop
		      jumpToApplication();
 800445e:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <serial_download+0x14c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4798      	blx	r3
	else {
		optiga_deinit();
		serial_put_string("Firmware Not Authenticated!\r\nHALT!!!\r\n");
		while (1);
	}
}
 8004464:	e006      	b.n	8004474 <serial_download+0x104>
		optiga_deinit();
 8004466:	f000 fb19 	bl	8004a9c <optiga_deinit>
		serial_put_string("Firmware Not Authenticated!\r\nHALT!!!\r\n");
 800446a:	4815      	ldr	r0, [pc, #84]	@ (80044c0 <serial_download+0x150>)
 800446c:	f7fc f9ca 	bl	8000804 <serial_put_string>
		while (1);
 8004470:	bf00      	nop
 8004472:	e7fd      	b.n	8004470 <serial_download+0x100>
}
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	08011f88 	.word	0x08011f88
 8004480:	08020000 	.word	0x08020000
 8004484:	08011fc4 	.word	0x08011fc4
 8004488:	08011fec 	.word	0x08011fec
 800448c:	200006d4 	.word	0x200006d4
 8004490:	08012040 	.word	0x08012040
 8004494:	0801204c 	.word	0x0801204c
 8004498:	08012058 	.word	0x08012058
 800449c:	08012070 	.word	0x08012070
 80044a0:	08012088 	.word	0x08012088
 80044a4:	080120c8 	.word	0x080120c8
 80044a8:	080120e4 	.word	0x080120e4
 80044ac:	08012104 	.word	0x08012104
 80044b0:	08012120 	.word	0x08012120
 80044b4:	08020004 	.word	0x08020004
 80044b8:	200006cc 	.word	0x200006cc
 80044bc:	200006c8 	.word	0x200006c8
 80044c0:	08012144 	.word	0x08012144

080044c4 <serial_upload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */

void serial_upload(void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
	 uint8_t status = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	71fb      	strb	r3, [r7, #7]
	 serial_put_string((uint8_t *)"\n\n\rSelect Receive File\n\r");
 80044ce:	4811      	ldr	r0, [pc, #68]	@ (8004514 <serial_upload+0x50>)
 80044d0:	f7fc f998 	bl	8000804 <serial_put_string>
	 HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 80044d4:	1df9      	adds	r1, r7, #7
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044da:	2201      	movs	r2, #1
 80044dc:	480e      	ldr	r0, [pc, #56]	@ (8004518 <serial_upload+0x54>)
 80044de:	f00b faf2 	bl	800fac6 <HAL_UART_Receive>
	 if ( status == CRC16)
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b43      	cmp	r3, #67	@ 0x43
 80044e6:	d111      	bne.n	800450c <serial_upload+0x48>
	   {
	     /* Transmit the flash image through ymodem protocol */
	     status = ymodem_transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 80044e8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80044ec:	490b      	ldr	r1, [pc, #44]	@ (800451c <serial_upload+0x58>)
 80044ee:	480c      	ldr	r0, [pc, #48]	@ (8004520 <serial_upload+0x5c>)
 80044f0:	f006 f856 	bl	800a5a0 <ymodem_transmit>
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]

	     if (status != 0)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <serial_upload+0x42>
	     {
	       serial_put_string((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 80044fe:	4809      	ldr	r0, [pc, #36]	@ (8004524 <serial_upload+0x60>)
 8004500:	f7fc f980 	bl	8000804 <serial_put_string>
	     else
	     {
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
	     }
	   }
}
 8004504:	e002      	b.n	800450c <serial_upload+0x48>
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8004506:	4808      	ldr	r0, [pc, #32]	@ (8004528 <serial_upload+0x64>)
 8004508:	f7fc f97c 	bl	8000804 <serial_put_string>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0801216c 	.word	0x0801216c
 8004518:	20000680 	.word	0x20000680
 800451c:	08012188 	.word	0x08012188
 8004520:	08020000 	.word	0x08020000
 8004524:	080121a0 	.word	0x080121a0
 8004528:	080121cc 	.word	0x080121cc

0800452c <main_menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */

void main_menu(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
	 uint8_t key = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	70fb      	strb	r3, [r7, #3]

	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8004536:	484b      	ldr	r0, [pc, #300]	@ (8004664 <main_menu+0x138>)
 8004538:	f7fc f964 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 800453c:	484a      	ldr	r0, [pc, #296]	@ (8004668 <main_menu+0x13c>)
 800453e:	f7fc f961 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n= Secure Booting and Firmware Update with hardware root of trust(1.1)=");
 8004542:	484a      	ldr	r0, [pc, #296]	@ (800466c <main_menu+0x140>)
 8004544:	f7fc f95e 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 8004548:	4847      	ldr	r0, [pc, #284]	@ (8004668 <main_menu+0x13c>)
 800454a:	f7fc f95b 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                   By STM Application Team          =");
 800454e:	4848      	ldr	r0, [pc, #288]	@ (8004670 <main_menu+0x144>)
 8004550:	f7fc f958 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8004554:	4843      	ldr	r0, [pc, #268]	@ (8004664 <main_menu+0x138>)
 8004556:	f7fc f955 	bl	8000804 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n\r\n");
 800455a:	4846      	ldr	r0, [pc, #280]	@ (8004674 <main_menu+0x148>)
 800455c:	f7fc f952 	bl	8000804 <serial_put_string>
	  FLASH_IF_disable_all_protection();
 8004560:	f7fc fa2a 	bl	80009b8 <FLASH_IF_disable_all_protection>

	  while (1)
	  {

		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8004564:	4844      	ldr	r0, [pc, #272]	@ (8004678 <main_menu+0x14c>)
 8004566:	f7fc f94d 	bl	8000804 <serial_put_string>
		  serial_put_string((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 800456a:	4844      	ldr	r0, [pc, #272]	@ (800467c <main_menu+0x150>)
 800456c:	f7fc f94a 	bl	8000804 <serial_put_string>
		  serial_put_string((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8004570:	4843      	ldr	r0, [pc, #268]	@ (8004680 <main_menu+0x154>)
 8004572:	f7fc f947 	bl	8000804 <serial_put_string>
		  serial_put_string((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8004576:	4843      	ldr	r0, [pc, #268]	@ (8004684 <main_menu+0x158>)
 8004578:	f7fc f944 	bl	8000804 <serial_put_string>

		  flashProtection = FLASH_IF_get_write_protection_status();
 800457c:	f7fc fa96 	bl	8000aac <FLASH_IF_get_write_protection_status>
 8004580:	4603      	mov	r3, r0
 8004582:	4a41      	ldr	r2, [pc, #260]	@ (8004688 <main_menu+0x15c>)
 8004584:	6013      	str	r3, [r2, #0]

	    if(flashProtection == FLASHIF_PROTECTION_WRPENABLED)
 8004586:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <main_menu+0x15c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d103      	bne.n	8004596 <main_menu+0x6a>
	    {
	    	serial_put_string((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 800458e:	483f      	ldr	r0, [pc, #252]	@ (800468c <main_menu+0x160>)
 8004590:	f7fc f938 	bl	8000804 <serial_put_string>
 8004594:	e002      	b.n	800459c <main_menu+0x70>
	    }
	    else
	    {
	    	serial_put_string((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8004596:	483e      	ldr	r0, [pc, #248]	@ (8004690 <main_menu+0x164>)
 8004598:	f7fc f934 	bl	8000804 <serial_put_string>
	    }
	    serial_put_string((uint8_t *)"==========================================================\r\n\n");
 800459c:	483d      	ldr	r0, [pc, #244]	@ (8004694 <main_menu+0x168>)
 800459e:	f7fc f931 	bl	8000804 <serial_put_string>

	    /* Clean the input path */
	    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80045a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004698 <main_menu+0x16c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
	//    __HAL_UART_CLEAR_OREFLAG(&UartHandle);

	    /* Receive key */
	    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 80045a8:	1cf9      	adds	r1, r7, #3
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045ae:	2201      	movs	r2, #1
 80045b0:	4839      	ldr	r0, [pc, #228]	@ (8004698 <main_menu+0x16c>)
 80045b2:	f00b fa88 	bl	800fac6 <HAL_UART_Receive>



	    switch (key)
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	3b31      	subs	r3, #49	@ 0x31
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d84d      	bhi.n	800465a <main_menu+0x12e>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <main_menu+0x98>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045db 	.word	0x080045db
 80045cc:	080045e1 	.word	0x080045e1
 80045d0:	0800460f 	.word	0x0800460f
	    {
	    case '1' :
	      /* Download user application in the Flash */
	      serial_download();
 80045d4:	f7ff fecc 	bl	8004370 <serial_download>
	      break;
 80045d8:	e043      	b.n	8004662 <main_menu+0x136>
	    case '2' :
	      /* Upload user application from the Flash */
	      serial_upload();
 80045da:	f7ff ff73 	bl	80044c4 <serial_upload>
	      break;
 80045de:	e040      	b.n	8004662 <main_menu+0x136>
	    case '3' :
	    	serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 80045e0:	482e      	ldr	r0, [pc, #184]	@ (800469c <main_menu+0x170>)
 80045e2:	f7fc f90f 	bl	8000804 <serial_put_string>
	      /* execute the new program */
	      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80045e6:	4b2e      	ldr	r3, [pc, #184]	@ (80046a0 <main_menu+0x174>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2e      	ldr	r2, [pc, #184]	@ (80046a4 <main_menu+0x178>)
 80045ec:	6013      	str	r3, [r2, #0]
	      /* Jump to user application */
	      jumpToApplication = (pFunction)jumpAddress;
 80045ee:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <main_menu+0x178>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b2c      	ldr	r3, [pc, #176]	@ (80046a8 <main_menu+0x17c>)
 80045f6:	601a      	str	r2, [r3, #0]
	      /* Initialize user application's Stack Pointer */
	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80045f8:	4b2c      	ldr	r3, [pc, #176]	@ (80046ac <main_menu+0x180>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f383 8808 	msr	MSP, r3
}
 8004604:	bf00      	nop
	      jumpToApplication();
 8004606:	4b28      	ldr	r3, [pc, #160]	@ (80046a8 <main_menu+0x17c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4798      	blx	r3
	      break;
 800460c:	e029      	b.n	8004662 <main_menu+0x136>
	    case '4' :

	      if (flashProtection != FLASHIF_PROTECTION_NONE)
 800460e:	4b1e      	ldr	r3, [pc, #120]	@ (8004688 <main_menu+0x15c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <main_menu+0x10c>
	      {
	        /* Disable the write protection */
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 8004616:	2001      	movs	r0, #1
 8004618:	f7fc fa60 	bl	8000adc <FLASH_IF_write_protection_config>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <main_menu+0x104>
	        {
	        	serial_put_string((uint8_t *)"Write Protection disabled...\r\n");
 8004622:	4823      	ldr	r0, [pc, #140]	@ (80046b0 <main_menu+0x184>)
 8004624:	f7fc f8ee 	bl	8000804 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 8004628:	4822      	ldr	r0, [pc, #136]	@ (80046b4 <main_menu+0x188>)
 800462a:	f7fc f8eb 	bl	8000804 <serial_put_string>
	        else
	        {
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
	        }
	      }
	      break;
 800462e:	e018      	b.n	8004662 <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 8004630:	4821      	ldr	r0, [pc, #132]	@ (80046b8 <main_menu+0x18c>)
 8004632:	f7fc f8e7 	bl	8000804 <serial_put_string>
	      break;
 8004636:	e014      	b.n	8004662 <main_menu+0x136>
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8004638:	2000      	movs	r0, #0
 800463a:	f7fc fa4f 	bl	8000adc <FLASH_IF_write_protection_config>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <main_menu+0x126>
	        	serial_put_string((uint8_t *)"Write Protection enabled...\r\n");
 8004644:	481d      	ldr	r0, [pc, #116]	@ (80046bc <main_menu+0x190>)
 8004646:	f7fc f8dd 	bl	8000804 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 800464a:	481a      	ldr	r0, [pc, #104]	@ (80046b4 <main_menu+0x188>)
 800464c:	f7fc f8da 	bl	8000804 <serial_put_string>
	      break;
 8004650:	e007      	b.n	8004662 <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
 8004652:	481b      	ldr	r0, [pc, #108]	@ (80046c0 <main_menu+0x194>)
 8004654:	f7fc f8d6 	bl	8000804 <serial_put_string>
	      break;
 8004658:	e003      	b.n	8004662 <main_menu+0x136>
		default:
			serial_put_string((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 800465a:	481a      	ldr	r0, [pc, #104]	@ (80046c4 <main_menu+0x198>)
 800465c:	f7fc f8d2 	bl	8000804 <serial_put_string>
		break;
 8004660:	bf00      	nop
		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8004662:	e77f      	b.n	8004564 <main_menu+0x38>
 8004664:	080121ec 	.word	0x080121ec
 8004668:	08012238 	.word	0x08012238
 800466c:	08012284 	.word	0x08012284
 8004670:	080122d0 	.word	0x080122d0
 8004674:	0801231c 	.word	0x0801231c
 8004678:	08012324 	.word	0x08012324
 800467c:	08012364 	.word	0x08012364
 8004680:	080123a4 	.word	0x080123a4
 8004684:	080123e4 	.word	0x080123e4
 8004688:	200006d0 	.word	0x200006d0
 800468c:	08012424 	.word	0x08012424
 8004690:	08012464 	.word	0x08012464
 8004694:	080124a4 	.word	0x080124a4
 8004698:	20000680 	.word	0x20000680
 800469c:	08012120 	.word	0x08012120
 80046a0:	08020004 	.word	0x08020004
 80046a4:	200006cc 	.word	0x200006cc
 80046a8:	200006c8 	.word	0x200006c8
 80046ac:	08020000 	.word	0x08020000
 80046b0:	080124e4 	.word	0x080124e4
 80046b4:	08012504 	.word	0x08012504
 80046b8:	08012524 	.word	0x08012524
 80046bc:	08012554 	.word	0x08012554
 80046c0:	08012574 	.word	0x08012574
 80046c4:	080125a0 	.word	0x080125a0

080046c8 <optiga_util_callback>:
extern pal_i2c_t optiga_pal_i2c_context_0;
extern I2C_HandleTypeDef hi2c1;

// ---------- Internal Callbacks ----------
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <optiga_util_callback+0x20>)
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	8013      	strh	r3, [r2, #0]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000718 	.word	0x20000718

080046ec <optiga_crypt_callback>:

static void optiga_crypt_callback(void *context, optiga_lib_status_t return_status)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80046f8:	4a04      	ldr	r2, [pc, #16]	@ (800470c <optiga_crypt_callback+0x20>)
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	8013      	strh	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000718 	.word	0x20000718

08004710 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004720:	d101      	bne.n	8004726 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8004722:	f003 f939 	bl	8007998 <pal_os_event_timer_tick>
    }
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <I2C_Scan>:

// ---------- I2C Scanner (for debugging) ----------
static void I2C_Scan(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8004738:	4810      	ldr	r0, [pc, #64]	@ (800477c <I2C_Scan+0x4c>)
 800473a:	f00c fbb3 	bl	8010ea4 <puts>
    for (uint8_t addr = 0x01; addr < 0x33; addr++)
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e013      	b.n	800476c <I2C_Scan+0x3c>
    {
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	b29b      	uxth	r3, r3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b299      	uxth	r1, r3
 800474c:	230a      	movs	r3, #10
 800474e:	2201      	movs	r2, #1
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f007 fe8d 	bl	800c470 <HAL_I2C_IsDeviceReady>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <I2C_Scan+0x36>
        {
            printf("Device found at 0x%02X\r\n", addr);
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	4619      	mov	r1, r3
 8004760:	4807      	ldr	r0, [pc, #28]	@ (8004780 <I2C_Scan+0x50>)
 8004762:	f00c fb37 	bl	8010dd4 <iprintf>
    for (uint8_t addr = 0x01; addr < 0x33; addr++)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	3301      	adds	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b32      	cmp	r3, #50	@ 0x32
 8004770:	d9e8      	bls.n	8004744 <I2C_Scan+0x14>
        }
    }
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	080125e0 	.word	0x080125e0
 8004780:	080125f4 	.word	0x080125f4

08004784 <optiga_init>:

// ---------- Global Function: optiga_init ----------
void optiga_init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
    pal_gpio_set_high(&optiga_vdd_0);
 800478a:	482b      	ldr	r0, [pc, #172]	@ (8004838 <optiga_init+0xb4>)
 800478c:	f002 fe54 	bl	8007438 <pal_gpio_set_high>
    HAL_Delay(10);
 8004790:	200a      	movs	r0, #10
 8004792:	f006 f93b 	bl	800aa0c <HAL_Delay>

    pal_gpio_set_low(&optiga_reset_0);
 8004796:	4829      	ldr	r0, [pc, #164]	@ (800483c <optiga_init+0xb8>)
 8004798:	f002 fe5e 	bl	8007458 <pal_gpio_set_low>
    HAL_Delay(10);
 800479c:	200a      	movs	r0, #10
 800479e:	f006 f935 	bl	800aa0c <HAL_Delay>
    I2C_Scan(&hi2c1);
 80047a2:	4827      	ldr	r0, [pc, #156]	@ (8004840 <optiga_init+0xbc>)
 80047a4:	f7ff ffc4 	bl	8004730 <I2C_Scan>


    optiga_lib_status_t return_status;
    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 80047a8:	2200      	movs	r2, #0
 80047aa:	4926      	ldr	r1, [pc, #152]	@ (8004844 <optiga_init+0xc0>)
 80047ac:	2000      	movs	r0, #0
 80047ae:	f002 fc83 	bl	80070b8 <optiga_util_create>
 80047b2:	4603      	mov	r3, r0
 80047b4:	4a24      	ldr	r2, [pc, #144]	@ (8004848 <optiga_init+0xc4>)
 80047b6:	6013      	str	r3, [r2, #0]
    if (!me_util)
 80047b8:	4b23      	ldr	r3, [pc, #140]	@ (8004848 <optiga_init+0xc4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <optiga_init+0x44>
    {
        printf("❌ Failed to create OPTIGA util instance.\r\n");
 80047c0:	4822      	ldr	r0, [pc, #136]	@ (800484c <optiga_init+0xc8>)
 80047c2:	f00c fb6f 	bl	8010ea4 <puts>
        return;
 80047c6:	e034      	b.n	8004832 <optiga_init+0xae>
    }


    printf("Starting OPTIGA Trust M logic...\r\n");
 80047c8:	4821      	ldr	r0, [pc, #132]	@ (8004850 <optiga_init+0xcc>)
 80047ca:	f00c fb6b 	bl	8010ea4 <puts>

    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 80047ce:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <optiga_init+0xd0>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 80047d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004848 <optiga_init+0xc4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f002 fcd0 	bl	8007180 <optiga_util_open_application>
 80047e0:	4603      	mov	r3, r0
 80047e2:	80fb      	strh	r3, [r7, #6]
        if (return_status != OPTIGA_LIB_SUCCESS)
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <optiga_init+0x6e>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 80047ea:	481b      	ldr	r0, [pc, #108]	@ (8004858 <optiga_init+0xd4>)
 80047ec:	f00c fb5a 	bl	8010ea4 <puts>
            continue;
 80047f0:	e01e      	b.n	8004830 <optiga_init+0xac>
        }

        HAL_Delay(100);
 80047f2:	2064      	movs	r0, #100	@ 0x64
 80047f4:	f006 f90a 	bl	800aa0c <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80047f8:	e001      	b.n	80047fe <optiga_init+0x7a>
        {
            pal_os_event_trigger_registered_callback();
 80047fa:	f003 f8ab 	bl	8007954 <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80047fe:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <optiga_init+0xd0>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d0f8      	beq.n	80047fa <optiga_init+0x76>
        }

        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 8004808:	4b12      	ldr	r3, [pc, #72]	@ (8004854 <optiga_init+0xd0>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <optiga_init+0x96>
        {
            printf("✅ OPTIGA Trust M initialized successfully.\r\n");
 8004812:	4812      	ldr	r0, [pc, #72]	@ (800485c <optiga_init+0xd8>)
 8004814:	f00c fb46 	bl	8010ea4 <puts>
            break;
 8004818:	e00b      	b.n	8004832 <optiga_init+0xae>
        }
        else
        {
            printf("❌ OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 800481a:	4b0e      	ldr	r3, [pc, #56]	@ (8004854 <optiga_init+0xd0>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	480f      	ldr	r0, [pc, #60]	@ (8004860 <optiga_init+0xdc>)
 8004824:	f00c fad6 	bl	8010dd4 <iprintf>
            HAL_Delay(2000);
 8004828:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800482c:	f006 f8ee 	bl	800aa0c <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8004830:	e7cd      	b.n	80047ce <optiga_init+0x4a>
        }
    }
}
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000500 	.word	0x20000500
 800483c:	20000508 	.word	0x20000508
 8004840:	200005e4 	.word	0x200005e4
 8004844:	080046c9 	.word	0x080046c9
 8004848:	20000714 	.word	0x20000714
 800484c:	08012610 	.word	0x08012610
 8004850:	0801263c 	.word	0x0801263c
 8004854:	20000718 	.word	0x20000718
 8004858:	08012660 	.word	0x08012660
 800485c:	080126a0 	.word	0x080126a0
 8004860:	080126d0 	.word	0x080126d0

08004864 <verify_firmware_signature>:

// ---------- Internal Function ----------
static bool verify_firmware_signature(uint32_t size)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b0d2      	sub	sp, #328	@ 0x148
 8004868:	af04      	add	r7, sp, #16
 800486a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800486e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004872:	6018      	str	r0, [r3, #0]
    uint32_t firmware_size = size - SIGNATURE_SIZE;
 8004874:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004878:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3b46      	subs	r3, #70	@ 0x46
 8004880:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    const uint8_t *firmware_ptr = (const uint8_t *)APPLICATION_ADDRESS;
 8004884:	4b77      	ldr	r3, [pc, #476]	@ (8004a64 <verify_firmware_signature+0x200>)
 8004886:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    uint8_t calc_hash[SHA_SIZE];
    uint8_t signature[SIGNATURE_SIZE];

    // 1. Calculate SHA-256 hash of firmware
    mbedtls_sha256_context ctx;
    mbedtls_sha256_init(&ctx);
 800488a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800488e:	4618      	mov	r0, r3
 8004890:	f003 f90e 	bl	8007ab0 <mbedtls_sha256_init>

    if (mbedtls_sha256_starts_ret(&ctx, 0) != 0 ||
 8004894:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f003 f926 	bl	8007aec <mbedtls_sha256_starts_ret>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d116      	bne.n	80048d4 <verify_firmware_signature+0x70>
        mbedtls_sha256_update_ret(&ctx, firmware_ptr, firmware_size) != 0 ||
 80048a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80048ae:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fece 	bl	8009654 <mbedtls_sha256_update_ret>
 80048b8:	4603      	mov	r3, r0
    if (mbedtls_sha256_starts_ret(&ctx, 0) != 0 ||
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <verify_firmware_signature+0x70>
        mbedtls_sha256_finish_ret(&ctx, calc_hash) != 0)
 80048be:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 80048c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 ff38 	bl	800973e <mbedtls_sha256_finish_ret>
 80048ce:	4603      	mov	r3, r0
        mbedtls_sha256_update_ret(&ctx, firmware_ptr, firmware_size) != 0 ||
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <verify_firmware_signature+0x84>
    {
        printf("❌ SHA-256 calculation failed.\r\n");
 80048d4:	4864      	ldr	r0, [pc, #400]	@ (8004a68 <verify_firmware_signature+0x204>)
 80048d6:	f00c fae5 	bl	8010ea4 <puts>
        mbedtls_sha256_free(&ctx);
 80048da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048de:	4618      	mov	r0, r3
 80048e0:	f003 f8f3 	bl	8007aca <mbedtls_sha256_free>
        return false;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e0b7      	b.n	8004a58 <verify_firmware_signature+0x1f4>
    }

    mbedtls_sha256_free(&ctx);
 80048e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 f8ec 	bl	8007aca <mbedtls_sha256_free>
    printf("✅ SHA-256 hash calculated:\r\n");
 80048f2:	485e      	ldr	r0, [pc, #376]	@ (8004a6c <verify_firmware_signature+0x208>)
 80048f4:	f00c fad6 	bl	8010ea4 <puts>
    for (int i = 0; i < SHA_SIZE; i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80048fe:	e00e      	b.n	800491e <verify_firmware_signature+0xba>
        printf("%02X", calc_hash[i]);
 8004900:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8004904:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004908:	4413      	add	r3, r2
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	4619      	mov	r1, r3
 800490e:	4858      	ldr	r0, [pc, #352]	@ (8004a70 <verify_firmware_signature+0x20c>)
 8004910:	f00c fa60 	bl	8010dd4 <iprintf>
    for (int i = 0; i < SHA_SIZE; i++)
 8004914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004918:	3301      	adds	r3, #1
 800491a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800491e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004922:	2b1f      	cmp	r3, #31
 8004924:	ddec      	ble.n	8004900 <verify_firmware_signature+0x9c>
    printf("\r\n");
 8004926:	4853      	ldr	r0, [pc, #332]	@ (8004a74 <verify_firmware_signature+0x210>)
 8004928:	f00c fabc 	bl	8010ea4 <puts>

    // 2. Copy signature from flash
    memcpy(signature, (uint8_t *)(APPLICATION_ADDRESS + firmware_size), SIGNATURE_SIZE);
 800492c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004930:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8004934:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8004938:	461a      	mov	r2, r3
 800493a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800493e:	4611      	mov	r1, r2
 8004940:	2246      	movs	r2, #70	@ 0x46
 8004942:	4618      	mov	r0, r3
 8004944:	f00c fb1b 	bl	8010f7e <memcpy>

    // 3. Read public key from OPTIGA
    uint8_t public_key[65];
    uint16_t public_key_len = sizeof(public_key);
 8004948:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800494c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8004950:	2241      	movs	r2, #65	@ 0x41
 8004952:	801a      	strh	r2, [r3, #0]
    optiga_lib_status = optiga_util_read_data(me_util, SIGNATURE_OID, 0, public_key, &public_key_len);
 8004954:	4b48      	ldr	r3, [pc, #288]	@ (8004a78 <verify_firmware_signature+0x214>)
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	f107 020c 	add.w	r2, r7, #12
 800495c:	f107 030a 	add.w	r3, r7, #10
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	2200      	movs	r2, #0
 8004966:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 800496a:	f002 fc6f 	bl	800724c <optiga_util_read_data>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	4b42      	ldr	r3, [pc, #264]	@ (8004a7c <verify_firmware_signature+0x218>)
 8004974:	801a      	strh	r2, [r3, #0]
    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8004976:	4b41      	ldr	r3, [pc, #260]	@ (8004a7c <verify_firmware_signature+0x218>)
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <verify_firmware_signature+0x12a>
    {
        printf("❌ Failed to read public key from OID 0x%04X\r\n", SIGNATURE_OID);
 8004980:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8004984:	483e      	ldr	r0, [pc, #248]	@ (8004a80 <verify_firmware_signature+0x21c>)
 8004986:	f00c fa25 	bl	8010dd4 <iprintf>
        return false;
 800498a:	2300      	movs	r3, #0
 800498c:	e064      	b.n	8004a58 <verify_firmware_signature+0x1f4>
    }
 //   example_optiga_util_read_data();

    printf("✅ Signature:\r\n", SIGNATURE_OID);
 800498e:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8004992:	483c      	ldr	r0, [pc, #240]	@ (8004a84 <verify_firmware_signature+0x220>)
 8004994:	f00c fa1e 	bl	8010dd4 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800499e:	e00e      	b.n	80049be <verify_firmware_signature+0x15a>
        printf("%02X", signature[i]);
 80049a0:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80049a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80049a8:	4413      	add	r3, r2
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	4830      	ldr	r0, [pc, #192]	@ (8004a70 <verify_firmware_signature+0x20c>)
 80049b0:	f00c fa10 	bl	8010dd4 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 80049b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80049b8:	3301      	adds	r3, #1
 80049ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80049be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80049c2:	2b45      	cmp	r3, #69	@ 0x45
 80049c4:	ddec      	ble.n	80049a0 <verify_firmware_signature+0x13c>
    printf("\r\n");
 80049c6:	482b      	ldr	r0, [pc, #172]	@ (8004a74 <verify_firmware_signature+0x210>)
 80049c8:	f00c fa6c 	bl	8010ea4 <puts>

    // 4. Verify signature using OPTIGA
    optiga_crypt_t *me_crypt = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 80049cc:	2200      	movs	r2, #0
 80049ce:	492e      	ldr	r1, [pc, #184]	@ (8004a88 <verify_firmware_signature+0x224>)
 80049d0:	2000      	movs	r0, #0
 80049d2:	f001 ffe9 	bl	80069a8 <optiga_crypt_create>
 80049d6:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (!me_crypt)
 80049da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <verify_firmware_signature+0x188>
    {
        printf("❌ Failed to create OPTIGA crypt instance!\r\n");
 80049e2:	482a      	ldr	r0, [pc, #168]	@ (8004a8c <verify_firmware_signature+0x228>)
 80049e4:	f00c fa5e 	bl	8010ea4 <puts>
        return false;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e035      	b.n	8004a58 <verify_firmware_signature+0x1f4>
    }

    optiga_lib_status = OPTIGA_LIB_BUSY;
 80049ec:	4b23      	ldr	r3, [pc, #140]	@ (8004a7c <verify_firmware_signature+0x218>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	801a      	strh	r2, [r3, #0]
    optiga_crypt_ecdsa_verify(me_crypt,
 80049f2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80049f6:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 80049fa:	4a25      	ldr	r2, [pc, #148]	@ (8004a90 <verify_firmware_signature+0x22c>)
 80049fc:	9202      	str	r2, [sp, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	9201      	str	r2, [sp, #4]
 8004a02:	2246      	movs	r2, #70	@ 0x46
 8004a04:	9200      	str	r2, [sp, #0]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004a0c:	f002 f834 	bl	8006a78 <optiga_crypt_ecdsa_verify>
                               calc_hash, SHA_SIZE,
                               signature, SIGNATURE_SIZE,
                               OPTIGA_CRYPT_OID_DATA, &public_key_oid);

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8004a10:	e001      	b.n	8004a16 <verify_firmware_signature+0x1b2>
        pal_os_event_trigger_registered_callback();
 8004a12:	f002 ff9f 	bl	8007954 <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8004a16:	4b19      	ldr	r3, [pc, #100]	@ (8004a7c <verify_firmware_signature+0x218>)
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d0f8      	beq.n	8004a12 <verify_firmware_signature+0x1ae>

    optiga_crypt_destroy(me_crypt);
 8004a20:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8004a24:	f002 f804 	bl	8006a30 <optiga_crypt_destroy>

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <verify_firmware_signature+0x218>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <verify_firmware_signature+0x1e0>
    {
        printf("❌ Signature verification FAILED! Status: 0x%04X\r\n", optiga_lib_status);
 8004a32:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <verify_firmware_signature+0x218>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4816      	ldr	r0, [pc, #88]	@ (8004a94 <verify_firmware_signature+0x230>)
 8004a3c:	f00c f9ca 	bl	8010dd4 <iprintf>
        return false;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e009      	b.n	8004a58 <verify_firmware_signature+0x1f4>
    }
    if (signature[0] != 0x30) return false;
 8004a44:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d001      	beq.n	8004a50 <verify_firmware_signature+0x1ec>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e003      	b.n	8004a58 <verify_firmware_signature+0x1f4>

    printf("✅ Firmware signature verified successfully.\r\n");
 8004a50:	4811      	ldr	r0, [pc, #68]	@ (8004a98 <verify_firmware_signature+0x234>)
 8004a52:	f00c fa27 	bl	8010ea4 <puts>
    return true;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	08020000 	.word	0x08020000
 8004a68:	08012704 	.word	0x08012704
 8004a6c:	08012728 	.word	0x08012728
 8004a70:	08012748 	.word	0x08012748
 8004a74:	08012750 	.word	0x08012750
 8004a78:	20000714 	.word	0x20000714
 8004a7c:	20000718 	.word	0x20000718
 8004a80:	08012754 	.word	0x08012754
 8004a84:	08012784 	.word	0x08012784
 8004a88:	080046ed 	.word	0x080046ed
 8004a8c:	08012798 	.word	0x08012798
 8004a90:	200004cc 	.word	0x200004cc
 8004a94:	080127c8 	.word	0x080127c8
 8004a98:	080127fc 	.word	0x080127fc

08004a9c <optiga_deinit>:
void optiga_deinit(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
    if (me_util != NULL)
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <optiga_deinit+0x44>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <optiga_deinit+0x22>
    {
        optiga_util_destroy(me_util);
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <optiga_deinit+0x44>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f002 fb45 	bl	800713c <optiga_util_destroy>
        me_util = NULL;
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <optiga_deinit+0x44>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
        printf("✅ OPTIGA util instance destroyed.\r\n");
 8004ab8:	480a      	ldr	r0, [pc, #40]	@ (8004ae4 <optiga_deinit+0x48>)
 8004aba:	f00c f9f3 	bl	8010ea4 <puts>
    }
    pal_gpio_set_high(&optiga_reset_0);
 8004abe:	480a      	ldr	r0, [pc, #40]	@ (8004ae8 <optiga_deinit+0x4c>)
 8004ac0:	f002 fcba 	bl	8007438 <pal_gpio_set_high>
         HAL_Delay(10);
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f005 ffa1 	bl	800aa0c <HAL_Delay>
    // Optional: Power down or reset VDD if needed
    pal_gpio_set_low(&optiga_vdd_0);
 8004aca:	4808      	ldr	r0, [pc, #32]	@ (8004aec <optiga_deinit+0x50>)
 8004acc:	f002 fcc4 	bl	8007458 <pal_gpio_set_low>
    HAL_Delay(10);
 8004ad0:	200a      	movs	r0, #10
 8004ad2:	f005 ff9b 	bl	800aa0c <HAL_Delay>
    printf("🔌 OPTIGA VDD set low (powered down).\r\n");
 8004ad6:	4806      	ldr	r0, [pc, #24]	@ (8004af0 <optiga_deinit+0x54>)
 8004ad8:	f00c f9e4 	bl	8010ea4 <puts>
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000714 	.word	0x20000714
 8004ae4:	0801282c 	.word	0x0801282c
 8004ae8:	20000508 	.word	0x20000508
 8004aec:	20000500 	.word	0x20000500
 8004af0:	08012854 	.word	0x08012854

08004af4 <verify_firmware_integrity>:
// ---------- Global Function ----------
bool verify_firmware_integrity(uint32_t size)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    return verify_firmware_signature(size);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff feb1 	bl	8004864 <verify_firmware_signature>
 8004b02:	4603      	mov	r3, r0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8004b1c:	78bb      	ldrb	r3, [r7, #2]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d00e      	beq.n	8004b40 <optiga_cmd_set_shielded_connection_option+0x34>
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	dc10      	bgt.n	8004b48 <optiga_cmd_set_shielded_connection_option+0x3c>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <optiga_cmd_set_shielded_connection_option+0x24>
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d004      	beq.n	8004b38 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 8004b2e:	e00b      	b.n	8004b48 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	769a      	strb	r2, [r3, #26]
        break;
 8004b36:	e008      	b.n	8004b4a <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	76da      	strb	r2, [r3, #27]
        break;
 8004b3e:	e004      	b.n	8004b4a <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	771a      	strb	r2, [r3, #28]
        break;
 8004b46:	e000      	b.n	8004b4a <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8004b48:	bf00      	nop
    }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
 8004b62:	460b      	mov	r3, r1
 8004b64:	71bb      	strb	r3, [r7, #6]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	79fa      	ldrb	r2, [r7, #7]
 8004b6e:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	79ba      	ldrb	r2, [r7, #6]
 8004b76:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004b78:	88bb      	ldrh	r3, [r7, #4]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3302      	adds	r3, #2
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	3303      	adds	r3, #3
 8004b8a:	88ba      	ldrh	r2, [r7, #4]
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60ba      	str	r2, [r7, #8]
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	460b      	mov	r3, r1
 8004bac:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 8004bb4:	8afb      	ldrh	r3, [r7, #22]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	82fa      	strh	r2, [r7, #22]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8004bc4:	89bb      	ldrh	r3, [r7, #12]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	8afb      	ldrh	r3, [r7, #22]
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	82f9      	strh	r1, [r7, #22]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 8004bda:	8afb      	ldrh	r3, [r7, #22]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	82fa      	strh	r2, [r7, #22]
 8004be0:	461a      	mov	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	89ba      	ldrh	r2, [r7, #12]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8afa      	ldrh	r2, [r7, #22]
 8004bf0:	801a      	strh	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 ff6f 	bl	8005aec <optiga_cmd_execute_handler>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	461a      	mov	r2, r3
 8004c22:	460b      	mov	r3, r1
 8004c24:	72fb      	strb	r3, [r7, #11]
 8004c26:	4613      	mov	r3, r2
 8004c28:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	7aba      	ldrb	r2, [r7, #10]
 8004c34:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	7e3a      	ldrb	r2, [r7, #24]
 8004c3a:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	7afa      	ldrb	r2, [r7, #11]
 8004c4c:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8c3a      	ldrh	r2, [r7, #32]
 8004c52:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8004c54:	2100      	movs	r1, #0
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 ff48 	bl	8005aec <optiga_cmd_execute_handler>
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 ff63 	bl	8006b3c <optiga_common_get_uint32>
 8004c76:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 8004c7e:	d201      	bcs.n	8004c84 <optiga_cmd_session_available+0x20>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <optiga_cmd_session_available+0x22>
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3308      	adds	r3, #8
 8004c9e:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8a9b      	ldrh	r3, [r3, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11d      	bne.n	8004ce4 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
 8004cac:	e017      	b.n	8004cde <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d00e      	beq.n	8004cd8 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	b21a      	sxth	r2, r3
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf0 <optiga_cmd_session_assign+0x60>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	b21b      	sxth	r3, r3
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4413      	add	r3, r2
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	701a      	strb	r2, [r3, #0]
                break;
 8004cd4:	bf00      	nop
            }
        }
    }
}
 8004cd6:	e005      	b.n	8004ce4 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d9e4      	bls.n	8004cae <optiga_cmd_session_assign+0x1e>
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	ffffe100 	.word	0xffffe100

08004cf4 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8a9b      	ldrh	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8a9b      	ldrh	r3, [r3, #20]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
    }
}
 8004d28:	bf00      	nop
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
 8004d40:	4613      	mov	r3, r2
 8004d42:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e027      	b.n	8004da2 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d002      	beq.n	8004d5e <optiga_cmd_queue_get_count_of+0x2a>
 8004d58:	2b09      	cmp	r3, #9
 8004d5a:	d00c      	beq.n	8004d76 <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 8004d5c:	e017      	b.n	8004d8e <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	737b      	strb	r3, [r7, #13]
            break;
 8004d74:	e00b      	b.n	8004d8e <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	737b      	strb	r3, [r7, #13]
            break;
 8004d8c:	bf00      	nop
        }
        if (state_to_check == slot_value)
 8004d8e:	78ba      	ldrb	r2, [r7, #2]
 8004d90:	7b7b      	ldrb	r3, [r7, #13]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d102      	bne.n	8004d9c <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	d9d4      	bls.n	8004d52 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e01f      	b.n	8004e06 <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
           break;
 8004dfe:	e006      	b.n	8004e0e <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	3301      	adds	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	d9dc      	bls.n	8004dc6 <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7f9b      	ldrb	r3, [r3, #30]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	440b      	add	r3, r1
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7f9b      	ldrb	r3, [r3, #30]
 8004e46:	4619      	mov	r1, r3
 8004e48:	460b      	mov	r3, r1
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	440b      	add	r3, r1
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	779a      	strb	r2, [r3, #30]
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e78:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 8004e7a:	23ff      	movs	r3, #255	@ 0xff
 8004e7c:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004e8c:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004e8e:	2202      	movs	r2, #2
 8004e90:	2109      	movs	r1, #9
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff4e 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	2109      	movs	r1, #9
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f7ff ff46 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8004ea8:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00f      	beq.n	8004ece <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004eae:	2204      	movs	r2, #4
 8004eb0:	2109      	movs	r1, #9
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7ff ff3e 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8004eb8:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10f      	bne.n	8004ede <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 8004ebe:	2223      	movs	r2, #35	@ 0x23
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	6978      	ldr	r0, [r7, #20]
 8004ec4:	f7ff ff36 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8004ec8:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 8004ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	496d      	ldr	r1, [pc, #436]	@ (800508c <optiga_cmd_queue_scheduler+0x220>)
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	f002 fd10 	bl	80078fc <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8004edc:	e0d2      	b.n	8005084 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 8004ede:	6938      	ldr	r0, [r7, #16]
 8004ee0:	f002 fce6 	bl	80078b0 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 8004ee4:	7e7b      	ldrb	r3, [r7, #25]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d105      	bne.n	8004ef6 <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	76fb      	strb	r3, [r7, #27]
 8004efa:	e05b      	b.n	8004fb4 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8004efc:	7efa      	ldrb	r2, [r7, #27]
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004f10:	2208      	movs	r2, #8
 8004f12:	2109      	movs	r1, #9
 8004f14:	6978      	ldr	r0, [r7, #20]
 8004f16:	f7ff ff0d 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d10d      	bne.n	8004f3c <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	7a5b      	ldrb	r3, [r3, #9]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d142      	bne.n	8004fae <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004f2c:	2b23      	cmp	r3, #35	@ 0x23
 8004f2e:	d13e      	bne.n	8004fae <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8004f36:	7efb      	ldrb	r3, [r7, #27]
 8004f38:	76bb      	strb	r3, [r7, #26]
 8004f3a:	e038      	b.n	8004fae <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	7a5b      	ldrb	r3, [r3, #9]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d134      	bne.n	8004fae <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d201      	bcs.n	8004f56 <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d326      	bcc.n	8004fae <optiga_cmd_queue_scheduler+0x142>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d31f      	bcc.n	8004fae <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004f72:	2b22      	cmp	r3, #34	@ 0x22
 8004f74:	d105      	bne.n	8004f82 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff fe74 	bl	8004c64 <optiga_cmd_session_available>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d010      	beq.n	8004fa4 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004f86:	2b22      	cmp	r3, #34	@ 0x22
 8004f88:	d104      	bne.n	8004f94 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	8a9b      	ldrh	r3, [r3, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d107      	bne.n	8004fa4 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004f98:	2b21      	cmp	r3, #33	@ 0x21
 8004f9a:	d003      	beq.n	8004fa4 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004fa0:	2b23      	cmp	r3, #35	@ 0x23
 8004fa2:	d104      	bne.n	8004fae <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 8004faa:	7efb      	ldrb	r3, [r7, #27]
 8004fac:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004fae:	7efb      	ldrb	r3, [r7, #27]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	76fb      	strb	r3, [r7, #27]
 8004fb4:	7efb      	ldrb	r3, [r7, #27]
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d9a0      	bls.n	8004efc <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8004fba:	7ebb      	ldrb	r3, [r7, #26]
 8004fbc:	2bff      	cmp	r3, #255	@ 0xff
 8004fbe:	d102      	bne.n	8004fc6 <optiga_cmd_queue_scheduler+0x15a>
 8004fc0:	7e7b      	ldrb	r3, [r7, #25]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d08e      	beq.n	8004ee4 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 8004fc6:	7ebb      	ldrb	r3, [r7, #26]
 8004fc8:	2bff      	cmp	r3, #255	@ 0xff
 8004fca:	d054      	beq.n	8005076 <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 8004fcc:	7eba      	ldrb	r2, [r7, #26]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004fe0:	7eba      	ldrb	r2, [r7, #26]
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b22      	cmp	r3, #34	@ 0x22
 8004ff6:	d111      	bne.n	800501c <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10c      	bne.n	800501c <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8005002:	7eba      	ldrb	r2, [r7, #26]
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	4613      	mov	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fe3a 	bl	8004c90 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 800501c:	7eba      	ldrb	r2, [r7, #26]
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8005036:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8005038:	7eba      	ldrb	r2, [r7, #26]
 800503a:	6979      	ldr	r1, [r7, #20]
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	2332      	movs	r3, #50	@ 0x32
 800504e:	4910      	ldr	r1, [pc, #64]	@ (8005090 <optiga_cmd_queue_scheduler+0x224>)
 8005050:	6938      	ldr	r0, [r7, #16]
 8005052:	f002 fc53 	bl	80078fc <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8005056:	7eba      	ldrb	r2, [r7, #26]
 8005058:	6979      	ldr	r1, [r7, #20]
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8005068:	2204      	movs	r2, #4
 800506a:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8005074:	e006      	b.n	8005084 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8005076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4903      	ldr	r1, [pc, #12]	@ (800508c <optiga_cmd_queue_scheduler+0x220>)
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f002 fc3c 	bl	80078fc <pal_os_event_register_callback_oneshot>
}
 8005084:	bf00      	nop
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08004e6d 	.word	0x08004e6d
 8005090:	08004bff 	.word	0x08004bff

08005094 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7f9b      	ldrb	r3, [r3, #30]
 80050a8:	4619      	mov	r1, r3
 80050aa:	460b      	mov	r3, r1
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	440b      	add	r3, r1
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b23      	cmp	r3, #35	@ 0x23
 80050bc:	d111      	bne.n	80050e2 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	7f9b      	ldrb	r3, [r3, #30]
 80050c6:	4619      	mov	r1, r3
 80050c8:	460b      	mov	r3, r1
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	440b      	add	r3, r1
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80050d6:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80050d8:	2b23      	cmp	r3, #35	@ 0x23
 80050da:	d112      	bne.n	8005102 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b23      	cmp	r3, #35	@ 0x23
 80050e0:	d00f      	beq.n	8005102 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681c      	ldr	r4, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7f9b      	ldrb	r3, [r3, #30]
 80050ea:	461d      	mov	r5, r3
 80050ec:	f002 fcc2 	bl	8007a74 <pal_os_timer_get_time_in_microseconds>
 80050f0:	4602      	mov	r2, r0
 80050f2:	462b      	mov	r3, r5
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	442b      	add	r3, r5
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4423      	add	r3, r4
 80050fc:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8005100:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	7f9b      	ldrb	r3, [r3, #30]
 800510a:	4619      	mov	r1, r3
 800510c:	460b      	mov	r3, r1
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	440b      	add	r3, r1
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	7f9b      	ldrb	r3, [r3, #30]
 8005126:	4619      	mov	r1, r3
 8005128:	460b      	mov	r3, r1
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	440b      	add	r3, r1
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b23      	cmp	r3, #35	@ 0x23
 800513a:	d111      	bne.n	8005160 <optiga_cmd_queue_update_slot+0xcc>
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b23      	cmp	r3, #35	@ 0x23
 8005140:	d10e      	bne.n	8005160 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	7f9b      	ldrb	r3, [r3, #30]
 800514a:	4619      	mov	r1, r3
 800514c:	460b      	mov	r3, r1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	440b      	add	r3, r1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800515a:	2208      	movs	r2, #8
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e00d      	b.n	800517c <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	7f9b      	ldrb	r3, [r3, #30]
 8005168:	4619      	mov	r1, r3
 800516a:	460b      	mov	r3, r1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	440b      	add	r3, r1
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8005178:	2202      	movs	r2, #2
 800517a:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7f9b      	ldrb	r3, [r3, #30]
 8005184:	4619      	mov	r1, r3
 8005186:	460b      	mov	r3, r1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	440b      	add	r3, r1
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	701a      	strb	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bdb0      	pop	{r4, r5, r7, pc}

080051a0 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	7f9b      	ldrb	r3, [r3, #30]
 80051b0:	4619      	mov	r1, r3
 80051b2:	460b      	mov	r3, r1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	440b      	add	r3, r1
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80051c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051c4:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7f9b      	ldrb	r3, [r3, #30]
 80051ce:	4619      	mov	r1, r3
 80051d0:	460b      	mov	r3, r1
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	440b      	add	r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7f9b      	ldrb	r3, [r3, #30]
 80051ea:	4619      	mov	r1, r3
 80051ec:	460b      	mov	r3, r1
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	440b      	add	r3, r1
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	7f9b      	ldrb	r3, [r3, #30]
 8005206:	4619      	mov	r1, r3
 8005208:	460b      	mov	r3, r1
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	440b      	add	r3, r1
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	4903      	ldr	r1, [pc, #12]	@ (8005238 <optiga_cmd_queue_reset_slot+0x98>)
 800522a:	f002 fb29 	bl	8007880 <pal_os_event_start>
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08004e6d 	.word	0x08004e6d

0800523c <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7f9b      	ldrb	r3, [r3, #30]
 800524c:	4619      	mov	r1, r3
 800524e:	460b      	mov	r3, r1
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	440b      	add	r3, r1
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7f9b      	ldrb	r3, [r3, #30]
 8005268:	4619      	mov	r1, r3
 800526a:	460b      	mov	r3, r1
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	440b      	add	r3, r1
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8005290:	2122      	movs	r1, #34	@ 0x22
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff fefe 	bl	8005094 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fd22 	bl	8004cf4 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	460b      	mov	r3, r1
 80052c4:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fee2 	bl	8005094 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff5c 	bl	80051a0 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80052fa:	f240 2302 	movw	r3, #514	@ 0x202
 80052fe:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005304:	2b00      	cmp	r3, #0
 8005306:	d011      	beq.n	800532c <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8005308:	2308      	movs	r3, #8
 800530a:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8005318:	f107 020c 	add.w	r2, r7, #12
 800531c:	4619      	mov	r1, r3
 800531e:	f002 fa27 	bl	8007770 <pal_os_datastore_read>
 8005322:	4603      	mov	r3, r0
 8005324:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8005326:	89fb      	ldrh	r3, [r7, #14]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11a      	bne.n	8005362 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fc01 	bl	8006b3c <optiga_common_get_uint32>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10d      	bne.n	800535c <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fbf7 	bl	8006b3c <optiga_common_get_uint32>
 800534e:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8005354:	f240 2302 	movw	r3, #514	@ 0x202
 8005358:	81fb      	strh	r3, [r7, #14]
            break;
 800535a:	e003      	b.n	8005364 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 800535c:	2300      	movs	r3, #0
 800535e:	81fb      	strh	r3, [r7, #14]
 8005360:	e000      	b.n	8005364 <optiga_cmd_restore_context+0x72>
                break;
 8005362:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8005364:	89fb      	ldrh	r3, [r7, #14]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	7e5b      	ldrb	r3, [r3, #25]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d029      	beq.n	80053d6 <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8005386:	2b22      	cmp	r3, #34	@ 0x22
 8005388:	d125      	bne.n	80053d6 <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005392:	2208      	movs	r2, #8
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f002 fb54 	bl	8007a44 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80053a0:	2b33      	cmp	r3, #51	@ 0x33
 80053a2:	d118      	bne.n	80053d6 <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d014      	beq.n	80053d6 <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80053b8:	2208      	movs	r2, #8
 80053ba:	4619      	mov	r1, r3
 80053bc:	f002 f95a 	bl	8007674 <pal_os_datastore_write>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8c1b      	ldrh	r3, [r3, #32]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2204      	movs	r2, #4
 80053d4:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7ddb      	ldrb	r3, [r3, #23]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d05f      	beq.n	80054b8 <optiga_cmd_execute_comms_open+0xd8>
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	dc6d      	bgt.n	80054d8 <optiga_cmd_execute_comms_open+0xf8>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <optiga_cmd_execute_comms_open+0x26>
 8005400:	2b01      	cmp	r3, #1
 8005402:	d01b      	beq.n	800543c <optiga_cmd_execute_comms_open+0x5c>
 8005404:	e068      	b.n	80054d8 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8005406:	2121      	movs	r1, #33	@ 0x21
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff56 	bl	80052ba <optiga_cmd_request_lock>
 800540e:	4603      	mov	r3, r0
 8005410:	461a      	mov	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8c1b      	ldrh	r3, [r3, #32]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2204      	movs	r2, #4
 8005422:	759a      	strb	r2, [r3, #22]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f240 2202 	movw	r2, #514	@ 0x202
 800542a:	841a      	strh	r2, [r3, #32]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
                    break;
 8005432:	e05c      	b.n	80054ee <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	75da      	strb	r2, [r3, #23]
                break;
 800543a:	e058      	b.n	80054ee <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	7e92      	ldrb	r2, [r2, #26]
 8005446:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	7ed2      	ldrb	r2, [r2, #27]
 8005452:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	7f12      	ldrb	r2, [r2, #28]
 800545e:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 800546e:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f8e4 	bl	8006646 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f001 f8ed 	bl	8006664 <optiga_comms_open>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8c1b      	ldrh	r3, [r3, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	759a      	strb	r2, [r3, #22]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f240 2202 	movw	r2, #514	@ 0x202
 80054a6:	841a      	strh	r2, [r3, #32]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
                    break;
 80054ae:	e01e      	b.n	80054ee <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	75da      	strb	r2, [r3, #23]
                break;
 80054b6:	e01a      	b.n	80054ee <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80054c0:	2332      	movs	r3, #50	@ 0x32
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4910      	ldr	r1, [pc, #64]	@ (8005508 <optiga_cmd_execute_comms_open+0x128>)
 80054c6:	f002 fa19 	bl	80078fc <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2209      	movs	r2, #9
 80054d4:	75da      	strb	r2, [r3, #23]
                break;
 80054d6:	e00a      	b.n	80054ee <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	759a      	strb	r2, [r3, #22]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f240 2202 	movw	r2, #514	@ 0x202
 80054e4:	841a      	strh	r2, [r3, #32]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
            break;
 80054ec:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <optiga_cmd_execute_comms_open+0x120>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	7d9b      	ldrb	r3, [r3, #22]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f43f af75 	beq.w	80053ea <optiga_cmd_execute_comms_open+0xa>
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	08004bff 	.word	0x08004bff

0800550c <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7ddb      	ldrb	r3, [r3, #23]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d002      	beq.n	800552a <optiga_cmd_execute_comms_close+0x1e>
 8005524:	2b04      	cmp	r3, #4
 8005526:	d068      	beq.n	80055fa <optiga_cmd_execute_comms_close+0xee>
 8005528:	e07a      	b.n	8005620 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7f1b      	ldrb	r3, [r3, #28]
 800552e:	2b22      	cmp	r3, #34	@ 0x22
 8005530:	d002      	beq.n	8005538 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	7e92      	ldrb	r2, [r2, #26]
 8005542:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	7ed2      	ldrb	r2, [r2, #27]
 800554e:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	7f12      	ldrb	r2, [r2, #28]
 8005566:	751a      	strb	r2, [r3, #20]
 8005568:	e004      	b.n	8005574 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2233      	movs	r2, #51	@ 0x33
 8005572:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005592:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	f001 f852 	bl	8006646 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 f8d9 	bl	8006760 <optiga_comms_close>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8c1b      	ldrh	r3, [r3, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	759a      	strb	r2, [r3, #22]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f240 2202 	movw	r2, #514	@ 0x202
 80055ca:	841a      	strh	r2, [r3, #32]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
                    break;
 80055d2:	e031      	b.n	8005638 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7f1b      	ldrb	r3, [r3, #28]
 80055d8:	2b22      	cmp	r3, #34	@ 0x22
 80055da:	d106      	bne.n	80055ea <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2204      	movs	r2, #4
 80055e0:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 80055e8:	e026      	b.n	8005638 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fe75 	bl	80052da <optiga_cmd_release_lock>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	841a      	strh	r2, [r3, #32]
                break;
 80055f8:	e01e      	b.n	8005638 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68d2      	ldr	r2, [r2, #12]
 8005602:	2100      	movs	r1, #0
 8005604:	4610      	mov	r0, r2
 8005606:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	7f1b      	ldrb	r3, [r3, #28]
 800560c:	2b22      	cmp	r3, #34	@ 0x22
 800560e:	d112      	bne.n	8005636 <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fe62 	bl	80052da <optiga_cmd_release_lock>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 800561e:	e00a      	b.n	8005636 <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	759a      	strb	r2, [r3, #22]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f240 2202 	movw	r2, #514	@ 0x202
 800562c:	841a      	strh	r2, [r3, #32]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
            break;
 8005634:	e000      	b.n	8005638 <optiga_cmd_execute_comms_close+0x12c>
                break;
 8005636:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <optiga_cmd_execute_comms_close+0x13e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7d9b      	ldrb	r3, [r3, #22]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f43f af66 	beq.w	8005516 <optiga_cmd_execute_comms_close+0xa>
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005654:	b590      	push	{r4, r7, lr}
 8005656:	b087      	sub	sp, #28
 8005658:	af02      	add	r7, sp, #8
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7ddb      	ldrb	r3, [r3, #23]
 8005668:	3b05      	subs	r3, #5
 800566a:	2b04      	cmp	r3, #4
 800566c:	f200 80d6 	bhi.w	800581c <optiga_cmd_execute_prepare_command+0x1c8>
 8005670:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <optiga_cmd_execute_prepare_command+0x24>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	0800568d 	.word	0x0800568d
 800567c:	0800568d 	.word	0x0800568d
 8005680:	080056e1 	.word	0x080056e1
 8005684:	080056f5 	.word	0x080056f5
 8005688:	08005731 	.word	0x08005731
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7ddb      	ldrb	r3, [r3, #23]
 8005696:	2b05      	cmp	r3, #5
 8005698:	d107      	bne.n	80056aa <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fdf4 	bl	8005288 <optiga_cmd_request_session>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	841a      	strh	r2, [r3, #32]
 80056a8:	e007      	b.n	80056ba <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80056aa:	2121      	movs	r1, #33	@ 0x21
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe04 	bl	80052ba <optiga_cmd_request_lock>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8c1b      	ldrh	r3, [r3, #32]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2204      	movs	r2, #4
 80056c6:	759a      	strb	r2, [r3, #22]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f240 2202 	movw	r2, #514	@ 0x202
 80056ce:	841a      	strh	r2, [r3, #32]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
                    break;
 80056d6:	e0ac      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2209      	movs	r2, #9
 80056dc:	75da      	strb	r2, [r3, #23]
                break;
 80056de:	e0a8      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fdab 	bl	800523c <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2208      	movs	r2, #8
 80056ea:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
                break;
 80056f2:	e09e      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 80056f4:	2123      	movs	r1, #35	@ 0x23
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fddf 	bl	80052ba <optiga_cmd_request_lock>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8c1b      	ldrh	r3, [r3, #32]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2204      	movs	r2, #4
 8005710:	759a      	strb	r2, [r3, #22]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f240 2202 	movw	r2, #514	@ 0x202
 8005718:	841a      	strh	r2, [r3, #32]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
                    break;
 8005720:	e087      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2209      	movs	r2, #9
 8005726:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
                break;
 800572e:	e080      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
 800573c:	4603      	mov	r3, r0
 800573e:	461a      	mov	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8c1b      	ldrh	r3, [r3, #32]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2204      	movs	r2, #4
 8005750:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
                    break;
 8005758:	e06b      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f240 6222 	movw	r2, #1570	@ 0x622
 8005762:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	7e92      	ldrb	r2, [r2, #26]
 800576e:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	7ed2      	ldrb	r2, [r2, #27]
 800577a:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7e9a      	ldrb	r2, [r3, #26]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 ff52 	bl	8006646 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80057b4:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 80057c2:	3306      	adds	r3, #6
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4623      	mov	r3, r4
 80057c8:	f000 ff84 	bl	80066d4 <optiga_comms_transceive>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8c1b      	ldrh	r3, [r3, #32]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2204      	movs	r2, #4
 80057e0:	759a      	strb	r2, [r3, #22]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f240 2202 	movw	r2, #514	@ 0x202
 80057e8:	841a      	strh	r2, [r3, #32]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
                    break;
 80057f0:	e01f      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2203      	movs	r2, #3
 80057f6:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	220a      	movs	r2, #10
 80057fc:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	7f5b      	ldrb	r3, [r3, #29]
 8005802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005806:	b2da      	uxtb	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	775a      	strb	r2, [r3, #29]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7f5b      	ldrb	r3, [r3, #29]
 8005810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005814:	b2da      	uxtb	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	775a      	strb	r2, [r3, #29]
                break;
 800581a:	e00a      	b.n	8005832 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2204      	movs	r2, #4
 8005820:	759a      	strb	r2, [r3, #22]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f240 2202 	movw	r2, #514	@ 0x202
 8005828:	841a      	strh	r2, [r3, #32]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
            break;
 8005830:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <optiga_cmd_execute_prepare_command+0x1f0>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7d9b      	ldrb	r3, [r3, #22]
 800583e:	2b02      	cmp	r3, #2
 8005840:	f43f af10 	beq.w	8005664 <optiga_cmd_execute_prepare_command+0x10>
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	bd90      	pop	{r4, r7, pc}

0800584c <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa69 	bl	8005d34 <optiga_cmd_get_error_code_handler>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8c1b      	ldrh	r3, [r3, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <optiga_cmd_execute_get_device_error+0x30>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8c1b      	ldrh	r3, [r3, #32]
 8005876:	b21b      	sxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	da0a      	bge.n	8005892 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8005880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005884:	d10c      	bne.n	80058a0 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7f5b      	ldrb	r3, [r3, #29]
 800588a:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 800588e:	2b03      	cmp	r3, #3
 8005890:	d106      	bne.n	80058a0 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2204      	movs	r2, #4
 8005896:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
            break;
 800589e:	bf00      	nop
        }
    } while (FALSE);
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7f5b      	ldrb	r3, [r3, #29]
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da0b      	bge.n	80058e0 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8c1b      	ldrh	r3, [r3, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d14e      	bne.n	800597c <optiga_cmd_execute_process_optiga_response+0xd4>
 80058de:	e006      	b.n	80058ee <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2204      	movs	r2, #4
 80058e4:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
            break;
 80058ec:	e06f      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2bf1      	cmp	r3, #241	@ 0xf1
 80058f6:	d113      	bne.n	8005920 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4934      	ldr	r1, [pc, #208]	@ (80059d8 <optiga_cmd_execute_process_optiga_response+0x130>)
 8005908:	f001 fff8 	bl	80078fc <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2203      	movs	r2, #3
 800591c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 800591e:	e056      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7e1b      	ldrb	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10e      	bne.n	8005946 <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7ddb      	ldrb	r3, [r3, #23]
 800592c:	2b0e      	cmp	r3, #14
 800592e:	d006      	beq.n	800593e <optiga_cmd_execute_process_optiga_response+0x96>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7ddb      	ldrb	r3, [r3, #23]
 8005934:	2b0d      	cmp	r3, #13
 8005936:	d002      	beq.n	800593e <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	220c      	movs	r2, #12
 800593c:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
                    break;
 8005944:	e043      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 800594e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4920      	ldr	r1, [pc, #128]	@ (80059d8 <optiga_cmd_execute_process_optiga_response+0x130>)
 8005956:	f001 ffd1 	bl	80078fc <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7e9b      	ldrb	r3, [r3, #26]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	b2da      	uxtb	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2209      	movs	r2, #9
 8005978:	75da      	strb	r2, [r3, #23]
}
 800597a:	e028      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8c1b      	ldrh	r3, [r3, #32]
 8005980:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8005984:	d106      	bne.n	8005994 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	220c      	movs	r2, #12
 800598a:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
                break;
 8005992:	e01c      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	7ddb      	ldrb	r3, [r3, #23]
 8005998:	2b0d      	cmp	r3, #13
 800599a:	d103      	bne.n	80059a4 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
}
 80059a2:	e014      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	220b      	movs	r2, #11
 80059a8:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	7f5b      	ldrb	r3, [r3, #29]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	775a      	strb	r2, [r3, #29]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7f5b      	ldrb	r3, [r3, #29]
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
}
 80059cc:	e7ff      	b.n	80059ce <optiga_cmd_execute_process_optiga_response+0x126>
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	08004bff 	.word	0x08004bff

080059dc <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7ddb      	ldrb	r3, [r3, #23]
 80059ea:	3b0a      	subs	r3, #10
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d84d      	bhi.n	8005a8c <optiga_cmd_execute_process_response+0xb0>
 80059f0:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <optiga_cmd_execute_process_response+0x1c>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a0d 	.word	0x08005a0d
 80059fc:	08005a17 	.word	0x08005a17
 8005a00:	08005a61 	.word	0x08005a61
 8005a04:	08005a21 	.word	0x08005a21
 8005a08:	08005a75 	.word	0x08005a75
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff4a 	bl	80058a8 <optiga_cmd_execute_process_optiga_response>
                break;
 8005a14:	e045      	b.n	8005aa2 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff17 	bl	800584c <optiga_cmd_execute_get_device_error>
                break;
 8005a1e:	e040      	b.n	8005aa2 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fc3e 	bl	80052a2 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8c1b      	ldrh	r3, [r3, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	220c      	movs	r2, #12
 8005a32:	75da      	strb	r2, [r3, #23]
 8005a34:	e010      	b.n	8005a58 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	220b      	movs	r2, #11
 8005a3a:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	7f5b      	ldrb	r3, [r3, #29]
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	775a      	strb	r2, [r3, #29]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7f5b      	ldrb	r3, [r3, #29]
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
                break;
 8005a5e:	e020      	b.n	8005aa2 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fc3a 	bl	80052da <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	220e      	movs	r2, #14
 8005a6a:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
                break;
 8005a72:	e016      	b.n	8005aa2 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68d0      	ldr	r0, [r2, #12]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	8c12      	ldrh	r2, [r2, #32]
 8005a80:	4611      	mov	r1, r2
 8005a82:	4798      	blx	r3
                *exit_loop = TRUE;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
                break;
 8005a8a:	e00a      	b.n	8005aa2 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	759a      	strb	r2, [r3, #22]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f240 2202 	movw	r2, #514	@ 0x202
 8005a98:	841a      	strh	r2, [r3, #32]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
            break;
 8005aa0:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <optiga_cmd_execute_process_response+0xd6>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	7d9b      	ldrb	r3, [r3, #22]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d099      	beq.n	80059e6 <optiga_cmd_execute_process_response+0xa>
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fc07 	bl	80052da <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68d0      	ldr	r0, [r2, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	8c12      	ldrh	r2, [r2, #32]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4798      	blx	r3
        *exit_loop = TRUE;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fc31 	bl	800536e <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2204      	movs	r2, #4
 8005b10:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	887a      	ldrh	r2, [r7, #2]
 8005b16:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	7d9b      	ldrb	r3, [r3, #22]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d830      	bhi.n	8005b82 <optiga_cmd_execute_handler+0x96>
 8005b20:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <optiga_cmd_execute_handler+0x3c>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b3d 	.word	0x08005b3d
 8005b2c:	08005b4b 	.word	0x08005b4b
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b67 	.word	0x08005b67
 8005b38:	08005b75 	.word	0x08005b75
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8005b3c:	f107 030b 	add.w	r3, r7, #11
 8005b40:	4619      	mov	r1, r3
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fc4c 	bl	80053e0 <optiga_cmd_execute_comms_open>
                break;
 8005b48:	e01c      	b.n	8005b84 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8005b4a:	f107 030b 	add.w	r3, r7, #11
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff fcdb 	bl	800550c <optiga_cmd_execute_comms_close>
                break;
 8005b56:	e015      	b.n	8005b84 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8005b58:	f107 030b 	add.w	r3, r7, #11
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff fd78 	bl	8005654 <optiga_cmd_execute_prepare_command>
                break;
 8005b64:	e00e      	b.n	8005b84 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8005b66:	f107 030b 	add.w	r3, r7, #11
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff ff35 	bl	80059dc <optiga_cmd_execute_process_response>
                break;
 8005b72:	e007      	b.n	8005b84 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8005b74:	f107 030b 	add.w	r3, r7, #11
 8005b78:	4619      	mov	r1, r3
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff ff9e 	bl	8005abc <optiga_cmd_execute_error_handler>
                break;
 8005b80:	e000      	b.n	8005b84 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 8005b82:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0c6      	beq.n	8005b18 <optiga_cmd_execute_handler+0x2c>
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8005ba6:	f001 ff17 	bl	80079d8 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15b      	bne.n	8005c68 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	4a33      	ldr	r2, [pc, #204]	@ (8005c80 <optiga_cmd_create+0xec>)
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2109      	movs	r1, #9
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff f8b9 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d051      	beq.n	8005c6c <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 8005bc8:	2128      	movs	r1, #40	@ 0x28
 8005bca:	2001      	movs	r0, #1
 8005bcc:	f001 ff12 	bl	80079f4 <pal_os_calloc>
 8005bd0:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d04b      	beq.n	8005c70 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	4a26      	ldr	r2, [pc, #152]	@ (8005c80 <optiga_cmd_create+0xec>)
 8005be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	4a24      	ldr	r2, [pc, #144]	@ (8005c84 <optiga_cmd_create+0xf0>)
 8005bf4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	7b1b      	ldrb	r3, [r3, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d129      	bne.n	8005c5a <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681c      	ldr	r4, [r3, #0]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	481d      	ldr	r0, [pc, #116]	@ (8005c88 <optiga_cmd_create+0xf4>)
 8005c12:	f001 fe5b 	bl	80078cc <pal_os_event_create>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681c      	ldr	r4, [r3, #0]
 8005c20:	6979      	ldr	r1, [r7, #20]
 8005c22:	481a      	ldr	r0, [pc, #104]	@ (8005c8c <optiga_cmd_create+0xf8>)
 8005c24:	f000 fcd2 	bl	80065cc <optiga_comms_create>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d105      	bne.n	8005c42 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8005c36:	6978      	ldr	r0, [r7, #20]
 8005c38:	f001 feea 	bl	8007a10 <pal_os_free>
                me = NULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
                break;
 8005c40:	e017      	b.n	8005c72 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2201      	movs	r2, #1
 8005c48:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005c58:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	331e      	adds	r3, #30
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6978      	ldr	r0, [r7, #20]
 8005c62:	f7ff f8a8 	bl	8004db6 <optiga_cmd_queue_assign_slot>
 8005c66:	e004      	b.n	8005c72 <optiga_cmd_create+0xde>
            break;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <optiga_cmd_create+0xde>
            break;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <optiga_cmd_create+0xde>
            break;
 8005c70:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8005c72:	f001 feb8 	bl	80079e6 <pal_os_lock_exit_critical_section>
    return (me);
 8005c76:	697b      	ldr	r3, [r7, #20]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd90      	pop	{r4, r7, pc}
 8005c80:	200004d0 	.word	0x200004d0
 8005c84:	200004d4 	.word	0x200004d4
 8005c88:	08004e6d 	.word	0x08004e6d
 8005c8c:	08005aed 	.word	0x08005aed

08005c90 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005c98:	f240 2302 	movw	r3, #514	@ 0x202
 8005c9c:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 8005c9e:	f001 fe9b 	bl	80079d8 <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d03c      	beq.n	8005d22 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fafa 	bl	80052a2 <optiga_cmd_release_session>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff f8b1 	bl	8004e1a <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 8005cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <optiga_cmd_destroy+0xa0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2109      	movs	r1, #9
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff f837 	bl	8004d34 <optiga_cmd_queue_get_count_of>
 8005cc6:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d125      	bne.n	8005d18 <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	7b1b      	ldrb	r3, [r3, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d120      	bne.n	8005d18 <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fde6 	bl	80078b0 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fc8b 	bl	8006618 <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fe56 	bl	80079c4 <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 fe79 	bl	8007a10 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 8005d22:	f001 fe60 	bl	80079e6 <pal_os_lock_exit_critical_section>

    return (return_status);
 8005d26:	89fb      	ldrh	r3, [r7, #14]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	200004d0 	.word	0x200004d0

08005d34 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8005d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d40:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005d42:	2309      	movs	r3, #9
 8005d44:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	7f5b      	ldrb	r3, [r3, #29]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	f000 8099 	beq.w	8005e8c <optiga_cmd_get_error_code_handler+0x158>
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	f300 80b6 	bgt.w	8005ecc <optiga_cmd_get_error_code_handler+0x198>
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d002      	beq.n	8005d6a <optiga_cmd_get_error_code_handler+0x36>
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d052      	beq.n	8005e0e <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 8005d68:	e0b0      	b.n	8005ecc <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f103 020d 	add.w	r2, r3, #13
 8005d72:	89bb      	ldrh	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fea6 	bl	8006acc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005d80:	89bb      	ldrh	r3, [r7, #12]
 8005d82:	3302      	adds	r3, #2
 8005d84:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f103 020d 	add.w	r2, r3, #13
 8005d8e:	89bb      	ldrh	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fe99 	bl	8006acc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f103 020d 	add.w	r2, r3, #13
 8005da8:	89bb      	ldrh	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	2101      	movs	r1, #1
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fe8c 	bl	8006acc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005db4:	89bb      	ldrh	r3, [r7, #12]
 8005db6:	3302      	adds	r3, #2
 8005db8:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8005dba:	89bb      	ldrh	r3, [r7, #12]
 8005dbc:	3b09      	subs	r3, #9
 8005dbe:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8005dc6:	3305      	adds	r3, #5
 8005dc8:	2100      	movs	r1, #0
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f7fe fec3 	bl	8004b56 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	89ba      	ldrh	r2, [r7, #12]
 8005dd6:	3a05      	subs	r2, #5
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7f5b      	ldrb	r3, [r3, #29]
 8005de0:	f023 0303 	bic.w	r3, r3, #3
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	775a      	strb	r2, [r3, #29]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7f5b      	ldrb	r3, [r3, #29]
 8005dee:	f043 0302 	orr.w	r3, r3, #2
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005e00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4935      	ldr	r1, [pc, #212]	@ (8005edc <optiga_cmd_get_error_code_handler+0x1a8>)
 8005e08:	f001 fd78 	bl	80078fc <pal_os_event_register_callback_oneshot>
        break;
 8005e0c:	e061      	b.n	8005ed2 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f240 6222 	movw	r2, #1570	@ 0x622
 8005e16:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	7e92      	ldrb	r2, [r2, #26]
 8005e22:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	7ed2      	ldrb	r2, [r2, #27]
 8005e2e:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fc05 	bl	8006646 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3306      	adds	r3, #6
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4623      	mov	r3, r4
 8005e58:	f000 fc3c 	bl	80066d4 <optiga_comms_transceive>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 8005e66:	f240 2302 	movw	r3, #514	@ 0x202
 8005e6a:	81fb      	strh	r3, [r7, #14]
                break;
 8005e6c:	e031      	b.n	8005ed2 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7f5b      	ldrb	r3, [r3, #29]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	775a      	strb	r2, [r3, #29]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	7f5b      	ldrb	r3, [r3, #29]
 8005e80:	f043 0303 	orr.w	r3, r3, #3
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	775a      	strb	r2, [r3, #29]
        break;
 8005e8a:	e022      	b.n	8005ed2 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	7c9b      	ldrb	r3, [r3, #18]
 8005e92:	2bff      	cmp	r3, #255	@ 0xff
 8005e94:	d01c      	beq.n	8005ed0 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	7d9b      	ldrb	r3, [r3, #22]
 8005e9c:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2203      	movs	r2, #3
 8005eae:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	4905      	ldr	r1, [pc, #20]	@ (8005edc <optiga_cmd_get_error_code_handler+0x1a8>)
 8005ec6:	f001 fd19 	bl	80078fc <pal_os_event_register_callback_oneshot>
        break;
 8005eca:	e002      	b.n	8005ed2 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005ecc:	bf00      	nop
 8005ece:	e000      	b.n	8005ed2 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005ed0:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd90      	pop	{r4, r7, pc}
 8005edc:	08004bff 	.word	0x08004bff

08005ee0 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005ee8:	f240 2302 	movw	r3, #514	@ 0x202
 8005eec:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7d9b      	ldrb	r3, [r3, #22]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d002      	beq.n	8005efc <optiga_cmd_open_application_handler+0x1c>
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d07a      	beq.n	8005ff0 <optiga_cmd_open_application_handler+0x110>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 8005efa:	e0a2      	b.n	8006042 <optiga_cmd_open_application_handler+0x162>
            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");
 8005efc:	4a53      	ldr	r2, [pc, #332]	@ (800604c <optiga_cmd_open_application_handler+0x16c>)
 8005efe:	4954      	ldr	r1, [pc, #336]	@ (8006050 <optiga_cmd_open_application_handler+0x170>)
 8005f00:	4854      	ldr	r0, [pc, #336]	@ (8006054 <optiga_cmd_open_application_handler+0x174>)
 8005f02:	f000 ff65 	bl	8006dd0 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8005f06:	2314      	movs	r3, #20
 8005f08:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7e5b      	ldrb	r3, [r3, #25]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <optiga_cmd_open_application_handler+0x36>
 8005f12:	2200      	movs	r2, #0
 8005f14:	e000      	b.n	8005f18 <optiga_cmd_open_application_handler+0x38>
 8005f16:	2208      	movs	r2, #8
 8005f18:	89bb      	ldrh	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005f1e:	89bb      	ldrh	r3, [r7, #12]
 8005f20:	f240 6215 	movw	r2, #1557	@ 0x615
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d903      	bls.n	8005f30 <optiga_cmd_open_application_handler+0x50>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005f28:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005f2c:	81fb      	strh	r3, [r7, #14]
                break;
 8005f2e:	e088      	b.n	8006042 <optiga_cmd_open_application_handler+0x162>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	7e5b      	ldrb	r3, [r3, #25]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <optiga_cmd_open_application_handler+0x64>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff f9da 	bl	80052f2 <optiga_cmd_restore_context>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d17d      	bne.n	8006040 <optiga_cmd_open_application_handler+0x160>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <optiga_cmd_open_application_handler+0x74>
 8005f50:	2210      	movs	r2, #16
 8005f52:	e000      	b.n	8005f56 <optiga_cmd_open_application_handler+0x76>
 8005f54:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005f5c:	3305      	adds	r3, #5
 8005f5e:	20f0      	movs	r0, #240	@ 0xf0
 8005f60:	f7fe fdf9 	bl	8004b56 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330d      	adds	r3, #13
 8005f6a:	3309      	adds	r3, #9
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	493a      	ldr	r1, [pc, #232]	@ (8006058 <optiga_cmd_open_application_handler+0x178>)
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 fd58 	bl	8007a26 <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7e5b      	ldrb	r3, [r3, #25]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <optiga_cmd_open_application_handler+0xb6>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005f8e:	2208      	movs	r2, #8
 8005f90:	4619      	mov	r1, r3
 8005f92:	f001 fd48 	bl	8007a26 <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <optiga_cmd_open_application_handler+0xc2>
 8005f9e:	2214      	movs	r2, #20
 8005fa0:	e000      	b.n	8005fa4 <optiga_cmd_open_application_handler+0xc4>
 8005fa2:	221c      	movs	r2, #28
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 fd44 	bl	8007a44 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <optiga_cmd_open_application_handler+0x10a>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f001 fb4e 	bl	8007674 <pal_os_datastore_write>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005fdc:	89fb      	ldrh	r3, [r7, #14]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <optiga_cmd_open_application_handler+0x10a>
                    return_status = OPTIGA_CMD_ERROR;
 8005fe2:	f240 2302 	movw	r3, #514	@ 0x202
 8005fe6:	81fb      	strh	r3, [r7, #14]
                    break;
 8005fe8:	e02b      	b.n	8006042 <optiga_cmd_open_application_handler+0x162>
            return_status = OPTIGA_LIB_SUCCESS;
 8005fea:	2300      	movs	r3, #0
 8005fec:	81fb      	strh	r3, [r7, #14]
        break;
 8005fee:	e028      	b.n	8006042 <optiga_cmd_open_application_handler+0x162>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");
 8005ff0:	4a16      	ldr	r2, [pc, #88]	@ (800604c <optiga_cmd_open_application_handler+0x16c>)
 8005ff2:	4917      	ldr	r1, [pc, #92]	@ (8006050 <optiga_cmd_open_application_handler+0x170>)
 8005ff4:	4819      	ldr	r0, [pc, #100]	@ (800605c <optiga_cmd_open_application_handler+0x17c>)
 8005ff6:	f000 feeb 	bl	8006dd0 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	7c9b      	ldrb	r3, [r3, #18]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d010      	beq.n	8006026 <optiga_cmd_open_application_handler+0x146>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
 8006004:	4a11      	ldr	r2, [pc, #68]	@ (800604c <optiga_cmd_open_application_handler+0x16c>)
 8006006:	4912      	ldr	r1, [pc, #72]	@ (8006050 <optiga_cmd_open_application_handler+0x170>)
 8006008:	4815      	ldr	r0, [pc, #84]	@ (8006060 <optiga_cmd_open_application_handler+0x180>)
 800600a:	f000 fee1 	bl	8006dd0 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7f5b      	ldrb	r3, [r3, #29]
 8006012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	775a      	strb	r2, [r3, #29]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7f5a      	ldrb	r2, [r3, #29]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	775a      	strb	r2, [r3, #29]
                break;
 8006024:	e00d      	b.n	8006042 <optiga_cmd_open_application_handler+0x162>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2233      	movs	r2, #51	@ 0x33
 800602e:	751a      	strb	r2, [r3, #20]
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
 8006030:	4a06      	ldr	r2, [pc, #24]	@ (800604c <optiga_cmd_open_application_handler+0x16c>)
 8006032:	4907      	ldr	r1, [pc, #28]	@ (8006050 <optiga_cmd_open_application_handler+0x170>)
 8006034:	480b      	ldr	r0, [pc, #44]	@ (8006064 <optiga_cmd_open_application_handler+0x184>)
 8006036:	f000 fecb 	bl	8006dd0 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
 800603a:	2300      	movs	r3, #0
 800603c:	81fb      	strh	r3, [r7, #14]
        break;
 800603e:	e000      	b.n	8006042 <optiga_cmd_open_application_handler+0x162>
                    break;
 8006040:	bf00      	nop
    }

    return (return_status);
 8006042:	89fb      	ldrh	r3, [r7, #14]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	08012880 	.word	0x08012880
 8006050:	08012888 	.word	0x08012888
 8006054:	080128a0 	.word	0x080128a0
 8006058:	08013574 	.word	0x08013574
 800605c:	080128bc 	.word	0x080128bc
 8006060:	080128e8 	.word	0x080128e8
 8006064:	08012914 	.word	0x08012914

08006068 <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af04      	add	r7, sp, #16
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	460b      	mov	r3, r1
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 8006076:	4a0b      	ldr	r2, [pc, #44]	@ (80060a4 <optiga_cmd_open_application+0x3c>)
 8006078:	490b      	ldr	r1, [pc, #44]	@ (80060a8 <optiga_cmd_open_application+0x40>)
 800607a:	480c      	ldr	r0, [pc, #48]	@ (80060ac <optiga_cmd_open_application+0x44>)
 800607c:	f000 fea8 	bl	8006dd0 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8006080:	7af9      	ldrb	r1, [r7, #11]
 8006082:	23f0      	movs	r3, #240	@ 0xf0
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	2300      	movs	r3, #0
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	4a07      	ldr	r2, [pc, #28]	@ (80060b0 <optiga_cmd_open_application+0x48>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7fe fdbf 	bl	8004c16 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	08012880 	.word	0x08012880
 80060a8:	08012888 	.word	0x08012888
 80060ac:	08013584 	.word	0x08013584
 80060b0:	08005ee1 	.word	0x08005ee1

080060b4 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80060c2:	f240 2302 	movw	r3, #514	@ 0x202
 80060c6:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80060c8:	2309      	movs	r3, #9
 80060ca:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 80060cc:	2381      	movs	r3, #129	@ 0x81
 80060ce:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7d9b      	ldrb	r3, [r3, #22]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d002      	beq.n	80060de <optiga_cmd_get_data_object_handler+0x2a>
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d073      	beq.n	80061c4 <optiga_cmd_get_data_object_handler+0x110>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 80060dc:	e105      	b.n	80062ea <optiga_cmd_get_data_object_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Sending read data command...");
 80060de:	4a85      	ldr	r2, [pc, #532]	@ (80062f4 <optiga_cmd_get_data_object_handler+0x240>)
 80060e0:	4985      	ldr	r1, [pc, #532]	@ (80062f8 <optiga_cmd_get_data_object_handler+0x244>)
 80060e2:	4886      	ldr	r0, [pc, #536]	@ (80062fc <optiga_cmd_get_data_object_handler+0x248>)
 80060e4:	f000 fe74 	bl	8006dd0 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80060e8:	230a      	movs	r3, #10
 80060ea:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80060ec:	8a3b      	ldrh	r3, [r7, #16]
 80060ee:	f240 6215 	movw	r2, #1557	@ 0x615
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d907      	bls.n	8006106 <optiga_cmd_get_data_object_handler+0x52>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80060f6:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80060fa:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2200      	movs	r2, #0
 8006102:	801a      	strh	r2, [r3, #0]
                break;
 8006104:	e0f1      	b.n	80062ea <optiga_cmd_get_data_object_handler+0x236>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	8bbb      	ldrh	r3, [r7, #28]
 800610c:	3308      	adds	r3, #8
 800610e:	4413      	add	r3, r2
 8006110:	1d5a      	adds	r2, r3, #5
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	891b      	ldrh	r3, [r3, #8]
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 fcd7 	bl	8006acc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800611e:	8bbb      	ldrh	r3, [r7, #28]
 8006120:	3302      	adds	r3, #2
 8006122:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	899b      	ldrh	r3, [r3, #12]
 8006128:	461a      	mov	r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	89db      	ldrh	r3, [r3, #14]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	f240 6211 	movw	r2, #1553	@ 0x611
 8006134:	4293      	cmp	r3, r2
 8006136:	bfa8      	it	ge
 8006138:	4613      	movge	r3, r2
 800613a:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	7c9b      	ldrb	r3, [r3, #18]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11f      	bne.n	8006184 <optiga_cmd_get_data_object_handler+0xd0>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	8bbb      	ldrh	r3, [r7, #28]
 800614a:	3308      	adds	r3, #8
 800614c:	4413      	add	r3, r2
 800614e:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	895a      	ldrh	r2, [r3, #10]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006158:	4413      	add	r3, r2
 800615a:	b29b      	uxth	r3, r3
 800615c:	4619      	mov	r1, r3
 800615e:	f000 fcb5 	bl	8006acc <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006162:	8bbb      	ldrh	r3, [r7, #28]
 8006164:	3302      	adds	r3, #2
 8006166:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	8bbb      	ldrh	r3, [r7, #28]
 800616e:	3308      	adds	r3, #8
 8006170:	4413      	add	r3, r2
 8006172:	3305      	adds	r3, #5
 8006174:	89fa      	ldrh	r2, [r7, #14]
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fca7 	bl	8006acc <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800617e:	8bbb      	ldrh	r3, [r7, #28]
 8006180:	3302      	adds	r3, #2
 8006182:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	891b      	ldrh	r3, [r3, #8]
 8006188:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 800618c:	4293      	cmp	r3, r2
 800618e:	d101      	bne.n	8006194 <optiga_cmd_get_data_object_handler+0xe0>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8006190:	2301      	movs	r3, #1
 8006192:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	7e59      	ldrb	r1, [r3, #25]
 8006198:	8bbb      	ldrh	r3, [r7, #28]
 800619a:	3b09      	subs	r3, #9
 800619c:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 80061a4:	3305      	adds	r3, #5
 80061a6:	7ef8      	ldrb	r0, [r7, #27]
 80061a8:	f7fe fcd5 	bl	8004b56 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	8bba      	ldrh	r2, [r7, #28]
 80061b2:	3a05      	subs	r2, #5
 80061b4:	b292      	uxth	r2, r2
 80061b6:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	89fa      	ldrh	r2, [r7, #14]
 80061bc:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 80061be:	2300      	movs	r3, #0
 80061c0:	83fb      	strh	r3, [r7, #30]
        break;
 80061c2:	e092      	b.n	80062ea <optiga_cmd_get_data_object_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
 80061c4:	4a4b      	ldr	r2, [pc, #300]	@ (80062f4 <optiga_cmd_get_data_object_handler+0x240>)
 80061c6:	494c      	ldr	r1, [pc, #304]	@ (80062f8 <optiga_cmd_get_data_object_handler+0x244>)
 80061c8:	484d      	ldr	r0, [pc, #308]	@ (8006300 <optiga_cmd_get_data_object_handler+0x24c>)
 80061ca:	f000 fe01 	bl	8006dd0 <optiga_lib_print_message>
            me->chaining_ongoing = FALSE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	7c9b      	ldrb	r3, [r3, #18]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d02a      	beq.n	8006234 <optiga_cmd_get_data_object_handler+0x180>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
 80061de:	4a45      	ldr	r2, [pc, #276]	@ (80062f4 <optiga_cmd_get_data_object_handler+0x240>)
 80061e0:	4945      	ldr	r1, [pc, #276]	@ (80062f8 <optiga_cmd_get_data_object_handler+0x244>)
 80061e2:	4848      	ldr	r0, [pc, #288]	@ (8006304 <optiga_cmd_get_data_object_handler+0x250>)
 80061e4:	f000 fdf4 	bl	8006dd0 <optiga_lib_print_message>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	89db      	ldrh	r3, [r3, #14]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7f5b      	ldrb	r3, [r3, #29]
 80061f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	775a      	strb	r2, [r3, #29]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	7f5b      	ldrb	r3, [r3, #29]
 8006202:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	775a      	strb	r2, [r3, #29]
 800620c:	e00e      	b.n	800622c <optiga_cmd_get_data_object_handler+0x178>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7f5b      	ldrb	r3, [r3, #29]
 8006212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006216:	b2da      	uxtb	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	775a      	strb	r2, [r3, #29]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7f5a      	ldrb	r2, [r3, #29]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 800622c:	f240 2302 	movw	r3, #514	@ 0x202
 8006230:	83fb      	strh	r3, [r7, #30]
        break;
 8006232:	e059      	b.n	80062e8 <optiga_cmd_get_data_object_handler+0x234>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8c1b      	ldrh	r3, [r3, #32]
 8006238:	f248 0208 	movw	r2, #32776	@ 0x8008
 800623c:	4293      	cmp	r3, r2
 800623e:	d107      	bne.n	8006250 <optiga_cmd_get_data_object_handler+0x19c>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	89d2      	ldrh	r2, [r2, #14]
 8006248:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 800624a:	2300      	movs	r3, #0
 800624c:	83fb      	strh	r3, [r7, #30]
        break;
 800624e:	e04b      	b.n	80062e8 <optiga_cmd_get_data_object_handler+0x234>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	88db      	ldrh	r3, [r3, #6]
 8006256:	3b04      	subs	r3, #4
 8006258:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	899b      	ldrh	r3, [r3, #12]
 800625e:	8a7a      	ldrh	r2, [r7, #18]
 8006260:	429a      	cmp	r2, r3
 8006262:	d90c      	bls.n	800627e <optiga_cmd_get_data_object_handler+0x1ca>
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
 8006264:	4a23      	ldr	r2, [pc, #140]	@ (80062f4 <optiga_cmd_get_data_object_handler+0x240>)
 8006266:	4924      	ldr	r1, [pc, #144]	@ (80062f8 <optiga_cmd_get_data_object_handler+0x244>)
 8006268:	4826      	ldr	r0, [pc, #152]	@ (8006304 <optiga_cmd_get_data_object_handler+0x250>)
 800626a:	f000 fdb1 	bl	8006dd0 <optiga_lib_print_message>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800626e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8006272:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2200      	movs	r2, #0
 800627a:	801a      	strh	r2, [r3, #0]
                    break;
 800627c:	e035      	b.n	80062ea <optiga_cmd_get_data_object_handler+0x236>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	89d2      	ldrh	r2, [r2, #14]
 8006286:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 800628e:	3309      	adds	r3, #9
 8006290:	8a7a      	ldrh	r2, [r7, #18]
 8006292:	4619      	mov	r1, r3
 8006294:	f001 fbc7 	bl	8007a26 <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	89da      	ldrh	r2, [r3, #14]
 800629c:	8a7b      	ldrh	r3, [r7, #18]
 800629e:	4413      	add	r3, r2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	8a1b      	ldrh	r3, [r3, #16]
 80062aa:	8a7a      	ldrh	r2, [r7, #18]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d305      	bcc.n	80062bc <optiga_cmd_get_data_object_handler+0x208>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	89da      	ldrh	r2, [r3, #14]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d10b      	bne.n	80062d4 <optiga_cmd_get_data_object_handler+0x220>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	89d2      	ldrh	r2, [r2, #14]
 80062c4:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2200      	movs	r2, #0
 80062d0:	821a      	strh	r2, [r3, #16]
 80062d2:	e002      	b.n	80062da <optiga_cmd_get_data_object_handler+0x226>
                    me->chaining_ongoing = TRUE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	761a      	strb	r2, [r3, #24]
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
 80062da:	4a06      	ldr	r2, [pc, #24]	@ (80062f4 <optiga_cmd_get_data_object_handler+0x240>)
 80062dc:	4906      	ldr	r1, [pc, #24]	@ (80062f8 <optiga_cmd_get_data_object_handler+0x244>)
 80062de:	480a      	ldr	r0, [pc, #40]	@ (8006308 <optiga_cmd_get_data_object_handler+0x254>)
 80062e0:	f000 fd76 	bl	8006dd0 <optiga_lib_print_message>
                return_status = OPTIGA_LIB_SUCCESS;
 80062e4:	2300      	movs	r3, #0
 80062e6:	83fb      	strh	r3, [r7, #30]
        break;
 80062e8:	bf00      	nop
    }

    return (return_status);
 80062ea:	8bfb      	ldrh	r3, [r7, #30]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	08012880 	.word	0x08012880
 80062f8:	08012888 	.word	0x08012888
 80062fc:	080129ec 	.word	0x080129ec
 8006300:	08012a0c 	.word	0x08012a0c
 8006304:	08012a3c 	.word	0x08012a3c
 8006308:	08012a68 	.word	0x08012a68

0800630c <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af04      	add	r7, sp, #16
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	460b      	mov	r3, r1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 800631a:	4a0b      	ldr	r2, [pc, #44]	@ (8006348 <optiga_cmd_get_data_object+0x3c>)
 800631c:	490b      	ldr	r1, [pc, #44]	@ (800634c <optiga_cmd_get_data_object+0x40>)
 800631e:	480c      	ldr	r0, [pc, #48]	@ (8006350 <optiga_cmd_get_data_object+0x44>)
 8006320:	f000 fd56 	bl	8006dd0 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8006324:	7af9      	ldrb	r1, [r7, #11]
 8006326:	2381      	movs	r3, #129	@ 0x81
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	2306      	movs	r3, #6
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	2302      	movs	r3, #2
 8006334:	4a07      	ldr	r2, [pc, #28]	@ (8006354 <optiga_cmd_get_data_object+0x48>)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7fe fc6d 	bl	8004c16 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	08012880 	.word	0x08012880
 800634c:	08012888 	.word	0x08012888
 8006350:	080135a0 	.word	0x080135a0
 8006354:	080060b5 	.word	0x080060b5

08006358 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8006366:	2309      	movs	r3, #9
 8006368:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800636a:	f240 2302 	movw	r3, #514	@ 0x202
 800636e:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7d9b      	ldrb	r3, [r3, #22]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d003      	beq.n	8006380 <optiga_cmd_verify_sign_handler+0x28>
 8006378:	2b03      	cmp	r3, #3
 800637a:	f000 80cc 	beq.w	8006516 <optiga_cmd_verify_sign_handler+0x1be>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 800637e:	e0ed      	b.n	800655c <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
 8006380:	4a79      	ldr	r2, [pc, #484]	@ (8006568 <optiga_cmd_verify_sign_handler+0x210>)
 8006382:	497a      	ldr	r1, [pc, #488]	@ (800656c <optiga_cmd_verify_sign_handler+0x214>)
 8006384:	487a      	ldr	r0, [pc, #488]	@ (8006570 <optiga_cmd_verify_sign_handler+0x218>)
 8006386:	f000 fd23 	bl	8006dd0 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	7c1b      	ldrb	r3, [r3, #16]
 800638e:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	899b      	ldrh	r3, [r3, #12]
 8006394:	4413      	add	r3, r2
 8006396:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <optiga_cmd_verify_sign_handler+0x54>
                                     p_optiga_verify_sign->public_key->length));
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80063a6:	3309      	adds	r3, #9
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	e000      	b.n	80063ae <optiga_cmd_verify_sign_handler+0x56>
 80063ac:	2305      	movs	r3, #5
 80063ae:	4413      	add	r3, r2
 80063b0:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80063b2:	330a      	adds	r3, #10
 80063b4:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80063b6:	89fb      	ldrh	r3, [r7, #14]
 80063b8:	f240 6215 	movw	r2, #1557	@ 0x615
 80063bc:	4293      	cmp	r3, r2
 80063be:	d903      	bls.n	80063c8 <optiga_cmd_verify_sign_handler+0x70>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80063c0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80063c4:	82fb      	strh	r3, [r7, #22]
                break;
 80063c6:	e0c9      	b.n	800655c <optiga_cmd_verify_sign_handler+0x204>
                                          p_optiga_verify_sign->digest_length,
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80063cc:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	2001      	movs	r0, #1
 80063dc:	f7fe fbde 	bl	8004b9c <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330d      	adds	r3, #13
 80063e6:	89ba      	ldrh	r2, [r7, #12]
 80063e8:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80063f2:	461a      	mov	r2, r3
 80063f4:	f001 fb17 	bl	8007a26 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	7c1b      	ldrb	r3, [r3, #16]
 80063fc:	461a      	mov	r2, r3
 80063fe:	89bb      	ldrh	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8006412:	f107 030c 	add.w	r3, r7, #12
 8006416:	2002      	movs	r0, #2
 8006418:	f7fe fbc0 	bl	8004b9c <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330d      	adds	r3, #13
 8006422:	89ba      	ldrh	r2, [r7, #12]
 8006424:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800642e:	461a      	mov	r2, r3
 8006430:	f001 faf9 	bl	8007a26 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	899a      	ldrh	r2, [r3, #12]
 8006438:	89bb      	ldrh	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	b29b      	uxth	r3, r3
 800643e:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	7c5b      	ldrb	r3, [r3, #17]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d119      	bne.n	800647c <optiga_cmd_verify_sign_handler+0x124>
                                              me->p_optiga->optiga_comms_buffer,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 8006450:	f107 030c 	add.w	r3, r7, #12
 8006454:	2102      	movs	r1, #2
 8006456:	2004      	movs	r0, #4
 8006458:	f7fe fba0 	bl	8004b9c <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330d      	adds	r3, #13
 8006462:	89ba      	ldrh	r2, [r7, #12]
 8006464:	441a      	add	r2, r3
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	89db      	ldrh	r3, [r3, #14]
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f000 fb2d 	bl	8006acc <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8006472:	89bb      	ldrh	r3, [r7, #12]
 8006474:	3302      	adds	r3, #2
 8006476:	b29b      	uxth	r3, r3
 8006478:	81bb      	strh	r3, [r7, #12]
 800647a:	e037      	b.n	80064ec <optiga_cmd_verify_sign_handler+0x194>
                                              me->p_optiga->optiga_comms_buffer,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	2101      	movs	r1, #1
 800648a:	2005      	movs	r0, #5
 800648c:	f7fe fb86 	bl	8004b9c <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f103 010d 	add.w	r1, r3, #13
 800649c:	89bb      	ldrh	r3, [r7, #12]
 800649e:	1c58      	adds	r0, r3, #1
 80064a0:	b280      	uxth	r0, r0
 80064a2:	81b8      	strh	r0, [r7, #12]
 80064a4:	440b      	add	r3, r1
 80064a6:	7992      	ldrb	r2, [r2, #6]
 80064a8:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80064ae:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	2006      	movs	r0, #6
 80064be:	f7fe fb6d 	bl	8004b9c <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330d      	adds	r3, #13
 80064c8:	89ba      	ldrh	r2, [r7, #12]
 80064ca:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80064d8:	461a      	mov	r2, r3
 80064da:	f001 faa4 	bl	8007a26 <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	889a      	ldrh	r2, [r3, #4]
 80064e4:	89bb      	ldrh	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	7e59      	ldrb	r1, [r3, #25]
 80064f0:	89bb      	ldrh	r3, [r7, #12]
 80064f2:	3b09      	subs	r3, #9
 80064f4:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 80064fc:	3305      	adds	r3, #5
 80064fe:	20b2      	movs	r0, #178	@ 0xb2
 8006500:	f7fe fb29 	bl	8004b56 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8006504:	89ba      	ldrh	r2, [r7, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3a05      	subs	r2, #5
 800650c:	b292      	uxth	r2, r2
 800650e:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8006510:	2300      	movs	r3, #0
 8006512:	82fb      	strh	r3, [r7, #22]
        break;
 8006514:	e022      	b.n	800655c <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
 8006516:	4a14      	ldr	r2, [pc, #80]	@ (8006568 <optiga_cmd_verify_sign_handler+0x210>)
 8006518:	4914      	ldr	r1, [pc, #80]	@ (800656c <optiga_cmd_verify_sign_handler+0x214>)
 800651a:	4816      	ldr	r0, [pc, #88]	@ (8006574 <optiga_cmd_verify_sign_handler+0x21c>)
 800651c:	f000 fc58 	bl	8006dd0 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	7c9b      	ldrb	r3, [r3, #18]
 8006526:	2bff      	cmp	r3, #255	@ 0xff
 8006528:	d110      	bne.n	800654c <optiga_cmd_verify_sign_handler+0x1f4>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
 800652a:	4a0f      	ldr	r2, [pc, #60]	@ (8006568 <optiga_cmd_verify_sign_handler+0x210>)
 800652c:	490f      	ldr	r1, [pc, #60]	@ (800656c <optiga_cmd_verify_sign_handler+0x214>)
 800652e:	4812      	ldr	r0, [pc, #72]	@ (8006578 <optiga_cmd_verify_sign_handler+0x220>)
 8006530:	f000 fc4e 	bl	8006dd0 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7f5b      	ldrb	r3, [r3, #29]
 8006538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800653c:	b2da      	uxtb	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	775a      	strb	r2, [r3, #29]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	7f5a      	ldrb	r2, [r3, #29]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	775a      	strb	r2, [r3, #29]
                break;
 800654a:	e007      	b.n	800655c <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
 800654c:	4a06      	ldr	r2, [pc, #24]	@ (8006568 <optiga_cmd_verify_sign_handler+0x210>)
 800654e:	4907      	ldr	r1, [pc, #28]	@ (800656c <optiga_cmd_verify_sign_handler+0x214>)
 8006550:	480a      	ldr	r0, [pc, #40]	@ (800657c <optiga_cmd_verify_sign_handler+0x224>)
 8006552:	f000 fc3d 	bl	8006dd0 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
 8006556:	2300      	movs	r3, #0
 8006558:	82fb      	strh	r3, [r7, #22]
        break;
 800655a:	bf00      	nop
    }

    return (return_status);
 800655c:	8afb      	ldrh	r3, [r7, #22]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	08012880 	.word	0x08012880
 800656c:	08012888 	.word	0x08012888
 8006570:	08012ca4 	.word	0x08012ca4
 8006574:	08012cc4 	.word	0x08012cc4
 8006578:	08012cf4 	.word	0x08012cf4
 800657c:	08012d20 	.word	0x08012d20

08006580 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	460b      	mov	r3, r1
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 800658e:	4a0b      	ldr	r2, [pc, #44]	@ (80065bc <optiga_cmd_verify_sign+0x3c>)
 8006590:	490b      	ldr	r1, [pc, #44]	@ (80065c0 <optiga_cmd_verify_sign+0x40>)
 8006592:	480c      	ldr	r0, [pc, #48]	@ (80065c4 <optiga_cmd_verify_sign+0x44>)
 8006594:	f000 fc1c 	bl	8006dd0 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8006598:	7af9      	ldrb	r1, [r7, #11]
 800659a:	23b2      	movs	r3, #178	@ 0xb2
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	2306      	movs	r3, #6
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	2302      	movs	r3, #2
 80065a8:	4a07      	ldr	r2, [pc, #28]	@ (80065c8 <optiga_cmd_verify_sign+0x48>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7fe fb33 	bl	8004c16 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	08012880 	.word	0x08012880
 80065c0:	08012888 	.word	0x08012888
 80065c4:	080135bc 	.word	0x080135bc
 80065c8:	08006359 	.word	0x08006359

080065cc <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 80065da:	4b0e      	ldr	r3, [pc, #56]	@ (8006614 <optiga_comms_create+0x48>)
 80065dc:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	7c1b      	ldrb	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d110      	bne.n	8006608 <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 80065e6:	f000 feaf 	bl	8007348 <pal_init>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
                break;
 80065f4:	e008      	b.n	8006608 <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8006608:	68fb      	ldr	r3, [r7, #12]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200004d8 	.word	0x200004d8

08006618 <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7c1b      	ldrb	r3, [r3, #16]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d10a      	bne.n	800663e <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 800663a:	f000 fe8d 	bl	8007358 <pal_deinit>
#endif
        }
    } while (FALSE);
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	609a      	str	r2, [r3, #8]
    return (0);
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800666c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006670:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f8a6 	bl	80067c4 <check_optiga_comms_state>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d122      	bne.n	80066c4 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	4a10      	ldr	r2, [pc, #64]	@ (80066d0 <optiga_comms_open+0x6c>)
 800668e:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	7d12      	ldrb	r2, [r2, #20]
 800669a:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fa fa74 	bl	8000b9c <ifx_i2c_open>
 80066b4:	4603      	mov	r3, r0
 80066b6:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80066c4:	89fb      	ldrh	r3, [r7, #14]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	080067f9 	.word	0x080067f9

080066d4 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80066e4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80066e8:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f86a 	bl	80067c4 <check_optiga_comms_state>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d12c      	bne.n	8006750 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	4a15      	ldr	r2, [pc, #84]	@ (800675c <optiga_comms_transceive+0x88>)
 8006706:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	7c92      	ldrb	r2, [r2, #18]
 8006712:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	7cd2      	ldrb	r2, [r2, #19]
 800671e:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	7d12      	ldrb	r2, [r2, #20]
 800672a:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6858      	ldr	r0, [r3, #4]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	f7fa fa67 	bl	8000c0e <ifx_i2c_transceive>
 8006740:	4603      	mov	r3, r0
 8006742:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8006744:	8afb      	ldrh	r3, [r7, #22]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8006750:	8afb      	ldrh	r3, [r7, #22]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	080067f9 	.word	0x080067f9

08006760 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8006768:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800676c:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f828 	bl	80067c4 <check_optiga_comms_state>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d11c      	bne.n	80067b4 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4a0d      	ldr	r2, [pc, #52]	@ (80067c0 <optiga_comms_close+0x60>)
 800678a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	7d12      	ldrb	r2, [r2, #20]
 8006796:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fa fa6e 	bl	8000c80 <ifx_i2c_close>
 80067a4:	4603      	mov	r3, r0
 80067a6:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80067b4:	89fb      	ldrh	r3, [r7, #14]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	080067f9 	.word	0x080067f9

080067c4 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80067cc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80067d0:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <check_optiga_comms_state+0x26>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7c5b      	ldrb	r3, [r3, #17]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d004      	beq.n	80067ea <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 80067e6:	2300      	movs	r3, #0
 80067e8:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 80067ea:	89fb      	ldrh	r3, [r7, #14]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	887a      	ldrh	r2, [r7, #2]
 8006810:	4611      	mov	r1, r2
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	745a      	strb	r2, [r3, #17]
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    me->handler(me->caller_context, event);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006844:	8879      	ldrh	r1, [r7, #2]
 8006846:	4610      	mov	r0, r2
 8006848:	4798      	blx	r3
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <optiga_crypt_reset_protection_level+0x18>
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8006860:	2200      	movs	r2, #0
 8006862:	2101      	movs	r1, #1
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f880 	bl	800696a <optiga_crypt_set_comms_params>
    }
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	72fb      	strb	r3, [r7, #11]
 8006882:	4613      	mov	r3, r2
 8006884:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8006886:	f240 4302 	movw	r3, #1026	@ 0x402
 800688a:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <optiga_crypt_verify+0x3a>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <optiga_crypt_verify+0x3a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <optiga_crypt_verify+0x3a>
 80068a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80068ac:	f240 4303 	movw	r3, #1027	@ 0x403
 80068b0:	82fb      	strh	r3, [r7, #22]
            break;
 80068b2:	e052      	b.n	800695a <optiga_crypt_verify+0xe8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d103      	bne.n	80068c6 <optiga_crypt_verify+0x54>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80068be:	f240 4305 	movw	r3, #1029	@ 0x405
 80068c2:	82fb      	strh	r3, [r7, #22]
            break;
 80068c4:	e049      	b.n	800695a <optiga_crypt_verify+0xe8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2234      	movs	r2, #52	@ 0x34
 80068d6:	2100      	movs	r1, #0
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f8b3 	bl	8007a44 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068e8:	2200      	movs	r2, #0
 80068ea:	4619      	mov	r1, r3
 80068ec:	f7fe f90e 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068fa:	2201      	movs	r2, #1
 80068fc:	4619      	mov	r1, r3
 80068fe:	f7fe f905 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	7aba      	ldrb	r2, [r7, #10]
 800690c:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006918:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006920:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8006922:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <optiga_crypt_verify+0xc2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 800692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	81da      	strh	r2, [r3, #14]
 8006932:	e002      	b.n	800693a <optiga_crypt_verify+0xc8>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006938:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	7af9      	ldrb	r1, [r7, #11]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fe1c 	bl	8006580 <optiga_cmd_verify_sign>
 8006948:	4603      	mov	r3, r0
 800694a:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800694c:	8afb      	ldrh	r3, [r7, #22]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <optiga_crypt_verify+0xe8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff ff79 	bl	8006852 <optiga_crypt_reset_protection_level>

    return (return_value);
 8006960:	8afb      	ldrh	r3, [r7, #22]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <optiga_crypt_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	70fb      	strb	r3, [r7, #3]
 8006976:	4613      	mov	r3, r2
 8006978:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d002      	beq.n	8006986 <optiga_crypt_set_comms_params+0x1c>
 8006980:	2b02      	cmp	r3, #2
 8006982:	d005      	beq.n	8006990 <optiga_crypt_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8006984:	e009      	b.n	800699a <optiga_crypt_set_comms_params+0x30>
            me->protection_level = value;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	78ba      	ldrb	r2, [r7, #2]
 800698a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            break;
 800698e:	e004      	b.n	800699a <optiga_crypt_set_comms_params+0x30>
            me->protocol_version = value;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	78ba      	ldrb	r2, [r7, #2]
 8006994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
            break;
 8006998:	bf00      	nop
        }
    }
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02c      	beq.n	8006a1a <optiga_crypt_create+0x72>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 80069c0:	2144      	movs	r1, #68	@ 0x44
 80069c2:	2001      	movs	r0, #1
 80069c4:	f001 f816 	bl	80079f4 <pal_os_calloc>
 80069c8:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d026      	beq.n	8006a1e <optiga_crypt_create+0x76>
        {
            break;
        }

        me->handler = handler;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	63da      	str	r2, [r3, #60]	@ 0x3c
        me->caller_context = caller_context;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	@ 0x38
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	490c      	ldr	r1, [pc, #48]	@ (8006a2c <optiga_crypt_create+0x84>)
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff f8ca 	bl	8005b94 <optiga_cmd_create>
 8006a00:	4602      	mov	r2, r0
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	635a      	str	r2, [r3, #52]	@ 0x34
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d108      	bne.n	8006a20 <optiga_crypt_create+0x78>
        {
            pal_os_free(me);
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f000 fffe 	bl	8007a10 <pal_os_free>
            me = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e002      	b.n	8006a20 <optiga_crypt_create+0x78>
            break;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <optiga_crypt_create+0x78>
            break;
 8006a1e:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08006825 	.word	0x08006825

08006a30 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8006a3e:	f240 4303 	movw	r3, #1027	@ 0x403
 8006a42:	81fb      	strh	r3, [r7, #14]
            break;
 8006a44:	e012      	b.n	8006a6c <optiga_crypt_destroy+0x3c>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d103      	bne.n	8006a58 <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8006a50:	f240 4305 	movw	r3, #1029	@ 0x405
 8006a54:	81fb      	strh	r3, [r7, #14]
            break;
 8006a56:	e009      	b.n	8006a6c <optiga_crypt_destroy+0x3c>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff f917 	bl	8005c90 <optiga_cmd_destroy>
 8006a62:	4603      	mov	r3, r0
 8006a64:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 ffd2 	bl	8007a10 <pal_os_free>

    } while (FALSE);
    return (return_value);
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	@ 0x28
 8006a7c:	af06      	add	r7, sp, #24
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
 8006a88:	4a0d      	ldr	r2, [pc, #52]	@ (8006ac0 <optiga_crypt_ecdsa_verify+0x48>)
 8006a8a:	490e      	ldr	r1, [pc, #56]	@ (8006ac4 <optiga_crypt_ecdsa_verify+0x4c>)
 8006a8c:	480e      	ldr	r0, [pc, #56]	@ (8006ac8 <optiga_crypt_ecdsa_verify+0x50>)
 8006a8e:	f000 f99f 	bl	8006dd0 <optiga_lib_print_message>
    return (optiga_crypt_verify(me,
 8006a92:	79fa      	ldrb	r2, [r7, #7]
 8006a94:	2300      	movs	r3, #0
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	9303      	str	r3, [sp, #12]
 8006a9c:	7f3b      	ldrb	r3, [r7, #28]
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	8b3b      	ldrh	r3, [r7, #24]
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	2111      	movs	r1, #17
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff fedf 	bl	8006872 <optiga_crypt_verify>
 8006ab4:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	08013454 	.word	0x08013454
 8006ac4:	0801345c 	.word	0x0801345c
 8006ac8:	080135d4 	.word	0x080135d4

08006acc <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8006ad8:	887b      	ldrh	r3, [r7, #2]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	887a      	ldrh	r2, [r7, #2]
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	0e1b      	lsrs	r3, r3, #24
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	0c1a      	lsrs	r2, r3, #16
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3301      	adds	r3, #1
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	0a1a      	lsrs	r2, r3, #8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3302      	adds	r3, #2
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3303      	adds	r3, #3
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	061a      	lsls	r2, r3, #24
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3302      	adds	r3, #2
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006b5a:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	3103      	adds	r1, #3
 8006b60:	7809      	ldrb	r1, [r1, #0]
 8006b62:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 8006b68:	68fb      	ldr	r3, [r7, #12]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <optiga_lib_byte_to_hex_string>:
/* Converts the uint8 array to hex string format */
_STATIC_H void optiga_lib_byte_to_hex_string(const uint8_t * p_array_buffer,
                                             uint8_t * p_hex_string,
                                             uint32_t length,
                                             bool_t is_input_byte_array)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b087      	sub	sp, #28
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	70fb      	strb	r3, [r7, #3]
    uint32_t loop = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
    uint8_t hex_byte = 0, index = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	74bb      	strb	r3, [r7, #18]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	74fb      	strb	r3, [r7, #19]

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d05f      	beq.n	8006c56 <optiga_lib_byte_to_hex_string+0xe0>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05c      	beq.n	8006c56 <optiga_lib_byte_to_hex_string+0xe0>
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e051      	b.n	8006c46 <optiga_lib_byte_to_hex_string+0xd0>
        {
            index = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	74fb      	strb	r3, [r7, #19]
            hex_byte = p_array_buffer[loop];
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4413      	add	r3, r2
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	74bb      	strb	r3, [r7, #18]
            if (TRUE == is_input_byte_array)
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d10f      	bne.n	8006bd6 <optiga_lib_byte_to_hex_string+0x60>
            {
                p_hex_string [index++] = '0';
 8006bb6:	7cfb      	ldrb	r3, [r7, #19]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	74fa      	strb	r2, [r7, #19]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2230      	movs	r2, #48	@ 0x30
 8006bc4:	701a      	strb	r2, [r3, #0]
                p_hex_string [index++] = 'x';
 8006bc6:	7cfb      	ldrb	r3, [r7, #19]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	74fa      	strb	r2, [r7, #19]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2278      	movs	r2, #120	@ 0x78
 8006bd4:	701a      	strb	r2, [r3, #0]
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
 8006bd6:	7cbb      	ldrb	r3, [r7, #18]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	747b      	strb	r3, [r7, #17]
 8006bdc:	7c7b      	ldrb	r3, [r7, #17]
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d903      	bls.n	8006bea <optiga_lib_byte_to_hex_string+0x74>
 8006be2:	7c7b      	ldrb	r3, [r7, #17]
 8006be4:	3337      	adds	r3, #55	@ 0x37
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e002      	b.n	8006bf0 <optiga_lib_byte_to_hex_string+0x7a>
 8006bea:	7c7b      	ldrb	r3, [r7, #17]
 8006bec:	3330      	adds	r3, #48	@ 0x30
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	7cfa      	ldrb	r2, [r7, #19]
 8006bf2:	1c51      	adds	r1, r2, #1
 8006bf4:	74f9      	strb	r1, [r7, #19]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	7013      	strb	r3, [r2, #0]
 8006bfe:	7cbb      	ldrb	r3, [r7, #18]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	747b      	strb	r3, [r7, #17]
 8006c06:	7c7b      	ldrb	r3, [r7, #17]
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	d903      	bls.n	8006c14 <optiga_lib_byte_to_hex_string+0x9e>
 8006c0c:	7c7b      	ldrb	r3, [r7, #17]
 8006c0e:	3337      	adds	r3, #55	@ 0x37
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	e002      	b.n	8006c1a <optiga_lib_byte_to_hex_string+0xa4>
 8006c14:	7c7b      	ldrb	r3, [r7, #17]
 8006c16:	3330      	adds	r3, #48	@ 0x30
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	7cfa      	ldrb	r2, [r7, #19]
 8006c1c:	1c51      	adds	r1, r2, #1
 8006c1e:	74f9      	strb	r1, [r7, #19]
 8006c20:	4611      	mov	r1, r2
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	440a      	add	r2, r1
 8006c26:	7013      	strb	r3, [r2, #0]
            
            p_hex_string [index++] = ' ';
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	74fa      	strb	r2, [r7, #19]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4413      	add	r3, r2
 8006c34:	2220      	movs	r2, #32
 8006c36:	701a      	strb	r2, [r3, #0]
            p_hex_string += index;
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60bb      	str	r3, [r7, #8]
        for (loop = 0; loop < length; loop++)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	3301      	adds	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d3a9      	bcc.n	8006ba2 <optiga_lib_byte_to_hex_string+0x2c>
        }
        *p_hex_string = 0x00;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e000      	b.n	8006c58 <optiga_lib_byte_to_hex_string+0xe2>
            return;
 8006c56:	bf00      	nop
    } while(0);
}
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <optiga_lib_word_to_hex_string>:
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                             uint8_t * p_buffer)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	4603      	mov	r3, r0
 8006c6a:	6039      	str	r1, [r7, #0]
 8006c6c:	80fb      	strh	r3, [r7, #6]
    uint8_t array_buffer [5] = {0};   
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	2300      	movs	r3, #0
 8006c74:	743b      	strb	r3, [r7, #16]
    uint8_t loop, hex_byte = 0, index = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	757b      	strb	r3, [r7, #21]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	75bb      	strb	r3, [r7, #22]
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	733b      	strb	r3, [r7, #12]
    array_buffer [1] = (uint8_t)((value & 0x00FF));
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	737b      	strb	r3, [r7, #13]

    p_buffer [index++] = '0';
 8006c8e:	7dbb      	ldrb	r3, [r7, #22]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	75ba      	strb	r2, [r7, #22]
 8006c94:	461a      	mov	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	4413      	add	r3, r2
 8006c9a:	2230      	movs	r2, #48	@ 0x30
 8006c9c:	701a      	strb	r2, [r3, #0]
    p_buffer [index++] = 'x';
 8006c9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	75ba      	strb	r2, [r7, #22]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	4413      	add	r3, r2
 8006caa:	2278      	movs	r2, #120	@ 0x78
 8006cac:	701a      	strb	r2, [r3, #0]
    
    for (loop = 0; loop < 2; loop++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]
 8006cb2:	e031      	b.n	8006d18 <optiga_lib_word_to_hex_string+0xb6>
    {
        hex_byte = array_buffer[loop];
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	3318      	adds	r3, #24
 8006cb8:	443b      	add	r3, r7
 8006cba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006cbe:	757b      	strb	r3, [r7, #21]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
 8006cc0:	7d7b      	ldrb	r3, [r7, #21]
 8006cc2:	091b      	lsrs	r3, r3, #4
 8006cc4:	753b      	strb	r3, [r7, #20]
 8006cc6:	7d3b      	ldrb	r3, [r7, #20]
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d903      	bls.n	8006cd4 <optiga_lib_word_to_hex_string+0x72>
 8006ccc:	7d3b      	ldrb	r3, [r7, #20]
 8006cce:	3337      	adds	r3, #55	@ 0x37
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e002      	b.n	8006cda <optiga_lib_word_to_hex_string+0x78>
 8006cd4:	7d3b      	ldrb	r3, [r7, #20]
 8006cd6:	3330      	adds	r3, #48	@ 0x30
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	7dba      	ldrb	r2, [r7, #22]
 8006cdc:	1c51      	adds	r1, r2, #1
 8006cde:	75b9      	strb	r1, [r7, #22]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	7013      	strb	r3, [r2, #0]
 8006ce8:	7d7b      	ldrb	r3, [r7, #21]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	753b      	strb	r3, [r7, #20]
 8006cf0:	7d3b      	ldrb	r3, [r7, #20]
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d903      	bls.n	8006cfe <optiga_lib_word_to_hex_string+0x9c>
 8006cf6:	7d3b      	ldrb	r3, [r7, #20]
 8006cf8:	3337      	adds	r3, #55	@ 0x37
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	e002      	b.n	8006d04 <optiga_lib_word_to_hex_string+0xa2>
 8006cfe:	7d3b      	ldrb	r3, [r7, #20]
 8006d00:	3330      	adds	r3, #48	@ 0x30
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	7dba      	ldrb	r2, [r7, #22]
 8006d06:	1c51      	adds	r1, r2, #1
 8006d08:	75b9      	strb	r1, [r7, #22]
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	440a      	add	r2, r1
 8006d10:	7013      	strb	r3, [r2, #0]
    for (loop = 0; loop < 2; loop++)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	3301      	adds	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d9ca      	bls.n	8006cb4 <optiga_lib_word_to_hex_string+0x52>
    }    

}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <optiga_lib_print_length_of_data>:

/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_print_length_of_data(uint16_t value)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b092      	sub	sp, #72	@ 0x48
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	80fb      	strh	r3, [r7, #6]
    uint8_t uint16t_conv_buffer [10] = {0};
 8006d36:	2300      	movs	r3, #0
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	809a      	strh	r2, [r3, #4]
    char_t print_buffer[50];      

    sprintf((char_t *)print_buffer, "%37s", "Length of data - ");
 8006d44:	f107 0308 	add.w	r3, r7, #8
 8006d48:	4a0e      	ldr	r2, [pc, #56]	@ (8006d84 <optiga_lib_print_length_of_data+0x58>)
 8006d4a:	490f      	ldr	r1, [pc, #60]	@ (8006d88 <optiga_lib_print_length_of_data+0x5c>)
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f009 ff5f 	bl	8010c10 <siprintf>
    strcat(print_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
    optiga_lib_word_to_hex_string(value,uint16t_conv_buffer);
 8006d52:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff ff81 	bl	8006c62 <optiga_lib_word_to_hex_string>
    strcat(print_buffer,(char_t *)uint16t_conv_buffer); 
 8006d60:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f00a f8a2 	bl	8010eb4 <strcat>
    
    optiga_lib_print_string_with_newline(print_buffer);
 8006d70:	f107 0308 	add.w	r3, r7, #8
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 f809 	bl	8006d8c <optiga_lib_print_string_with_newline>
}
 8006d7a:	bf00      	nop
 8006d7c:	3748      	adds	r7, #72	@ 0x48
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	08013474 	.word	0x08013474
 8006d88:	08013488 	.word	0x08013488

08006d8c <optiga_lib_print_string_with_newline>:
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
}

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006d94:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8006d98:	81bb      	strh	r3, [r7, #12]

    if (NULL == p_log_string)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <optiga_lib_print_string_with_newline+0x36>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7f9 fa1d 	bl	80001e0 <strlen>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4807      	ldr	r0, [pc, #28]	@ (8006dcc <optiga_lib_print_string_with_newline+0x40>)
 8006dae:	f000 fc47 	bl	8007640 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 8006db2:	f107 030c 	add.w	r3, r7, #12
 8006db6:	2202      	movs	r2, #2
 8006db8:	4619      	mov	r1, r3
 8006dba:	4804      	ldr	r0, [pc, #16]	@ (8006dcc <optiga_lib_print_string_with_newline+0x40>)
 8006dbc:	f000 fc40 	bl	8007640 <pal_logger_write>
 8006dc0:	e000      	b.n	8006dc4 <optiga_lib_print_string_with_newline+0x38>
        return;
 8006dc2:	bf00      	nop

}
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000da8 	.word	0x20000da8

08006dd0 <optiga_lib_print_message>:

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b0ec      	sub	sp, #432	@ 0x1b0
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006dda:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006dde:	6018      	str	r0, [r3, #0]
 8006de0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006de4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006dee:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8006df2:	601a      	str	r2, [r3, #0]
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006df4:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8006df8:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
    char_t color_buffer[400];

    if ((NULL == p_log_string) || (NULL == p_log_layer) || (NULL == p_log_color))
 8006dfc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006e00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d038      	beq.n	8006e7c <optiga_lib_print_message+0xac>
 8006e0a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006e0e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d031      	beq.n	8006e7c <optiga_lib_print_message+0xac>
 8006e18:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006e1c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d02a      	beq.n	8006e7c <optiga_lib_print_message+0xac>
    {
        return;
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, p_log_layer, p_log_color);
 8006e26:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006e2a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006e2e:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8006e32:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006e36:	f107 0014 	add.w	r0, r7, #20
 8006e3a:	4913      	ldr	r1, [pc, #76]	@ (8006e88 <optiga_lib_print_message+0xb8>)
 8006e3c:	9101      	str	r1, [sp, #4]
 8006e3e:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8006e42:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8006e46:	6809      	ldr	r1, [r1, #0]
 8006e48:	9100      	str	r1, [sp, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	490f      	ldr	r1, [pc, #60]	@ (8006e8c <optiga_lib_print_message+0xbc>)
 8006e50:	f009 fede 	bl	8010c10 <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7f9 f9c1 	bl	80001e0 <strlen>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f107 0314 	add.w	r3, r7, #20
 8006e64:	4619      	mov	r1, r3
 8006e66:	480a      	ldr	r0, [pc, #40]	@ (8006e90 <optiga_lib_print_message+0xc0>)
 8006e68:	f000 fbea 	bl	8007640 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 8006e6c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006e70:	2202      	movs	r2, #2
 8006e72:	4619      	mov	r1, r3
 8006e74:	4806      	ldr	r0, [pc, #24]	@ (8006e90 <optiga_lib_print_message+0xc0>)
 8006e76:	f000 fbe3 	bl	8007640 <pal_logger_write>
 8006e7a:	e000      	b.n	8006e7e <optiga_lib_print_message+0xae>
        return;
 8006e7c:	bf00      	nop
}
 8006e7e:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	0801349c 	.word	0x0801349c
 8006e8c:	08013490 	.word	0x08013490
 8006e90:	20000da8 	.word	0x20000da8

08006e94 <optiga_lib_print_array_hex_format>:
}

void optiga_lib_print_array_hex_format(const uint8_t * p_log_string,
                                       uint16_t length,
                                       const char_t * p_log_color)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8006e9a:	af02      	add	r7, sp, #8
 8006e9c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ea0:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8006ea4:	6018      	str	r0, [r3, #0]
 8006ea6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006eaa:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006eb4:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006eb8:	460a      	mov	r2, r1
 8006eba:	801a      	strh	r2, [r3, #0]
    uint8_t temp_buffer[350];
    char_t output_buffer[400];
    uint16_t index;
    uint16_t temp_length;
    char_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006ebc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ec0:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8006ec4:	f640 220d 	movw	r2, #2573	@ 0xa0d
 8006ec8:	801a      	strh	r2, [r3, #0]
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
 8006eca:	2320      	movs	r3, #32
 8006ecc:	f887 3303 	strb.w	r3, [r7, #771]	@ 0x303

    if ((NULL == p_log_string) || (NULL == p_log_color))
 8006ed0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ed4:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 809c 	beq.w	8007018 <optiga_lib_print_array_hex_format+0x184>
 8006ee0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ee4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8094 	beq.w	8007018 <optiga_lib_print_array_hex_format+0x184>
    {
        return;
    }
    
    optiga_lib_print_length_of_data(length);
 8006ef0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006ef4:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff ff16 	bl	8006d2c <optiga_lib_print_length_of_data>
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
 8006f06:	e07c      	b.n	8007002 <optiga_lib_print_array_hex_format+0x16e>
    {
        temp_length = buffer_window;
 8006f08:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006f0c:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
        if ((length - index) < buffer_window)
 8006f10:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006f14:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006f18:	881a      	ldrh	r2, [r3, #0]
 8006f1a:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006f24:	429a      	cmp	r2, r3
 8006f26:	da09      	bge.n	8006f3c <optiga_lib_print_array_hex_format+0xa8>
        {
            temp_length =  length - index;
 8006f28:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006f2c:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
 8006f3c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006f40:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fd7c 	bl	8007a44 <pal_os_memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
 8006f4c:	f107 0314 	add.w	r3, r7, #20
 8006f50:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fd74 	bl	8007a44 <pal_os_memset>

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);
 8006f5c:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006f60:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006f64:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	18d0      	adds	r0, r2, r3
 8006f6c:	f8b7 2304 	ldrh.w	r2, [r7, #772]	@ 0x304
 8006f70:	f507 71d2 	add.w	r1, r7, #420	@ 0x1a4
 8006f74:	2300      	movs	r3, #0
 8006f76:	f7ff fdfe 	bl	8006b76 <optiga_lib_byte_to_hex_string>

        OPTIGA_LIB_LOGGER_PRINT_ARRAY(output_buffer,temp_buffer, p_log_color);
 8006f7a:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8006f7e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006f82:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 8006f86:	f107 0014 	add.w	r0, r7, #20
 8006f8a:	4926      	ldr	r1, [pc, #152]	@ (8007024 <optiga_lib_print_array_hex_format+0x190>)
 8006f8c:	9100      	str	r1, [sp, #0]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	4925      	ldr	r1, [pc, #148]	@ (8007028 <optiga_lib_print_array_hex_format+0x194>)
 8006f92:	f009 fe3d 	bl	8010c10 <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7f9 f920 	bl	80001e0 <strlen>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006fa6:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8006faa:	7819      	ldrb	r1, [r3, #0]
 8006fac:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006fb0:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8006fb4:	5499      	strb	r1, [r3, r2]
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
 8006fb6:	f107 0314 	add.w	r3, r7, #20
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7f9 f910 	bl	80001e0 <strlen>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006fc8:	f5a2 723e 	sub.w	r2, r2, #760	@ 0x2f8
 8006fcc:	7851      	ldrb	r1, [r2, #1]
 8006fce:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006fd2:	f5a2 723d 	sub.w	r2, r2, #756	@ 0x2f4
 8006fd6:	54d1      	strb	r1, [r2, r3]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7f9 f8ff 	bl	80001e0 <strlen>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	1c9a      	adds	r2, r3, #2
 8006fe6:	f107 0314 	add.w	r3, r7, #20
 8006fea:	4619      	mov	r1, r3
 8006fec:	480f      	ldr	r0, [pc, #60]	@ (800702c <optiga_lib_print_array_hex_format+0x198>)
 8006fee:	f000 fb27 	bl	8007640 <pal_logger_write>
    for (index = 0; index < length; index+=buffer_window)
 8006ff2:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
 8007002:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8007006:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 800700a:	f8b7 2306 	ldrh.w	r2, [r7, #774]	@ 0x306
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	f4ff af79 	bcc.w	8006f08 <optiga_lib_print_array_hex_format+0x74>
 8007016:	e000      	b.n	800701a <optiga_lib_print_array_hex_format+0x186>
        return;
 8007018:	bf00      	nop
    }
}
 800701a:	f507 7742 	add.w	r7, r7, #776	@ 0x308
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0801349c 	.word	0x0801349c
 8007028:	080134c8 	.word	0x080134c8
 800702c:	20000da8 	.word	0x20000da8

08007030 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	6992      	ldr	r2, [r2, #24]
 800704e:	8879      	ldrh	r1, [r7, #2]
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 800706a:	2200      	movs	r2, #0
 800706c:	2101      	movs	r1, #1
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f804 	bl	800707c <optiga_util_set_comms_params>
    }
}
 8007074:	bf00      	nop
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
 8007088:	4613      	mov	r3, r2
 800708a:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d002      	beq.n	8007098 <optiga_util_set_comms_params+0x1c>
 8007092:	2b02      	cmp	r3, #2
 8007094:	d005      	beq.n	80070a2 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8007096:	e009      	b.n	80070ac <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	78ba      	ldrb	r2, [r7, #2]
 800709c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 80070a0:	e004      	b.n	80070ac <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	78ba      	ldrb	r2, [r7, #2]
 80070a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 80070aa:	bf00      	nop
        }
    }
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02b      	beq.n	8007128 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80070d0:	2124      	movs	r1, #36	@ 0x24
 80070d2:	2001      	movs	r0, #1
 80070d4:	f000 fc8e 	bl	80079f4 <pal_os_calloc>
 80070d8:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d025      	beq.n	800712c <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2200      	movs	r2, #0
 80070f0:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	490c      	ldr	r1, [pc, #48]	@ (8007138 <optiga_util_create+0x80>)
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fd43 	bl	8005b94 <optiga_cmd_create>
 800710e:	4602      	mov	r2, r0
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <optiga_util_create+0x76>
        {
            pal_os_free(me);
 800711c:	6978      	ldr	r0, [r7, #20]
 800711e:	f000 fc77 	bl	8007a10 <pal_os_free>
            me = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e002      	b.n	800712e <optiga_util_create+0x76>
            break;
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <optiga_util_create+0x76>
            break;
 800712c:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 800712e:	697b      	ldr	r3, [r7, #20]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	08007031 	.word	0x08007031

0800713c <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <optiga_util_destroy+0x16>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800714a:	f240 3303 	movw	r3, #771	@ 0x303
 800714e:	81fb      	strh	r3, [r7, #14]
            break;
 8007150:	e011      	b.n	8007176 <optiga_util_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8c1b      	ldrh	r3, [r3, #32]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d103      	bne.n	8007162 <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800715a:	f240 3305 	movw	r3, #773	@ 0x305
 800715e:	81fb      	strh	r3, [r7, #14]
            break;
 8007160:	e009      	b.n	8007176 <optiga_util_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fd92 	bl	8005c90 <optiga_cmd_destroy>
 800716c:	4603      	mov	r3, r0
 800716e:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc4d 	bl	8007a10 <pal_os_free>
    } while (FALSE);
    return (return_value);
 8007176:	89fb      	ldrh	r3, [r7, #14]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 800718c:	f240 3302 	movw	r3, #770	@ 0x302
 8007190:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
 8007192:	4a2b      	ldr	r2, [pc, #172]	@ (8007240 <optiga_util_open_application+0xc0>)
 8007194:	492b      	ldr	r1, [pc, #172]	@ (8007244 <optiga_util_open_application+0xc4>)
 8007196:	482c      	ldr	r0, [pc, #176]	@ (8007248 <optiga_util_open_application+0xc8>)
 8007198:	f7ff fe1a 	bl	8006dd0 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <optiga_util_open_application+0x2a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <optiga_util_open_application+0x32>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80071aa:	f240 3303 	movw	r3, #771	@ 0x303
 80071ae:	81fb      	strh	r3, [r7, #14]
            break;
 80071b0:	e03d      	b.n	800722e <optiga_util_open_application+0xae>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8c1b      	ldrh	r3, [r3, #32]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d103      	bne.n	80071c2 <optiga_util_open_application+0x42>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80071ba:	f240 3305 	movw	r3, #773	@ 0x305
 80071be:	81fb      	strh	r3, [r7, #14]
            break;
 80071c0:	e035      	b.n	800722e <optiga_util_open_application+0xae>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6958      	ldr	r0, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80071d2:	2200      	movs	r2, #0
 80071d4:	4619      	mov	r1, r3
 80071d6:	f7fd fc99 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6958      	ldr	r0, [r3, #20]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80071e4:	2201      	movs	r2, #1
 80071e6:	4619      	mov	r1, r3
 80071e8:	f7fd fc90 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d107      	bne.n	8007202 <optiga_util_open_application+0x82>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	2202      	movs	r2, #2
 80071f8:	2133      	movs	r1, #51	@ 0x33
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fd fc86 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
 8007200:	e006      	b.n	8007210 <optiga_util_open_application+0x90>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	2202      	movs	r2, #2
 8007208:	2111      	movs	r1, #17
 800720a:	4618      	mov	r0, r3
 800720c:	f7fd fc7e 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	78f9      	ldrb	r1, [r7, #3]
 8007216:	2200      	movs	r2, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe ff25 	bl	8006068 <optiga_cmd_open_application>
 800721e:	4603      	mov	r3, r0
 8007220:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <optiga_util_open_application+0xae>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff ff14 	bl	800705c <optiga_util_reset_protection_level>

    return (return_value);
 8007234:	89fb      	ldrh	r3, [r7, #14]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	080134d4 	.word	0x080134d4
 8007244:	080134dc 	.word	0x080134dc
 8007248:	080135f0 	.word	0x080135f0

0800724c <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	817b      	strh	r3, [r7, #10]
 800725a:	4613      	mov	r3, r2
 800725c:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 800725e:	f240 3302 	movw	r3, #770	@ 0x302
 8007262:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
 8007264:	4a35      	ldr	r2, [pc, #212]	@ (800733c <optiga_util_read_data+0xf0>)
 8007266:	4936      	ldr	r1, [pc, #216]	@ (8007340 <optiga_util_read_data+0xf4>)
 8007268:	4836      	ldr	r0, [pc, #216]	@ (8007344 <optiga_util_read_data+0xf8>)
 800726a:	f7ff fdb1 	bl	8006dd0 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <optiga_util_read_data+0x3c>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <optiga_util_read_data+0x3c>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <optiga_util_read_data+0x3c>
            (NULL == buffer) || (NULL == length))
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <optiga_util_read_data+0x44>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8007288:	f240 3303 	movw	r3, #771	@ 0x303
 800728c:	82fb      	strh	r3, [r7, #22]
            break;
 800728e:	e04d      	b.n	800732c <optiga_util_read_data+0xe0>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8c1b      	ldrh	r3, [r3, #32]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d103      	bne.n	80072a0 <optiga_util_read_data+0x54>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8007298:	f240 3305 	movw	r3, #773	@ 0x305
 800729c:	82fb      	strh	r3, [r7, #22]
            break;
 800729e:	e045      	b.n	800732c <optiga_util_read_data+0xe0>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2214      	movs	r2, #20
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fbc7 	bl	8007a44 <pal_os_memset>

        p_params->oid = optiga_oid;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	897a      	ldrh	r2, [r7, #10]
 80072ba:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	893a      	ldrh	r2, [r7, #8]
 80072c0:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2200      	movs	r2, #0
 80072c6:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	881a      	ldrh	r2, [r3, #0]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2200      	movs	r2, #0
 80072e0:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2200      	movs	r2, #0
 80072e6:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6958      	ldr	r0, [r3, #20]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80072f2:	2200      	movs	r2, #0
 80072f4:	4619      	mov	r1, r3
 80072f6:	f7fd fc09 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6958      	ldr	r0, [r3, #20]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007304:	2201      	movs	r2, #1
 8007306:	4619      	mov	r1, r3
 8007308:	f7fd fc00 	bl	8004b0c <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6958      	ldr	r0, [r3, #20]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	7c9b      	ldrb	r3, [r3, #18]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4619      	mov	r1, r3
 8007318:	f7fe fff8 	bl	800630c <optiga_cmd_get_data_object>
 800731c:	4603      	mov	r3, r0
 800731e:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8007320:	8afb      	ldrh	r3, [r7, #22]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <optiga_util_read_data+0xe0>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff fe95 	bl	800705c <optiga_util_reset_protection_level>

    return (return_value);
 8007332:	8afb      	ldrh	r3, [r7, #22]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	080134d4 	.word	0x080134d4
 8007340:	080134dc 	.word	0x080134dc
 8007344:	08013610 	.word	0x08013610

08007348 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <pal_deinit>:


pal_status_t pal_deinit(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	461a      	mov	r2, r3
 8007374:	460b      	mov	r3, r1
 8007376:	817b      	strh	r3, [r7, #10]
 8007378:	4613      	mov	r3, r2
 800737a:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <pal_crypt_tls_prf_sha256+0x40>
 8007382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00f      	beq.n	80073a8 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8007388:	2300      	movs	r3, #0
 800738a:	82fb      	strh	r3, [r7, #22]
 800738c:	e007      	b.n	800739e <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 800738e:	8afb      	ldrh	r3, [r7, #22]
 8007390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007392:	4413      	add	r3, r2
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8007398:	8afb      	ldrh	r3, [r7, #22]
 800739a:	3301      	adds	r3, #1
 800739c:	82fb      	strh	r3, [r7, #22]
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	8afa      	ldrh	r2, [r7, #22]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d3f2      	bcc.n	800738e <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 80073a8:	bf00      	nop
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 80073c4:	2300      	movs	r3, #0
 80073c6:	82fb      	strh	r3, [r7, #22]
 80073c8:	e00a      	b.n	80073e0 <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 80073ca:	8afb      	ldrh	r3, [r7, #22]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	441a      	add	r2, r3
 80073d0:	8afb      	ldrh	r3, [r7, #22]
 80073d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d4:	440b      	add	r3, r1
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80073da:	8afb      	ldrh	r3, [r7, #22]
 80073dc:	3301      	adds	r3, #1
 80073de:	82fb      	strh	r3, [r7, #22]
 80073e0:	8afa      	ldrh	r2, [r7, #22]
 80073e2:	8c3b      	ldrh	r3, [r7, #32]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3f0      	bcc.n	80073ca <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b087      	sub	sp, #28
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8007406:	2300      	movs	r3, #0
 8007408:	82fb      	strh	r3, [r7, #22]
 800740a:	e00a      	b.n	8007422 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 800740c:	8afb      	ldrh	r3, [r7, #22]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	441a      	add	r2, r3
 8007412:	8afb      	ldrh	r3, [r7, #22]
 8007414:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007416:	440b      	add	r3, r1
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 800741c:	8afb      	ldrh	r3, [r7, #22]
 800741e:	3301      	adds	r3, #1
 8007420:	82fb      	strh	r3, [r7, #22]
 8007422:	8afa      	ldrh	r2, [r7, #22]
 8007424:	8c3b      	ldrh	r3, [r7, #32]
 8007426:	429a      	cmp	r2, r3
 8007428:	d3f0      	bcc.n	800740c <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8007448:	2201      	movs	r2, #1
 800744a:	4619      	mov	r1, r3
 800744c:	f004 fb48 	bl	800bae0 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8007468:	2200      	movs	r2, #0
 800746a:	4619      	mov	r1, r3
 800746c:	f004 fb38 	bl	800bae0 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8007480:	4b08      	ldr	r3, [pc, #32]	@ (80074a4 <pal_i2c_acquire+0x2c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8007488:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <pal_i2c_acquire+0x2c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	4a05      	ldr	r2, [pc, #20]	@ (80074a4 <pal_i2c_acquire+0x2c>)
 8007490:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 8007492:	2300      	movs	r3, #0
 8007494:	e000      	b.n	8007498 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 8007496:	2301      	movs	r3, #1
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	20000db0 	.word	0x20000db0

080074a8 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 80074b0:	4b04      	ldr	r3, [pc, #16]	@ (80074c4 <pal_i2c_release+0x1c>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000db0 	.word	0x20000db0

080074c8 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80074e6:	887a      	ldrh	r2, [r7, #2]
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff ffd8 	bl	80074a8 <pal_i2c_release>
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd90      	pop	{r4, r7, pc}

08007500 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 800753a:	2301      	movs	r3, #1
 800753c:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff ff9a 	bl	8007478 <pal_i2c_acquire>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d120      	bne.n	800758c <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 800754a:	4a16      	ldr	r2, [pc, #88]	@ (80075a4 <pal_i2c_write+0x78>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	b299      	uxth	r1, r3
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007562:	9200      	str	r2, [sp, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	f004 fc53 	bl	800be10 <HAL_I2C_Master_Transmit>
 800756a:	4603      	mov	r3, r0
 800756c:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 800756e:	7d7b      	ldrb	r3, [r7, #21]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8007574:	2100      	movs	r1, #0
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff ffa6 	bl	80074c8 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 800757c:	2300      	movs	r3, #0
 800757e:	82fb      	strh	r3, [r7, #22]
 8007580:	e00a      	b.n	8007598 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8007582:	2101      	movs	r1, #1
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff ff9f 	bl	80074c8 <invoke_upper_layer_callback>
 800758a:	e005      	b.n	8007598 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 800758c:	2302      	movs	r3, #2
 800758e:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8007590:	2102      	movs	r1, #2
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff ff98 	bl	80074c8 <invoke_upper_layer_callback>
    }

    return status;
 8007598:	8afb      	ldrh	r3, [r7, #22]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000db4 	.word	0x20000db4

080075a8 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7ff ff5c 	bl	8007478 <pal_i2c_acquire>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d120      	bne.n	8007608 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 80075c6:	4a16      	ldr	r2, [pc, #88]	@ (8007620 <pal_i2c_read+0x78>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	b299      	uxth	r1, r3
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075de:	9200      	str	r2, [sp, #0]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	f004 fd13 	bl	800c00c <HAL_I2C_Master_Receive>
 80075e6:	4603      	mov	r3, r0
 80075e8:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 80075ea:	7d7b      	ldrb	r3, [r7, #21]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 80075f0:	2100      	movs	r1, #0
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7ff ff68 	bl	80074c8 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 80075f8:	2300      	movs	r3, #0
 80075fa:	82fb      	strh	r3, [r7, #22]
 80075fc:	e00a      	b.n	8007614 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 80075fe:	2101      	movs	r1, #1
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7ff ff61 	bl	80074c8 <invoke_upper_layer_callback>
 8007606:	e005      	b.n	8007614 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 800760c:	2102      	movs	r1, #2
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff ff5a 	bl	80074c8 <invoke_upper_layer_callback>
    }

    return status;
 8007614:	8afb      	ldrh	r3, [r7, #22]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000db4 	.word	0x20000db4

08007624 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]

    int32_t return_status = PAL_STATUS_FAILURE;
 800764c:	2301      	movs	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
    pal_logger_t * p_log_context = p_logger_context;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	613b      	str	r3, [r7, #16]

    do
    {
        HAL_UART_Transmit(&huart2, p_log_data, log_data_length, HAL_MAX_DELAY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	b29a      	uxth	r2, r3
 8007658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	4804      	ldr	r0, [pc, #16]	@ (8007670 <pal_logger_write+0x30>)
 8007660:	f008 f9a6 	bl	800f9b0 <HAL_UART_Transmit>
    } while(0);
    return ((pal_status_t)return_status);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	b29b      	uxth	r3, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000680 	.word	0x20000680

08007674 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	80fb      	strh	r3, [r7, #6]
 8007680:	4613      	mov	r3, r2
 8007682:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8007684:	2301      	movs	r3, #1
 8007686:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	2b33      	cmp	r3, #51	@ 0x33
 8007690:	d043      	beq.n	800771a <pal_os_datastore_write+0xa6>
 8007692:	2b33      	cmp	r3, #51	@ 0x33
 8007694:	dc5e      	bgt.n	8007754 <pal_os_datastore_write+0xe0>
 8007696:	2b11      	cmp	r3, #17
 8007698:	d002      	beq.n	80076a0 <pal_os_datastore_write+0x2c>
 800769a:	2b22      	cmp	r3, #34	@ 0x22
 800769c:	d020      	beq.n	80076e0 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 800769e:	e059      	b.n	8007754 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80076a0:	88bb      	ldrh	r3, [r7, #4]
 80076a2:	2b40      	cmp	r3, #64	@ 0x40
 80076a4:	d858      	bhi.n	8007758 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 80076a6:	88bb      	ldrh	r3, [r7, #4]
 80076a8:	0a1b      	lsrs	r3, r3, #8
 80076aa:	b299      	uxth	r1, r3
 80076ac:	7b7b      	ldrb	r3, [r7, #13]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	737a      	strb	r2, [r7, #13]
 80076b2:	461a      	mov	r2, r3
 80076b4:	b2c9      	uxtb	r1, r1
 80076b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007764 <pal_os_datastore_write+0xf0>)
 80076b8:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 80076ba:	7b7b      	ldrb	r3, [r7, #13]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	737a      	strb	r2, [r7, #13]
 80076c0:	461a      	mov	r2, r3
 80076c2:	88bb      	ldrh	r3, [r7, #4]
 80076c4:	b2d9      	uxtb	r1, r3
 80076c6:	4b27      	ldr	r3, [pc, #156]	@ (8007764 <pal_os_datastore_write+0xf0>)
 80076c8:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 80076ca:	7b7b      	ldrb	r3, [r7, #13]
 80076cc:	4a25      	ldr	r2, [pc, #148]	@ (8007764 <pal_os_datastore_write+0xf0>)
 80076ce:	4413      	add	r3, r2
 80076d0:	88ba      	ldrh	r2, [r7, #4]
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f009 fc52 	bl	8010f7e <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 80076da:	2300      	movs	r3, #0
 80076dc:	81fb      	strh	r3, [r7, #14]
            break;
 80076de:	e03b      	b.n	8007758 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 80076e0:	88bb      	ldrh	r3, [r7, #4]
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	b299      	uxth	r1, r3
 80076e6:	7b7b      	ldrb	r3, [r7, #13]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	737a      	strb	r2, [r7, #13]
 80076ec:	461a      	mov	r2, r3
 80076ee:	b2c9      	uxtb	r1, r1
 80076f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007768 <pal_os_datastore_write+0xf4>)
 80076f2:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 80076f4:	7b7b      	ldrb	r3, [r7, #13]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	737a      	strb	r2, [r7, #13]
 80076fa:	461a      	mov	r2, r3
 80076fc:	88bb      	ldrh	r3, [r7, #4]
 80076fe:	b2d9      	uxtb	r1, r3
 8007700:	4b19      	ldr	r3, [pc, #100]	@ (8007768 <pal_os_datastore_write+0xf4>)
 8007702:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8007704:	7b7b      	ldrb	r3, [r7, #13]
 8007706:	4a18      	ldr	r2, [pc, #96]	@ (8007768 <pal_os_datastore_write+0xf4>)
 8007708:	4413      	add	r3, r2
 800770a:	88ba      	ldrh	r2, [r7, #4]
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f009 fc35 	bl	8010f7e <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8007714:	2300      	movs	r3, #0
 8007716:	81fb      	strh	r3, [r7, #14]
            break;
 8007718:	e01f      	b.n	800775a <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 800771a:	88bb      	ldrh	r3, [r7, #4]
 800771c:	0a1b      	lsrs	r3, r3, #8
 800771e:	b299      	uxth	r1, r3
 8007720:	7b7b      	ldrb	r3, [r7, #13]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	737a      	strb	r2, [r7, #13]
 8007726:	461a      	mov	r2, r3
 8007728:	b2c9      	uxtb	r1, r1
 800772a:	4b10      	ldr	r3, [pc, #64]	@ (800776c <pal_os_datastore_write+0xf8>)
 800772c:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 800772e:	7b7b      	ldrb	r3, [r7, #13]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	737a      	strb	r2, [r7, #13]
 8007734:	461a      	mov	r2, r3
 8007736:	88bb      	ldrh	r3, [r7, #4]
 8007738:	b2d9      	uxtb	r1, r3
 800773a:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <pal_os_datastore_write+0xf8>)
 800773c:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 800773e:	7b7b      	ldrb	r3, [r7, #13]
 8007740:	4a0a      	ldr	r2, [pc, #40]	@ (800776c <pal_os_datastore_write+0xf8>)
 8007742:	4413      	add	r3, r2
 8007744:	88ba      	ldrh	r2, [r7, #4]
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f009 fc18 	bl	8010f7e <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 800774e:	2300      	movs	r3, #0
 8007750:	81fb      	strh	r3, [r7, #14]
            break;
 8007752:	e002      	b.n	800775a <pal_os_datastore_write+0xe6>
            break;
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <pal_os_datastore_write+0xe6>
            break;
 8007758:	bf00      	nop
        }
    }
    return return_status;
 800775a:	89fb      	ldrh	r3, [r7, #14]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000510 	.word	0x20000510
 8007768:	20000db8 	.word	0x20000db8
 800776c:	20000dfc 	.word	0x20000dfc

08007770 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 800777e:	2301      	movs	r3, #1
 8007780:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8007786:	89fb      	ldrh	r3, [r7, #14]
 8007788:	2b33      	cmp	r3, #51	@ 0x33
 800778a:	d049      	beq.n	8007820 <pal_os_datastore_read+0xb0>
 800778c:	2b33      	cmp	r3, #51	@ 0x33
 800778e:	dc67      	bgt.n	8007860 <pal_os_datastore_read+0xf0>
 8007790:	2b11      	cmp	r3, #17
 8007792:	d002      	beq.n	800779a <pal_os_datastore_read+0x2a>
 8007794:	2b22      	cmp	r3, #34	@ 0x22
 8007796:	d023      	beq.n	80077e0 <pal_os_datastore_read+0x70>
 8007798:	e062      	b.n	8007860 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 800779a:	7d7b      	ldrb	r3, [r7, #21]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	757a      	strb	r2, [r7, #21]
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b34      	ldr	r3, [pc, #208]	@ (8007874 <pal_os_datastore_read+0x104>)
 80077a4:	5c9b      	ldrb	r3, [r3, r2]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 80077aa:	7d7b      	ldrb	r3, [r7, #21]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	757a      	strb	r2, [r7, #21]
 80077b0:	461a      	mov	r2, r3
 80077b2:	4b30      	ldr	r3, [pc, #192]	@ (8007874 <pal_os_datastore_read+0x104>)
 80077b4:	5c9b      	ldrb	r3, [r3, r2]
 80077b6:	461a      	mov	r2, r3
 80077b8:	8a7b      	ldrh	r3, [r7, #18]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 80077be:	8a7b      	ldrh	r3, [r7, #18]
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	d851      	bhi.n	8007868 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 80077c4:	7d7b      	ldrb	r3, [r7, #21]
 80077c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007874 <pal_os_datastore_read+0x104>)
 80077c8:	4413      	add	r3, r2
 80077ca:	8a7a      	ldrh	r2, [r7, #18]
 80077cc:	4619      	mov	r1, r3
 80077ce:	68b8      	ldr	r0, [r7, #8]
 80077d0:	f009 fbd5 	bl	8010f7e <memcpy>
                *p_buffer_length = data_length;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8a7a      	ldrh	r2, [r7, #18]
 80077d8:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 80077da:	2300      	movs	r3, #0
 80077dc:	82fb      	strh	r3, [r7, #22]
            }
            break;
 80077de:	e043      	b.n	8007868 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 80077e0:	7d7b      	ldrb	r3, [r7, #21]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	757a      	strb	r2, [r7, #21]
 80077e6:	461a      	mov	r2, r3
 80077e8:	4b23      	ldr	r3, [pc, #140]	@ (8007878 <pal_os_datastore_read+0x108>)
 80077ea:	5c9b      	ldrb	r3, [r3, r2]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 80077f0:	7d7b      	ldrb	r3, [r7, #21]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	757a      	strb	r2, [r7, #21]
 80077f6:	461a      	mov	r2, r3
 80077f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007878 <pal_os_datastore_read+0x108>)
 80077fa:	5c9b      	ldrb	r3, [r3, r2]
 80077fc:	461a      	mov	r2, r3
 80077fe:	8a7b      	ldrh	r3, [r7, #18]
 8007800:	4313      	orrs	r3, r2
 8007802:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8007804:	7d7b      	ldrb	r3, [r7, #21]
 8007806:	4a1c      	ldr	r2, [pc, #112]	@ (8007878 <pal_os_datastore_read+0x108>)
 8007808:	4413      	add	r3, r2
 800780a:	8a7a      	ldrh	r2, [r7, #18]
 800780c:	4619      	mov	r1, r3
 800780e:	68b8      	ldr	r0, [r7, #8]
 8007810:	f009 fbb5 	bl	8010f7e <memcpy>
            *p_buffer_length = data_length;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	8a7a      	ldrh	r2, [r7, #18]
 8007818:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 800781a:	2300      	movs	r3, #0
 800781c:	82fb      	strh	r3, [r7, #22]
            break;
 800781e:	e024      	b.n	800786a <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8007820:	7d7b      	ldrb	r3, [r7, #21]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	757a      	strb	r2, [r7, #21]
 8007826:	461a      	mov	r2, r3
 8007828:	4b14      	ldr	r3, [pc, #80]	@ (800787c <pal_os_datastore_read+0x10c>)
 800782a:	5c9b      	ldrb	r3, [r3, r2]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8007830:	7d7b      	ldrb	r3, [r7, #21]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	757a      	strb	r2, [r7, #21]
 8007836:	461a      	mov	r2, r3
 8007838:	4b10      	ldr	r3, [pc, #64]	@ (800787c <pal_os_datastore_read+0x10c>)
 800783a:	5c9b      	ldrb	r3, [r3, r2]
 800783c:	461a      	mov	r2, r3
 800783e:	8a7b      	ldrh	r3, [r7, #18]
 8007840:	4313      	orrs	r3, r2
 8007842:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8007844:	7d7b      	ldrb	r3, [r7, #21]
 8007846:	4a0d      	ldr	r2, [pc, #52]	@ (800787c <pal_os_datastore_read+0x10c>)
 8007848:	4413      	add	r3, r2
 800784a:	8a7a      	ldrh	r2, [r7, #18]
 800784c:	4619      	mov	r1, r3
 800784e:	68b8      	ldr	r0, [r7, #8]
 8007850:	f009 fb95 	bl	8010f7e <memcpy>
            *p_buffer_length = data_length;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8a7a      	ldrh	r2, [r7, #18]
 8007858:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 800785a:	2300      	movs	r3, #0
 800785c:	82fb      	strh	r3, [r7, #22]
            break;
 800785e:	e004      	b.n	800786a <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	801a      	strh	r2, [r3, #0]
            break;
 8007866:	e000      	b.n	800786a <pal_os_datastore_read+0xfa>
            break;
 8007868:	bf00      	nop
        }
    }

    return return_status;
 800786a:	8afb      	ldrh	r3, [r7, #22]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000510 	.word	0x20000510
 8007878:	20000db8 	.word	0x20000db8
 800787c:	20000dfc 	.word	0x20000dfc

08007880 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7a1b      	ldrb	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d109      	bne.n	80078a8 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 800789a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 f82a 	bl	80078fc <pal_os_event_register_callback_oneshot>
    }
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	721a      	strb	r2, [r3, #8]
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <pal_os_event_create+0x20>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4804      	ldr	r0, [pc, #16]	@ (80078f8 <pal_os_event_create+0x2c>)
 80078e8:	f7ff ffca 	bl	8007880 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 80078ec:	4b02      	ldr	r3, [pc, #8]	@ (80078f8 <pal_os_event_create+0x2c>)
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000e08 	.word	0x20000e08

080078fc <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	4a0d      	ldr	r2, [pc, #52]	@ (8007944 <pal_os_event_register_callback_oneshot+0x48>)
 800790e:	fba2 2303 	umull	r2, r3, r2, r3
 8007912:	099b      	lsrs	r3, r3, #6
 8007914:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 8007922:	f003 f867 	bl	800a9f4 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4413      	add	r3, r2
 800792c:	4a06      	ldr	r2, [pc, #24]	@ (8007948 <pal_os_event_register_callback_oneshot+0x4c>)
 800792e:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8007930:	4b06      	ldr	r3, [pc, #24]	@ (800794c <pal_os_event_register_callback_oneshot+0x50>)
 8007932:	2201      	movs	r2, #1
 8007934:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 8007936:	4806      	ldr	r0, [pc, #24]	@ (8007950 <pal_os_event_register_callback_oneshot+0x54>)
 8007938:	f007 fc06 	bl	800f148 <HAL_TIM_Base_Start_IT>
}
 800793c:	bf00      	nop
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	10624dd3 	.word	0x10624dd3
 8007948:	20000e20 	.word	0x20000e20
 800794c:	20000e24 	.word	0x20000e24
 8007950:	20000638 	.word	0x20000638

08007954 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <pal_os_event_trigger_registered_callback+0x3c>)
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d011      	beq.n	8007986 <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 8007962:	4b0b      	ldr	r3, [pc, #44]	@ (8007990 <pal_os_event_trigger_registered_callback+0x3c>)
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8007968:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <pal_os_event_trigger_registered_callback+0x3c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 800796e:	4b08      	ldr	r3, [pc, #32]	@ (8007990 <pal_os_event_trigger_registered_callback+0x3c>)
 8007970:	2200      	movs	r2, #0
 8007972:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8007974:	4b06      	ldr	r3, [pc, #24]	@ (8007990 <pal_os_event_trigger_registered_callback+0x3c>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 800797a:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <pal_os_event_trigger_registered_callback+0x40>)
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6838      	ldr	r0, [r7, #0]
 8007984:	4798      	blx	r3
    }
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000e08 	.word	0x20000e08
 8007994:	20000e24 	.word	0x20000e24

08007998 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 800799c:	4b07      	ldr	r3, [pc, #28]	@ (80079bc <pal_os_event_timer_tick+0x24>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <pal_os_event_timer_tick+0x1e>
 80079a4:	f003 f826 	bl	800a9f4 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <pal_os_event_timer_tick+0x28>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d301      	bcc.n	80079b6 <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 80079b2:	f7ff ffcf 	bl	8007954 <pal_os_event_trigger_registered_callback>
    }
}
 80079b6:	bf00      	nop
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000e24 	.word	0x20000e24
 80079c0:	20000e20 	.word	0x20000e20

080079c4 <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 80079dc:	bf00      	nop
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 80079e6:	b480      	push	{r7}
 80079e8:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 80079ea:	bf00      	nop
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f009 f833 	bl	8010a6c <calloc>
 8007a06:	4603      	mov	r3, r0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <pal_os_free>:

void pal_os_free(void * block)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
    free(block);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f009 f843 	bl	8010aa4 <free>
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f009 faa1 	bl	8010f7e <memcpy>
}
 8007a3c:	bf00      	nop
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f009 fa4a 	bl	8010ef2 <memset>
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 8007a6a:	f002 ffc3 	bl	800a9f4 <HAL_GetTick>
 8007a6e:	4603      	mov	r3, r0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8007a78:	f002 ffbc 	bl	800a9f4 <HAL_GetTick>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8007a96:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <mbedtls_platform_zeroize+0x20>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000554 	.word	0x20000554

08007ab0 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8007ab8:	226c      	movs	r2, #108	@ 0x6c
 8007aba:	2100      	movs	r1, #0
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f009 fa18 	bl	8010ef2 <memset>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8007ad8:	216c      	movs	r1, #108	@ 0x6c
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff ffd6 	bl	8007a8c <mbedtls_platform_zeroize>
 8007ae0:	e000      	b.n	8007ae4 <mbedtls_sha256_free+0x1a>
        return;
 8007ae2:	bf00      	nop
}
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d118      	bne.n	8007b3a <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b80 <mbedtls_sha256_starts_ret+0x94>)
 8007b0c:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1c      	ldr	r2, [pc, #112]	@ (8007b84 <mbedtls_sha256_starts_ret+0x98>)
 8007b12:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <mbedtls_sha256_starts_ret+0x9c>)
 8007b18:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007b8c <mbedtls_sha256_starts_ret+0xa0>)
 8007b1e:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1b      	ldr	r2, [pc, #108]	@ (8007b90 <mbedtls_sha256_starts_ret+0xa4>)
 8007b24:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a1a      	ldr	r2, [pc, #104]	@ (8007b94 <mbedtls_sha256_starts_ret+0xa8>)
 8007b2a:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b98 <mbedtls_sha256_starts_ret+0xac>)
 8007b30:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a19      	ldr	r2, [pc, #100]	@ (8007b9c <mbedtls_sha256_starts_ret+0xb0>)
 8007b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b38:	e017      	b.n	8007b6a <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <mbedtls_sha256_starts_ret+0xb4>)
 8007b3e:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a18      	ldr	r2, [pc, #96]	@ (8007ba4 <mbedtls_sha256_starts_ret+0xb8>)
 8007b44:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a17      	ldr	r2, [pc, #92]	@ (8007ba8 <mbedtls_sha256_starts_ret+0xbc>)
 8007b4a:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	@ (8007bac <mbedtls_sha256_starts_ret+0xc0>)
 8007b50:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a16      	ldr	r2, [pc, #88]	@ (8007bb0 <mbedtls_sha256_starts_ret+0xc4>)
 8007b56:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a16      	ldr	r2, [pc, #88]	@ (8007bb4 <mbedtls_sha256_starts_ret+0xc8>)
 8007b5c:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a15      	ldr	r2, [pc, #84]	@ (8007bb8 <mbedtls_sha256_starts_ret+0xcc>)
 8007b62:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a15      	ldr	r2, [pc, #84]	@ (8007bbc <mbedtls_sha256_starts_ret+0xd0>)
 8007b68:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	6a09e667 	.word	0x6a09e667
 8007b84:	bb67ae85 	.word	0xbb67ae85
 8007b88:	3c6ef372 	.word	0x3c6ef372
 8007b8c:	a54ff53a 	.word	0xa54ff53a
 8007b90:	510e527f 	.word	0x510e527f
 8007b94:	9b05688c 	.word	0x9b05688c
 8007b98:	1f83d9ab 	.word	0x1f83d9ab
 8007b9c:	5be0cd19 	.word	0x5be0cd19
 8007ba0:	c1059ed8 	.word	0xc1059ed8
 8007ba4:	367cd507 	.word	0x367cd507
 8007ba8:	3070dd17 	.word	0x3070dd17
 8007bac:	f70e5939 	.word	0xf70e5939
 8007bb0:	ffc00b31 	.word	0xffc00b31
 8007bb4:	68581511 	.word	0x68581511
 8007bb8:	64f98fa7 	.word	0x64f98fa7
 8007bbc:	befa4fa4 	.word	0xbefa4fa4

08007bc0 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8007bc0:	b490      	push	{r4, r7}
 8007bc2:	b0ce      	sub	sp, #312	@ 0x138
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007bce:	6018      	str	r0, [r3, #0]
 8007bd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bd4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007bd8:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007be0:	e016      	b.n	8007c10 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8007be2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007be6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007bf0:	3202      	adds	r2, #2
 8007bf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bfe:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8007c06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c14:	2b07      	cmp	r3, #7
 8007c16:	d9e4      	bls.n	8007be2 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c1e:	e03e      	b.n	8007c9e <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8007c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007c2a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	061a      	lsls	r2, r3, #24
 8007c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c42:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c46:	6809      	ldr	r1, [r1, #0]
 8007c48:	440b      	add	r3, r1
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	041b      	lsls	r3, r3, #16
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	3302      	adds	r3, #2
 8007c58:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c5c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c60:	6809      	ldr	r1, [r1, #0]
 8007c62:	440b      	add	r3, r1
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	3203      	adds	r2, #3
 8007c72:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007c76:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007c7a:	6809      	ldr	r1, [r1, #0]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	ea43 0102 	orr.w	r1, r3, r2
 8007c84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c8c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8007c94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007c9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ca2:	2b0f      	cmp	r3, #15
 8007ca4:	d9bc      	bls.n	8007c20 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007cac:	f000 bcba 	b.w	8008624 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8007cb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cb8:	69da      	ldr	r2, [r3, #28]
 8007cba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ccc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007cd6:	4059      	eors	r1, r3
 8007cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007ce6:	404b      	eors	r3, r1
 8007ce8:	441a      	add	r2, r3
 8007cea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cf2:	6999      	ldr	r1, [r3, #24]
 8007cf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cfc:	6918      	ldr	r0, [r3, #16]
 8007cfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d06:	695c      	ldr	r4, [r3, #20]
 8007d08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	4063      	eors	r3, r4
 8007d14:	4003      	ands	r3, r0
 8007d16:	404b      	eors	r3, r1
 8007d18:	441a      	add	r2, r3
 8007d1a:	49e0      	ldr	r1, [pc, #896]	@ (800809c <mbedtls_internal_sha256_process+0x4dc>)
 8007d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d24:	441a      	add	r2, r3
 8007d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d2e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007d32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d36:	4413      	add	r3, r2
 8007d38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007d3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007d58:	405a      	eors	r2, r3
 8007d5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007d68:	405a      	eors	r2, r3
 8007d6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	4019      	ands	r1, r3
 8007d80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d88:	6898      	ldr	r0, [r3, #8]
 8007d8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d92:	681c      	ldr	r4, [r3, #0]
 8007d94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4323      	orrs	r3, r4
 8007da0:	4003      	ands	r3, r0
 8007da2:	430b      	orrs	r3, r1
 8007da4:	4413      	add	r3, r2
 8007da6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007daa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007db8:	441a      	add	r2, r3
 8007dba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007dcc:	441a      	add	r2, r3
 8007dce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dd6:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007dd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ddc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007dfe:	4059      	eors	r1, r3
 8007e00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007e0e:	404b      	eors	r3, r1
 8007e10:	441a      	add	r2, r3
 8007e12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e1a:	6959      	ldr	r1, [r3, #20]
 8007e1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e24:	68d8      	ldr	r0, [r3, #12]
 8007e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e2e:	691c      	ldr	r4, [r3, #16]
 8007e30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	4063      	eors	r3, r4
 8007e3c:	4003      	ands	r3, r0
 8007e3e:	404b      	eors	r3, r1
 8007e40:	441a      	add	r2, r3
 8007e42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e46:	3301      	adds	r3, #1
 8007e48:	4994      	ldr	r1, [pc, #592]	@ (800809c <mbedtls_internal_sha256_process+0x4dc>)
 8007e4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e4e:	441a      	add	r2, r3
 8007e50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e54:	1c59      	adds	r1, r3, #1
 8007e56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e62:	4413      	add	r3, r2
 8007e64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007e76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007e84:	405a      	eors	r2, r3
 8007e86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007e94:	405a      	eors	r2, r3
 8007e96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e9e:	69d9      	ldr	r1, [r3, #28]
 8007ea0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ea4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4019      	ands	r1, r3
 8007eac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eb4:	6858      	ldr	r0, [r3, #4]
 8007eb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ebe:	69dc      	ldr	r4, [r3, #28]
 8007ec0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ec4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4323      	orrs	r3, r4
 8007ecc:	4003      	ands	r3, r0
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007ed6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ee4:	441a      	add	r2, r3
 8007ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ef8:	441a      	add	r2, r3
 8007efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007efe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f02:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8007f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f0c:	695a      	ldr	r2, [r3, #20]
 8007f0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007f2a:	4059      	eors	r1, r3
 8007f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007f3a:	404b      	eors	r3, r1
 8007f3c:	441a      	add	r2, r3
 8007f3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f46:	6919      	ldr	r1, [r3, #16]
 8007f48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f50:	6898      	ldr	r0, [r3, #8]
 8007f52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f5a:	68dc      	ldr	r4, [r3, #12]
 8007f5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4063      	eors	r3, r4
 8007f68:	4003      	ands	r3, r0
 8007f6a:	404b      	eors	r3, r1
 8007f6c:	441a      	add	r2, r3
 8007f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f72:	3302      	adds	r3, #2
 8007f74:	4949      	ldr	r1, [pc, #292]	@ (800809c <mbedtls_internal_sha256_process+0x4dc>)
 8007f76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f7a:	441a      	add	r2, r3
 8007f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f80:	1c99      	adds	r1, r3, #2
 8007f82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007f94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007fb0:	405a      	eors	r2, r3
 8007fb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007fc0:	405a      	eors	r2, r3
 8007fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fca:	6999      	ldr	r1, [r3, #24]
 8007fcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	4019      	ands	r1, r3
 8007fd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fe6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fea:	699c      	ldr	r4, [r3, #24]
 8007fec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ff0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	4323      	orrs	r3, r4
 8007ff8:	4003      	ands	r3, r0
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008002:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008010:	441a      	add	r2, r3
 8008012:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008016:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800801a:	605a      	str	r2, [r3, #4]
 800801c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008020:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008024:	441a      	add	r2, r3
 8008026:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800802a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800802e:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8008030:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008034:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800803e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800804c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008056:	4059      	eors	r1, r3
 8008058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800805c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008066:	404b      	eors	r3, r1
 8008068:	441a      	add	r2, r3
 800806a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800806e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008072:	68d9      	ldr	r1, [r3, #12]
 8008074:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008078:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800807c:	6858      	ldr	r0, [r3, #4]
 800807e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008082:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008086:	689c      	ldr	r4, [r3, #8]
 8008088:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800808c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	4063      	eors	r3, r4
 8008094:	4003      	ands	r3, r0
 8008096:	404b      	eors	r3, r1
 8008098:	441a      	add	r2, r3
 800809a:	e001      	b.n	80080a0 <mbedtls_internal_sha256_process+0x4e0>
 800809c:	08013628 	.word	0x08013628
 80080a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80080a4:	3303      	adds	r3, #3
 80080a6:	49e0      	ldr	r1, [pc, #896]	@ (8008428 <mbedtls_internal_sha256_process+0x868>)
 80080a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080ac:	441a      	add	r2, r3
 80080ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80080b2:	1cd9      	adds	r1, r3, #3
 80080b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80080bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080c0:	4413      	add	r3, r2
 80080c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80080c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80080d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	ea4f 3373 	mov.w	r3, r3, ror #13
 80080e2:	405a      	eors	r2, r3
 80080e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80080f2:	405a      	eors	r2, r3
 80080f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	4019      	ands	r1, r3
 800810a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800810e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008112:	69d8      	ldr	r0, [r3, #28]
 8008114:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008118:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800811c:	695c      	ldr	r4, [r3, #20]
 800811e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008122:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	4323      	orrs	r3, r4
 800812a:	4003      	ands	r3, r0
 800812c:	430b      	orrs	r3, r1
 800812e:	4413      	add	r3, r2
 8008130:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008134:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008138:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008142:	441a      	add	r2, r3
 8008144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008148:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008156:	441a      	add	r2, r3
 8008158:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800815c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008160:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8008162:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008166:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008170:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800817a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800817e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008188:	4059      	eors	r1, r3
 800818a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800818e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008198:	404b      	eors	r3, r1
 800819a:	441a      	add	r2, r3
 800819c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081a4:	6899      	ldr	r1, [r3, #8]
 80081a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081b8:	685c      	ldr	r4, [r3, #4]
 80081ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	4063      	eors	r3, r4
 80081c6:	4003      	ands	r3, r0
 80081c8:	404b      	eors	r3, r1
 80081ca:	441a      	add	r2, r3
 80081cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081d0:	3304      	adds	r3, #4
 80081d2:	4995      	ldr	r1, [pc, #596]	@ (8008428 <mbedtls_internal_sha256_process+0x868>)
 80081d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081d8:	441a      	add	r2, r3
 80081da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081de:	1d19      	adds	r1, r3, #4
 80081e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081ec:	4413      	add	r3, r2
 80081ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80081f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008200:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800820e:	405a      	eors	r2, r3
 8008210:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008214:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800821e:	405a      	eors	r2, r3
 8008220:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008224:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008228:	6919      	ldr	r1, [r3, #16]
 800822a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800822e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	4019      	ands	r1, r3
 8008236:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800823a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800823e:	6998      	ldr	r0, [r3, #24]
 8008240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008244:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008248:	691c      	ldr	r4, [r3, #16]
 800824a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800824e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	4323      	orrs	r3, r4
 8008256:	4003      	ands	r3, r0
 8008258:	430b      	orrs	r3, r1
 800825a:	4413      	add	r3, r2
 800825c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008260:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008264:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800826e:	441a      	add	r2, r3
 8008270:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008274:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008278:	61da      	str	r2, [r3, #28]
 800827a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800827e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008282:	441a      	add	r2, r3
 8008284:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008288:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800828c:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 800828e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008292:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800829c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80082a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80082b4:	4059      	eors	r1, r3
 80082b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80082c4:	404b      	eors	r3, r1
 80082c6:	441a      	add	r2, r3
 80082c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082d0:	6859      	ldr	r1, [r3, #4]
 80082d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082da:	69d8      	ldr	r0, [r3, #28]
 80082dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082e4:	681c      	ldr	r4, [r3, #0]
 80082e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	4063      	eors	r3, r4
 80082f2:	4003      	ands	r3, r0
 80082f4:	404b      	eors	r3, r1
 80082f6:	441a      	add	r2, r3
 80082f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80082fc:	3305      	adds	r3, #5
 80082fe:	494a      	ldr	r1, [pc, #296]	@ (8008428 <mbedtls_internal_sha256_process+0x868>)
 8008300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008304:	441a      	add	r2, r3
 8008306:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800830a:	1d59      	adds	r1, r3, #5
 800830c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008310:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008318:	4413      	add	r3, r2
 800831a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800831e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008322:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800832c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	ea4f 3373 	mov.w	r3, r3, ror #13
 800833a:	405a      	eors	r2, r3
 800833c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800834a:	405a      	eors	r2, r3
 800834c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008354:	68d9      	ldr	r1, [r3, #12]
 8008356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800835a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4019      	ands	r1, r3
 8008362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008366:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800836a:	6958      	ldr	r0, [r3, #20]
 800836c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008370:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008374:	68dc      	ldr	r4, [r3, #12]
 8008376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800837a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4323      	orrs	r3, r4
 8008382:	4003      	ands	r3, r0
 8008384:	430b      	orrs	r3, r1
 8008386:	4413      	add	r3, r2
 8008388:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800838c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008390:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800839a:	441a      	add	r2, r3
 800839c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083a4:	619a      	str	r2, [r3, #24]
 80083a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80083aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80083ae:	441a      	add	r2, r3
 80083b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083b8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80083ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80083d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80083e0:	4059      	eors	r1, r3
 80083e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	ea4f 6373 	mov.w	r3, r3, ror #25
 80083f0:	404b      	eors	r3, r1
 80083f2:	441a      	add	r2, r3
 80083f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083fc:	6819      	ldr	r1, [r3, #0]
 80083fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008406:	6998      	ldr	r0, [r3, #24]
 8008408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800840c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008410:	69dc      	ldr	r4, [r3, #28]
 8008412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008416:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4063      	eors	r3, r4
 800841e:	4003      	ands	r3, r0
 8008420:	404b      	eors	r3, r1
 8008422:	441a      	add	r2, r3
 8008424:	e002      	b.n	800842c <mbedtls_internal_sha256_process+0x86c>
 8008426:	bf00      	nop
 8008428:	08013628 	.word	0x08013628
 800842c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008430:	3306      	adds	r3, #6
 8008432:	4981      	ldr	r1, [pc, #516]	@ (8008638 <mbedtls_internal_sha256_process+0xa78>)
 8008434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008438:	441a      	add	r2, r3
 800843a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800843e:	1d99      	adds	r1, r3, #6
 8008440:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800844c:	4413      	add	r3, r2
 800844e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008452:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008456:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008460:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008464:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800846e:	405a      	eors	r2, r3
 8008470:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008474:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800847e:	405a      	eors	r2, r3
 8008480:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008484:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008488:	6899      	ldr	r1, [r3, #8]
 800848a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800848e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	4019      	ands	r1, r3
 8008496:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800849a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800849e:	6918      	ldr	r0, [r3, #16]
 80084a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084a8:	689c      	ldr	r4, [r3, #8]
 80084aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	4323      	orrs	r3, r4
 80084b6:	4003      	ands	r3, r0
 80084b8:	430b      	orrs	r3, r1
 80084ba:	4413      	add	r3, r2
 80084bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80084c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084c8:	695a      	ldr	r2, [r3, #20]
 80084ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80084ce:	441a      	add	r2, r3
 80084d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084d8:	615a      	str	r2, [r3, #20]
 80084da:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80084de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084e2:	441a      	add	r2, r3
 80084e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ec:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80084ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008506:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800850a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008514:	4059      	eors	r1, r3
 8008516:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800851a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008524:	404b      	eors	r3, r1
 8008526:	441a      	add	r2, r3
 8008528:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800852c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008530:	69d9      	ldr	r1, [r3, #28]
 8008532:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008536:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800853a:	6958      	ldr	r0, [r3, #20]
 800853c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008540:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008544:	699c      	ldr	r4, [r3, #24]
 8008546:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800854a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	4063      	eors	r3, r4
 8008552:	4003      	ands	r3, r0
 8008554:	404b      	eors	r3, r1
 8008556:	441a      	add	r2, r3
 8008558:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800855c:	3307      	adds	r3, #7
 800855e:	4936      	ldr	r1, [pc, #216]	@ (8008638 <mbedtls_internal_sha256_process+0xa78>)
 8008560:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008564:	441a      	add	r2, r3
 8008566:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800856a:	1dd9      	adds	r1, r3, #7
 800856c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008570:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008574:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008578:	4413      	add	r3, r2
 800857a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800857e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008582:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800858c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008590:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	ea4f 3373 	mov.w	r3, r3, ror #13
 800859a:	405a      	eors	r2, r3
 800859c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80085aa:	405a      	eors	r2, r3
 80085ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085b4:	6859      	ldr	r1, [r3, #4]
 80085b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	4019      	ands	r1, r3
 80085c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085ca:	68d8      	ldr	r0, [r3, #12]
 80085cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085d4:	685c      	ldr	r4, [r3, #4]
 80085d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	4323      	orrs	r3, r4
 80085e2:	4003      	ands	r3, r0
 80085e4:	430b      	orrs	r3, r1
 80085e6:	4413      	add	r3, r2
 80085e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80085ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80085fa:	441a      	add	r2, r3
 80085fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008600:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008604:	611a      	str	r2, [r3, #16]
 8008606:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800860a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800860e:	441a      	add	r2, r3
 8008610:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008614:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008618:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 800861a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800861e:	3308      	adds	r3, #8
 8008620:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008624:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008628:	2b0f      	cmp	r3, #15
 800862a:	f67f ab41 	bls.w	8007cb0 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 800862e:	2310      	movs	r3, #16
 8008630:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008634:	f000 bfd5 	b.w	80095e2 <mbedtls_internal_sha256_process+0x1a22>
 8008638:	08013628 	.word	0x08013628
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 800863c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008640:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800864a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008654:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008658:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008662:	4059      	eors	r1, r3
 8008664:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008672:	404b      	eors	r3, r1
 8008674:	441a      	add	r2, r3
 8008676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800867a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800867e:	6999      	ldr	r1, [r3, #24]
 8008680:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008684:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008688:	6918      	ldr	r0, [r3, #16]
 800868a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800868e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008692:	695c      	ldr	r4, [r3, #20]
 8008694:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008698:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	4063      	eors	r3, r4
 80086a0:	4003      	ands	r3, r0
 80086a2:	404b      	eors	r3, r1
 80086a4:	441a      	add	r2, r3
 80086a6:	49ec      	ldr	r1, [pc, #944]	@ (8008a58 <mbedtls_internal_sha256_process+0xe98>)
 80086a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80086b0:	441a      	add	r2, r3
 80086b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086b6:	1e99      	subs	r1, r3, #2
 80086b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086c4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80086c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086cc:	1e98      	subs	r0, r3, #2
 80086ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086da:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80086de:	4059      	eors	r1, r3
 80086e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086e4:	1e98      	subs	r0, r3, #2
 80086e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80086ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80086f2:	0a9b      	lsrs	r3, r3, #10
 80086f4:	4059      	eors	r1, r3
 80086f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80086fa:	1fd8      	subs	r0, r3, #7
 80086fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008700:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008704:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008708:	4419      	add	r1, r3
 800870a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800870e:	f1a3 000f 	sub.w	r0, r3, #15
 8008712:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800871a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800871e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008722:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008726:	f1a3 040f 	sub.w	r4, r3, #15
 800872a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800872e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008732:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008736:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800873a:	4058      	eors	r0, r3
 800873c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008740:	f1a3 040f 	sub.w	r4, r3, #15
 8008744:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008748:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800874c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	4043      	eors	r3, r0
 8008754:	4419      	add	r1, r3
 8008756:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800875a:	f1a3 0010 	sub.w	r0, r3, #16
 800875e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008762:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008766:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800876a:	18c8      	adds	r0, r1, r3
 800876c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008770:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008774:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008778:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 800877c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008780:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008784:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800878c:	4413      	add	r3, r2
 800878e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008792:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008796:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80087a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80087ae:	405a      	eors	r2, r3
 80087b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80087be:	405a      	eors	r2, r3
 80087c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087c8:	6819      	ldr	r1, [r3, #0]
 80087ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4019      	ands	r1, r3
 80087d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087de:	6898      	ldr	r0, [r3, #8]
 80087e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087e8:	681c      	ldr	r4, [r3, #0]
 80087ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4323      	orrs	r3, r4
 80087f6:	4003      	ands	r3, r0
 80087f8:	430b      	orrs	r3, r1
 80087fa:	4413      	add	r3, r2
 80087fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008800:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008804:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800880e:	441a      	add	r2, r3
 8008810:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008814:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800881e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008822:	441a      	add	r2, r3
 8008824:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008828:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800882c:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 800882e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008832:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008836:	699a      	ldr	r2, [r3, #24]
 8008838:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800883c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008846:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800884a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008854:	4059      	eors	r1, r3
 8008856:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800885a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008864:	404b      	eors	r3, r1
 8008866:	441a      	add	r2, r3
 8008868:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800886c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008870:	6959      	ldr	r1, [r3, #20]
 8008872:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008876:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800887a:	68d8      	ldr	r0, [r3, #12]
 800887c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008884:	691c      	ldr	r4, [r3, #16]
 8008886:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800888a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	4063      	eors	r3, r4
 8008892:	4003      	ands	r3, r0
 8008894:	404b      	eors	r3, r1
 8008896:	441a      	add	r2, r3
 8008898:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800889c:	3301      	adds	r3, #1
 800889e:	496e      	ldr	r1, [pc, #440]	@ (8008a58 <mbedtls_internal_sha256_process+0xe98>)
 80088a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088a4:	441a      	add	r2, r3
 80088a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088aa:	1e59      	subs	r1, r3, #1
 80088ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088b8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80088bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088c0:	1e58      	subs	r0, r3, #1
 80088c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088ce:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80088d2:	4059      	eors	r1, r3
 80088d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088d8:	1e58      	subs	r0, r3, #1
 80088da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088e6:	0a9b      	lsrs	r3, r3, #10
 80088e8:	4059      	eors	r1, r3
 80088ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80088ee:	1f98      	subs	r0, r3, #6
 80088f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80088f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088fc:	4419      	add	r1, r3
 80088fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008902:	f1a3 000e 	sub.w	r0, r3, #14
 8008906:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800890a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800890e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008912:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008916:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800891a:	f1a3 040e 	sub.w	r4, r3, #14
 800891e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008922:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008926:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800892a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800892e:	4058      	eors	r0, r3
 8008930:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008934:	f1a3 040e 	sub.w	r4, r3, #14
 8008938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800893c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008940:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008944:	08db      	lsrs	r3, r3, #3
 8008946:	4043      	eors	r3, r0
 8008948:	18c8      	adds	r0, r1, r3
 800894a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800894e:	f1a3 010f 	sub.w	r1, r3, #15
 8008952:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008956:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800895a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800895e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008962:	3301      	adds	r3, #1
 8008964:	4408      	add	r0, r1
 8008966:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800896a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800896e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008972:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008976:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800897a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800897e:	4413      	add	r3, r2
 8008980:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008992:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008996:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	ea4f 3373 	mov.w	r3, r3, ror #13
 80089a0:	405a      	eors	r2, r3
 80089a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80089b0:	405a      	eors	r2, r3
 80089b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089ba:	69d9      	ldr	r1, [r3, #28]
 80089bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4019      	ands	r1, r3
 80089c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089d0:	6858      	ldr	r0, [r3, #4]
 80089d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089da:	69dc      	ldr	r4, [r3, #28]
 80089dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4323      	orrs	r3, r4
 80089e8:	4003      	ands	r3, r0
 80089ea:	430b      	orrs	r3, r1
 80089ec:	4413      	add	r3, r2
 80089ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80089f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008a00:	441a      	add	r2, r3
 8008a02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a0a:	609a      	str	r2, [r3, #8]
 8008a0c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a14:	441a      	add	r2, r3
 8008a16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a1e:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8008a20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a28:	695a      	ldr	r2, [r3, #20]
 8008a2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008a38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008a46:	4059      	eors	r1, r3
 8008a48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008a56:	e001      	b.n	8008a5c <mbedtls_internal_sha256_process+0xe9c>
 8008a58:	08013628 	.word	0x08013628
 8008a5c:	404b      	eors	r3, r1
 8008a5e:	441a      	add	r2, r3
 8008a60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a68:	6919      	ldr	r1, [r3, #16]
 8008a6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a72:	6898      	ldr	r0, [r3, #8]
 8008a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a7c:	68dc      	ldr	r4, [r3, #12]
 8008a7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	4063      	eors	r3, r4
 8008a8a:	4003      	ands	r3, r0
 8008a8c:	404b      	eors	r3, r1
 8008a8e:	441a      	add	r2, r3
 8008a90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a94:	3302      	adds	r3, #2
 8008a96:	49ec      	ldr	r1, [pc, #944]	@ (8008e48 <mbedtls_internal_sha256_process+0x1288>)
 8008a98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008aa6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008aaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008aae:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008ab2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ab6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008aba:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008abe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ac2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008ac6:	4059      	eors	r1, r3
 8008ac8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008acc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ad0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008ad4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ad8:	0a9b      	lsrs	r3, r3, #10
 8008ada:	4059      	eors	r1, r3
 8008adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ae0:	1f58      	subs	r0, r3, #5
 8008ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ae6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008aea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008aee:	4419      	add	r1, r3
 8008af0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008af4:	f1a3 000d 	sub.w	r0, r3, #13
 8008af8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008afc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008b04:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b0c:	f1a3 040d 	sub.w	r4, r3, #13
 8008b10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b1c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008b20:	4058      	eors	r0, r3
 8008b22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b26:	f1a3 040d 	sub.w	r4, r3, #13
 8008b2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b36:	08db      	lsrs	r3, r3, #3
 8008b38:	4043      	eors	r3, r0
 8008b3a:	18c8      	adds	r0, r1, r3
 8008b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b40:	f1a3 010e 	sub.w	r1, r3, #14
 8008b44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008b4c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b54:	3302      	adds	r3, #2
 8008b56:	4408      	add	r0, r1
 8008b58:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008b5c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008b60:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008b64:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008b68:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b70:	4413      	add	r3, r2
 8008b72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008b76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008b84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008b92:	405a      	eors	r2, r3
 8008b94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008ba2:	405a      	eors	r2, r3
 8008ba4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ba8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bac:	6999      	ldr	r1, [r3, #24]
 8008bae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	4019      	ands	r1, r3
 8008bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bcc:	699c      	ldr	r4, [r3, #24]
 8008bce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	4323      	orrs	r3, r4
 8008bda:	4003      	ands	r3, r0
 8008bdc:	430b      	orrs	r3, r1
 8008bde:	4413      	add	r3, r2
 8008be0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008be4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008be8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008bf2:	441a      	add	r2, r3
 8008bf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008bf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c06:	441a      	add	r2, r3
 8008c08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c10:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8008c12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c1a:	691a      	ldr	r2, [r3, #16]
 8008c1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008c38:	4059      	eors	r1, r3
 8008c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008c48:	404b      	eors	r3, r1
 8008c4a:	441a      	add	r2, r3
 8008c4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c54:	68d9      	ldr	r1, [r3, #12]
 8008c56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c5e:	6858      	ldr	r0, [r3, #4]
 8008c60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c68:	689c      	ldr	r4, [r3, #8]
 8008c6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4063      	eors	r3, r4
 8008c76:	4003      	ands	r3, r0
 8008c78:	404b      	eors	r3, r1
 8008c7a:	441a      	add	r2, r3
 8008c7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c80:	3303      	adds	r3, #3
 8008c82:	4971      	ldr	r1, [pc, #452]	@ (8008e48 <mbedtls_internal_sha256_process+0x1288>)
 8008c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c88:	441a      	add	r2, r3
 8008c8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008c8e:	1c59      	adds	r1, r3, #1
 8008c90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008c94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008c98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c9c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008ca0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ca4:	1c58      	adds	r0, r3, #1
 8008ca6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008caa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cb2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008cb6:	4059      	eors	r1, r3
 8008cb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cbc:	1c58      	adds	r0, r3, #1
 8008cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cc6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cca:	0a9b      	lsrs	r3, r3, #10
 8008ccc:	4059      	eors	r1, r3
 8008cce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cd2:	1f18      	subs	r0, r3, #4
 8008cd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cdc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ce0:	4419      	add	r1, r3
 8008ce2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ce6:	f1a3 000c 	sub.w	r0, r3, #12
 8008cea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008cee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008cf2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cf6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008cfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008cfe:	f1a3 040c 	sub.w	r4, r3, #12
 8008d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d0a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d0e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008d12:	4058      	eors	r0, r3
 8008d14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d18:	f1a3 040c 	sub.w	r4, r3, #12
 8008d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d28:	08db      	lsrs	r3, r3, #3
 8008d2a:	4043      	eors	r3, r0
 8008d2c:	18c8      	adds	r0, r1, r3
 8008d2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d32:	f1a3 010d 	sub.w	r1, r3, #13
 8008d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d3e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008d46:	3303      	adds	r3, #3
 8008d48:	4408      	add	r0, r1
 8008d4a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008d4e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008d52:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008d56:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008d5a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d62:	4413      	add	r3, r2
 8008d64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008d76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008d84:	405a      	eors	r2, r3
 8008d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008d94:	405a      	eors	r2, r3
 8008d96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008d9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008d9e:	6959      	ldr	r1, [r3, #20]
 8008da0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008da4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	4019      	ands	r1, r3
 8008dac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008db4:	69d8      	ldr	r0, [r3, #28]
 8008db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dbe:	695c      	ldr	r4, [r3, #20]
 8008dc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	4323      	orrs	r3, r4
 8008dcc:	4003      	ands	r3, r0
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008dd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008de4:	441a      	add	r2, r3
 8008de6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008df8:	441a      	add	r2, r3
 8008dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008dfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e02:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8008e04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008e1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008e2a:	4059      	eors	r1, r3
 8008e2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008e3a:	404b      	eors	r3, r1
 8008e3c:	441a      	add	r2, r3
 8008e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e46:	e001      	b.n	8008e4c <mbedtls_internal_sha256_process+0x128c>
 8008e48:	08013628 	.word	0x08013628
 8008e4c:	6899      	ldr	r1, [r3, #8]
 8008e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e60:	685c      	ldr	r4, [r3, #4]
 8008e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	4063      	eors	r3, r4
 8008e6e:	4003      	ands	r3, r0
 8008e70:	404b      	eors	r3, r1
 8008e72:	441a      	add	r2, r3
 8008e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e78:	3304      	adds	r3, #4
 8008e7a:	49ec      	ldr	r1, [pc, #944]	@ (800922c <mbedtls_internal_sha256_process+0x166c>)
 8008e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e80:	441a      	add	r2, r3
 8008e82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e86:	1c99      	adds	r1, r3, #2
 8008e88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008e8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008e90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e94:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008e9c:	1c98      	adds	r0, r3, #2
 8008e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ea2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ea6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008eaa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008eae:	4059      	eors	r1, r3
 8008eb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eb4:	1c98      	adds	r0, r3, #2
 8008eb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ebe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ec2:	0a9b      	lsrs	r3, r3, #10
 8008ec4:	4059      	eors	r1, r3
 8008ec6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008eca:	1ed8      	subs	r0, r3, #3
 8008ecc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ed0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008ed4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008ed8:	4419      	add	r1, r3
 8008eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ede:	f1a3 000b 	sub.w	r0, r3, #11
 8008ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ee6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008eea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008eee:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008ef2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ef6:	f1a3 040b 	sub.w	r4, r3, #11
 8008efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008efe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f06:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008f0a:	4058      	eors	r0, r3
 8008f0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f10:	f1a3 040b 	sub.w	r4, r3, #11
 8008f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f20:	08db      	lsrs	r3, r3, #3
 8008f22:	4043      	eors	r3, r0
 8008f24:	18c8      	adds	r0, r1, r3
 8008f26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f2a:	f1a3 010c 	sub.w	r1, r3, #12
 8008f2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008f36:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008f3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4408      	add	r0, r1
 8008f42:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008f46:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008f4a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008f4e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008f52:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008f56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008f60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008f6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008f7c:	405a      	eors	r2, r3
 8008f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008f8c:	405a      	eors	r2, r3
 8008f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008f96:	6919      	ldr	r1, [r3, #16]
 8008f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	4019      	ands	r1, r3
 8008fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fac:	6998      	ldr	r0, [r3, #24]
 8008fae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fb6:	691c      	ldr	r4, [r3, #16]
 8008fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	4323      	orrs	r3, r4
 8008fc4:	4003      	ands	r3, r0
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	4413      	add	r3, r2
 8008fca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fd6:	69da      	ldr	r2, [r3, #28]
 8008fd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008fdc:	441a      	add	r2, r3
 8008fde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fe2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008fe6:	61da      	str	r2, [r3, #28]
 8008fe8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008ff0:	441a      	add	r2, r3
 8008ff2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ff6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ffa:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8008ffc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009000:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800900a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8009014:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009018:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8009022:	4059      	eors	r1, r3
 8009024:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009028:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8009032:	404b      	eors	r3, r1
 8009034:	441a      	add	r2, r3
 8009036:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800903a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800903e:	6859      	ldr	r1, [r3, #4]
 8009040:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009044:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009048:	69d8      	ldr	r0, [r3, #28]
 800904a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800904e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009052:	681c      	ldr	r4, [r3, #0]
 8009054:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009058:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	4063      	eors	r3, r4
 8009060:	4003      	ands	r3, r0
 8009062:	404b      	eors	r3, r1
 8009064:	441a      	add	r2, r3
 8009066:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800906a:	3305      	adds	r3, #5
 800906c:	496f      	ldr	r1, [pc, #444]	@ (800922c <mbedtls_internal_sha256_process+0x166c>)
 800906e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009072:	441a      	add	r2, r3
 8009074:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009078:	1cd9      	adds	r1, r3, #3
 800907a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800907e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009086:	ea4f 4173 	mov.w	r1, r3, ror #17
 800908a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800908e:	1cd8      	adds	r0, r3, #3
 8009090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009094:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009098:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800909c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80090a0:	4059      	eors	r1, r3
 80090a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090a6:	1cd8      	adds	r0, r3, #3
 80090a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090b4:	0a9b      	lsrs	r3, r3, #10
 80090b6:	4059      	eors	r1, r3
 80090b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090bc:	1e98      	subs	r0, r3, #2
 80090be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090ca:	4419      	add	r1, r3
 80090cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090d0:	f1a3 000a 	sub.w	r0, r3, #10
 80090d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80090e0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80090e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80090e8:	f1a3 040a 	sub.w	r4, r3, #10
 80090ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80090f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80090f8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80090fc:	4058      	eors	r0, r3
 80090fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009102:	f1a3 040a 	sub.w	r4, r3, #10
 8009106:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800910a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800910e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	4043      	eors	r3, r0
 8009116:	18c8      	adds	r0, r1, r3
 8009118:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800911c:	f1a3 010b 	sub.w	r1, r3, #11
 8009120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009124:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009128:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800912c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009130:	3305      	adds	r3, #5
 8009132:	4408      	add	r0, r1
 8009134:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009138:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800913c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8009140:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009144:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800914c:	4413      	add	r3, r2
 800914e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009152:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8009160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009164:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800916e:	405a      	eors	r2, r3
 8009170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009174:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800917e:	405a      	eors	r2, r3
 8009180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009184:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009188:	68d9      	ldr	r1, [r3, #12]
 800918a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800918e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	4019      	ands	r1, r3
 8009196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800919a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800919e:	6958      	ldr	r0, [r3, #20]
 80091a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091a8:	68dc      	ldr	r4, [r3, #12]
 80091aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	4323      	orrs	r3, r4
 80091b6:	4003      	ands	r3, r0
 80091b8:	430b      	orrs	r3, r1
 80091ba:	4413      	add	r3, r2
 80091bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80091c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091ce:	441a      	add	r2, r3
 80091d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091d8:	619a      	str	r2, [r3, #24]
 80091da:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80091de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80091e2:	441a      	add	r2, r3
 80091e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091ec:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80091ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80091fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8009206:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800920a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8009214:	4059      	eors	r1, r3
 8009216:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800921a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	ea4f 6373 	mov.w	r3, r3, ror #25
 8009224:	404b      	eors	r3, r1
 8009226:	441a      	add	r2, r3
 8009228:	e002      	b.n	8009230 <mbedtls_internal_sha256_process+0x1670>
 800922a:	bf00      	nop
 800922c:	08013628 	.word	0x08013628
 8009230:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009234:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009238:	6819      	ldr	r1, [r3, #0]
 800923a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800923e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009242:	6998      	ldr	r0, [r3, #24]
 8009244:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800924c:	69dc      	ldr	r4, [r3, #28]
 800924e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009252:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4063      	eors	r3, r4
 800925a:	4003      	ands	r3, r0
 800925c:	404b      	eors	r3, r1
 800925e:	441a      	add	r2, r3
 8009260:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009264:	3306      	adds	r3, #6
 8009266:	49e3      	ldr	r1, [pc, #908]	@ (80095f4 <mbedtls_internal_sha256_process+0x1a34>)
 8009268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800926c:	441a      	add	r2, r3
 800926e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009272:	1d19      	adds	r1, r3, #4
 8009274:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009278:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800927c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009280:	ea4f 4173 	mov.w	r1, r3, ror #17
 8009284:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009288:	1d18      	adds	r0, r3, #4
 800928a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800928e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009292:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009296:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800929a:	4059      	eors	r1, r3
 800929c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092a0:	1d18      	adds	r0, r3, #4
 80092a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80092ae:	0a9b      	lsrs	r3, r3, #10
 80092b0:	4059      	eors	r1, r3
 80092b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092b6:	1e58      	subs	r0, r3, #1
 80092b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80092c4:	4419      	add	r1, r3
 80092c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092ca:	f1a3 0009 	sub.w	r0, r3, #9
 80092ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80092da:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80092de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092e2:	f1a3 0409 	sub.w	r4, r3, #9
 80092e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80092ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80092ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80092f2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80092f6:	4058      	eors	r0, r3
 80092f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80092fc:	f1a3 0409 	sub.w	r4, r3, #9
 8009300:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009304:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009308:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800930c:	08db      	lsrs	r3, r3, #3
 800930e:	4043      	eors	r3, r0
 8009310:	18c8      	adds	r0, r1, r3
 8009312:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009316:	f1a3 010a 	sub.w	r1, r3, #10
 800931a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800931e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009322:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009326:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800932a:	3306      	adds	r3, #6
 800932c:	4408      	add	r0, r1
 800932e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009332:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009336:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800933a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800933e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009342:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009346:	4413      	add	r3, r2
 8009348:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800934c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800935a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800935e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	ea4f 3373 	mov.w	r3, r3, ror #13
 8009368:	405a      	eors	r2, r3
 800936a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800936e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8009378:	405a      	eors	r2, r3
 800937a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800937e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009382:	6899      	ldr	r1, [r3, #8]
 8009384:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009388:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	4019      	ands	r1, r3
 8009390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009394:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009398:	6918      	ldr	r0, [r3, #16]
 800939a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800939e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093a2:	689c      	ldr	r4, [r3, #8]
 80093a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	4323      	orrs	r3, r4
 80093b0:	4003      	ands	r3, r0
 80093b2:	430b      	orrs	r3, r1
 80093b4:	4413      	add	r3, r2
 80093b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80093ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093c2:	695a      	ldr	r2, [r3, #20]
 80093c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093c8:	441a      	add	r2, r3
 80093ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093d2:	615a      	str	r2, [r3, #20]
 80093d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093dc:	441a      	add	r2, r3
 80093de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093e6:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80093e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80093f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8009400:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009404:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800940e:	4059      	eors	r1, r3
 8009410:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009414:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800941e:	404b      	eors	r3, r1
 8009420:	441a      	add	r2, r3
 8009422:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009426:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800942a:	69d9      	ldr	r1, [r3, #28]
 800942c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009430:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009434:	6958      	ldr	r0, [r3, #20]
 8009436:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800943a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800943e:	699c      	ldr	r4, [r3, #24]
 8009440:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009444:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4063      	eors	r3, r4
 800944c:	4003      	ands	r3, r0
 800944e:	404b      	eors	r3, r1
 8009450:	441a      	add	r2, r3
 8009452:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009456:	3307      	adds	r3, #7
 8009458:	4966      	ldr	r1, [pc, #408]	@ (80095f4 <mbedtls_internal_sha256_process+0x1a34>)
 800945a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800945e:	441a      	add	r2, r3
 8009460:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009464:	1d59      	adds	r1, r3, #5
 8009466:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800946a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800946e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009472:	ea4f 4173 	mov.w	r1, r3, ror #17
 8009476:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800947a:	1d58      	adds	r0, r3, #5
 800947c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009480:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009484:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009488:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800948c:	4059      	eors	r1, r3
 800948e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009492:	1d58      	adds	r0, r3, #5
 8009494:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009498:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800949c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80094a0:	0a9b      	lsrs	r3, r3, #10
 80094a2:	4059      	eors	r1, r3
 80094a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094ac:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80094b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80094b4:	4419      	add	r1, r3
 80094b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ba:	f1a3 0008 	sub.w	r0, r3, #8
 80094be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80094ca:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80094ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094d2:	f1a3 0408 	sub.w	r4, r3, #8
 80094d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80094e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80094e6:	4058      	eors	r0, r3
 80094e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ec:	f1a3 0408 	sub.w	r4, r3, #8
 80094f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80094f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80094fc:	08db      	lsrs	r3, r3, #3
 80094fe:	4043      	eors	r3, r0
 8009500:	18c8      	adds	r0, r1, r3
 8009502:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009506:	f1a3 0109 	sub.w	r1, r3, #9
 800950a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800950e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009512:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009516:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800951a:	3307      	adds	r3, #7
 800951c:	4408      	add	r0, r1
 800951e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8009522:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009526:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800952a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800952e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8009532:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009536:	4413      	add	r3, r2
 8009538:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800953c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009540:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800954a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800954e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	ea4f 3373 	mov.w	r3, r3, ror #13
 8009558:	405a      	eors	r2, r3
 800955a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800955e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8009568:	405a      	eors	r2, r3
 800956a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800956e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009572:	6859      	ldr	r1, [r3, #4]
 8009574:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009578:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	4019      	ands	r1, r3
 8009580:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009588:	68d8      	ldr	r0, [r3, #12]
 800958a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800958e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009592:	685c      	ldr	r4, [r3, #4]
 8009594:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009598:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4323      	orrs	r3, r4
 80095a0:	4003      	ands	r3, r0
 80095a2:	430b      	orrs	r3, r1
 80095a4:	4413      	add	r3, r2
 80095a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80095aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095b8:	441a      	add	r2, r3
 80095ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80095c2:	611a      	str	r2, [r3, #16]
 80095c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80095c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80095cc:	441a      	add	r2, r3
 80095ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80095d6:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 80095d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095dc:	3308      	adds	r3, #8
 80095de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80095e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80095e8:	f67f a828 	bls.w	800863c <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80095ec:	2300      	movs	r3, #0
 80095ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80095f2:	e023      	b.n	800963c <mbedtls_internal_sha256_process+0x1a7c>
 80095f4:	08013628 	.word	0x08013628
        ctx->state[i] += A[i];
 80095f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80095fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009606:	3202      	adds	r2, #2
 8009608:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800960c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009610:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009614:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8009618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800961c:	18d1      	adds	r1, r2, r3
 800961e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009622:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800962c:	3202      	adds	r2, #2
 800962e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8009632:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009636:	3301      	adds	r3, #1
 8009638:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800963c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009640:	2b07      	cmp	r3, #7
 8009642:	d9d9      	bls.n	80095f8 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800964c:	46bd      	mov	sp, r7
 800964e:	bc90      	pop	{r4, r7}
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop

08009654 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8009666:	2300      	movs	r3, #0
 8009668:	e065      	b.n	8009736 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009672:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800967a:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	441a      	add	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	429a      	cmp	r2, r3
 8009698:	d904      	bls.n	80096a4 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d034      	beq.n	8009714 <mbedtls_sha256_update_ret+0xc0>
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d330      	bcc.n	8009714 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f007 fc5c 	bl	8010f7e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3328      	adds	r3, #40	@ 0x28
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7fe fa77 	bl	8007bc0 <mbedtls_internal_sha256_process>
 80096d2:	6178      	str	r0, [r7, #20]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	e02b      	b.n	8009736 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	4413      	add	r3, r2
 80096e4:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	607b      	str	r3, [r7, #4]
        left = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 80096f2:	e00f      	b.n	8009714 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f7fe fa62 	bl	8007bc0 <mbedtls_internal_sha256_process>
 80096fc:	6178      	str	r0, [r7, #20]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	e016      	b.n	8009736 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3340      	adds	r3, #64	@ 0x40
 800970c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3b40      	subs	r3, #64	@ 0x40
 8009712:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b3f      	cmp	r3, #63	@ 0x3f
 8009718:	d8ec      	bhi.n	80096f4 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	4413      	add	r3, r2
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	4618      	mov	r0, r3
 8009730:	f007 fc25 	bl	8010f7e <memcpy>

    return( 0 );
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b086      	sub	sp, #24
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009750:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	617a      	str	r2, [r7, #20]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	2280      	movs	r2, #128	@ 0x80
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b38      	cmp	r3, #56	@ 0x38
 8009766:	d80c      	bhi.n	8009782 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	18d0      	adds	r0, r2, r3
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009778:	461a      	mov	r2, r3
 800977a:	2100      	movs	r1, #0
 800977c:	f007 fbb9 	bl	8010ef2 <memset>
 8009780:	e01e      	b.n	80097c0 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	18d0      	adds	r0, r2, r3
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8009792:	461a      	mov	r2, r3
 8009794:	2100      	movs	r1, #0
 8009796:	f007 fbac 	bl	8010ef2 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3328      	adds	r3, #40	@ 0x28
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fe fa0d 	bl	8007bc0 <mbedtls_internal_sha256_process>
 80097a6:	6138      	str	r0, [r7, #16]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	e128      	b.n	8009a04 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3328      	adds	r3, #40	@ 0x28
 80097b6:	2238      	movs	r2, #56	@ 0x38
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f007 fb99 	bl	8010ef2 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	0e1b      	lsrs	r3, r3, #24
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	0c1b      	lsrs	r3, r3, #16
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	0a1b      	lsrs	r3, r3, #8
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	0e1b      	lsrs	r3, r3, #24
 800980a:	b2da      	uxtb	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	0c1b      	lsrs	r3, r3, #16
 8009816:	b2da      	uxtb	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	b2da      	uxtb	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	b2da      	uxtb	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3328      	adds	r3, #40	@ 0x28
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7fe f9c0 	bl	8007bc0 <mbedtls_internal_sha256_process>
 8009840:	6138      	str	r0, [r7, #16]
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	e0db      	b.n	8009a04 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	0e1b      	lsrs	r3, r3, #24
 8009852:	b2da      	uxtb	r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	0c1a      	lsrs	r2, r3, #16
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	0a1a      	lsrs	r2, r3, #8
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	3302      	adds	r3, #2
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	3303      	adds	r3, #3
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	0e1a      	lsrs	r2, r3, #24
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	3304      	adds	r3, #4
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	0c1a      	lsrs	r2, r3, #16
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	3305      	adds	r3, #5
 8009898:	b2d2      	uxtb	r2, r2
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	0a1a      	lsrs	r2, r3, #8
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	3306      	adds	r3, #6
 80098a6:	b2d2      	uxtb	r2, r2
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	3307      	adds	r3, #7
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	0e1a      	lsrs	r2, r3, #24
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	0c1a      	lsrs	r2, r3, #16
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	3309      	adds	r3, #9
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	0a1a      	lsrs	r2, r3, #8
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	330a      	adds	r3, #10
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	701a      	strb	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	330b      	adds	r3, #11
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	0e1a      	lsrs	r2, r3, #24
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	330c      	adds	r3, #12
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	0c1a      	lsrs	r2, r3, #16
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	330d      	adds	r3, #13
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	0a1a      	lsrs	r2, r3, #8
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	330e      	adds	r3, #14
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695a      	ldr	r2, [r3, #20]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	330f      	adds	r3, #15
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	0e1a      	lsrs	r2, r3, #24
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	3310      	adds	r3, #16
 800992c:	b2d2      	uxtb	r2, r2
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	0c1a      	lsrs	r2, r3, #16
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	3311      	adds	r3, #17
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	0a1a      	lsrs	r2, r3, #8
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	3312      	adds	r3, #18
 8009948:	b2d2      	uxtb	r2, r2
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699a      	ldr	r2, [r3, #24]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	3313      	adds	r3, #19
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	0e1a      	lsrs	r2, r3, #24
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	3314      	adds	r3, #20
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	0c1a      	lsrs	r2, r3, #16
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	3315      	adds	r3, #21
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	0a1a      	lsrs	r2, r3, #8
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	3316      	adds	r3, #22
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	69da      	ldr	r2, [r3, #28]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3317      	adds	r3, #23
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	0e1a      	lsrs	r2, r3, #24
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	3318      	adds	r3, #24
 8009998:	b2d2      	uxtb	r2, r2
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a1b      	ldr	r3, [r3, #32]
 80099a0:	0c1a      	lsrs	r2, r3, #16
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	3319      	adds	r3, #25
 80099a6:	b2d2      	uxtb	r2, r2
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	0a1a      	lsrs	r2, r3, #8
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	331a      	adds	r3, #26
 80099b4:	b2d2      	uxtb	r2, r2
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a1a      	ldr	r2, [r3, #32]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	331b      	adds	r3, #27
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d11a      	bne.n	8009a02 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d0:	0e1a      	lsrs	r2, r3, #24
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	331c      	adds	r3, #28
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	0c1a      	lsrs	r2, r3, #16
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	331d      	adds	r3, #29
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ec:	0a1a      	lsrs	r2, r3, #8
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	331e      	adds	r3, #30
 80099f2:	b2d2      	uxtb	r2, r2
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	331f      	adds	r3, #31
 80099fe:	b2d2      	uxtb	r2, r2
 8009a00:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a12:	2300      	movs	r3, #0
 8009a14:	607b      	str	r3, [r7, #4]
 8009a16:	4b10      	ldr	r3, [pc, #64]	@ (8009a58 <HAL_MspInit+0x4c>)
 8009a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8009a58 <HAL_MspInit+0x4c>)
 8009a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a22:	4b0d      	ldr	r3, [pc, #52]	@ (8009a58 <HAL_MspInit+0x4c>)
 8009a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a2a:	607b      	str	r3, [r7, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a2e:	2300      	movs	r3, #0
 8009a30:	603b      	str	r3, [r7, #0]
 8009a32:	4b09      	ldr	r3, [pc, #36]	@ (8009a58 <HAL_MspInit+0x4c>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a36:	4a08      	ldr	r2, [pc, #32]	@ (8009a58 <HAL_MspInit+0x4c>)
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a3e:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <HAL_MspInit+0x4c>)
 8009a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40023800 	.word	0x40023800

08009a5c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a0b      	ldr	r2, [pc, #44]	@ (8009a98 <HAL_CRC_MspInit+0x3c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d10d      	bne.n	8009a8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <HAL_CRC_MspInit+0x40>)
 8009a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a76:	4a09      	ldr	r2, [pc, #36]	@ (8009a9c <HAL_CRC_MspInit+0x40>)
 8009a78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a7e:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <HAL_CRC_MspInit+0x40>)
 8009a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40023000 	.word	0x40023000
 8009a9c:	40023800 	.word	0x40023800

08009aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	@ 0x28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa8:	f107 0314 	add.w	r3, r7, #20
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	605a      	str	r2, [r3, #4]
 8009ab2:	609a      	str	r2, [r3, #8]
 8009ab4:	60da      	str	r2, [r3, #12]
 8009ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b34 <HAL_I2C_MspInit+0x94>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d134      	bne.n	8009b2c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8009b38 <HAL_I2C_MspInit+0x98>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aca:	4a1b      	ldr	r2, [pc, #108]	@ (8009b38 <HAL_I2C_MspInit+0x98>)
 8009acc:	f043 0302 	orr.w	r3, r3, #2
 8009ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ad2:	4b19      	ldr	r3, [pc, #100]	@ (8009b38 <HAL_I2C_MspInit+0x98>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009ade:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ae4:	2312      	movs	r3, #18
 8009ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aec:	2303      	movs	r3, #3
 8009aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009af0:	2304      	movs	r3, #4
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009af4:	f107 0314 	add.w	r3, r7, #20
 8009af8:	4619      	mov	r1, r3
 8009afa:	4810      	ldr	r0, [pc, #64]	@ (8009b3c <HAL_I2C_MspInit+0x9c>)
 8009afc:	f001 fe54 	bl	800b7a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	4b0c      	ldr	r3, [pc, #48]	@ (8009b38 <HAL_I2C_MspInit+0x98>)
 8009b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b08:	4a0b      	ldr	r2, [pc, #44]	@ (8009b38 <HAL_I2C_MspInit+0x98>)
 8009b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b10:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <HAL_I2C_MspInit+0x98>)
 8009b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	2020      	movs	r0, #32
 8009b22:	f001 f872 	bl	800ac0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009b26:	2020      	movs	r0, #32
 8009b28:	f001 f88b 	bl	800ac42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009b2c:	bf00      	nop
 8009b2e:	3728      	adds	r7, #40	@ 0x28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	40005400 	.word	0x40005400
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	40020400 	.word	0x40020400

08009b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b50:	d115      	bne.n	8009b7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	4b0c      	ldr	r3, [pc, #48]	@ (8009b88 <HAL_TIM_Base_MspInit+0x48>)
 8009b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8009b88 <HAL_TIM_Base_MspInit+0x48>)
 8009b5c:	f043 0301 	orr.w	r3, r3, #1
 8009b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b62:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <HAL_TIM_Base_MspInit+0x48>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2100      	movs	r1, #0
 8009b72:	201c      	movs	r0, #28
 8009b74:	f001 f849 	bl	800ac0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009b78:	201c      	movs	r0, #28
 8009b7a:	f001 f862 	bl	800ac42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	40023800 	.word	0x40023800

08009b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08a      	sub	sp, #40	@ 0x28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b94:	f107 0314 	add.w	r3, r7, #20
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	609a      	str	r2, [r3, #8]
 8009ba0:	60da      	str	r2, [r3, #12]
 8009ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c20 <HAL_UART_MspInit+0x94>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d133      	bne.n	8009c16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009bae:	2300      	movs	r3, #0
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009c24 <HAL_UART_MspInit+0x98>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c24 <HAL_UART_MspInit+0x98>)
 8009bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8009bbe:	4b19      	ldr	r3, [pc, #100]	@ (8009c24 <HAL_UART_MspInit+0x98>)
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	4b15      	ldr	r3, [pc, #84]	@ (8009c24 <HAL_UART_MspInit+0x98>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd2:	4a14      	ldr	r2, [pc, #80]	@ (8009c24 <HAL_UART_MspInit+0x98>)
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bda:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <HAL_UART_MspInit+0x98>)
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009be6:	230c      	movs	r3, #12
 8009be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bea:	2302      	movs	r3, #2
 8009bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009bf6:	2307      	movs	r3, #7
 8009bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bfa:	f107 0314 	add.w	r3, r7, #20
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4809      	ldr	r0, [pc, #36]	@ (8009c28 <HAL_UART_MspInit+0x9c>)
 8009c02:	f001 fdd1 	bl	800b7a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009c06:	2200      	movs	r2, #0
 8009c08:	2100      	movs	r1, #0
 8009c0a:	2026      	movs	r0, #38	@ 0x26
 8009c0c:	f000 fffd 	bl	800ac0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009c10:	2026      	movs	r0, #38	@ 0x26
 8009c12:	f001 f816 	bl	800ac42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8009c16:	bf00      	nop
 8009c18:	3728      	adds	r7, #40	@ 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	40004400 	.word	0x40004400
 8009c24:	40023800 	.word	0x40023800
 8009c28:	40020000 	.word	0x40020000

08009c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <NMI_Handler+0x4>

08009c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009c38:	bf00      	nop
 8009c3a:	e7fd      	b.n	8009c38 <HardFault_Handler+0x4>

08009c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c40:	bf00      	nop
 8009c42:	e7fd      	b.n	8009c40 <MemManage_Handler+0x4>

08009c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c48:	bf00      	nop
 8009c4a:	e7fd      	b.n	8009c48 <BusFault_Handler+0x4>

08009c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c50:	bf00      	nop
 8009c52:	e7fd      	b.n	8009c50 <UsageFault_Handler+0x4>

08009c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c62:	b480      	push	{r7}
 8009c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c66:	bf00      	nop
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c70:	b480      	push	{r7}
 8009c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c74:	bf00      	nop
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c82:	f000 fea3 	bl	800a9cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c86:	bf00      	nop
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009c90:	4802      	ldr	r0, [pc, #8]	@ (8009c9c <TIM2_IRQHandler+0x10>)
 8009c92:	f005 fabb 	bl	800f20c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000638 	.word	0x20000638

08009ca0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009ca4:	4802      	ldr	r0, [pc, #8]	@ (8009cb0 <I2C1_EV_IRQHandler+0x10>)
 8009ca6:	f002 fd11 	bl	800c6cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009caa:	bf00      	nop
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200005e4 	.word	0x200005e4

08009cb4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009cb8:	4802      	ldr	r0, [pc, #8]	@ (8009cc4 <I2C1_ER_IRQHandler+0x10>)
 8009cba:	f002 fe5a 	bl	800c972 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009cbe:	bf00      	nop
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200005e4 	.word	0x200005e4

08009cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009ccc:	4802      	ldr	r0, [pc, #8]	@ (8009cd8 <USART2_IRQHandler+0x10>)
 8009cce:	f005 ff91 	bl	800fbf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009cd2:	bf00      	nop
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000680 	.word	0x20000680

08009cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009ce0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009ce4:	f001 ff16 	bl	800bb14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009ce8:	bf00      	nop
 8009cea:	bd80      	pop	{r7, pc}

08009cec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	e00a      	b.n	8009d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009cfe:	f3af 8000 	nop.w
 8009d02:	4601      	mov	r1, r0
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	60ba      	str	r2, [r7, #8]
 8009d0a:	b2ca      	uxtb	r2, r1
 8009d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	3301      	adds	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	dbf0      	blt.n	8009cfe <_read+0x12>
  }

  return len;
 8009d1c:	687b      	ldr	r3, [r7, #4]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b086      	sub	sp, #24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d32:	2300      	movs	r3, #0
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	e009      	b.n	8009d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	60ba      	str	r2, [r7, #8]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fa f8dd 	bl	8003f00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	dbf1      	blt.n	8009d38 <_write+0x12>
  }
  return len;
 8009d54:	687b      	ldr	r3, [r7, #4]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <_close>:

int _close(int file)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009d66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009d86:	605a      	str	r2, [r3, #4]
  return 0;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <_isatty>:

int _isatty(int file)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009d9e:	2301      	movs	r3, #1
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009dd0:	4a14      	ldr	r2, [pc, #80]	@ (8009e24 <_sbrk+0x5c>)
 8009dd2:	4b15      	ldr	r3, [pc, #84]	@ (8009e28 <_sbrk+0x60>)
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009ddc:	4b13      	ldr	r3, [pc, #76]	@ (8009e2c <_sbrk+0x64>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d102      	bne.n	8009dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009de4:	4b11      	ldr	r3, [pc, #68]	@ (8009e2c <_sbrk+0x64>)
 8009de6:	4a12      	ldr	r2, [pc, #72]	@ (8009e30 <_sbrk+0x68>)
 8009de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009dea:	4b10      	ldr	r3, [pc, #64]	@ (8009e2c <_sbrk+0x64>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4413      	add	r3, r2
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d207      	bcs.n	8009e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009df8:	f007 f894 	bl	8010f24 <__errno>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	220c      	movs	r2, #12
 8009e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e06:	e009      	b.n	8009e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009e08:	4b08      	ldr	r3, [pc, #32]	@ (8009e2c <_sbrk+0x64>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009e0e:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <_sbrk+0x64>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4413      	add	r3, r2
 8009e16:	4a05      	ldr	r2, [pc, #20]	@ (8009e2c <_sbrk+0x64>)
 8009e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	20018000 	.word	0x20018000
 8009e28:	00000400 	.word	0x00000400
 8009e2c:	20000e28 	.word	0x20000e28
 8009e30:	200013a8 	.word	0x200013a8

08009e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009e34:	b480      	push	{r7}
 8009e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e38:	4b06      	ldr	r3, [pc, #24]	@ (8009e54 <SystemInit+0x20>)
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e3e:	4a05      	ldr	r2, [pc, #20]	@ (8009e54 <SystemInit+0x20>)
 8009e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e48:	bf00      	nop
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	e000ed00 	.word	0xe000ed00

08009e58 <receive_packet>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */

static HAL_StatusTypeDef receive_packet(uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
    uint16_t crc;
    uint32_t packetSize = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef status;
    uint8_t char1;

    *p_length = 0;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
    status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8009e6e:	f107 0117 	add.w	r1, r7, #23
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	485e      	ldr	r0, [pc, #376]	@ (8009ff0 <receive_packet+0x198>)
 8009e78:	f005 fe25 	bl	800fac6 <HAL_UART_Receive>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	76fb      	strb	r3, [r7, #27]

    if (status != HAL_OK) {
 8009e80:	7efb      	ldrb	r3, [r7, #27]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <receive_packet+0x32>
        return status;
 8009e86:	7efb      	ldrb	r3, [r7, #27]
 8009e88:	e0ae      	b.n	8009fe8 <receive_packet+0x190>
    }

    switch(char1) {
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	2b61      	cmp	r3, #97	@ 0x61
 8009e8e:	d057      	beq.n	8009f40 <receive_packet+0xe8>
 8009e90:	2b61      	cmp	r3, #97	@ 0x61
 8009e92:	dc57      	bgt.n	8009f44 <receive_packet+0xec>
 8009e94:	2b18      	cmp	r3, #24
 8009e96:	dc37      	bgt.n	8009f08 <receive_packet+0xb0>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	dd53      	ble.n	8009f44 <receive_packet+0xec>
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	2b17      	cmp	r3, #23
 8009ea0:	d850      	bhi.n	8009f44 <receive_packet+0xec>
 8009ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <receive_packet+0x50>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009f0f 	.word	0x08009f0f
 8009eac:	08009f15 	.word	0x08009f15
 8009eb0:	08009f45 	.word	0x08009f45
 8009eb4:	08009f49 	.word	0x08009f49
 8009eb8:	08009f45 	.word	0x08009f45
 8009ebc:	08009f45 	.word	0x08009f45
 8009ec0:	08009f45 	.word	0x08009f45
 8009ec4:	08009f45 	.word	0x08009f45
 8009ec8:	08009f45 	.word	0x08009f45
 8009ecc:	08009f45 	.word	0x08009f45
 8009ed0:	08009f45 	.word	0x08009f45
 8009ed4:	08009f45 	.word	0x08009f45
 8009ed8:	08009f45 	.word	0x08009f45
 8009edc:	08009f45 	.word	0x08009f45
 8009ee0:	08009f45 	.word	0x08009f45
 8009ee4:	08009f45 	.word	0x08009f45
 8009ee8:	08009f45 	.word	0x08009f45
 8009eec:	08009f45 	.word	0x08009f45
 8009ef0:	08009f45 	.word	0x08009f45
 8009ef4:	08009f45 	.word	0x08009f45
 8009ef8:	08009f45 	.word	0x08009f45
 8009efc:	08009f45 	.word	0x08009f45
 8009f00:	08009f45 	.word	0x08009f45
 8009f04:	08009f1d 	.word	0x08009f1d
 8009f08:	2b41      	cmp	r3, #65	@ 0x41
 8009f0a:	d019      	beq.n	8009f40 <receive_packet+0xe8>
 8009f0c:	e01a      	b.n	8009f44 <receive_packet+0xec>
        case SOH:
            packetSize = PACKET_SIZE;
 8009f0e:	2380      	movs	r3, #128	@ 0x80
 8009f10:	61fb      	str	r3, [r7, #28]
            break;
 8009f12:	e01a      	b.n	8009f4a <receive_packet+0xf2>
        case STX:
            packetSize = PACKET_1K_SIZE;
 8009f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f18:	61fb      	str	r3, [r7, #28]
            break;
 8009f1a:	e016      	b.n	8009f4a <receive_packet+0xf2>
        case EOT:
        	break;

        case CA:
            if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) != HAL_OK) || (char1 != CA)) {
 8009f1c:	f107 0117 	add.w	r1, r7, #23
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	4832      	ldr	r0, [pc, #200]	@ (8009ff0 <receive_packet+0x198>)
 8009f26:	f005 fdce 	bl	800fac6 <HAL_UART_Receive>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <receive_packet+0xde>
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	2b18      	cmp	r3, #24
 8009f34:	d001      	beq.n	8009f3a <receive_packet+0xe2>
                return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e056      	b.n	8009fe8 <receive_packet+0x190>
            }
            packetSize = 2;
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	61fb      	str	r3, [r7, #28]
            break;
 8009f3e:	e004      	b.n	8009f4a <receive_packet+0xf2>
        case ABORT1:
        case ABORT2:
            return HAL_BUSY;
 8009f40:	2302      	movs	r3, #2
 8009f42:	e051      	b.n	8009fe8 <receive_packet+0x190>
        default:
            return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e04f      	b.n	8009fe8 <receive_packet+0x190>
        	break;
 8009f48:	bf00      	nop
    }

    *p_data = char1;
 8009f4a:	7dfa      	ldrb	r2, [r7, #23]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	701a      	strb	r2, [r3, #0]

    if (packetSize >= PACKET_SIZE) {
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f54:	d942      	bls.n	8009fdc <receive_packet+0x184>
        status = HAL_UART_Receive(&UartHandle,
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	1c99      	adds	r1, r3, #2
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	3304      	adds	r3, #4
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4822      	ldr	r0, [pc, #136]	@ (8009ff0 <receive_packet+0x198>)
 8009f66:	f005 fdae 	bl	800fac6 <HAL_UART_Receive>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	76fb      	strb	r3, [r7, #27]
                                &p_data[PACKET_NUMBER_INDEX],
                                (packetSize + PACKET_OVERHEAD_SIZE),
                                timeout);

        if (status != HAL_OK) {
 8009f6e:	7efb      	ldrb	r3, [r7, #27]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <receive_packet+0x126>
            *p_length = 0;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
            return status;
 8009f7a:	7efb      	ldrb	r3, [r7, #27]
 8009f7c:	e034      	b.n	8009fe8 <receive_packet+0x190>
        }

        /* Validate packet sequence numbers */
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3302      	adds	r3, #2
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3303      	adds	r3, #3
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d004      	beq.n	8009f9c <receive_packet+0x144>
            *p_length = 0;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
            return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e025      	b.n	8009fe8 <receive_packet+0x190>
        }

        /* Check CRC */
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	b21a      	sxth	r2, r3
               p_data[packetSize + PACKET_DATA_INDEX + 1];
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	3305      	adds	r3, #5
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	440b      	add	r3, r1
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	b21b      	sxth	r3, r3
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	b21b      	sxth	r3, r3
 8009fba:	833b      	strh	r3, [r7, #24]

        if (calc_crc16(&p_data[PACKET_DATA_INDEX], packetSize) != crc )
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	69f9      	ldr	r1, [r7, #28]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f90a 	bl	800a1dc <calc_crc16>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	8b3b      	ldrh	r3, [r7, #24]
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d006      	beq.n	8009fe0 <receive_packet+0x188>
                  {
                    packetSize = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	61fb      	str	r3, [r7, #28]
                    status = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	76fb      	strb	r3, [r7, #27]
 8009fda:	e001      	b.n	8009fe0 <receive_packet+0x188>
                  }
    }
    else packetSize = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61fb      	str	r3, [r7, #28]

    *p_length = packetSize;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	69fa      	ldr	r2, [r7, #28]
 8009fe4:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000680 	.word	0x20000680

08009ff4 <prepare_initial_packet>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */

static void prepare_initial_packet(uint8_t* p_data, const uint8_t* p_file_name, uint32_t length) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	@ 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
    uint32_t i = 0, j = 0;
 800a000:	2300      	movs	r3, #0
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
 800a004:	2300      	movs	r3, #0
 800a006:	623b      	str	r3, [r7, #32]
    uint8_t aString[10];  // camelCase for non-pointers

    /* First three bytes are constant */
    p_data[PACKET_START_INDEX] = SOH;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	3301      	adds	r3, #1
 800a00c:	2201      	movs	r2, #1
 800a00e:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_NUMBER_INDEX] = 0x00;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3302      	adds	r3, #2
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_CNUMBER_INDEX] = 0xff;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3303      	adds	r3, #3
 800a01c:	22ff      	movs	r2, #255	@ 0xff
 800a01e:	701a      	strb	r2, [r3, #0]

    /* Filename written */
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 800a020:	2300      	movs	r3, #0
 800a022:	627b      	str	r3, [r7, #36]	@ 0x24
 800a024:	e00b      	b.n	800a03e <prepare_initial_packet+0x4a>
        p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	441a      	add	r2, r3
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	3304      	adds	r3, #4
 800a030:	68f9      	ldr	r1, [r7, #12]
 800a032:	440b      	add	r3, r1
 800a034:	7812      	ldrb	r2, [r2, #0]
 800a036:	701a      	strb	r2, [r3, #0]
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	3301      	adds	r3, #1
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	4413      	add	r3, r2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <prepare_initial_packet+0x5c>
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	2b3f      	cmp	r3, #63	@ 0x3f
 800a04e:	d9ea      	bls.n	800a026 <prepare_initial_packet+0x32>
    }
    p_data[i + PACKET_DATA_INDEX] = 0x00;
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	3304      	adds	r3, #4
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4413      	add	r3, r2
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]

    /* File size written */
    int_to_str(aString, length);  // Assuming `int_to_str` is your function
 800a05c:	f107 0314 	add.w	r3, r7, #20
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4618      	mov	r0, r3
 800a064:	f7f6 fa8c 	bl	8000580 <int_to_str>
    i += 1 + PACKET_DATA_INDEX;
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	3305      	adds	r3, #5
 800a06c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (aString[j] != '\0') {
 800a06e:	e00c      	b.n	800a08a <prepare_initial_packet+0x96>
        p_data[i++] = aString[j++];
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	623a      	str	r2, [r7, #32]
 800a076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a078:	1c51      	adds	r1, r2, #1
 800a07a:	6279      	str	r1, [r7, #36]	@ 0x24
 800a07c:	68f9      	ldr	r1, [r7, #12]
 800a07e:	440a      	add	r2, r1
 800a080:	3328      	adds	r3, #40	@ 0x28
 800a082:	443b      	add	r3, r7
 800a084:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800a088:	7013      	strb	r3, [r2, #0]
    while (aString[j] != '\0') {
 800a08a:	f107 0214 	add.w	r2, r7, #20
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	4413      	add	r3, r2
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1eb      	bne.n	800a070 <prepare_initial_packet+0x7c>
    }

    /* Padding with zeros */
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 800a098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09a:	623b      	str	r3, [r7, #32]
 800a09c:	e007      	b.n	800a0ae <prepare_initial_packet+0xba>
        p_data[j] = 0;
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	623b      	str	r3, [r7, #32]
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	2b83      	cmp	r3, #131	@ 0x83
 800a0b2:	d9f4      	bls.n	800a09e <prepare_initial_packet+0xaa>
    }
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	3728      	adds	r7, #40	@ 0x28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <prepare_packet>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */

void prepare_packet(uint8_t* p_source, uint8_t* p_packet, uint8_t pktNr, uint32_t sizeBlk) {
 800a0be:	b480      	push	{r7}
 800a0c0:	b089      	sub	sp, #36	@ 0x24
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	603b      	str	r3, [r7, #0]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	71fb      	strb	r3, [r7, #7]
    uint8_t* p_record;  // Pointer: p_ prefix + snake_case
    uint32_t i, size, packetSize;  // camelCase for non-pointers

    /* Determine packet size (1K or normal) */
    packetSize = (sizeBlk >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d4:	d302      	bcc.n	800a0dc <prepare_packet+0x1e>
 800a0d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0da:	e000      	b.n	800a0de <prepare_packet+0x20>
 800a0dc:	2380      	movs	r3, #128	@ 0x80
 800a0de:	617b      	str	r3, [r7, #20]
    size = (sizeBlk < packetSize) ? sizeBlk : packetSize;
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	bf28      	it	cs
 800a0e8:	4613      	movcs	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]

    /* Set packet header */
    p_packet[PACKET_START_INDEX] = (packetSize == PACKET_1K_SIZE) ? STX : SOH;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0f2:	d101      	bne.n	800a0f8 <prepare_packet+0x3a>
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	e000      	b.n	800a0fa <prepare_packet+0x3c>
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_NUMBER_INDEX] = pktNr;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	3302      	adds	r3, #2
 800a104:	79fa      	ldrb	r2, [r7, #7]
 800a106:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_CNUMBER_INDEX] = ~pktNr;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	3303      	adds	r3, #3
 800a10c:	79fa      	ldrb	r2, [r7, #7]
 800a10e:	43d2      	mvns	r2, r2
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	701a      	strb	r2, [r3, #0]

    /* Copy data into packet */
    p_record = p_source;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	61fb      	str	r3, [r7, #28]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 800a118:	2304      	movs	r3, #4
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	e00a      	b.n	800a134 <prepare_packet+0x76>
        p_packet[i] = *p_record++;
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	61fa      	str	r2, [r7, #28]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	440a      	add	r2, r1
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	7013      	strb	r3, [r2, #0]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	3301      	adds	r3, #1
 800a132:	61bb      	str	r3, [r7, #24]
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	3304      	adds	r3, #4
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d3ef      	bcc.n	800a11e <prepare_packet+0x60>
    }

    /* Pad remaining space with EOF (0x1A) */
    if (size <= packetSize) {
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	429a      	cmp	r2, r3
 800a144:	d810      	bhi.n	800a168 <prepare_packet+0xaa>
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	3304      	adds	r3, #4
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	e007      	b.n	800a15e <prepare_packet+0xa0>
            p_packet[i] = 0x1A;  // EOF marker
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	4413      	add	r3, r2
 800a154:	221a      	movs	r2, #26
 800a156:	701a      	strb	r2, [r3, #0]
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	3301      	adds	r3, #1
 800a15c:	61bb      	str	r3, [r7, #24]
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	3304      	adds	r3, #4
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	429a      	cmp	r2, r3
 800a166:	d3f2      	bcc.n	800a14e <prepare_packet+0x90>
        }
    }
}
 800a168:	bf00      	nop
 800a16a:	3724      	adds	r7, #36	@ 0x24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <update_crc16>:
  * @brief  Update CRC16 for input byte
  * @param  crc_in input value
  * @param  input byte
  * @retval None
  */
uint16_t update_crc16(uint16_t crcIn, uint8_t byte) {
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	460a      	mov	r2, r1
 800a17e:	80fb      	strh	r3, [r7, #6]
 800a180:	4613      	mov	r3, r2
 800a182:	717b      	strb	r3, [r7, #5]
    uint32_t crc = crcIn;
 800a184:	88fb      	ldrh	r3, [r7, #6]
 800a186:	60fb      	str	r3, [r7, #12]
    uint32_t in = byte | 0x100;
 800a188:	797b      	ldrb	r3, [r7, #5]
 800a18a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a18e:	60bb      	str	r3, [r7, #8]

    do {
        crc <<= 1;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	60fb      	str	r3, [r7, #12]
        in <<= 1;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	60bb      	str	r3, [r7, #8]
        if (in & 0x100)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <update_crc16+0x38>
            ++crc;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
        if (crc & 0x10000)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d005      	beq.n	800a1c2 <update_crc16+0x4e>
            crc ^= 0x1021;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800a1bc:	f083 0301 	eor.w	r3, r3, #1
 800a1c0:	60fb      	str	r3, [r7, #12]
    } while (!(in & 0x10000));
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0e1      	beq.n	800a190 <update_crc16+0x1c>

    return crc & 0xFFFFu;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	b29b      	uxth	r3, r3
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <calc_crc16>:
  * @brief  Cal CRC16 for YModem Packet
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t calc_crc16(const uint8_t* p_data, uint32_t size) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
	uint32_t crc = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60fb      	str	r3, [r7, #12]
	const uint8_t* p_data_end = p_data + size;
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	60bb      	str	r3, [r7, #8]

	while (p_data < p_data_end)
 800a1f2:	e00a      	b.n	800a20a <calc_crc16+0x2e>
		crc = update_crc16(crc, *p_data++);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	b298      	uxth	r0, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	4619      	mov	r1, r3
 800a202:	f7ff ffb7 	bl	800a174 <update_crc16>
 800a206:	4603      	mov	r3, r0
 800a208:	60fb      	str	r3, [r7, #12]
	while (p_data < p_data_end)
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d3f0      	bcc.n	800a1f4 <calc_crc16+0x18>

	crc = update_crc16(crc, 0);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	b29b      	uxth	r3, r3
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff ffab 	bl	800a174 <update_crc16>
 800a21e:	4603      	mov	r3, r0
 800a220:	60fb      	str	r3, [r7, #12]
	crc = update_crc16(crc, 0);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	b29b      	uxth	r3, r3
 800a226:	2100      	movs	r1, #0
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff ffa3 	bl	800a174 <update_crc16>
 800a22e:	4603      	mov	r3, r0
 800a230:	60fb      	str	r3, [r7, #12]

	return crc & 0xFFFFu;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	b29b      	uxth	r3, r3
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <ymodem_receive>:
/**
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef ymodem_receive(uint32_t* p_size) {
 800a240:	b580      	push	{r7, lr}
 800a242:	b09a      	sub	sp, #104	@ 0x68
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
	 	 	 HAL_FLASH_Unlock();
 800a248:	f000 fe56 	bl	800aef8 <HAL_FLASH_Unlock>
			 HAL_FLASH_OB_Unlock();
 800a24c:	f000 fe86 	bl	800af5c <HAL_FLASH_OB_Unlock>
			  FLASH_OBProgramInitTypeDef config;
			  HAL_FLASHEx_OBGetConfig(&config);
 800a250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f8dd 	bl	800b414 <HAL_FLASHEx_OBGetConfig>
			 config.OptionType = OPTIONBYTE_WRP;
 800a25a:	2301      	movs	r3, #1
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
			 config.WRPState= OB_WRPSTATE_DISABLE;
 800a25e:	2300      	movs	r3, #0
 800a260:	62bb      	str	r3, [r7, #40]	@ 0x28
			 config.RDPLevel = OB_RDP_LEVEL0;
 800a262:	23aa      	movs	r3, #170	@ 0xaa
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
			  config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);
 800a266:	23e0      	movs	r3, #224	@ 0xe0
 800a268:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  if (HAL_FLASHEx_OBProgram(&config) == HAL_OK)
 800a26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 f862 	bl	800b338 <HAL_FLASHEx_OBProgram>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <ymodem_receive+0x3e>
			  {
			      HAL_FLASH_OB_Launch(); // This will cause a reset!
 800a27a:	f000 fe9b 	bl	800afb4 <HAL_FLASH_OB_Launch>
			  }

			  HAL_FLASH_OB_Lock();
 800a27e:	f000 fe89 	bl	800af94 <HAL_FLASH_OB_Lock>
			  HAL_FLASH_Lock();
 800a282:	f000 fe5b 	bl	800af3c <HAL_FLASH_Lock>

    uint32_t flashDestination, ramSource, fileSize;
    uint32_t i, packetLength, sessionDone = 0, fileDone, sessionBegin = 0, errors = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a28a:	2300      	movs	r3, #0
 800a28c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a28e:	2300      	movs	r3, #0
 800a290:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t* p_filePtr;
    uint8_t p_fileSize[FILE_SIZE_LENGTH], tmp, packetsReceived;
    COM_StatusTypeDef result = COM_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

    flashDestination = APPLICATION_ADDRESS;
 800a298:	4baf      	ldr	r3, [pc, #700]	@ (800a558 <ymodem_receive+0x318>)
 800a29a:	667b      	str	r3, [r7, #100]	@ 0x64

    while ((sessionDone == 0) && (result == COM_OK)) {
 800a29c:	e125      	b.n	800a4ea <ymodem_receive+0x2aa>
        packetsReceived = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        fileDone = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	65bb      	str	r3, [r7, #88]	@ 0x58
        while ((fileDone == 0) && (result == COM_OK)) {
 800a2a8:	e117      	b.n	800a4da <ymodem_receive+0x29a>
            switch (receive_packet(aPacketData, &packetLength, DOWNLOAD_TIMEOUT)) {
 800a2aa:	f107 031c 	add.w	r3, r7, #28
 800a2ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	48a9      	ldr	r0, [pc, #676]	@ (800a55c <ymodem_receive+0x31c>)
 800a2b6:	f7ff fdcf 	bl	8009e58 <receive_packet>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <ymodem_receive+0x88>
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	f000 80e9 	beq.w	800a498 <ymodem_receive+0x258>
 800a2c6:	e0f1      	b.n	800a4ac <ymodem_receive+0x26c>
                case HAL_OK:
                    errors = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	653b      	str	r3, [r7, #80]	@ 0x50
                    switch (packetLength) {
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d008      	beq.n	800a2e4 <ymodem_receive+0xa4>
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d10c      	bne.n	800a2f0 <ymodem_receive+0xb0>
                        case 2:
                            serial_put_byte(ACK);
 800a2d6:	2006      	movs	r0, #6
 800a2d8:	f7f6 fab0 	bl	800083c <serial_put_byte>
                            result = COM_ABORT;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                            break;
 800a2e2:	e0d8      	b.n	800a496 <ymodem_receive+0x256>

                        case 0:
                            serial_put_byte(ACK);
 800a2e4:	2006      	movs	r0, #6
 800a2e6:	f7f6 faa9 	bl	800083c <serial_put_byte>
                            fileDone = 1;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	65bb      	str	r3, [r7, #88]	@ 0x58
                            break;
 800a2ee:	e0d2      	b.n	800a496 <ymodem_receive+0x256>

                        default:
                            if (aPacketData[PACKET_NUMBER_INDEX] != (packetsReceived & 0xffU)) {
 800a2f0:	4b9a      	ldr	r3, [pc, #616]	@ (800a55c <ymodem_receive+0x31c>)
 800a2f2:	789b      	ldrb	r3, [r3, #2]
 800a2f4:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d003      	beq.n	800a304 <ymodem_receive+0xc4>
                                serial_put_byte(NAK);
 800a2fc:	2015      	movs	r0, #21
 800a2fe:	f7f6 fa9d 	bl	800083c <serial_put_byte>
                                	}
                                }
                                packetsReceived++;
                                sessionBegin = 1;
                            }
                            break;
 800a302:	e0c7      	b.n	800a494 <ymodem_receive+0x254>
                                if (packetsReceived == 0) {
 800a304:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d17c      	bne.n	800a406 <ymodem_receive+0x1c6>
                                    if (aPacketData[PACKET_DATA_INDEX] != 0) {
 800a30c:	4b93      	ldr	r3, [pc, #588]	@ (800a55c <ymodem_receive+0x31c>)
 800a30e:	791b      	ldrb	r3, [r3, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d070      	beq.n	800a3f6 <ymodem_receive+0x1b6>
                                        p_filePtr = aPacketData + PACKET_DATA_INDEX;
 800a314:	4b92      	ldr	r3, [pc, #584]	@ (800a560 <ymodem_receive+0x320>)
 800a316:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        i = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	663b      	str	r3, [r7, #96]	@ 0x60
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 800a31c:	e008      	b.n	800a330 <ymodem_receive+0xf0>
                                            aFileName[i++] = *p_filePtr++;
 800a31e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a320:	1c53      	adds	r3, r2, #1
 800a322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	6639      	str	r1, [r7, #96]	@ 0x60
 800a32a:	7811      	ldrb	r1, [r2, #0]
 800a32c:	4a8d      	ldr	r2, [pc, #564]	@ (800a564 <ymodem_receive+0x324>)
 800a32e:	54d1      	strb	r1, [r2, r3]
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 800a330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <ymodem_receive+0xfe>
 800a338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a33a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a33c:	d9ef      	bls.n	800a31e <ymodem_receive+0xde>
                                        aFileName[i++] = '\0';
 800a33e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	663a      	str	r2, [r7, #96]	@ 0x60
 800a344:	4a87      	ldr	r2, [pc, #540]	@ (800a564 <ymodem_receive+0x324>)
 800a346:	2100      	movs	r1, #0
 800a348:	54d1      	strb	r1, [r2, r3]
                                        i = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	663b      	str	r3, [r7, #96]	@ 0x60
                                        p_filePtr++;
 800a34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a350:	3301      	adds	r3, #1
 800a352:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 800a354:	e00a      	b.n	800a36c <ymodem_receive+0x12c>
                                            p_fileSize[i++] = *p_filePtr++;
 800a356:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a358:	1c53      	adds	r3, r2, #1
 800a35a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a35c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a35e:	1c59      	adds	r1, r3, #1
 800a360:	6639      	str	r1, [r7, #96]	@ 0x60
 800a362:	7812      	ldrb	r2, [r2, #0]
 800a364:	3368      	adds	r3, #104	@ 0x68
 800a366:	443b      	add	r3, r7
 800a368:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 800a36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b20      	cmp	r3, #32
 800a372:	d002      	beq.n	800a37a <ymodem_receive+0x13a>
 800a374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d9ed      	bls.n	800a356 <ymodem_receive+0x116>
                                        p_fileSize[i++] = '\0';
 800a37a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	663a      	str	r2, [r7, #96]	@ 0x60
 800a380:	3368      	adds	r3, #104	@ 0x68
 800a382:	443b      	add	r3, r7
 800a384:	2200      	movs	r2, #0
 800a386:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        str_to_int(p_fileSize, &fileSize);
 800a38a:	f107 0220 	add.w	r2, r7, #32
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f7f6 f941 	bl	800061c <str_to_int>
                                        if (fileSize > (USER_FLASH_SIZE + 1)) {
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	4a72      	ldr	r2, [pc, #456]	@ (800a568 <ymodem_receive+0x328>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d915      	bls.n	800a3ce <ymodem_receive+0x18e>
                                            tmp = CA;
 800a3a2:	2318      	movs	r3, #24
 800a3a4:	72fb      	strb	r3, [r7, #11]
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 800a3a6:	f107 010b 	add.w	r1, r7, #11
 800a3aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	486e      	ldr	r0, [pc, #440]	@ (800a56c <ymodem_receive+0x32c>)
 800a3b2:	f005 fafd 	bl	800f9b0 <HAL_UART_Transmit>
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 800a3b6:	f107 010b 	add.w	r1, r7, #11
 800a3ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3be:	2201      	movs	r2, #1
 800a3c0:	486a      	ldr	r0, [pc, #424]	@ (800a56c <ymodem_receive+0x32c>)
 800a3c2:	f005 faf5 	bl	800f9b0 <HAL_UART_Transmit>
                                            result = COM_LIMIT;
 800a3c6:	2305      	movs	r3, #5
 800a3c8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                                            break;
 800a3cc:	e063      	b.n	800a496 <ymodem_receive+0x256>
                                        FLASH_IF_disable_all_protection();
 800a3ce:	f7f6 faf3 	bl	80009b8 <FLASH_IF_disable_all_protection>
                                        if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 800a3d2:	4861      	ldr	r0, [pc, #388]	@ (800a558 <ymodem_receive+0x318>)
 800a3d4:	f7f6 faa6 	bl	8000924 <FLASH_IF_erase>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <ymodem_receive+0x1a2>
                                            return COM_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e0d8      	b.n	800a594 <ymodem_receive+0x354>
                                        *p_size = fileSize;
 800a3e2:	6a3a      	ldr	r2, [r7, #32]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	601a      	str	r2, [r3, #0]
                                        serial_put_byte(ACK);
 800a3e8:	2006      	movs	r0, #6
 800a3ea:	f7f6 fa27 	bl	800083c <serial_put_byte>
                                        serial_put_byte(CRC16);
 800a3ee:	2043      	movs	r0, #67	@ 0x43
 800a3f0:	f7f6 fa24 	bl	800083c <serial_put_byte>
 800a3f4:	e047      	b.n	800a486 <ymodem_receive+0x246>
                                        serial_put_byte(ACK);
 800a3f6:	2006      	movs	r0, #6
 800a3f8:	f7f6 fa20 	bl	800083c <serial_put_byte>
                                        fileDone = 1;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	65bb      	str	r3, [r7, #88]	@ 0x58
                                        sessionDone = 1;
 800a400:	2301      	movs	r3, #1
 800a402:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                        break;
 800a404:	e047      	b.n	800a496 <ymodem_receive+0x256>
                                	ramSource = (uint32_t)&aPacketData[PACKET_DATA_INDEX];
 800a406:	4b56      	ldr	r3, [pc, #344]	@ (800a560 <ymodem_receive+0x320>)
 800a408:	647b      	str	r3, [r7, #68]	@ 0x44
                                	if (ramSource == 0 || ramSource < 0x20000000 || ramSource > 0x2004FFFF) {
 800a40a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <ymodem_receive+0x1e0>
 800a410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a416:	d303      	bcc.n	800a420 <ymodem_receive+0x1e0>
 800a418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a41a:	4a55      	ldr	r2, [pc, #340]	@ (800a570 <ymodem_receive+0x330>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d909      	bls.n	800a434 <ymodem_receive+0x1f4>
                                	    serial_put_byte(CA);
 800a420:	2018      	movs	r0, #24
 800a422:	f7f6 fa0b 	bl	800083c <serial_put_byte>
                                	    serial_put_byte(CA);
 800a426:	2018      	movs	r0, #24
 800a428:	f7f6 fa08 	bl	800083c <serial_put_byte>
                                	    result = FLASHIF_WRITING_ERROR;
 800a42c:	2303      	movs	r3, #3
 800a42e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a432:	e028      	b.n	800a486 <ymodem_receive+0x246>
                                	    uint32_t stt = FLASH_IF_write(flashDestination, (uint32_t*)ramSource, packetLength / 4);
 800a434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	089b      	lsrs	r3, r3, #2
 800a43a:	461a      	mov	r2, r3
 800a43c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800a43e:	f7f6 faed 	bl	8000a1c <FLASH_IF_write>
 800a442:	6438      	str	r0, [r7, #64]	@ 0x40
                                	    if (stt == FLASHIF_WRITING_ERROR) {
 800a444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a446:	2b03      	cmp	r3, #3
 800a448:	d109      	bne.n	800a45e <ymodem_receive+0x21e>
                                	        serial_put_byte(CA);
 800a44a:	2018      	movs	r0, #24
 800a44c:	f7f6 f9f6 	bl	800083c <serial_put_byte>
                                	        serial_put_byte(CA);
 800a450:	2018      	movs	r0, #24
 800a452:	f7f6 f9f3 	bl	800083c <serial_put_byte>
                                	        result = FLASHIF_WRITING_ERROR;
 800a456:	2303      	movs	r3, #3
 800a458:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a45c:	e013      	b.n	800a486 <ymodem_receive+0x246>
                                	    else if (stt == FLASHIF_WRITINGCTRL_ERROR) {
 800a45e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a460:	2b02      	cmp	r3, #2
 800a462:	d109      	bne.n	800a478 <ymodem_receive+0x238>
                                	        serial_put_byte(CA);
 800a464:	2018      	movs	r0, #24
 800a466:	f7f6 f9e9 	bl	800083c <serial_put_byte>
                                	        serial_put_byte(CA);
 800a46a:	2018      	movs	r0, #24
 800a46c:	f7f6 f9e6 	bl	800083c <serial_put_byte>
                                	        result = FLASHIF_WRITINGCTRL_ERROR;
 800a470:	2302      	movs	r3, #2
 800a472:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a476:	e006      	b.n	800a486 <ymodem_receive+0x246>
                                	        flashDestination += packetLength;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a47c:	4413      	add	r3, r2
 800a47e:	667b      	str	r3, [r7, #100]	@ 0x64
                                	        serial_put_byte(ACK);
 800a480:	2006      	movs	r0, #6
 800a482:	f7f6 f9db 	bl	800083c <serial_put_byte>
                                packetsReceived++;
 800a486:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a48a:	3301      	adds	r3, #1
 800a48c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                                sessionBegin = 1;
 800a490:	2301      	movs	r3, #1
 800a492:	657b      	str	r3, [r7, #84]	@ 0x54
                            break;
 800a494:	bf00      	nop
                    }
                    break;
 800a496:	e020      	b.n	800a4da <ymodem_receive+0x29a>

                case HAL_BUSY:

                    serial_put_byte(CA);
 800a498:	2018      	movs	r0, #24
 800a49a:	f7f6 f9cf 	bl	800083c <serial_put_byte>
                    serial_put_byte(CA);
 800a49e:	2018      	movs	r0, #24
 800a4a0:	f7f6 f9cc 	bl	800083c <serial_put_byte>
                    result = COM_ABORT;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    break;
 800a4aa:	e016      	b.n	800a4da <ymodem_receive+0x29a>

                default:
                    if (sessionBegin) {
 800a4ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <ymodem_receive+0x278>
                        errors++;
 800a4b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                    if (errors > MAX_ERRORS) {
 800a4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d909      	bls.n	800a4d2 <ymodem_receive+0x292>

                        serial_put_byte(CA);
 800a4be:	2018      	movs	r0, #24
 800a4c0:	f7f6 f9bc 	bl	800083c <serial_put_byte>
                        serial_put_byte(CA);
 800a4c4:	2018      	movs	r0, #24
 800a4c6:	f7f6 f9b9 	bl	800083c <serial_put_byte>
                        result = COM_ABORT;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    }
                    else {
                        serial_put_byte(CRC16);
                    }
                    break;
 800a4d0:	e002      	b.n	800a4d8 <ymodem_receive+0x298>
                        serial_put_byte(CRC16);
 800a4d2:	2043      	movs	r0, #67	@ 0x43
 800a4d4:	f7f6 f9b2 	bl	800083c <serial_put_byte>
                    break;
 800a4d8:	bf00      	nop
        while ((fileDone == 0) && (result == COM_OK)) {
 800a4da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <ymodem_receive+0x2aa>
 800a4e0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f43f aee0 	beq.w	800a2aa <ymodem_receive+0x6a>
    while ((sessionDone == 0) && (result == COM_OK)) {
 800a4ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <ymodem_receive+0x2ba>
 800a4f0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f43f aed2 	beq.w	800a29e <ymodem_receive+0x5e>
            }
        }
    }
    HAL_Delay(3000);
 800a4fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800a4fe:	f000 fa85 	bl	800aa0c <HAL_Delay>
    /* Final status report */
    if (result == COM_OK) {
 800a502:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10b      	bne.n	800a522 <ymodem_receive+0x2e2>
        serial_put_string((uint8_t*)"\r\nYMODEM Success: ");
 800a50a:	481a      	ldr	r0, [pc, #104]	@ (800a574 <ymodem_receive+0x334>)
 800a50c:	f7f6 f97a 	bl	8000804 <serial_put_string>
        serial_put_string(aFileName);
 800a510:	4814      	ldr	r0, [pc, #80]	@ (800a564 <ymodem_receive+0x324>)
 800a512:	f7f6 f977 	bl	8000804 <serial_put_string>

        serial_put_string((uint8_t*)p_fileSize);
 800a516:	f107 030c 	add.w	r3, r7, #12
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f6 f972 	bl	8000804 <serial_put_string>
 800a520:	e036      	b.n	800a590 <ymodem_receive+0x350>
    }
    else {
        serial_put_string((uint8_t*)"\r\nYMODEM Failed: ");
 800a522:	4815      	ldr	r0, [pc, #84]	@ (800a578 <ymodem_receive+0x338>)
 800a524:	f7f6 f96e 	bl	8000804 <serial_put_string>
        switch(result) {
 800a528:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a52c:	2b05      	cmp	r3, #5
 800a52e:	d006      	beq.n	800a53e <ymodem_receive+0x2fe>
 800a530:	2b05      	cmp	r3, #5
 800a532:	dc29      	bgt.n	800a588 <ymodem_receive+0x348>
 800a534:	2b02      	cmp	r3, #2
 800a536:	d00a      	beq.n	800a54e <ymodem_receive+0x30e>
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d004      	beq.n	800a546 <ymodem_receive+0x306>
 800a53c:	e024      	b.n	800a588 <ymodem_receive+0x348>
            case COM_LIMIT:
                serial_put_string((uint8_t*)"File too large");
 800a53e:	480f      	ldr	r0, [pc, #60]	@ (800a57c <ymodem_receive+0x33c>)
 800a540:	f7f6 f960 	bl	8000804 <serial_put_string>
                break;
 800a544:	e024      	b.n	800a590 <ymodem_receive+0x350>
            case COM_DATA:
                serial_put_string((uint8_t*)"Flash write error");
 800a546:	480e      	ldr	r0, [pc, #56]	@ (800a580 <ymodem_receive+0x340>)
 800a548:	f7f6 f95c 	bl	8000804 <serial_put_string>
                break;
 800a54c:	e020      	b.n	800a590 <ymodem_receive+0x350>

            case COM_ABORT:
                serial_put_string((uint8_t*)"Transfer aborted");
 800a54e:	480d      	ldr	r0, [pc, #52]	@ (800a584 <ymodem_receive+0x344>)
 800a550:	f7f6 f958 	bl	8000804 <serial_put_string>
                break;
 800a554:	e01c      	b.n	800a590 <ymodem_receive+0x350>
 800a556:	bf00      	nop
 800a558:	08020000 	.word	0x08020000
 800a55c:	20000e2c 	.word	0x20000e2c
 800a560:	20000e30 	.word	0x20000e30
 800a564:	200006d4 	.word	0x200006d4
 800a568:	00060001 	.word	0x00060001
 800a56c:	20000680 	.word	0x20000680
 800a570:	2004ffff 	.word	0x2004ffff
 800a574:	080134f4 	.word	0x080134f4
 800a578:	08013508 	.word	0x08013508
 800a57c:	0801351c 	.word	0x0801351c
 800a580:	0801352c 	.word	0x0801352c
 800a584:	08013540 	.word	0x08013540
            default:
                serial_put_string((uint8_t*)"Unknown error");\
 800a588:	4804      	ldr	r0, [pc, #16]	@ (800a59c <ymodem_receive+0x35c>)
 800a58a:	f7f6 f93b 	bl	8000804 <serial_put_string>
                break;
 800a58e:	bf00      	nop
        }
    }

    return result;
 800a590:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
}
 800a594:	4618      	mov	r0, r3
 800a596:	3768      	adds	r7, #104	@ 0x68
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	08013554 	.word	0x08013554

0800a5a0 <ymodem_transmit>:
  * @param  p_buff: Address of the first byte
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef ymodem_transmit(uint8_t* p_buf, const uint8_t* p_file_name, uint32_t file_size) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08e      	sub	sp, #56	@ 0x38
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
    uint32_t errors = 0, ackRecpt = 0, size = 0, pktSize;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *p_buf_int;
    COM_StatusTypeDef result = COM_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t blkNumber = 1;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	623b      	str	r3, [r7, #32]
#else
    uint8_t tempChkSum;
#endif

    /* Prepare first block - header */
    prepare_initial_packet(aPacketData, p_file_name, file_size);
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	68b9      	ldr	r1, [r7, #8]
 800a5c6:	4899      	ldr	r0, [pc, #612]	@ (800a82c <ymodem_transmit+0x28c>)
 800a5c8:	f7ff fd14 	bl	8009ff4 <prepare_initial_packet>

    while ((!ackRecpt) && (result == COM_OK)) {
 800a5cc:	e054      	b.n	800a678 <ymodem_transmit+0xd8>
        /* Send Packet */
        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800a5ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a5d2:	2283      	movs	r2, #131	@ 0x83
 800a5d4:	4996      	ldr	r1, [pc, #600]	@ (800a830 <ymodem_transmit+0x290>)
 800a5d6:	4897      	ldr	r0, [pc, #604]	@ (800a834 <ymodem_transmit+0x294>)
 800a5d8:	f005 f9ea 	bl	800f9b0 <HAL_UART_Transmit>

        /* Send CRC or Checksum */
#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800a5dc:	2280      	movs	r2, #128	@ 0x80
 800a5de:	4996      	ldr	r1, [pc, #600]	@ (800a838 <ymodem_transmit+0x298>)
 800a5e0:	4896      	ldr	r0, [pc, #600]	@ (800a83c <ymodem_transmit+0x29c>)
 800a5e2:	f000 fb64 	bl	800acae <HAL_CRC_Calculate>
 800a5e6:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	0a1b      	lsrs	r3, r3, #8
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f6 f924 	bl	800083c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f6 f91f 	bl	800083c <serial_put_byte>
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        /* Wait for response */
        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 800a5fe:	f107 0110 	add.w	r1, r7, #16
 800a602:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a606:	2201      	movs	r2, #1
 800a608:	488a      	ldr	r0, [pc, #552]	@ (800a834 <ymodem_transmit+0x294>)
 800a60a:	f005 fa5c 	bl	800fac6 <HAL_UART_Receive>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d128      	bne.n	800a666 <ymodem_transmit+0xc6>
            if (aRxCtrl[0] == ACK) {
 800a614:	7c3b      	ldrb	r3, [r7, #16]
 800a616:	2b06      	cmp	r3, #6
 800a618:	d10a      	bne.n	800a630 <ymodem_transmit+0x90>
                ackRecpt = 1;
 800a61a:	2301      	movs	r3, #1
 800a61c:	633b      	str	r3, [r7, #48]	@ 0x30
                HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT); // Wait for 'C'
 800a61e:	f107 0110 	add.w	r1, r7, #16
 800a622:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a626:	2201      	movs	r2, #1
 800a628:	4882      	ldr	r0, [pc, #520]	@ (800a834 <ymodem_transmit+0x294>)
 800a62a:	f005 fa4c 	bl	800fac6 <HAL_UART_Receive>
 800a62e:	e01d      	b.n	800a66c <ymodem_transmit+0xcc>
            }
            else if (aRxCtrl[0] == CA) {
 800a630:	7c3b      	ldrb	r3, [r7, #16]
 800a632:	2b18      	cmp	r3, #24
 800a634:	d11a      	bne.n	800a66c <ymodem_transmit+0xcc>
                if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 800a636:	f107 0110 	add.w	r1, r7, #16
 800a63a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a63e:	2201      	movs	r2, #1
 800a640:	487c      	ldr	r0, [pc, #496]	@ (800a834 <ymodem_transmit+0x294>)
 800a642:	f005 fa40 	bl	800fac6 <HAL_UART_Receive>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10f      	bne.n	800a66c <ymodem_transmit+0xcc>
 800a64c:	7c3b      	ldrb	r3, [r7, #16]
 800a64e:	2b18      	cmp	r3, #24
 800a650:	d10c      	bne.n	800a66c <ymodem_transmit+0xcc>
                    HAL_Delay(2);
 800a652:	2002      	movs	r0, #2
 800a654:	f000 f9da 	bl	800aa0c <HAL_Delay>
                    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a658:	4b76      	ldr	r3, [pc, #472]	@ (800a834 <ymodem_transmit+0x294>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
                    result = COM_ABORT;
 800a65e:	2302      	movs	r3, #2
 800a660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a664:	e002      	b.n	800a66c <ymodem_transmit+0xcc>
                }
            }
        }
        else {
            errors++;
 800a666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a668:	3301      	adds	r3, #1
 800a66a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if (errors >= MAX_ERRORS) {
 800a66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d902      	bls.n	800a678 <ymodem_transmit+0xd8>
            result = COM_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((!ackRecpt) && (result == COM_OK)) {
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d103      	bne.n	800a686 <ymodem_transmit+0xe6>
 800a67e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0a3      	beq.n	800a5ce <ymodem_transmit+0x2e>
        }
    }

    p_buf_int = p_buf;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	62bb      	str	r3, [r7, #40]	@ 0x28
    size = file_size;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Send data packets */
    while ((size) && (result == COM_OK)) {
 800a68e:	e06e      	b.n	800a76e <ymodem_transmit+0x1ce>
        prepare_packet(p_buf_int, aPacketData, blkNumber, size);
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	b2da      	uxtb	r2, r3
 800a694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a696:	4965      	ldr	r1, [pc, #404]	@ (800a82c <ymodem_transmit+0x28c>)
 800a698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a69a:	f7ff fd10 	bl	800a0be <prepare_packet>
        ackRecpt = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	637b      	str	r3, [r7, #52]	@ 0x34

        while ((!ackRecpt) && (result == COM_OK)) {
 800a6a6:	e05b      	b.n	800a760 <ymodem_transmit+0x1c0>
            /* Determine packet size */
            pktSize = (size >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 800a6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ae:	d302      	bcc.n	800a6b6 <ymodem_transmit+0x116>
 800a6b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6b4:	e000      	b.n	800a6b8 <ymodem_transmit+0x118>
 800a6b6:	2380      	movs	r3, #128	@ 0x80
 800a6b8:	617b      	str	r3, [r7, #20]

            /* Send packet */
            HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pktSize + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	3303      	adds	r3, #3
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a6c6:	495a      	ldr	r1, [pc, #360]	@ (800a830 <ymodem_transmit+0x290>)
 800a6c8:	485a      	ldr	r0, [pc, #360]	@ (800a834 <ymodem_transmit+0x294>)
 800a6ca:	f005 f971 	bl	800f9b0 <HAL_UART_Transmit>

            /* Send CRC/Checksum */
#ifdef CRC16_F
            tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pktSize);
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4959      	ldr	r1, [pc, #356]	@ (800a838 <ymodem_transmit+0x298>)
 800a6d2:	485a      	ldr	r0, [pc, #360]	@ (800a83c <ymodem_transmit+0x29c>)
 800a6d4:	f000 faeb 	bl	800acae <HAL_CRC_Calculate>
 800a6d8:	61b8      	str	r0, [r7, #24]
            serial_put_byte(tempCrc >> 8);
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	0a1b      	lsrs	r3, r3, #8
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7f6 f8ab 	bl	800083c <serial_put_byte>
            serial_put_byte(tempCrc & 0xFF);
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f6 f8a6 	bl	800083c <serial_put_byte>
            tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], pktSize);
            Serial_PutByte(tempChkSum);
#endif

            /* Wait for ACK */
            if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == ACK)) {
 800a6f0:	f107 0110 	add.w	r1, r7, #16
 800a6f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	484e      	ldr	r0, [pc, #312]	@ (800a834 <ymodem_transmit+0x294>)
 800a6fc:	f005 f9e3 	bl	800fac6 <HAL_UART_Receive>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d123      	bne.n	800a74e <ymodem_transmit+0x1ae>
 800a706:	7c3b      	ldrb	r3, [r7, #16]
 800a708:	2b06      	cmp	r3, #6
 800a70a:	d120      	bne.n	800a74e <ymodem_transmit+0x1ae>
                ackRecpt = 1;
 800a70c:	2301      	movs	r3, #1
 800a70e:	633b      	str	r3, [r7, #48]	@ 0x30
                if (size > pktSize) {
 800a710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	429a      	cmp	r2, r3
 800a716:	d913      	bls.n	800a740 <ymodem_transmit+0x1a0>
                    p_buf_int += pktSize;
 800a718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	4413      	add	r3, r2
 800a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size -= pktSize;
 800a720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if (blkNumber == (USER_FLASH_SIZE / PACKET_1K_SIZE)) {
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800a72e:	d103      	bne.n	800a738 <ymodem_transmit+0x198>
                        result = COM_LIMIT;
 800a730:	2305      	movs	r3, #5
 800a732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if (size > pktSize) {
 800a736:	e00d      	b.n	800a754 <ymodem_transmit+0x1b4>
                    } else {
                        blkNumber++;
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	3301      	adds	r3, #1
 800a73c:	623b      	str	r3, [r7, #32]
                if (size > pktSize) {
 800a73e:	e009      	b.n	800a754 <ymodem_transmit+0x1b4>
                    }
                }
                else {
                    p_buf_int += pktSize;
 800a740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if (size > pktSize) {
 800a74c:	e002      	b.n	800a754 <ymodem_transmit+0x1b4>
                }
            }
            else {
                errors++;
 800a74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a750:	3301      	adds	r3, #1
 800a752:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	2b04      	cmp	r3, #4
 800a758:	d902      	bls.n	800a760 <ymodem_transmit+0x1c0>
                result = COM_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <ymodem_transmit+0x1ce>
 800a766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d09c      	beq.n	800a6a8 <ymodem_transmit+0x108>
    while ((size) && (result == COM_OK)) {
 800a76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <ymodem_transmit+0x1dc>
 800a774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d089      	beq.n	800a690 <ymodem_transmit+0xf0>
            }
        }
    }

    /* Send EOT */
    if (result == COM_OK) {
 800a77c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a780:	2b00      	cmp	r3, #0
 800a782:	d143      	bne.n	800a80c <ymodem_transmit+0x26c>
        ackRecpt = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
        while ((!ackRecpt) && (result == COM_OK)) {
 800a78c:	e037      	b.n	800a7fe <ymodem_transmit+0x25e>
            serial_put_byte(EOT);
 800a78e:	2004      	movs	r0, #4
 800a790:	f7f6 f854 	bl	800083c <serial_put_byte>

            if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 800a794:	f107 0110 	add.w	r1, r7, #16
 800a798:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a79c:	2201      	movs	r2, #1
 800a79e:	4825      	ldr	r0, [pc, #148]	@ (800a834 <ymodem_transmit+0x294>)
 800a7a0:	f005 f991 	bl	800fac6 <HAL_UART_Receive>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d120      	bne.n	800a7ec <ymodem_transmit+0x24c>
                if (aRxCtrl[0] == ACK) {
 800a7aa:	7c3b      	ldrb	r3, [r7, #16]
 800a7ac:	2b06      	cmp	r3, #6
 800a7ae:	d102      	bne.n	800a7b6 <ymodem_transmit+0x216>
                    ackRecpt = 1;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7b4:	e01d      	b.n	800a7f2 <ymodem_transmit+0x252>
                }
                else if (aRxCtrl[0] == CA) {
 800a7b6:	7c3b      	ldrb	r3, [r7, #16]
 800a7b8:	2b18      	cmp	r3, #24
 800a7ba:	d11a      	bne.n	800a7f2 <ymodem_transmit+0x252>
                    if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 800a7bc:	f107 0110 	add.w	r1, r7, #16
 800a7c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	481b      	ldr	r0, [pc, #108]	@ (800a834 <ymodem_transmit+0x294>)
 800a7c8:	f005 f97d 	bl	800fac6 <HAL_UART_Receive>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10f      	bne.n	800a7f2 <ymodem_transmit+0x252>
 800a7d2:	7c3b      	ldrb	r3, [r7, #16]
 800a7d4:	2b18      	cmp	r3, #24
 800a7d6:	d10c      	bne.n	800a7f2 <ymodem_transmit+0x252>
                        HAL_Delay(2);
 800a7d8:	2002      	movs	r0, #2
 800a7da:	f000 f917 	bl	800aa0c <HAL_Delay>
                        __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a7de:	4b15      	ldr	r3, [pc, #84]	@ (800a834 <ymodem_transmit+0x294>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
                        result = COM_ABORT;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a7ea:	e002      	b.n	800a7f2 <ymodem_transmit+0x252>
                    }
                }
            }
            else {
                errors++;
 800a7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d902      	bls.n	800a7fe <ymodem_transmit+0x25e>
                result = COM_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d103      	bne.n	800a80c <ymodem_transmit+0x26c>
 800a804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0c0      	beq.n	800a78e <ymodem_transmit+0x1ee>
            }
        }
    }

    /* Send empty packet to close session */
    if (result == COM_OK) {
 800a80c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a810:	2b00      	cmp	r3, #0
 800a812:	d14e      	bne.n	800a8b2 <ymodem_transmit+0x312>
        aPacketData[PACKET_START_INDEX] = SOH;
 800a814:	4b05      	ldr	r3, [pc, #20]	@ (800a82c <ymodem_transmit+0x28c>)
 800a816:	2201      	movs	r2, #1
 800a818:	705a      	strb	r2, [r3, #1]
        aPacketData[PACKET_NUMBER_INDEX] = 0;
 800a81a:	4b04      	ldr	r3, [pc, #16]	@ (800a82c <ymodem_transmit+0x28c>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	709a      	strb	r2, [r3, #2]
        aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 800a820:	4b02      	ldr	r3, [pc, #8]	@ (800a82c <ymodem_transmit+0x28c>)
 800a822:	22ff      	movs	r2, #255	@ 0xff
 800a824:	70da      	strb	r2, [r3, #3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 800a826:	2304      	movs	r3, #4
 800a828:	77fb      	strb	r3, [r7, #31]
 800a82a:	e010      	b.n	800a84e <ymodem_transmit+0x2ae>
 800a82c:	20000e2c 	.word	0x20000e2c
 800a830:	20000e2d 	.word	0x20000e2d
 800a834:	20000680 	.word	0x20000680
 800a838:	20000e30 	.word	0x20000e30
 800a83c:	200005dc 	.word	0x200005dc
            aPacketData[i] = 0x00;
 800a840:	7ffb      	ldrb	r3, [r7, #31]
 800a842:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c0 <ymodem_transmit+0x320>)
 800a844:	2100      	movs	r1, #0
 800a846:	54d1      	strb	r1, [r2, r3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 800a848:	7ffb      	ldrb	r3, [r7, #31]
 800a84a:	3301      	adds	r3, #1
 800a84c:	77fb      	strb	r3, [r7, #31]
 800a84e:	7ffb      	ldrb	r3, [r7, #31]
 800a850:	2b83      	cmp	r3, #131	@ 0x83
 800a852:	d9f5      	bls.n	800a840 <ymodem_transmit+0x2a0>
        }

        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800a854:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a858:	2283      	movs	r2, #131	@ 0x83
 800a85a:	491a      	ldr	r1, [pc, #104]	@ (800a8c4 <ymodem_transmit+0x324>)
 800a85c:	481a      	ldr	r0, [pc, #104]	@ (800a8c8 <ymodem_transmit+0x328>)
 800a85e:	f005 f8a7 	bl	800f9b0 <HAL_UART_Transmit>

#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800a862:	2280      	movs	r2, #128	@ 0x80
 800a864:	4919      	ldr	r1, [pc, #100]	@ (800a8cc <ymodem_transmit+0x32c>)
 800a866:	481a      	ldr	r0, [pc, #104]	@ (800a8d0 <ymodem_transmit+0x330>)
 800a868:	f000 fa21 	bl	800acae <HAL_CRC_Calculate>
 800a86c:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	0a1b      	lsrs	r3, r3, #8
 800a872:	b2db      	uxtb	r3, r3
 800a874:	4618      	mov	r0, r3
 800a876:	f7f5 ffe1 	bl	800083c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f5 ffdc 	bl	800083c <serial_put_byte>
#else
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 800a884:	f107 0110 	add.w	r1, r7, #16
 800a888:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a88c:	2201      	movs	r2, #1
 800a88e:	480e      	ldr	r0, [pc, #56]	@ (800a8c8 <ymodem_transmit+0x328>)
 800a890:	f005 f919 	bl	800fac6 <HAL_UART_Receive>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <ymodem_transmit+0x312>
            if (aRxCtrl[0] == CA) {
 800a89a:	7c3b      	ldrb	r3, [r7, #16]
 800a89c:	2b18      	cmp	r3, #24
 800a89e:	d108      	bne.n	800a8b2 <ymodem_transmit+0x312>
                HAL_Delay(2);
 800a8a0:	2002      	movs	r0, #2
 800a8a2:	f000 f8b3 	bl	800aa0c <HAL_Delay>
                __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a8a6:	4b08      	ldr	r3, [pc, #32]	@ (800a8c8 <ymodem_transmit+0x328>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
                result = COM_ABORT;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return result;
 800a8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3738      	adds	r7, #56	@ 0x38
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000e2c 	.word	0x20000e2c
 800a8c4:	20000e2d 	.word	0x20000e2d
 800a8c8:	20000680 	.word	0x20000680
 800a8cc:	20000e30 	.word	0x20000e30
 800a8d0:	200005dc 	.word	0x200005dc

0800a8d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a8d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a90c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a8d8:	f7ff faac 	bl	8009e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a8dc:	480c      	ldr	r0, [pc, #48]	@ (800a910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a8de:	490d      	ldr	r1, [pc, #52]	@ (800a914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a8e0:	4a0d      	ldr	r2, [pc, #52]	@ (800a918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a8e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a8e4:	e002      	b.n	800a8ec <LoopCopyDataInit>

0800a8e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a8e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a8e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a8ea:	3304      	adds	r3, #4

0800a8ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a8ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a8ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a8f0:	d3f9      	bcc.n	800a8e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a8f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a91c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a8f4:	4c0a      	ldr	r4, [pc, #40]	@ (800a920 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a8f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a8f8:	e001      	b.n	800a8fe <LoopFillZerobss>

0800a8fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a8fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a8fc:	3204      	adds	r2, #4

0800a8fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a8fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a900:	d3fb      	bcc.n	800a8fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a902:	f006 fb15 	bl	8010f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a906:	f7f9 fb0d 	bl	8003f24 <main>
  bx  lr    
 800a90a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a90c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800a910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a914:	200005c0 	.word	0x200005c0
  ldr r2, =_sidata
 800a918:	08013784 	.word	0x08013784
  ldr r2, =_sbss
 800a91c:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 800a920:	200013a4 	.word	0x200013a4

0800a924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a924:	e7fe      	b.n	800a924 <ADC_IRQHandler>
	...

0800a928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a92c:	4b0e      	ldr	r3, [pc, #56]	@ (800a968 <HAL_Init+0x40>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a0d      	ldr	r2, [pc, #52]	@ (800a968 <HAL_Init+0x40>)
 800a932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a938:	4b0b      	ldr	r3, [pc, #44]	@ (800a968 <HAL_Init+0x40>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a0a      	ldr	r2, [pc, #40]	@ (800a968 <HAL_Init+0x40>)
 800a93e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a944:	4b08      	ldr	r3, [pc, #32]	@ (800a968 <HAL_Init+0x40>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a07      	ldr	r2, [pc, #28]	@ (800a968 <HAL_Init+0x40>)
 800a94a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a94e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a950:	2003      	movs	r0, #3
 800a952:	f000 f94f 	bl	800abf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a956:	2000      	movs	r0, #0
 800a958:	f000 f808 	bl	800a96c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a95c:	f7ff f856 	bl	8009a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	40023c00 	.word	0x40023c00

0800a96c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a974:	4b12      	ldr	r3, [pc, #72]	@ (800a9c0 <HAL_InitTick+0x54>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	4b12      	ldr	r3, [pc, #72]	@ (800a9c4 <HAL_InitTick+0x58>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	4619      	mov	r1, r3
 800a97e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a982:	fbb3 f3f1 	udiv	r3, r3, r1
 800a986:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 f967 	bl	800ac5e <HAL_SYSTICK_Config>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e00e      	b.n	800a9b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b0f      	cmp	r3, #15
 800a99e:	d80a      	bhi.n	800a9b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9a8:	f000 f92f 	bl	800ac0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a9ac:	4a06      	ldr	r2, [pc, #24]	@ (800a9c8 <HAL_InitTick+0x5c>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e000      	b.n	800a9b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20000558 	.word	0x20000558
 800a9c4:	20000560 	.word	0x20000560
 800a9c8:	2000055c 	.word	0x2000055c

0800a9cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	@ (800a9ec <HAL_IncTick+0x20>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b06      	ldr	r3, [pc, #24]	@ (800a9f0 <HAL_IncTick+0x24>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4413      	add	r3, r2
 800a9dc:	4a04      	ldr	r2, [pc, #16]	@ (800a9f0 <HAL_IncTick+0x24>)
 800a9de:	6013      	str	r3, [r2, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000560 	.word	0x20000560
 800a9f0:	20001234 	.word	0x20001234

0800a9f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  return uwTick;
 800a9f8:	4b03      	ldr	r3, [pc, #12]	@ (800aa08 <HAL_GetTick+0x14>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	20001234 	.word	0x20001234

0800aa0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa14:	f7ff ffee 	bl	800a9f4 <HAL_GetTick>
 800aa18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa24:	d005      	beq.n	800aa32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa26:	4b0a      	ldr	r3, [pc, #40]	@ (800aa50 <HAL_Delay+0x44>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aa32:	bf00      	nop
 800aa34:	f7ff ffde 	bl	800a9f4 <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d8f7      	bhi.n	800aa34 <HAL_Delay+0x28>
  {
  }
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000560 	.word	0x20000560

0800aa54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aa64:	4b0c      	ldr	r3, [pc, #48]	@ (800aa98 <__NVIC_SetPriorityGrouping+0x44>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aa70:	4013      	ands	r3, r2
 800aa72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aa7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800aa80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aa86:	4a04      	ldr	r2, [pc, #16]	@ (800aa98 <__NVIC_SetPriorityGrouping+0x44>)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	60d3      	str	r3, [r2, #12]
}
 800aa8c:	bf00      	nop
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	e000ed00 	.word	0xe000ed00

0800aa9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aaa0:	4b04      	ldr	r3, [pc, #16]	@ (800aab4 <__NVIC_GetPriorityGrouping+0x18>)
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	0a1b      	lsrs	r3, r3, #8
 800aaa6:	f003 0307 	and.w	r3, r3, #7
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	e000ed00 	.word	0xe000ed00

0800aab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	db0b      	blt.n	800aae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	f003 021f 	and.w	r2, r3, #31
 800aad0:	4907      	ldr	r1, [pc, #28]	@ (800aaf0 <__NVIC_EnableIRQ+0x38>)
 800aad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aad6:	095b      	lsrs	r3, r3, #5
 800aad8:	2001      	movs	r0, #1
 800aada:	fa00 f202 	lsl.w	r2, r0, r2
 800aade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800aae2:	bf00      	nop
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	e000e100 	.word	0xe000e100

0800aaf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	4603      	mov	r3, r0
 800aafc:	6039      	str	r1, [r7, #0]
 800aafe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	db0a      	blt.n	800ab1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	490c      	ldr	r1, [pc, #48]	@ (800ab40 <__NVIC_SetPriority+0x4c>)
 800ab0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab12:	0112      	lsls	r2, r2, #4
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	440b      	add	r3, r1
 800ab18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ab1c:	e00a      	b.n	800ab34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	4908      	ldr	r1, [pc, #32]	@ (800ab44 <__NVIC_SetPriority+0x50>)
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	f003 030f 	and.w	r3, r3, #15
 800ab2a:	3b04      	subs	r3, #4
 800ab2c:	0112      	lsls	r2, r2, #4
 800ab2e:	b2d2      	uxtb	r2, r2
 800ab30:	440b      	add	r3, r1
 800ab32:	761a      	strb	r2, [r3, #24]
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	e000e100 	.word	0xe000e100
 800ab44:	e000ed00 	.word	0xe000ed00

0800ab48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b089      	sub	sp, #36	@ 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	f1c3 0307 	rsb	r3, r3, #7
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	bf28      	it	cs
 800ab66:	2304      	movcs	r3, #4
 800ab68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	2b06      	cmp	r3, #6
 800ab70:	d902      	bls.n	800ab78 <NVIC_EncodePriority+0x30>
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	3b03      	subs	r3, #3
 800ab76:	e000      	b.n	800ab7a <NVIC_EncodePriority+0x32>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	fa02 f303 	lsl.w	r3, r2, r3
 800ab86:	43da      	mvns	r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	401a      	ands	r2, r3
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ab90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9a:	43d9      	mvns	r1, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aba0:	4313      	orrs	r3, r2
         );
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3724      	adds	r7, #36	@ 0x24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	3b01      	subs	r3, #1
 800abbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abc0:	d301      	bcc.n	800abc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800abc2:	2301      	movs	r3, #1
 800abc4:	e00f      	b.n	800abe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800abc6:	4a0a      	ldr	r2, [pc, #40]	@ (800abf0 <SysTick_Config+0x40>)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3b01      	subs	r3, #1
 800abcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800abce:	210f      	movs	r1, #15
 800abd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abd4:	f7ff ff8e 	bl	800aaf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800abd8:	4b05      	ldr	r3, [pc, #20]	@ (800abf0 <SysTick_Config+0x40>)
 800abda:	2200      	movs	r2, #0
 800abdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800abde:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <SysTick_Config+0x40>)
 800abe0:	2207      	movs	r2, #7
 800abe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	e000e010 	.word	0xe000e010

0800abf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff ff29 	bl	800aa54 <__NVIC_SetPriorityGrouping>
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b086      	sub	sp, #24
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	4603      	mov	r3, r0
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
 800ac16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ac1c:	f7ff ff3e 	bl	800aa9c <__NVIC_GetPriorityGrouping>
 800ac20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	6978      	ldr	r0, [r7, #20]
 800ac28:	f7ff ff8e 	bl	800ab48 <NVIC_EncodePriority>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff ff5d 	bl	800aaf4 <__NVIC_SetPriority>
}
 800ac3a:	bf00      	nop
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	4603      	mov	r3, r0
 800ac4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7ff ff31 	bl	800aab8 <__NVIC_EnableIRQ>
}
 800ac56:	bf00      	nop
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b082      	sub	sp, #8
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff ffa2 	bl	800abb0 <SysTick_Config>
 800ac6c:	4603      	mov	r3, r0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e00e      	b.n	800aca6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	795b      	ldrb	r3, [r3, #5]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d105      	bne.n	800ac9e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7fe fedf 	bl	8009a5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800acae:	b480      	push	{r7}
 800acb0:	b087      	sub	sp, #28
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800acba:	2300      	movs	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2202      	movs	r2, #2
 800acc2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f042 0201 	orr.w	r2, r2, #1
 800acd2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	e00a      	b.n	800acf0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	441a      	add	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6812      	ldr	r2, [r2, #0]
 800ace8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	3301      	adds	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d3f0      	bcc.n	800acda <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2201      	movs	r2, #1
 800ad04:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800ad06:	693b      	ldr	r3, [r7, #16]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ad22:	f7ff fe67 	bl	800a9f4 <HAL_GetTick>
 800ad26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d008      	beq.n	800ad46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2280      	movs	r2, #128	@ 0x80
 800ad38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e052      	b.n	800adec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f022 0216 	bic.w	r2, r2, #22
 800ad54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	695a      	ldr	r2, [r3, #20]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d103      	bne.n	800ad76 <HAL_DMA_Abort+0x62>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 0208 	bic.w	r2, r2, #8
 800ad84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f022 0201 	bic.w	r2, r2, #1
 800ad94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad96:	e013      	b.n	800adc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad98:	f7ff fe2c 	bl	800a9f4 <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d90c      	bls.n	800adc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2203      	movs	r2, #3
 800adb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e015      	b.n	800adec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e4      	bne.n	800ad98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800add2:	223f      	movs	r2, #63	@ 0x3f
 800add4:	409a      	lsls	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d004      	beq.n	800ae12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2280      	movs	r2, #128	@ 0x80
 800ae0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e00c      	b.n	800ae2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2205      	movs	r2, #5
 800ae16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0201 	bic.w	r2, r2, #1
 800ae28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ae46:	b2db      	uxtb	r3, r3
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae62:	4b23      	ldr	r3, [pc, #140]	@ (800aef0 <HAL_FLASH_Program+0x9c>)
 800ae64:	7e1b      	ldrb	r3, [r3, #24]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_FLASH_Program+0x1a>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e03b      	b.n	800aee6 <HAL_FLASH_Program+0x92>
 800ae6e:	4b20      	ldr	r3, [pc, #128]	@ (800aef0 <HAL_FLASH_Program+0x9c>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ae78:	f000 f8b0 	bl	800afdc <FLASH_WaitForLastOperation>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d12b      	bne.n	800aede <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d105      	bne.n	800ae98 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ae8c:	783b      	ldrb	r3, [r7, #0]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	68b8      	ldr	r0, [r7, #8]
 800ae92:	f000 f95b 	bl	800b14c <FLASH_Program_Byte>
 800ae96:	e016      	b.n	800aec6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d105      	bne.n	800aeaa <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ae9e:	883b      	ldrh	r3, [r7, #0]
 800aea0:	4619      	mov	r1, r3
 800aea2:	68b8      	ldr	r0, [r7, #8]
 800aea4:	f000 f92e 	bl	800b104 <FLASH_Program_HalfWord>
 800aea8:	e00d      	b.n	800aec6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d105      	bne.n	800aebc <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	68b8      	ldr	r0, [r7, #8]
 800aeb6:	f000 f903 	bl	800b0c0 <FLASH_Program_Word>
 800aeba:	e004      	b.n	800aec6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800aebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aec0:	68b8      	ldr	r0, [r7, #8]
 800aec2:	f000 f8cb 	bl	800b05c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aec6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800aeca:	f000 f887 	bl	800afdc <FLASH_WaitForLastOperation>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800aed2:	4b08      	ldr	r3, [pc, #32]	@ (800aef4 <HAL_FLASH_Program+0xa0>)
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	4a07      	ldr	r2, [pc, #28]	@ (800aef4 <HAL_FLASH_Program+0xa0>)
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aede:	4b04      	ldr	r3, [pc, #16]	@ (800aef0 <HAL_FLASH_Program+0x9c>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	761a      	strb	r2, [r3, #24]

  return status;
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	20001238 	.word	0x20001238
 800aef4:	40023c00 	.word	0x40023c00

0800aef8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800af02:	4b0b      	ldr	r3, [pc, #44]	@ (800af30 <HAL_FLASH_Unlock+0x38>)
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	da0b      	bge.n	800af22 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800af0a:	4b09      	ldr	r3, [pc, #36]	@ (800af30 <HAL_FLASH_Unlock+0x38>)
 800af0c:	4a09      	ldr	r2, [pc, #36]	@ (800af34 <HAL_FLASH_Unlock+0x3c>)
 800af0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800af10:	4b07      	ldr	r3, [pc, #28]	@ (800af30 <HAL_FLASH_Unlock+0x38>)
 800af12:	4a09      	ldr	r2, [pc, #36]	@ (800af38 <HAL_FLASH_Unlock+0x40>)
 800af14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800af16:	4b06      	ldr	r3, [pc, #24]	@ (800af30 <HAL_FLASH_Unlock+0x38>)
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da01      	bge.n	800af22 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800af22:	79fb      	ldrb	r3, [r7, #7]
}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	40023c00 	.word	0x40023c00
 800af34:	45670123 	.word	0x45670123
 800af38:	cdef89ab 	.word	0xcdef89ab

0800af3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800af40:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <HAL_FLASH_Lock+0x1c>)
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	4a04      	ldr	r2, [pc, #16]	@ (800af58 <HAL_FLASH_Lock+0x1c>)
 800af46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af4a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	40023c00 	.word	0x40023c00

0800af5c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800af60:	4b09      	ldr	r3, [pc, #36]	@ (800af88 <HAL_FLASH_OB_Unlock+0x2c>)
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d007      	beq.n	800af7c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800af6c:	4b06      	ldr	r3, [pc, #24]	@ (800af88 <HAL_FLASH_OB_Unlock+0x2c>)
 800af6e:	4a07      	ldr	r2, [pc, #28]	@ (800af8c <HAL_FLASH_OB_Unlock+0x30>)
 800af70:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800af72:	4b05      	ldr	r3, [pc, #20]	@ (800af88 <HAL_FLASH_OB_Unlock+0x2c>)
 800af74:	4a06      	ldr	r2, [pc, #24]	@ (800af90 <HAL_FLASH_OB_Unlock+0x34>)
 800af76:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	e000      	b.n	800af7e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
}
 800af7e:	4618      	mov	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	40023c00 	.word	0x40023c00
 800af8c:	08192a3b 	.word	0x08192a3b
 800af90:	4c5d6e7f 	.word	0x4c5d6e7f

0800af94 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800af94:	b480      	push	{r7}
 800af96:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800af98:	4b05      	ldr	r3, [pc, #20]	@ (800afb0 <HAL_FLASH_OB_Lock+0x1c>)
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	4a04      	ldr	r2, [pc, #16]	@ (800afb0 <HAL_FLASH_OB_Lock+0x1c>)
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	40023c00 	.word	0x40023c00

0800afb4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800afb8:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <HAL_FLASH_OB_Launch+0x24>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	4a06      	ldr	r2, [pc, #24]	@ (800afd8 <HAL_FLASH_OB_Launch+0x24>)
 800afc0:	f043 0302 	orr.w	r3, r3, #2
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800afc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800afcc:	f000 f806 	bl	800afdc <FLASH_WaitForLastOperation>
 800afd0:	4603      	mov	r3, r0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	40023c14 	.word	0x40023c14

0800afdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800afe8:	4b1a      	ldr	r3, [pc, #104]	@ (800b054 <FLASH_WaitForLastOperation+0x78>)
 800afea:	2200      	movs	r2, #0
 800afec:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800afee:	f7ff fd01 	bl	800a9f4 <HAL_GetTick>
 800aff2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800aff4:	e010      	b.n	800b018 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800affc:	d00c      	beq.n	800b018 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <FLASH_WaitForLastOperation+0x38>
 800b004:	f7ff fcf6 	bl	800a9f4 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	429a      	cmp	r2, r3
 800b012:	d201      	bcs.n	800b018 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e019      	b.n	800b04c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800b018:	4b0f      	ldr	r3, [pc, #60]	@ (800b058 <FLASH_WaitForLastOperation+0x7c>)
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e8      	bne.n	800aff6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b024:	4b0c      	ldr	r3, [pc, #48]	@ (800b058 <FLASH_WaitForLastOperation+0x7c>)
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d002      	beq.n	800b036 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b030:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <FLASH_WaitForLastOperation+0x7c>)
 800b032:	2201      	movs	r2, #1
 800b034:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800b036:	4b08      	ldr	r3, [pc, #32]	@ (800b058 <FLASH_WaitForLastOperation+0x7c>)
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800b042:	f000 f8a5 	bl	800b190 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800b04a:	2300      	movs	r3, #0

}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20001238 	.word	0x20001238
 800b058:	40023c00 	.word	0x40023c00

0800b05c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b068:	4b14      	ldr	r3, [pc, #80]	@ (800b0bc <FLASH_Program_DoubleWord+0x60>)
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	4a13      	ldr	r2, [pc, #76]	@ (800b0bc <FLASH_Program_DoubleWord+0x60>)
 800b06e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b072:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b074:	4b11      	ldr	r3, [pc, #68]	@ (800b0bc <FLASH_Program_DoubleWord+0x60>)
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	4a10      	ldr	r2, [pc, #64]	@ (800b0bc <FLASH_Program_DoubleWord+0x60>)
 800b07a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b07e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b080:	4b0e      	ldr	r3, [pc, #56]	@ (800b0bc <FLASH_Program_DoubleWord+0x60>)
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	4a0d      	ldr	r2, [pc, #52]	@ (800b0bc <FLASH_Program_DoubleWord+0x60>)
 800b086:	f043 0301 	orr.w	r3, r3, #1
 800b08a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800b092:	f3bf 8f6f 	isb	sy
}
 800b096:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800b098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b09c:	f04f 0200 	mov.w	r2, #0
 800b0a0:	f04f 0300 	mov.w	r3, #0
 800b0a4:	000a      	movs	r2, r1
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	68f9      	ldr	r1, [r7, #12]
 800b0aa:	3104      	adds	r1, #4
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	600b      	str	r3, [r1, #0]
}
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	40023c00 	.word	0x40023c00

0800b0c0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <FLASH_Program_Word+0x40>)
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b100 <FLASH_Program_Word+0x40>)
 800b0d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800b0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b100 <FLASH_Program_Word+0x40>)
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	4a09      	ldr	r2, [pc, #36]	@ (800b100 <FLASH_Program_Word+0x40>)
 800b0dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b0e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b0e2:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <FLASH_Program_Word+0x40>)
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	4a06      	ldr	r2, [pc, #24]	@ (800b100 <FLASH_Program_Word+0x40>)
 800b0e8:	f043 0301 	orr.w	r3, r3, #1
 800b0ec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	601a      	str	r2, [r3, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	40023c00 	.word	0x40023c00

0800b104 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b110:	4b0d      	ldr	r3, [pc, #52]	@ (800b148 <FLASH_Program_HalfWord+0x44>)
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	4a0c      	ldr	r2, [pc, #48]	@ (800b148 <FLASH_Program_HalfWord+0x44>)
 800b116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b11a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800b11c:	4b0a      	ldr	r3, [pc, #40]	@ (800b148 <FLASH_Program_HalfWord+0x44>)
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	4a09      	ldr	r2, [pc, #36]	@ (800b148 <FLASH_Program_HalfWord+0x44>)
 800b122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b126:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b128:	4b07      	ldr	r3, [pc, #28]	@ (800b148 <FLASH_Program_HalfWord+0x44>)
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	4a06      	ldr	r2, [pc, #24]	@ (800b148 <FLASH_Program_HalfWord+0x44>)
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	887a      	ldrh	r2, [r7, #2]
 800b138:	801a      	strh	r2, [r3, #0]
}
 800b13a:	bf00      	nop
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	40023c00 	.word	0x40023c00

0800b14c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b158:	4b0c      	ldr	r3, [pc, #48]	@ (800b18c <FLASH_Program_Byte+0x40>)
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	4a0b      	ldr	r2, [pc, #44]	@ (800b18c <FLASH_Program_Byte+0x40>)
 800b15e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800b164:	4b09      	ldr	r3, [pc, #36]	@ (800b18c <FLASH_Program_Byte+0x40>)
 800b166:	4a09      	ldr	r2, [pc, #36]	@ (800b18c <FLASH_Program_Byte+0x40>)
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b16c:	4b07      	ldr	r3, [pc, #28]	@ (800b18c <FLASH_Program_Byte+0x40>)
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	4a06      	ldr	r2, [pc, #24]	@ (800b18c <FLASH_Program_Byte+0x40>)
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	701a      	strb	r2, [r3, #0]
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	40023c00 	.word	0x40023c00

0800b190 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800b194:	4b2f      	ldr	r3, [pc, #188]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	f003 0310 	and.w	r3, r3, #16
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d008      	beq.n	800b1b2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b1a0:	4b2d      	ldr	r3, [pc, #180]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	f043 0310 	orr.w	r3, r3, #16
 800b1a8:	4a2b      	ldr	r2, [pc, #172]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1aa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800b1ac:	4b29      	ldr	r3, [pc, #164]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800b1b2:	4b28      	ldr	r3, [pc, #160]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	f003 0320 	and.w	r3, r3, #32
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d008      	beq.n	800b1d0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b1be:	4b26      	ldr	r3, [pc, #152]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	f043 0308 	orr.w	r3, r3, #8
 800b1c6:	4a24      	ldr	r2, [pc, #144]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1c8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800b1ca:	4b22      	ldr	r3, [pc, #136]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800b1d0:	4b20      	ldr	r3, [pc, #128]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d008      	beq.n	800b1ee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b1dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	f043 0304 	orr.w	r3, r3, #4
 800b1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1e6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800b1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b1ea:	2240      	movs	r2, #64	@ 0x40
 800b1ec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800b1ee:	4b19      	ldr	r3, [pc, #100]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d008      	beq.n	800b20c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800b1fa:	4b17      	ldr	r3, [pc, #92]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f043 0302 	orr.w	r3, r3, #2
 800b202:	4a15      	ldr	r2, [pc, #84]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b204:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800b206:	4b13      	ldr	r3, [pc, #76]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b208:	2280      	movs	r2, #128	@ 0x80
 800b20a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800b20c:	4b11      	ldr	r3, [pc, #68]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b218:	4b0f      	ldr	r3, [pc, #60]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	f043 0301 	orr.w	r3, r3, #1
 800b220:	4a0d      	ldr	r2, [pc, #52]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b222:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800b224:	4b0b      	ldr	r3, [pc, #44]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b22a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800b22c:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	f003 0302 	and.w	r3, r3, #2
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800b238:	4b07      	ldr	r3, [pc, #28]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b23a:	69db      	ldr	r3, [r3, #28]
 800b23c:	f043 0320 	orr.w	r3, r3, #32
 800b240:	4a05      	ldr	r2, [pc, #20]	@ (800b258 <FLASH_SetErrorCode+0xc8>)
 800b242:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800b244:	4b03      	ldr	r3, [pc, #12]	@ (800b254 <FLASH_SetErrorCode+0xc4>)
 800b246:	2202      	movs	r2, #2
 800b248:	60da      	str	r2, [r3, #12]
  }
}
 800b24a:	bf00      	nop
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	40023c00 	.word	0x40023c00
 800b258:	20001238 	.word	0x20001238

0800b25c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b26a:	4b31      	ldr	r3, [pc, #196]	@ (800b330 <HAL_FLASHEx_Erase+0xd4>)
 800b26c:	7e1b      	ldrb	r3, [r3, #24]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d101      	bne.n	800b276 <HAL_FLASHEx_Erase+0x1a>
 800b272:	2302      	movs	r3, #2
 800b274:	e058      	b.n	800b328 <HAL_FLASHEx_Erase+0xcc>
 800b276:	4b2e      	ldr	r3, [pc, #184]	@ (800b330 <HAL_FLASHEx_Erase+0xd4>)
 800b278:	2201      	movs	r2, #1
 800b27a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b27c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b280:	f7ff feac 	bl	800afdc <FLASH_WaitForLastOperation>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d148      	bne.n	800b320 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b294:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d115      	bne.n	800b2ca <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	f000 f8d6 	bl	800b45c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b2b4:	f7ff fe92 	bl	800afdc <FLASH_WaitForLastOperation>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800b2bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b334 <HAL_FLASHEx_Erase+0xd8>)
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b334 <HAL_FLASHEx_Erase+0xd8>)
 800b2c2:	f023 0304 	bic.w	r3, r3, #4
 800b2c6:	6113      	str	r3, [r2, #16]
 800b2c8:	e028      	b.n	800b31c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	60bb      	str	r3, [r7, #8]
 800b2d0:	e01c      	b.n	800b30c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f000 f8e2 	bl	800b4a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b2e4:	f7ff fe7a 	bl	800afdc <FLASH_WaitForLastOperation>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800b2ec:	4b11      	ldr	r3, [pc, #68]	@ (800b334 <HAL_FLASHEx_Erase+0xd8>)
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	4a10      	ldr	r2, [pc, #64]	@ (800b334 <HAL_FLASHEx_Erase+0xd8>)
 800b2f2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800b2f6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	601a      	str	r2, [r3, #0]
          break;
 800b304:	e00a      	b.n	800b31c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	3301      	adds	r3, #1
 800b30a:	60bb      	str	r3, [r7, #8]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	4413      	add	r3, r2
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d3da      	bcc.n	800b2d2 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800b31c:	f000 f9fe 	bl	800b71c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b320:	4b03      	ldr	r3, [pc, #12]	@ (800b330 <HAL_FLASHEx_Erase+0xd4>)
 800b322:	2200      	movs	r2, #0
 800b324:	761a      	strb	r2, [r3, #24]

  return status;
 800b326:	7bfb      	ldrb	r3, [r7, #15]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20001238 	.word	0x20001238
 800b334:	40023c00 	.word	0x40023c00

0800b338 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b344:	4b32      	ldr	r3, [pc, #200]	@ (800b410 <HAL_FLASHEx_OBProgram+0xd8>)
 800b346:	7e1b      	ldrb	r3, [r3, #24]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_FLASHEx_OBProgram+0x18>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e05b      	b.n	800b408 <HAL_FLASHEx_OBProgram+0xd0>
 800b350:	4b2f      	ldr	r3, [pc, #188]	@ (800b410 <HAL_FLASHEx_OBProgram+0xd8>)
 800b352:	2201      	movs	r2, #1
 800b354:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d018      	beq.n	800b394 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d10a      	bne.n	800b380 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	4619      	mov	r1, r3
 800b374:	4610      	mov	r0, r2
 800b376:	f000 f8dd 	bl	800b534 <FLASH_OB_EnableWRP>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]
 800b37e:	e009      	b.n	800b394 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f000 f8f4 	bl	800b578 <FLASH_OB_DisableWRP>
 800b390:	4603      	mov	r3, r0
 800b392:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0302 	and.w	r3, r3, #2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d007      	beq.n	800b3b0 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 f906 	bl	800b5b8 <FLASH_OB_RDP_LevelConfig>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0304 	and.w	r3, r3, #4
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d013      	beq.n	800b3e4 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7e1b      	ldrb	r3, [r3, #24]
 800b3c0:	f003 0320 	and.w	r3, r3, #32
 800b3c4:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800b3ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ce:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800b3d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f000 f906 	bl	800b5ec <FLASH_OB_UserConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d007      	beq.n	800b400 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 f926 	bl	800b648 <FLASH_OB_BOR_LevelConfig>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b400:	4b03      	ldr	r3, [pc, #12]	@ (800b410 <HAL_FLASHEx_OBProgram+0xd8>)
 800b402:	2200      	movs	r2, #0
 800b404:	761a      	strb	r2, [r3, #24]

  return status;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20001238 	.word	0x20001238

0800b414 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	220f      	movs	r2, #15
 800b420:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800b422:	f000 f93f 	bl	800b6a4 <FLASH_OB_GetWRP>
 800b426:	4603      	mov	r3, r0
 800b428:	461a      	mov	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800b42e:	f000 f945 	bl	800b6bc <FLASH_OB_GetRDP>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800b43a:	f000 f923 	bl	800b684 <FLASH_OB_GetUser>
 800b43e:	4603      	mov	r3, r0
 800b440:	461a      	mov	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800b446:	f000 f959 	bl	800b6fc <FLASH_OB_GetBOR>
 800b44a:	4603      	mov	r3, r0
 800b44c:	461a      	mov	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	615a      	str	r2, [r3, #20]
}
 800b452:	bf00      	nop
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	6039      	str	r1, [r7, #0]
 800b466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b468:	4b0d      	ldr	r3, [pc, #52]	@ (800b4a0 <FLASH_MassErase+0x44>)
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	4a0c      	ldr	r2, [pc, #48]	@ (800b4a0 <FLASH_MassErase+0x44>)
 800b46e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800b474:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a0 <FLASH_MassErase+0x44>)
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	4a09      	ldr	r2, [pc, #36]	@ (800b4a0 <FLASH_MassErase+0x44>)
 800b47a:	f043 0304 	orr.w	r3, r3, #4
 800b47e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800b480:	4b07      	ldr	r3, [pc, #28]	@ (800b4a0 <FLASH_MassErase+0x44>)
 800b482:	691a      	ldr	r2, [r3, #16]
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	4313      	orrs	r3, r2
 800b48a:	4a05      	ldr	r2, [pc, #20]	@ (800b4a0 <FLASH_MassErase+0x44>)
 800b48c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b490:	6113      	str	r3, [r2, #16]
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	40023c00 	.word	0x40023c00

0800b4a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d102      	bne.n	800b4c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e010      	b.n	800b4e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d103      	bne.n	800b4ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b4c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	e009      	b.n	800b4e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d103      	bne.n	800b4dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b4d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	e002      	b.n	800b4e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b4dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b4e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b4e2:	4b13      	ldr	r3, [pc, #76]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	4a12      	ldr	r2, [pc, #72]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b4e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800b4ee:	4b10      	ldr	r3, [pc, #64]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b4f0:	691a      	ldr	r2, [r3, #16]
 800b4f2:	490f      	ldr	r1, [pc, #60]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b500:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b504:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b506:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b508:	691a      	ldr	r2, [r3, #16]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	4313      	orrs	r3, r2
 800b510:	4a07      	ldr	r2, [pc, #28]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b512:	f043 0302 	orr.w	r3, r3, #2
 800b516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b518:	4b05      	ldr	r3, [pc, #20]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	4a04      	ldr	r2, [pc, #16]	@ (800b530 <FLASH_Erase_Sector+0x8c>)
 800b51e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b522:	6113      	str	r3, [r2, #16]
}
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	40023c00 	.word	0x40023c00

0800b534 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b542:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b546:	f7ff fd49 	bl	800afdc <FLASH_WaitForLastOperation>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800b554:	4b07      	ldr	r3, [pc, #28]	@ (800b574 <FLASH_OB_EnableWRP+0x40>)
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	43db      	mvns	r3, r3
 800b560:	b29b      	uxth	r3, r3
 800b562:	4904      	ldr	r1, [pc, #16]	@ (800b574 <FLASH_OB_EnableWRP+0x40>)
 800b564:	4013      	ands	r3, r2
 800b566:	b29b      	uxth	r3, r3
 800b568:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	40023c16 	.word	0x40023c16

0800b578 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b586:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b58a:	f7ff fd27 	bl	800afdc <FLASH_WaitForLastOperation>
 800b58e:	4603      	mov	r3, r0
 800b590:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d108      	bne.n	800b5aa <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800b598:	4b06      	ldr	r3, [pc, #24]	@ (800b5b4 <FLASH_OB_DisableWRP+0x3c>)
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	4904      	ldr	r1, [pc, #16]	@ (800b5b4 <FLASH_OB_DisableWRP+0x3c>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	40023c16 	.word	0x40023c16

0800b5b8 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b5c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b5ca:	f7ff fd07 	bl	800afdc <FLASH_WaitForLastOperation>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800b5d8:	4a03      	ldr	r2, [pc, #12]	@ (800b5e8 <FLASH_OB_RDP_LevelConfig+0x30>)
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	40023c15 	.word	0x40023c15

0800b5ec <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	71bb      	strb	r3, [r7, #6]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp;
  HAL_StatusTypeDef status = HAL_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b602:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b606:	f7ff fce9 	bl	800afdc <FLASH_WaitForLastOperation>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d111      	bne.n	800b638 <FLASH_OB_UserConfig+0x4c>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800b614:	4b0b      	ldr	r3, [pc, #44]	@ (800b644 <FLASH_OB_UserConfig+0x58>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	f003 031f 	and.w	r3, r3, #31
 800b61e:	73bb      	strb	r3, [r7, #14]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800b620:	79ba      	ldrb	r2, [r7, #6]
 800b622:	7bbb      	ldrb	r3, [r7, #14]
 800b624:	4313      	orrs	r3, r2
 800b626:	b2da      	uxtb	r2, r3
 800b628:	797b      	ldrb	r3, [r7, #5]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	4905      	ldr	r1, [pc, #20]	@ (800b644 <FLASH_OB_UserConfig+0x58>)
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	4313      	orrs	r3, r2
 800b634:	b2db      	uxtb	r3, r3
 800b636:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800b638:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	40023c14 	.word	0x40023c14

0800b648 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800b652:	4b0b      	ldr	r3, [pc, #44]	@ (800b680 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4a09      	ldr	r2, [pc, #36]	@ (800b680 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b65a:	f023 030c 	bic.w	r3, r3, #12
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800b662:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	b2da      	uxtb	r2, r3
 800b668:	4905      	ldr	r1, [pc, #20]	@ (800b680 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800b672:	2300      	movs	r3, #0

}
 800b674:	4618      	mov	r0, r3
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	40023c14 	.word	0x40023c14

0800b684 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800b688:	4b05      	ldr	r3, [pc, #20]	@ (800b6a0 <FLASH_OB_GetUser+0x1c>)
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f023 031f 	bic.w	r3, r3, #31
 800b692:	b2db      	uxtb	r3, r3
}
 800b694:	4618      	mov	r0, r3
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	40023c00 	.word	0x40023c00

0800b6a4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800b6a8:	4b03      	ldr	r3, [pc, #12]	@ (800b6b8 <FLASH_OB_GetWRP+0x14>)
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	40023c16 	.word	0x40023c16

0800b6bc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800b6c2:	23aa      	movs	r3, #170	@ 0xaa
 800b6c4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800b6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f8 <FLASH_OB_GetRDP+0x3c>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2bcc      	cmp	r3, #204	@ 0xcc
 800b6ce:	d102      	bne.n	800b6d6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800b6d0:	23cc      	movs	r3, #204	@ 0xcc
 800b6d2:	71fb      	strb	r3, [r7, #7]
 800b6d4:	e009      	b.n	800b6ea <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800b6d6:	4b08      	ldr	r3, [pc, #32]	@ (800b6f8 <FLASH_OB_GetRDP+0x3c>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2baa      	cmp	r3, #170	@ 0xaa
 800b6de:	d102      	bne.n	800b6e6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800b6e0:	23aa      	movs	r3, #170	@ 0xaa
 800b6e2:	71fb      	strb	r3, [r7, #7]
 800b6e4:	e001      	b.n	800b6ea <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800b6e6:	2355      	movs	r3, #85	@ 0x55
 800b6e8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	40023c15 	.word	0x40023c15

0800b6fc <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800b700:	4b05      	ldr	r3, [pc, #20]	@ (800b718 <FLASH_OB_GetBOR+0x1c>)
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	f003 030c 	and.w	r3, r3, #12
 800b70a:	b2db      	uxtb	r3, r3
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	40023c14 	.word	0x40023c14

0800b71c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800b720:	4b20      	ldr	r3, [pc, #128]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d017      	beq.n	800b75c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b72c:	4b1d      	ldr	r3, [pc, #116]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a1c      	ldr	r2, [pc, #112]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b732:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b736:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b738:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a19      	ldr	r2, [pc, #100]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b73e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	4b17      	ldr	r3, [pc, #92]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a16      	ldr	r2, [pc, #88]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b74a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b74e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b750:	4b14      	ldr	r3, [pc, #80]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a13      	ldr	r2, [pc, #76]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b75a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b75c:	4b11      	ldr	r3, [pc, #68]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b764:	2b00      	cmp	r3, #0
 800b766:	d017      	beq.n	800b798 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b768:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a0d      	ldr	r2, [pc, #52]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b76e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b772:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b774:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a0a      	ldr	r2, [pc, #40]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b77a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	4b08      	ldr	r3, [pc, #32]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a07      	ldr	r2, [pc, #28]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b78a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b78c:	4b05      	ldr	r3, [pc, #20]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a04      	ldr	r2, [pc, #16]	@ (800b7a4 <FLASH_FlushCaches+0x88>)
 800b792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b796:	6013      	str	r3, [r2, #0]
  }
}
 800b798:	bf00      	nop
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	40023c00 	.word	0x40023c00

0800b7a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b089      	sub	sp, #36	@ 0x24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	e159      	b.n	800ba78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	f040 8148 	bne.w	800ba72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	f003 0303 	and.w	r3, r3, #3
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d005      	beq.n	800b7fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d130      	bne.n	800b85c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	2203      	movs	r2, #3
 800b806:	fa02 f303 	lsl.w	r3, r2, r3
 800b80a:	43db      	mvns	r3, r3
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	4013      	ands	r3, r2
 800b810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68da      	ldr	r2, [r3, #12]
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	4313      	orrs	r3, r2
 800b822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b830:	2201      	movs	r2, #1
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	fa02 f303 	lsl.w	r3, r2, r3
 800b838:	43db      	mvns	r3, r3
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	4013      	ands	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	091b      	lsrs	r3, r3, #4
 800b846:	f003 0201 	and.w	r2, r3, #1
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	fa02 f303 	lsl.w	r3, r2, r3
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	4313      	orrs	r3, r2
 800b854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f003 0303 	and.w	r3, r3, #3
 800b864:	2b03      	cmp	r3, #3
 800b866:	d017      	beq.n	800b898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	2203      	movs	r2, #3
 800b874:	fa02 f303 	lsl.w	r3, r2, r3
 800b878:	43db      	mvns	r3, r3
 800b87a:	69ba      	ldr	r2, [r7, #24]
 800b87c:	4013      	ands	r3, r2
 800b87e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	69ba      	ldr	r2, [r7, #24]
 800b88e:	4313      	orrs	r3, r2
 800b890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69ba      	ldr	r2, [r7, #24]
 800b896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d123      	bne.n	800b8ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	08da      	lsrs	r2, r3, #3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3208      	adds	r2, #8
 800b8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	220f      	movs	r2, #15
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	43db      	mvns	r3, r3
 800b8c2:	69ba      	ldr	r2, [r7, #24]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	08da      	lsrs	r2, r3, #3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3208      	adds	r2, #8
 800b8e6:	69b9      	ldr	r1, [r7, #24]
 800b8e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	2203      	movs	r2, #3
 800b8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8fc:	43db      	mvns	r3, r3
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	4013      	ands	r3, r2
 800b902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	f003 0203 	and.w	r2, r3, #3
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	fa02 f303 	lsl.w	r3, r2, r3
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	4313      	orrs	r3, r2
 800b918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 80a2 	beq.w	800ba72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	4b57      	ldr	r3, [pc, #348]	@ (800ba90 <HAL_GPIO_Init+0x2e8>)
 800b934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b936:	4a56      	ldr	r2, [pc, #344]	@ (800ba90 <HAL_GPIO_Init+0x2e8>)
 800b938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b93c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b93e:	4b54      	ldr	r3, [pc, #336]	@ (800ba90 <HAL_GPIO_Init+0x2e8>)
 800b940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b94a:	4a52      	ldr	r2, [pc, #328]	@ (800ba94 <HAL_GPIO_Init+0x2ec>)
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	089b      	lsrs	r3, r3, #2
 800b950:	3302      	adds	r3, #2
 800b952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	f003 0303 	and.w	r3, r3, #3
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	220f      	movs	r2, #15
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	43db      	mvns	r3, r3
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	4013      	ands	r3, r2
 800b96c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a49      	ldr	r2, [pc, #292]	@ (800ba98 <HAL_GPIO_Init+0x2f0>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d019      	beq.n	800b9aa <HAL_GPIO_Init+0x202>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a48      	ldr	r2, [pc, #288]	@ (800ba9c <HAL_GPIO_Init+0x2f4>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d013      	beq.n	800b9a6 <HAL_GPIO_Init+0x1fe>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a47      	ldr	r2, [pc, #284]	@ (800baa0 <HAL_GPIO_Init+0x2f8>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d00d      	beq.n	800b9a2 <HAL_GPIO_Init+0x1fa>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a46      	ldr	r2, [pc, #280]	@ (800baa4 <HAL_GPIO_Init+0x2fc>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d007      	beq.n	800b99e <HAL_GPIO_Init+0x1f6>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a45      	ldr	r2, [pc, #276]	@ (800baa8 <HAL_GPIO_Init+0x300>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d101      	bne.n	800b99a <HAL_GPIO_Init+0x1f2>
 800b996:	2304      	movs	r3, #4
 800b998:	e008      	b.n	800b9ac <HAL_GPIO_Init+0x204>
 800b99a:	2307      	movs	r3, #7
 800b99c:	e006      	b.n	800b9ac <HAL_GPIO_Init+0x204>
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e004      	b.n	800b9ac <HAL_GPIO_Init+0x204>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	e002      	b.n	800b9ac <HAL_GPIO_Init+0x204>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <HAL_GPIO_Init+0x204>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	69fa      	ldr	r2, [r7, #28]
 800b9ae:	f002 0203 	and.w	r2, r2, #3
 800b9b2:	0092      	lsls	r2, r2, #2
 800b9b4:	4093      	lsls	r3, r2
 800b9b6:	69ba      	ldr	r2, [r7, #24]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9bc:	4935      	ldr	r1, [pc, #212]	@ (800ba94 <HAL_GPIO_Init+0x2ec>)
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	089b      	lsrs	r3, r3, #2
 800b9c2:	3302      	adds	r3, #2
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b9ca:	4b38      	ldr	r3, [pc, #224]	@ (800baac <HAL_GPIO_Init+0x304>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	43db      	mvns	r3, r3
 800b9d4:	69ba      	ldr	r2, [r7, #24]
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b9e6:	69ba      	ldr	r2, [r7, #24]
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b9ee:	4a2f      	ldr	r2, [pc, #188]	@ (800baac <HAL_GPIO_Init+0x304>)
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b9f4:	4b2d      	ldr	r3, [pc, #180]	@ (800baac <HAL_GPIO_Init+0x304>)
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	4013      	ands	r3, r2
 800ba02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ba10:	69ba      	ldr	r2, [r7, #24]
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ba18:	4a24      	ldr	r2, [pc, #144]	@ (800baac <HAL_GPIO_Init+0x304>)
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ba1e:	4b23      	ldr	r3, [pc, #140]	@ (800baac <HAL_GPIO_Init+0x304>)
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	43db      	mvns	r3, r3
 800ba28:	69ba      	ldr	r2, [r7, #24]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ba42:	4a1a      	ldr	r2, [pc, #104]	@ (800baac <HAL_GPIO_Init+0x304>)
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ba48:	4b18      	ldr	r3, [pc, #96]	@ (800baac <HAL_GPIO_Init+0x304>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	43db      	mvns	r3, r3
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	4013      	ands	r3, r2
 800ba56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d003      	beq.n	800ba6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ba64:	69ba      	ldr	r2, [r7, #24]
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ba6c:	4a0f      	ldr	r2, [pc, #60]	@ (800baac <HAL_GPIO_Init+0x304>)
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	3301      	adds	r3, #1
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	2b0f      	cmp	r3, #15
 800ba7c:	f67f aea2 	bls.w	800b7c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	3724      	adds	r7, #36	@ 0x24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	40023800 	.word	0x40023800
 800ba94:	40013800 	.word	0x40013800
 800ba98:	40020000 	.word	0x40020000
 800ba9c:	40020400 	.word	0x40020400
 800baa0:	40020800 	.word	0x40020800
 800baa4:	40020c00 	.word	0x40020c00
 800baa8:	40021000 	.word	0x40021000
 800baac:	40013c00 	.word	0x40013c00

0800bab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691a      	ldr	r2, [r3, #16]
 800bac0:	887b      	ldrh	r3, [r7, #2]
 800bac2:	4013      	ands	r3, r2
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bac8:	2301      	movs	r3, #1
 800baca:	73fb      	strb	r3, [r7, #15]
 800bacc:	e001      	b.n	800bad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	807b      	strh	r3, [r7, #2]
 800baec:	4613      	mov	r3, r2
 800baee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800baf0:	787b      	ldrb	r3, [r7, #1]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800baf6:	887a      	ldrh	r2, [r7, #2]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bafc:	e003      	b.n	800bb06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bafe:	887b      	ldrh	r3, [r7, #2]
 800bb00:	041a      	lsls	r2, r3, #16
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	619a      	str	r2, [r3, #24]
}
 800bb06:	bf00      	nop
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
	...

0800bb14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bb1e:	4b08      	ldr	r3, [pc, #32]	@ (800bb40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb20:	695a      	ldr	r2, [r3, #20]
 800bb22:	88fb      	ldrh	r3, [r7, #6]
 800bb24:	4013      	ands	r3, r2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d006      	beq.n	800bb38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bb2a:	4a05      	ldr	r2, [pc, #20]	@ (800bb40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bb2c:	88fb      	ldrh	r3, [r7, #6]
 800bb2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bb30:	88fb      	ldrh	r3, [r7, #6]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f806 	bl	800bb44 <HAL_GPIO_EXTI_Callback>
  }
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	40013c00 	.word	0x40013c00

0800bb44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
	...

0800bb5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e12b      	b.n	800bdc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7fd ff8c 	bl	8009aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2224      	movs	r2, #36	@ 0x24
 800bb8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f022 0201 	bic.w	r2, r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bbae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bbbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bbc0:	f003 fa4a 	bl	800f058 <HAL_RCC_GetPCLK1Freq>
 800bbc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	4a81      	ldr	r2, [pc, #516]	@ (800bdd0 <HAL_I2C_Init+0x274>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d807      	bhi.n	800bbe0 <HAL_I2C_Init+0x84>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a80      	ldr	r2, [pc, #512]	@ (800bdd4 <HAL_I2C_Init+0x278>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	bf94      	ite	ls
 800bbd8:	2301      	movls	r3, #1
 800bbda:	2300      	movhi	r3, #0
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	e006      	b.n	800bbee <HAL_I2C_Init+0x92>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4a7d      	ldr	r2, [pc, #500]	@ (800bdd8 <HAL_I2C_Init+0x27c>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	bf94      	ite	ls
 800bbe8:	2301      	movls	r3, #1
 800bbea:	2300      	movhi	r3, #0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e0e7      	b.n	800bdc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4a78      	ldr	r2, [pc, #480]	@ (800bddc <HAL_I2C_Init+0x280>)
 800bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfe:	0c9b      	lsrs	r3, r3, #18
 800bc00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	4a6a      	ldr	r2, [pc, #424]	@ (800bdd0 <HAL_I2C_Init+0x274>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d802      	bhi.n	800bc30 <HAL_I2C_Init+0xd4>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	e009      	b.n	800bc44 <HAL_I2C_Init+0xe8>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
 800bc3a:	4a69      	ldr	r2, [pc, #420]	@ (800bde0 <HAL_I2C_Init+0x284>)
 800bc3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc40:	099b      	lsrs	r3, r3, #6
 800bc42:	3301      	adds	r3, #1
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	6812      	ldr	r2, [r2, #0]
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800bc56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	495c      	ldr	r1, [pc, #368]	@ (800bdd0 <HAL_I2C_Init+0x274>)
 800bc60:	428b      	cmp	r3, r1
 800bc62:	d819      	bhi.n	800bc98 <HAL_I2C_Init+0x13c>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	1e59      	subs	r1, r3, #1
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc72:	1c59      	adds	r1, r3, #1
 800bc74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bc78:	400b      	ands	r3, r1
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00a      	beq.n	800bc94 <HAL_I2C_Init+0x138>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1e59      	subs	r1, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc92:	e051      	b.n	800bd38 <HAL_I2C_Init+0x1dc>
 800bc94:	2304      	movs	r3, #4
 800bc96:	e04f      	b.n	800bd38 <HAL_I2C_Init+0x1dc>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d111      	bne.n	800bcc4 <HAL_I2C_Init+0x168>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	1e58      	subs	r0, r3, #1
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6859      	ldr	r1, [r3, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	440b      	add	r3, r1
 800bcae:	fbb0 f3f3 	udiv	r3, r0, r3
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bf0c      	ite	eq
 800bcbc:	2301      	moveq	r3, #1
 800bcbe:	2300      	movne	r3, #0
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	e012      	b.n	800bcea <HAL_I2C_Init+0x18e>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	1e58      	subs	r0, r3, #1
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6859      	ldr	r1, [r3, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	0099      	lsls	r1, r3, #2
 800bcd4:	440b      	add	r3, r1
 800bcd6:	fbb0 f3f3 	udiv	r3, r0, r3
 800bcda:	3301      	adds	r3, #1
 800bcdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	bf0c      	ite	eq
 800bce4:	2301      	moveq	r3, #1
 800bce6:	2300      	movne	r3, #0
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <HAL_I2C_Init+0x196>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e022      	b.n	800bd38 <HAL_I2C_Init+0x1dc>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10e      	bne.n	800bd18 <HAL_I2C_Init+0x1bc>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	1e58      	subs	r0, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6859      	ldr	r1, [r3, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	440b      	add	r3, r1
 800bd08:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd16:	e00f      	b.n	800bd38 <HAL_I2C_Init+0x1dc>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	1e58      	subs	r0, r3, #1
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6859      	ldr	r1, [r3, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	440b      	add	r3, r1
 800bd26:	0099      	lsls	r1, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	fbb0 f3f3 	udiv	r3, r0, r3
 800bd2e:	3301      	adds	r3, #1
 800bd30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	6809      	ldr	r1, [r1, #0]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	69da      	ldr	r2, [r3, #28]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	431a      	orrs	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800bd66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	6911      	ldr	r1, [r2, #16]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	68d2      	ldr	r2, [r2, #12]
 800bd72:	4311      	orrs	r1, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	6812      	ldr	r2, [r2, #0]
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	695a      	ldr	r2, [r3, #20]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f042 0201 	orr.w	r2, r2, #1
 800bda6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	000186a0 	.word	0x000186a0
 800bdd4:	001e847f 	.word	0x001e847f
 800bdd8:	003d08ff 	.word	0x003d08ff
 800bddc:	431bde83 	.word	0x431bde83
 800bde0:	10624dd3 	.word	0x10624dd3

0800bde4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdf6:	2b80      	cmp	r3, #128	@ 0x80
 800bdf8:	d103      	bne.n	800be02 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2200      	movs	r2, #0
 800be00:	611a      	str	r2, [r3, #16]
  }
}
 800be02:	bf00      	nop
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
	...

0800be10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af02      	add	r7, sp, #8
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	607a      	str	r2, [r7, #4]
 800be1a:	461a      	mov	r2, r3
 800be1c:	460b      	mov	r3, r1
 800be1e:	817b      	strh	r3, [r7, #10]
 800be20:	4613      	mov	r3, r2
 800be22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800be24:	f7fe fde6 	bl	800a9f4 <HAL_GetTick>
 800be28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b20      	cmp	r3, #32
 800be34:	f040 80e0 	bne.w	800bff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	2319      	movs	r3, #25
 800be3e:	2201      	movs	r2, #1
 800be40:	4970      	ldr	r1, [pc, #448]	@ (800c004 <HAL_I2C_Master_Transmit+0x1f4>)
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f002 fa14 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800be4e:	2302      	movs	r3, #2
 800be50:	e0d3      	b.n	800bffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d101      	bne.n	800be60 <HAL_I2C_Master_Transmit+0x50>
 800be5c:	2302      	movs	r3, #2
 800be5e:	e0cc      	b.n	800bffa <HAL_I2C_Master_Transmit+0x1ea>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b01      	cmp	r3, #1
 800be74:	d007      	beq.n	800be86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f042 0201 	orr.w	r2, r2, #1
 800be84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2221      	movs	r2, #33	@ 0x21
 800be9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2210      	movs	r2, #16
 800bea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	893a      	ldrh	r2, [r7, #8]
 800beb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4a50      	ldr	r2, [pc, #320]	@ (800c008 <HAL_I2C_Master_Transmit+0x1f8>)
 800bec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bec8:	8979      	ldrh	r1, [r7, #10]
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	6a3a      	ldr	r2, [r7, #32]
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f001 ffd6 	bl	800de80 <I2C_MasterRequestWrite>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e08d      	b.n	800bffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bede:	2300      	movs	r3, #0
 800bee0:	613b      	str	r3, [r7, #16]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	613b      	str	r3, [r7, #16]
 800bef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bef4:	e066      	b.n	800bfc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	6a39      	ldr	r1, [r7, #32]
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f002 fad2 	bl	800e4a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00d      	beq.n	800bf22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	d107      	bne.n	800bf1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e06b      	b.n	800bffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf26:	781a      	ldrb	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b04      	cmp	r3, #4
 800bf5e:	d11b      	bne.n	800bf98 <HAL_I2C_Master_Transmit+0x188>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d017      	beq.n	800bf98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6c:	781a      	ldrb	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	3b01      	subs	r3, #1
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf90:	3b01      	subs	r3, #1
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	6a39      	ldr	r1, [r7, #32]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f002 fac9 	bl	800e534 <I2C_WaitOnBTFFlagUntilTimeout>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00d      	beq.n	800bfc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d107      	bne.n	800bfc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e01a      	b.n	800bffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d194      	bne.n	800bef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	e000      	b.n	800bffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bff8:	2302      	movs	r3, #2
  }
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3718      	adds	r7, #24
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	00100002 	.word	0x00100002
 800c008:	ffff0000 	.word	0xffff0000

0800c00c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08c      	sub	sp, #48	@ 0x30
 800c010:	af02      	add	r7, sp, #8
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	607a      	str	r2, [r7, #4]
 800c016:	461a      	mov	r2, r3
 800c018:	460b      	mov	r3, r1
 800c01a:	817b      	strh	r3, [r7, #10]
 800c01c:	4613      	mov	r3, r2
 800c01e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c020:	f7fe fce8 	bl	800a9f4 <HAL_GetTick>
 800c024:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b20      	cmp	r3, #32
 800c030:	f040 8217 	bne.w	800c462 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	2319      	movs	r3, #25
 800c03a:	2201      	movs	r2, #1
 800c03c:	497c      	ldr	r1, [pc, #496]	@ (800c230 <HAL_I2C_Master_Receive+0x224>)
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f002 f916 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c04a:	2302      	movs	r3, #2
 800c04c:	e20a      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c054:	2b01      	cmp	r3, #1
 800c056:	d101      	bne.n	800c05c <HAL_I2C_Master_Receive+0x50>
 800c058:	2302      	movs	r3, #2
 800c05a:	e203      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d007      	beq.n	800c082 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f042 0201 	orr.w	r2, r2, #1
 800c080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2222      	movs	r2, #34	@ 0x22
 800c096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2210      	movs	r2, #16
 800c09e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	893a      	ldrh	r2, [r7, #8]
 800c0b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4a5c      	ldr	r2, [pc, #368]	@ (800c234 <HAL_I2C_Master_Receive+0x228>)
 800c0c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c0c4:	8979      	ldrh	r1, [r7, #10]
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f001 ff5a 	bl	800df84 <I2C_MasterRequestRead>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e1c4      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d113      	bne.n	800c10a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	623b      	str	r3, [r7, #32]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	623b      	str	r3, [r7, #32]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	623b      	str	r3, [r7, #32]
 800c0f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	e198      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d11b      	bne.n	800c14a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c122:	2300      	movs	r3, #0
 800c124:	61fb      	str	r3, [r7, #28]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	61fb      	str	r3, [r7, #28]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	61fb      	str	r3, [r7, #28]
 800c136:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	e178      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d11b      	bne.n	800c18a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c160:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c172:	2300      	movs	r3, #0
 800c174:	61bb      	str	r3, [r7, #24]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	61bb      	str	r3, [r7, #24]
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	e158      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c198:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	617b      	str	r3, [r7, #20]
 800c1ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c1b0:	e144      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	f200 80f1 	bhi.w	800c39e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d123      	bne.n	800c20c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f002 fa2d 	bl	800e628 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e145      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c200:	b29b      	uxth	r3, r3
 800c202:	3b01      	subs	r3, #1
 800c204:	b29a      	uxth	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c20a:	e117      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c210:	2b02      	cmp	r3, #2
 800c212:	d14e      	bne.n	800c2b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21a:	2200      	movs	r2, #0
 800c21c:	4906      	ldr	r1, [pc, #24]	@ (800c238 <HAL_I2C_Master_Receive+0x22c>)
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f002 f826 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e11a      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
 800c22e:	bf00      	nop
 800c230:	00100002 	.word	0x00100002
 800c234:	ffff0000 	.word	0xffff0000
 800c238:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c24a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c268:	3b01      	subs	r3, #1
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c274:	b29b      	uxth	r3, r3
 800c276:	3b01      	subs	r3, #1
 800c278:	b29a      	uxth	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	691a      	ldr	r2, [r3, #16]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c288:	b2d2      	uxtb	r2, r2
 800c28a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c2b0:	e0c4      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	496c      	ldr	r1, [pc, #432]	@ (800c46c <HAL_I2C_Master_Receive+0x460>)
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f001 ffd7 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e0cb      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	691a      	ldr	r2, [r3, #16]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e6:	b2d2      	uxtb	r2, r2
 800c2e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c304:	b29b      	uxth	r3, r3
 800c306:	3b01      	subs	r3, #1
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c314:	2200      	movs	r2, #0
 800c316:	4955      	ldr	r1, [pc, #340]	@ (800c46c <HAL_I2C_Master_Receive+0x460>)
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f001 ffa9 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	e09d      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	691a      	ldr	r2, [r3, #16]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c342:	b2d2      	uxtb	r2, r2
 800c344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c354:	3b01      	subs	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c360:	b29b      	uxth	r3, r3
 800c362:	3b01      	subs	r3, #1
 800c364:	b29a      	uxth	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	691a      	ldr	r2, [r3, #16]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c386:	3b01      	subs	r3, #1
 800c388:	b29a      	uxth	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c392:	b29b      	uxth	r3, r3
 800c394:	3b01      	subs	r3, #1
 800c396:	b29a      	uxth	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c39c:	e04e      	b.n	800c43c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c39e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f002 f940 	bl	800e628 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d001      	beq.n	800c3b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e058      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	691a      	ldr	r2, [r3, #16]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3bc:	b2d2      	uxtb	r2, r2
 800c3be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	f003 0304 	and.w	r3, r3, #4
 800c3ee:	2b04      	cmp	r3, #4
 800c3f0:	d124      	bne.n	800c43c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d107      	bne.n	800c40a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c408:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	691a      	ldr	r2, [r3, #16]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c414:	b2d2      	uxtb	r2, r2
 800c416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c426:	3b01      	subs	r3, #1
 800c428:	b29a      	uxth	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c432:	b29b      	uxth	r3, r3
 800c434:	3b01      	subs	r3, #1
 800c436:	b29a      	uxth	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c440:	2b00      	cmp	r3, #0
 800c442:	f47f aeb6 	bne.w	800c1b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2220      	movs	r2, #32
 800c44a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	e000      	b.n	800c464 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800c462:	2302      	movs	r3, #2
  }
}
 800c464:	4618      	mov	r0, r3
 800c466:	3728      	adds	r7, #40	@ 0x28
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	00010004 	.word	0x00010004

0800c470 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08a      	sub	sp, #40	@ 0x28
 800c474:	af02      	add	r7, sp, #8
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	460b      	mov	r3, r1
 800c47e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800c480:	f7fe fab8 	bl	800a9f4 <HAL_GetTick>
 800c484:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800c486:	2300      	movs	r3, #0
 800c488:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b20      	cmp	r3, #32
 800c494:	f040 8111 	bne.w	800c6ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	2319      	movs	r3, #25
 800c49e:	2201      	movs	r2, #1
 800c4a0:	4988      	ldr	r1, [pc, #544]	@ (800c6c4 <HAL_I2C_IsDeviceReady+0x254>)
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f001 fee4 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e104      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d101      	bne.n	800c4c0 <HAL_I2C_IsDeviceReady+0x50>
 800c4bc:	2302      	movs	r3, #2
 800c4be:	e0fd      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d007      	beq.n	800c4e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0201 	orr.w	r2, r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c4f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2224      	movs	r2, #36	@ 0x24
 800c4fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	4a70      	ldr	r2, [pc, #448]	@ (800c6c8 <HAL_I2C_IsDeviceReady+0x258>)
 800c508:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c518:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2200      	movs	r2, #0
 800c522:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f001 fea2 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00d      	beq.n	800c54e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c53c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c540:	d103      	bne.n	800c54a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c548:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e0b6      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c54e:	897b      	ldrh	r3, [r7, #10]
 800c550:	b2db      	uxtb	r3, r3
 800c552:	461a      	mov	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c55c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800c55e:	f7fe fa49 	bl	800a9f4 <HAL_GetTick>
 800c562:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b02      	cmp	r3, #2
 800c570:	bf0c      	ite	eq
 800c572:	2301      	moveq	r3, #1
 800c574:	2300      	movne	r3, #0
 800c576:	b2db      	uxtb	r3, r3
 800c578:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	695b      	ldr	r3, [r3, #20]
 800c580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c588:	bf0c      	ite	eq
 800c58a:	2301      	moveq	r3, #1
 800c58c:	2300      	movne	r3, #0
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800c592:	e025      	b.n	800c5e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c594:	f7fe fa2e 	bl	800a9f4 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d302      	bcc.n	800c5aa <HAL_I2C_IsDeviceReady+0x13a>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	22a0      	movs	r2, #160	@ 0xa0
 800c5ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	bf0c      	ite	eq
 800c5c0:	2301      	moveq	r3, #1
 800c5c2:	2300      	movne	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5d6:	bf0c      	ite	eq
 800c5d8:	2301      	moveq	r3, #1
 800c5da:	2300      	movne	r3, #0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2ba0      	cmp	r3, #160	@ 0xa0
 800c5ea:	d005      	beq.n	800c5f8 <HAL_I2C_IsDeviceReady+0x188>
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d102      	bne.n	800c5f8 <HAL_I2C_IsDeviceReady+0x188>
 800c5f2:	7dbb      	ldrb	r3, [r7, #22]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d0cd      	beq.n	800c594 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d129      	bne.n	800c662 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c61c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c61e:	2300      	movs	r3, #0
 800c620:	613b      	str	r3, [r7, #16]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	695b      	ldr	r3, [r3, #20]
 800c628:	613b      	str	r3, [r7, #16]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	613b      	str	r3, [r7, #16]
 800c632:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	2319      	movs	r3, #25
 800c63a:	2201      	movs	r2, #1
 800c63c:	4921      	ldr	r1, [pc, #132]	@ (800c6c4 <HAL_I2C_IsDeviceReady+0x254>)
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f001 fe16 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d001      	beq.n	800c64e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e036      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2220      	movs	r2, #32
 800c652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	e02c      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c670:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c67a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	2319      	movs	r3, #25
 800c682:	2201      	movs	r2, #1
 800c684:	490f      	ldr	r1, [pc, #60]	@ (800c6c4 <HAL_I2C_IsDeviceReady+0x254>)
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f001 fdf2 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e012      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	3301      	adds	r3, #1
 800c69a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800c69c:	69ba      	ldr	r2, [r7, #24]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	f4ff af32 	bcc.w	800c50a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e000      	b.n	800c6bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800c6ba:	2302      	movs	r3, #2
  }
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3720      	adds	r7, #32
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	00100002 	.word	0x00100002
 800c6c8:	ffff0000 	.word	0xffff0000

0800c6cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c6ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	2b10      	cmp	r3, #16
 800c6fa:	d003      	beq.n	800c704 <HAL_I2C_EV_IRQHandler+0x38>
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	2b40      	cmp	r3, #64	@ 0x40
 800c700:	f040 80b1 	bne.w	800c866 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10d      	bne.n	800c73a <HAL_I2C_EV_IRQHandler+0x6e>
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c724:	d003      	beq.n	800c72e <HAL_I2C_EV_IRQHandler+0x62>
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c72c:	d101      	bne.n	800c732 <HAL_I2C_EV_IRQHandler+0x66>
 800c72e:	2301      	movs	r3, #1
 800c730:	e000      	b.n	800c734 <HAL_I2C_EV_IRQHandler+0x68>
 800c732:	2300      	movs	r3, #0
 800c734:	2b01      	cmp	r3, #1
 800c736:	f000 8114 	beq.w	800c962 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00b      	beq.n	800c75c <HAL_I2C_EV_IRQHandler+0x90>
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d006      	beq.n	800c75c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f001 fff6 	bl	800e740 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fd76 	bl	800d246 <I2C_Master_SB>
 800c75a:	e083      	b.n	800c864 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b00      	cmp	r3, #0
 800c764:	d008      	beq.n	800c778 <HAL_I2C_EV_IRQHandler+0xac>
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fdee 	bl	800d352 <I2C_Master_ADD10>
 800c776:	e075      	b.n	800c864 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	f003 0302 	and.w	r3, r3, #2
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d008      	beq.n	800c794 <HAL_I2C_EV_IRQHandler+0xc8>
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fe0a 	bl	800d3a6 <I2C_Master_ADDR>
 800c792:	e067      	b.n	800c864 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	f003 0304 	and.w	r3, r3, #4
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d036      	beq.n	800c80c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7ac:	f000 80db 	beq.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00d      	beq.n	800c7d6 <HAL_I2C_EV_IRQHandler+0x10a>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d008      	beq.n	800c7d6 <HAL_I2C_EV_IRQHandler+0x10a>
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f003 0304 	and.w	r3, r3, #4
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d103      	bne.n	800c7d6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f9d6 	bl	800cb80 <I2C_MasterTransmit_TXE>
 800c7d4:	e046      	b.n	800c864 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	f003 0304 	and.w	r3, r3, #4
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 80c2 	beq.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 80bc 	beq.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c7ee:	7bbb      	ldrb	r3, [r7, #14]
 800c7f0:	2b21      	cmp	r3, #33	@ 0x21
 800c7f2:	d103      	bne.n	800c7fc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fa5f 	bl	800ccb8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c7fa:	e0b4      	b.n	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	2b40      	cmp	r3, #64	@ 0x40
 800c800:	f040 80b1 	bne.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 facd 	bl	800cda4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c80a:	e0ac      	b.n	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c81a:	f000 80a4 	beq.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00d      	beq.n	800c844 <HAL_I2C_EV_IRQHandler+0x178>
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d008      	beq.n	800c844 <HAL_I2C_EV_IRQHandler+0x178>
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	f003 0304 	and.w	r3, r3, #4
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d103      	bne.n	800c844 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fb49 	bl	800ced4 <I2C_MasterReceive_RXNE>
 800c842:	e00f      	b.n	800c864 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	f003 0304 	and.w	r3, r3, #4
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 808b 	beq.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 8085 	beq.w	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fc01 	bl	800d064 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c862:	e080      	b.n	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
 800c864:	e07f      	b.n	800c966 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d004      	beq.n	800c878 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	61fb      	str	r3, [r7, #28]
 800c876:	e007      	b.n	800c888 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f003 0302 	and.w	r3, r3, #2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d011      	beq.n	800c8b6 <HAL_I2C_EV_IRQHandler+0x1ea>
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00c      	beq.n	800c8b6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c8ac:	69b9      	ldr	r1, [r7, #24]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 ffc8 	bl	800d844 <I2C_Slave_ADDR>
 800c8b4:	e05a      	b.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d008      	beq.n	800c8d2 <HAL_I2C_EV_IRQHandler+0x206>
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d003      	beq.n	800c8d2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f001 f802 	bl	800d8d4 <I2C_Slave_STOPF>
 800c8d0:	e04c      	b.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c8d2:	7bbb      	ldrb	r3, [r7, #14]
 800c8d4:	2b21      	cmp	r3, #33	@ 0x21
 800c8d6:	d002      	beq.n	800c8de <HAL_I2C_EV_IRQHandler+0x212>
 800c8d8:	7bbb      	ldrb	r3, [r7, #14]
 800c8da:	2b29      	cmp	r3, #41	@ 0x29
 800c8dc:	d120      	bne.n	800c920 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00d      	beq.n	800c904 <HAL_I2C_EV_IRQHandler+0x238>
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d008      	beq.n	800c904 <HAL_I2C_EV_IRQHandler+0x238>
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	f003 0304 	and.w	r3, r3, #4
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fee3 	bl	800d6c8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c902:	e032      	b.n	800c96a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f003 0304 	and.w	r3, r3, #4
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d02d      	beq.n	800c96a <HAL_I2C_EV_IRQHandler+0x29e>
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c914:	2b00      	cmp	r3, #0
 800c916:	d028      	beq.n	800c96a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 ff12 	bl	800d742 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c91e:	e024      	b.n	800c96a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00d      	beq.n	800c946 <HAL_I2C_EV_IRQHandler+0x27a>
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c930:	2b00      	cmp	r3, #0
 800c932:	d008      	beq.n	800c946 <HAL_I2C_EV_IRQHandler+0x27a>
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	f003 0304 	and.w	r3, r3, #4
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d103      	bne.n	800c946 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 ff20 	bl	800d784 <I2C_SlaveReceive_RXNE>
 800c944:	e012      	b.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	f003 0304 	and.w	r3, r3, #4
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00d      	beq.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c956:	2b00      	cmp	r3, #0
 800c958:	d008      	beq.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 ff50 	bl	800d800 <I2C_SlaveReceive_BTF>
 800c960:	e004      	b.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800c962:	bf00      	nop
 800c964:	e002      	b.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c966:	bf00      	nop
 800c968:	e000      	b.n	800c96c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c96a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c96c:	3720      	adds	r7, #32
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b08a      	sub	sp, #40	@ 0x28
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c98a:	2300      	movs	r3, #0
 800c98c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c994:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00d      	beq.n	800c9bc <HAL_I2C_ER_IRQHandler+0x4a>
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d008      	beq.n	800c9bc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ac:	f043 0301 	orr.w	r3, r3, #1
 800c9b0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00d      	beq.n	800c9e2 <HAL_I2C_ER_IRQHandler+0x70>
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d008      	beq.n	800c9e2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	f043 0302 	orr.w	r3, r3, #2
 800c9d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800c9e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d03e      	beq.n	800ca6a <HAL_I2C_ER_IRQHandler+0xf8>
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d039      	beq.n	800ca6a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800c9f6:	7efb      	ldrb	r3, [r7, #27]
 800c9f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca08:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca0e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ca10:	7ebb      	ldrb	r3, [r7, #26]
 800ca12:	2b20      	cmp	r3, #32
 800ca14:	d112      	bne.n	800ca3c <HAL_I2C_ER_IRQHandler+0xca>
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10f      	bne.n	800ca3c <HAL_I2C_ER_IRQHandler+0xca>
 800ca1c:	7cfb      	ldrb	r3, [r7, #19]
 800ca1e:	2b21      	cmp	r3, #33	@ 0x21
 800ca20:	d008      	beq.n	800ca34 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ca22:	7cfb      	ldrb	r3, [r7, #19]
 800ca24:	2b29      	cmp	r3, #41	@ 0x29
 800ca26:	d005      	beq.n	800ca34 <HAL_I2C_ER_IRQHandler+0xc2>
 800ca28:	7cfb      	ldrb	r3, [r7, #19]
 800ca2a:	2b28      	cmp	r3, #40	@ 0x28
 800ca2c:	d106      	bne.n	800ca3c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b21      	cmp	r3, #33	@ 0x21
 800ca32:	d103      	bne.n	800ca3c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 f87d 	bl	800db34 <I2C_Slave_AF>
 800ca3a:	e016      	b.n	800ca6a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ca44:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	f043 0304 	orr.w	r3, r3, #4
 800ca4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ca4e:	7efb      	ldrb	r3, [r7, #27]
 800ca50:	2b10      	cmp	r3, #16
 800ca52:	d002      	beq.n	800ca5a <HAL_I2C_ER_IRQHandler+0xe8>
 800ca54:	7efb      	ldrb	r3, [r7, #27]
 800ca56:	2b40      	cmp	r3, #64	@ 0x40
 800ca58:	d107      	bne.n	800ca6a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca68:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ca6a:	6a3b      	ldr	r3, [r7, #32]
 800ca6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00d      	beq.n	800ca90 <HAL_I2C_ER_IRQHandler+0x11e>
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d008      	beq.n	800ca90 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca80:	f043 0308 	orr.w	r3, r3, #8
 800ca84:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800ca8e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ca90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d008      	beq.n	800caa8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 f8ba 	bl	800dc1c <I2C_ITError>
  }
}
 800caa8:	bf00      	nop
 800caaa:	3728      	adds	r7, #40	@ 0x28
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800cab8:	bf00      	nop
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cacc:	bf00      	nop
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr

0800caec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	70fb      	strb	r3, [r7, #3]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cb96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d150      	bne.n	800cc48 <I2C_MasterTransmit_TXE+0xc8>
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	2b21      	cmp	r3, #33	@ 0x21
 800cbaa:	d14d      	bne.n	800cc48 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	2b08      	cmp	r3, #8
 800cbb0:	d01d      	beq.n	800cbee <I2C_MasterTransmit_TXE+0x6e>
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b20      	cmp	r3, #32
 800cbb6:	d01a      	beq.n	800cbee <I2C_MasterTransmit_TXE+0x6e>
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cbbe:	d016      	beq.n	800cbee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cbce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2211      	movs	r2, #17
 800cbd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2220      	movs	r2, #32
 800cbe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff ff62 	bl	800cab0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cbec:	e060      	b.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cbfc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc0c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	2b40      	cmp	r3, #64	@ 0x40
 800cc26:	d107      	bne.n	800cc38 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff ff7d 	bl	800cb30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cc36:	e03b      	b.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7ff ff35 	bl	800cab0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cc46:	e033      	b.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	2b21      	cmp	r3, #33	@ 0x21
 800cc4c:	d005      	beq.n	800cc5a <I2C_MasterTransmit_TXE+0xda>
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	2b40      	cmp	r3, #64	@ 0x40
 800cc52:	d12d      	bne.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	2b22      	cmp	r3, #34	@ 0x22
 800cc58:	d12a      	bne.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d108      	bne.n	800cc76 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc72:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800cc74:	e01c      	b.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b40      	cmp	r3, #64	@ 0x40
 800cc80:	d103      	bne.n	800cc8a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f88e 	bl	800cda4 <I2C_MemoryTransmit_TXE_BTF>
}
 800cc88:	e012      	b.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8e:	781a      	ldrb	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ccae:	e7ff      	b.n	800ccb0 <I2C_MasterTransmit_TXE+0x130>
 800ccb0:	bf00      	nop
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b21      	cmp	r3, #33	@ 0x21
 800ccd0:	d164      	bne.n	800cd9c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d012      	beq.n	800cd02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce0:	781a      	ldrb	r2, [r3, #0]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800cd00:	e04c      	b.n	800cd9c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b08      	cmp	r3, #8
 800cd06:	d01d      	beq.n	800cd44 <I2C_MasterTransmit_BTF+0x8c>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b20      	cmp	r3, #32
 800cd0c:	d01a      	beq.n	800cd44 <I2C_MasterTransmit_BTF+0x8c>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cd14:	d016      	beq.n	800cd44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cd24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2211      	movs	r2, #17
 800cd2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2220      	movs	r2, #32
 800cd38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff feb7 	bl	800cab0 <HAL_I2C_MasterTxCpltCallback>
}
 800cd42:	e02b      	b.n	800cd9c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cd52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b40      	cmp	r3, #64	@ 0x40
 800cd7c:	d107      	bne.n	800cd8e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fed2 	bl	800cb30 <HAL_I2C_MemTxCpltCallback>
}
 800cd8c:	e006      	b.n	800cd9c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff fe8a 	bl	800cab0 <HAL_I2C_MasterTxCpltCallback>
}
 800cd9c:	bf00      	nop
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d11d      	bne.n	800cdf8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d10b      	bne.n	800cddc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdd4:	1c9a      	adds	r2, r3, #2
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800cdda:	e077      	b.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	121b      	asrs	r3, r3, #8
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800cdf6:	e069      	b.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d10b      	bne.n	800ce18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ce16:	e059      	b.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d152      	bne.n	800cec6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	2b22      	cmp	r3, #34	@ 0x22
 800ce24:	d10d      	bne.n	800ce42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ce34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce3a:	1c5a      	adds	r2, r3, #1
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ce40:	e044      	b.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d015      	beq.n	800ce78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800ce4c:	7bfb      	ldrb	r3, [r7, #15]
 800ce4e:	2b21      	cmp	r3, #33	@ 0x21
 800ce50:	d112      	bne.n	800ce78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce56:	781a      	ldrb	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce62:	1c5a      	adds	r2, r3, #1
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	3b01      	subs	r3, #1
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ce76:	e029      	b.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d124      	bne.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
 800ce84:	2b21      	cmp	r3, #33	@ 0x21
 800ce86:	d121      	bne.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ce96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cea6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2220      	movs	r2, #32
 800ceb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff fe36 	bl	800cb30 <HAL_I2C_MemTxCpltCallback>
}
 800cec4:	e002      	b.n	800cecc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7fe ff8c 	bl	800bde4 <I2C_Flush_DR>
}
 800cecc:	bf00      	nop
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b22      	cmp	r3, #34	@ 0x22
 800cee6:	f040 80b9 	bne.w	800d05c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceee:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d921      	bls.n	800cf42 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	691a      	ldr	r2, [r3, #16]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	f040 8096 	bne.w	800d05c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf3e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800cf40:	e08c      	b.n	800d05c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d07f      	beq.n	800d04a <I2C_MasterReceive_RXNE+0x176>
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d002      	beq.n	800cf56 <I2C_MasterReceive_RXNE+0x82>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d179      	bne.n	800d04a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f001 fb34 	bl	800e5c4 <I2C_WaitOnSTOPRequestThroughIT>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d14c      	bne.n	800cffc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf70:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	685a      	ldr	r2, [r3, #4]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cf80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	691a      	ldr	r2, [r3, #16]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf8c:	b2d2      	uxtb	r2, r2
 800cf8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2220      	movs	r2, #32
 800cfac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b40      	cmp	r3, #64	@ 0x40
 800cfba:	d10a      	bne.n	800cfd2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fdba 	bl	800cb44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800cfd0:	e044      	b.n	800d05c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b08      	cmp	r3, #8
 800cfde:	d002      	beq.n	800cfe6 <I2C_MasterReceive_RXNE+0x112>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2b20      	cmp	r3, #32
 800cfe4:	d103      	bne.n	800cfee <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	631a      	str	r2, [r3, #48]	@ 0x30
 800cfec:	e002      	b.n	800cff4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2212      	movs	r2, #18
 800cff2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff fd65 	bl	800cac4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800cffa:	e02f      	b.n	800d05c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d00a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	691a      	ldr	r2, [r3, #16]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d016:	b2d2      	uxtb	r2, r2
 800d018:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01e:	1c5a      	adds	r2, r3, #1
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d028:	b29b      	uxth	r3, r3
 800d02a:	3b01      	subs	r3, #1
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2220      	movs	r2, #32
 800d036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f7ff fd88 	bl	800cb58 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d048:	e008      	b.n	800d05c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d058:	605a      	str	r2, [r3, #4]
}
 800d05a:	e7ff      	b.n	800d05c <I2C_MasterReceive_RXNE+0x188>
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d070:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d076:	b29b      	uxth	r3, r3
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d11b      	bne.n	800d0b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	685a      	ldr	r2, [r3, #4]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d08a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	691a      	ldr	r2, [r3, #16]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d096:	b2d2      	uxtb	r2, r2
 800d098:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d0b2:	e0c4      	b.n	800d23e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	2b03      	cmp	r3, #3
 800d0bc:	d129      	bne.n	800d112 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d0cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d00a      	beq.n	800d0ea <I2C_MasterReceive_BTF+0x86>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d007      	beq.n	800d0ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d0e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	691a      	ldr	r2, [r3, #16]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f4:	b2d2      	uxtb	r2, r2
 800d0f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0fc:	1c5a      	adds	r2, r3, #1
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d106:	b29b      	uxth	r3, r3
 800d108:	3b01      	subs	r3, #1
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800d110:	e095      	b.n	800d23e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d116:	b29b      	uxth	r3, r3
 800d118:	2b02      	cmp	r3, #2
 800d11a:	d17d      	bne.n	800d218 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d002      	beq.n	800d128 <I2C_MasterReceive_BTF+0xc4>
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b10      	cmp	r3, #16
 800d126:	d108      	bne.n	800d13a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	e016      	b.n	800d168 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b04      	cmp	r3, #4
 800d13e:	d002      	beq.n	800d146 <I2C_MasterReceive_BTF+0xe2>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b02      	cmp	r3, #2
 800d144:	d108      	bne.n	800d158 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	e007      	b.n	800d168 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d166:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	691a      	ldr	r2, [r3, #16]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d172:	b2d2      	uxtb	r2, r2
 800d174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d184:	b29b      	uxth	r3, r3
 800d186:	3b01      	subs	r3, #1
 800d188:	b29a      	uxth	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	691a      	ldr	r2, [r3, #16]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d198:	b2d2      	uxtb	r2, r2
 800d19a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a0:	1c5a      	adds	r2, r3, #1
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	685a      	ldr	r2, [r3, #4]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d1c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2220      	movs	r2, #32
 800d1c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b40      	cmp	r3, #64	@ 0x40
 800d1d6:	d10a      	bne.n	800d1ee <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff fcac 	bl	800cb44 <HAL_I2C_MemRxCpltCallback>
}
 800d1ec:	e027      	b.n	800d23e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2b08      	cmp	r3, #8
 800d1fa:	d002      	beq.n	800d202 <I2C_MasterReceive_BTF+0x19e>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d103      	bne.n	800d20a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	631a      	str	r2, [r3, #48]	@ 0x30
 800d208:	e002      	b.n	800d210 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2212      	movs	r2, #18
 800d20e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff fc57 	bl	800cac4 <HAL_I2C_MasterRxCpltCallback>
}
 800d216:	e012      	b.n	800d23e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691a      	ldr	r2, [r3, #16]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d234:	b29b      	uxth	r3, r3
 800d236:	3b01      	subs	r3, #1
 800d238:	b29a      	uxth	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d246:	b480      	push	{r7}
 800d248:	b083      	sub	sp, #12
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b40      	cmp	r3, #64	@ 0x40
 800d258:	d117      	bne.n	800d28a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d109      	bne.n	800d276 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d266:	b2db      	uxtb	r3, r3
 800d268:	461a      	mov	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d272:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d274:	e067      	b.n	800d346 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	f043 0301 	orr.w	r3, r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	611a      	str	r2, [r3, #16]
}
 800d288:	e05d      	b.n	800d346 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d292:	d133      	bne.n	800d2fc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b21      	cmp	r3, #33	@ 0x21
 800d29e:	d109      	bne.n	800d2b4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d2b0:	611a      	str	r2, [r3, #16]
 800d2b2:	e008      	b.n	800d2c6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	f043 0301 	orr.w	r3, r3, #1
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <I2C_Master_SB+0x92>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d108      	bne.n	800d2ea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d032      	beq.n	800d346 <I2C_Master_SB+0x100>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d02d      	beq.n	800d346 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d2f8:	605a      	str	r2, [r3, #4]
}
 800d2fa:	e024      	b.n	800d346 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10e      	bne.n	800d322 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d308:	b29b      	uxth	r3, r3
 800d30a:	11db      	asrs	r3, r3, #7
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	f003 0306 	and.w	r3, r3, #6
 800d312:	b2db      	uxtb	r3, r3
 800d314:	f063 030f 	orn	r3, r3, #15
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	611a      	str	r2, [r3, #16]
}
 800d320:	e011      	b.n	800d346 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d326:	2b01      	cmp	r3, #1
 800d328:	d10d      	bne.n	800d346 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d32e:	b29b      	uxth	r3, r3
 800d330:	11db      	asrs	r3, r3, #7
 800d332:	b2db      	uxtb	r3, r3
 800d334:	f003 0306 	and.w	r3, r3, #6
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	f063 030e 	orn	r3, r3, #14
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	611a      	str	r2, [r3, #16]
}
 800d346:	bf00      	nop
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d352:	b480      	push	{r7}
 800d354:	b083      	sub	sp, #12
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d004      	beq.n	800d378 <I2C_Master_ADD10+0x26>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d108      	bne.n	800d38a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00c      	beq.n	800d39a <I2C_Master_ADD10+0x48>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d386:	2b00      	cmp	r3, #0
 800d388:	d007      	beq.n	800d39a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	685a      	ldr	r2, [r3, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d398:	605a      	str	r2, [r3, #4]
  }
}
 800d39a:	bf00      	nop
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b091      	sub	sp, #68	@ 0x44
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d3b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b22      	cmp	r3, #34	@ 0x22
 800d3ce:	f040 8169 	bne.w	800d6a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10f      	bne.n	800d3fa <I2C_Master_ADDR+0x54>
 800d3da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d3de:	2b40      	cmp	r3, #64	@ 0x40
 800d3e0:	d10b      	bne.n	800d3fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f8:	e160      	b.n	800d6bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d11d      	bne.n	800d43e <I2C_Master_ADDR+0x98>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d40a:	d118      	bne.n	800d43e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d40c:	2300      	movs	r3, #0
 800d40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d430:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	651a      	str	r2, [r3, #80]	@ 0x50
 800d43c:	e13e      	b.n	800d6bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d442:	b29b      	uxth	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d113      	bne.n	800d470 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d448:	2300      	movs	r3, #0
 800d44a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	e115      	b.n	800d69c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d474:	b29b      	uxth	r3, r3
 800d476:	2b01      	cmp	r3, #1
 800d478:	f040 808a 	bne.w	800d590 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d482:	d137      	bne.n	800d4f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d492:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d49e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d4a2:	d113      	bne.n	800d4cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ca:	e0e7      	b.n	800d69c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	623b      	str	r3, [r7, #32]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	623b      	str	r3, [r7, #32]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	699b      	ldr	r3, [r3, #24]
 800d4de:	623b      	str	r3, [r7, #32]
 800d4e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	e0d3      	b.n	800d69c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f6:	2b08      	cmp	r3, #8
 800d4f8:	d02e      	beq.n	800d558 <I2C_Master_ADDR+0x1b2>
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fc:	2b20      	cmp	r3, #32
 800d4fe:	d02b      	beq.n	800d558 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800d500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d502:	2b12      	cmp	r3, #18
 800d504:	d102      	bne.n	800d50c <I2C_Master_ADDR+0x166>
 800d506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d125      	bne.n	800d558 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50e:	2b04      	cmp	r3, #4
 800d510:	d00e      	beq.n	800d530 <I2C_Master_ADDR+0x18a>
 800d512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d514:	2b02      	cmp	r3, #2
 800d516:	d00b      	beq.n	800d530 <I2C_Master_ADDR+0x18a>
 800d518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51a:	2b10      	cmp	r3, #16
 800d51c:	d008      	beq.n	800d530 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	e007      	b.n	800d540 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d53e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d540:	2300      	movs	r3, #0
 800d542:	61fb      	str	r3, [r7, #28]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	61fb      	str	r3, [r7, #28]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	61fb      	str	r3, [r7, #28]
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	e0a1      	b.n	800d69c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d566:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d568:	2300      	movs	r3, #0
 800d56a:	61bb      	str	r3, [r7, #24]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	e085      	b.n	800d69c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d594:	b29b      	uxth	r3, r3
 800d596:	2b02      	cmp	r3, #2
 800d598:	d14d      	bne.n	800d636 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59c:	2b04      	cmp	r3, #4
 800d59e:	d016      	beq.n	800d5ce <I2C_Master_ADDR+0x228>
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d013      	beq.n	800d5ce <I2C_Master_ADDR+0x228>
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a8:	2b10      	cmp	r3, #16
 800d5aa:	d010      	beq.n	800d5ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	e007      	b.n	800d5de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d5dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5ec:	d117      	bne.n	800d61e <I2C_Master_ADDR+0x278>
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d5f4:	d00b      	beq.n	800d60e <I2C_Master_ADDR+0x268>
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d008      	beq.n	800d60e <I2C_Master_ADDR+0x268>
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fe:	2b08      	cmp	r3, #8
 800d600:	d005      	beq.n	800d60e <I2C_Master_ADDR+0x268>
 800d602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d604:	2b10      	cmp	r3, #16
 800d606:	d002      	beq.n	800d60e <I2C_Master_ADDR+0x268>
 800d608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60a:	2b20      	cmp	r3, #32
 800d60c:	d107      	bne.n	800d61e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d61c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d61e:	2300      	movs	r3, #0
 800d620:	617b      	str	r3, [r7, #20]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	e032      	b.n	800d69c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d644:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d654:	d117      	bne.n	800d686 <I2C_Master_ADDR+0x2e0>
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d65c:	d00b      	beq.n	800d676 <I2C_Master_ADDR+0x2d0>
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	2b01      	cmp	r3, #1
 800d662:	d008      	beq.n	800d676 <I2C_Master_ADDR+0x2d0>
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	2b08      	cmp	r3, #8
 800d668:	d005      	beq.n	800d676 <I2C_Master_ADDR+0x2d0>
 800d66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66c:	2b10      	cmp	r3, #16
 800d66e:	d002      	beq.n	800d676 <I2C_Master_ADDR+0x2d0>
 800d670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d672:	2b20      	cmp	r3, #32
 800d674:	d107      	bne.n	800d686 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d684:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d686:	2300      	movs	r3, #0
 800d688:	613b      	str	r3, [r7, #16]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	695b      	ldr	r3, [r3, #20]
 800d690:	613b      	str	r3, [r7, #16]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	613b      	str	r3, [r7, #16]
 800d69a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d6a2:	e00b      	b.n	800d6bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	60fb      	str	r3, [r7, #12]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
}
 800d6ba:	e7ff      	b.n	800d6bc <I2C_Master_ADDR+0x316>
 800d6bc:	bf00      	nop
 800d6be:	3744      	adds	r7, #68	@ 0x44
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d6d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d02b      	beq.n	800d73a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e6:	781a      	ldrb	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	3b01      	subs	r3, #1
 800d700:	b29a      	uxth	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d114      	bne.n	800d73a <I2C_SlaveTransmit_TXE+0x72>
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	2b29      	cmp	r3, #41	@ 0x29
 800d714:	d111      	bne.n	800d73a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d724:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2221      	movs	r2, #33	@ 0x21
 800d72a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2228      	movs	r2, #40	@ 0x28
 800d730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff f9cf 	bl	800cad8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d73a:	bf00      	nop
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d74e:	b29b      	uxth	r3, r3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d011      	beq.n	800d778 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d758:	781a      	ldrb	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d764:	1c5a      	adds	r2, r3, #1
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3b01      	subs	r3, #1
 800d772:	b29a      	uxth	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d792:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d798:	b29b      	uxth	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d02c      	beq.n	800d7f8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	691a      	ldr	r2, [r3, #16]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b0:	1c5a      	adds	r2, r3, #1
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d114      	bne.n	800d7f8 <I2C_SlaveReceive_RXNE+0x74>
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
 800d7d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7d2:	d111      	bne.n	800d7f8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685a      	ldr	r2, [r3, #4]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2222      	movs	r2, #34	@ 0x22
 800d7e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2228      	movs	r2, #40	@ 0x28
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff f97a 	bl	800caec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d7f8:	bf00      	nop
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d012      	beq.n	800d838 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	691a      	ldr	r2, [r3, #16]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d81c:	b2d2      	uxtb	r2, r2
 800d81e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d824:	1c5a      	adds	r2, r3, #1
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b01      	subs	r3, #1
 800d832:	b29a      	uxth	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d84e:	2300      	movs	r3, #0
 800d850:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d85e:	2b28      	cmp	r3, #40	@ 0x28
 800d860:	d125      	bne.n	800d8ae <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d870:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	f003 0304 	and.w	r3, r3, #4
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d101      	bne.n	800d880 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d87c:	2301      	movs	r3, #1
 800d87e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d886:	2b00      	cmp	r3, #0
 800d888:	d103      	bne.n	800d892 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	81bb      	strh	r3, [r7, #12]
 800d890:	e002      	b.n	800d898 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d8a0:	89ba      	ldrh	r2, [r7, #12]
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff f92a 	bl	800cb00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d8ac:	e00e      	b.n	800d8cc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60bb      	str	r3, [r7, #8]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	695b      	ldr	r3, [r3, #20]
 800d8b8:	60bb      	str	r3, [r7, #8]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	60bb      	str	r3, [r7, #8]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800d8cc:	bf00      	nop
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	685a      	ldr	r2, [r3, #4]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d8f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	60bb      	str	r3, [r7, #8]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	60bb      	str	r3, [r7, #8]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f042 0201 	orr.w	r2, r2, #1
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d920:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d92c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d930:	d172      	bne.n	800da18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	2b22      	cmp	r3, #34	@ 0x22
 800d936:	d002      	beq.n	800d93e <I2C_Slave_STOPF+0x6a>
 800d938:	7bfb      	ldrb	r3, [r7, #15]
 800d93a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d93c:	d135      	bne.n	800d9aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	b29a      	uxth	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d950:	b29b      	uxth	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d005      	beq.n	800d962 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d95a:	f043 0204 	orr.w	r2, r3, #4
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d970:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d976:	4618      	mov	r0, r3
 800d978:	f7fd fa5e 	bl	800ae38 <HAL_DMA_GetState>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d049      	beq.n	800da16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d986:	4a69      	ldr	r2, [pc, #420]	@ (800db2c <I2C_Slave_STOPF+0x258>)
 800d988:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fd fa30 	bl	800adf4 <HAL_DMA_Abort_IT>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d03d      	beq.n	800da16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d99e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d9a8:	e035      	b.n	800da16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d005      	beq.n	800d9ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9c6:	f043 0204 	orr.w	r2, r3, #4
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d9dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fd fa28 	bl	800ae38 <HAL_DMA_GetState>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d014      	beq.n	800da18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f2:	4a4e      	ldr	r2, [pc, #312]	@ (800db2c <I2C_Slave_STOPF+0x258>)
 800d9f4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fd f9fa 	bl	800adf4 <HAL_DMA_Abort_IT>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800da10:	4610      	mov	r0, r2
 800da12:	4798      	blx	r3
 800da14:	e000      	b.n	800da18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d03e      	beq.n	800daa0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b04      	cmp	r3, #4
 800da2e:	d112      	bne.n	800da56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	691a      	ldr	r2, [r3, #16]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da3a:	b2d2      	uxtb	r2, r2
 800da3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	3b01      	subs	r3, #1
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da60:	2b40      	cmp	r3, #64	@ 0x40
 800da62:	d112      	bne.n	800da8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	691a      	ldr	r2, [r3, #16]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da6e:	b2d2      	uxtb	r2, r2
 800da70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da80:	b29b      	uxth	r3, r3
 800da82:	3b01      	subs	r3, #1
 800da84:	b29a      	uxth	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da8e:	b29b      	uxth	r3, r3
 800da90:	2b00      	cmp	r3, #0
 800da92:	d005      	beq.n	800daa0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da98:	f043 0204 	orr.w	r2, r3, #4
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f8b7 	bl	800dc1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800daae:	e039      	b.n	800db24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dab4:	d109      	bne.n	800daca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2228      	movs	r2, #40	@ 0x28
 800dac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7ff f811 	bl	800caec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b28      	cmp	r3, #40	@ 0x28
 800dad4:	d111      	bne.n	800dafa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a15      	ldr	r2, [pc, #84]	@ (800db30 <I2C_Slave_STOPF+0x25c>)
 800dada:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff f812 	bl	800cb1c <HAL_I2C_ListenCpltCallback>
}
 800daf8:	e014      	b.n	800db24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dafe:	2b22      	cmp	r3, #34	@ 0x22
 800db00:	d002      	beq.n	800db08 <I2C_Slave_STOPF+0x234>
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	2b22      	cmp	r3, #34	@ 0x22
 800db06:	d10d      	bne.n	800db24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2220      	movs	r2, #32
 800db12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f7fe ffe4 	bl	800caec <HAL_I2C_SlaveRxCpltCallback>
}
 800db24:	bf00      	nop
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	0800e121 	.word	0x0800e121
 800db30:	ffff0000 	.word	0xffff0000

0800db34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2b08      	cmp	r3, #8
 800db4e:	d002      	beq.n	800db56 <I2C_Slave_AF+0x22>
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2b20      	cmp	r3, #32
 800db54:	d129      	bne.n	800dbaa <I2C_Slave_AF+0x76>
 800db56:	7bfb      	ldrb	r3, [r7, #15]
 800db58:	2b28      	cmp	r3, #40	@ 0x28
 800db5a:	d126      	bne.n	800dbaa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a2e      	ldr	r2, [pc, #184]	@ (800dc18 <I2C_Slave_AF+0xe4>)
 800db60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800db70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800db7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2220      	movs	r2, #32
 800db96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7fe ffba 	bl	800cb1c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800dba8:	e031      	b.n	800dc0e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	2b21      	cmp	r3, #33	@ 0x21
 800dbae:	d129      	bne.n	800dc04 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a19      	ldr	r2, [pc, #100]	@ (800dc18 <I2C_Slave_AF+0xe4>)
 800dbb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2221      	movs	r2, #33	@ 0x21
 800dbba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2220      	movs	r2, #32
 800dbc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800dbda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dbe4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbf4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7fe f8f4 	bl	800bde4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7fe ff6b 	bl	800cad8 <HAL_I2C_SlaveTxCpltCallback>
}
 800dc02:	e004      	b.n	800dc0e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dc0c:	615a      	str	r2, [r3, #20]
}
 800dc0e:	bf00      	nop
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	ffff0000 	.word	0xffff0000

0800dc1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dc34:	7bbb      	ldrb	r3, [r7, #14]
 800dc36:	2b10      	cmp	r3, #16
 800dc38:	d002      	beq.n	800dc40 <I2C_ITError+0x24>
 800dc3a:	7bbb      	ldrb	r3, [r7, #14]
 800dc3c:	2b40      	cmp	r3, #64	@ 0x40
 800dc3e:	d10a      	bne.n	800dc56 <I2C_ITError+0x3a>
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	2b22      	cmp	r3, #34	@ 0x22
 800dc44:	d107      	bne.n	800dc56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
 800dc58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800dc5c:	2b28      	cmp	r3, #40	@ 0x28
 800dc5e:	d107      	bne.n	800dc70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2228      	movs	r2, #40	@ 0x28
 800dc6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800dc6e:	e015      	b.n	800dc9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc7e:	d00a      	beq.n	800dc96 <I2C_ITError+0x7a>
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	2b60      	cmp	r3, #96	@ 0x60
 800dc84:	d007      	beq.n	800dc96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dcaa:	d162      	bne.n	800dd72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dcba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d020      	beq.n	800dd0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcce:	4a6a      	ldr	r2, [pc, #424]	@ (800de78 <I2C_ITError+0x25c>)
 800dcd0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd f88c 	bl	800adf4 <HAL_DMA_Abort_IT>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 8089 	beq.w	800ddf6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f022 0201 	bic.w	r2, r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dd06:	4610      	mov	r0, r2
 800dd08:	4798      	blx	r3
 800dd0a:	e074      	b.n	800ddf6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd10:	4a59      	ldr	r2, [pc, #356]	@ (800de78 <I2C_ITError+0x25c>)
 800dd12:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fd f86b 	bl	800adf4 <HAL_DMA_Abort_IT>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d068      	beq.n	800ddf6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd2e:	2b40      	cmp	r3, #64	@ 0x40
 800dd30:	d10b      	bne.n	800dd4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	691a      	ldr	r2, [r3, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd3c:	b2d2      	uxtb	r2, r2
 800dd3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd44:	1c5a      	adds	r2, r3, #1
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f022 0201 	bic.w	r2, r2, #1
 800dd58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4798      	blx	r3
 800dd70:	e041      	b.n	800ddf6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	2b60      	cmp	r3, #96	@ 0x60
 800dd7c:	d125      	bne.n	800ddca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2220      	movs	r2, #32
 800dd82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd96:	2b40      	cmp	r3, #64	@ 0x40
 800dd98:	d10b      	bne.n	800ddb2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	691a      	ldr	r2, [r3, #16]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda4:	b2d2      	uxtb	r2, r2
 800dda6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddac:	1c5a      	adds	r2, r3, #1
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f022 0201 	bic.w	r2, r2, #1
 800ddc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7fe fed2 	bl	800cb6c <HAL_I2C_AbortCpltCallback>
 800ddc8:	e015      	b.n	800ddf6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddd4:	2b40      	cmp	r3, #64	@ 0x40
 800ddd6:	d10b      	bne.n	800ddf0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	691a      	ldr	r2, [r3, #16]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7fe feb1 	bl	800cb58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f003 0301 	and.w	r3, r3, #1
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10e      	bne.n	800de24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d109      	bne.n	800de24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800de16:	2b00      	cmp	r3, #0
 800de18:	d104      	bne.n	800de24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800de20:	2b00      	cmp	r3, #0
 800de22:	d007      	beq.n	800de34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800de32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de40:	f003 0304 	and.w	r3, r3, #4
 800de44:	2b04      	cmp	r3, #4
 800de46:	d113      	bne.n	800de70 <I2C_ITError+0x254>
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	2b28      	cmp	r3, #40	@ 0x28
 800de4c:	d110      	bne.n	800de70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a0a      	ldr	r2, [pc, #40]	@ (800de7c <I2C_ITError+0x260>)
 800de52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2220      	movs	r2, #32
 800de5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fe fe56 	bl	800cb1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800de70:	bf00      	nop
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	0800e121 	.word	0x0800e121
 800de7c:	ffff0000 	.word	0xffff0000

0800de80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af02      	add	r7, sp, #8
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	607a      	str	r2, [r7, #4]
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	460b      	mov	r3, r1
 800de8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2b08      	cmp	r3, #8
 800de9a:	d006      	beq.n	800deaa <I2C_MasterRequestWrite+0x2a>
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d003      	beq.n	800deaa <I2C_MasterRequestWrite+0x2a>
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dea8:	d108      	bne.n	800debc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	e00b      	b.n	800ded4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec0:	2b12      	cmp	r3, #18
 800dec2:	d107      	bne.n	800ded4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ded2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 f9c5 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00d      	beq.n	800df08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800def6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800defa:	d103      	bne.n	800df04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e035      	b.n	800df74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df10:	d108      	bne.n	800df24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800df12:	897b      	ldrh	r3, [r7, #10]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	461a      	mov	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800df20:	611a      	str	r2, [r3, #16]
 800df22:	e01b      	b.n	800df5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800df24:	897b      	ldrh	r3, [r7, #10]
 800df26:	11db      	asrs	r3, r3, #7
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	f003 0306 	and.w	r3, r3, #6
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f063 030f 	orn	r3, r3, #15
 800df34:	b2da      	uxtb	r2, r3
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	490e      	ldr	r1, [pc, #56]	@ (800df7c <I2C_MasterRequestWrite+0xfc>)
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f000 fa0e 	bl	800e364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e010      	b.n	800df74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800df52:	897b      	ldrh	r3, [r7, #10]
 800df54:	b2da      	uxtb	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	4907      	ldr	r1, [pc, #28]	@ (800df80 <I2C_MasterRequestWrite+0x100>)
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f000 f9fe 	bl	800e364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	e000      	b.n	800df74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3718      	adds	r7, #24
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	00010008 	.word	0x00010008
 800df80:	00010002 	.word	0x00010002

0800df84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b088      	sub	sp, #32
 800df88:	af02      	add	r7, sp, #8
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	607a      	str	r2, [r7, #4]
 800df8e:	603b      	str	r3, [r7, #0]
 800df90:	460b      	mov	r3, r1
 800df92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dfa8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b08      	cmp	r3, #8
 800dfae:	d006      	beq.n	800dfbe <I2C_MasterRequestRead+0x3a>
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d003      	beq.n	800dfbe <I2C_MasterRequestRead+0x3a>
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dfbc:	d108      	bne.n	800dfd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e00b      	b.n	800dfe8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd4:	2b11      	cmp	r3, #17
 800dfd6:	d107      	bne.n	800dfe8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dfe6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f000 f93b 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00d      	beq.n	800e01c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e00a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e00e:	d103      	bne.n	800e018 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e016:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e018:	2303      	movs	r3, #3
 800e01a:	e079      	b.n	800e110 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e024:	d108      	bne.n	800e038 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e026:	897b      	ldrh	r3, [r7, #10]
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	f043 0301 	orr.w	r3, r3, #1
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	611a      	str	r2, [r3, #16]
 800e036:	e05f      	b.n	800e0f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e038:	897b      	ldrh	r3, [r7, #10]
 800e03a:	11db      	asrs	r3, r3, #7
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	f003 0306 	and.w	r3, r3, #6
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f063 030f 	orn	r3, r3, #15
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	4930      	ldr	r1, [pc, #192]	@ (800e118 <I2C_MasterRequestRead+0x194>)
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f000 f984 	bl	800e364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	e054      	b.n	800e110 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e066:	897b      	ldrh	r3, [r7, #10]
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	4929      	ldr	r1, [pc, #164]	@ (800e11c <I2C_MasterRequestRead+0x198>)
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f000 f974 	bl	800e364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e044      	b.n	800e110 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e086:	2300      	movs	r3, #0
 800e088:	613b      	str	r3, [r7, #16]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	613b      	str	r3, [r7, #16]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	613b      	str	r3, [r7, #16]
 800e09a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e0aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f000 f8d9 	bl	800e270 <I2C_WaitOnFlagUntilTimeout>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00d      	beq.n	800e0e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0d2:	d103      	bne.n	800e0dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e017      	b.n	800e110 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e0e0:	897b      	ldrh	r3, [r7, #10]
 800e0e2:	11db      	asrs	r3, r3, #7
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	f003 0306 	and.w	r3, r3, #6
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f063 030e 	orn	r3, r3, #14
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	4907      	ldr	r1, [pc, #28]	@ (800e11c <I2C_MasterRequestRead+0x198>)
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f000 f930 	bl	800e364 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e000      	b.n	800e110 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	00010008 	.word	0x00010008
 800e11c:	00010002 	.word	0x00010002

0800e120 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e128:	2300      	movs	r3, #0
 800e12a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e130:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e138:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e13a:	4b4b      	ldr	r3, [pc, #300]	@ (800e268 <I2C_DMAAbort+0x148>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	08db      	lsrs	r3, r3, #3
 800e140:	4a4a      	ldr	r2, [pc, #296]	@ (800e26c <I2C_DMAAbort+0x14c>)
 800e142:	fba2 2303 	umull	r2, r3, r2, r3
 800e146:	0a1a      	lsrs	r2, r3, #8
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	00da      	lsls	r2, r3, #3
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d106      	bne.n	800e168 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15e:	f043 0220 	orr.w	r2, r3, #32
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800e166:	e00a      	b.n	800e17e <I2C_DMAAbort+0x5e>
    }
    count--;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e17c:	d0ea      	beq.n	800e154 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e182:	2b00      	cmp	r3, #0
 800e184:	d003      	beq.n	800e18e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e18a:	2200      	movs	r2, #0
 800e18c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e192:	2b00      	cmp	r3, #0
 800e194:	d003      	beq.n	800e19e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e19a:	2200      	movs	r2, #0
 800e19c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d003      	beq.n	800e1c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d003      	beq.n	800e1d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f022 0201 	bic.w	r2, r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b60      	cmp	r3, #96	@ 0x60
 800e1ee:	d10e      	bne.n	800e20e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2220      	movs	r2, #32
 800e1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2200      	movs	r2, #0
 800e204:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e206:	6978      	ldr	r0, [r7, #20]
 800e208:	f7fe fcb0 	bl	800cb6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e20c:	e027      	b.n	800e25e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e20e:	7cfb      	ldrb	r3, [r7, #19]
 800e210:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e214:	2b28      	cmp	r3, #40	@ 0x28
 800e216:	d117      	bne.n	800e248 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0201 	orr.w	r2, r2, #1
 800e226:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e236:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2200      	movs	r2, #0
 800e23c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	2228      	movs	r2, #40	@ 0x28
 800e242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800e246:	e007      	b.n	800e258 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2220      	movs	r2, #32
 800e24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e258:	6978      	ldr	r0, [r7, #20]
 800e25a:	f7fe fc7d 	bl	800cb58 <HAL_I2C_ErrorCallback>
}
 800e25e:	bf00      	nop
 800e260:	3718      	adds	r7, #24
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	20000558 	.word	0x20000558
 800e26c:	14f8b589 	.word	0x14f8b589

0800e270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	603b      	str	r3, [r7, #0]
 800e27c:	4613      	mov	r3, r2
 800e27e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e280:	e048      	b.n	800e314 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e288:	d044      	beq.n	800e314 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e28a:	f7fc fbb3 	bl	800a9f4 <HAL_GetTick>
 800e28e:	4602      	mov	r2, r0
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d302      	bcc.n	800e2a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d139      	bne.n	800e314 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	0c1b      	lsrs	r3, r3, #16
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d10d      	bne.n	800e2c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	43da      	mvns	r2, r3
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	bf0c      	ite	eq
 800e2bc:	2301      	moveq	r3, #1
 800e2be:	2300      	movne	r3, #0
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	e00c      	b.n	800e2e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	43da      	mvns	r2, r3
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	bf0c      	ite	eq
 800e2d8:	2301      	moveq	r3, #1
 800e2da:	2300      	movne	r3, #0
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	461a      	mov	r2, r3
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d116      	bne.n	800e314 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2220      	movs	r2, #32
 800e2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e300:	f043 0220 	orr.w	r2, r3, #32
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	e023      	b.n	800e35c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	0c1b      	lsrs	r3, r3, #16
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d10d      	bne.n	800e33a <I2C_WaitOnFlagUntilTimeout+0xca>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	43da      	mvns	r2, r3
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4013      	ands	r3, r2
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bf0c      	ite	eq
 800e330:	2301      	moveq	r3, #1
 800e332:	2300      	movne	r3, #0
 800e334:	b2db      	uxtb	r3, r3
 800e336:	461a      	mov	r2, r3
 800e338:	e00c      	b.n	800e354 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	43da      	mvns	r2, r3
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	4013      	ands	r3, r2
 800e346:	b29b      	uxth	r3, r3
 800e348:	2b00      	cmp	r3, #0
 800e34a:	bf0c      	ite	eq
 800e34c:	2301      	moveq	r3, #1
 800e34e:	2300      	movne	r3, #0
 800e350:	b2db      	uxtb	r3, r3
 800e352:	461a      	mov	r2, r3
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	429a      	cmp	r2, r3
 800e358:	d093      	beq.n	800e282 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e372:	e071      	b.n	800e458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e37e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e382:	d123      	bne.n	800e3cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e392:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e39c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2220      	movs	r2, #32
 800e3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3b8:	f043 0204 	orr.w	r2, r3, #4
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e067      	b.n	800e49c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3d2:	d041      	beq.n	800e458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3d4:	f7fc fb0e 	bl	800a9f4 <HAL_GetTick>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d302      	bcc.n	800e3ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d136      	bne.n	800e458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	0c1b      	lsrs	r3, r3, #16
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d10c      	bne.n	800e40e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	695b      	ldr	r3, [r3, #20]
 800e3fa:	43da      	mvns	r2, r3
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	4013      	ands	r3, r2
 800e400:	b29b      	uxth	r3, r3
 800e402:	2b00      	cmp	r3, #0
 800e404:	bf14      	ite	ne
 800e406:	2301      	movne	r3, #1
 800e408:	2300      	moveq	r3, #0
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	e00b      	b.n	800e426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	699b      	ldr	r3, [r3, #24]
 800e414:	43da      	mvns	r2, r3
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	4013      	ands	r3, r2
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	bf14      	ite	ne
 800e420:	2301      	movne	r3, #1
 800e422:	2300      	moveq	r3, #0
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	d016      	beq.n	800e458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2220      	movs	r2, #32
 800e434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e444:	f043 0220 	orr.w	r2, r3, #32
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e021      	b.n	800e49c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	0c1b      	lsrs	r3, r3, #16
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d10c      	bne.n	800e47c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	43da      	mvns	r2, r3
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	4013      	ands	r3, r2
 800e46e:	b29b      	uxth	r3, r3
 800e470:	2b00      	cmp	r3, #0
 800e472:	bf14      	ite	ne
 800e474:	2301      	movne	r3, #1
 800e476:	2300      	moveq	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	e00b      	b.n	800e494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	43da      	mvns	r2, r3
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	4013      	ands	r3, r2
 800e488:	b29b      	uxth	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	bf14      	ite	ne
 800e48e:	2301      	movne	r3, #1
 800e490:	2300      	moveq	r3, #0
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b00      	cmp	r3, #0
 800e496:	f47f af6d 	bne.w	800e374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e4b0:	e034      	b.n	800e51c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 f915 	bl	800e6e2 <I2C_IsAcknowledgeFailed>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e034      	b.n	800e52c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4c8:	d028      	beq.n	800e51c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4ca:	f7fc fa93 	bl	800a9f4 <HAL_GetTick>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	1ad3      	subs	r3, r2, r3
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d302      	bcc.n	800e4e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d11d      	bne.n	800e51c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4ea:	2b80      	cmp	r3, #128	@ 0x80
 800e4ec:	d016      	beq.n	800e51c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2220      	movs	r2, #32
 800e4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e508:	f043 0220 	orr.w	r2, r3, #32
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e518:	2301      	movs	r3, #1
 800e51a:	e007      	b.n	800e52c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	695b      	ldr	r3, [r3, #20]
 800e522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e526:	2b80      	cmp	r3, #128	@ 0x80
 800e528:	d1c3      	bne.n	800e4b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e540:	e034      	b.n	800e5ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f000 f8cd 	bl	800e6e2 <I2C_IsAcknowledgeFailed>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d001      	beq.n	800e552 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e034      	b.n	800e5bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e558:	d028      	beq.n	800e5ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e55a:	f7fc fa4b 	bl	800a9f4 <HAL_GetTick>
 800e55e:	4602      	mov	r2, r0
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	68ba      	ldr	r2, [r7, #8]
 800e566:	429a      	cmp	r2, r3
 800e568:	d302      	bcc.n	800e570 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d11d      	bne.n	800e5ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	695b      	ldr	r3, [r3, #20]
 800e576:	f003 0304 	and.w	r3, r3, #4
 800e57a:	2b04      	cmp	r3, #4
 800e57c:	d016      	beq.n	800e5ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2200      	movs	r2, #0
 800e582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2220      	movs	r2, #32
 800e588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2200      	movs	r2, #0
 800e590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e598:	f043 0220 	orr.w	r2, r3, #32
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e007      	b.n	800e5bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	f003 0304 	and.w	r3, r3, #4
 800e5b6:	2b04      	cmp	r3, #4
 800e5b8:	d1c3      	bne.n	800e542 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e5d0:	4b13      	ldr	r3, [pc, #76]	@ (800e620 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	08db      	lsrs	r3, r3, #3
 800e5d6:	4a13      	ldr	r2, [pc, #76]	@ (800e624 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e5d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e5dc:	0a1a      	lsrs	r2, r3, #8
 800e5de:	4613      	mov	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4413      	add	r3, r2
 800e5e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d107      	bne.n	800e602 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f6:	f043 0220 	orr.w	r2, r3, #32
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800e5fe:	2301      	movs	r3, #1
 800e600:	e008      	b.n	800e614 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e60c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e610:	d0e9      	beq.n	800e5e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3714      	adds	r7, #20
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr
 800e620:	20000558 	.word	0x20000558
 800e624:	14f8b589 	.word	0x14f8b589

0800e628 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e634:	e049      	b.n	800e6ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	695b      	ldr	r3, [r3, #20]
 800e63c:	f003 0310 	and.w	r3, r3, #16
 800e640:	2b10      	cmp	r3, #16
 800e642:	d119      	bne.n	800e678 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f06f 0210 	mvn.w	r2, #16
 800e64c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2220      	movs	r2, #32
 800e658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	e030      	b.n	800e6da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e678:	f7fc f9bc 	bl	800a9f4 <HAL_GetTick>
 800e67c:	4602      	mov	r2, r0
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	429a      	cmp	r2, r3
 800e686:	d302      	bcc.n	800e68e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d11d      	bne.n	800e6ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	695b      	ldr	r3, [r3, #20]
 800e694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e698:	2b40      	cmp	r3, #64	@ 0x40
 800e69a:	d016      	beq.n	800e6ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6b6:	f043 0220 	orr.w	r2, r3, #32
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e007      	b.n	800e6da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6d4:	2b40      	cmp	r3, #64	@ 0x40
 800e6d6:	d1ae      	bne.n	800e636 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e6e2:	b480      	push	{r7}
 800e6e4:	b083      	sub	sp, #12
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6f8:	d11b      	bne.n	800e732 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e702:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2220      	movs	r2, #32
 800e70e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e71e:	f043 0204 	orr.w	r2, r3, #4
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e72e:	2301      	movs	r3, #1
 800e730:	e000      	b.n	800e734 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e74c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800e750:	d103      	bne.n	800e75a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2201      	movs	r2, #1
 800e756:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e758:	e007      	b.n	800e76a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e75e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800e762:	d102      	bne.n	800e76a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2208      	movs	r2, #8
 800e768:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
	...

0800e778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e786:	2301      	movs	r3, #1
 800e788:	e267      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f003 0301 	and.w	r3, r3, #1
 800e792:	2b00      	cmp	r3, #0
 800e794:	d075      	beq.n	800e882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e796:	4b88      	ldr	r3, [pc, #544]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	f003 030c 	and.w	r3, r3, #12
 800e79e:	2b04      	cmp	r3, #4
 800e7a0:	d00c      	beq.n	800e7bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e7a2:	4b85      	ldr	r3, [pc, #532]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e7aa:	2b08      	cmp	r3, #8
 800e7ac:	d112      	bne.n	800e7d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e7ae:	4b82      	ldr	r3, [pc, #520]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e7b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e7ba:	d10b      	bne.n	800e7d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7bc:	4b7e      	ldr	r3, [pc, #504]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d05b      	beq.n	800e880 <HAL_RCC_OscConfig+0x108>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d157      	bne.n	800e880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e242      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7dc:	d106      	bne.n	800e7ec <HAL_RCC_OscConfig+0x74>
 800e7de:	4b76      	ldr	r3, [pc, #472]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a75      	ldr	r2, [pc, #468]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7e8:	6013      	str	r3, [r2, #0]
 800e7ea:	e01d      	b.n	800e828 <HAL_RCC_OscConfig+0xb0>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e7f4:	d10c      	bne.n	800e810 <HAL_RCC_OscConfig+0x98>
 800e7f6:	4b70      	ldr	r3, [pc, #448]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a6f      	ldr	r2, [pc, #444]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e7fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	4b6d      	ldr	r3, [pc, #436]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a6c      	ldr	r2, [pc, #432]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e80c:	6013      	str	r3, [r2, #0]
 800e80e:	e00b      	b.n	800e828 <HAL_RCC_OscConfig+0xb0>
 800e810:	4b69      	ldr	r3, [pc, #420]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a68      	ldr	r2, [pc, #416]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e81a:	6013      	str	r3, [r2, #0]
 800e81c:	4b66      	ldr	r3, [pc, #408]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a65      	ldr	r2, [pc, #404]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d013      	beq.n	800e858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e830:	f7fc f8e0 	bl	800a9f4 <HAL_GetTick>
 800e834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e836:	e008      	b.n	800e84a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e838:	f7fc f8dc 	bl	800a9f4 <HAL_GetTick>
 800e83c:	4602      	mov	r2, r0
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	2b64      	cmp	r3, #100	@ 0x64
 800e844:	d901      	bls.n	800e84a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e846:	2303      	movs	r3, #3
 800e848:	e207      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e84a:	4b5b      	ldr	r3, [pc, #364]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e852:	2b00      	cmp	r3, #0
 800e854:	d0f0      	beq.n	800e838 <HAL_RCC_OscConfig+0xc0>
 800e856:	e014      	b.n	800e882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e858:	f7fc f8cc 	bl	800a9f4 <HAL_GetTick>
 800e85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e85e:	e008      	b.n	800e872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e860:	f7fc f8c8 	bl	800a9f4 <HAL_GetTick>
 800e864:	4602      	mov	r2, r0
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	2b64      	cmp	r3, #100	@ 0x64
 800e86c:	d901      	bls.n	800e872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e86e:	2303      	movs	r3, #3
 800e870:	e1f3      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e872:	4b51      	ldr	r3, [pc, #324]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1f0      	bne.n	800e860 <HAL_RCC_OscConfig+0xe8>
 800e87e:	e000      	b.n	800e882 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f003 0302 	and.w	r3, r3, #2
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d063      	beq.n	800e956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e88e:	4b4a      	ldr	r3, [pc, #296]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	f003 030c 	and.w	r3, r3, #12
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00b      	beq.n	800e8b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e89a:	4b47      	ldr	r3, [pc, #284]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e8a2:	2b08      	cmp	r3, #8
 800e8a4:	d11c      	bne.n	800e8e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e8a6:	4b44      	ldr	r3, [pc, #272]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d116      	bne.n	800e8e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e8b2:	4b41      	ldr	r3, [pc, #260]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f003 0302 	and.w	r3, r3, #2
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d005      	beq.n	800e8ca <HAL_RCC_OscConfig+0x152>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d001      	beq.n	800e8ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e1c7      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8ca:	4b3b      	ldr	r3, [pc, #236]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	4937      	ldr	r1, [pc, #220]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e8de:	e03a      	b.n	800e956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d020      	beq.n	800e92a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e8e8:	4b34      	ldr	r3, [pc, #208]	@ (800e9bc <HAL_RCC_OscConfig+0x244>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8ee:	f7fc f881 	bl	800a9f4 <HAL_GetTick>
 800e8f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e8f4:	e008      	b.n	800e908 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8f6:	f7fc f87d 	bl	800a9f4 <HAL_GetTick>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	2b02      	cmp	r3, #2
 800e902:	d901      	bls.n	800e908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e904:	2303      	movs	r3, #3
 800e906:	e1a8      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e908:	4b2b      	ldr	r3, [pc, #172]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0302 	and.w	r3, r3, #2
 800e910:	2b00      	cmp	r3, #0
 800e912:	d0f0      	beq.n	800e8f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e914:	4b28      	ldr	r3, [pc, #160]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	4925      	ldr	r1, [pc, #148]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e924:	4313      	orrs	r3, r2
 800e926:	600b      	str	r3, [r1, #0]
 800e928:	e015      	b.n	800e956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e92a:	4b24      	ldr	r3, [pc, #144]	@ (800e9bc <HAL_RCC_OscConfig+0x244>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e930:	f7fc f860 	bl	800a9f4 <HAL_GetTick>
 800e934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e936:	e008      	b.n	800e94a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e938:	f7fc f85c 	bl	800a9f4 <HAL_GetTick>
 800e93c:	4602      	mov	r2, r0
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	2b02      	cmp	r3, #2
 800e944:	d901      	bls.n	800e94a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e946:	2303      	movs	r3, #3
 800e948:	e187      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e94a:	4b1b      	ldr	r3, [pc, #108]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 0302 	and.w	r3, r3, #2
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1f0      	bne.n	800e938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 0308 	and.w	r3, r3, #8
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d036      	beq.n	800e9d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	695b      	ldr	r3, [r3, #20]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d016      	beq.n	800e998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e96a:	4b15      	ldr	r3, [pc, #84]	@ (800e9c0 <HAL_RCC_OscConfig+0x248>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e970:	f7fc f840 	bl	800a9f4 <HAL_GetTick>
 800e974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e976:	e008      	b.n	800e98a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e978:	f7fc f83c 	bl	800a9f4 <HAL_GetTick>
 800e97c:	4602      	mov	r2, r0
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	2b02      	cmp	r3, #2
 800e984:	d901      	bls.n	800e98a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e986:	2303      	movs	r3, #3
 800e988:	e167      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e98a:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b8 <HAL_RCC_OscConfig+0x240>)
 800e98c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e98e:	f003 0302 	and.w	r3, r3, #2
 800e992:	2b00      	cmp	r3, #0
 800e994:	d0f0      	beq.n	800e978 <HAL_RCC_OscConfig+0x200>
 800e996:	e01b      	b.n	800e9d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e998:	4b09      	ldr	r3, [pc, #36]	@ (800e9c0 <HAL_RCC_OscConfig+0x248>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e99e:	f7fc f829 	bl	800a9f4 <HAL_GetTick>
 800e9a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9a4:	e00e      	b.n	800e9c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e9a6:	f7fc f825 	bl	800a9f4 <HAL_GetTick>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d907      	bls.n	800e9c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	e150      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
 800e9b8:	40023800 	.word	0x40023800
 800e9bc:	42470000 	.word	0x42470000
 800e9c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e9c4:	4b88      	ldr	r3, [pc, #544]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800e9c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9c8:	f003 0302 	and.w	r3, r3, #2
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1ea      	bne.n	800e9a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f003 0304 	and.w	r3, r3, #4
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f000 8097 	beq.w	800eb0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e9e2:	4b81      	ldr	r3, [pc, #516]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800e9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10f      	bne.n	800ea0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	60bb      	str	r3, [r7, #8]
 800e9f2:	4b7d      	ldr	r3, [pc, #500]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800e9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9f6:	4a7c      	ldr	r2, [pc, #496]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800e9f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9fc:	6413      	str	r3, [r2, #64]	@ 0x40
 800e9fe:	4b7a      	ldr	r3, [pc, #488]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea06:	60bb      	str	r3, [r7, #8]
 800ea08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea0e:	4b77      	ldr	r3, [pc, #476]	@ (800ebec <HAL_RCC_OscConfig+0x474>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d118      	bne.n	800ea4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ea1a:	4b74      	ldr	r3, [pc, #464]	@ (800ebec <HAL_RCC_OscConfig+0x474>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a73      	ldr	r2, [pc, #460]	@ (800ebec <HAL_RCC_OscConfig+0x474>)
 800ea20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ea26:	f7fb ffe5 	bl	800a9f4 <HAL_GetTick>
 800ea2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea2c:	e008      	b.n	800ea40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea2e:	f7fb ffe1 	bl	800a9f4 <HAL_GetTick>
 800ea32:	4602      	mov	r2, r0
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d901      	bls.n	800ea40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	e10c      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ea40:	4b6a      	ldr	r3, [pc, #424]	@ (800ebec <HAL_RCC_OscConfig+0x474>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d0f0      	beq.n	800ea2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d106      	bne.n	800ea62 <HAL_RCC_OscConfig+0x2ea>
 800ea54:	4b64      	ldr	r3, [pc, #400]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea58:	4a63      	ldr	r2, [pc, #396]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea5a:	f043 0301 	orr.w	r3, r3, #1
 800ea5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea60:	e01c      	b.n	800ea9c <HAL_RCC_OscConfig+0x324>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	2b05      	cmp	r3, #5
 800ea68:	d10c      	bne.n	800ea84 <HAL_RCC_OscConfig+0x30c>
 800ea6a:	4b5f      	ldr	r3, [pc, #380]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6e:	4a5e      	ldr	r2, [pc, #376]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea70:	f043 0304 	orr.w	r3, r3, #4
 800ea74:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea76:	4b5c      	ldr	r3, [pc, #368]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea7a:	4a5b      	ldr	r2, [pc, #364]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea7c:	f043 0301 	orr.w	r3, r3, #1
 800ea80:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea82:	e00b      	b.n	800ea9c <HAL_RCC_OscConfig+0x324>
 800ea84:	4b58      	ldr	r3, [pc, #352]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea88:	4a57      	ldr	r2, [pc, #348]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea8a:	f023 0301 	bic.w	r3, r3, #1
 800ea8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea90:	4b55      	ldr	r3, [pc, #340]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea94:	4a54      	ldr	r2, [pc, #336]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ea96:	f023 0304 	bic.w	r3, r3, #4
 800ea9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d015      	beq.n	800ead0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eaa4:	f7fb ffa6 	bl	800a9f4 <HAL_GetTick>
 800eaa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eaaa:	e00a      	b.n	800eac2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eaac:	f7fb ffa2 	bl	800a9f4 <HAL_GetTick>
 800eab0:	4602      	mov	r2, r0
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d901      	bls.n	800eac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800eabe:	2303      	movs	r3, #3
 800eac0:	e0cb      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eac2:	4b49      	ldr	r3, [pc, #292]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eac6:	f003 0302 	and.w	r3, r3, #2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d0ee      	beq.n	800eaac <HAL_RCC_OscConfig+0x334>
 800eace:	e014      	b.n	800eafa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ead0:	f7fb ff90 	bl	800a9f4 <HAL_GetTick>
 800ead4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ead6:	e00a      	b.n	800eaee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ead8:	f7fb ff8c 	bl	800a9f4 <HAL_GetTick>
 800eadc:	4602      	mov	r2, r0
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d901      	bls.n	800eaee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800eaea:	2303      	movs	r3, #3
 800eaec:	e0b5      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eaee:	4b3e      	ldr	r3, [pc, #248]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eaf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaf2:	f003 0302 	and.w	r3, r3, #2
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1ee      	bne.n	800ead8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d105      	bne.n	800eb0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb00:	4b39      	ldr	r3, [pc, #228]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eb02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb04:	4a38      	ldr	r2, [pc, #224]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eb06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eb0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 80a1 	beq.w	800ec58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800eb16:	4b34      	ldr	r3, [pc, #208]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	f003 030c 	and.w	r3, r3, #12
 800eb1e:	2b08      	cmp	r3, #8
 800eb20:	d05c      	beq.n	800ebdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d141      	bne.n	800ebae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eb2a:	4b31      	ldr	r3, [pc, #196]	@ (800ebf0 <HAL_RCC_OscConfig+0x478>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb30:	f7fb ff60 	bl	800a9f4 <HAL_GetTick>
 800eb34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb36:	e008      	b.n	800eb4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb38:	f7fb ff5c 	bl	800a9f4 <HAL_GetTick>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d901      	bls.n	800eb4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e087      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eb4a:	4b27      	ldr	r3, [pc, #156]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1f0      	bne.n	800eb38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	69da      	ldr	r2, [r3, #28]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a1b      	ldr	r3, [r3, #32]
 800eb5e:	431a      	orrs	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	019b      	lsls	r3, r3, #6
 800eb66:	431a      	orrs	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb6c:	085b      	lsrs	r3, r3, #1
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	041b      	lsls	r3, r3, #16
 800eb72:	431a      	orrs	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb78:	061b      	lsls	r3, r3, #24
 800eb7a:	491b      	ldr	r1, [pc, #108]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eb80:	4b1b      	ldr	r3, [pc, #108]	@ (800ebf0 <HAL_RCC_OscConfig+0x478>)
 800eb82:	2201      	movs	r2, #1
 800eb84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb86:	f7fb ff35 	bl	800a9f4 <HAL_GetTick>
 800eb8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb8c:	e008      	b.n	800eba0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb8e:	f7fb ff31 	bl	800a9f4 <HAL_GetTick>
 800eb92:	4602      	mov	r2, r0
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	1ad3      	subs	r3, r2, r3
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d901      	bls.n	800eba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eb9c:	2303      	movs	r3, #3
 800eb9e:	e05c      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eba0:	4b11      	ldr	r3, [pc, #68]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0f0      	beq.n	800eb8e <HAL_RCC_OscConfig+0x416>
 800ebac:	e054      	b.n	800ec58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ebae:	4b10      	ldr	r3, [pc, #64]	@ (800ebf0 <HAL_RCC_OscConfig+0x478>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ebb4:	f7fb ff1e 	bl	800a9f4 <HAL_GetTick>
 800ebb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebba:	e008      	b.n	800ebce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebbc:	f7fb ff1a 	bl	800a9f4 <HAL_GetTick>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	2b02      	cmp	r3, #2
 800ebc8:	d901      	bls.n	800ebce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ebca:	2303      	movs	r3, #3
 800ebcc:	e045      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ebce:	4b06      	ldr	r3, [pc, #24]	@ (800ebe8 <HAL_RCC_OscConfig+0x470>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1f0      	bne.n	800ebbc <HAL_RCC_OscConfig+0x444>
 800ebda:	e03d      	b.n	800ec58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d107      	bne.n	800ebf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	e038      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
 800ebe8:	40023800 	.word	0x40023800
 800ebec:	40007000 	.word	0x40007000
 800ebf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ebf4:	4b1b      	ldr	r3, [pc, #108]	@ (800ec64 <HAL_RCC_OscConfig+0x4ec>)
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d028      	beq.n	800ec54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d121      	bne.n	800ec54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d11a      	bne.n	800ec54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ec24:	4013      	ands	r3, r2
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ec2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d111      	bne.n	800ec54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec3a:	085b      	lsrs	r3, r3, #1
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d107      	bne.n	800ec54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d001      	beq.n	800ec58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e000      	b.n	800ec5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	40023800 	.word	0x40023800

0800ec68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d101      	bne.n	800ec7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e0cc      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec7c:	4b68      	ldr	r3, [pc, #416]	@ (800ee20 <HAL_RCC_ClockConfig+0x1b8>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 0307 	and.w	r3, r3, #7
 800ec84:	683a      	ldr	r2, [r7, #0]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d90c      	bls.n	800eca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec8a:	4b65      	ldr	r3, [pc, #404]	@ (800ee20 <HAL_RCC_ClockConfig+0x1b8>)
 800ec8c:	683a      	ldr	r2, [r7, #0]
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec92:	4b63      	ldr	r3, [pc, #396]	@ (800ee20 <HAL_RCC_ClockConfig+0x1b8>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f003 0307 	and.w	r3, r3, #7
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d001      	beq.n	800eca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eca0:	2301      	movs	r3, #1
 800eca2:	e0b8      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 0302 	and.w	r3, r3, #2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d020      	beq.n	800ecf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ecbc:	4b59      	ldr	r3, [pc, #356]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	4a58      	ldr	r2, [pc, #352]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ecc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f003 0308 	and.w	r3, r3, #8
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d005      	beq.n	800ece0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ecd4:	4b53      	ldr	r3, [pc, #332]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	4a52      	ldr	r2, [pc, #328]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ecde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ece0:	4b50      	ldr	r3, [pc, #320]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	494d      	ldr	r1, [pc, #308]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f003 0301 	and.w	r3, r3, #1
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d044      	beq.n	800ed88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d107      	bne.n	800ed16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed06:	4b47      	ldr	r3, [pc, #284]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d119      	bne.n	800ed46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e07f      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d003      	beq.n	800ed26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d107      	bne.n	800ed36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed26:	4b3f      	ldr	r3, [pc, #252]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d109      	bne.n	800ed46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	e06f      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed36:	4b3b      	ldr	r3, [pc, #236]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0302 	and.w	r3, r3, #2
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d101      	bne.n	800ed46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e067      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ed46:	4b37      	ldr	r3, [pc, #220]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	f023 0203 	bic.w	r2, r3, #3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	4934      	ldr	r1, [pc, #208]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ed54:	4313      	orrs	r3, r2
 800ed56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ed58:	f7fb fe4c 	bl	800a9f4 <HAL_GetTick>
 800ed5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed5e:	e00a      	b.n	800ed76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed60:	f7fb fe48 	bl	800a9f4 <HAL_GetTick>
 800ed64:	4602      	mov	r2, r0
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d901      	bls.n	800ed76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ed72:	2303      	movs	r3, #3
 800ed74:	e04f      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed76:	4b2b      	ldr	r3, [pc, #172]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	f003 020c 	and.w	r2, r3, #12
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d1eb      	bne.n	800ed60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed88:	4b25      	ldr	r3, [pc, #148]	@ (800ee20 <HAL_RCC_ClockConfig+0x1b8>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f003 0307 	and.w	r3, r3, #7
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d20c      	bcs.n	800edb0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed96:	4b22      	ldr	r3, [pc, #136]	@ (800ee20 <HAL_RCC_ClockConfig+0x1b8>)
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	b2d2      	uxtb	r2, r2
 800ed9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed9e:	4b20      	ldr	r3, [pc, #128]	@ (800ee20 <HAL_RCC_ClockConfig+0x1b8>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f003 0307 	and.w	r3, r3, #7
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d001      	beq.n	800edb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800edac:	2301      	movs	r3, #1
 800edae:	e032      	b.n	800ee16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f003 0304 	and.w	r3, r3, #4
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d008      	beq.n	800edce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800edbc:	4b19      	ldr	r3, [pc, #100]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	4916      	ldr	r1, [pc, #88]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800edca:	4313      	orrs	r3, r2
 800edcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f003 0308 	and.w	r3, r3, #8
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d009      	beq.n	800edee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800edda:	4b12      	ldr	r3, [pc, #72]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	691b      	ldr	r3, [r3, #16]
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	490e      	ldr	r1, [pc, #56]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800edea:	4313      	orrs	r3, r2
 800edec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800edee:	f000 f821 	bl	800ee34 <HAL_RCC_GetSysClockFreq>
 800edf2:	4602      	mov	r2, r0
 800edf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ee24 <HAL_RCC_ClockConfig+0x1bc>)
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	091b      	lsrs	r3, r3, #4
 800edfa:	f003 030f 	and.w	r3, r3, #15
 800edfe:	490a      	ldr	r1, [pc, #40]	@ (800ee28 <HAL_RCC_ClockConfig+0x1c0>)
 800ee00:	5ccb      	ldrb	r3, [r1, r3]
 800ee02:	fa22 f303 	lsr.w	r3, r2, r3
 800ee06:	4a09      	ldr	r2, [pc, #36]	@ (800ee2c <HAL_RCC_ClockConfig+0x1c4>)
 800ee08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ee0a:	4b09      	ldr	r3, [pc, #36]	@ (800ee30 <HAL_RCC_ClockConfig+0x1c8>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fb fdac 	bl	800a96c <HAL_InitTick>

  return HAL_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	40023c00 	.word	0x40023c00
 800ee24:	40023800 	.word	0x40023800
 800ee28:	08013728 	.word	0x08013728
 800ee2c:	20000558 	.word	0x20000558
 800ee30:	2000055c 	.word	0x2000055c

0800ee34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ee34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee38:	b094      	sub	sp, #80	@ 0x50
 800ee3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800ee40:	2300      	movs	r3, #0
 800ee42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ee44:	2300      	movs	r3, #0
 800ee46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ee4c:	4b79      	ldr	r3, [pc, #484]	@ (800f034 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	f003 030c 	and.w	r3, r3, #12
 800ee54:	2b08      	cmp	r3, #8
 800ee56:	d00d      	beq.n	800ee74 <HAL_RCC_GetSysClockFreq+0x40>
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	f200 80e1 	bhi.w	800f020 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <HAL_RCC_GetSysClockFreq+0x34>
 800ee62:	2b04      	cmp	r3, #4
 800ee64:	d003      	beq.n	800ee6e <HAL_RCC_GetSysClockFreq+0x3a>
 800ee66:	e0db      	b.n	800f020 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ee68:	4b73      	ldr	r3, [pc, #460]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x204>)
 800ee6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ee6c:	e0db      	b.n	800f026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ee6e:	4b73      	ldr	r3, [pc, #460]	@ (800f03c <HAL_RCC_GetSysClockFreq+0x208>)
 800ee70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ee72:	e0d8      	b.n	800f026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ee74:	4b6f      	ldr	r3, [pc, #444]	@ (800f034 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ee7e:	4b6d      	ldr	r3, [pc, #436]	@ (800f034 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d063      	beq.n	800ef52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee8a:	4b6a      	ldr	r3, [pc, #424]	@ (800f034 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	099b      	lsrs	r3, r3, #6
 800ee90:	2200      	movs	r2, #0
 800ee92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ee96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee9e:	2300      	movs	r3, #0
 800eea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800eea2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800eea6:	4622      	mov	r2, r4
 800eea8:	462b      	mov	r3, r5
 800eeaa:	f04f 0000 	mov.w	r0, #0
 800eeae:	f04f 0100 	mov.w	r1, #0
 800eeb2:	0159      	lsls	r1, r3, #5
 800eeb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eeb8:	0150      	lsls	r0, r2, #5
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	4621      	mov	r1, r4
 800eec0:	1a51      	subs	r1, r2, r1
 800eec2:	6139      	str	r1, [r7, #16]
 800eec4:	4629      	mov	r1, r5
 800eec6:	eb63 0301 	sbc.w	r3, r3, r1
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	f04f 0200 	mov.w	r2, #0
 800eed0:	f04f 0300 	mov.w	r3, #0
 800eed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800eed8:	4659      	mov	r1, fp
 800eeda:	018b      	lsls	r3, r1, #6
 800eedc:	4651      	mov	r1, sl
 800eede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800eee2:	4651      	mov	r1, sl
 800eee4:	018a      	lsls	r2, r1, #6
 800eee6:	4651      	mov	r1, sl
 800eee8:	ebb2 0801 	subs.w	r8, r2, r1
 800eeec:	4659      	mov	r1, fp
 800eeee:	eb63 0901 	sbc.w	r9, r3, r1
 800eef2:	f04f 0200 	mov.w	r2, #0
 800eef6:	f04f 0300 	mov.w	r3, #0
 800eefa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eefe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ef02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ef06:	4690      	mov	r8, r2
 800ef08:	4699      	mov	r9, r3
 800ef0a:	4623      	mov	r3, r4
 800ef0c:	eb18 0303 	adds.w	r3, r8, r3
 800ef10:	60bb      	str	r3, [r7, #8]
 800ef12:	462b      	mov	r3, r5
 800ef14:	eb49 0303 	adc.w	r3, r9, r3
 800ef18:	60fb      	str	r3, [r7, #12]
 800ef1a:	f04f 0200 	mov.w	r2, #0
 800ef1e:	f04f 0300 	mov.w	r3, #0
 800ef22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ef26:	4629      	mov	r1, r5
 800ef28:	024b      	lsls	r3, r1, #9
 800ef2a:	4621      	mov	r1, r4
 800ef2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ef30:	4621      	mov	r1, r4
 800ef32:	024a      	lsls	r2, r1, #9
 800ef34:	4610      	mov	r0, r2
 800ef36:	4619      	mov	r1, r3
 800ef38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ef44:	f7f1 f9a4 	bl	8000290 <__aeabi_uldivmod>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef50:	e058      	b.n	800f004 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ef52:	4b38      	ldr	r3, [pc, #224]	@ (800f034 <HAL_RCC_GetSysClockFreq+0x200>)
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	099b      	lsrs	r3, r3, #6
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ef62:	623b      	str	r3, [r7, #32]
 800ef64:	2300      	movs	r3, #0
 800ef66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ef6c:	4642      	mov	r2, r8
 800ef6e:	464b      	mov	r3, r9
 800ef70:	f04f 0000 	mov.w	r0, #0
 800ef74:	f04f 0100 	mov.w	r1, #0
 800ef78:	0159      	lsls	r1, r3, #5
 800ef7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ef7e:	0150      	lsls	r0, r2, #5
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4641      	mov	r1, r8
 800ef86:	ebb2 0a01 	subs.w	sl, r2, r1
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	eb63 0b01 	sbc.w	fp, r3, r1
 800ef90:	f04f 0200 	mov.w	r2, #0
 800ef94:	f04f 0300 	mov.w	r3, #0
 800ef98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ef9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800efa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800efa4:	ebb2 040a 	subs.w	r4, r2, sl
 800efa8:	eb63 050b 	sbc.w	r5, r3, fp
 800efac:	f04f 0200 	mov.w	r2, #0
 800efb0:	f04f 0300 	mov.w	r3, #0
 800efb4:	00eb      	lsls	r3, r5, #3
 800efb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800efba:	00e2      	lsls	r2, r4, #3
 800efbc:	4614      	mov	r4, r2
 800efbe:	461d      	mov	r5, r3
 800efc0:	4643      	mov	r3, r8
 800efc2:	18e3      	adds	r3, r4, r3
 800efc4:	603b      	str	r3, [r7, #0]
 800efc6:	464b      	mov	r3, r9
 800efc8:	eb45 0303 	adc.w	r3, r5, r3
 800efcc:	607b      	str	r3, [r7, #4]
 800efce:	f04f 0200 	mov.w	r2, #0
 800efd2:	f04f 0300 	mov.w	r3, #0
 800efd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800efda:	4629      	mov	r1, r5
 800efdc:	028b      	lsls	r3, r1, #10
 800efde:	4621      	mov	r1, r4
 800efe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800efe4:	4621      	mov	r1, r4
 800efe6:	028a      	lsls	r2, r1, #10
 800efe8:	4610      	mov	r0, r2
 800efea:	4619      	mov	r1, r3
 800efec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efee:	2200      	movs	r2, #0
 800eff0:	61bb      	str	r3, [r7, #24]
 800eff2:	61fa      	str	r2, [r7, #28]
 800eff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800eff8:	f7f1 f94a 	bl	8000290 <__aeabi_uldivmod>
 800effc:	4602      	mov	r2, r0
 800effe:	460b      	mov	r3, r1
 800f000:	4613      	mov	r3, r2
 800f002:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f004:	4b0b      	ldr	r3, [pc, #44]	@ (800f034 <HAL_RCC_GetSysClockFreq+0x200>)
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	0c1b      	lsrs	r3, r3, #16
 800f00a:	f003 0303 	and.w	r3, r3, #3
 800f00e:	3301      	adds	r3, #1
 800f010:	005b      	lsls	r3, r3, #1
 800f012:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800f014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f018:	fbb2 f3f3 	udiv	r3, r2, r3
 800f01c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f01e:	e002      	b.n	800f026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f020:	4b05      	ldr	r3, [pc, #20]	@ (800f038 <HAL_RCC_GetSysClockFreq+0x204>)
 800f022:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f024:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3750      	adds	r7, #80	@ 0x50
 800f02c:	46bd      	mov	sp, r7
 800f02e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f032:	bf00      	nop
 800f034:	40023800 	.word	0x40023800
 800f038:	00f42400 	.word	0x00f42400
 800f03c:	007a1200 	.word	0x007a1200

0800f040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f040:	b480      	push	{r7}
 800f042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f044:	4b03      	ldr	r3, [pc, #12]	@ (800f054 <HAL_RCC_GetHCLKFreq+0x14>)
 800f046:	681b      	ldr	r3, [r3, #0]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	20000558 	.word	0x20000558

0800f058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f05c:	f7ff fff0 	bl	800f040 <HAL_RCC_GetHCLKFreq>
 800f060:	4602      	mov	r2, r0
 800f062:	4b05      	ldr	r3, [pc, #20]	@ (800f078 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	0a9b      	lsrs	r3, r3, #10
 800f068:	f003 0307 	and.w	r3, r3, #7
 800f06c:	4903      	ldr	r1, [pc, #12]	@ (800f07c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f06e:	5ccb      	ldrb	r3, [r1, r3]
 800f070:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f074:	4618      	mov	r0, r3
 800f076:	bd80      	pop	{r7, pc}
 800f078:	40023800 	.word	0x40023800
 800f07c:	08013738 	.word	0x08013738

0800f080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f084:	f7ff ffdc 	bl	800f040 <HAL_RCC_GetHCLKFreq>
 800f088:	4602      	mov	r2, r0
 800f08a:	4b05      	ldr	r3, [pc, #20]	@ (800f0a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	0b5b      	lsrs	r3, r3, #13
 800f090:	f003 0307 	and.w	r3, r3, #7
 800f094:	4903      	ldr	r1, [pc, #12]	@ (800f0a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f096:	5ccb      	ldrb	r3, [r1, r3]
 800f098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	40023800 	.word	0x40023800
 800f0a4:	08013738 	.word	0x08013738

0800f0a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d101      	bne.n	800f0ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e041      	b.n	800f13e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d106      	bne.n	800f0d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f7fa fd36 	bl	8009b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2202      	movs	r2, #2
 800f0d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	4610      	mov	r0, r2
 800f0e8:	f000 fa70 	bl	800f5cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2201      	movs	r2, #1
 800f100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2201      	movs	r2, #1
 800f138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3708      	adds	r7, #8
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
	...

0800f148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d001      	beq.n	800f160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f15c:	2301      	movs	r3, #1
 800f15e:	e044      	b.n	800f1ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2202      	movs	r2, #2
 800f164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68da      	ldr	r2, [r3, #12]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f042 0201 	orr.w	r2, r2, #1
 800f176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a1e      	ldr	r2, [pc, #120]	@ (800f1f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d018      	beq.n	800f1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f18a:	d013      	beq.n	800f1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a1a      	ldr	r2, [pc, #104]	@ (800f1fc <HAL_TIM_Base_Start_IT+0xb4>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d00e      	beq.n	800f1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a19      	ldr	r2, [pc, #100]	@ (800f200 <HAL_TIM_Base_Start_IT+0xb8>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d009      	beq.n	800f1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a17      	ldr	r2, [pc, #92]	@ (800f204 <HAL_TIM_Base_Start_IT+0xbc>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d004      	beq.n	800f1b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4a16      	ldr	r2, [pc, #88]	@ (800f208 <HAL_TIM_Base_Start_IT+0xc0>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d111      	bne.n	800f1d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	f003 0307 	and.w	r3, r3, #7
 800f1be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b06      	cmp	r3, #6
 800f1c4:	d010      	beq.n	800f1e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f042 0201 	orr.w	r2, r2, #1
 800f1d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1d6:	e007      	b.n	800f1e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f042 0201 	orr.w	r2, r2, #1
 800f1e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3714      	adds	r7, #20
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	40010000 	.word	0x40010000
 800f1fc:	40000400 	.word	0x40000400
 800f200:	40000800 	.word	0x40000800
 800f204:	40000c00 	.word	0x40000c00
 800f208:	40014000 	.word	0x40014000

0800f20c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	691b      	ldr	r3, [r3, #16]
 800f222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	f003 0302 	and.w	r3, r3, #2
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d020      	beq.n	800f270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f003 0302 	and.w	r3, r3, #2
 800f234:	2b00      	cmp	r3, #0
 800f236:	d01b      	beq.n	800f270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f06f 0202 	mvn.w	r2, #2
 800f240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2201      	movs	r2, #1
 800f246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	699b      	ldr	r3, [r3, #24]
 800f24e:	f003 0303 	and.w	r3, r3, #3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d003      	beq.n	800f25e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 f999 	bl	800f58e <HAL_TIM_IC_CaptureCallback>
 800f25c:	e005      	b.n	800f26a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f98b 	bl	800f57a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f99c 	bl	800f5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f003 0304 	and.w	r3, r3, #4
 800f276:	2b00      	cmp	r3, #0
 800f278:	d020      	beq.n	800f2bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f003 0304 	and.w	r3, r3, #4
 800f280:	2b00      	cmp	r3, #0
 800f282:	d01b      	beq.n	800f2bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f06f 0204 	mvn.w	r2, #4
 800f28c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2202      	movs	r2, #2
 800f292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	699b      	ldr	r3, [r3, #24]
 800f29a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d003      	beq.n	800f2aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f973 	bl	800f58e <HAL_TIM_IC_CaptureCallback>
 800f2a8:	e005      	b.n	800f2b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f965 	bl	800f57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 f976 	bl	800f5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	f003 0308 	and.w	r3, r3, #8
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d020      	beq.n	800f308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f003 0308 	and.w	r3, r3, #8
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01b      	beq.n	800f308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f06f 0208 	mvn.w	r2, #8
 800f2d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2204      	movs	r2, #4
 800f2de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	69db      	ldr	r3, [r3, #28]
 800f2e6:	f003 0303 	and.w	r3, r3, #3
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f94d 	bl	800f58e <HAL_TIM_IC_CaptureCallback>
 800f2f4:	e005      	b.n	800f302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 f93f 	bl	800f57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f950 	bl	800f5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	f003 0310 	and.w	r3, r3, #16
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d020      	beq.n	800f354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f003 0310 	and.w	r3, r3, #16
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d01b      	beq.n	800f354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f06f 0210 	mvn.w	r2, #16
 800f324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2208      	movs	r2, #8
 800f32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	69db      	ldr	r3, [r3, #28]
 800f332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f336:	2b00      	cmp	r3, #0
 800f338:	d003      	beq.n	800f342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f927 	bl	800f58e <HAL_TIM_IC_CaptureCallback>
 800f340:	e005      	b.n	800f34e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f919 	bl	800f57a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 f92a 	bl	800f5a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00c      	beq.n	800f378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f003 0301 	and.w	r3, r3, #1
 800f364:	2b00      	cmp	r3, #0
 800f366:	d007      	beq.n	800f378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f06f 0201 	mvn.w	r2, #1
 800f370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7f5 f9cc 	bl	8004710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00c      	beq.n	800f39c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d007      	beq.n	800f39c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 fab0 	bl	800f8fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00c      	beq.n	800f3c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d007      	beq.n	800f3c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f3b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f8fb 	bl	800f5b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	f003 0320 	and.w	r3, r3, #32
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00c      	beq.n	800f3e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f003 0320 	and.w	r3, r3, #32
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d007      	beq.n	800f3e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f06f 0220 	mvn.w	r2, #32
 800f3dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fa82 	bl	800f8e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f3e4:	bf00      	nop
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f400:	2b01      	cmp	r3, #1
 800f402:	d101      	bne.n	800f408 <HAL_TIM_ConfigClockSource+0x1c>
 800f404:	2302      	movs	r3, #2
 800f406:	e0b4      	b.n	800f572 <HAL_TIM_ConfigClockSource+0x186>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2201      	movs	r2, #1
 800f40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2202      	movs	r2, #2
 800f414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f42e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f440:	d03e      	beq.n	800f4c0 <HAL_TIM_ConfigClockSource+0xd4>
 800f442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f446:	f200 8087 	bhi.w	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f44e:	f000 8086 	beq.w	800f55e <HAL_TIM_ConfigClockSource+0x172>
 800f452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f456:	d87f      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f458:	2b70      	cmp	r3, #112	@ 0x70
 800f45a:	d01a      	beq.n	800f492 <HAL_TIM_ConfigClockSource+0xa6>
 800f45c:	2b70      	cmp	r3, #112	@ 0x70
 800f45e:	d87b      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f460:	2b60      	cmp	r3, #96	@ 0x60
 800f462:	d050      	beq.n	800f506 <HAL_TIM_ConfigClockSource+0x11a>
 800f464:	2b60      	cmp	r3, #96	@ 0x60
 800f466:	d877      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f468:	2b50      	cmp	r3, #80	@ 0x50
 800f46a:	d03c      	beq.n	800f4e6 <HAL_TIM_ConfigClockSource+0xfa>
 800f46c:	2b50      	cmp	r3, #80	@ 0x50
 800f46e:	d873      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f470:	2b40      	cmp	r3, #64	@ 0x40
 800f472:	d058      	beq.n	800f526 <HAL_TIM_ConfigClockSource+0x13a>
 800f474:	2b40      	cmp	r3, #64	@ 0x40
 800f476:	d86f      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f478:	2b30      	cmp	r3, #48	@ 0x30
 800f47a:	d064      	beq.n	800f546 <HAL_TIM_ConfigClockSource+0x15a>
 800f47c:	2b30      	cmp	r3, #48	@ 0x30
 800f47e:	d86b      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f480:	2b20      	cmp	r3, #32
 800f482:	d060      	beq.n	800f546 <HAL_TIM_ConfigClockSource+0x15a>
 800f484:	2b20      	cmp	r3, #32
 800f486:	d867      	bhi.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d05c      	beq.n	800f546 <HAL_TIM_ConfigClockSource+0x15a>
 800f48c:	2b10      	cmp	r3, #16
 800f48e:	d05a      	beq.n	800f546 <HAL_TIM_ConfigClockSource+0x15a>
 800f490:	e062      	b.n	800f558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f4a2:	f000 f993 	bl	800f7cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f4b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	609a      	str	r2, [r3, #8]
      break;
 800f4be:	e04f      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f4d0:	f000 f97c 	bl	800f7cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	689a      	ldr	r2, [r3, #8]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f4e2:	609a      	str	r2, [r3, #8]
      break;
 800f4e4:	e03c      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	f000 f8f0 	bl	800f6d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2150      	movs	r1, #80	@ 0x50
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 f949 	bl	800f796 <TIM_ITRx_SetConfig>
      break;
 800f504:	e02c      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f512:	461a      	mov	r2, r3
 800f514:	f000 f90f 	bl	800f736 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2160      	movs	r1, #96	@ 0x60
 800f51e:	4618      	mov	r0, r3
 800f520:	f000 f939 	bl	800f796 <TIM_ITRx_SetConfig>
      break;
 800f524:	e01c      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f532:	461a      	mov	r2, r3
 800f534:	f000 f8d0 	bl	800f6d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2140      	movs	r1, #64	@ 0x40
 800f53e:	4618      	mov	r0, r3
 800f540:	f000 f929 	bl	800f796 <TIM_ITRx_SetConfig>
      break;
 800f544:	e00c      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4619      	mov	r1, r3
 800f550:	4610      	mov	r0, r2
 800f552:	f000 f920 	bl	800f796 <TIM_ITRx_SetConfig>
      break;
 800f556:	e003      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f558:	2301      	movs	r3, #1
 800f55a:	73fb      	strb	r3, [r7, #15]
      break;
 800f55c:	e000      	b.n	800f560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f55e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f570:	7bfb      	ldrb	r3, [r7, #15]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f57a:	b480      	push	{r7}
 800f57c:	b083      	sub	sp, #12
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f582:	bf00      	nop
 800f584:	370c      	adds	r7, #12
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f58e:	b480      	push	{r7}
 800f590:	b083      	sub	sp, #12
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f596:	bf00      	nop
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f5aa:	bf00      	nop
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f5be:	bf00      	nop
 800f5c0:	370c      	adds	r7, #12
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
	...

0800f5cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a37      	ldr	r2, [pc, #220]	@ (800f6bc <TIM_Base_SetConfig+0xf0>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d00f      	beq.n	800f604 <TIM_Base_SetConfig+0x38>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ea:	d00b      	beq.n	800f604 <TIM_Base_SetConfig+0x38>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a34      	ldr	r2, [pc, #208]	@ (800f6c0 <TIM_Base_SetConfig+0xf4>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d007      	beq.n	800f604 <TIM_Base_SetConfig+0x38>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a33      	ldr	r2, [pc, #204]	@ (800f6c4 <TIM_Base_SetConfig+0xf8>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d003      	beq.n	800f604 <TIM_Base_SetConfig+0x38>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a32      	ldr	r2, [pc, #200]	@ (800f6c8 <TIM_Base_SetConfig+0xfc>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d108      	bne.n	800f616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f60a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	4313      	orrs	r3, r2
 800f614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a28      	ldr	r2, [pc, #160]	@ (800f6bc <TIM_Base_SetConfig+0xf0>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d01b      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f624:	d017      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a25      	ldr	r2, [pc, #148]	@ (800f6c0 <TIM_Base_SetConfig+0xf4>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d013      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a24      	ldr	r2, [pc, #144]	@ (800f6c4 <TIM_Base_SetConfig+0xf8>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d00f      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4a23      	ldr	r2, [pc, #140]	@ (800f6c8 <TIM_Base_SetConfig+0xfc>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d00b      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a22      	ldr	r2, [pc, #136]	@ (800f6cc <TIM_Base_SetConfig+0x100>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d007      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a21      	ldr	r2, [pc, #132]	@ (800f6d0 <TIM_Base_SetConfig+0x104>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d003      	beq.n	800f656 <TIM_Base_SetConfig+0x8a>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a20      	ldr	r2, [pc, #128]	@ (800f6d4 <TIM_Base_SetConfig+0x108>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d108      	bne.n	800f668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f65c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	68fa      	ldr	r2, [r7, #12]
 800f664:	4313      	orrs	r3, r2
 800f666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	4313      	orrs	r3, r2
 800f674:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	689a      	ldr	r2, [r3, #8]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a0c      	ldr	r2, [pc, #48]	@ (800f6bc <TIM_Base_SetConfig+0xf0>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d103      	bne.n	800f696 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	691a      	ldr	r2, [r3, #16]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f043 0204 	orr.w	r2, r3, #4
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	601a      	str	r2, [r3, #0]
}
 800f6ae:	bf00      	nop
 800f6b0:	3714      	adds	r7, #20
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	40010000 	.word	0x40010000
 800f6c0:	40000400 	.word	0x40000400
 800f6c4:	40000800 	.word	0x40000800
 800f6c8:	40000c00 	.word	0x40000c00
 800f6cc:	40014000 	.word	0x40014000
 800f6d0:	40014400 	.word	0x40014400
 800f6d4:	40014800 	.word	0x40014800

0800f6d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b087      	sub	sp, #28
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	f023 0201 	bic.w	r2, r3, #1
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	011b      	lsls	r3, r3, #4
 800f708:	693a      	ldr	r2, [r7, #16]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	f023 030a 	bic.w	r3, r3, #10
 800f714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	693a      	ldr	r2, [r7, #16]
 800f722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	697a      	ldr	r2, [r7, #20]
 800f728:	621a      	str	r2, [r3, #32]
}
 800f72a:	bf00      	nop
 800f72c:	371c      	adds	r7, #28
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr

0800f736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f736:	b480      	push	{r7}
 800f738:	b087      	sub	sp, #28
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	60f8      	str	r0, [r7, #12]
 800f73e:	60b9      	str	r1, [r7, #8]
 800f740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6a1b      	ldr	r3, [r3, #32]
 800f74c:	f023 0210 	bic.w	r2, r3, #16
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	699b      	ldr	r3, [r3, #24]
 800f758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	031b      	lsls	r3, r3, #12
 800f766:	693a      	ldr	r2, [r7, #16]
 800f768:	4313      	orrs	r3, r2
 800f76a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f772:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	011b      	lsls	r3, r3, #4
 800f778:	697a      	ldr	r2, [r7, #20]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	697a      	ldr	r2, [r7, #20]
 800f788:	621a      	str	r2, [r3, #32]
}
 800f78a:	bf00      	nop
 800f78c:	371c      	adds	r7, #28
 800f78e:	46bd      	mov	sp, r7
 800f790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f794:	4770      	bx	lr

0800f796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f796:	b480      	push	{r7}
 800f798:	b085      	sub	sp, #20
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
 800f79e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7ae:	683a      	ldr	r2, [r7, #0]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	f043 0307 	orr.w	r3, r3, #7
 800f7b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	609a      	str	r2, [r3, #8]
}
 800f7c0:	bf00      	nop
 800f7c2:	3714      	adds	r7, #20
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b087      	sub	sp, #28
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
 800f7d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f7e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	021a      	lsls	r2, r3, #8
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	431a      	orrs	r2, r3
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	697a      	ldr	r2, [r7, #20]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	697a      	ldr	r2, [r7, #20]
 800f7fe:	609a      	str	r2, [r3, #8]
}
 800f800:	bf00      	nop
 800f802:	371c      	adds	r7, #28
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b085      	sub	sp, #20
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d101      	bne.n	800f824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f820:	2302      	movs	r3, #2
 800f822:	e050      	b.n	800f8c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2202      	movs	r2, #2
 800f830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f84a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	4313      	orrs	r3, r2
 800f854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a1c      	ldr	r2, [pc, #112]	@ (800f8d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d018      	beq.n	800f89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f870:	d013      	beq.n	800f89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4a18      	ldr	r2, [pc, #96]	@ (800f8d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d00e      	beq.n	800f89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a16      	ldr	r2, [pc, #88]	@ (800f8dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d009      	beq.n	800f89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a15      	ldr	r2, [pc, #84]	@ (800f8e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d004      	beq.n	800f89a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a13      	ldr	r2, [pc, #76]	@ (800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d10c      	bne.n	800f8b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f8a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	68ba      	ldr	r2, [r7, #8]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f8c4:	2300      	movs	r3, #0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	40010000 	.word	0x40010000
 800f8d8:	40000400 	.word	0x40000400
 800f8dc:	40000800 	.word	0x40000800
 800f8e0:	40000c00 	.word	0x40000c00
 800f8e4:	40014000 	.word	0x40014000

0800f8e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d101      	bne.n	800f922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f91e:	2301      	movs	r3, #1
 800f920:	e042      	b.n	800f9a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d106      	bne.n	800f93c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7fa f928 	bl	8009b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2224      	movs	r2, #36	@ 0x24
 800f940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	68da      	ldr	r2, [r3, #12]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 fe15 	bl	8010584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	691a      	ldr	r2, [r3, #16]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	695a      	ldr	r2, [r3, #20]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68da      	ldr	r2, [r3, #12]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2220      	movs	r2, #32
 800f994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2220      	movs	r2, #32
 800f99c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b08a      	sub	sp, #40	@ 0x28
 800f9b4:	af02      	add	r7, sp, #8
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	603b      	str	r3, [r7, #0]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b20      	cmp	r3, #32
 800f9ce:	d175      	bne.n	800fabc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d002      	beq.n	800f9dc <HAL_UART_Transmit+0x2c>
 800f9d6:	88fb      	ldrh	r3, [r7, #6]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d101      	bne.n	800f9e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	e06e      	b.n	800fabe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2221      	movs	r2, #33	@ 0x21
 800f9ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f9ee:	f7fb f801 	bl	800a9f4 <HAL_GetTick>
 800f9f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	88fa      	ldrh	r2, [r7, #6]
 800f9f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	88fa      	ldrh	r2, [r7, #6]
 800f9fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa08:	d108      	bne.n	800fa1c <HAL_UART_Transmit+0x6c>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d104      	bne.n	800fa1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	61bb      	str	r3, [r7, #24]
 800fa1a:	e003      	b.n	800fa24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa20:	2300      	movs	r3, #0
 800fa22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fa24:	e02e      	b.n	800fa84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	9300      	str	r3, [sp, #0]
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	2180      	movs	r1, #128	@ 0x80
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f000 fbb3 	bl	801019c <UART_WaitOnFlagUntilTimeout>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d005      	beq.n	800fa48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2220      	movs	r2, #32
 800fa40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800fa44:	2303      	movs	r3, #3
 800fa46:	e03a      	b.n	800fabe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10b      	bne.n	800fa66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	461a      	mov	r2, r3
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	3302      	adds	r3, #2
 800fa62:	61bb      	str	r3, [r7, #24]
 800fa64:	e007      	b.n	800fa76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	781a      	ldrb	r2, [r3, #0]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	3301      	adds	r3, #1
 800fa74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1cb      	bne.n	800fa26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	2200      	movs	r2, #0
 800fa96:	2140      	movs	r1, #64	@ 0x40
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f000 fb7f 	bl	801019c <UART_WaitOnFlagUntilTimeout>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d005      	beq.n	800fab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2220      	movs	r2, #32
 800faa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800faac:	2303      	movs	r3, #3
 800faae:	e006      	b.n	800fabe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2220      	movs	r2, #32
 800fab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	e000      	b.n	800fabe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800fabc:	2302      	movs	r3, #2
  }
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3720      	adds	r7, #32
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b08a      	sub	sp, #40	@ 0x28
 800faca:	af02      	add	r7, sp, #8
 800facc:	60f8      	str	r0, [r7, #12]
 800face:	60b9      	str	r1, [r7, #8]
 800fad0:	603b      	str	r3, [r7, #0]
 800fad2:	4613      	mov	r3, r2
 800fad4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fad6:	2300      	movs	r3, #0
 800fad8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b20      	cmp	r3, #32
 800fae4:	f040 8081 	bne.w	800fbea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <HAL_UART_Receive+0x2e>
 800faee:	88fb      	ldrh	r3, [r7, #6]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	e079      	b.n	800fbec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2200      	movs	r2, #0
 800fafc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2222      	movs	r2, #34	@ 0x22
 800fb02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb0c:	f7fa ff72 	bl	800a9f4 <HAL_GetTick>
 800fb10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	88fa      	ldrh	r2, [r7, #6]
 800fb16:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	88fa      	ldrh	r2, [r7, #6]
 800fb1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb26:	d108      	bne.n	800fb3a <HAL_UART_Receive+0x74>
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d104      	bne.n	800fb3a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800fb30:	2300      	movs	r3, #0
 800fb32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	61bb      	str	r3, [r7, #24]
 800fb38:	e003      	b.n	800fb42 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800fb42:	e047      	b.n	800fbd4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	2120      	movs	r1, #32
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f000 fb24 	bl	801019c <UART_WaitOnFlagUntilTimeout>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d005      	beq.n	800fb66 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2220      	movs	r2, #32
 800fb5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800fb62:	2303      	movs	r3, #3
 800fb64:	e042      	b.n	800fbec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10c      	bne.n	800fb86 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	3302      	adds	r3, #2
 800fb82:	61bb      	str	r3, [r7, #24]
 800fb84:	e01f      	b.n	800fbc6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb8e:	d007      	beq.n	800fba0 <HAL_UART_Receive+0xda>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d10a      	bne.n	800fbae <HAL_UART_Receive+0xe8>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d106      	bne.n	800fbae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	701a      	strb	r2, [r3, #0]
 800fbac:	e008      	b.n	800fbc0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1b2      	bne.n	800fb44 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2220      	movs	r2, #32
 800fbe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	e000      	b.n	800fbec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800fbea:	2302      	movs	r3, #2
  }
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3720      	adds	r7, #32
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b0ba      	sub	sp, #232	@ 0xe8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800fc20:	2300      	movs	r3, #0
 800fc22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc2a:	f003 030f 	and.w	r3, r3, #15
 800fc2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800fc32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10f      	bne.n	800fc5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc3e:	f003 0320 	and.w	r3, r3, #32
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d009      	beq.n	800fc5a <HAL_UART_IRQHandler+0x66>
 800fc46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc4a:	f003 0320 	and.w	r3, r3, #32
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d003      	beq.n	800fc5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 fbd7 	bl	8010406 <UART_Receive_IT>
      return;
 800fc58:	e273      	b.n	8010142 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fc5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f000 80de 	beq.w	800fe20 <HAL_UART_IRQHandler+0x22c>
 800fc64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc68:	f003 0301 	and.w	r3, r3, #1
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 80d1 	beq.w	800fe20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00b      	beq.n	800fca2 <HAL_UART_IRQHandler+0xae>
 800fc8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d005      	beq.n	800fca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc9a:	f043 0201 	orr.w	r2, r3, #1
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fca6:	f003 0304 	and.w	r3, r3, #4
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00b      	beq.n	800fcc6 <HAL_UART_IRQHandler+0xd2>
 800fcae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcb2:	f003 0301 	and.w	r3, r3, #1
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d005      	beq.n	800fcc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcbe:	f043 0202 	orr.w	r2, r3, #2
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800fcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcca:	f003 0302 	and.w	r3, r3, #2
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d00b      	beq.n	800fcea <HAL_UART_IRQHandler+0xf6>
 800fcd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcd6:	f003 0301 	and.w	r3, r3, #1
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d005      	beq.n	800fcea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce2:	f043 0204 	orr.w	r2, r3, #4
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800fcea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcee:	f003 0308 	and.w	r3, r3, #8
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d011      	beq.n	800fd1a <HAL_UART_IRQHandler+0x126>
 800fcf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcfa:	f003 0320 	and.w	r3, r3, #32
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d105      	bne.n	800fd0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800fd02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd06:	f003 0301 	and.w	r3, r3, #1
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d005      	beq.n	800fd1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd12:	f043 0208 	orr.w	r2, r3, #8
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 820a 	beq.w	8010138 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fd24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd28:	f003 0320 	and.w	r3, r3, #32
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d008      	beq.n	800fd42 <HAL_UART_IRQHandler+0x14e>
 800fd30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd34:	f003 0320 	and.w	r3, r3, #32
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d002      	beq.n	800fd42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 fb62 	bl	8010406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd4c:	2b40      	cmp	r3, #64	@ 0x40
 800fd4e:	bf0c      	ite	eq
 800fd50:	2301      	moveq	r3, #1
 800fd52:	2300      	movne	r3, #0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd5e:	f003 0308 	and.w	r3, r3, #8
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d103      	bne.n	800fd6e <HAL_UART_IRQHandler+0x17a>
 800fd66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d04f      	beq.n	800fe0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fa6d 	bl	801024e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	695b      	ldr	r3, [r3, #20]
 800fd7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd7e:	2b40      	cmp	r3, #64	@ 0x40
 800fd80:	d141      	bne.n	800fe06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3314      	adds	r3, #20
 800fd88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fd90:	e853 3f00 	ldrex	r3, [r3]
 800fd94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fd98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fda0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3314      	adds	r3, #20
 800fdaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fdae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fdb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fdba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fdbe:	e841 2300 	strex	r3, r2, [r1]
 800fdc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fdc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1d9      	bne.n	800fd82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d013      	beq.n	800fdfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdda:	4a8a      	ldr	r2, [pc, #552]	@ (8010004 <HAL_UART_IRQHandler+0x410>)
 800fddc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fb f806 	bl	800adf4 <HAL_DMA_Abort_IT>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d016      	beq.n	800fe1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdfc:	e00e      	b.n	800fe1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 f9b6 	bl	8010170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe04:	e00a      	b.n	800fe1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f9b2 	bl	8010170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe0c:	e006      	b.n	800fe1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 f9ae 	bl	8010170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2200      	movs	r2, #0
 800fe18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800fe1a:	e18d      	b.n	8010138 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe1c:	bf00      	nop
    return;
 800fe1e:	e18b      	b.n	8010138 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	f040 8167 	bne.w	80100f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800fe2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe2e:	f003 0310 	and.w	r3, r3, #16
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f000 8160 	beq.w	80100f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800fe38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe3c:	f003 0310 	and.w	r3, r3, #16
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	f000 8159 	beq.w	80100f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fe46:	2300      	movs	r3, #0
 800fe48:	60bb      	str	r3, [r7, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	60bb      	str	r3, [r7, #8]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	60bb      	str	r3, [r7, #8]
 800fe5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	695b      	ldr	r3, [r3, #20]
 800fe62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe66:	2b40      	cmp	r3, #64	@ 0x40
 800fe68:	f040 80ce 	bne.w	8010008 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fe78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f000 80a9 	beq.w	800ffd4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fe86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	f080 80a2 	bcs.w	800ffd4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fe96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe9c:	69db      	ldr	r3, [r3, #28]
 800fe9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fea2:	f000 8088 	beq.w	800ffb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	330c      	adds	r3, #12
 800feac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800feb4:	e853 3f00 	ldrex	r3, [r3]
 800feb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800febc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	330c      	adds	r3, #12
 800fece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fede:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fee2:	e841 2300 	strex	r3, r2, [r1]
 800fee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800feea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1d9      	bne.n	800fea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	3314      	adds	r3, #20
 800fef8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fefc:	e853 3f00 	ldrex	r3, [r3]
 800ff00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ff02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff04:	f023 0301 	bic.w	r3, r3, #1
 800ff08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	3314      	adds	r3, #20
 800ff12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ff1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff22:	e841 2300 	strex	r3, r2, [r1]
 800ff26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1e1      	bne.n	800fef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	3314      	adds	r3, #20
 800ff34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff38:	e853 3f00 	ldrex	r3, [r3]
 800ff3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ff3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3314      	adds	r3, #20
 800ff4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ff52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ff54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ff58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ff5a:	e841 2300 	strex	r3, r2, [r1]
 800ff5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ff60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d1e3      	bne.n	800ff2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	330c      	adds	r3, #12
 800ff7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff7e:	e853 3f00 	ldrex	r3, [r3]
 800ff82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ff84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff86:	f023 0310 	bic.w	r3, r3, #16
 800ff8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	330c      	adds	r3, #12
 800ff94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ff98:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ff9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ff9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ffa0:	e841 2300 	strex	r3, r2, [r1]
 800ffa4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ffa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1e3      	bne.n	800ff74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fa feaf 	bl	800ad14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2202      	movs	r2, #2
 800ffba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	1ad3      	subs	r3, r2, r3
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	4619      	mov	r1, r3
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 f8d9 	bl	8010184 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ffd2:	e0b3      	b.n	801013c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ffd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	f040 80ad 	bne.w	801013c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ffec:	f040 80a6 	bne.w	801013c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2202      	movs	r2, #2
 800fff4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fffa:	4619      	mov	r1, r3
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 f8c1 	bl	8010184 <HAL_UARTEx_RxEventCallback>
      return;
 8010002:	e09b      	b.n	801013c <HAL_UART_IRQHandler+0x548>
 8010004:	08010315 	.word	0x08010315
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010010:	b29b      	uxth	r3, r3
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801001c:	b29b      	uxth	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 808e 	beq.w	8010140 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8010024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 8089 	beq.w	8010140 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	330c      	adds	r3, #12
 8010034:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010038:	e853 3f00 	ldrex	r3, [r3]
 801003c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801003e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	330c      	adds	r3, #12
 801004e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010052:	647a      	str	r2, [r7, #68]	@ 0x44
 8010054:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010056:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801005a:	e841 2300 	strex	r3, r2, [r1]
 801005e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1e3      	bne.n	801002e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	3314      	adds	r3, #20
 801006c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010070:	e853 3f00 	ldrex	r3, [r3]
 8010074:	623b      	str	r3, [r7, #32]
   return(result);
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	f023 0301 	bic.w	r3, r3, #1
 801007c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3314      	adds	r3, #20
 8010086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801008a:	633a      	str	r2, [r7, #48]	@ 0x30
 801008c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010092:	e841 2300 	strex	r3, r2, [r1]
 8010096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1e3      	bne.n	8010066 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2220      	movs	r2, #32
 80100a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	330c      	adds	r3, #12
 80100b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	e853 3f00 	ldrex	r3, [r3]
 80100ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f023 0310 	bic.w	r3, r3, #16
 80100c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	330c      	adds	r3, #12
 80100cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80100d0:	61fa      	str	r2, [r7, #28]
 80100d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d4:	69b9      	ldr	r1, [r7, #24]
 80100d6:	69fa      	ldr	r2, [r7, #28]
 80100d8:	e841 2300 	strex	r3, r2, [r1]
 80100dc:	617b      	str	r3, [r7, #20]
   return(result);
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d1e3      	bne.n	80100ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2202      	movs	r2, #2
 80100e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80100ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80100ee:	4619      	mov	r1, r3
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 f847 	bl	8010184 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80100f6:	e023      	b.n	8010140 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80100f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010100:	2b00      	cmp	r3, #0
 8010102:	d009      	beq.n	8010118 <HAL_UART_IRQHandler+0x524>
 8010104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801010c:	2b00      	cmp	r3, #0
 801010e:	d003      	beq.n	8010118 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 f910 	bl	8010336 <UART_Transmit_IT>
    return;
 8010116:	e014      	b.n	8010142 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801011c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00e      	beq.n	8010142 <HAL_UART_IRQHandler+0x54e>
 8010124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801012c:	2b00      	cmp	r3, #0
 801012e:	d008      	beq.n	8010142 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f950 	bl	80103d6 <UART_EndTransmit_IT>
    return;
 8010136:	e004      	b.n	8010142 <HAL_UART_IRQHandler+0x54e>
    return;
 8010138:	bf00      	nop
 801013a:	e002      	b.n	8010142 <HAL_UART_IRQHandler+0x54e>
      return;
 801013c:	bf00      	nop
 801013e:	e000      	b.n	8010142 <HAL_UART_IRQHandler+0x54e>
      return;
 8010140:	bf00      	nop
  }
}
 8010142:	37e8      	adds	r7, #232	@ 0xe8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010150:	bf00      	nop
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010164:	bf00      	nop
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010190:	bf00      	nop
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	603b      	str	r3, [r7, #0]
 80101a8:	4613      	mov	r3, r2
 80101aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101ac:	e03b      	b.n	8010226 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101b4:	d037      	beq.n	8010226 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101b6:	f7fa fc1d 	bl	800a9f4 <HAL_GetTick>
 80101ba:	4602      	mov	r2, r0
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	6a3a      	ldr	r2, [r7, #32]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d302      	bcc.n	80101cc <UART_WaitOnFlagUntilTimeout+0x30>
 80101c6:	6a3b      	ldr	r3, [r7, #32]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80101cc:	2303      	movs	r3, #3
 80101ce:	e03a      	b.n	8010246 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	f003 0304 	and.w	r3, r3, #4
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d023      	beq.n	8010226 <UART_WaitOnFlagUntilTimeout+0x8a>
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	2b80      	cmp	r3, #128	@ 0x80
 80101e2:	d020      	beq.n	8010226 <UART_WaitOnFlagUntilTimeout+0x8a>
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	2b40      	cmp	r3, #64	@ 0x40
 80101e8:	d01d      	beq.n	8010226 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f003 0308 	and.w	r3, r3, #8
 80101f4:	2b08      	cmp	r3, #8
 80101f6:	d116      	bne.n	8010226 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80101f8:	2300      	movs	r3, #0
 80101fa:	617b      	str	r3, [r7, #20]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	617b      	str	r3, [r7, #20]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	617b      	str	r3, [r7, #20]
 801020c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f81d 	bl	801024e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2208      	movs	r2, #8
 8010218:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	2200      	movs	r2, #0
 801021e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010222:	2301      	movs	r3, #1
 8010224:	e00f      	b.n	8010246 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	4013      	ands	r3, r2
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	429a      	cmp	r2, r3
 8010234:	bf0c      	ite	eq
 8010236:	2301      	moveq	r3, #1
 8010238:	2300      	movne	r3, #0
 801023a:	b2db      	uxtb	r3, r3
 801023c:	461a      	mov	r2, r3
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	429a      	cmp	r2, r3
 8010242:	d0b4      	beq.n	80101ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3718      	adds	r7, #24
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801024e:	b480      	push	{r7}
 8010250:	b095      	sub	sp, #84	@ 0x54
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	330c      	adds	r3, #12
 801025c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010260:	e853 3f00 	ldrex	r3, [r3]
 8010264:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801026c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	330c      	adds	r3, #12
 8010274:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010276:	643a      	str	r2, [r7, #64]	@ 0x40
 8010278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801027c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801027e:	e841 2300 	strex	r3, r2, [r1]
 8010282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1e5      	bne.n	8010256 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3314      	adds	r3, #20
 8010290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010292:	6a3b      	ldr	r3, [r7, #32]
 8010294:	e853 3f00 	ldrex	r3, [r3]
 8010298:	61fb      	str	r3, [r7, #28]
   return(result);
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	f023 0301 	bic.w	r3, r3, #1
 80102a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	3314      	adds	r3, #20
 80102a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102b2:	e841 2300 	strex	r3, r2, [r1]
 80102b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1e5      	bne.n	801028a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d119      	bne.n	80102fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	330c      	adds	r3, #12
 80102cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	e853 3f00 	ldrex	r3, [r3]
 80102d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	f023 0310 	bic.w	r3, r3, #16
 80102dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	330c      	adds	r3, #12
 80102e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102e6:	61ba      	str	r2, [r7, #24]
 80102e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ea:	6979      	ldr	r1, [r7, #20]
 80102ec:	69ba      	ldr	r2, [r7, #24]
 80102ee:	e841 2300 	strex	r3, r2, [r1]
 80102f2:	613b      	str	r3, [r7, #16]
   return(result);
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d1e5      	bne.n	80102c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2220      	movs	r2, #32
 80102fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010308:	bf00      	nop
 801030a:	3754      	adds	r7, #84	@ 0x54
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010320:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f7ff ff21 	bl	8010170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801032e:	bf00      	nop
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010336:	b480      	push	{r7}
 8010338:	b085      	sub	sp, #20
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2b21      	cmp	r3, #33	@ 0x21
 8010348:	d13e      	bne.n	80103c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010352:	d114      	bne.n	801037e <UART_Transmit_IT+0x48>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d110      	bne.n	801037e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6a1b      	ldr	r3, [r3, #32]
 8010360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	881b      	ldrh	r3, [r3, #0]
 8010366:	461a      	mov	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a1b      	ldr	r3, [r3, #32]
 8010376:	1c9a      	adds	r2, r3, #2
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	621a      	str	r2, [r3, #32]
 801037c:	e008      	b.n	8010390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6a1b      	ldr	r3, [r3, #32]
 8010382:	1c59      	adds	r1, r3, #1
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	6211      	str	r1, [r2, #32]
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010394:	b29b      	uxth	r3, r3
 8010396:	3b01      	subs	r3, #1
 8010398:	b29b      	uxth	r3, r3
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	4619      	mov	r1, r3
 801039e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10f      	bne.n	80103c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	68da      	ldr	r2, [r3, #12]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80103b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	68da      	ldr	r2, [r3, #12]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80103c4:	2300      	movs	r3, #0
 80103c6:	e000      	b.n	80103ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80103c8:	2302      	movs	r3, #2
  }
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3714      	adds	r7, #20
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b082      	sub	sp, #8
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	68da      	ldr	r2, [r3, #12]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80103ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2220      	movs	r2, #32
 80103f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7ff fea6 	bl	8010148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b08c      	sub	sp, #48	@ 0x30
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 801040e:	2300      	movs	r3, #0
 8010410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8010412:	2300      	movs	r3, #0
 8010414:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b22      	cmp	r3, #34	@ 0x22
 8010420:	f040 80aa 	bne.w	8010578 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801042c:	d115      	bne.n	801045a <UART_Receive_IT+0x54>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	691b      	ldr	r3, [r3, #16]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d111      	bne.n	801045a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801043a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	b29b      	uxth	r3, r3
 8010444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010448:	b29a      	uxth	r2, r3
 801044a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801044c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010452:	1c9a      	adds	r2, r3, #2
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	629a      	str	r2, [r3, #40]	@ 0x28
 8010458:	e024      	b.n	80104a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801045e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010468:	d007      	beq.n	801047a <UART_Receive_IT+0x74>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10a      	bne.n	8010488 <UART_Receive_IT+0x82>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	691b      	ldr	r3, [r3, #16]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d106      	bne.n	8010488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	b2da      	uxtb	r2, r3
 8010482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010484:	701a      	strb	r2, [r3, #0]
 8010486:	e008      	b.n	801049a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	b2db      	uxtb	r3, r3
 8010490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010494:	b2da      	uxtb	r2, r3
 8010496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801049e:	1c5a      	adds	r2, r3, #1
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	3b01      	subs	r3, #1
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	4619      	mov	r1, r3
 80104b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d15d      	bne.n	8010574 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	68da      	ldr	r2, [r3, #12]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f022 0220 	bic.w	r2, r2, #32
 80104c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68da      	ldr	r2, [r3, #12]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80104d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	695a      	ldr	r2, [r3, #20]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f022 0201 	bic.w	r2, r2, #1
 80104e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2220      	movs	r2, #32
 80104ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d135      	bne.n	801056a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2200      	movs	r2, #0
 8010502:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	330c      	adds	r3, #12
 801050a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	e853 3f00 	ldrex	r3, [r3]
 8010512:	613b      	str	r3, [r7, #16]
   return(result);
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	f023 0310 	bic.w	r3, r3, #16
 801051a:	627b      	str	r3, [r7, #36]	@ 0x24
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	330c      	adds	r3, #12
 8010522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010524:	623a      	str	r2, [r7, #32]
 8010526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010528:	69f9      	ldr	r1, [r7, #28]
 801052a:	6a3a      	ldr	r2, [r7, #32]
 801052c:	e841 2300 	strex	r3, r2, [r1]
 8010530:	61bb      	str	r3, [r7, #24]
   return(result);
 8010532:	69bb      	ldr	r3, [r7, #24]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1e5      	bne.n	8010504 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f003 0310 	and.w	r3, r3, #16
 8010542:	2b10      	cmp	r3, #16
 8010544:	d10a      	bne.n	801055c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010546:	2300      	movs	r3, #0
 8010548:	60fb      	str	r3, [r7, #12]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010560:	4619      	mov	r1, r3
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff fe0e 	bl	8010184 <HAL_UARTEx_RxEventCallback>
 8010568:	e002      	b.n	8010570 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fdf6 	bl	801015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	e002      	b.n	801057a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8010574:	2300      	movs	r3, #0
 8010576:	e000      	b.n	801057a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8010578:	2302      	movs	r3, #2
  }
}
 801057a:	4618      	mov	r0, r3
 801057c:	3730      	adds	r7, #48	@ 0x30
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
	...

08010584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010588:	b0c0      	sub	sp, #256	@ 0x100
 801058a:	af00      	add	r7, sp, #0
 801058c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	691b      	ldr	r3, [r3, #16]
 8010598:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801059c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105a0:	68d9      	ldr	r1, [r3, #12]
 80105a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	ea40 0301 	orr.w	r3, r0, r1
 80105ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80105ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	431a      	orrs	r2, r3
 80105bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105c0:	695b      	ldr	r3, [r3, #20]
 80105c2:	431a      	orrs	r2, r3
 80105c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105c8:	69db      	ldr	r3, [r3, #28]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80105d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80105dc:	f021 010c 	bic.w	r1, r1, #12
 80105e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80105ea:	430b      	orrs	r3, r1
 80105ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80105ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80105fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105fe:	6999      	ldr	r1, [r3, #24]
 8010600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	ea40 0301 	orr.w	r3, r0, r1
 801060a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801060c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	4b8f      	ldr	r3, [pc, #572]	@ (8010850 <UART_SetConfig+0x2cc>)
 8010614:	429a      	cmp	r2, r3
 8010616:	d005      	beq.n	8010624 <UART_SetConfig+0xa0>
 8010618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	4b8d      	ldr	r3, [pc, #564]	@ (8010854 <UART_SetConfig+0x2d0>)
 8010620:	429a      	cmp	r2, r3
 8010622:	d104      	bne.n	801062e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010624:	f7fe fd2c 	bl	800f080 <HAL_RCC_GetPCLK2Freq>
 8010628:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801062c:	e003      	b.n	8010636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801062e:	f7fe fd13 	bl	800f058 <HAL_RCC_GetPCLK1Freq>
 8010632:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010640:	f040 810c 	bne.w	801085c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010648:	2200      	movs	r2, #0
 801064a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801064e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010656:	4622      	mov	r2, r4
 8010658:	462b      	mov	r3, r5
 801065a:	1891      	adds	r1, r2, r2
 801065c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801065e:	415b      	adcs	r3, r3
 8010660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010666:	4621      	mov	r1, r4
 8010668:	eb12 0801 	adds.w	r8, r2, r1
 801066c:	4629      	mov	r1, r5
 801066e:	eb43 0901 	adc.w	r9, r3, r1
 8010672:	f04f 0200 	mov.w	r2, #0
 8010676:	f04f 0300 	mov.w	r3, #0
 801067a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801067e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010686:	4690      	mov	r8, r2
 8010688:	4699      	mov	r9, r3
 801068a:	4623      	mov	r3, r4
 801068c:	eb18 0303 	adds.w	r3, r8, r3
 8010690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010694:	462b      	mov	r3, r5
 8010696:	eb49 0303 	adc.w	r3, r9, r3
 801069a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801069e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80106aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80106ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80106b2:	460b      	mov	r3, r1
 80106b4:	18db      	adds	r3, r3, r3
 80106b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80106b8:	4613      	mov	r3, r2
 80106ba:	eb42 0303 	adc.w	r3, r2, r3
 80106be:	657b      	str	r3, [r7, #84]	@ 0x54
 80106c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80106c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80106c8:	f7ef fde2 	bl	8000290 <__aeabi_uldivmod>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	4b61      	ldr	r3, [pc, #388]	@ (8010858 <UART_SetConfig+0x2d4>)
 80106d2:	fba3 2302 	umull	r2, r3, r3, r2
 80106d6:	095b      	lsrs	r3, r3, #5
 80106d8:	011c      	lsls	r4, r3, #4
 80106da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106de:	2200      	movs	r2, #0
 80106e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80106e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80106e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80106ec:	4642      	mov	r2, r8
 80106ee:	464b      	mov	r3, r9
 80106f0:	1891      	adds	r1, r2, r2
 80106f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80106f4:	415b      	adcs	r3, r3
 80106f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80106fc:	4641      	mov	r1, r8
 80106fe:	eb12 0a01 	adds.w	sl, r2, r1
 8010702:	4649      	mov	r1, r9
 8010704:	eb43 0b01 	adc.w	fp, r3, r1
 8010708:	f04f 0200 	mov.w	r2, #0
 801070c:	f04f 0300 	mov.w	r3, #0
 8010710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801071c:	4692      	mov	sl, r2
 801071e:	469b      	mov	fp, r3
 8010720:	4643      	mov	r3, r8
 8010722:	eb1a 0303 	adds.w	r3, sl, r3
 8010726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801072a:	464b      	mov	r3, r9
 801072c:	eb4b 0303 	adc.w	r3, fp, r3
 8010730:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010740:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010748:	460b      	mov	r3, r1
 801074a:	18db      	adds	r3, r3, r3
 801074c:	643b      	str	r3, [r7, #64]	@ 0x40
 801074e:	4613      	mov	r3, r2
 8010750:	eb42 0303 	adc.w	r3, r2, r3
 8010754:	647b      	str	r3, [r7, #68]	@ 0x44
 8010756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801075a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801075e:	f7ef fd97 	bl	8000290 <__aeabi_uldivmod>
 8010762:	4602      	mov	r2, r0
 8010764:	460b      	mov	r3, r1
 8010766:	4611      	mov	r1, r2
 8010768:	4b3b      	ldr	r3, [pc, #236]	@ (8010858 <UART_SetConfig+0x2d4>)
 801076a:	fba3 2301 	umull	r2, r3, r3, r1
 801076e:	095b      	lsrs	r3, r3, #5
 8010770:	2264      	movs	r2, #100	@ 0x64
 8010772:	fb02 f303 	mul.w	r3, r2, r3
 8010776:	1acb      	subs	r3, r1, r3
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801077e:	4b36      	ldr	r3, [pc, #216]	@ (8010858 <UART_SetConfig+0x2d4>)
 8010780:	fba3 2302 	umull	r2, r3, r3, r2
 8010784:	095b      	lsrs	r3, r3, #5
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801078c:	441c      	add	r4, r3
 801078e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010792:	2200      	movs	r2, #0
 8010794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010798:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801079c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80107a0:	4642      	mov	r2, r8
 80107a2:	464b      	mov	r3, r9
 80107a4:	1891      	adds	r1, r2, r2
 80107a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80107a8:	415b      	adcs	r3, r3
 80107aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80107ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80107b0:	4641      	mov	r1, r8
 80107b2:	1851      	adds	r1, r2, r1
 80107b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80107b6:	4649      	mov	r1, r9
 80107b8:	414b      	adcs	r3, r1
 80107ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80107bc:	f04f 0200 	mov.w	r2, #0
 80107c0:	f04f 0300 	mov.w	r3, #0
 80107c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80107c8:	4659      	mov	r1, fp
 80107ca:	00cb      	lsls	r3, r1, #3
 80107cc:	4651      	mov	r1, sl
 80107ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80107d2:	4651      	mov	r1, sl
 80107d4:	00ca      	lsls	r2, r1, #3
 80107d6:	4610      	mov	r0, r2
 80107d8:	4619      	mov	r1, r3
 80107da:	4603      	mov	r3, r0
 80107dc:	4642      	mov	r2, r8
 80107de:	189b      	adds	r3, r3, r2
 80107e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80107e4:	464b      	mov	r3, r9
 80107e6:	460a      	mov	r2, r1
 80107e8:	eb42 0303 	adc.w	r3, r2, r3
 80107ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80107f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	2200      	movs	r2, #0
 80107f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80107fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010804:	460b      	mov	r3, r1
 8010806:	18db      	adds	r3, r3, r3
 8010808:	62bb      	str	r3, [r7, #40]	@ 0x28
 801080a:	4613      	mov	r3, r2
 801080c:	eb42 0303 	adc.w	r3, r2, r3
 8010810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801081a:	f7ef fd39 	bl	8000290 <__aeabi_uldivmod>
 801081e:	4602      	mov	r2, r0
 8010820:	460b      	mov	r3, r1
 8010822:	4b0d      	ldr	r3, [pc, #52]	@ (8010858 <UART_SetConfig+0x2d4>)
 8010824:	fba3 1302 	umull	r1, r3, r3, r2
 8010828:	095b      	lsrs	r3, r3, #5
 801082a:	2164      	movs	r1, #100	@ 0x64
 801082c:	fb01 f303 	mul.w	r3, r1, r3
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	3332      	adds	r3, #50	@ 0x32
 8010836:	4a08      	ldr	r2, [pc, #32]	@ (8010858 <UART_SetConfig+0x2d4>)
 8010838:	fba2 2303 	umull	r2, r3, r2, r3
 801083c:	095b      	lsrs	r3, r3, #5
 801083e:	f003 0207 	and.w	r2, r3, #7
 8010842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	4422      	add	r2, r4
 801084a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801084c:	e106      	b.n	8010a5c <UART_SetConfig+0x4d8>
 801084e:	bf00      	nop
 8010850:	40011000 	.word	0x40011000
 8010854:	40011400 	.word	0x40011400
 8010858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801085c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010860:	2200      	movs	r2, #0
 8010862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010866:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801086a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801086e:	4642      	mov	r2, r8
 8010870:	464b      	mov	r3, r9
 8010872:	1891      	adds	r1, r2, r2
 8010874:	6239      	str	r1, [r7, #32]
 8010876:	415b      	adcs	r3, r3
 8010878:	627b      	str	r3, [r7, #36]	@ 0x24
 801087a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801087e:	4641      	mov	r1, r8
 8010880:	1854      	adds	r4, r2, r1
 8010882:	4649      	mov	r1, r9
 8010884:	eb43 0501 	adc.w	r5, r3, r1
 8010888:	f04f 0200 	mov.w	r2, #0
 801088c:	f04f 0300 	mov.w	r3, #0
 8010890:	00eb      	lsls	r3, r5, #3
 8010892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010896:	00e2      	lsls	r2, r4, #3
 8010898:	4614      	mov	r4, r2
 801089a:	461d      	mov	r5, r3
 801089c:	4643      	mov	r3, r8
 801089e:	18e3      	adds	r3, r4, r3
 80108a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80108a4:	464b      	mov	r3, r9
 80108a6:	eb45 0303 	adc.w	r3, r5, r3
 80108aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80108ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80108ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80108be:	f04f 0200 	mov.w	r2, #0
 80108c2:	f04f 0300 	mov.w	r3, #0
 80108c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80108ca:	4629      	mov	r1, r5
 80108cc:	008b      	lsls	r3, r1, #2
 80108ce:	4621      	mov	r1, r4
 80108d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80108d4:	4621      	mov	r1, r4
 80108d6:	008a      	lsls	r2, r1, #2
 80108d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80108dc:	f7ef fcd8 	bl	8000290 <__aeabi_uldivmod>
 80108e0:	4602      	mov	r2, r0
 80108e2:	460b      	mov	r3, r1
 80108e4:	4b60      	ldr	r3, [pc, #384]	@ (8010a68 <UART_SetConfig+0x4e4>)
 80108e6:	fba3 2302 	umull	r2, r3, r3, r2
 80108ea:	095b      	lsrs	r3, r3, #5
 80108ec:	011c      	lsls	r4, r3, #4
 80108ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80108f2:	2200      	movs	r2, #0
 80108f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80108f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80108fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010900:	4642      	mov	r2, r8
 8010902:	464b      	mov	r3, r9
 8010904:	1891      	adds	r1, r2, r2
 8010906:	61b9      	str	r1, [r7, #24]
 8010908:	415b      	adcs	r3, r3
 801090a:	61fb      	str	r3, [r7, #28]
 801090c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010910:	4641      	mov	r1, r8
 8010912:	1851      	adds	r1, r2, r1
 8010914:	6139      	str	r1, [r7, #16]
 8010916:	4649      	mov	r1, r9
 8010918:	414b      	adcs	r3, r1
 801091a:	617b      	str	r3, [r7, #20]
 801091c:	f04f 0200 	mov.w	r2, #0
 8010920:	f04f 0300 	mov.w	r3, #0
 8010924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010928:	4659      	mov	r1, fp
 801092a:	00cb      	lsls	r3, r1, #3
 801092c:	4651      	mov	r1, sl
 801092e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010932:	4651      	mov	r1, sl
 8010934:	00ca      	lsls	r2, r1, #3
 8010936:	4610      	mov	r0, r2
 8010938:	4619      	mov	r1, r3
 801093a:	4603      	mov	r3, r0
 801093c:	4642      	mov	r2, r8
 801093e:	189b      	adds	r3, r3, r2
 8010940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010944:	464b      	mov	r3, r9
 8010946:	460a      	mov	r2, r1
 8010948:	eb42 0303 	adc.w	r3, r2, r3
 801094c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	67bb      	str	r3, [r7, #120]	@ 0x78
 801095a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801095c:	f04f 0200 	mov.w	r2, #0
 8010960:	f04f 0300 	mov.w	r3, #0
 8010964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010968:	4649      	mov	r1, r9
 801096a:	008b      	lsls	r3, r1, #2
 801096c:	4641      	mov	r1, r8
 801096e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010972:	4641      	mov	r1, r8
 8010974:	008a      	lsls	r2, r1, #2
 8010976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801097a:	f7ef fc89 	bl	8000290 <__aeabi_uldivmod>
 801097e:	4602      	mov	r2, r0
 8010980:	460b      	mov	r3, r1
 8010982:	4611      	mov	r1, r2
 8010984:	4b38      	ldr	r3, [pc, #224]	@ (8010a68 <UART_SetConfig+0x4e4>)
 8010986:	fba3 2301 	umull	r2, r3, r3, r1
 801098a:	095b      	lsrs	r3, r3, #5
 801098c:	2264      	movs	r2, #100	@ 0x64
 801098e:	fb02 f303 	mul.w	r3, r2, r3
 8010992:	1acb      	subs	r3, r1, r3
 8010994:	011b      	lsls	r3, r3, #4
 8010996:	3332      	adds	r3, #50	@ 0x32
 8010998:	4a33      	ldr	r2, [pc, #204]	@ (8010a68 <UART_SetConfig+0x4e4>)
 801099a:	fba2 2303 	umull	r2, r3, r2, r3
 801099e:	095b      	lsrs	r3, r3, #5
 80109a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80109a4:	441c      	add	r4, r3
 80109a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80109aa:	2200      	movs	r2, #0
 80109ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80109ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80109b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80109b4:	4642      	mov	r2, r8
 80109b6:	464b      	mov	r3, r9
 80109b8:	1891      	adds	r1, r2, r2
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	415b      	adcs	r3, r3
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80109c4:	4641      	mov	r1, r8
 80109c6:	1851      	adds	r1, r2, r1
 80109c8:	6039      	str	r1, [r7, #0]
 80109ca:	4649      	mov	r1, r9
 80109cc:	414b      	adcs	r3, r1
 80109ce:	607b      	str	r3, [r7, #4]
 80109d0:	f04f 0200 	mov.w	r2, #0
 80109d4:	f04f 0300 	mov.w	r3, #0
 80109d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80109dc:	4659      	mov	r1, fp
 80109de:	00cb      	lsls	r3, r1, #3
 80109e0:	4651      	mov	r1, sl
 80109e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80109e6:	4651      	mov	r1, sl
 80109e8:	00ca      	lsls	r2, r1, #3
 80109ea:	4610      	mov	r0, r2
 80109ec:	4619      	mov	r1, r3
 80109ee:	4603      	mov	r3, r0
 80109f0:	4642      	mov	r2, r8
 80109f2:	189b      	adds	r3, r3, r2
 80109f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109f6:	464b      	mov	r3, r9
 80109f8:	460a      	mov	r2, r1
 80109fa:	eb42 0303 	adc.w	r3, r2, r3
 80109fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8010a0c:	f04f 0200 	mov.w	r2, #0
 8010a10:	f04f 0300 	mov.w	r3, #0
 8010a14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010a18:	4649      	mov	r1, r9
 8010a1a:	008b      	lsls	r3, r1, #2
 8010a1c:	4641      	mov	r1, r8
 8010a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010a22:	4641      	mov	r1, r8
 8010a24:	008a      	lsls	r2, r1, #2
 8010a26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010a2a:	f7ef fc31 	bl	8000290 <__aeabi_uldivmod>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	460b      	mov	r3, r1
 8010a32:	4b0d      	ldr	r3, [pc, #52]	@ (8010a68 <UART_SetConfig+0x4e4>)
 8010a34:	fba3 1302 	umull	r1, r3, r3, r2
 8010a38:	095b      	lsrs	r3, r3, #5
 8010a3a:	2164      	movs	r1, #100	@ 0x64
 8010a3c:	fb01 f303 	mul.w	r3, r1, r3
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	011b      	lsls	r3, r3, #4
 8010a44:	3332      	adds	r3, #50	@ 0x32
 8010a46:	4a08      	ldr	r2, [pc, #32]	@ (8010a68 <UART_SetConfig+0x4e4>)
 8010a48:	fba2 2303 	umull	r2, r3, r2, r3
 8010a4c:	095b      	lsrs	r3, r3, #5
 8010a4e:	f003 020f 	and.w	r2, r3, #15
 8010a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4422      	add	r2, r4
 8010a5a:	609a      	str	r2, [r3, #8]
}
 8010a5c:	bf00      	nop
 8010a5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010a62:	46bd      	mov	sp, r7
 8010a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a68:	51eb851f 	.word	0x51eb851f

08010a6c <calloc>:
 8010a6c:	4b02      	ldr	r3, [pc, #8]	@ (8010a78 <calloc+0xc>)
 8010a6e:	460a      	mov	r2, r1
 8010a70:	4601      	mov	r1, r0
 8010a72:	6818      	ldr	r0, [r3, #0]
 8010a74:	f000 b802 	b.w	8010a7c <_calloc_r>
 8010a78:	20000570 	.word	0x20000570

08010a7c <_calloc_r>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	fba1 5402 	umull	r5, r4, r1, r2
 8010a82:	b93c      	cbnz	r4, 8010a94 <_calloc_r+0x18>
 8010a84:	4629      	mov	r1, r5
 8010a86:	f000 f837 	bl	8010af8 <_malloc_r>
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	b928      	cbnz	r0, 8010a9a <_calloc_r+0x1e>
 8010a8e:	2600      	movs	r6, #0
 8010a90:	4630      	mov	r0, r6
 8010a92:	bd70      	pop	{r4, r5, r6, pc}
 8010a94:	220c      	movs	r2, #12
 8010a96:	6002      	str	r2, [r0, #0]
 8010a98:	e7f9      	b.n	8010a8e <_calloc_r+0x12>
 8010a9a:	462a      	mov	r2, r5
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	f000 fa28 	bl	8010ef2 <memset>
 8010aa2:	e7f5      	b.n	8010a90 <_calloc_r+0x14>

08010aa4 <free>:
 8010aa4:	4b02      	ldr	r3, [pc, #8]	@ (8010ab0 <free+0xc>)
 8010aa6:	4601      	mov	r1, r0
 8010aa8:	6818      	ldr	r0, [r3, #0]
 8010aaa:	f000 ba77 	b.w	8010f9c <_free_r>
 8010aae:	bf00      	nop
 8010ab0:	20000570 	.word	0x20000570

08010ab4 <sbrk_aligned>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8010af4 <sbrk_aligned+0x40>)
 8010ab8:	460c      	mov	r4, r1
 8010aba:	6831      	ldr	r1, [r6, #0]
 8010abc:	4605      	mov	r5, r0
 8010abe:	b911      	cbnz	r1, 8010ac6 <sbrk_aligned+0x12>
 8010ac0:	f000 fa20 	bl	8010f04 <_sbrk_r>
 8010ac4:	6030      	str	r0, [r6, #0]
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f000 fa1b 	bl	8010f04 <_sbrk_r>
 8010ace:	1c43      	adds	r3, r0, #1
 8010ad0:	d103      	bne.n	8010ada <sbrk_aligned+0x26>
 8010ad2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	bd70      	pop	{r4, r5, r6, pc}
 8010ada:	1cc4      	adds	r4, r0, #3
 8010adc:	f024 0403 	bic.w	r4, r4, #3
 8010ae0:	42a0      	cmp	r0, r4
 8010ae2:	d0f8      	beq.n	8010ad6 <sbrk_aligned+0x22>
 8010ae4:	1a21      	subs	r1, r4, r0
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f000 fa0c 	bl	8010f04 <_sbrk_r>
 8010aec:	3001      	adds	r0, #1
 8010aee:	d1f2      	bne.n	8010ad6 <sbrk_aligned+0x22>
 8010af0:	e7ef      	b.n	8010ad2 <sbrk_aligned+0x1e>
 8010af2:	bf00      	nop
 8010af4:	20001258 	.word	0x20001258

08010af8 <_malloc_r>:
 8010af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010afc:	1ccd      	adds	r5, r1, #3
 8010afe:	f025 0503 	bic.w	r5, r5, #3
 8010b02:	3508      	adds	r5, #8
 8010b04:	2d0c      	cmp	r5, #12
 8010b06:	bf38      	it	cc
 8010b08:	250c      	movcc	r5, #12
 8010b0a:	2d00      	cmp	r5, #0
 8010b0c:	4606      	mov	r6, r0
 8010b0e:	db01      	blt.n	8010b14 <_malloc_r+0x1c>
 8010b10:	42a9      	cmp	r1, r5
 8010b12:	d904      	bls.n	8010b1e <_malloc_r+0x26>
 8010b14:	230c      	movs	r3, #12
 8010b16:	6033      	str	r3, [r6, #0]
 8010b18:	2000      	movs	r0, #0
 8010b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010bf4 <_malloc_r+0xfc>
 8010b22:	f000 f869 	bl	8010bf8 <__malloc_lock>
 8010b26:	f8d8 3000 	ldr.w	r3, [r8]
 8010b2a:	461c      	mov	r4, r3
 8010b2c:	bb44      	cbnz	r4, 8010b80 <_malloc_r+0x88>
 8010b2e:	4629      	mov	r1, r5
 8010b30:	4630      	mov	r0, r6
 8010b32:	f7ff ffbf 	bl	8010ab4 <sbrk_aligned>
 8010b36:	1c43      	adds	r3, r0, #1
 8010b38:	4604      	mov	r4, r0
 8010b3a:	d158      	bne.n	8010bee <_malloc_r+0xf6>
 8010b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8010b40:	4627      	mov	r7, r4
 8010b42:	2f00      	cmp	r7, #0
 8010b44:	d143      	bne.n	8010bce <_malloc_r+0xd6>
 8010b46:	2c00      	cmp	r4, #0
 8010b48:	d04b      	beq.n	8010be2 <_malloc_r+0xea>
 8010b4a:	6823      	ldr	r3, [r4, #0]
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	4630      	mov	r0, r6
 8010b50:	eb04 0903 	add.w	r9, r4, r3
 8010b54:	f000 f9d6 	bl	8010f04 <_sbrk_r>
 8010b58:	4581      	cmp	r9, r0
 8010b5a:	d142      	bne.n	8010be2 <_malloc_r+0xea>
 8010b5c:	6821      	ldr	r1, [r4, #0]
 8010b5e:	1a6d      	subs	r5, r5, r1
 8010b60:	4629      	mov	r1, r5
 8010b62:	4630      	mov	r0, r6
 8010b64:	f7ff ffa6 	bl	8010ab4 <sbrk_aligned>
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d03a      	beq.n	8010be2 <_malloc_r+0xea>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	442b      	add	r3, r5
 8010b70:	6023      	str	r3, [r4, #0]
 8010b72:	f8d8 3000 	ldr.w	r3, [r8]
 8010b76:	685a      	ldr	r2, [r3, #4]
 8010b78:	bb62      	cbnz	r2, 8010bd4 <_malloc_r+0xdc>
 8010b7a:	f8c8 7000 	str.w	r7, [r8]
 8010b7e:	e00f      	b.n	8010ba0 <_malloc_r+0xa8>
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	1b52      	subs	r2, r2, r5
 8010b84:	d420      	bmi.n	8010bc8 <_malloc_r+0xd0>
 8010b86:	2a0b      	cmp	r2, #11
 8010b88:	d917      	bls.n	8010bba <_malloc_r+0xc2>
 8010b8a:	1961      	adds	r1, r4, r5
 8010b8c:	42a3      	cmp	r3, r4
 8010b8e:	6025      	str	r5, [r4, #0]
 8010b90:	bf18      	it	ne
 8010b92:	6059      	strne	r1, [r3, #4]
 8010b94:	6863      	ldr	r3, [r4, #4]
 8010b96:	bf08      	it	eq
 8010b98:	f8c8 1000 	streq.w	r1, [r8]
 8010b9c:	5162      	str	r2, [r4, r5]
 8010b9e:	604b      	str	r3, [r1, #4]
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	f000 f82f 	bl	8010c04 <__malloc_unlock>
 8010ba6:	f104 000b 	add.w	r0, r4, #11
 8010baa:	1d23      	adds	r3, r4, #4
 8010bac:	f020 0007 	bic.w	r0, r0, #7
 8010bb0:	1ac2      	subs	r2, r0, r3
 8010bb2:	bf1c      	itt	ne
 8010bb4:	1a1b      	subne	r3, r3, r0
 8010bb6:	50a3      	strne	r3, [r4, r2]
 8010bb8:	e7af      	b.n	8010b1a <_malloc_r+0x22>
 8010bba:	6862      	ldr	r2, [r4, #4]
 8010bbc:	42a3      	cmp	r3, r4
 8010bbe:	bf0c      	ite	eq
 8010bc0:	f8c8 2000 	streq.w	r2, [r8]
 8010bc4:	605a      	strne	r2, [r3, #4]
 8010bc6:	e7eb      	b.n	8010ba0 <_malloc_r+0xa8>
 8010bc8:	4623      	mov	r3, r4
 8010bca:	6864      	ldr	r4, [r4, #4]
 8010bcc:	e7ae      	b.n	8010b2c <_malloc_r+0x34>
 8010bce:	463c      	mov	r4, r7
 8010bd0:	687f      	ldr	r7, [r7, #4]
 8010bd2:	e7b6      	b.n	8010b42 <_malloc_r+0x4a>
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	d1fb      	bne.n	8010bd4 <_malloc_r+0xdc>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	6053      	str	r3, [r2, #4]
 8010be0:	e7de      	b.n	8010ba0 <_malloc_r+0xa8>
 8010be2:	230c      	movs	r3, #12
 8010be4:	6033      	str	r3, [r6, #0]
 8010be6:	4630      	mov	r0, r6
 8010be8:	f000 f80c 	bl	8010c04 <__malloc_unlock>
 8010bec:	e794      	b.n	8010b18 <_malloc_r+0x20>
 8010bee:	6005      	str	r5, [r0, #0]
 8010bf0:	e7d6      	b.n	8010ba0 <_malloc_r+0xa8>
 8010bf2:	bf00      	nop
 8010bf4:	2000125c 	.word	0x2000125c

08010bf8 <__malloc_lock>:
 8010bf8:	4801      	ldr	r0, [pc, #4]	@ (8010c00 <__malloc_lock+0x8>)
 8010bfa:	f000 b9be 	b.w	8010f7a <__retarget_lock_acquire_recursive>
 8010bfe:	bf00      	nop
 8010c00:	2000139c 	.word	0x2000139c

08010c04 <__malloc_unlock>:
 8010c04:	4801      	ldr	r0, [pc, #4]	@ (8010c0c <__malloc_unlock+0x8>)
 8010c06:	f000 b9b9 	b.w	8010f7c <__retarget_lock_release_recursive>
 8010c0a:	bf00      	nop
 8010c0c:	2000139c 	.word	0x2000139c

08010c10 <siprintf>:
 8010c10:	b40e      	push	{r1, r2, r3}
 8010c12:	b500      	push	{lr}
 8010c14:	b09c      	sub	sp, #112	@ 0x70
 8010c16:	ab1d      	add	r3, sp, #116	@ 0x74
 8010c18:	9002      	str	r0, [sp, #8]
 8010c1a:	9006      	str	r0, [sp, #24]
 8010c1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010c20:	4809      	ldr	r0, [pc, #36]	@ (8010c48 <siprintf+0x38>)
 8010c22:	9107      	str	r1, [sp, #28]
 8010c24:	9104      	str	r1, [sp, #16]
 8010c26:	4909      	ldr	r1, [pc, #36]	@ (8010c4c <siprintf+0x3c>)
 8010c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c2c:	9105      	str	r1, [sp, #20]
 8010c2e:	6800      	ldr	r0, [r0, #0]
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	a902      	add	r1, sp, #8
 8010c34:	f000 fa58 	bl	80110e8 <_svfiprintf_r>
 8010c38:	9b02      	ldr	r3, [sp, #8]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	701a      	strb	r2, [r3, #0]
 8010c3e:	b01c      	add	sp, #112	@ 0x70
 8010c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c44:	b003      	add	sp, #12
 8010c46:	4770      	bx	lr
 8010c48:	20000570 	.word	0x20000570
 8010c4c:	ffff0208 	.word	0xffff0208

08010c50 <std>:
 8010c50:	2300      	movs	r3, #0
 8010c52:	b510      	push	{r4, lr}
 8010c54:	4604      	mov	r4, r0
 8010c56:	e9c0 3300 	strd	r3, r3, [r0]
 8010c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c5e:	6083      	str	r3, [r0, #8]
 8010c60:	8181      	strh	r1, [r0, #12]
 8010c62:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c64:	81c2      	strh	r2, [r0, #14]
 8010c66:	6183      	str	r3, [r0, #24]
 8010c68:	4619      	mov	r1, r3
 8010c6a:	2208      	movs	r2, #8
 8010c6c:	305c      	adds	r0, #92	@ 0x5c
 8010c6e:	f000 f940 	bl	8010ef2 <memset>
 8010c72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca8 <std+0x58>)
 8010c74:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c76:	4b0d      	ldr	r3, [pc, #52]	@ (8010cac <std+0x5c>)
 8010c78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb0 <std+0x60>)
 8010c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb4 <std+0x64>)
 8010c80:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c82:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb8 <std+0x68>)
 8010c84:	6224      	str	r4, [r4, #32]
 8010c86:	429c      	cmp	r4, r3
 8010c88:	d006      	beq.n	8010c98 <std+0x48>
 8010c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c8e:	4294      	cmp	r4, r2
 8010c90:	d002      	beq.n	8010c98 <std+0x48>
 8010c92:	33d0      	adds	r3, #208	@ 0xd0
 8010c94:	429c      	cmp	r4, r3
 8010c96:	d105      	bne.n	8010ca4 <std+0x54>
 8010c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca0:	f000 b96a 	b.w	8010f78 <__retarget_lock_init_recursive>
 8010ca4:	bd10      	pop	{r4, pc}
 8010ca6:	bf00      	nop
 8010ca8:	080119d9 	.word	0x080119d9
 8010cac:	080119fb 	.word	0x080119fb
 8010cb0:	08011a33 	.word	0x08011a33
 8010cb4:	08011a57 	.word	0x08011a57
 8010cb8:	20001260 	.word	0x20001260

08010cbc <stdio_exit_handler>:
 8010cbc:	4a02      	ldr	r2, [pc, #8]	@ (8010cc8 <stdio_exit_handler+0xc>)
 8010cbe:	4903      	ldr	r1, [pc, #12]	@ (8010ccc <stdio_exit_handler+0x10>)
 8010cc0:	4803      	ldr	r0, [pc, #12]	@ (8010cd0 <stdio_exit_handler+0x14>)
 8010cc2:	f000 b869 	b.w	8010d98 <_fwalk_sglue>
 8010cc6:	bf00      	nop
 8010cc8:	20000564 	.word	0x20000564
 8010ccc:	08011989 	.word	0x08011989
 8010cd0:	20000574 	.word	0x20000574

08010cd4 <cleanup_stdio>:
 8010cd4:	6841      	ldr	r1, [r0, #4]
 8010cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8010d08 <cleanup_stdio+0x34>)
 8010cd8:	4299      	cmp	r1, r3
 8010cda:	b510      	push	{r4, lr}
 8010cdc:	4604      	mov	r4, r0
 8010cde:	d001      	beq.n	8010ce4 <cleanup_stdio+0x10>
 8010ce0:	f000 fe52 	bl	8011988 <_fflush_r>
 8010ce4:	68a1      	ldr	r1, [r4, #8]
 8010ce6:	4b09      	ldr	r3, [pc, #36]	@ (8010d0c <cleanup_stdio+0x38>)
 8010ce8:	4299      	cmp	r1, r3
 8010cea:	d002      	beq.n	8010cf2 <cleanup_stdio+0x1e>
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 fe4b 	bl	8011988 <_fflush_r>
 8010cf2:	68e1      	ldr	r1, [r4, #12]
 8010cf4:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <cleanup_stdio+0x3c>)
 8010cf6:	4299      	cmp	r1, r3
 8010cf8:	d004      	beq.n	8010d04 <cleanup_stdio+0x30>
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d00:	f000 be42 	b.w	8011988 <_fflush_r>
 8010d04:	bd10      	pop	{r4, pc}
 8010d06:	bf00      	nop
 8010d08:	20001260 	.word	0x20001260
 8010d0c:	200012c8 	.word	0x200012c8
 8010d10:	20001330 	.word	0x20001330

08010d14 <global_stdio_init.part.0>:
 8010d14:	b510      	push	{r4, lr}
 8010d16:	4b0b      	ldr	r3, [pc, #44]	@ (8010d44 <global_stdio_init.part.0+0x30>)
 8010d18:	4c0b      	ldr	r4, [pc, #44]	@ (8010d48 <global_stdio_init.part.0+0x34>)
 8010d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8010d4c <global_stdio_init.part.0+0x38>)
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	4620      	mov	r0, r4
 8010d20:	2200      	movs	r2, #0
 8010d22:	2104      	movs	r1, #4
 8010d24:	f7ff ff94 	bl	8010c50 <std>
 8010d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	2109      	movs	r1, #9
 8010d30:	f7ff ff8e 	bl	8010c50 <std>
 8010d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010d38:	2202      	movs	r2, #2
 8010d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d3e:	2112      	movs	r1, #18
 8010d40:	f7ff bf86 	b.w	8010c50 <std>
 8010d44:	20001398 	.word	0x20001398
 8010d48:	20001260 	.word	0x20001260
 8010d4c:	08010cbd 	.word	0x08010cbd

08010d50 <__sfp_lock_acquire>:
 8010d50:	4801      	ldr	r0, [pc, #4]	@ (8010d58 <__sfp_lock_acquire+0x8>)
 8010d52:	f000 b912 	b.w	8010f7a <__retarget_lock_acquire_recursive>
 8010d56:	bf00      	nop
 8010d58:	2000139d 	.word	0x2000139d

08010d5c <__sfp_lock_release>:
 8010d5c:	4801      	ldr	r0, [pc, #4]	@ (8010d64 <__sfp_lock_release+0x8>)
 8010d5e:	f000 b90d 	b.w	8010f7c <__retarget_lock_release_recursive>
 8010d62:	bf00      	nop
 8010d64:	2000139d 	.word	0x2000139d

08010d68 <__sinit>:
 8010d68:	b510      	push	{r4, lr}
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	f7ff fff0 	bl	8010d50 <__sfp_lock_acquire>
 8010d70:	6a23      	ldr	r3, [r4, #32]
 8010d72:	b11b      	cbz	r3, 8010d7c <__sinit+0x14>
 8010d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d78:	f7ff bff0 	b.w	8010d5c <__sfp_lock_release>
 8010d7c:	4b04      	ldr	r3, [pc, #16]	@ (8010d90 <__sinit+0x28>)
 8010d7e:	6223      	str	r3, [r4, #32]
 8010d80:	4b04      	ldr	r3, [pc, #16]	@ (8010d94 <__sinit+0x2c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1f5      	bne.n	8010d74 <__sinit+0xc>
 8010d88:	f7ff ffc4 	bl	8010d14 <global_stdio_init.part.0>
 8010d8c:	e7f2      	b.n	8010d74 <__sinit+0xc>
 8010d8e:	bf00      	nop
 8010d90:	08010cd5 	.word	0x08010cd5
 8010d94:	20001398 	.word	0x20001398

08010d98 <_fwalk_sglue>:
 8010d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d9c:	4607      	mov	r7, r0
 8010d9e:	4688      	mov	r8, r1
 8010da0:	4614      	mov	r4, r2
 8010da2:	2600      	movs	r6, #0
 8010da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010da8:	f1b9 0901 	subs.w	r9, r9, #1
 8010dac:	d505      	bpl.n	8010dba <_fwalk_sglue+0x22>
 8010dae:	6824      	ldr	r4, [r4, #0]
 8010db0:	2c00      	cmp	r4, #0
 8010db2:	d1f7      	bne.n	8010da4 <_fwalk_sglue+0xc>
 8010db4:	4630      	mov	r0, r6
 8010db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dba:	89ab      	ldrh	r3, [r5, #12]
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d907      	bls.n	8010dd0 <_fwalk_sglue+0x38>
 8010dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	d003      	beq.n	8010dd0 <_fwalk_sglue+0x38>
 8010dc8:	4629      	mov	r1, r5
 8010dca:	4638      	mov	r0, r7
 8010dcc:	47c0      	blx	r8
 8010dce:	4306      	orrs	r6, r0
 8010dd0:	3568      	adds	r5, #104	@ 0x68
 8010dd2:	e7e9      	b.n	8010da8 <_fwalk_sglue+0x10>

08010dd4 <iprintf>:
 8010dd4:	b40f      	push	{r0, r1, r2, r3}
 8010dd6:	b507      	push	{r0, r1, r2, lr}
 8010dd8:	4906      	ldr	r1, [pc, #24]	@ (8010df4 <iprintf+0x20>)
 8010dda:	ab04      	add	r3, sp, #16
 8010ddc:	6808      	ldr	r0, [r1, #0]
 8010dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8010de2:	6881      	ldr	r1, [r0, #8]
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	f000 faa5 	bl	8011334 <_vfiprintf_r>
 8010dea:	b003      	add	sp, #12
 8010dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8010df0:	b004      	add	sp, #16
 8010df2:	4770      	bx	lr
 8010df4:	20000570 	.word	0x20000570

08010df8 <_puts_r>:
 8010df8:	6a03      	ldr	r3, [r0, #32]
 8010dfa:	b570      	push	{r4, r5, r6, lr}
 8010dfc:	6884      	ldr	r4, [r0, #8]
 8010dfe:	4605      	mov	r5, r0
 8010e00:	460e      	mov	r6, r1
 8010e02:	b90b      	cbnz	r3, 8010e08 <_puts_r+0x10>
 8010e04:	f7ff ffb0 	bl	8010d68 <__sinit>
 8010e08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e0a:	07db      	lsls	r3, r3, #31
 8010e0c:	d405      	bmi.n	8010e1a <_puts_r+0x22>
 8010e0e:	89a3      	ldrh	r3, [r4, #12]
 8010e10:	0598      	lsls	r0, r3, #22
 8010e12:	d402      	bmi.n	8010e1a <_puts_r+0x22>
 8010e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e16:	f000 f8b0 	bl	8010f7a <__retarget_lock_acquire_recursive>
 8010e1a:	89a3      	ldrh	r3, [r4, #12]
 8010e1c:	0719      	lsls	r1, r3, #28
 8010e1e:	d502      	bpl.n	8010e26 <_puts_r+0x2e>
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d135      	bne.n	8010e92 <_puts_r+0x9a>
 8010e26:	4621      	mov	r1, r4
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f000 fe85 	bl	8011b38 <__swsetup_r>
 8010e2e:	b380      	cbz	r0, 8010e92 <_puts_r+0x9a>
 8010e30:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e36:	07da      	lsls	r2, r3, #31
 8010e38:	d405      	bmi.n	8010e46 <_puts_r+0x4e>
 8010e3a:	89a3      	ldrh	r3, [r4, #12]
 8010e3c:	059b      	lsls	r3, r3, #22
 8010e3e:	d402      	bmi.n	8010e46 <_puts_r+0x4e>
 8010e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e42:	f000 f89b 	bl	8010f7c <__retarget_lock_release_recursive>
 8010e46:	4628      	mov	r0, r5
 8010e48:	bd70      	pop	{r4, r5, r6, pc}
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	da04      	bge.n	8010e58 <_puts_r+0x60>
 8010e4e:	69a2      	ldr	r2, [r4, #24]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	dc17      	bgt.n	8010e84 <_puts_r+0x8c>
 8010e54:	290a      	cmp	r1, #10
 8010e56:	d015      	beq.n	8010e84 <_puts_r+0x8c>
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	1c5a      	adds	r2, r3, #1
 8010e5c:	6022      	str	r2, [r4, #0]
 8010e5e:	7019      	strb	r1, [r3, #0]
 8010e60:	68a3      	ldr	r3, [r4, #8]
 8010e62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e66:	3b01      	subs	r3, #1
 8010e68:	60a3      	str	r3, [r4, #8]
 8010e6a:	2900      	cmp	r1, #0
 8010e6c:	d1ed      	bne.n	8010e4a <_puts_r+0x52>
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	da11      	bge.n	8010e96 <_puts_r+0x9e>
 8010e72:	4622      	mov	r2, r4
 8010e74:	210a      	movs	r1, #10
 8010e76:	4628      	mov	r0, r5
 8010e78:	f000 fe1f 	bl	8011aba <__swbuf_r>
 8010e7c:	3001      	adds	r0, #1
 8010e7e:	d0d7      	beq.n	8010e30 <_puts_r+0x38>
 8010e80:	250a      	movs	r5, #10
 8010e82:	e7d7      	b.n	8010e34 <_puts_r+0x3c>
 8010e84:	4622      	mov	r2, r4
 8010e86:	4628      	mov	r0, r5
 8010e88:	f000 fe17 	bl	8011aba <__swbuf_r>
 8010e8c:	3001      	adds	r0, #1
 8010e8e:	d1e7      	bne.n	8010e60 <_puts_r+0x68>
 8010e90:	e7ce      	b.n	8010e30 <_puts_r+0x38>
 8010e92:	3e01      	subs	r6, #1
 8010e94:	e7e4      	b.n	8010e60 <_puts_r+0x68>
 8010e96:	6823      	ldr	r3, [r4, #0]
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	6022      	str	r2, [r4, #0]
 8010e9c:	220a      	movs	r2, #10
 8010e9e:	701a      	strb	r2, [r3, #0]
 8010ea0:	e7ee      	b.n	8010e80 <_puts_r+0x88>
	...

08010ea4 <puts>:
 8010ea4:	4b02      	ldr	r3, [pc, #8]	@ (8010eb0 <puts+0xc>)
 8010ea6:	4601      	mov	r1, r0
 8010ea8:	6818      	ldr	r0, [r3, #0]
 8010eaa:	f7ff bfa5 	b.w	8010df8 <_puts_r>
 8010eae:	bf00      	nop
 8010eb0:	20000570 	.word	0x20000570

08010eb4 <strcat>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	7814      	ldrb	r4, [r2, #0]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	3201      	adds	r2, #1
 8010ebe:	2c00      	cmp	r4, #0
 8010ec0:	d1fa      	bne.n	8010eb8 <strcat+0x4>
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ec8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ecc:	2a00      	cmp	r2, #0
 8010ece:	d1f9      	bne.n	8010ec4 <strcat+0x10>
 8010ed0:	bd10      	pop	{r4, pc}

08010ed2 <memcmp>:
 8010ed2:	b510      	push	{r4, lr}
 8010ed4:	3901      	subs	r1, #1
 8010ed6:	4402      	add	r2, r0
 8010ed8:	4290      	cmp	r0, r2
 8010eda:	d101      	bne.n	8010ee0 <memcmp+0xe>
 8010edc:	2000      	movs	r0, #0
 8010ede:	e005      	b.n	8010eec <memcmp+0x1a>
 8010ee0:	7803      	ldrb	r3, [r0, #0]
 8010ee2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ee6:	42a3      	cmp	r3, r4
 8010ee8:	d001      	beq.n	8010eee <memcmp+0x1c>
 8010eea:	1b18      	subs	r0, r3, r4
 8010eec:	bd10      	pop	{r4, pc}
 8010eee:	3001      	adds	r0, #1
 8010ef0:	e7f2      	b.n	8010ed8 <memcmp+0x6>

08010ef2 <memset>:
 8010ef2:	4402      	add	r2, r0
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d100      	bne.n	8010efc <memset+0xa>
 8010efa:	4770      	bx	lr
 8010efc:	f803 1b01 	strb.w	r1, [r3], #1
 8010f00:	e7f9      	b.n	8010ef6 <memset+0x4>
	...

08010f04 <_sbrk_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	4d06      	ldr	r5, [pc, #24]	@ (8010f20 <_sbrk_r+0x1c>)
 8010f08:	2300      	movs	r3, #0
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4608      	mov	r0, r1
 8010f0e:	602b      	str	r3, [r5, #0]
 8010f10:	f7f8 ff5a 	bl	8009dc8 <_sbrk>
 8010f14:	1c43      	adds	r3, r0, #1
 8010f16:	d102      	bne.n	8010f1e <_sbrk_r+0x1a>
 8010f18:	682b      	ldr	r3, [r5, #0]
 8010f1a:	b103      	cbz	r3, 8010f1e <_sbrk_r+0x1a>
 8010f1c:	6023      	str	r3, [r4, #0]
 8010f1e:	bd38      	pop	{r3, r4, r5, pc}
 8010f20:	200013a0 	.word	0x200013a0

08010f24 <__errno>:
 8010f24:	4b01      	ldr	r3, [pc, #4]	@ (8010f2c <__errno+0x8>)
 8010f26:	6818      	ldr	r0, [r3, #0]
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	20000570 	.word	0x20000570

08010f30 <__libc_init_array>:
 8010f30:	b570      	push	{r4, r5, r6, lr}
 8010f32:	4d0d      	ldr	r5, [pc, #52]	@ (8010f68 <__libc_init_array+0x38>)
 8010f34:	4c0d      	ldr	r4, [pc, #52]	@ (8010f6c <__libc_init_array+0x3c>)
 8010f36:	1b64      	subs	r4, r4, r5
 8010f38:	10a4      	asrs	r4, r4, #2
 8010f3a:	2600      	movs	r6, #0
 8010f3c:	42a6      	cmp	r6, r4
 8010f3e:	d109      	bne.n	8010f54 <__libc_init_array+0x24>
 8010f40:	4d0b      	ldr	r5, [pc, #44]	@ (8010f70 <__libc_init_array+0x40>)
 8010f42:	4c0c      	ldr	r4, [pc, #48]	@ (8010f74 <__libc_init_array+0x44>)
 8010f44:	f000 ff3a 	bl	8011dbc <_init>
 8010f48:	1b64      	subs	r4, r4, r5
 8010f4a:	10a4      	asrs	r4, r4, #2
 8010f4c:	2600      	movs	r6, #0
 8010f4e:	42a6      	cmp	r6, r4
 8010f50:	d105      	bne.n	8010f5e <__libc_init_array+0x2e>
 8010f52:	bd70      	pop	{r4, r5, r6, pc}
 8010f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f58:	4798      	blx	r3
 8010f5a:	3601      	adds	r6, #1
 8010f5c:	e7ee      	b.n	8010f3c <__libc_init_array+0xc>
 8010f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f62:	4798      	blx	r3
 8010f64:	3601      	adds	r6, #1
 8010f66:	e7f2      	b.n	8010f4e <__libc_init_array+0x1e>
 8010f68:	0801377c 	.word	0x0801377c
 8010f6c:	0801377c 	.word	0x0801377c
 8010f70:	0801377c 	.word	0x0801377c
 8010f74:	08013780 	.word	0x08013780

08010f78 <__retarget_lock_init_recursive>:
 8010f78:	4770      	bx	lr

08010f7a <__retarget_lock_acquire_recursive>:
 8010f7a:	4770      	bx	lr

08010f7c <__retarget_lock_release_recursive>:
 8010f7c:	4770      	bx	lr

08010f7e <memcpy>:
 8010f7e:	440a      	add	r2, r1
 8010f80:	4291      	cmp	r1, r2
 8010f82:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010f86:	d100      	bne.n	8010f8a <memcpy+0xc>
 8010f88:	4770      	bx	lr
 8010f8a:	b510      	push	{r4, lr}
 8010f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f94:	4291      	cmp	r1, r2
 8010f96:	d1f9      	bne.n	8010f8c <memcpy+0xe>
 8010f98:	bd10      	pop	{r4, pc}
	...

08010f9c <_free_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4605      	mov	r5, r0
 8010fa0:	2900      	cmp	r1, #0
 8010fa2:	d041      	beq.n	8011028 <_free_r+0x8c>
 8010fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fa8:	1f0c      	subs	r4, r1, #4
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	bfb8      	it	lt
 8010fae:	18e4      	addlt	r4, r4, r3
 8010fb0:	f7ff fe22 	bl	8010bf8 <__malloc_lock>
 8010fb4:	4a1d      	ldr	r2, [pc, #116]	@ (801102c <_free_r+0x90>)
 8010fb6:	6813      	ldr	r3, [r2, #0]
 8010fb8:	b933      	cbnz	r3, 8010fc8 <_free_r+0x2c>
 8010fba:	6063      	str	r3, [r4, #4]
 8010fbc:	6014      	str	r4, [r2, #0]
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fc4:	f7ff be1e 	b.w	8010c04 <__malloc_unlock>
 8010fc8:	42a3      	cmp	r3, r4
 8010fca:	d908      	bls.n	8010fde <_free_r+0x42>
 8010fcc:	6820      	ldr	r0, [r4, #0]
 8010fce:	1821      	adds	r1, r4, r0
 8010fd0:	428b      	cmp	r3, r1
 8010fd2:	bf01      	itttt	eq
 8010fd4:	6819      	ldreq	r1, [r3, #0]
 8010fd6:	685b      	ldreq	r3, [r3, #4]
 8010fd8:	1809      	addeq	r1, r1, r0
 8010fda:	6021      	streq	r1, [r4, #0]
 8010fdc:	e7ed      	b.n	8010fba <_free_r+0x1e>
 8010fde:	461a      	mov	r2, r3
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	b10b      	cbz	r3, 8010fe8 <_free_r+0x4c>
 8010fe4:	42a3      	cmp	r3, r4
 8010fe6:	d9fa      	bls.n	8010fde <_free_r+0x42>
 8010fe8:	6811      	ldr	r1, [r2, #0]
 8010fea:	1850      	adds	r0, r2, r1
 8010fec:	42a0      	cmp	r0, r4
 8010fee:	d10b      	bne.n	8011008 <_free_r+0x6c>
 8010ff0:	6820      	ldr	r0, [r4, #0]
 8010ff2:	4401      	add	r1, r0
 8010ff4:	1850      	adds	r0, r2, r1
 8010ff6:	4283      	cmp	r3, r0
 8010ff8:	6011      	str	r1, [r2, #0]
 8010ffa:	d1e0      	bne.n	8010fbe <_free_r+0x22>
 8010ffc:	6818      	ldr	r0, [r3, #0]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	6053      	str	r3, [r2, #4]
 8011002:	4408      	add	r0, r1
 8011004:	6010      	str	r0, [r2, #0]
 8011006:	e7da      	b.n	8010fbe <_free_r+0x22>
 8011008:	d902      	bls.n	8011010 <_free_r+0x74>
 801100a:	230c      	movs	r3, #12
 801100c:	602b      	str	r3, [r5, #0]
 801100e:	e7d6      	b.n	8010fbe <_free_r+0x22>
 8011010:	6820      	ldr	r0, [r4, #0]
 8011012:	1821      	adds	r1, r4, r0
 8011014:	428b      	cmp	r3, r1
 8011016:	bf04      	itt	eq
 8011018:	6819      	ldreq	r1, [r3, #0]
 801101a:	685b      	ldreq	r3, [r3, #4]
 801101c:	6063      	str	r3, [r4, #4]
 801101e:	bf04      	itt	eq
 8011020:	1809      	addeq	r1, r1, r0
 8011022:	6021      	streq	r1, [r4, #0]
 8011024:	6054      	str	r4, [r2, #4]
 8011026:	e7ca      	b.n	8010fbe <_free_r+0x22>
 8011028:	bd38      	pop	{r3, r4, r5, pc}
 801102a:	bf00      	nop
 801102c:	2000125c 	.word	0x2000125c

08011030 <__ssputs_r>:
 8011030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011034:	688e      	ldr	r6, [r1, #8]
 8011036:	461f      	mov	r7, r3
 8011038:	42be      	cmp	r6, r7
 801103a:	680b      	ldr	r3, [r1, #0]
 801103c:	4682      	mov	sl, r0
 801103e:	460c      	mov	r4, r1
 8011040:	4690      	mov	r8, r2
 8011042:	d82d      	bhi.n	80110a0 <__ssputs_r+0x70>
 8011044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011048:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801104c:	d026      	beq.n	801109c <__ssputs_r+0x6c>
 801104e:	6965      	ldr	r5, [r4, #20]
 8011050:	6909      	ldr	r1, [r1, #16]
 8011052:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011056:	eba3 0901 	sub.w	r9, r3, r1
 801105a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801105e:	1c7b      	adds	r3, r7, #1
 8011060:	444b      	add	r3, r9
 8011062:	106d      	asrs	r5, r5, #1
 8011064:	429d      	cmp	r5, r3
 8011066:	bf38      	it	cc
 8011068:	461d      	movcc	r5, r3
 801106a:	0553      	lsls	r3, r2, #21
 801106c:	d527      	bpl.n	80110be <__ssputs_r+0x8e>
 801106e:	4629      	mov	r1, r5
 8011070:	f7ff fd42 	bl	8010af8 <_malloc_r>
 8011074:	4606      	mov	r6, r0
 8011076:	b360      	cbz	r0, 80110d2 <__ssputs_r+0xa2>
 8011078:	6921      	ldr	r1, [r4, #16]
 801107a:	464a      	mov	r2, r9
 801107c:	f7ff ff7f 	bl	8010f7e <memcpy>
 8011080:	89a3      	ldrh	r3, [r4, #12]
 8011082:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801108a:	81a3      	strh	r3, [r4, #12]
 801108c:	6126      	str	r6, [r4, #16]
 801108e:	6165      	str	r5, [r4, #20]
 8011090:	444e      	add	r6, r9
 8011092:	eba5 0509 	sub.w	r5, r5, r9
 8011096:	6026      	str	r6, [r4, #0]
 8011098:	60a5      	str	r5, [r4, #8]
 801109a:	463e      	mov	r6, r7
 801109c:	42be      	cmp	r6, r7
 801109e:	d900      	bls.n	80110a2 <__ssputs_r+0x72>
 80110a0:	463e      	mov	r6, r7
 80110a2:	6820      	ldr	r0, [r4, #0]
 80110a4:	4632      	mov	r2, r6
 80110a6:	4641      	mov	r1, r8
 80110a8:	f000 fdfe 	bl	8011ca8 <memmove>
 80110ac:	68a3      	ldr	r3, [r4, #8]
 80110ae:	1b9b      	subs	r3, r3, r6
 80110b0:	60a3      	str	r3, [r4, #8]
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	4433      	add	r3, r6
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	2000      	movs	r0, #0
 80110ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110be:	462a      	mov	r2, r5
 80110c0:	f000 fccd 	bl	8011a5e <_realloc_r>
 80110c4:	4606      	mov	r6, r0
 80110c6:	2800      	cmp	r0, #0
 80110c8:	d1e0      	bne.n	801108c <__ssputs_r+0x5c>
 80110ca:	6921      	ldr	r1, [r4, #16]
 80110cc:	4650      	mov	r0, sl
 80110ce:	f7ff ff65 	bl	8010f9c <_free_r>
 80110d2:	230c      	movs	r3, #12
 80110d4:	f8ca 3000 	str.w	r3, [sl]
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110de:	81a3      	strh	r3, [r4, #12]
 80110e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110e4:	e7e9      	b.n	80110ba <__ssputs_r+0x8a>
	...

080110e8 <_svfiprintf_r>:
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	4698      	mov	r8, r3
 80110ee:	898b      	ldrh	r3, [r1, #12]
 80110f0:	061b      	lsls	r3, r3, #24
 80110f2:	b09d      	sub	sp, #116	@ 0x74
 80110f4:	4607      	mov	r7, r0
 80110f6:	460d      	mov	r5, r1
 80110f8:	4614      	mov	r4, r2
 80110fa:	d510      	bpl.n	801111e <_svfiprintf_r+0x36>
 80110fc:	690b      	ldr	r3, [r1, #16]
 80110fe:	b973      	cbnz	r3, 801111e <_svfiprintf_r+0x36>
 8011100:	2140      	movs	r1, #64	@ 0x40
 8011102:	f7ff fcf9 	bl	8010af8 <_malloc_r>
 8011106:	6028      	str	r0, [r5, #0]
 8011108:	6128      	str	r0, [r5, #16]
 801110a:	b930      	cbnz	r0, 801111a <_svfiprintf_r+0x32>
 801110c:	230c      	movs	r3, #12
 801110e:	603b      	str	r3, [r7, #0]
 8011110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011114:	b01d      	add	sp, #116	@ 0x74
 8011116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111a:	2340      	movs	r3, #64	@ 0x40
 801111c:	616b      	str	r3, [r5, #20]
 801111e:	2300      	movs	r3, #0
 8011120:	9309      	str	r3, [sp, #36]	@ 0x24
 8011122:	2320      	movs	r3, #32
 8011124:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011128:	f8cd 800c 	str.w	r8, [sp, #12]
 801112c:	2330      	movs	r3, #48	@ 0x30
 801112e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80112cc <_svfiprintf_r+0x1e4>
 8011132:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011136:	f04f 0901 	mov.w	r9, #1
 801113a:	4623      	mov	r3, r4
 801113c:	469a      	mov	sl, r3
 801113e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011142:	b10a      	cbz	r2, 8011148 <_svfiprintf_r+0x60>
 8011144:	2a25      	cmp	r2, #37	@ 0x25
 8011146:	d1f9      	bne.n	801113c <_svfiprintf_r+0x54>
 8011148:	ebba 0b04 	subs.w	fp, sl, r4
 801114c:	d00b      	beq.n	8011166 <_svfiprintf_r+0x7e>
 801114e:	465b      	mov	r3, fp
 8011150:	4622      	mov	r2, r4
 8011152:	4629      	mov	r1, r5
 8011154:	4638      	mov	r0, r7
 8011156:	f7ff ff6b 	bl	8011030 <__ssputs_r>
 801115a:	3001      	adds	r0, #1
 801115c:	f000 80a7 	beq.w	80112ae <_svfiprintf_r+0x1c6>
 8011160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011162:	445a      	add	r2, fp
 8011164:	9209      	str	r2, [sp, #36]	@ 0x24
 8011166:	f89a 3000 	ldrb.w	r3, [sl]
 801116a:	2b00      	cmp	r3, #0
 801116c:	f000 809f 	beq.w	80112ae <_svfiprintf_r+0x1c6>
 8011170:	2300      	movs	r3, #0
 8011172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801117a:	f10a 0a01 	add.w	sl, sl, #1
 801117e:	9304      	str	r3, [sp, #16]
 8011180:	9307      	str	r3, [sp, #28]
 8011182:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011186:	931a      	str	r3, [sp, #104]	@ 0x68
 8011188:	4654      	mov	r4, sl
 801118a:	2205      	movs	r2, #5
 801118c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011190:	484e      	ldr	r0, [pc, #312]	@ (80112cc <_svfiprintf_r+0x1e4>)
 8011192:	f7ef f82d 	bl	80001f0 <memchr>
 8011196:	9a04      	ldr	r2, [sp, #16]
 8011198:	b9d8      	cbnz	r0, 80111d2 <_svfiprintf_r+0xea>
 801119a:	06d0      	lsls	r0, r2, #27
 801119c:	bf44      	itt	mi
 801119e:	2320      	movmi	r3, #32
 80111a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111a4:	0711      	lsls	r1, r2, #28
 80111a6:	bf44      	itt	mi
 80111a8:	232b      	movmi	r3, #43	@ 0x2b
 80111aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111ae:	f89a 3000 	ldrb.w	r3, [sl]
 80111b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80111b4:	d015      	beq.n	80111e2 <_svfiprintf_r+0xfa>
 80111b6:	9a07      	ldr	r2, [sp, #28]
 80111b8:	4654      	mov	r4, sl
 80111ba:	2000      	movs	r0, #0
 80111bc:	f04f 0c0a 	mov.w	ip, #10
 80111c0:	4621      	mov	r1, r4
 80111c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111c6:	3b30      	subs	r3, #48	@ 0x30
 80111c8:	2b09      	cmp	r3, #9
 80111ca:	d94b      	bls.n	8011264 <_svfiprintf_r+0x17c>
 80111cc:	b1b0      	cbz	r0, 80111fc <_svfiprintf_r+0x114>
 80111ce:	9207      	str	r2, [sp, #28]
 80111d0:	e014      	b.n	80111fc <_svfiprintf_r+0x114>
 80111d2:	eba0 0308 	sub.w	r3, r0, r8
 80111d6:	fa09 f303 	lsl.w	r3, r9, r3
 80111da:	4313      	orrs	r3, r2
 80111dc:	9304      	str	r3, [sp, #16]
 80111de:	46a2      	mov	sl, r4
 80111e0:	e7d2      	b.n	8011188 <_svfiprintf_r+0xa0>
 80111e2:	9b03      	ldr	r3, [sp, #12]
 80111e4:	1d19      	adds	r1, r3, #4
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	9103      	str	r1, [sp, #12]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	bfbb      	ittet	lt
 80111ee:	425b      	neglt	r3, r3
 80111f0:	f042 0202 	orrlt.w	r2, r2, #2
 80111f4:	9307      	strge	r3, [sp, #28]
 80111f6:	9307      	strlt	r3, [sp, #28]
 80111f8:	bfb8      	it	lt
 80111fa:	9204      	strlt	r2, [sp, #16]
 80111fc:	7823      	ldrb	r3, [r4, #0]
 80111fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8011200:	d10a      	bne.n	8011218 <_svfiprintf_r+0x130>
 8011202:	7863      	ldrb	r3, [r4, #1]
 8011204:	2b2a      	cmp	r3, #42	@ 0x2a
 8011206:	d132      	bne.n	801126e <_svfiprintf_r+0x186>
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	1d1a      	adds	r2, r3, #4
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	9203      	str	r2, [sp, #12]
 8011210:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011214:	3402      	adds	r4, #2
 8011216:	9305      	str	r3, [sp, #20]
 8011218:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80112dc <_svfiprintf_r+0x1f4>
 801121c:	7821      	ldrb	r1, [r4, #0]
 801121e:	2203      	movs	r2, #3
 8011220:	4650      	mov	r0, sl
 8011222:	f7ee ffe5 	bl	80001f0 <memchr>
 8011226:	b138      	cbz	r0, 8011238 <_svfiprintf_r+0x150>
 8011228:	9b04      	ldr	r3, [sp, #16]
 801122a:	eba0 000a 	sub.w	r0, r0, sl
 801122e:	2240      	movs	r2, #64	@ 0x40
 8011230:	4082      	lsls	r2, r0
 8011232:	4313      	orrs	r3, r2
 8011234:	3401      	adds	r4, #1
 8011236:	9304      	str	r3, [sp, #16]
 8011238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801123c:	4824      	ldr	r0, [pc, #144]	@ (80112d0 <_svfiprintf_r+0x1e8>)
 801123e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011242:	2206      	movs	r2, #6
 8011244:	f7ee ffd4 	bl	80001f0 <memchr>
 8011248:	2800      	cmp	r0, #0
 801124a:	d036      	beq.n	80112ba <_svfiprintf_r+0x1d2>
 801124c:	4b21      	ldr	r3, [pc, #132]	@ (80112d4 <_svfiprintf_r+0x1ec>)
 801124e:	bb1b      	cbnz	r3, 8011298 <_svfiprintf_r+0x1b0>
 8011250:	9b03      	ldr	r3, [sp, #12]
 8011252:	3307      	adds	r3, #7
 8011254:	f023 0307 	bic.w	r3, r3, #7
 8011258:	3308      	adds	r3, #8
 801125a:	9303      	str	r3, [sp, #12]
 801125c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801125e:	4433      	add	r3, r6
 8011260:	9309      	str	r3, [sp, #36]	@ 0x24
 8011262:	e76a      	b.n	801113a <_svfiprintf_r+0x52>
 8011264:	fb0c 3202 	mla	r2, ip, r2, r3
 8011268:	460c      	mov	r4, r1
 801126a:	2001      	movs	r0, #1
 801126c:	e7a8      	b.n	80111c0 <_svfiprintf_r+0xd8>
 801126e:	2300      	movs	r3, #0
 8011270:	3401      	adds	r4, #1
 8011272:	9305      	str	r3, [sp, #20]
 8011274:	4619      	mov	r1, r3
 8011276:	f04f 0c0a 	mov.w	ip, #10
 801127a:	4620      	mov	r0, r4
 801127c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011280:	3a30      	subs	r2, #48	@ 0x30
 8011282:	2a09      	cmp	r2, #9
 8011284:	d903      	bls.n	801128e <_svfiprintf_r+0x1a6>
 8011286:	2b00      	cmp	r3, #0
 8011288:	d0c6      	beq.n	8011218 <_svfiprintf_r+0x130>
 801128a:	9105      	str	r1, [sp, #20]
 801128c:	e7c4      	b.n	8011218 <_svfiprintf_r+0x130>
 801128e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011292:	4604      	mov	r4, r0
 8011294:	2301      	movs	r3, #1
 8011296:	e7f0      	b.n	801127a <_svfiprintf_r+0x192>
 8011298:	ab03      	add	r3, sp, #12
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	462a      	mov	r2, r5
 801129e:	4b0e      	ldr	r3, [pc, #56]	@ (80112d8 <_svfiprintf_r+0x1f0>)
 80112a0:	a904      	add	r1, sp, #16
 80112a2:	4638      	mov	r0, r7
 80112a4:	f3af 8000 	nop.w
 80112a8:	1c42      	adds	r2, r0, #1
 80112aa:	4606      	mov	r6, r0
 80112ac:	d1d6      	bne.n	801125c <_svfiprintf_r+0x174>
 80112ae:	89ab      	ldrh	r3, [r5, #12]
 80112b0:	065b      	lsls	r3, r3, #25
 80112b2:	f53f af2d 	bmi.w	8011110 <_svfiprintf_r+0x28>
 80112b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112b8:	e72c      	b.n	8011114 <_svfiprintf_r+0x2c>
 80112ba:	ab03      	add	r3, sp, #12
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	462a      	mov	r2, r5
 80112c0:	4b05      	ldr	r3, [pc, #20]	@ (80112d8 <_svfiprintf_r+0x1f0>)
 80112c2:	a904      	add	r1, sp, #16
 80112c4:	4638      	mov	r0, r7
 80112c6:	f000 f9bb 	bl	8011640 <_printf_i>
 80112ca:	e7ed      	b.n	80112a8 <_svfiprintf_r+0x1c0>
 80112cc:	08013740 	.word	0x08013740
 80112d0:	0801374a 	.word	0x0801374a
 80112d4:	00000000 	.word	0x00000000
 80112d8:	08011031 	.word	0x08011031
 80112dc:	08013746 	.word	0x08013746

080112e0 <__sfputc_r>:
 80112e0:	6893      	ldr	r3, [r2, #8]
 80112e2:	3b01      	subs	r3, #1
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	b410      	push	{r4}
 80112e8:	6093      	str	r3, [r2, #8]
 80112ea:	da08      	bge.n	80112fe <__sfputc_r+0x1e>
 80112ec:	6994      	ldr	r4, [r2, #24]
 80112ee:	42a3      	cmp	r3, r4
 80112f0:	db01      	blt.n	80112f6 <__sfputc_r+0x16>
 80112f2:	290a      	cmp	r1, #10
 80112f4:	d103      	bne.n	80112fe <__sfputc_r+0x1e>
 80112f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112fa:	f000 bbde 	b.w	8011aba <__swbuf_r>
 80112fe:	6813      	ldr	r3, [r2, #0]
 8011300:	1c58      	adds	r0, r3, #1
 8011302:	6010      	str	r0, [r2, #0]
 8011304:	7019      	strb	r1, [r3, #0]
 8011306:	4608      	mov	r0, r1
 8011308:	f85d 4b04 	ldr.w	r4, [sp], #4
 801130c:	4770      	bx	lr

0801130e <__sfputs_r>:
 801130e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011310:	4606      	mov	r6, r0
 8011312:	460f      	mov	r7, r1
 8011314:	4614      	mov	r4, r2
 8011316:	18d5      	adds	r5, r2, r3
 8011318:	42ac      	cmp	r4, r5
 801131a:	d101      	bne.n	8011320 <__sfputs_r+0x12>
 801131c:	2000      	movs	r0, #0
 801131e:	e007      	b.n	8011330 <__sfputs_r+0x22>
 8011320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011324:	463a      	mov	r2, r7
 8011326:	4630      	mov	r0, r6
 8011328:	f7ff ffda 	bl	80112e0 <__sfputc_r>
 801132c:	1c43      	adds	r3, r0, #1
 801132e:	d1f3      	bne.n	8011318 <__sfputs_r+0xa>
 8011330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011334 <_vfiprintf_r>:
 8011334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011338:	460d      	mov	r5, r1
 801133a:	b09d      	sub	sp, #116	@ 0x74
 801133c:	4614      	mov	r4, r2
 801133e:	4698      	mov	r8, r3
 8011340:	4606      	mov	r6, r0
 8011342:	b118      	cbz	r0, 801134c <_vfiprintf_r+0x18>
 8011344:	6a03      	ldr	r3, [r0, #32]
 8011346:	b90b      	cbnz	r3, 801134c <_vfiprintf_r+0x18>
 8011348:	f7ff fd0e 	bl	8010d68 <__sinit>
 801134c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801134e:	07d9      	lsls	r1, r3, #31
 8011350:	d405      	bmi.n	801135e <_vfiprintf_r+0x2a>
 8011352:	89ab      	ldrh	r3, [r5, #12]
 8011354:	059a      	lsls	r2, r3, #22
 8011356:	d402      	bmi.n	801135e <_vfiprintf_r+0x2a>
 8011358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801135a:	f7ff fe0e 	bl	8010f7a <__retarget_lock_acquire_recursive>
 801135e:	89ab      	ldrh	r3, [r5, #12]
 8011360:	071b      	lsls	r3, r3, #28
 8011362:	d501      	bpl.n	8011368 <_vfiprintf_r+0x34>
 8011364:	692b      	ldr	r3, [r5, #16]
 8011366:	b99b      	cbnz	r3, 8011390 <_vfiprintf_r+0x5c>
 8011368:	4629      	mov	r1, r5
 801136a:	4630      	mov	r0, r6
 801136c:	f000 fbe4 	bl	8011b38 <__swsetup_r>
 8011370:	b170      	cbz	r0, 8011390 <_vfiprintf_r+0x5c>
 8011372:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011374:	07dc      	lsls	r4, r3, #31
 8011376:	d504      	bpl.n	8011382 <_vfiprintf_r+0x4e>
 8011378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801137c:	b01d      	add	sp, #116	@ 0x74
 801137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011382:	89ab      	ldrh	r3, [r5, #12]
 8011384:	0598      	lsls	r0, r3, #22
 8011386:	d4f7      	bmi.n	8011378 <_vfiprintf_r+0x44>
 8011388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801138a:	f7ff fdf7 	bl	8010f7c <__retarget_lock_release_recursive>
 801138e:	e7f3      	b.n	8011378 <_vfiprintf_r+0x44>
 8011390:	2300      	movs	r3, #0
 8011392:	9309      	str	r3, [sp, #36]	@ 0x24
 8011394:	2320      	movs	r3, #32
 8011396:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801139a:	f8cd 800c 	str.w	r8, [sp, #12]
 801139e:	2330      	movs	r3, #48	@ 0x30
 80113a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011550 <_vfiprintf_r+0x21c>
 80113a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113a8:	f04f 0901 	mov.w	r9, #1
 80113ac:	4623      	mov	r3, r4
 80113ae:	469a      	mov	sl, r3
 80113b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113b4:	b10a      	cbz	r2, 80113ba <_vfiprintf_r+0x86>
 80113b6:	2a25      	cmp	r2, #37	@ 0x25
 80113b8:	d1f9      	bne.n	80113ae <_vfiprintf_r+0x7a>
 80113ba:	ebba 0b04 	subs.w	fp, sl, r4
 80113be:	d00b      	beq.n	80113d8 <_vfiprintf_r+0xa4>
 80113c0:	465b      	mov	r3, fp
 80113c2:	4622      	mov	r2, r4
 80113c4:	4629      	mov	r1, r5
 80113c6:	4630      	mov	r0, r6
 80113c8:	f7ff ffa1 	bl	801130e <__sfputs_r>
 80113cc:	3001      	adds	r0, #1
 80113ce:	f000 80a7 	beq.w	8011520 <_vfiprintf_r+0x1ec>
 80113d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113d4:	445a      	add	r2, fp
 80113d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80113d8:	f89a 3000 	ldrb.w	r3, [sl]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	f000 809f 	beq.w	8011520 <_vfiprintf_r+0x1ec>
 80113e2:	2300      	movs	r3, #0
 80113e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80113e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113ec:	f10a 0a01 	add.w	sl, sl, #1
 80113f0:	9304      	str	r3, [sp, #16]
 80113f2:	9307      	str	r3, [sp, #28]
 80113f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80113fa:	4654      	mov	r4, sl
 80113fc:	2205      	movs	r2, #5
 80113fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011402:	4853      	ldr	r0, [pc, #332]	@ (8011550 <_vfiprintf_r+0x21c>)
 8011404:	f7ee fef4 	bl	80001f0 <memchr>
 8011408:	9a04      	ldr	r2, [sp, #16]
 801140a:	b9d8      	cbnz	r0, 8011444 <_vfiprintf_r+0x110>
 801140c:	06d1      	lsls	r1, r2, #27
 801140e:	bf44      	itt	mi
 8011410:	2320      	movmi	r3, #32
 8011412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011416:	0713      	lsls	r3, r2, #28
 8011418:	bf44      	itt	mi
 801141a:	232b      	movmi	r3, #43	@ 0x2b
 801141c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011420:	f89a 3000 	ldrb.w	r3, [sl]
 8011424:	2b2a      	cmp	r3, #42	@ 0x2a
 8011426:	d015      	beq.n	8011454 <_vfiprintf_r+0x120>
 8011428:	9a07      	ldr	r2, [sp, #28]
 801142a:	4654      	mov	r4, sl
 801142c:	2000      	movs	r0, #0
 801142e:	f04f 0c0a 	mov.w	ip, #10
 8011432:	4621      	mov	r1, r4
 8011434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011438:	3b30      	subs	r3, #48	@ 0x30
 801143a:	2b09      	cmp	r3, #9
 801143c:	d94b      	bls.n	80114d6 <_vfiprintf_r+0x1a2>
 801143e:	b1b0      	cbz	r0, 801146e <_vfiprintf_r+0x13a>
 8011440:	9207      	str	r2, [sp, #28]
 8011442:	e014      	b.n	801146e <_vfiprintf_r+0x13a>
 8011444:	eba0 0308 	sub.w	r3, r0, r8
 8011448:	fa09 f303 	lsl.w	r3, r9, r3
 801144c:	4313      	orrs	r3, r2
 801144e:	9304      	str	r3, [sp, #16]
 8011450:	46a2      	mov	sl, r4
 8011452:	e7d2      	b.n	80113fa <_vfiprintf_r+0xc6>
 8011454:	9b03      	ldr	r3, [sp, #12]
 8011456:	1d19      	adds	r1, r3, #4
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	9103      	str	r1, [sp, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	bfbb      	ittet	lt
 8011460:	425b      	neglt	r3, r3
 8011462:	f042 0202 	orrlt.w	r2, r2, #2
 8011466:	9307      	strge	r3, [sp, #28]
 8011468:	9307      	strlt	r3, [sp, #28]
 801146a:	bfb8      	it	lt
 801146c:	9204      	strlt	r2, [sp, #16]
 801146e:	7823      	ldrb	r3, [r4, #0]
 8011470:	2b2e      	cmp	r3, #46	@ 0x2e
 8011472:	d10a      	bne.n	801148a <_vfiprintf_r+0x156>
 8011474:	7863      	ldrb	r3, [r4, #1]
 8011476:	2b2a      	cmp	r3, #42	@ 0x2a
 8011478:	d132      	bne.n	80114e0 <_vfiprintf_r+0x1ac>
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	1d1a      	adds	r2, r3, #4
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	9203      	str	r2, [sp, #12]
 8011482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011486:	3402      	adds	r4, #2
 8011488:	9305      	str	r3, [sp, #20]
 801148a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011560 <_vfiprintf_r+0x22c>
 801148e:	7821      	ldrb	r1, [r4, #0]
 8011490:	2203      	movs	r2, #3
 8011492:	4650      	mov	r0, sl
 8011494:	f7ee feac 	bl	80001f0 <memchr>
 8011498:	b138      	cbz	r0, 80114aa <_vfiprintf_r+0x176>
 801149a:	9b04      	ldr	r3, [sp, #16]
 801149c:	eba0 000a 	sub.w	r0, r0, sl
 80114a0:	2240      	movs	r2, #64	@ 0x40
 80114a2:	4082      	lsls	r2, r0
 80114a4:	4313      	orrs	r3, r2
 80114a6:	3401      	adds	r4, #1
 80114a8:	9304      	str	r3, [sp, #16]
 80114aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ae:	4829      	ldr	r0, [pc, #164]	@ (8011554 <_vfiprintf_r+0x220>)
 80114b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80114b4:	2206      	movs	r2, #6
 80114b6:	f7ee fe9b 	bl	80001f0 <memchr>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d03f      	beq.n	801153e <_vfiprintf_r+0x20a>
 80114be:	4b26      	ldr	r3, [pc, #152]	@ (8011558 <_vfiprintf_r+0x224>)
 80114c0:	bb1b      	cbnz	r3, 801150a <_vfiprintf_r+0x1d6>
 80114c2:	9b03      	ldr	r3, [sp, #12]
 80114c4:	3307      	adds	r3, #7
 80114c6:	f023 0307 	bic.w	r3, r3, #7
 80114ca:	3308      	adds	r3, #8
 80114cc:	9303      	str	r3, [sp, #12]
 80114ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d0:	443b      	add	r3, r7
 80114d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80114d4:	e76a      	b.n	80113ac <_vfiprintf_r+0x78>
 80114d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80114da:	460c      	mov	r4, r1
 80114dc:	2001      	movs	r0, #1
 80114de:	e7a8      	b.n	8011432 <_vfiprintf_r+0xfe>
 80114e0:	2300      	movs	r3, #0
 80114e2:	3401      	adds	r4, #1
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	4619      	mov	r1, r3
 80114e8:	f04f 0c0a 	mov.w	ip, #10
 80114ec:	4620      	mov	r0, r4
 80114ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114f2:	3a30      	subs	r2, #48	@ 0x30
 80114f4:	2a09      	cmp	r2, #9
 80114f6:	d903      	bls.n	8011500 <_vfiprintf_r+0x1cc>
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d0c6      	beq.n	801148a <_vfiprintf_r+0x156>
 80114fc:	9105      	str	r1, [sp, #20]
 80114fe:	e7c4      	b.n	801148a <_vfiprintf_r+0x156>
 8011500:	fb0c 2101 	mla	r1, ip, r1, r2
 8011504:	4604      	mov	r4, r0
 8011506:	2301      	movs	r3, #1
 8011508:	e7f0      	b.n	80114ec <_vfiprintf_r+0x1b8>
 801150a:	ab03      	add	r3, sp, #12
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	462a      	mov	r2, r5
 8011510:	4b12      	ldr	r3, [pc, #72]	@ (801155c <_vfiprintf_r+0x228>)
 8011512:	a904      	add	r1, sp, #16
 8011514:	4630      	mov	r0, r6
 8011516:	f3af 8000 	nop.w
 801151a:	4607      	mov	r7, r0
 801151c:	1c78      	adds	r0, r7, #1
 801151e:	d1d6      	bne.n	80114ce <_vfiprintf_r+0x19a>
 8011520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011522:	07d9      	lsls	r1, r3, #31
 8011524:	d405      	bmi.n	8011532 <_vfiprintf_r+0x1fe>
 8011526:	89ab      	ldrh	r3, [r5, #12]
 8011528:	059a      	lsls	r2, r3, #22
 801152a:	d402      	bmi.n	8011532 <_vfiprintf_r+0x1fe>
 801152c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801152e:	f7ff fd25 	bl	8010f7c <__retarget_lock_release_recursive>
 8011532:	89ab      	ldrh	r3, [r5, #12]
 8011534:	065b      	lsls	r3, r3, #25
 8011536:	f53f af1f 	bmi.w	8011378 <_vfiprintf_r+0x44>
 801153a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801153c:	e71e      	b.n	801137c <_vfiprintf_r+0x48>
 801153e:	ab03      	add	r3, sp, #12
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	462a      	mov	r2, r5
 8011544:	4b05      	ldr	r3, [pc, #20]	@ (801155c <_vfiprintf_r+0x228>)
 8011546:	a904      	add	r1, sp, #16
 8011548:	4630      	mov	r0, r6
 801154a:	f000 f879 	bl	8011640 <_printf_i>
 801154e:	e7e4      	b.n	801151a <_vfiprintf_r+0x1e6>
 8011550:	08013740 	.word	0x08013740
 8011554:	0801374a 	.word	0x0801374a
 8011558:	00000000 	.word	0x00000000
 801155c:	0801130f 	.word	0x0801130f
 8011560:	08013746 	.word	0x08013746

08011564 <_printf_common>:
 8011564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011568:	4616      	mov	r6, r2
 801156a:	4698      	mov	r8, r3
 801156c:	688a      	ldr	r2, [r1, #8]
 801156e:	690b      	ldr	r3, [r1, #16]
 8011570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011574:	4293      	cmp	r3, r2
 8011576:	bfb8      	it	lt
 8011578:	4613      	movlt	r3, r2
 801157a:	6033      	str	r3, [r6, #0]
 801157c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011580:	4607      	mov	r7, r0
 8011582:	460c      	mov	r4, r1
 8011584:	b10a      	cbz	r2, 801158a <_printf_common+0x26>
 8011586:	3301      	adds	r3, #1
 8011588:	6033      	str	r3, [r6, #0]
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	0699      	lsls	r1, r3, #26
 801158e:	bf42      	ittt	mi
 8011590:	6833      	ldrmi	r3, [r6, #0]
 8011592:	3302      	addmi	r3, #2
 8011594:	6033      	strmi	r3, [r6, #0]
 8011596:	6825      	ldr	r5, [r4, #0]
 8011598:	f015 0506 	ands.w	r5, r5, #6
 801159c:	d106      	bne.n	80115ac <_printf_common+0x48>
 801159e:	f104 0a19 	add.w	sl, r4, #25
 80115a2:	68e3      	ldr	r3, [r4, #12]
 80115a4:	6832      	ldr	r2, [r6, #0]
 80115a6:	1a9b      	subs	r3, r3, r2
 80115a8:	42ab      	cmp	r3, r5
 80115aa:	dc26      	bgt.n	80115fa <_printf_common+0x96>
 80115ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80115b0:	6822      	ldr	r2, [r4, #0]
 80115b2:	3b00      	subs	r3, #0
 80115b4:	bf18      	it	ne
 80115b6:	2301      	movne	r3, #1
 80115b8:	0692      	lsls	r2, r2, #26
 80115ba:	d42b      	bmi.n	8011614 <_printf_common+0xb0>
 80115bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115c0:	4641      	mov	r1, r8
 80115c2:	4638      	mov	r0, r7
 80115c4:	47c8      	blx	r9
 80115c6:	3001      	adds	r0, #1
 80115c8:	d01e      	beq.n	8011608 <_printf_common+0xa4>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	6922      	ldr	r2, [r4, #16]
 80115ce:	f003 0306 	and.w	r3, r3, #6
 80115d2:	2b04      	cmp	r3, #4
 80115d4:	bf02      	ittt	eq
 80115d6:	68e5      	ldreq	r5, [r4, #12]
 80115d8:	6833      	ldreq	r3, [r6, #0]
 80115da:	1aed      	subeq	r5, r5, r3
 80115dc:	68a3      	ldr	r3, [r4, #8]
 80115de:	bf0c      	ite	eq
 80115e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115e4:	2500      	movne	r5, #0
 80115e6:	4293      	cmp	r3, r2
 80115e8:	bfc4      	itt	gt
 80115ea:	1a9b      	subgt	r3, r3, r2
 80115ec:	18ed      	addgt	r5, r5, r3
 80115ee:	2600      	movs	r6, #0
 80115f0:	341a      	adds	r4, #26
 80115f2:	42b5      	cmp	r5, r6
 80115f4:	d11a      	bne.n	801162c <_printf_common+0xc8>
 80115f6:	2000      	movs	r0, #0
 80115f8:	e008      	b.n	801160c <_printf_common+0xa8>
 80115fa:	2301      	movs	r3, #1
 80115fc:	4652      	mov	r2, sl
 80115fe:	4641      	mov	r1, r8
 8011600:	4638      	mov	r0, r7
 8011602:	47c8      	blx	r9
 8011604:	3001      	adds	r0, #1
 8011606:	d103      	bne.n	8011610 <_printf_common+0xac>
 8011608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011610:	3501      	adds	r5, #1
 8011612:	e7c6      	b.n	80115a2 <_printf_common+0x3e>
 8011614:	18e1      	adds	r1, r4, r3
 8011616:	1c5a      	adds	r2, r3, #1
 8011618:	2030      	movs	r0, #48	@ 0x30
 801161a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801161e:	4422      	add	r2, r4
 8011620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011628:	3302      	adds	r3, #2
 801162a:	e7c7      	b.n	80115bc <_printf_common+0x58>
 801162c:	2301      	movs	r3, #1
 801162e:	4622      	mov	r2, r4
 8011630:	4641      	mov	r1, r8
 8011632:	4638      	mov	r0, r7
 8011634:	47c8      	blx	r9
 8011636:	3001      	adds	r0, #1
 8011638:	d0e6      	beq.n	8011608 <_printf_common+0xa4>
 801163a:	3601      	adds	r6, #1
 801163c:	e7d9      	b.n	80115f2 <_printf_common+0x8e>
	...

08011640 <_printf_i>:
 8011640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011644:	7e0f      	ldrb	r7, [r1, #24]
 8011646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011648:	2f78      	cmp	r7, #120	@ 0x78
 801164a:	4691      	mov	r9, r2
 801164c:	4680      	mov	r8, r0
 801164e:	460c      	mov	r4, r1
 8011650:	469a      	mov	sl, r3
 8011652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011656:	d807      	bhi.n	8011668 <_printf_i+0x28>
 8011658:	2f62      	cmp	r7, #98	@ 0x62
 801165a:	d80a      	bhi.n	8011672 <_printf_i+0x32>
 801165c:	2f00      	cmp	r7, #0
 801165e:	f000 80d2 	beq.w	8011806 <_printf_i+0x1c6>
 8011662:	2f58      	cmp	r7, #88	@ 0x58
 8011664:	f000 80b9 	beq.w	80117da <_printf_i+0x19a>
 8011668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801166c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011670:	e03a      	b.n	80116e8 <_printf_i+0xa8>
 8011672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011676:	2b15      	cmp	r3, #21
 8011678:	d8f6      	bhi.n	8011668 <_printf_i+0x28>
 801167a:	a101      	add	r1, pc, #4	@ (adr r1, 8011680 <_printf_i+0x40>)
 801167c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011680:	080116d9 	.word	0x080116d9
 8011684:	080116ed 	.word	0x080116ed
 8011688:	08011669 	.word	0x08011669
 801168c:	08011669 	.word	0x08011669
 8011690:	08011669 	.word	0x08011669
 8011694:	08011669 	.word	0x08011669
 8011698:	080116ed 	.word	0x080116ed
 801169c:	08011669 	.word	0x08011669
 80116a0:	08011669 	.word	0x08011669
 80116a4:	08011669 	.word	0x08011669
 80116a8:	08011669 	.word	0x08011669
 80116ac:	080117ed 	.word	0x080117ed
 80116b0:	08011717 	.word	0x08011717
 80116b4:	080117a7 	.word	0x080117a7
 80116b8:	08011669 	.word	0x08011669
 80116bc:	08011669 	.word	0x08011669
 80116c0:	0801180f 	.word	0x0801180f
 80116c4:	08011669 	.word	0x08011669
 80116c8:	08011717 	.word	0x08011717
 80116cc:	08011669 	.word	0x08011669
 80116d0:	08011669 	.word	0x08011669
 80116d4:	080117af 	.word	0x080117af
 80116d8:	6833      	ldr	r3, [r6, #0]
 80116da:	1d1a      	adds	r2, r3, #4
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	6032      	str	r2, [r6, #0]
 80116e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116e8:	2301      	movs	r3, #1
 80116ea:	e09d      	b.n	8011828 <_printf_i+0x1e8>
 80116ec:	6833      	ldr	r3, [r6, #0]
 80116ee:	6820      	ldr	r0, [r4, #0]
 80116f0:	1d19      	adds	r1, r3, #4
 80116f2:	6031      	str	r1, [r6, #0]
 80116f4:	0606      	lsls	r6, r0, #24
 80116f6:	d501      	bpl.n	80116fc <_printf_i+0xbc>
 80116f8:	681d      	ldr	r5, [r3, #0]
 80116fa:	e003      	b.n	8011704 <_printf_i+0xc4>
 80116fc:	0645      	lsls	r5, r0, #25
 80116fe:	d5fb      	bpl.n	80116f8 <_printf_i+0xb8>
 8011700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011704:	2d00      	cmp	r5, #0
 8011706:	da03      	bge.n	8011710 <_printf_i+0xd0>
 8011708:	232d      	movs	r3, #45	@ 0x2d
 801170a:	426d      	negs	r5, r5
 801170c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011710:	4859      	ldr	r0, [pc, #356]	@ (8011878 <_printf_i+0x238>)
 8011712:	230a      	movs	r3, #10
 8011714:	e011      	b.n	801173a <_printf_i+0xfa>
 8011716:	6821      	ldr	r1, [r4, #0]
 8011718:	6833      	ldr	r3, [r6, #0]
 801171a:	0608      	lsls	r0, r1, #24
 801171c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011720:	d402      	bmi.n	8011728 <_printf_i+0xe8>
 8011722:	0649      	lsls	r1, r1, #25
 8011724:	bf48      	it	mi
 8011726:	b2ad      	uxthmi	r5, r5
 8011728:	2f6f      	cmp	r7, #111	@ 0x6f
 801172a:	4853      	ldr	r0, [pc, #332]	@ (8011878 <_printf_i+0x238>)
 801172c:	6033      	str	r3, [r6, #0]
 801172e:	bf14      	ite	ne
 8011730:	230a      	movne	r3, #10
 8011732:	2308      	moveq	r3, #8
 8011734:	2100      	movs	r1, #0
 8011736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801173a:	6866      	ldr	r6, [r4, #4]
 801173c:	60a6      	str	r6, [r4, #8]
 801173e:	2e00      	cmp	r6, #0
 8011740:	bfa2      	ittt	ge
 8011742:	6821      	ldrge	r1, [r4, #0]
 8011744:	f021 0104 	bicge.w	r1, r1, #4
 8011748:	6021      	strge	r1, [r4, #0]
 801174a:	b90d      	cbnz	r5, 8011750 <_printf_i+0x110>
 801174c:	2e00      	cmp	r6, #0
 801174e:	d04b      	beq.n	80117e8 <_printf_i+0x1a8>
 8011750:	4616      	mov	r6, r2
 8011752:	fbb5 f1f3 	udiv	r1, r5, r3
 8011756:	fb03 5711 	mls	r7, r3, r1, r5
 801175a:	5dc7      	ldrb	r7, [r0, r7]
 801175c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011760:	462f      	mov	r7, r5
 8011762:	42bb      	cmp	r3, r7
 8011764:	460d      	mov	r5, r1
 8011766:	d9f4      	bls.n	8011752 <_printf_i+0x112>
 8011768:	2b08      	cmp	r3, #8
 801176a:	d10b      	bne.n	8011784 <_printf_i+0x144>
 801176c:	6823      	ldr	r3, [r4, #0]
 801176e:	07df      	lsls	r7, r3, #31
 8011770:	d508      	bpl.n	8011784 <_printf_i+0x144>
 8011772:	6923      	ldr	r3, [r4, #16]
 8011774:	6861      	ldr	r1, [r4, #4]
 8011776:	4299      	cmp	r1, r3
 8011778:	bfde      	ittt	le
 801177a:	2330      	movle	r3, #48	@ 0x30
 801177c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011780:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011784:	1b92      	subs	r2, r2, r6
 8011786:	6122      	str	r2, [r4, #16]
 8011788:	f8cd a000 	str.w	sl, [sp]
 801178c:	464b      	mov	r3, r9
 801178e:	aa03      	add	r2, sp, #12
 8011790:	4621      	mov	r1, r4
 8011792:	4640      	mov	r0, r8
 8011794:	f7ff fee6 	bl	8011564 <_printf_common>
 8011798:	3001      	adds	r0, #1
 801179a:	d14a      	bne.n	8011832 <_printf_i+0x1f2>
 801179c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117a0:	b004      	add	sp, #16
 80117a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a6:	6823      	ldr	r3, [r4, #0]
 80117a8:	f043 0320 	orr.w	r3, r3, #32
 80117ac:	6023      	str	r3, [r4, #0]
 80117ae:	4833      	ldr	r0, [pc, #204]	@ (801187c <_printf_i+0x23c>)
 80117b0:	2778      	movs	r7, #120	@ 0x78
 80117b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	6831      	ldr	r1, [r6, #0]
 80117ba:	061f      	lsls	r7, r3, #24
 80117bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80117c0:	d402      	bmi.n	80117c8 <_printf_i+0x188>
 80117c2:	065f      	lsls	r7, r3, #25
 80117c4:	bf48      	it	mi
 80117c6:	b2ad      	uxthmi	r5, r5
 80117c8:	6031      	str	r1, [r6, #0]
 80117ca:	07d9      	lsls	r1, r3, #31
 80117cc:	bf44      	itt	mi
 80117ce:	f043 0320 	orrmi.w	r3, r3, #32
 80117d2:	6023      	strmi	r3, [r4, #0]
 80117d4:	b11d      	cbz	r5, 80117de <_printf_i+0x19e>
 80117d6:	2310      	movs	r3, #16
 80117d8:	e7ac      	b.n	8011734 <_printf_i+0xf4>
 80117da:	4827      	ldr	r0, [pc, #156]	@ (8011878 <_printf_i+0x238>)
 80117dc:	e7e9      	b.n	80117b2 <_printf_i+0x172>
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	f023 0320 	bic.w	r3, r3, #32
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	e7f6      	b.n	80117d6 <_printf_i+0x196>
 80117e8:	4616      	mov	r6, r2
 80117ea:	e7bd      	b.n	8011768 <_printf_i+0x128>
 80117ec:	6833      	ldr	r3, [r6, #0]
 80117ee:	6825      	ldr	r5, [r4, #0]
 80117f0:	6961      	ldr	r1, [r4, #20]
 80117f2:	1d18      	adds	r0, r3, #4
 80117f4:	6030      	str	r0, [r6, #0]
 80117f6:	062e      	lsls	r6, r5, #24
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	d501      	bpl.n	8011800 <_printf_i+0x1c0>
 80117fc:	6019      	str	r1, [r3, #0]
 80117fe:	e002      	b.n	8011806 <_printf_i+0x1c6>
 8011800:	0668      	lsls	r0, r5, #25
 8011802:	d5fb      	bpl.n	80117fc <_printf_i+0x1bc>
 8011804:	8019      	strh	r1, [r3, #0]
 8011806:	2300      	movs	r3, #0
 8011808:	6123      	str	r3, [r4, #16]
 801180a:	4616      	mov	r6, r2
 801180c:	e7bc      	b.n	8011788 <_printf_i+0x148>
 801180e:	6833      	ldr	r3, [r6, #0]
 8011810:	1d1a      	adds	r2, r3, #4
 8011812:	6032      	str	r2, [r6, #0]
 8011814:	681e      	ldr	r6, [r3, #0]
 8011816:	6862      	ldr	r2, [r4, #4]
 8011818:	2100      	movs	r1, #0
 801181a:	4630      	mov	r0, r6
 801181c:	f7ee fce8 	bl	80001f0 <memchr>
 8011820:	b108      	cbz	r0, 8011826 <_printf_i+0x1e6>
 8011822:	1b80      	subs	r0, r0, r6
 8011824:	6060      	str	r0, [r4, #4]
 8011826:	6863      	ldr	r3, [r4, #4]
 8011828:	6123      	str	r3, [r4, #16]
 801182a:	2300      	movs	r3, #0
 801182c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011830:	e7aa      	b.n	8011788 <_printf_i+0x148>
 8011832:	6923      	ldr	r3, [r4, #16]
 8011834:	4632      	mov	r2, r6
 8011836:	4649      	mov	r1, r9
 8011838:	4640      	mov	r0, r8
 801183a:	47d0      	blx	sl
 801183c:	3001      	adds	r0, #1
 801183e:	d0ad      	beq.n	801179c <_printf_i+0x15c>
 8011840:	6823      	ldr	r3, [r4, #0]
 8011842:	079b      	lsls	r3, r3, #30
 8011844:	d413      	bmi.n	801186e <_printf_i+0x22e>
 8011846:	68e0      	ldr	r0, [r4, #12]
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	4298      	cmp	r0, r3
 801184c:	bfb8      	it	lt
 801184e:	4618      	movlt	r0, r3
 8011850:	e7a6      	b.n	80117a0 <_printf_i+0x160>
 8011852:	2301      	movs	r3, #1
 8011854:	4632      	mov	r2, r6
 8011856:	4649      	mov	r1, r9
 8011858:	4640      	mov	r0, r8
 801185a:	47d0      	blx	sl
 801185c:	3001      	adds	r0, #1
 801185e:	d09d      	beq.n	801179c <_printf_i+0x15c>
 8011860:	3501      	adds	r5, #1
 8011862:	68e3      	ldr	r3, [r4, #12]
 8011864:	9903      	ldr	r1, [sp, #12]
 8011866:	1a5b      	subs	r3, r3, r1
 8011868:	42ab      	cmp	r3, r5
 801186a:	dcf2      	bgt.n	8011852 <_printf_i+0x212>
 801186c:	e7eb      	b.n	8011846 <_printf_i+0x206>
 801186e:	2500      	movs	r5, #0
 8011870:	f104 0619 	add.w	r6, r4, #25
 8011874:	e7f5      	b.n	8011862 <_printf_i+0x222>
 8011876:	bf00      	nop
 8011878:	08013751 	.word	0x08013751
 801187c:	08013762 	.word	0x08013762

08011880 <__sflush_r>:
 8011880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011888:	0716      	lsls	r6, r2, #28
 801188a:	4605      	mov	r5, r0
 801188c:	460c      	mov	r4, r1
 801188e:	d454      	bmi.n	801193a <__sflush_r+0xba>
 8011890:	684b      	ldr	r3, [r1, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	dc02      	bgt.n	801189c <__sflush_r+0x1c>
 8011896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011898:	2b00      	cmp	r3, #0
 801189a:	dd48      	ble.n	801192e <__sflush_r+0xae>
 801189c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801189e:	2e00      	cmp	r6, #0
 80118a0:	d045      	beq.n	801192e <__sflush_r+0xae>
 80118a2:	2300      	movs	r3, #0
 80118a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80118a8:	682f      	ldr	r7, [r5, #0]
 80118aa:	6a21      	ldr	r1, [r4, #32]
 80118ac:	602b      	str	r3, [r5, #0]
 80118ae:	d030      	beq.n	8011912 <__sflush_r+0x92>
 80118b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80118b2:	89a3      	ldrh	r3, [r4, #12]
 80118b4:	0759      	lsls	r1, r3, #29
 80118b6:	d505      	bpl.n	80118c4 <__sflush_r+0x44>
 80118b8:	6863      	ldr	r3, [r4, #4]
 80118ba:	1ad2      	subs	r2, r2, r3
 80118bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80118be:	b10b      	cbz	r3, 80118c4 <__sflush_r+0x44>
 80118c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80118c2:	1ad2      	subs	r2, r2, r3
 80118c4:	2300      	movs	r3, #0
 80118c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80118c8:	6a21      	ldr	r1, [r4, #32]
 80118ca:	4628      	mov	r0, r5
 80118cc:	47b0      	blx	r6
 80118ce:	1c43      	adds	r3, r0, #1
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	d106      	bne.n	80118e2 <__sflush_r+0x62>
 80118d4:	6829      	ldr	r1, [r5, #0]
 80118d6:	291d      	cmp	r1, #29
 80118d8:	d82b      	bhi.n	8011932 <__sflush_r+0xb2>
 80118da:	4a2a      	ldr	r2, [pc, #168]	@ (8011984 <__sflush_r+0x104>)
 80118dc:	410a      	asrs	r2, r1
 80118de:	07d6      	lsls	r6, r2, #31
 80118e0:	d427      	bmi.n	8011932 <__sflush_r+0xb2>
 80118e2:	2200      	movs	r2, #0
 80118e4:	6062      	str	r2, [r4, #4]
 80118e6:	04d9      	lsls	r1, r3, #19
 80118e8:	6922      	ldr	r2, [r4, #16]
 80118ea:	6022      	str	r2, [r4, #0]
 80118ec:	d504      	bpl.n	80118f8 <__sflush_r+0x78>
 80118ee:	1c42      	adds	r2, r0, #1
 80118f0:	d101      	bne.n	80118f6 <__sflush_r+0x76>
 80118f2:	682b      	ldr	r3, [r5, #0]
 80118f4:	b903      	cbnz	r3, 80118f8 <__sflush_r+0x78>
 80118f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80118f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118fa:	602f      	str	r7, [r5, #0]
 80118fc:	b1b9      	cbz	r1, 801192e <__sflush_r+0xae>
 80118fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011902:	4299      	cmp	r1, r3
 8011904:	d002      	beq.n	801190c <__sflush_r+0x8c>
 8011906:	4628      	mov	r0, r5
 8011908:	f7ff fb48 	bl	8010f9c <_free_r>
 801190c:	2300      	movs	r3, #0
 801190e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011910:	e00d      	b.n	801192e <__sflush_r+0xae>
 8011912:	2301      	movs	r3, #1
 8011914:	4628      	mov	r0, r5
 8011916:	47b0      	blx	r6
 8011918:	4602      	mov	r2, r0
 801191a:	1c50      	adds	r0, r2, #1
 801191c:	d1c9      	bne.n	80118b2 <__sflush_r+0x32>
 801191e:	682b      	ldr	r3, [r5, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d0c6      	beq.n	80118b2 <__sflush_r+0x32>
 8011924:	2b1d      	cmp	r3, #29
 8011926:	d001      	beq.n	801192c <__sflush_r+0xac>
 8011928:	2b16      	cmp	r3, #22
 801192a:	d11e      	bne.n	801196a <__sflush_r+0xea>
 801192c:	602f      	str	r7, [r5, #0]
 801192e:	2000      	movs	r0, #0
 8011930:	e022      	b.n	8011978 <__sflush_r+0xf8>
 8011932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011936:	b21b      	sxth	r3, r3
 8011938:	e01b      	b.n	8011972 <__sflush_r+0xf2>
 801193a:	690f      	ldr	r7, [r1, #16]
 801193c:	2f00      	cmp	r7, #0
 801193e:	d0f6      	beq.n	801192e <__sflush_r+0xae>
 8011940:	0793      	lsls	r3, r2, #30
 8011942:	680e      	ldr	r6, [r1, #0]
 8011944:	bf08      	it	eq
 8011946:	694b      	ldreq	r3, [r1, #20]
 8011948:	600f      	str	r7, [r1, #0]
 801194a:	bf18      	it	ne
 801194c:	2300      	movne	r3, #0
 801194e:	eba6 0807 	sub.w	r8, r6, r7
 8011952:	608b      	str	r3, [r1, #8]
 8011954:	f1b8 0f00 	cmp.w	r8, #0
 8011958:	dde9      	ble.n	801192e <__sflush_r+0xae>
 801195a:	6a21      	ldr	r1, [r4, #32]
 801195c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801195e:	4643      	mov	r3, r8
 8011960:	463a      	mov	r2, r7
 8011962:	4628      	mov	r0, r5
 8011964:	47b0      	blx	r6
 8011966:	2800      	cmp	r0, #0
 8011968:	dc08      	bgt.n	801197c <__sflush_r+0xfc>
 801196a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801196e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011972:	81a3      	strh	r3, [r4, #12]
 8011974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197c:	4407      	add	r7, r0
 801197e:	eba8 0800 	sub.w	r8, r8, r0
 8011982:	e7e7      	b.n	8011954 <__sflush_r+0xd4>
 8011984:	dfbffffe 	.word	0xdfbffffe

08011988 <_fflush_r>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	690b      	ldr	r3, [r1, #16]
 801198c:	4605      	mov	r5, r0
 801198e:	460c      	mov	r4, r1
 8011990:	b913      	cbnz	r3, 8011998 <_fflush_r+0x10>
 8011992:	2500      	movs	r5, #0
 8011994:	4628      	mov	r0, r5
 8011996:	bd38      	pop	{r3, r4, r5, pc}
 8011998:	b118      	cbz	r0, 80119a2 <_fflush_r+0x1a>
 801199a:	6a03      	ldr	r3, [r0, #32]
 801199c:	b90b      	cbnz	r3, 80119a2 <_fflush_r+0x1a>
 801199e:	f7ff f9e3 	bl	8010d68 <__sinit>
 80119a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d0f3      	beq.n	8011992 <_fflush_r+0xa>
 80119aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80119ac:	07d0      	lsls	r0, r2, #31
 80119ae:	d404      	bmi.n	80119ba <_fflush_r+0x32>
 80119b0:	0599      	lsls	r1, r3, #22
 80119b2:	d402      	bmi.n	80119ba <_fflush_r+0x32>
 80119b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119b6:	f7ff fae0 	bl	8010f7a <__retarget_lock_acquire_recursive>
 80119ba:	4628      	mov	r0, r5
 80119bc:	4621      	mov	r1, r4
 80119be:	f7ff ff5f 	bl	8011880 <__sflush_r>
 80119c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119c4:	07da      	lsls	r2, r3, #31
 80119c6:	4605      	mov	r5, r0
 80119c8:	d4e4      	bmi.n	8011994 <_fflush_r+0xc>
 80119ca:	89a3      	ldrh	r3, [r4, #12]
 80119cc:	059b      	lsls	r3, r3, #22
 80119ce:	d4e1      	bmi.n	8011994 <_fflush_r+0xc>
 80119d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119d2:	f7ff fad3 	bl	8010f7c <__retarget_lock_release_recursive>
 80119d6:	e7dd      	b.n	8011994 <_fflush_r+0xc>

080119d8 <__sread>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	460c      	mov	r4, r1
 80119dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119e0:	f000 f9c0 	bl	8011d64 <_read_r>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	bfab      	itete	ge
 80119e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80119ea:	89a3      	ldrhlt	r3, [r4, #12]
 80119ec:	181b      	addge	r3, r3, r0
 80119ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80119f2:	bfac      	ite	ge
 80119f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80119f6:	81a3      	strhlt	r3, [r4, #12]
 80119f8:	bd10      	pop	{r4, pc}

080119fa <__swrite>:
 80119fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fe:	461f      	mov	r7, r3
 8011a00:	898b      	ldrh	r3, [r1, #12]
 8011a02:	05db      	lsls	r3, r3, #23
 8011a04:	4605      	mov	r5, r0
 8011a06:	460c      	mov	r4, r1
 8011a08:	4616      	mov	r6, r2
 8011a0a:	d505      	bpl.n	8011a18 <__swrite+0x1e>
 8011a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a10:	2302      	movs	r3, #2
 8011a12:	2200      	movs	r2, #0
 8011a14:	f000 f994 	bl	8011d40 <_lseek_r>
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a22:	81a3      	strh	r3, [r4, #12]
 8011a24:	4632      	mov	r2, r6
 8011a26:	463b      	mov	r3, r7
 8011a28:	4628      	mov	r0, r5
 8011a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2e:	f000 b9ab 	b.w	8011d88 <_write_r>

08011a32 <__sseek>:
 8011a32:	b510      	push	{r4, lr}
 8011a34:	460c      	mov	r4, r1
 8011a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a3a:	f000 f981 	bl	8011d40 <_lseek_r>
 8011a3e:	1c43      	adds	r3, r0, #1
 8011a40:	89a3      	ldrh	r3, [r4, #12]
 8011a42:	bf15      	itete	ne
 8011a44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011a46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011a4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011a4e:	81a3      	strheq	r3, [r4, #12]
 8011a50:	bf18      	it	ne
 8011a52:	81a3      	strhne	r3, [r4, #12]
 8011a54:	bd10      	pop	{r4, pc}

08011a56 <__sclose>:
 8011a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a5a:	f000 b93f 	b.w	8011cdc <_close_r>

08011a5e <_realloc_r>:
 8011a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a62:	4680      	mov	r8, r0
 8011a64:	4615      	mov	r5, r2
 8011a66:	460c      	mov	r4, r1
 8011a68:	b921      	cbnz	r1, 8011a74 <_realloc_r+0x16>
 8011a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a6e:	4611      	mov	r1, r2
 8011a70:	f7ff b842 	b.w	8010af8 <_malloc_r>
 8011a74:	b92a      	cbnz	r2, 8011a82 <_realloc_r+0x24>
 8011a76:	f7ff fa91 	bl	8010f9c <_free_r>
 8011a7a:	2400      	movs	r4, #0
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a82:	f000 f993 	bl	8011dac <_malloc_usable_size_r>
 8011a86:	4285      	cmp	r5, r0
 8011a88:	4606      	mov	r6, r0
 8011a8a:	d802      	bhi.n	8011a92 <_realloc_r+0x34>
 8011a8c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011a90:	d8f4      	bhi.n	8011a7c <_realloc_r+0x1e>
 8011a92:	4629      	mov	r1, r5
 8011a94:	4640      	mov	r0, r8
 8011a96:	f7ff f82f 	bl	8010af8 <_malloc_r>
 8011a9a:	4607      	mov	r7, r0
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d0ec      	beq.n	8011a7a <_realloc_r+0x1c>
 8011aa0:	42b5      	cmp	r5, r6
 8011aa2:	462a      	mov	r2, r5
 8011aa4:	4621      	mov	r1, r4
 8011aa6:	bf28      	it	cs
 8011aa8:	4632      	movcs	r2, r6
 8011aaa:	f7ff fa68 	bl	8010f7e <memcpy>
 8011aae:	4621      	mov	r1, r4
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	f7ff fa73 	bl	8010f9c <_free_r>
 8011ab6:	463c      	mov	r4, r7
 8011ab8:	e7e0      	b.n	8011a7c <_realloc_r+0x1e>

08011aba <__swbuf_r>:
 8011aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011abc:	460e      	mov	r6, r1
 8011abe:	4614      	mov	r4, r2
 8011ac0:	4605      	mov	r5, r0
 8011ac2:	b118      	cbz	r0, 8011acc <__swbuf_r+0x12>
 8011ac4:	6a03      	ldr	r3, [r0, #32]
 8011ac6:	b90b      	cbnz	r3, 8011acc <__swbuf_r+0x12>
 8011ac8:	f7ff f94e 	bl	8010d68 <__sinit>
 8011acc:	69a3      	ldr	r3, [r4, #24]
 8011ace:	60a3      	str	r3, [r4, #8]
 8011ad0:	89a3      	ldrh	r3, [r4, #12]
 8011ad2:	071a      	lsls	r2, r3, #28
 8011ad4:	d501      	bpl.n	8011ada <__swbuf_r+0x20>
 8011ad6:	6923      	ldr	r3, [r4, #16]
 8011ad8:	b943      	cbnz	r3, 8011aec <__swbuf_r+0x32>
 8011ada:	4621      	mov	r1, r4
 8011adc:	4628      	mov	r0, r5
 8011ade:	f000 f82b 	bl	8011b38 <__swsetup_r>
 8011ae2:	b118      	cbz	r0, 8011aec <__swbuf_r+0x32>
 8011ae4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011ae8:	4638      	mov	r0, r7
 8011aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aec:	6823      	ldr	r3, [r4, #0]
 8011aee:	6922      	ldr	r2, [r4, #16]
 8011af0:	1a98      	subs	r0, r3, r2
 8011af2:	6963      	ldr	r3, [r4, #20]
 8011af4:	b2f6      	uxtb	r6, r6
 8011af6:	4283      	cmp	r3, r0
 8011af8:	4637      	mov	r7, r6
 8011afa:	dc05      	bgt.n	8011b08 <__swbuf_r+0x4e>
 8011afc:	4621      	mov	r1, r4
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7ff ff42 	bl	8011988 <_fflush_r>
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d1ed      	bne.n	8011ae4 <__swbuf_r+0x2a>
 8011b08:	68a3      	ldr	r3, [r4, #8]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	60a3      	str	r3, [r4, #8]
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	1c5a      	adds	r2, r3, #1
 8011b12:	6022      	str	r2, [r4, #0]
 8011b14:	701e      	strb	r6, [r3, #0]
 8011b16:	6962      	ldr	r2, [r4, #20]
 8011b18:	1c43      	adds	r3, r0, #1
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d004      	beq.n	8011b28 <__swbuf_r+0x6e>
 8011b1e:	89a3      	ldrh	r3, [r4, #12]
 8011b20:	07db      	lsls	r3, r3, #31
 8011b22:	d5e1      	bpl.n	8011ae8 <__swbuf_r+0x2e>
 8011b24:	2e0a      	cmp	r6, #10
 8011b26:	d1df      	bne.n	8011ae8 <__swbuf_r+0x2e>
 8011b28:	4621      	mov	r1, r4
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	f7ff ff2c 	bl	8011988 <_fflush_r>
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d0d9      	beq.n	8011ae8 <__swbuf_r+0x2e>
 8011b34:	e7d6      	b.n	8011ae4 <__swbuf_r+0x2a>
	...

08011b38 <__swsetup_r>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	4b29      	ldr	r3, [pc, #164]	@ (8011be0 <__swsetup_r+0xa8>)
 8011b3c:	4605      	mov	r5, r0
 8011b3e:	6818      	ldr	r0, [r3, #0]
 8011b40:	460c      	mov	r4, r1
 8011b42:	b118      	cbz	r0, 8011b4c <__swsetup_r+0x14>
 8011b44:	6a03      	ldr	r3, [r0, #32]
 8011b46:	b90b      	cbnz	r3, 8011b4c <__swsetup_r+0x14>
 8011b48:	f7ff f90e 	bl	8010d68 <__sinit>
 8011b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b50:	0719      	lsls	r1, r3, #28
 8011b52:	d422      	bmi.n	8011b9a <__swsetup_r+0x62>
 8011b54:	06da      	lsls	r2, r3, #27
 8011b56:	d407      	bmi.n	8011b68 <__swsetup_r+0x30>
 8011b58:	2209      	movs	r2, #9
 8011b5a:	602a      	str	r2, [r5, #0]
 8011b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b60:	81a3      	strh	r3, [r4, #12]
 8011b62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b66:	e033      	b.n	8011bd0 <__swsetup_r+0x98>
 8011b68:	0758      	lsls	r0, r3, #29
 8011b6a:	d512      	bpl.n	8011b92 <__swsetup_r+0x5a>
 8011b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b6e:	b141      	cbz	r1, 8011b82 <__swsetup_r+0x4a>
 8011b70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b74:	4299      	cmp	r1, r3
 8011b76:	d002      	beq.n	8011b7e <__swsetup_r+0x46>
 8011b78:	4628      	mov	r0, r5
 8011b7a:	f7ff fa0f 	bl	8010f9c <_free_r>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011b88:	81a3      	strh	r3, [r4, #12]
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	6063      	str	r3, [r4, #4]
 8011b8e:	6923      	ldr	r3, [r4, #16]
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	89a3      	ldrh	r3, [r4, #12]
 8011b94:	f043 0308 	orr.w	r3, r3, #8
 8011b98:	81a3      	strh	r3, [r4, #12]
 8011b9a:	6923      	ldr	r3, [r4, #16]
 8011b9c:	b94b      	cbnz	r3, 8011bb2 <__swsetup_r+0x7a>
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ba8:	d003      	beq.n	8011bb2 <__swsetup_r+0x7a>
 8011baa:	4621      	mov	r1, r4
 8011bac:	4628      	mov	r0, r5
 8011bae:	f000 f83f 	bl	8011c30 <__smakebuf_r>
 8011bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bb6:	f013 0201 	ands.w	r2, r3, #1
 8011bba:	d00a      	beq.n	8011bd2 <__swsetup_r+0x9a>
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	60a2      	str	r2, [r4, #8]
 8011bc0:	6962      	ldr	r2, [r4, #20]
 8011bc2:	4252      	negs	r2, r2
 8011bc4:	61a2      	str	r2, [r4, #24]
 8011bc6:	6922      	ldr	r2, [r4, #16]
 8011bc8:	b942      	cbnz	r2, 8011bdc <__swsetup_r+0xa4>
 8011bca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011bce:	d1c5      	bne.n	8011b5c <__swsetup_r+0x24>
 8011bd0:	bd38      	pop	{r3, r4, r5, pc}
 8011bd2:	0799      	lsls	r1, r3, #30
 8011bd4:	bf58      	it	pl
 8011bd6:	6962      	ldrpl	r2, [r4, #20]
 8011bd8:	60a2      	str	r2, [r4, #8]
 8011bda:	e7f4      	b.n	8011bc6 <__swsetup_r+0x8e>
 8011bdc:	2000      	movs	r0, #0
 8011bde:	e7f7      	b.n	8011bd0 <__swsetup_r+0x98>
 8011be0:	20000570 	.word	0x20000570

08011be4 <__swhatbuf_r>:
 8011be4:	b570      	push	{r4, r5, r6, lr}
 8011be6:	460c      	mov	r4, r1
 8011be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bec:	2900      	cmp	r1, #0
 8011bee:	b096      	sub	sp, #88	@ 0x58
 8011bf0:	4615      	mov	r5, r2
 8011bf2:	461e      	mov	r6, r3
 8011bf4:	da0d      	bge.n	8011c12 <__swhatbuf_r+0x2e>
 8011bf6:	89a3      	ldrh	r3, [r4, #12]
 8011bf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011bfc:	f04f 0100 	mov.w	r1, #0
 8011c00:	bf14      	ite	ne
 8011c02:	2340      	movne	r3, #64	@ 0x40
 8011c04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011c08:	2000      	movs	r0, #0
 8011c0a:	6031      	str	r1, [r6, #0]
 8011c0c:	602b      	str	r3, [r5, #0]
 8011c0e:	b016      	add	sp, #88	@ 0x58
 8011c10:	bd70      	pop	{r4, r5, r6, pc}
 8011c12:	466a      	mov	r2, sp
 8011c14:	f000 f872 	bl	8011cfc <_fstat_r>
 8011c18:	2800      	cmp	r0, #0
 8011c1a:	dbec      	blt.n	8011bf6 <__swhatbuf_r+0x12>
 8011c1c:	9901      	ldr	r1, [sp, #4]
 8011c1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c26:	4259      	negs	r1, r3
 8011c28:	4159      	adcs	r1, r3
 8011c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c2e:	e7eb      	b.n	8011c08 <__swhatbuf_r+0x24>

08011c30 <__smakebuf_r>:
 8011c30:	898b      	ldrh	r3, [r1, #12]
 8011c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c34:	079d      	lsls	r5, r3, #30
 8011c36:	4606      	mov	r6, r0
 8011c38:	460c      	mov	r4, r1
 8011c3a:	d507      	bpl.n	8011c4c <__smakebuf_r+0x1c>
 8011c3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	6123      	str	r3, [r4, #16]
 8011c44:	2301      	movs	r3, #1
 8011c46:	6163      	str	r3, [r4, #20]
 8011c48:	b003      	add	sp, #12
 8011c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c4c:	ab01      	add	r3, sp, #4
 8011c4e:	466a      	mov	r2, sp
 8011c50:	f7ff ffc8 	bl	8011be4 <__swhatbuf_r>
 8011c54:	9f00      	ldr	r7, [sp, #0]
 8011c56:	4605      	mov	r5, r0
 8011c58:	4639      	mov	r1, r7
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	f7fe ff4c 	bl	8010af8 <_malloc_r>
 8011c60:	b948      	cbnz	r0, 8011c76 <__smakebuf_r+0x46>
 8011c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c66:	059a      	lsls	r2, r3, #22
 8011c68:	d4ee      	bmi.n	8011c48 <__smakebuf_r+0x18>
 8011c6a:	f023 0303 	bic.w	r3, r3, #3
 8011c6e:	f043 0302 	orr.w	r3, r3, #2
 8011c72:	81a3      	strh	r3, [r4, #12]
 8011c74:	e7e2      	b.n	8011c3c <__smakebuf_r+0xc>
 8011c76:	89a3      	ldrh	r3, [r4, #12]
 8011c78:	6020      	str	r0, [r4, #0]
 8011c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c7e:	81a3      	strh	r3, [r4, #12]
 8011c80:	9b01      	ldr	r3, [sp, #4]
 8011c82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c86:	b15b      	cbz	r3, 8011ca0 <__smakebuf_r+0x70>
 8011c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f000 f847 	bl	8011d20 <_isatty_r>
 8011c92:	b128      	cbz	r0, 8011ca0 <__smakebuf_r+0x70>
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	f023 0303 	bic.w	r3, r3, #3
 8011c9a:	f043 0301 	orr.w	r3, r3, #1
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	431d      	orrs	r5, r3
 8011ca4:	81a5      	strh	r5, [r4, #12]
 8011ca6:	e7cf      	b.n	8011c48 <__smakebuf_r+0x18>

08011ca8 <memmove>:
 8011ca8:	4288      	cmp	r0, r1
 8011caa:	b510      	push	{r4, lr}
 8011cac:	eb01 0402 	add.w	r4, r1, r2
 8011cb0:	d902      	bls.n	8011cb8 <memmove+0x10>
 8011cb2:	4284      	cmp	r4, r0
 8011cb4:	4623      	mov	r3, r4
 8011cb6:	d807      	bhi.n	8011cc8 <memmove+0x20>
 8011cb8:	1e43      	subs	r3, r0, #1
 8011cba:	42a1      	cmp	r1, r4
 8011cbc:	d008      	beq.n	8011cd0 <memmove+0x28>
 8011cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011cc6:	e7f8      	b.n	8011cba <memmove+0x12>
 8011cc8:	4402      	add	r2, r0
 8011cca:	4601      	mov	r1, r0
 8011ccc:	428a      	cmp	r2, r1
 8011cce:	d100      	bne.n	8011cd2 <memmove+0x2a>
 8011cd0:	bd10      	pop	{r4, pc}
 8011cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011cda:	e7f7      	b.n	8011ccc <memmove+0x24>

08011cdc <_close_r>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	4d06      	ldr	r5, [pc, #24]	@ (8011cf8 <_close_r+0x1c>)
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	4604      	mov	r4, r0
 8011ce4:	4608      	mov	r0, r1
 8011ce6:	602b      	str	r3, [r5, #0]
 8011ce8:	f7f8 f839 	bl	8009d5e <_close>
 8011cec:	1c43      	adds	r3, r0, #1
 8011cee:	d102      	bne.n	8011cf6 <_close_r+0x1a>
 8011cf0:	682b      	ldr	r3, [r5, #0]
 8011cf2:	b103      	cbz	r3, 8011cf6 <_close_r+0x1a>
 8011cf4:	6023      	str	r3, [r4, #0]
 8011cf6:	bd38      	pop	{r3, r4, r5, pc}
 8011cf8:	200013a0 	.word	0x200013a0

08011cfc <_fstat_r>:
 8011cfc:	b538      	push	{r3, r4, r5, lr}
 8011cfe:	4d07      	ldr	r5, [pc, #28]	@ (8011d1c <_fstat_r+0x20>)
 8011d00:	2300      	movs	r3, #0
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	4611      	mov	r1, r2
 8011d08:	602b      	str	r3, [r5, #0]
 8011d0a:	f7f8 f834 	bl	8009d76 <_fstat>
 8011d0e:	1c43      	adds	r3, r0, #1
 8011d10:	d102      	bne.n	8011d18 <_fstat_r+0x1c>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	b103      	cbz	r3, 8011d18 <_fstat_r+0x1c>
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	bd38      	pop	{r3, r4, r5, pc}
 8011d1a:	bf00      	nop
 8011d1c:	200013a0 	.word	0x200013a0

08011d20 <_isatty_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4d06      	ldr	r5, [pc, #24]	@ (8011d3c <_isatty_r+0x1c>)
 8011d24:	2300      	movs	r3, #0
 8011d26:	4604      	mov	r4, r0
 8011d28:	4608      	mov	r0, r1
 8011d2a:	602b      	str	r3, [r5, #0]
 8011d2c:	f7f8 f833 	bl	8009d96 <_isatty>
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	d102      	bne.n	8011d3a <_isatty_r+0x1a>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	b103      	cbz	r3, 8011d3a <_isatty_r+0x1a>
 8011d38:	6023      	str	r3, [r4, #0]
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}
 8011d3c:	200013a0 	.word	0x200013a0

08011d40 <_lseek_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d07      	ldr	r5, [pc, #28]	@ (8011d60 <_lseek_r+0x20>)
 8011d44:	4604      	mov	r4, r0
 8011d46:	4608      	mov	r0, r1
 8011d48:	4611      	mov	r1, r2
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	602a      	str	r2, [r5, #0]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f7f8 f82c 	bl	8009dac <_lseek>
 8011d54:	1c43      	adds	r3, r0, #1
 8011d56:	d102      	bne.n	8011d5e <_lseek_r+0x1e>
 8011d58:	682b      	ldr	r3, [r5, #0]
 8011d5a:	b103      	cbz	r3, 8011d5e <_lseek_r+0x1e>
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}
 8011d60:	200013a0 	.word	0x200013a0

08011d64 <_read_r>:
 8011d64:	b538      	push	{r3, r4, r5, lr}
 8011d66:	4d07      	ldr	r5, [pc, #28]	@ (8011d84 <_read_r+0x20>)
 8011d68:	4604      	mov	r4, r0
 8011d6a:	4608      	mov	r0, r1
 8011d6c:	4611      	mov	r1, r2
 8011d6e:	2200      	movs	r2, #0
 8011d70:	602a      	str	r2, [r5, #0]
 8011d72:	461a      	mov	r2, r3
 8011d74:	f7f7 ffba 	bl	8009cec <_read>
 8011d78:	1c43      	adds	r3, r0, #1
 8011d7a:	d102      	bne.n	8011d82 <_read_r+0x1e>
 8011d7c:	682b      	ldr	r3, [r5, #0]
 8011d7e:	b103      	cbz	r3, 8011d82 <_read_r+0x1e>
 8011d80:	6023      	str	r3, [r4, #0]
 8011d82:	bd38      	pop	{r3, r4, r5, pc}
 8011d84:	200013a0 	.word	0x200013a0

08011d88 <_write_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d07      	ldr	r5, [pc, #28]	@ (8011da8 <_write_r+0x20>)
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	4608      	mov	r0, r1
 8011d90:	4611      	mov	r1, r2
 8011d92:	2200      	movs	r2, #0
 8011d94:	602a      	str	r2, [r5, #0]
 8011d96:	461a      	mov	r2, r3
 8011d98:	f7f7 ffc5 	bl	8009d26 <_write>
 8011d9c:	1c43      	adds	r3, r0, #1
 8011d9e:	d102      	bne.n	8011da6 <_write_r+0x1e>
 8011da0:	682b      	ldr	r3, [r5, #0]
 8011da2:	b103      	cbz	r3, 8011da6 <_write_r+0x1e>
 8011da4:	6023      	str	r3, [r4, #0]
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
 8011da8:	200013a0 	.word	0x200013a0

08011dac <_malloc_usable_size_r>:
 8011dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011db0:	1f18      	subs	r0, r3, #4
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	bfbc      	itt	lt
 8011db6:	580b      	ldrlt	r3, [r1, r0]
 8011db8:	18c0      	addlt	r0, r0, r3
 8011dba:	4770      	bx	lr

08011dbc <_init>:
 8011dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dbe:	bf00      	nop
 8011dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dc2:	bc08      	pop	{r3}
 8011dc4:	469e      	mov	lr, r3
 8011dc6:	4770      	bx	lr

08011dc8 <_fini>:
 8011dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dca:	bf00      	nop
 8011dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dce:	bc08      	pop	{r3}
 8011dd0:	469e      	mov	lr, r3
 8011dd2:	4770      	bx	lr
